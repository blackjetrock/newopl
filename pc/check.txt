


IF CP%=1 
(CP% := 1)


A$="1317B01.B01E03L." 
(A$ := "1317B01.B01E03L.")


ELSEIF CP%=2 
(CP% := 2)


A$="1317A17C01C02.I02B02D03K18E10O." 
(A$ := "1317A17C01C02.I02B02D03K18E10O.")


ELSEIF CP%=3 
(CP% := 3)


A$="3218B03.D05N." 
(A$ := "3218B03.D05N.")


ELSEIF CP%=4 
(CP% := 4)


A$="1319B05.B05L." 
(A$ := "1319B05.B05L.")


ELSEIF CP%=5 
(CP% := 5)


A$="1320B06.B06L." 
(A$ := "1320B06.B06L.")


ELSEIF CP%=6 
(CP% := 6)


A$="2900A14E07.D04N." 
(A$ := "2900A14E07.D04N.")


ELSEIF CP%=7 
(CP% := 7)


A$="2900A14.E07M." 
(A$ := "2900A14.E07M.")


ELSEIF CP%=8 
(CP% := 8)


A$="1322B08.B08L." 
(A$ := "1322B08.B08L.")


ELSEIF CP%=9 
(CP% := 9)


A$="1323B09.B09L." 
(A$ := "1323B09.B09L.")


ELSEIF CP%=10 
(CP% := 10)


A$="1417B01.C01F03L." 
(A$ := "1417B01.C01F03L.")


ELSEIF CP%=11 
(CP% := 11)


A$="1417B02.C02L." 
(A$ := "1417B02.C02L.")


ELSEIF CP%=12 
(CP% := 12)


A$="1419B05.C05L." 
(A$ := "1419B05.C05L.")


ELSEIF CP%=13 
(CP% := 13)


A$="1420B06.C06L." 
(A$ := "1420B06.C06L.")


ELSEIF CP%=14 
(CP% := 14)


A$="1422B08.C08L." 
(A$ := "1422B08.C08L.")


ELSEIF CP%=15 
(CP% := 15)


A$="1423B09.C09L." 
(A$ := "1423B09.C09L.")


ELSEIF CP%=16 
(CP% := 16)


A$="0500A10C10.D10M." 
(A$ := "0500A10C10.D10M.")


ELSEIF CP%=17 
(CP% := 17)


A$="0500A08C10.D10M." 
(A$ := "0500A08C10.D10M.")


ELSEIF CP%=18 
(CP% := 18)


A$="0500A10.K11O." 
(A$ := "0500A10.K11O.")


ELSEIF CP%=19 
(CP% := 19)


A$="0500A08.K19O." 
(A$ := "0500A08.K19O.")


ELSEIF CP%=20 
(CP% := 20)


A$="0500A15.F02K14O." 
(A$ := "0500A15.F02K14O.")


ELSEIF CP%=21 
(CP% := 21)


A$="0600A14.E02K15O." 
(A$ := "0600A14.E02K15O.")


ELSEIF CP%=22 
(CP% := 22)


A$="3100D02.H01E03L." 
(A$ := "3100D02.H01E03L.")


ELSEIF CP%=23 
(CP% := 23)


A$="3100B01.D11N." 
(A$ := "3100B01.D11N.")


ELSEIF CP%=24 
(CP% := 24)


A$="3219B04B06.H04J06B05L." 
(A$ := "3219B04B06.H04J06B05L.")


ELSEIF CP%=25 
(CP% := 25)


A$="3219B04B09.H04D06B05M." 
(A$ := "3219B04B09.H04D06B05M.")


ELSEIF CP%=26 
(CP% := 26)


A$="3000B05B11B08.D12I10J08J11M." 
(A$ := "3000B05B11B08.D12I10J08J11M.")


ELSEIF CP%=27 
(CP% := 27)


A$="1333B11.B11L." 
(A$ := "1333B11.B11L.")


ELSEIF CP%=28 
(CP% := 28)


A$="1433B11.C11L." 
(A$ := "1433B11.C11L.")


ELSEIF CP%=29 
(CP% := 29)


A$="1500A02.K03O." 
(A$ := "1500A02.K03O.")


ELSEIF CP%=30 
(CP% := 30)


A$="1500A12.K13O." 
(A$ := "1500A12.K13O.")


ELSEIF CP%=31 
(CP% := 31)


A$="1500A18F10.K17O." 
(A$ := "1500A18F10.K17O.")


ELSEIF CP%=32 
(CP% := 32)


A$="1600A03.K02O." 
(A$ := "1600A03.K02O.")


ELSEIF CP%=33 
(CP% := 33)


A$="1600A13.K12O." 
(A$ := "1600A13.K12O.")


ELSEIF CP%=34 
(CP% := 34)


A$="1600A17.K18O." 
(A$ := "1600A17.K18O.")


ELSEIF CP%=35 
(CP% := 35)


A$="1500A05.K06O." 
(A$ := "1500A05.K06O.")


ELSEIF CP%=36 
(CP% := 36)


A$="3400A03.D09M." 
(A$ := "3400A03.D09M.")


ELSEIF CP%=37 
(CP% := 37)


A$="3400A13E08.D14M." 
(A$ := "3400A13E08.D14M.")


ELSEIF CP%=38 
(CP% := 38)


A$="3400A13.E08D13I06B06M." 
(A$ := "3400A13.E08D13I06B06M.")


ELSEIF CP%=39 
(CP% := 39)


A$="1500A18E10.D16M." 
(A$ := "1500A18E10.D16M.")


ELSEIF CP%=40 
(CP% := 40)


A$="1318B10.B10L." 
(A$ := "1318B10.B10L.")


ELSEIF CP%=41 
(CP% := 41)


A$="1418B10.C10L." 
(A$ := "1418B10.C10L.")


ELSEIF CP%=42 
(CP% := 42)


A$="1318B03.D09M." 
(A$ := "1318B03.D09M.")


ELSEIF CP%=43 
(CP% := 43)


A$="1317B02.B02L." 
(A$ := "1317B02.B02L.")


ELSEIF CP%=44 
(CP% := 44)


A$="3500.A." 
(A$ := "3500.A.")


ELSEIF CP%=45 
(CP% := 45)


A$="3600.P." 
(A$ := "3600.P.")


ELSEIF CP%=46 
(CP% := 46)


A$="3700.O." 
(A$ := "3700.O.")


ELSEIF CP%=47 
(CP% := 47)


A$="5000.N." 
(A$ := "5000.N.")


ENDIF 
ENDIF()


RETURNA14: 



Q%(1)=0:O$(1)="A LIGHTED TORCH" 
(Q%(1) := 0)


Q%(1)=0:O$(1)="A LIGHTED TORCH" 
(O$(1) := "A LIGHTED TORCH")


Q%(2)=0:O$(2)="A TORCH" 
(Q%(2) := 0)


Q%(2)=0:O$(2)="A TORCH" 
(O$(2) := "A TORCH")


Q%(3)=3:O$(3)="A LADDER" 
(Q%(3) := 3)


Q%(3)=3:O$(3)="A LADDER" 
(O$(3) := "A LADDER")


Q%(4)=3:O$(4)="A HAMMER" 
(Q%(4) := 3)


Q%(4)=3:O$(4)="A HAMMER" 
(O$(4) := "A HAMMER")


Q%(5)=0:O$(5)="A HAMMER" 
(Q%(5) := 0)


Q%(5)=0:O$(5)="A HAMMER" 
(O$(5) := "A HAMMER")


Q%(6)=0:O$(6)="A WAD OF NOTES" 
(Q%(6) := 0)


Q%(6)=0:O$(6)="A WAD OF NOTES" 
(O$(6) := "A WAD OF NOTES")


Q%(7)=0:O$(7)="MANHOLE COVER" 
(Q%(7) := 0)


Q%(7)=0:O$(7)="MANHOLE COVER" 
(O$(7) := "MANHOLE COVER")


Q%(8)=15:O$(8)="A BAG OF NAILS" 
(Q%(8) := 15)


Q%(8)=15:O$(8)="A BAG OF NAILS" 
(O$(8) := "A BAG OF NAILS")


Q%(9)=16:O$(9)="A BARCLAYCARD" 
(Q%(9) := 16)


Q%(9)=16:O$(9)="A BARCLAYCARD" 
(O$(9) := "A BARCLAYCARD")


Q%(10)=0:O$(10)="A ROUGH LADDER" 
(Q%(10) := 0)


Q%(10)=0:O$(10)="A ROUGH LADDER" 
(O$(10) := "A ROUGH LADDER")


Q%(11)=4:O$(11)="SOME WOOD" 
(Q%(11) := 4)


Q%(11)=4:O$(11)="SOME WOOD" 
(O$(11) := "SOME WOOD")


V$(1)="01N" 
(V$(1) := "01N")


V$(2)="01NORT" 
(V$(2) := "01NORT")


V$(3)="02E" 
(V$(3) := "02E")


V$(4)="02EAST" 
(V$(4) := "02EAST")


V$(5)="03S" 
(V$(5) := "03S")


V$(6)="03SOUT" 
(V$(6) := "03SOUT")


V$(7)="04W" 
(V$(7) := "04W")


V$(8)="04WEST" 
(V$(8) := "04WEST")


V$(9)="05U" 
(V$(9) := "05U")


V$(10)="05UP" 
(V$(10) := "05UP")


V$(11)="06D" 
(V$(11) := "06D")


V$(12)="06DOWN" 
(V$(12) := "06DOWN")


V$(13)="13TAKE" 
(V$(13) := "13TAKE")


V$(14)="14PUT" 
(V$(14) := "14PUT")


V$(15)="14DROP" 
(V$(15) := "14DROP")


V$(16)="15ENTE" 
(V$(16) := "15ENTE")


V$(17)="15IN" 
(V$(17) := "15IN")


V$(18)="16OUT" 
(V$(18) := "16OUT")


V$(19)="16EXIT" 
(V$(19) := "16EXIT")


V$(20)="16LEAV" 
(V$(20) := "16LEAV")


V$(21)="17TORC" 
(V$(21) := "17TORC")


V$(22)="18LADD" 
(V$(22) := "18LADD")


V$(23)="19HAMM" 
(V$(23) := "19HAMM")


V$(24)="20WAD" 
(V$(24) := "20WAD")


V$(25)="20NOTE" 
(V$(25) := "20NOTE")


V$(26)="22BAG" 
(V$(26) := "22BAG")


V$(27)="22NAIL" 
(V$(27) := "22NAIL")


V$(28)="23BARC" 
(V$(28) := "23BARC")


V$(29)="05SCAL" 
(V$(29) := "05SCAL")


V$(30)="05CLIM" 
(V$(30) := "05CLIM")


V$(31)="29OPEN" 
(V$(31) := "29OPEN")


V$(32)="29LIFT" 
(V$(32) := "29LIFT")


V$(33)="30MAKE" 
(V$(33) := "30MAKE")


V$(34)="30BUIL" 
(V$(34) := "30BUIL")


V$(35)="31SWIT" 
(V$(35) := "31SWIT")


V$(36)="31LIGH" 
(V$(36) := "31LIGH")


V$(37)="32BUY" 
(V$(37) := "32BUY")


V$(38)="33WOOD" 
(V$(38) := "33WOOD")


V$(39)="34ROB" 
(V$(39) := "34ROB")


V$(40)="34STEA" 
(V$(40) := "34STEA")


V$(41)="35INVE" 
(V$(41) := "35INVE")


V$(42)="36QUIT" 
(V$(42) := "36QUIT")


V$(43)="37LOOK" 
(V$(43) := "37LOOK")


M$(1)="00" 
(M$(1) := "00")


M$(2)="01040209041800" 
(M$(2) := "01040209041800")


M$(3)="00" 
(M$(3) := "00")


M$(4)="0202050500" 
(M$(4) := "0202050500")


M$(5)="0604040700" 
(M$(5) := "0604040700")


M$(6)="00" 
(M$(6) := "00")


M$(7)="0108030500" 
(M$(7) := "0108030500")


M$(8)="030700" 
(M$(8) := "030700")


M$(9)="011202100314040200" 
(M$(9) := "011202100314040200")


M$(10)="040900" 
(M$(10) := "040900")


M$(11)="00" 
(M$(11) := "00")


M$(12)="0209041800" 
(M$(12) := "0209041800")


M$(13)="00" 
(M$(13) := "00")


M$(14)="010900" 
(M$(14) := "010900")


M$(15)="031600" 
(M$(15) := "031600")


M$(16)="011500" 
(M$(16) := "011500")


M$(17)="00" 
(M$(17) := "00")


M$(18)="0112020200" 
(M$(18) := "0112020200")


M$(19)="00" 
(M$(19) := "00")


C$(1)="A01.K02O." 
(C$(1) := "A01.K02O.")


C$(2)="A16H30.G0121." 
(C$(2) := "A16H30.G0121.")


C$(3)="G01.D01Q." 
(C$(3) := "G01.D01Q.")


C$(4)="B06H10.D02J06." 
(C$(4) := "B06H10.D02J06.")


C$(5)="A14E07.D07N." 
(C$(5) := "A14E07.D07N.")


C$(6)="A14F07.D08N." 
(C$(6) := "A14F07.D08N.")


C$(7)="A11.Q." 
(C$(7) := "A11.Q.")


C$(8)="A19.Q." 
(C$(8) := "A19.Q.")


C$(9)="A06.K03O." 
(C$(9) := "A06.K03O.")


C$(10)=".N." 
(C$(10) := ".N.")


ACRES: 



IF C%<0 
(C% < 0)


B%=VIEW(2,"GOODBYE!") 
(B% := VIEW(2 "GOODBYE!" ))


PAUSE 30 
PAUSE(30 )


STOP 
STOP()


ENDIF 
ENDIF()


C%=C%-1 
(C% := (C% - 1))


B%=VIEW(1,"BUT YOU HAVE ONLY "+GEN$(A%,4)+" ACRES.") 
(B% := VIEW(1 ("BUT YOU HAVE ONLY " + (GEN$(A% 4 ) + " ACRES.")) ))


addtop:(item$,pos%) 



IF LEN(item$)>8 
(LEN(item$ ) > 8)


RAISE 202 
RAISE(202 )


ENDIF 
ENDIF()


POKEB $2187,LEN(item$) 
POKEB(8583 LEN(item$ ) )


I%=1 
(I% := 1)


WHILE I%<=LEN(item$) 
((WHILE() < I%) := LEN(item$ ))


POKEB $2187+I%,ASC(MID$(item$,I%,1)) 
POKEB((8583 + I%) ASC(MID$(item$ I% 1 ) ) )


I%=I%+1 
(I% := (I% + 1))


ENDWH 
ENDWH()


POKEW $2188+LEN(item$),0 
POKEW((8584 + LEN(item$ )) 0 )


A%(1)=$3F65 
(A%(1) := 16229)


A%(2)=$3900 
(A%(2) := 14592)


USR(ADDR(A%()),pos%) 
USR(ADDR(A%() ) pos% )


ALZAN: 



A1%=47 
(A1% := 47)


O1%=11 
(O1% := 11)


A14: 



ROOM%=1 
(ROOM% := 1)


S%(2)=0 
(S%(2) := 0)


I%=0 
(I% := 0)


DO 
DO()


I%=I%+1 
(I% := (I% + 1))


O%(I%)=Q%(I%) 
(O%(I%) := Q%(I%))


UNTIL I%=11 
(I% := 11)


A%=VIEW(1,"WELCOME TO ADVENTURE") 
(A% := VIEW(1 "WELCOME TO ADVENTURE" ))


AGAIN:: 



IF S%(2)=0 
(S%(2) := 0)


GOTO ROOM:: 



ENDIF 
ENDIF()


IF C%(2)>=1 
((IF() > C%(2)) := 1)


C%(2)=C%(2)-1 
(C%(2) := (C%(2) - 1))


ENDIF 
ENDIF()


IF S%(3)=1 
(S%(3) := 1)


GOTO ROOM:: 



ENDIF 
ENDIF()


A%=VIEW(2,"IT IS DARK - BETTER GET SOME LIGHT OR YOU MAY BE IN TROUBLE.") 
(A% := VIEW(2 "IT IS DARK - BETTER GET SOME LIGHT OR YOU MAY BE IN TROUBLE." ))


IF C%(3)>=1 
((IF() > C%(3)) := 1)


C%(3)=C%(3)-1 
(C%(3) := (C%(3) - 1))


ENDIF 
ENDIF()


GOTO COMMAND:: 



ROOM:: 



ROOMS10: 



F%=0 
(F% := 0)


I%=0 
(I% := 0)


DO 
DO()


I%=I%+1 
(I% := (I% + 1))


IF O%(I%)<>ROOM% 
(O%(I%) <> ROOM%)


GOTO SKIP1:: 



ENDIF 
ENDIF()


IF F%=1 
(F% := 1)


GOTO SKIP2:: 



ENDIF 
ENDIF()


A%=VIEW(2,"THERE IS ALSO:") 
(A% := VIEW(2 "THERE IS ALSO:" ))


F%=1 
(F% := 1)


SKIP2:: 



A%=VIEW(2,O$(I%)) 
(A% := VIEW(2 O$(I%) ))


SKIP1:: 



UNTIL I%=11 
(I% := 11)


COMMAND:: 



T1%=1 
(T1% := 1)


GOTO CHECK2:: 



CEC:: 



IF C%(1)>=1 
((IF() > C%(1)) := 1)


C%(1)=C%(1)-1 
(C%(1) := (C%(1) - 1))


ENDIF 
ENDIF()


IF C%(4)>=1 
((IF() > C%(4)) := 1)


C%(4)=C%(4)-1 
(C%(4) := (C%(4) - 1))


ENDIF 
ENDIF()


AT 1,2 
AT(1 2 )


PRINT ">"; 
PRINT(">" )


 



INPUT Y$ 
INPUT(Y$ )


CLS 
CLS()


Y%=0 
(Y% := 0)


P$(2)="00" 
(P$(2) := "00")


W%=0 
(W% := 0)


DO 
DO()


W%=W%+1 
(W% := (W% + 1))


GREMOVE:: 



REMOV2: 



IF Y%>=LEN(Y$) 
((IF() > Y%) := LEN(Y$ ))


BREAK 
BREAK()


ENDIF 
ENDIF()


IF P$(W%)="00" 
(P$(W%) := "00")


GOTO GREMOVE:: 



ENDIF 
ENDIF()


UNTIL W%=2 
(W% := 2)


IF P$(1)<>"00" 
(P$(1) <> "00")


GOTO CHECK1:: 



ENDIF 
ENDIF()


A%=VIEW(2,"PARDON?") 
(A% := VIEW(2 "PARDON?" ))


GOTO AGAIN:: 



CHECK1:: 



Z%=1 
(Z% := 1)


GMK:: 



T$=MID$(M$(ROOM%),Z%,2) 
(T$ := MID$(M$(ROOM%) Z% 2 ))


IF T$="00" 
(T$ := "00")


GOTO SATF:: 



ENDIF 
ENDIF()


IF T$<>P$(1) 
(T$ <> P$(1))


GOTO TNM:: 



ENDIF 
ENDIF()


ROOM%=VAL(MID$(M$(ROOM%),Z%+2,2)) 
(ROOM% := VAL(MID$(M$(ROOM%) (Z% + 2) 2 ) ))


GOTO AGAIN:: 



TNM:: 



Z%=Z%+4 
(Z% := (Z% + 4))


GOTO GMK:: 



SATF:: 



T1%=0 
(T1% := 0)


MATCH%=0 
(MATCH% := 0)


CHECK2:: 



CP%=0 
(CP% := 0)


TSN:: 



CP%=CP%+1 
(CP% := (CP% + 1))


IF T1%<1 
(T1% < 1)


GOTO HABS:: 



ENDIF 
ENDIF()


E$=C$(CP%) 
(E$ := C$(CP%))


GOTO NSFC:: 



HABS:: 



IF CP%<=A1% 
((IF() < CP%) := A1%)


GOTO CIMK1:: 



ENDIF 
ENDIF()


IF MATCH%>=1 
((IF() > MATCH%) := 1)


GOTO COMMAND:: 



ENDIF 
ENDIF()


A%=VIEW(2,"YOU CAN'T") 
(A% := VIEW(2 "YOU CAN'T" ))


IF VAL(P$(1))<13 
(VAL(P$(1) ) < 13)


A%=VIEW(2,"GO THAT WAY") 
(A% := VIEW(2 "GO THAT WAY" ))


ENDIF 
ENDIF()


GOTO AGAIN:: 



CIMK1:: 



A13: 



IF LEFT$(A$,2)<>P$(1) 
(LEFT$(A$ 2 ) <> P$(1))


GOTO TSN:: 



ENDIF 
ENDIF()


Y$=MID$(A$,3,2) 
(Y$ := MID$(A$ 3 2 ))


IF Y$<>"00" 
(Y$ <> "00")


IF Y$<>P$(2) 
(Y$ <> P$(2))


GOTO TSN:: 



ENDIF 
ENDIF()


ENDIF 
ENDIF()


E$=MID$(A$,5,30) 
(E$ := MID$(A$ 5 30 ))


NSFC:: 



E%=1 
(E% := 1)


FSEC:: 



IF MID$(E$,E%,1)="." 
(MID$(E$ E% 1 ) := ".")


GOTO ACTIONS:: 



ENDIF 
ENDIF()


TYPE%=ASC(MID$(E$,E%,1))-65 
(TYPE% := (ASC(MID$(E$ E% 1 ) ) - 65))


N%=VAL(MID$(E$,E%+1,2)) 
(N% := VAL(MID$(E$ (E% + 1) 2 ) ))


OK%=0 
(OK% := 0)


IF TYPE%=0 
(TYPE% := 0)


 IF N%=ROOM% 
(N% := ROOM%)


 OK%=1 
(OK% := 1)


 ENDIF 
ENDIF()


ELSEIF TYPE%=1 
(TYPE% := 1)


 IF O%(N%)=ROOM% 
(O%(N%) := ROOM%)


 OK%=1 
(OK% := 1)


 ENDIF 
ENDIF()


 IF O%(N%)<0 
(O%(N%) < 0)


 OK%=1 
(OK% := 1)


 ENDIF 
ENDIF()


ELSEIF TYPE%=2 
(TYPE% := 2)


 IF O%(N%)<>ROOM% 
(O%(N%) <> ROOM%)


  IF O%(N%)>=0 
((IF() > O%(N%)) := 0)


  OK%=1 
(OK% := 1)


  ENDIF 
ENDIF()


 ENDIF 
ENDIF()


ELSEIF TYPE%=3 
(TYPE% := 3)


 IF O%(N%)<0 
(O%(N%) < 0)


 OK%=1 
(OK% := 1)


 ENDIF 
ENDIF()


ELSEIF TYPE%=4 
(TYPE% := 4)


OK%=S%(N%) 
(OK% := S%(N%))


ELSEIF TYPE%=5 
(TYPE% := 5)


 IF S%(N%)=0 
(S%(N%) := 0)


 OK%=1 
(OK% := 1)


 ENDIF 
ENDIF()


ELSEIF TYPE%=6 
(TYPE% := 6)


 IF C%(N%)=1 
(C%(N%) := 1)


 OK%=1 
(OK% := 1)


 ENDIF 
ENDIF()


ELSEIF TYPE%=7 
(TYPE% := 7)


 IF INT(RND*100)+1<=N% 
((IF() + (INT((RND() * 100) ) < 1)) := N%)


 OK%=1 
(OK% := 1)


 ENDIF 
ENDIF()


ENDIF 
ENDIF()


IF OK%=0 
(OK% := 0)


GOTO TSN:: 



ENDIF 
ENDIF()


E%=E%+3 
(E% := (E% + 3))


GOTO FSEC:: 



ACTIONS:: 



MATCH%=1 
(MATCH% := 1)


E%=E%+1 
(E% := (E% + 1))


NPA:: 



IF MID$(E$,E%,1)="." 
(MID$(E$ E% 1 ) := ".")


GOTO TSN:: 



ENDIF 
ENDIF()


TYPE%=ASC(MID$(E$,E%,1))-65 
(TYPE% := (ASC(MID$(E$ E% 1 ) ) - 65))


IF MID$(E$,E%+1,1)<>"." 
(MID$(E$ (E% + 1) 1 ) <> ".")


N%=VAL(MID$(E$,E%+1,2)) 
(N% := VAL(MID$(E$ (E% + 1) 2 ) ))


ENDIF 
ENDIF()


BREAK%=0 
(BREAK% := 0)


IF TYPE%=0 
(TYPE% := 0)


A%=VIEW(2,"YOU ARE HOLDING:") 
(A% := VIEW(2 "YOU ARE HOLDING:" ))


F%=1 
(F% := 1)


X%=0 
(X% := 0)


DO 
DO()


X%=X%+1 
(X% := (X% + 1))


 IF O%(X%)>=0 
((IF() > O%(X%)) := 0)


 GOTO NEXTX:: 



 ENDIF 
ENDIF()


A%=VIEW(2,O$(X%)) 
(A% := VIEW(2 O$(X%) ))


F%=0 
(F% := 0)


NEXTX:: 



UNTIL X%=O1% 
(X% := O1%)


 IF F%>=1 
((IF() > F%) := 1)


 A%=VIEW(2," NOTHING.") 
(A% := VIEW(2 " NOTHING." ))


 ENDIF 
ENDIF()


BREAK%=100 
(BREAK% := 100)


ELSEIF TYPE%=1 
(TYPE% := 1)


 IF S%(1)<5 
(S%(1) < 5)


 GOTO IFON:: 



 ENDIF 
ENDIF()


A%=VIEW(2,"YOU CANNOT CARRY MORE.") 
(A% := VIEW(2 "YOU CANNOT CARRY MORE." ))


BREAK%=100 
(BREAK% := 100)


GOTO C:: 



IFON:: 



 IF O%(N%)=1 
(O%(N%) := 1)


 GOTO PYAHI:: 



 ENDIF 
ENDIF()


O%(N%)=1 
(O%(N%) := 1)


S%(1)=S%(1)+1 
(S%(1) := (S%(1) + 1))


GOTO C:: 



PYAHI:: 



A%=VIEW(2,"YOU ALREADY HAVE IT.") 
(A% := VIEW(2 "YOU ALREADY HAVE IT." ))


BREAK%=100 
(BREAK% := 100)


C:: 



ELSEIF TYPE%=2 
(TYPE% := 2)


 IF O%(N%)=1 
(O%(N%) := 1)


 GOTO ONER:: 



 ENDIF 
ENDIF()


A%=VIEW(2,"YOU DON'T HAVE "+O$(N%)) 
(A% := VIEW(2 ("YOU DON'T HAVE " + O$(N%)) ))


BREAK%=100 
(BREAK% := 100)


GOTO D:: 



ONER:: 



O%(N%)=ROOM% 
(O%(N%) := ROOM%)


S%(1)=S%(1)-1 
(S%(1) := (S%(1) - 1))


D:: 



ELSEIF TYPE%=3 
(TYPE% := 3)


TEXT3: 



ELSEIF TYPE%=4 
(TYPE% := 4)


S%(N%)=1 
(S%(N%) := 1)


ELSEIF TYPE%=5 
(TYPE% := 5)


S%(N%)=0 
(S%(N%) := 0)


ELSEIF TYPE%=6 
(TYPE% := 6)


C%(N%)=VAL(MID$(E$,E%+3,2)) 
(C%(N%) := VAL(MID$(E$ (E% + 3) 2 ) ))


E%=E%+2 
(E% := (E% + 2))


ELSEIF TYPE%=7 
(TYPE% := 7)


X%=O%(N%) 
(X% := O%(N%))


O%(N%)=O%(N%+1) 
(O%(N%) := O%((N% + 1)))


O%(N%+1)=X% 
(O%((N% + 1)) := X%)


ELSEIF TYPE%=8 
(TYPE% := 8)


O%(N%)=ROOM% 
(O%(N%) := ROOM%)


ELSEIF TYPE%=9 
(TYPE% := 9)


 IF O%(N%)<0 
(O%(N%) < 0)


 S%(1)=S%(1)-1 
(S%(1) := (S%(1) - 1))


 ENDIF 
ENDIF()


O%(N%)=0 
(O%(N%) := 0)


ELSEIF TYPE%=10 
(TYPE% := 10)


ROOM%=N% 
(ROOM% := N%)


ELSEIF TYPE%=11 
(TYPE% := 11)


A%=VIEW(2,"OKAY.") 
(A% := VIEW(2 "OKAY." ))


BREAK%=1000 
(BREAK% := 1000)


ELSEIF TYPE%=12 
(TYPE% := 12)


BREAK%=1000 
(BREAK% := 1000)


ELSEIF TYPE%=13 
(TYPE% := 13)


BREAK%=1100 
(BREAK% := 1100)


ELSEIF TYPE%=14 
(TYPE% := 14)


BREAK%=100 
(BREAK% := 100)


ELSEIF TYPE%=15 
(TYPE% := 15)


AT 1,2 
AT(1 2 )


PRINT "ARE YOU SURE? "; 
PRINT("ARE YOU SURE? " )


 



INPUT W$ 
INPUT(W$ )


BREAK%=1100 
(BREAK% := 1100)


 IF CHR$(ASC(W$))<>"Y" 
(CHR$(ASC(W$ ) ) <> "Y")


 BREAK%=100 
(BREAK% := 100)


 ELSE 
ELSE()


 STOP 
STOP()


 ENDIF 
ENDIF()


ELSEIF TYPE%=16 
(TYPE% := 16)


STOP 
STOP()


ENDIF 
ENDIF()


IF BREAK%=100 
(BREAK% := 100)


GOTO AGAIN:: 



ELSEIF BREAK%=1000 
(BREAK% := 1000)


GOTO COMMAND:: 



ELSEIF BREAK%=1100 
(BREAK% := 1100)


GOTO CEC:: 



ENDIF 
ENDIF()


E%=E%+3 
(E% := (E% + 3))


GOTO NPA::  blue: 



T=M 
(T := M)


M=ABS(M) 
(M := ABS(M ))


IF M>131 
(M > 131)


A$="80A+" 
(A$ := "80A+")


M=M-131 
(M := (M - 131))


ENDIF 
ENDIF()


IF (M>=5) AND (M<15) 
(((IF() > M) = 5) AND (M < 15))


B$="82" 
(B$ := "82")


ELSEIF M>=15 AND M<25 
((ELSEIF() > M) := ((15 AND M) < 25))


B$="82A" 
(B$ := "82A")


ELSEIF M>=25 AND M<35 
((ELSEIF() > M) := ((25 AND M) < 35))


B$="82B" 
(B$ := "82B")


ELSEIF M>=35 AND M<50 
((ELSEIF() > M) := ((35 AND M) < 50))


B$="82C" 
(B$ := "82C")


ELSEIF M>=50 AND M<65 
((ELSEIF() > M) := ((50 AND M) < 65))


B$="80D" 
(B$ := "80D")


ELSEIF M>=65 AND M<95 
((ELSEIF() > M) := ((65 AND M) < 95))


B$="80C" 
(B$ := "80C")


ELSEIF M>=95 AND M<120 
((ELSEIF() > M) := ((95 AND M) < 120))


B$="80B" 
(B$ := "80B")


ELSEIF M>120 
(M > 120)


B$="80A" 
(B$ := "80A")


ENDIF 
ENDIF()


PRINT "Colour correction" 
PRINT("Colour correction" )


 
<nl>


 



PRINT "BLUE",T,"Mired" 
PRINT("BLUE" )


T,"Mired" 
< > 


T,"Mired" 
PRINT(T )


"Mired" 
< > 


"Mired" 
PRINT("Mired" )


 
<nl>


 



PRINT A$;B$,"Filter" 
PRINT(A$ )


B$,"Filter" 
PRINT(B$ )


"Filter" 
< > 


"Filter" 
PRINT("Filter" )


 
<nl>


 



boot: 



ADDTOP:("Film",0) 



border: 



a%=1 :p%=0 :b%=10 
(a% := 1)


a%=1 :p%=0 :b%=10 
(p% := 0)


a%=1 :p%=0 :b%=10 
(b% := 10)


bl$=REPT$(CHR$(32),20) 
(bl$ := REPT$(CHR$(32 ) 20 ))


REM                  Change the screen border for 



REM                  XP procedures on the LZ. 



REM                  Glyn Pollington. 1990. 



CLS 
CLS()


AT 1,1 :PRINT "       Border" 
AT(1 1 )


AT 1,1 :PRINT "       Border" 
PRINT("       Border" )


 
<nl>


 



AT 1,2 :PRINT "    G.Pollington." 
AT(1 2 )


AT 1,2 :PRINT "    G.Pollington." 
PRINT("    G.Pollington." )


 
<nl>


 



AT 1,3 :PRINT "Use cursor keys then" 
AT(1 3 )


AT 1,3 :PRINT "Use cursor keys then" 
PRINT("Use cursor keys then" )


 
<nl>


 



AT 1,4 :PRINT "   EXE to select." 
AT(1 4 )


AT 1,4 :PRINT "   EXE to select." 
PRINT("   EXE to select." )


 
<nl>


 



DO 
DO()


   ch$=ch$+CHR$(p%) 
(ch$ := (ch$ + CHR$(p% )))


   p%=p%+1 
(p% := (p% + 1))


   IF p%=8 :p%=32 :ENDIF 
(p% := 8)


   IF p%=8 :p%=32 :ENDIF 
(p% := 32)


   IF p%=8 :p%=32 :ENDIF 
ENDIF()


UNTIL p%=256 
(p% := 256)


CLS 
CLS()


DO 
DO()


   AT 3,4 :PRINT "Select Character" 
AT(3 4 )


   AT 3,4 :PRINT "Select Character" 
PRINT("Select Character" )


 
<nl>


 



   AT 9,3 :PRINT CHR$(127),CHR$(126) 
AT(9 3 )


   AT 9,3 :PRINT CHR$(127),CHR$(126) 
CHR$(126 )


 
<nl>


 



   IF b%<1 :b%=1 :a%=a%-1 
(b% < 1)


   IF b%<1 :b%=1 :a%=a%-1 
(b% := 1)


   IF b%<1 :b%=1 :a%=a%-1 
(a% := (a% - 1))


      ELSEIF b%>20 :b%=20 :a%=a%+1 
(b% > 20)


      ELSEIF b%>20 :b%=20 :a%=a%+1 
(b% := 20)


      ELSEIF b%>20 :b%=20 :a%=a%+1 
(a% := (a% + 1))


   ENDIF 
ENDIF()


   AT 1,2  :PRINT bl$ 
AT(1 2 )


   AT 1,2  :PRINT bl$ 
PRINT(bl$ )


 
<nl>


 



   AT b%,2 :PRINT CHR$(169) 
AT(b% 2 )


   AT b%,2 :PRINT CHR$(169) 
PRINT(CHR$(169 ) )


 
<nl>


 



   IF a%<1 :a%=1 
(a% < 1)


   IF a%<1 :a%=1 
(a% := 1)


   ELSEIF a%>213 :a%=213 
(a% > 213)


   ELSEIF a%>213 :a%=213 
(a% := 213)


   ENDIF 
ENDIF()


   w$=MID$(ch$,a%,20) 
(w$ := MID$(ch$ a% 20 ))


   AT 1,1 :PRINT w$ 
AT(1 1 )


   AT 1,1 :PRINT w$ 
PRINT(w$ )


 
<nl>


 



   k%=KEY 
(k% := KEY())


   IF k%=6 :b%=b%+1 
(k% := 6)


   IF k%=6 :b%=b%+1 
(b% := (b% + 1))


      ELSEIF k%=5 :b%=b%-1 
(k% := 5)


      ELSEIF k%=5 :b%=b%-1 
(b% := (b% - 1))


   ENDIF 
ENDIF()


UNTIL k%=13 
(k% := 13)


p%=ASC(MID$(ch$,(a%+b%-1),1)) 
(p% := ASC(MID$(ch$ (a% + (b% - 1)) 1 ) ))


POKEB $2099,p% 
POKEB(8345 p% )


bl$=REPT$(CHR$(p%),20) 
(bl$ := REPT$(CHR$(p% ) 20 ))


CLS 
CLS()


AT 1,1 :PRINT bl$ 
AT(1 1 )


AT 1,1 :PRINT bl$ 
PRINT(bl$ )


 
<nl>


 



AT 1,2 :PRINT CHR$(p%);CHR$(p%);"   New Border   ";CHR$(p%);CHR$(p%) 
AT(1 2 )


AT 1,2 :PRINT CHR$(p%);CHR$(p%);"   New Border   ";CHR$(p%);CHR$(p%) 
PRINT(CHR$(p% ) )


CHR$(p%);"   New Border   ";CHR$(p%);CHR$(p%) 
PRINT(CHR$(p% ) )


"   New Border   ";CHR$(p%);CHR$(p%) 
PRINT("   New Border   " )


CHR$(p%);CHR$(p%) 
PRINT(CHR$(p% ) )


CHR$(p%) 
PRINT(CHR$(p% ) )


 
<nl>


 



AT 1,3 :PRINT CHR$(p%);CHR$(p%);"    Selected    ";CHR$(p%);CHR$(p%) 
AT(1 3 )


AT 1,3 :PRINT CHR$(p%);CHR$(p%);"    Selected    ";CHR$(p%);CHR$(p%) 
PRINT(CHR$(p% ) )


CHR$(p%);"    Selected    ";CHR$(p%);CHR$(p%) 
PRINT(CHR$(p% ) )


"    Selected    ";CHR$(p%);CHR$(p%) 
PRINT("    Selected    " )


CHR$(p%);CHR$(p%) 
PRINT(CHR$(p% ) )


CHR$(p%) 
PRINT(CHR$(p% ) )


 
<nl>


 



AT 1,4 :PRINT bl$ 
AT(1 4 )


AT 1,4 :PRINT bl$ 
PRINT(bl$ )


 
<nl>


 



GET 
GET()


BUSH: 



IF C%<0 
(C% < 0)


B%=VIEW(2,"GOODBYE!") 
(B% := VIEW(2 "GOODBYE!" ))


PAUSE 30 
PAUSE(30 )


STOP 
STOP()


ENDIF 
ENDIF()


C%=C%-1 
(C% := (C% - 1))


B%=VIEW(1,"BUT YOU HAVE ONLY "+GEN$(S%,4)+" BUSHELS IN STORE.") 
(B% := VIEW(1 ("BUT YOU HAVE ONLY " + (GEN$(S% 4 ) + " BUSHELS IN STORE.")) ))


creakey$:(a$,b$) 



a%=LEN(a$) :b%=LEN(b$) 
(a% := LEN(a$ ))


a%=LEN(a$) :b%=LEN(b$) 
(b% := LEN(b$ ))


RANDOMIZE 8*(b%-1)+a% :REM *** set seed *** 
RANDOMIZE(((8 * (b% - 1)) + a%) )


RANDOMIZE 8*(b%-1)+a% :REM *** set seed *** 



mn%=123 :REM *** first number of characterset to use for encryption *** 
(mn% := 123)


mn%=123 :REM *** first number of characterset to use for encryption *** 



mx%=255 :REM *** last number of characterset to use for encryption *** 
(mx% := 255)


mx%=255 :REM *** last number of characterset to use for encryption *** 



REM *** chars 123..255 are all non-keyboard characters *** 



REM *** login & passw to array *** 



i%=0 
(i% := 0)


DO 
DO()


 i%=i%+1 
(i% := (i% + 1))


 IF i%<=a% :l%(i%)=ASC(MID$(a$,i%,1)) 
((IF() < i%) := a%)


 IF i%<=a% :l%(i%)=ASC(MID$(a$,i%,1)) 
(l%(i%) := ASC(MID$(a$ i% 1 ) ))


 ELSE :l%(i%)=l%(INT(RND*a%)+1) :ENDIF 
ELSE()


 ELSE :l%(i%)=l%(INT(RND*a%)+1) :ENDIF 
(l%(i%) := l%((INT((RND() * a%) ) + 1)))


 ELSE :l%(i%)=l%(INT(RND*a%)+1) :ENDIF 
ENDIF()


 IF i%<=b% :p%(i%)=ASC(MID$(b$,i%,1)) 
((IF() < i%) := b%)


 IF i%<=b% :p%(i%)=ASC(MID$(b$,i%,1)) 
(p%(i%) := ASC(MID$(b$ i% 1 ) ))


 ELSE :p%(i%)=p%(INT(RND*b%)+1) :ENDIF 
ELSE()


 ELSE :p%(i%)=p%(INT(RND*b%)+1) :ENDIF 
(p%(i%) := p%((INT((RND() * b%) ) + 1)))


 ELSE :p%(i%)=p%(INT(RND*b%)+1) :ENDIF 
ENDIF()


UNTIL i%=8 
(i% := 8)


REM *** 'encrypt login' & 'encrypt passw' array (random) *** 



i%=0 
(i% := 0)


DO 
DO()


 i%=i%+1 
(i% := (i% + 1))


 el%(i%)=INT(RND*(mx%-mn%))+mn% 
(el%(i%) := (INT((RND() * (mx% - mn%)) ) + mn%))


 ep%(i%)=INT(RND*(mx%-mn%))+mn% 
(ep%(i%) := (INT((RND() * (mx% - mn%)) ) + mn%))


UNTIL i%=8 
(i% := 8)


REM *** encrypt login & passw thus creating key *** 



i%=0 
(i% := 0)


DO 
DO()


 i%=i%+1 
(i% := (i% + 1))


 x%=l%(i%)+el%(i%) 
(x% := (l%(i%) + el%(i%)))


 y%=p%(i%)+ep%(i%) 
(y% := (p%(i%) + ep%(i%)))


 REM *** bring m% and n% in range mn%..mx% *** 



 WHILE x%>mx% :x%=x%-(mx%-mn%+1) :ENDWH 
(x% > mx%)


 WHILE x%>mx% :x%=x%-(mx%-mn%+1) :ENDWH 
(x% := (x% - (mx% - (mn% + 1))))


 WHILE x%>mx% :x%=x%-(mx%-mn%+1) :ENDWH 
ENDWH()


 WHILE y%>mx% :y%=y%-(mx%-mn%+1) :ENDWH 
(y% > mx%)


 WHILE y%>mx% :y%=y%-(mx%-mn%+1) :ENDWH 
(y% := (y% - (mx% - (mn% + 1))))


 WHILE y%>mx% :y%=y%-(mx%-mn%+1) :ENDWH 
ENDWH()


 IF (i%/2.0=i%/2) :REM *** i% even *** 
((i% / 2.0) = (i% / 2))


 IF (i%/2.0=i%/2) :REM *** i% even *** 



  el$=el$+CHR$(y%) 
(el$ := (el$ + CHR$(y% )))


  ep$=ep$+CHR$(x%) 
(ep$ := (ep$ + CHR$(x% )))


 ELSE             :REM *** i% odd *** 
ELSE()


 ELSE             :REM *** i% odd *** 



  el$=el$+CHR$(x%) 
(el$ := (el$ + CHR$(x% )))


  ep$=ep$+CHR$(y%) 
(ep$ := (ep$ + CHR$(y% )))


 ENDIF 
ENDIF()


UNTIL i%=8 
(i% := 8)


RETURN (el$+ep$) 
RETURN((el$ + ep$) )


depth: 



M=MENU("35mm,16mm,8mm,70mm") 
(M := MENU("35mm,16mm,8mm,70mm" ))


IF M=1 
(M := 1)


C=0.0339 
(C := 0.0339)


ELSEIF M=2 
(M := 2)


C=0.0254 
(C := 0.0254)


ELSEIF M=3 
(M := 3)


C=0.0254 
(C := 0.0254)


ELSEIF M=4 
(M := 4)


C=0.0339 
(C := 0.0339)


ENDIF 
ENDIF()


CLS 
CLS()


PRINT "Focal length" 
PRINT("Focal length" )


 
<nl>


 



INPUT F 
INPUT(F )


CLS 
CLS()


PRINT "f STOP" 
PRINT("f STOP" )


 
<nl>


 



INPUT S 
INPUT(S )


CLS 
CLS()


H=(F**2)/(S*C) 
(H := ((F ** 2) / (S * C)))


C=INTF(H) 
(C := INTF(H ))


HY= C/1000 
(HY := (C / 1000))


CLS 
CLS()


S=S/1000 
(S := (S / 1000))


H=H/1000 
(H := (H / 1000))


PRINT "FOCUS DISTANCE" 
PRINT("FOCUS DISTANCE" )


 
<nl>


 



INPUT D 
INPUT(D )


CLS 
CLS()


AT 1,1 
AT(1 1 )


PRINT "Hypofocal distance" 
PRINT("Hypofocal distance" )


 
<nl>


 



AT 1,2 
AT(1 2 )


PRINT HY,"m" 
PRINT(HY )


"m" 
< > 


"m" 
PRINT("m" )


 
<nl>


 



IF D>H 
(D > H)


N=(H*D)/(H+(D-S)) 
(N := ((H * D) / (H + (D - S))))


N=N*100 
(N := (N * 100))


N=INTF(N) 
(N := INTF(N ))


N=N/100 
(N := (N / 100))


AT 1,3 
AT(1 3 )


PRINT"NEAR ";N;" m" 
PRINT("NEAR " )


N;" m" 
PRINT(N )


" m" 
PRINT(" m" )


 
<nl>


 



AT 1,4 
AT(1 4 )


PRINT"INFINITY" 
PRINT("INFINITY" )


 
<nl>


 



ELSE 
ELSE()


N=(H*D)/(H+(D-S)) 
(N := ((H * D) / (H + (D - S))))


C=(H*D)/(H-(D-S)) 
(C := ((H * D) / (H - (D - S))))


N=N*100 
(N := (N * 100))


N=INTF(N) 
(N := INTF(N ))


N=N/100 
(N := (N / 100))


C=C*100 
(C := (C * 100))


C=INTF(C) 
(C := INTF(C ))


C=C/100 
(C := (C / 100))


AT 1,3 
AT(1 3 )


PRINT "NEAR",N,"m" 
PRINT("NEAR" )


N,"m" 
< > 


N,"m" 
PRINT(N )


"m" 
< > 


"m" 
PRINT("m" )


 
<nl>


 



AT 1,4 
AT(1 4 )


PRINT "FAR",C,"m" 
PRINT("FAR" )


C,"m" 
< > 


C,"m" 
PRINT(C )


"m" 
< > 


"m" 
PRINT("m" )


 
<nl>


 



ENDIF 
ENDIF()


GET 
GET()


N=MENU("DEPTH,FILM,MENU") 
(N := MENU("DEPTH,FILM,MENU" ))


IF N=1 
(N := 1)


DEPTH: 



ELSEIF N=2 
(N := 2)


FILM: 



ENDIF 
ENDIF()


STOP 
STOP()


DICE: 



KSTAT 1 
KSTAT(1 )


DO 
DO()


 AT 1,2 
AT(1 2 )


 PRINT "Stop"+CHR$(63) 
PRINT(("Stop" + CHR$(63 )) )


 
<nl>


 



 AT 1,4 
AT(1 4 )


 PRINT "Press key." 
PRINT("Press key." )


 
<nl>


 



 WHILE KEY=0 
(KEY() := 0)


 PAUSE 2 
PAUSE(2 )


 AT 1,1 
AT(1 1 )


 PRINT CHR$(26) 
PRINT(CHR$(26 ) )


 
<nl>


 



 AT 15,2 
AT(15 2 )


 PRINT CHR$(26) 
PRINT(CHR$(26 ) )


 
<nl>


 



 AT 1,3 
AT(1 3 )


 PRINT CHR$(26) 
PRINT(CHR$(26 ) )


 
<nl>


 



 D%=(RND*6) 
(D% := (RND() * 6))


 IF D%=0 OR D%=2 OR D%=4 
(2 := (OR = (D% = 4)))


  AT 19,2 
AT(19 2 )


  PRINT CHR$(255) 
PRINT(CHR$(255 ) )


 
<nl>


 



 ENDIF 
ENDIF()


 IF D%>0 
(D% > 0)


  AT 18,1 
AT(18 1 )


  PRINT CHR$(255) 
PRINT(CHR$(255 ) )


 
<nl>


 



  AT 20,3 
AT(20 3 )


  PRINT CHR$(255) 
PRINT(CHR$(255 ) )


 
<nl>


 



 ENDIF 
ENDIF()


 IF D%>2 
(D% > 2)


  AT 20,1 
AT(20 1 )


  PRINT CHR$(255) 
PRINT(CHR$(255 ) )


 
<nl>


 



  AT 18,3 
AT(18 3 )


  PRINT CHR$(255) 
PRINT(CHR$(255 ) )


 
<nl>


 



 ENDIF 
ENDIF()


 IF D%=5 
(D% := 5)


  AT 18,2 
AT(18 2 )


  PRINT CHR$(255)+" "+CHR$(255) 
PRINT((CHR$(255 ) + (" " + CHR$(255 ))) )


 
<nl>


 



 ENDIF 
ENDIF()


 ENDWH 
ENDWH()


 AT 1,2 
AT(1 2 )


 PRINT "     " 
PRINT("     " )


 
<nl>


 



 AT 1,4 
AT(1 4 )


 PRINT CHR$(26)+"Again"+CHR$(63)+" Y" 
PRINT((CHR$(26 ) + ("Again" + (CHR$(63 ) + " Y"))) )


 
<nl>


 



UNTIL GET$<>"Y" 
(GET$() <> "Y")


distance: 



PRINT "Select known data" 
PRINT("Select known data" )


 
<nl>


 



A=MENUN(2,"HEIGHT,WIDTH") 
(A := MENUN(2 "HEIGHT,WIDTH" ))


IF A=1 
(A := 1)


PRINT "WHAT HEIGHT mt";CHR$(63) 
PRINT("WHAT HEIGHT mt" )


CHR$(63) 
PRINT(CHR$(63 ) )


 
<nl>


 



INPUT H 
INPUT(H )


WI=H 
(WI := H)


S$="m height" 
(S$ := "m height")


H=H*1000 
(H := (H * 1000))


CLS 
CLS()


PRINT "WHAT mm LENS";CHR$(63) 
PRINT("WHAT mm LENS" )


CHR$(63) 
PRINT(CHR$(63 ) )


 
<nl>


 



INPUT L 
INPUT(L )


LE=L 
(LE := L)


D=(H*L)/T 
(D := ((H * L) / T))


CLS 
CLS()


ELSEIF A=2 
(A := 2)


PRINT "WHAT WIDTH mt";CHR$(63) 
PRINT("WHAT WIDTH mt" )


CHR$(63) 
PRINT(CHR$(63 ) )


 
<nl>


 



INPUT W 
INPUT(W )


WI=W 
(WI := W)


S$="m width" 
(S$ := "m width")


W=W*1000 
(W := (W * 1000))


CLS 
CLS()


PRINT "WHAT LENS mm";CHR$(63) 
PRINT("WHAT LENS mm" )


CHR$(63) 
PRINT(CHR$(63 ) )


 
<nl>


 



INPUT L 
INPUT(L )


LE=L 
(LE := L)


CLS 
CLS()


D=(W*L)/I 
(D := ((W * L) / I))


ENDIF 
ENDIF()


D=INTF(D/10) 
(D := INTF((D / 10) ))


D=D/100 
(D := (D / 100))


PRINT "A",LE,"mm lens"  
PRINT("A" )


LE,"mm lens"  
< > 


LE,"mm lens"  
PRINT(LE )


"mm lens"  
< > 


"mm lens"  
PRINT("mm lens" )


  
<nl>


  



PRINT "gives a",WI, S$ 
PRINT("gives a" )


WI, S$ 
< > 


WI, S$ 
PRINT(WI )


 S$ 
< > 


 S$ 
PRINT(S$ )


 
<nl>


 



PRINT "@",D,"metres" 
PRINT("@" )


D,"metres" 
< > 


D,"metres" 
PRINT(D )


"metres" 
< > 


"metres" 
PRINT("metres" )


 
<nl>


 



PRINT "Distance..." 
PRINT("Distance..." )


 
<nl>


 



GET 
GET()


DumpPack: 



REM produces an exact copy of a pack on the PC, mostly even if UNMAKE fails 



REM OPKs produced are sligthly different from standard OPK because all bytes 



REM on the pack are copied, program does NOT stop at the <end-of-pack>-marker! 



ESCAPE OFF 
ESCAPE(0 )


ONERR ERROR:: 
ONERR()


OFFSET% = 0 :REM where to start scanning (header skip) 
(OFFSET% := 0)


OFFSET% = 0 :REM where to start scanning (header skip) 



REM -- machine code for pack read -- 



REM originates from Horatio's brilliant fast5 datapack copy program 



REM D param in USR - pack number (0=A,1=B,2=C,3=D) 



REM load_addr + 3 - byte - 64K page of pack address (00-01) 



REM load_addr + 5 - word - OFFSET from page of pak address (0000-FFFF) 



REM load_addr + 10 - word - number of bytes to read (size of buffer) 



REM load_addr + 13 - word - location in ram of buffer to store data 



mc1addr% = addr(mc1%()) 
(mc1addr% := ADDR(mc1%() ))


mc1%(1) = $3f62    :REM os     pk$setp 
(mc1%(1) := 16226)


mc1%(1) = $3f62    :REM os     pk$setp 



mc1%(2) = $3900    :REM rts ;for now! 
(mc1%(2) := 14592)


mc1%(2) = $3900    :REM rts ;for now! 



REM mc1%(2)=$c600  :REM ldab   #page 



mc1%(3) = $ce00    :REM ldx    #OFFSET 
(mc1%(3) := 52736)


mc1%(3) = $ce00    :REM ldx    #OFFSET 



mc1%(4) = $003f    :REM os     pk$sadd 
(mc1%(4) := 63)


mc1%(4) = $003f    :REM os     pk$sadd 



mc1%(5) = $60cc    :REM ldd 
(mc1%(5) := 24780)


mc1%(5) = $60cc    :REM ldd 



mc1%(6) = $0080    :REM        #bytes_to_read 
(mc1%(6) := 128)


mc1%(6) = $0080    :REM        #bytes_to_read 



mc1%(7) = $ce00    :REM ldx    #buffer_addr 
(mc1%(7) := 52736)


mc1%(7) = $ce00    :REM ldx    #buffer_addr 



mc1%(8) = $003f    :REM os     pk$read 
(mc1%(8) := 63)


mc1%(8) = $003f    :REM os     pk$read 



mc1%(9) = $5e39    :REM rts 
(mc1%(9) := 24121)


mc1%(9) = $5e39    :REM rts 



REM -- get user input -- 



cls :print " DumpPack v0.1"; 
CLS()


cls :print " DumpPack v0.1"; 
PRINT(" DumpPack v0.1" )


 



buff$="  Copies a pack to PC (even if protected or corrupted). Please make sure the CommsLink is booted in and activate Psi2Win.  " 
(buff$ := "  Copies a pack to PC (even if protected or corrupted). Please make sure the CommsLink is booted in and activate Psi2Win.  ")


if view(2,buff$)=1 :return :endif 
(VIEW(2 buff$ ) := 1)


if view(2,buff$)=1 :return :endif 



do 
DO()


 pack%=menu("Which"+chr$(254)+"pack,B:,C:,D:")-1 
(pack% := (MENU(("Which" + (CHR$(254 ) + "pack,B:,C:,D:")) ) - 1))


 if pack%=1 :return :endif 
(pack% := 1)


 if pack%=1 :return :endif 



until pack%>0 
(pack% > 0)


do 
DO()


 kb% = 4 * 2**(menu("AUTO,8K,16K,32K,64K,128K,256K")-1) 
(kb% := ((4 * 2) ** (MENU("AUTO,8K,16K,32K,64K,128K,256K" ) - 1)))


 if kb% = 0 
(kb% := 0)


  return 



 elseif kb% = 4 
(kb% := 4)


  usr(mc1addr%,pack%) : REM call pk$setp 
USR(mc1addr% pack% )


  usr(mc1addr%,pack%) : REM call pk$setp 



  kb%=peekb($20d8+10*pack%)*8 
(kb% := (PEEKB((8408 + (10 * pack%)) ) * 8))


  print "Detected",num$(kb%,3);"k" 
PRINT("Detected" )


num$(kb%,3);"k" 
< > 


num$(kb%,3);"k" 
PRINT(NUM$(kb% 3 ) )


"k" 
PRINT("k" )


 
<nl>


 



  pause 20 
PAUSE(20 )


 endif 
ENDIF()


until kb% >= 8 and kb% <= 256 
(8 := ((and < kb%) = 256))


cls :buff$="" 
CLS()


cls :buff$="" 
(buff$ := "")


print "PC file name:" :trap input buff$ 
PRINT("PC file name:" )


 :trap input buff$ 
<nl>


 :trap input buff$ 



print "PC file name:" :trap input buff$ 
TRAP(input buff$ )


if buff$="" :return :endif 
(buff$ := "")


if buff$="" :return :endif 



REM -- write OPK header -- 



cls 
CLS()


print "Connecting" 
PRINT("Connecting" )


 
<nl>


 



print "to PC..."; 
PRINT("to PC..." )


 



escape on 
ESCAPE(1 )


xfopen:(buff$+".opk",1,0) 



escape off 
ESCAPE(0 )


buff$ = "OPK"+chr$(kb%/64) 
(buff$ := ("OPK" + CHR$((kb% / 64) )))


if kb%<64 
(kb% < 64)


 buff$ = buff$+chr$(kb%*4)+chr$(0) 
(buff$ := (buff$ + (CHR$((kb% * 4) ) + CHR$(0 ))))


else 
ELSE()


 buff$ = buff$+chr$(0)+chr$(0) 
(buff$ := (buff$ + (CHR$(0 ) + CHR$(0 ))))


endif 
ENDIF()


xfput:(buff$) 



REM -- setup MC -- 



mc1%(2) =  $c600    :REM ldab   #page 
(mc1%(2) := 50688)


mc1%(2) =  $c600    :REM ldab   #page 



buffloc% = addr(buff$)+1 :REM prepare MC buffer 
(buffloc% := (ADDR(buff$ ) + 1))


buffloc% = addr(buff$)+1 :REM prepare MC buffer 



pokeb buffloc%-1,128 :REM set buffer size for OPL 
POKEB((buffloc% - 1) 128 )


pokeb buffloc%-1,128 :REM set buffer size for OPL 



pokew mc1addr%+13,buffloc% : REM set buffer 
POKEW((mc1addr% + 13) buffloc% )


pokew mc1addr%+13,buffloc% : REM set buffer 



size = 1024.0 * kb% 
(size := (1024.0 * kb%))


REM -- main copy loop -- 



at 1,1 :print "Copying "+chr$(65+pack%)+":" 
AT(1 1 )


at 1,1 :print "Copying "+chr$(65+pack%)+":" 
PRINT(("Copying " + (CHR$((65 + pack%) ) + ":")) )


 
<nl>


 



cnt = OFFSET% 
(cnt := OFFSET%)


do 
DO()


 hiaddr = intf(cnt/65536) 
(hiaddr := INTF((cnt / 65536) ))


 loaddr = cnt-65536*intf(cnt/65536) 
(loaddr := (cnt - (65536 * INTF((cnt / 65536) ))))


 h$ = hex$(loaddr+65536*(loaddr > 32767)) 
(h$ := HEX$((loaddr + (65536 * (loaddr > 32767))) ))


 at 12,1 :print hex$(hiaddr);left$("0000",4-len(h$));h$ 
AT(12 1 )


 at 12,1 :print hex$(hiaddr);left$("0000",4-len(h$));h$ 
PRINT(HEX$(hiaddr ) )


left$("0000",4-len(h$));h$ 
PRINT(LEFT$("0000" (4 - LEN(h$ )) ) )


h$ 
PRINT(h$ )


 
<nl>


 



 pokew mc1addr%+5,loaddr+65536*(loaddr > 32767) : REM set location on pack 
POKEW((mc1addr% + 5) (loaddr + (65536 * (loaddr > 32767))) )


 pokew mc1addr%+5,loaddr+65536*(loaddr > 32767) : REM set location on pack 



 pokeb mc1addr%+3,hiaddr : REM set location page 
POKEB((mc1addr% + 3) hiaddr )


 pokeb mc1addr%+3,hiaddr : REM set location page 



 usr(mc1addr%,pack%) : REM READ from pack to buffer 
USR(mc1addr% pack% )


 usr(mc1addr%,pack%) : REM READ from pack to buffer 



 xfput:(buff$) 



 at 13,2: print fix$(int(cnt/size*100),0,3);"%"; 
AT(13 2 )


 at 13,2: print fix$(int(cnt/size*100),0,3);"%"; 
PRINT(FIX$(INT(((cnt / size) * 100) ) 0 3 ) )


"%"; 
PRINT("%" )


 



 if cnt = OFFSET% :cnt = 0 :endif 
(cnt := OFFSET%)


 if cnt = OFFSET% :cnt = 0 :endif 
(cnt := 0)


 if cnt = OFFSET% :cnt = 0 :endif 
ENDIF()


 cnt = cnt + 128 
(cnt := (cnt + 128))


 if key =1 :raise 206 :endif 
(KEY() := 1)


 if key =1 :raise 206 :endif 
RAISE(206 )


 if key =1 :raise 206 :endif 
ENDIF()


until cnt >= size 
((UNTIL() > cnt) := size)


REM -- remove protection -- 



REM    xfpos:(0,6.) 



REM    buff$ = xfget$:(1) 



REM    xfpos:(0,6.) 



REM    xfput:(chr$(asc(buff$) or $28)) 



REM TODO: fix checksum 



REM -- Done! -- 



xfclose: 



cls :print " DumpPack v0.1" 
CLS()


cls :print " DumpPack v0.1" 
PRINT(" DumpPack v0.1" )


 
<nl>


 



print "Copy Complete..."+chr$(16); 
PRINT(("Copy Complete..." + CHR$(16 )) )


 



get 
GET()


return 



REM -- error handling -- 



ERROR:: 



onerr off 
ONERR()


if err=203 
(ERR() := 203)


 buff$="* No CommsLink *" 
(buff$ := "* No CommsLink *")


else 
ELSE()


 if err=206 
(ERR() := 206)


  buff$="** User Break **" 
(buff$ := "** User Break **")


 elseif err=190 
(ERR() := 190)


  buff$="Bad PC file name" 
(buff$ := "Bad PC file name")


 elseif err=188 or err=186 
(or := (ERR() = 186))


  buff$="*** PC Error ***" 
(buff$ := "*** PC Error ***")


 elseif err=192 or err=193 or err=199 
(193 := (or = (ERR() = 199)))


  buff$=" Connect Error  " 
(buff$ := " Connect Error  ")


 elseif err<191 
(ERR() < 191)


  buff$="** ERROR "+num$(err,3)+" ***" 
(buff$ := ("** ERROR " + (NUM$(ERR() 3 ) + " ***")))


 else 
ELSE()


  buff$=err$(err) 
(buff$ := ERR$(ERR() ))


 endif 
ENDIF()


 xfclose: 



endif 
ENDIF()


print chr$(15);buff$;chr$(16); 
PRINT(CHR$(15 ) )


buff$;chr$(16); 
PRINT(buff$ )


chr$(16); 
PRINT(CHR$(16 ) )


 



get 
GET()


return 



END: 



LOOK:: 



Y%=Y%+1 
(Y% := (Y% + 1))


IF Y%>LEN(Y$) 
(Y% > LEN(Y$ ))


END%=1 
(END% := 1)


ELSE 
ELSE()


END%=0 
(END% := 0)


ENDIF 
ENDIF()


IF END%=1 
(END% := 1)


RETURN 



ENDIF 
ENDIF()


IF MID$(Y$,Y%,1)=" " 
(MID$(Y$ Y% 1 ) := " ")


GOTO LOOK:: 



ENDIFEOW: 



Y%=Y%+1 
(Y% := (Y% + 1))


IF Y%>LEN(Y$) 
(Y% > LEN(Y$ ))


END%=1 
(END% := 1)


ELSE 
ELSE()


END%=0 
(END% := 0)


ENDIF 
ENDIF()


IF END%>=1 
((IF() > END%) := 1)


RETURN 



ENDIF 
ENDIF()


IF MID$(Y$,Y%,1)=" " 
(MID$(Y$ Y% 1 ) := " ")


END%=1 
(END% := 1)


ELSE 
ELSE()


END%=0 
(END% := 0)


ENDIFexpo: 



PRINT "What ASA is the " 
PRINT("What ASA is the " )


 
<nl>


 



PRINT "filmstock?" 
PRINT("filmstock?" )


 
<nl>


 



INPUT A 
INPUT(A )


CLS 
CLS()


TIME:: 



PRINT "CAMERA SPEED;" 
PRINT("CAMERA SPEED;" )


 
<nl>


 



W=MENUN(2,"Frames-per-second,Exposure,Seconds-per-frame,") 
(W := MENUN(2 "Frames-per-second,Exposure,Seconds-per-frame," ))


IF W=2 
(W := 2)


PRINT"Exposure in seconds?" 
PRINT("Exposure in seconds?" )


 
<nl>


 



INPUT T 
INPUT(T )


word$="sec" 
(word$ := "sec")


z=T 
(z := T)


ELSEIF W=1 
(W := 1)


PRINT "Frames per second?" 
PRINT("Frames per second?" )


 
<nl>


 



INPUT P 
INPUT(P )


word$="fps" 
(word$ := "fps")


z=P 
(z := P)


CLS 
CLS()


PRINT "Shutter angle in" 
PRINT("Shutter angle in" )


 
<nl>


 



PRINT "degrees?" 
PRINT("degrees?" )


 
<nl>


 



INPUT B 
INPUT(B )


T=B/(360*P) 
(T := (B / (360 * P)))


CLS 
CLS()


ELSEIF W=3 
(W := 3)


PRINT "Seconds per frame?" 
PRINT("Seconds per frame?" )


 
<nl>


 



INPUT P 
INPUT(P )


z=P 
(z := P)


word$="spf" 
(word$ := "spf")


CLS 
CLS()


PRINT "Shutter angle in" 
PRINT("Shutter angle in" )


 
<nl>


 



PRINT "degrees" 
PRINT("degrees" )


 
<nl>


 



INPUT B 
INPUT(B )


T=P*B/360 
(T := ((P * B) / 360))


CLS 
CLS()


ENDIF 
ENDIF()


CLS 
CLS()


IF (T>=1) AND (T<10) 
(((IF() > T) = 1) AND (T < 10))


T=T/1.4 
(T := (T / 1.4))


ELSEIF (T>=10) AND (T <30) 
(((ELSEIF() > T) = 10) AND (T < 30))


T=T/2.8 
(T := (T / 2.8))


ELSEIF T>=30 
((ELSEIF() > T) := 30)


T=T/4 
(T := (T / 4))


ENDIF 
ENDIF()


S=SQR(2) 
(S := SQR(2 ))


F=(25*S**2)/(A*T) 
(F := (((25 * S) ** 2) / (A * T)))


IF F>5 
(F > 5)


W=0 
(W := 0)


ELSEIF F<=5 
((ELSEIF() < F) := 5)


W=2 
(W := 2)


ENDIF 
ENDIF()


A$="  T1.4 " 
(A$ := "  T1.4 ")


B$="  T2 " 
(B$ := "  T2 ")


C$="  T2.8 " 
(C$ := "  T2.8 ")


D$="  T4 " 
(D$ := "  T4 ")


E$="  T5.6 " 
(E$ := "  T5.6 ")


F$=FIX$(F,W,8) 
(F$ := FIX$(F W 8 ))


G$=FIX$(F*2,W,8) 
(G$ := FIX$((F * 2) W 8 ))


H$=FIX$(F*4,W,8) 
(H$ := FIX$((F * 4) W 8 ))


I$=FIX$(F*8,W,8) 
(I$ := FIX$((F * 8) W 8 ))


J$=FIX$(F*16,W,8) 
(J$ := FIX$((F * 16) W 8 ))


A$=A$+F$+B$+G$+C$+H$+D$+I$+E$+J$ 
(A$ := (A$ + (F$ + (B$ + (G$ + (C$ + (H$ + (D$ + (I$ + (E$ + J$))))))))))


PRINT "For exposure..." 
PRINT("For exposure..." )


 
<nl>


 



PRINT A,"ASA",z,word$,B,CHR$(223) 
PRINT(A )


"ASA",z,word$,B,CHR$(223) 
< > 


"ASA",z,word$,B,CHR$(223) 
PRINT("ASA" )


z,word$,B,CHR$(223) 
< > 


z,word$,B,CHR$(223) 
PRINT(z )


word$,B,CHR$(223) 
< > 


word$,B,CHR$(223) 
PRINT(word$ )


B,CHR$(223) 
< > 


B,CHR$(223) 
PRINT(B )


CHR$(223) 
< > 


CHR$(223) 
PRINT(CHR$(223 ) )


 
<nl>


 



AT 1,3 
AT(1 3 )


PRINT "Footcandles;" 
PRINT("Footcandles;" )


 
<nl>


 



VIEW(4,A$) 
VIEW(4 A$ )


GET 
GET()


C=MENU("SHUT,EXPO,FILM,MENU,") 
(C := MENU("SHUT,EXPO,FILM,MENU," ))


IF C=1 
(C := 1)


GOTO TIME:: 



ELSEIF C=2 
(C := 2)


EXPO: 



ELSEIF C=3 
(C := 3)


FILM: 



ENDIF   
ENDIF()


film: 



REM V3.1 



REM last amended 2/9/1995 



REM Copywrite MAXIM FORD 



REM Lighting Cameraman 



REM 27 Birstall Road, N15 5EN 



REM LONDON (44 181) 802 8791 



REM if you do not use a PSION PRINTER this next line will make a EPSON printer work 



cls 
CLS()


IF NOT EXIST ("A:printer") 
EXIST("A:printer" )


PRINTER: 



ELSE 
ELSE()


OPEN "A:printer",A,P% 
OPEN(A P% )


ENDIF 
ENDIF()


FIRST 
FIRST()


Z%=A.P% 
(. := P%)


CLOSE 
CLOSE()


IF Z%=1 
(Z% := 1)


LSET: 



ELSEIF Z%=2 
(Z% := 2)


LSET:(2400,1,8,2,2,0,0,"",CHR$(26),"",CHR$(10),CHR$(26),"",4,0) 



ENDIF 
ENDIF()


CLS 
CLS()


N=0 
(N := 0)


N=MENU("STOP,EXPO,DEPTH,FOCUS,LENS,MIRED,LIGHT,HMI,LENGTH,TIME,LAPSE,SUN,PAN,MACRO,HORIZON,PRINTER") 
(N := MENU("STOP,EXPO,DEPTH,FOCUS,LENS,MIRED,LIGHT,HMI,LENGTH,TIME,LAPSE,SUN,PAN,MACRO,HORIZON,PRINTER" ))


IF N=1 
(N := 1)


STOP: 



ELSEIF N=2 
(N := 2)


EXPO: 



ELSEIF N=3 
(N := 3)


DEPTH: 



ELSEIF N=4 
(N := 4)


FOCUS2: 



ELSEIF N=5 
(N := 5)


LENS: 



ELSEIF N=6 
(N := 6)


MIRED: 



ELSEIF N=7 
(N := 7)


LIGHT: 



ELSEIF N=8 
(N := 8)


HMI: 



ELSEIF N=9 
(N := 9)


LENGTH: 



ELSEIF N=10 
(N := 10)


TIME: 



ELSEIF N=11 
(N := 11)


LAPSE: 



ELSEIF N=12 
(N := 12)


SUNPOS: 



ELSEIF N=13 
(N := 13)


PAN: 



ELSEIF N=14 
(N := 14)


MACRO: 



ELSEIF N=15 
(N := 15)


HORIZON: 



ELSEIF N=16 
(N := 16)


PRINTER: 



ENDIF 
ENDIF()


FLIGHTS: 



FLY$="B:FLYDATA" :FS$="" 
(FLY$ := "B:FLYDATA")


FLY$="B:FLYDATA" :FS$="" 
(FS$ := "")


if exist(FLY$) 
EXIST(FLY$ )


 open   FLY$,A,FDAT$,FAIR$,FFNO$,FOUT$,FDEP$,FINP$,FARR$ 
OPEN(FINP$ FARR$ )


else 
ELSE()


 create FLY$,A,FDAT$,FAIR$,FFNO$,FOUT$,FDEP$,FINP$,FARR$ 
CREATE(FINP$ FARR$ )


endif 
ENDIF()


STATE%=1 
(STATE% := 1)


while STATE%<>0 
(STATE% <> 0)


 if STATE%=1 : REM base loop 
(STATE% := 1)


 if STATE%=1 : REM base loop 



  OPT%=menu("COUNT,FIND,LIST,NEW") 
(OPT% := MENU("COUNT,FIND,LIST,NEW" ))


  if OPT%=0 
(OPT% := 0)


   STATE%=0 
(STATE% := 0)


  elseif OPT%=1 
(OPT% := 1)


   STATE%=6 
(STATE% := 6)


  elseif OPT%=2 
(OPT% := 2)


   STATE%=2 
(STATE% := 2)


  elseif OPT%=3 
(OPT% := 3)


   STATE%=9 
(STATE% := 9)


  elseif OPT%=4 
(OPT% := 4)


   STATE%=7 
(STATE% := 7)


  else 
ELSE()


   CRASH: 



  endif 
ENDIF()


 elseif STATE%=2 :REM command = FIND 
(STATE% := 2)


 elseif STATE%=2 :REM command = FIND 



  cls :print"Find flight" :print">"; 
CLS()


  cls :print"Find flight" :print">"; 
PRINT("Find flight" )


 :print">"; 
<nl>


 :print">"; 



  cls :print"Find flight" :print">"; 
PRINT(">" )


 



  kstat 1 
KSTAT(1 )


  trap edit FS$ 
TRAP(edit FS$ )


  if err=206 
(ERR() := 206)


   STATE%=1 
(STATE% := 1)


  else 
ELSE()


   first 
FIRST()


   if find(FS$)=0 
(FIND(FS$ ) := 0)


    STATE%=3 
(STATE% := 3)


   else 
ELSE()


    STATE%=4 
(STATE% := 4)


   endif 
ENDIF()


  endif 
ENDIF()


 elseif STATE%=3 
(STATE% := 3)


  cls :print"Not found"; 
CLS()


  cls :print"Not found"; 
PRINT("Not found" )


 



  if get=1 
(GET() := 1)


   STATE%=1 
(STATE% := 1)


  else 
ELSE()


   STATE%=2 
(STATE% := 2)


  endif 
ENDIF()


 elseif STATE%=4 
(STATE% := 4)


  FLYSPLIT: 



  OPT%=FLY 
(OPT% := FLY)


VIEW%: 



  if OPT%=1 
(OPT% := 1)


   STATE%=2 
(STATE% := 2)


  elseif OPT%=2 
(OPT% := 2)


   STATE%=5 
(STATE% := 5)


  elseif OPT%=3 
(OPT% := 3)


   back 
BACK()


  elseif OPT%=8 
(OPT% := 8)


   STATE%=8 
(STATE% := 8)


  elseif OPT%=4 or OPT%=13 
(or := (OPT% = 13))


   next 
NEXT()


   if eof 
EOF()


    cls :print"****************"; :print"**END OF PACK***"; 
CLS()


    cls :print"****************"; :print"**END OF PACK***"; 
PRINT("****************" )


 :print"**END OF PACK***"; 



    cls :print"****************"; :print"**END OF PACK***"; 
PRINT("**END OF PACK***" )


 



    get 
GET()


    STATE%=2 
(STATE% := 2)


   elseif OPT%=13 
(OPT% := 13)


    if find(FS$)=0 
(FIND(FS$ ) := 0)


     cls :print"****************"; :print"**END OF PACK***"; 
CLS()


     cls :print"****************"; :print"**END OF PACK***"; 
PRINT("****************" )


 :print"**END OF PACK***"; 



     cls :print"****************"; :print"**END OF PACK***"; 
PRINT("**END OF PACK***" )


 



     get 
GET()


     STATE%=2 
(STATE% := 2)


    endif 
ENDIF()


   endif 
ENDIF()


  endif 
ENDIF()


 elseif STATE%=5 :REM edit 
(STATE% := 5)


 elseif STATE%=5 :REM edit 



  if FLYEDIT%:=1 
(FLYEDIT% := 1)


   FLYBUILD: 



   update 
UPDATE()


   FLYSPLIT: 



   FLYVIEW%: 



  endif 
ENDIF()


  STATE%=2 
(STATE% := 2)


 elseif STATE%=6 :REM COUNT 
(STATE% := 6)


 elseif STATE%=6 :REM COUNT 



  cls :print count,"flights" 
CLS()


  cls :print count,"flights" 
PRINT(COUNT() )


"flights" 
< > 


"flights" 
PRINT("flights" )


 
<nl>


 



  get 
GET()


  STATE%=1 
(STATE% := 1)


 elseif STATE%=7 :REM NEW 
(STATE% := 7)


 elseif STATE%=7 :REM NEW 



  DAT$="" :AIR$="": FNO$="" :OUT$="" :DEP$="" :INP$="": ARR$="" 
(DAT$ := "")


  DAT$="" :AIR$="": FNO$="" :OUT$="" :DEP$="" :INP$="": ARR$="" 
(AIR$ := "")


  DAT$="" :AIR$="": FNO$="" :OUT$="" :DEP$="" :INP$="": ARR$="" 
(FNO$ := "")


  DAT$="" :AIR$="": FNO$="" :OUT$="" :DEP$="" :INP$="": ARR$="" 
(OUT$ := "")


  DAT$="" :AIR$="": FNO$="" :OUT$="" :DEP$="" :INP$="": ARR$="" 
(DEP$ := "")


  DAT$="" :AIR$="": FNO$="" :OUT$="" :DEP$="" :INP$="": ARR$="" 
(INP$ := "")


  DAT$="" :AIR$="": FNO$="" :OUT$="" :DEP$="" :INP$="": ARR$="" 
(ARR$ := "")


  if FLYEDIT%:=1 
(FLYEDIT% := 1)


   FLYBUILD: 



   append 
APPEND()


   FLYSPLIT: 



   FLYVIEW%: 



  endif 
ENDIF()


  STATE%=1 
(STATE% := 1)


 elseif STATE%=8 :REM delete 
(STATE% := 8)


 elseif STATE%=8 :REM delete 



  cls :print"Delete flight" :print"record Y/N"; 
CLS()


  cls :print"Delete flight" :print"record Y/N"; 
PRINT("Delete flight" )


 :print"record Y/N"; 
<nl>


 :print"record Y/N"; 



  cls :print"Delete flight" :print"record Y/N"; 
PRINT("record Y/N" )


 



  kstat 1 
KSTAT(1 )


  do 
DO()


   KY%=get 
(KY% := GET())


  until KY%=$4E or KY%=$59 
(or := (KY% = 89))


  if KY%=$4E 
(KY% := 78)


   STATE%=4 
(STATE% := 4)


  else 
ELSE()


   erase 
ERASE()


   cls :print"Flight record": print"deleted" 
CLS()


   cls :print"Flight record": print"deleted" 
PRINT("Flight record" )


: print"deleted" 
<nl>


: print"deleted" 



   cls :print"Flight record": print"deleted" 
PRINT("deleted" )


 
<nl>


 



   get 
GET()


   STATE%=2 
(STATE% := 2)


  endif 
ENDIF()


 elseif STATE%=9 :REM LIST 
(STATE% := 9)


 elseif STATE%=9 :REM LIST 



  lprint 