 * \def MBEDTLS_NO_UDBL_DIVISION
//#define MBEDTLS_NO_UDBL_DIVISION
 * \def MBEDTLS_NO_UDBL_DIVISION
//#define MBEDTLS_NO_UDBL_DIVISION
 * \def MBEDTLS_NO_UDBL_DIVISION
//#define MBEDTLS_NO_UDBL_DIVISION
// import float.h for DBL_MAX
    if (value < -DBL_MAX)
    if (value > DBL_MAX)
    if (is_nan(value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
    'MBEDTLS_NO_UDBL_DIVISION', # influences anything that uses bignum
 * disabled by defining MBEDTLS_NO_UDBL_DIVISION.
        #if !defined(MBEDTLS_NO_UDBL_DIVISION)
        #endif /* !MBEDTLS_NO_UDBL_DIVISION */
        #if !defined(MBEDTLS_NO_UDBL_DIVISION)
        #endif /* !MBEDTLS_NO_UDBL_DIVISION */
    #if !defined(MBEDTLS_NO_UDBL_DIVISION)
    #endif /* !MBEDTLS_NO_UDBL_DIVISION */
 * \def MBEDTLS_NO_UDBL_DIVISION
//#define MBEDTLS_NO_UDBL_DIVISION
    'MBEDTLS_NO_UDBL_DIVISION', # unset, in "System support"
    msg "build: MBEDTLS_NO_UDBL_DIVISION native" # ~ 10s
    scripts/config.py set MBEDTLS_NO_UDBL_DIVISION
    msg "test: MBEDTLS_NO_UDBL_DIVISION native" # ~ 10s
    msg "build: ${ARM_NONE_EABI_GCC_PREFIX}gcc -DMBEDTLS_NO_UDBL_DIVISION, make" # ~ 10s
    scripts/config.py set MBEDTLS_NO_UDBL_DIVISION
#if defined(MBEDTLS_NO_UDBL_DIVISION)
    if( strcmp( "MBEDTLS_NO_UDBL_DIVISION", config ) == 0 )
        MACRO_EXPANSION_TO_STR( MBEDTLS_NO_UDBL_DIVISION );
#endif /* MBEDTLS_NO_UDBL_DIVISION */
#if defined(MBEDTLS_NO_UDBL_DIVISION)
    OUTPUT_MACRO_NAME_VALUE(MBEDTLS_NO_UDBL_DIVISION);
#endif /* MBEDTLS_NO_UDBL_DIVISION */
   * Added config.h option MBEDTLS_NO_UDBL_DIVISION, to prevent the use of
#if defined(MBEDTLS_NO_UDBL_DIVISION)
    "MBEDTLS_NO_UDBL_DIVISION",
#endif /* MBEDTLS_NO_UDBL_DIVISION */
.equ	IS_IMG_SDBL_PRESENT, 0
	.if IS_IMG_SDBL_PRESENT
 * \def MBEDTLS_NO_UDBL_DIVISION
//#define MBEDTLS_NO_UDBL_DIVISION
.equ	IS_IMG_SDBL_PRESENT, 0
	.if IS_IMG_SDBL_PRESENT
