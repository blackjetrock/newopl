<file>            : <procdef> <declares> <cline>*
<declare>         : <local> | <global>
<local>           : 'LOCAL' <decvarlist>
<global>          : 'GLOBAL' <decvarlist>
<declares>        : <declare>+
<cline>           : <line> | <line> ':' <cine>+
<procdef>         : <proc_name> <param_list>
<pcon>            : ';' | ','
<pitems>          : <expression> | <expression> <pcon> <pitems>
<print>           : 'PRINT' <pitems>+
<while>           : 'WHILE' <expression> <line>* 'ENDWH'
<do>              : 'DO' <line>* 'UNTIL' <expression>
<if>              : 'IF' <expression> <line>* 'ENDIF' |

		    'IF' <expression> <line>* ('ELSEIF' <expression> <line>*)* ('ELSE' <line>*){1} 'ENDIF'
		    
<expression-list> : <expression> | <expression> (',' <expression>)+
<line>            : 'REM' <text> | <proc_call> |
                    <print> |
                    <onerr> | <label> | <assignment> | <command> |
	            <function> '(' <expression-list> ')' |
                    TRAP <trapable_command> |
                    <if> | <while> | <do> |
	            'GOTO' <label> |
	            <return> |
	            <addr_cmd>
<addr_cmd>        : 'ADDR' '(' <addr_names> ')'
<addr_names>      :  <vname>':' | <vname>'%:' | <vname>'$:' |
                     <vname>'()' | <vname>'%()' | <vname>'$()'
<return>          : 'RETURN' | 'RETURN' <variable>
<proc_name>       :  <vname>':' | <vname>'%:' | <vname>'$:'
<proc_call>       : <proc_name> <expression-list>
<label>           : <string>'::'
<onerr>           : ONERR <label> | ONERR OFF
<string>          : '"'<textchar>*'"'
<text>            : <textchar>*
<number>          : <integer> | <float> | <hexnumber>
<hexnumber>       : '$'<hexdigit>+
<hexdigits>       ; '0' | '1' | '2' | '3' | '4' |
                    '5' | '6' | '7' | '8' | '9' |
                    '0' |'A' |'B' |'C' |'D' |'E' | 'F'
<atom>            : <string> | <number> | <variable> | '-'<variable> | %<character>       
<sub_expr>        : '(' <expression> ')'
     
<eitem>           : <function> | <atom> | <sub_expr> | <proc_call>
<expression>      : <eitem> | <eitem> (<operator> <eitem>)+


<variable>        : <vname> | <vname>'%' | <vname>'$' |
                    <vname>'(' <expression> ')' |
	            <vname>'%''(' <expression> ')' |
	            <vname>'$''(' <expression> ')'
<decvar>          : <vname> | <vname>'%' | <vname>'$' |
                    <vname>'(' <expression> ')' |
	            <vname>'%''(' <expression> ')' |
	            <vname>'$''(' <expression> ')' |
	            <vname>'$''(' <expression ',' <expression> ')'
<parameter>       : <vname> | <vname>'%' | <vname>'$'
<command>         : <command-list-name-entry> <expression>
<assignment>      : <variable> '=' <expression>
<varlist>         : <variable>+
<param_list>      : '(' <parameter>+ ')'
<logfile>         : 'A' | 'B' | 'C' | 'D'
<vname>           : <A-Z><A-Z0-9>* | <logfile>'.'<A-Z><A-Z0-9>*
<operator>        : <operator-list-string>	      

Notes:

*  means zero or more occurrances
+  means  one or more occurrances
{n} Means 0 up to n occurances

No variable name can be a command or function. E.g.:

LOCAL PRINT

is a syntax error, but:

LOCAL PRINT%

is not.

Variables in expressions have to be declared, or externals. External variable names cannot be command or function names.

Procedure parameters cannot be arrays?

Parameters differ from variables in that you cannot assign values to them. They have an external value passed to them from the calling procedure and it is then illegal to assign another value by saying, in the above example, p=p+1.

This:

q:(a$)

is a valid procedure definition. The size of the string is not used when defining a string paramter.
