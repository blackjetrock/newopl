
   Frst:1 T:':'
token_is_variable: tok:':'
   Frst:0 T:' LOCAL'
token_is_variable: tok:' LOCAL'
   Frst:0 T:'('
(output_sub_start)
 Push:'('
   Frst:0 T:'2'
(  output_integer) [i,(U )] i i 2
   Frst:0 T:' )'
token_is_variable: tok:' )'
   Frst:0 T:'e$'
token_is_variable: tok:'e$'
( output_variable) [i,(U )] i i e$
   Frst:0 T:' LOCAL'
token_is_variable: tok:' LOCAL'
   Frst:0 T:'a%'
token_is_variable: tok:'a%'
( output_variable) [i,(U )] i i a%
   Frst:0 T:' ,'
token_is_variable: tok:' ,'
   Frst:0 T:'b%'
token_is_variable: tok:'b%'
( output_variable) [i,(U )] i i b%
   Frst:0 T:' ,'
token_is_variable: tok:' ,'
   Frst:0 T:'b1%'
token_is_variable: tok:'b1%'
( output_variable) [i,(U )] i i b1%
   Frst:0 T:' ,'
token_is_variable: tok:' ,'
   Frst:0 T:'c%'
token_is_variable: tok:'c%'
( output_variable) [i,(U )] i i c%
   Frst:0 T:' ,'
token_is_variable: tok:' ,'
   Frst:0 T:'c1%'
token_is_variable: tok:'c1%'
( output_variable) [i,(U )] i i c1%
   Frst:0 T:' ,'
token_is_variable: tok:' ,'
   Frst:0 T:'x%'
token_is_variable: tok:'x%'
( output_variable) [i,(U )] i i x%
   Frst:0 T:' ,'
token_is_variable: tok:' ,'
   Frst:0 T:'y%'
token_is_variable: tok:'y%'
( output_variable) [i,(U )] i i y%
   Frst:0 T:' ,'
token_is_variable: tok:' ,'
   Frst:0 T:'i%'
token_is_variable: tok:'i%'
( output_variable) [i,(U )] i i i%
   Frst:0 T:' ,'
token_is_variable: tok:' ,'
   Frst:0 T:'sc%'
token_is_variable: tok:'sc%'
( output_variable) [i,(U )] i i sc%
========================================================
graphic: :CURSOR OFF

========================================================
(output_expression_start)
   Frst:1 T:':'
token_is_variable: tok:':'
   Frst:0 T:'graphic'
token_is_variable: tok:'graphic'
( output_variable) [f,(U )] f f graphic
Finalise stack
Pop '('
( output_operator) [f,(U )] f f (
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      f rq:f graphic  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_AUTOCON      f rq:f (  0:
=================
 BE:graphic
type_check_stack_push: 'graphic'

Type Check Stack (1)

000: 'graphic' type:f (1)
 BE:(

Type Check Stack (1)

000: 'graphic' type:f (1)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      f rq:f graphic  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_AUTOCON      f rq:f (  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_INTEGER      f rq:f graphic  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_AUTOCON      f rq:f (  0:
=================
(process_expression_types) 
==INFIX==

infix_stack_push: 'graphic'
infix_stack_pop: 'graphic'
infix_stack_pop: Operator stack empty