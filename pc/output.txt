
(parser_check) NUM_BUFF_ID    :16
(parser_check) EXP_BUFF_ID_MAX:15
(parser_check) 
*********************
**C% = 1 + RND * 4 **
*********************


 (scan_procdef) scan_procdef:

  (check_textlabel) check_textlabel: 'C% = 1 + RND * 4 '
  (check_textlabel) check_textlabel:ret0
 (scan_procdef) scan_procdef:ret0
(translate_file) 
cline failed scan

 (check_declare) check_declare:

  (check_literal) check_literal:lit=' LOCAL' idx=0 'C% = 1 + RND * 4 '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'C% = 1 + RND * 4 '
  (check_literal)   'L' != 'C'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'C% = 1 + RND * 4 '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'C% = 1 + RND * 4 '
  (check_literal)   'G' != 'C'
  (check_literal) check_literal: ret0
 (check_declare) check_declare:ret 0

 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'C% = 1 + RND * 4 ':
     (check_vname) check_vname ret1 '% = 1 + RND * 4 ':
    (check_variable) check_variable: '% = 1 + RND * 4 '
    (check_variable) check_variable: Ary test ' = 1 + RND * 4 '

     (check_literal) check_literal:lit='(' idx=2 ' = 1 + RND * 4 '
     (check_literal) check_literal:After drop space:'(' idx=2 ' = 1 + RND * 4 '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=2 ' = 1 + RND * 4 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=3 '= 1 + RND * 4 '
   (check_literal) check_literal:After while(): 1 + RND * 4 
   (check_literal) check_literal:ret1 

   (check_expression) check_expression: '1 + RND * 4 '

    (check_eitem) check_eitem: '1 + RND * 4 '

     (check_operator) check_operator: 1 + RND * 4 

      (check_literal) check_literal:lit=' ,' idx=5 '1 + RND * 4 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=5 '1 + RND * 4 '
      (check_literal)   ',' != '1'
      (check_literal) check_literal: ret0
     (check_operator) ret0:is comma: 0

     (check_function) check_function: '1 + RND * 4 '
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=5 '1 + RND * 4 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=5 '1 + RND * 4 '
      (check_literal)   '%' != '1'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=5 '1 + RND * 4 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=5 '1 + RND * 4 '
      (check_literal)   '"' != '1'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: '1 + RND * 4 '
       (check_integer) check_integer:ret1
      (check_number) check_number: ret1
     (check_atom) check_atom:ret1
    (check_eitem) check_eitem:ret1

    (check_eitem) check_eitem: ' + RND * 4 '

     (check_operator) check_operator:  + RND * 4 

      (check_literal) check_literal:lit=' ,' idx=7 '+ RND * 4 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=7 '+ RND * 4 '
      (check_literal)   ',' != '+'
      (check_literal) check_literal: ret0
     (check_operator) ret1:is comma: 0
    (check_eitem) check_eitem:ret1 comma:1

    (check_eitem) check_eitem: ' RND * 4 '

     (check_operator) check_operator:  RND * 4 

      (check_literal) check_literal:lit=' ,' idx=9 'RND * 4 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=9 'RND * 4 '
      (check_literal)   ',' != 'R'
      (check_literal) check_literal: ret0
     (check_operator) ret0:is comma: 0

     (check_function) check_function: 'RND * 4 '
     (check_function) check_function: ret1 Found fn=>'RND'
    (check_eitem) check_eitem:ret1

    (check_eitem) check_eitem: ' * 4 '

     (check_operator) check_operator:  * 4 

      (check_literal) check_literal:lit=' ,' idx=13 '* 4 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=13 '* 4 '
      (check_literal)   ',' != '*'
      (check_literal) check_literal: ret0
     (check_operator) ret1:is comma: 0
    (check_eitem) check_eitem:ret1 comma:1

    (check_eitem) check_eitem: ' 4 '

     (check_operator) check_operator:  4 

      (check_literal) check_literal:lit=' ,' idx=15 '4 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=15 '4 '
      (check_literal)   ',' != '4'
      (check_literal) check_literal: ret0
     (check_operator) ret0:is comma: 0

     (check_function) check_function: '4 '
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=14 ' 4 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=15 '4 '
      (check_literal)   '%' != '4'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=14 ' 4 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=15 '4 '
      (check_literal)   '"' != '4'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: '4 '
       (check_integer) check_integer:ret1
      (check_number) check_number: ret1
     (check_atom) check_atom:ret1
    (check_eitem) check_eitem:ret1

    (check_eitem) check_eitem: ' '

     (check_operator) check_operator:  

      (check_literal) check_literal:lit=' ,' idx=17 ''
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=17 ''
      (check_literal) check_literal  ret0 Empty test string
     (check_operator) ret0:is comma: 0

     (check_function) check_function: ''
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=16 ' '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=17 ''
      (check_literal) check_literal  ret0 Empty test string

      (check_literal) check_literal:lit=' "' idx=16 ' '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=17 ''
      (check_literal) check_literal  ret0 Empty test string

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: ''
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname '':
       (check_vname) check_vname ret0 '':
      (check_variable) check_variable:ret0 
     (check_atom) check_atom:ret1

     (check_sub_expr) check_sub_expr:

      (check_literal) check_literal:lit=' (' idx=16 ' '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'(' idx=17 ''
      (check_literal) check_literal  ret0 Empty test string
     (check_sub_expr) check_sub_expr: ret0
    (check_eitem) check_eitem:ret0
   (check_expression) check_expression:ret1 ' '
  (check_assignment) check_assignment:ret1
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=1, ' '
========================================================
C% = 1 + RND * 4 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'C% = 1 + RND * 4 ':
    (check_vname) check_vname ret1 '% = 1 + RND * 4 ':
   (check_variable) check_variable: '% = 1 + RND * 4 '
   (check_variable) check_variable: Ary test ' = 1 + RND * 4 '

    (check_literal) check_literal:lit='(' idx=2 ' = 1 + RND * 4 '
    (check_literal) check_literal:After drop space:'(' idx=2 ' = 1 + RND * 4 '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=2 ' = 1 + RND * 4 '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=3 '= 1 + RND * 4 '
  (check_literal) check_literal:After while(): 1 + RND * 4 
  (check_literal) check_literal:ret1 

  (check_expression) check_expression: '1 + RND * 4 '

   (check_eitem) check_eitem: '1 + RND * 4 '

    (check_operator) check_operator: 1 + RND * 4 

     (check_literal) check_literal:lit=' ,' idx=5 '1 + RND * 4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=5 '1 + RND * 4 '
     (check_literal)   ',' != '1'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: '1 + RND * 4 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=5 '1 + RND * 4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=5 '1 + RND * 4 '
     (check_literal)   '%' != '1'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=5 '1 + RND * 4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=5 '1 + RND * 4 '
     (check_literal)   '"' != '1'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '1 + RND * 4 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: ' + RND * 4 '

    (check_operator) check_operator:  + RND * 4 

     (check_literal) check_literal:lit=' ,' idx=7 '+ RND * 4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=7 '+ RND * 4 '
     (check_literal)   ',' != '+'
     (check_literal) check_literal: ret0
    (check_operator) ret1:is comma: 0
   (check_eitem) check_eitem:ret1 comma:1

   (check_eitem) check_eitem: ' RND * 4 '

    (check_operator) check_operator:  RND * 4 

     (check_literal) check_literal:lit=' ,' idx=9 'RND * 4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=9 'RND * 4 '
     (check_literal)   ',' != 'R'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'RND * 4 '
    (check_function) check_function: ret1 Found fn=>'RND'
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: ' * 4 '

    (check_operator) check_operator:  * 4 

     (check_literal) check_literal:lit=' ,' idx=13 '* 4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=13 '* 4 '
     (check_literal)   ',' != '*'
     (check_literal) check_literal: ret0
    (check_operator) ret1:is comma: 0
   (check_eitem) check_eitem:ret1 comma:1

   (check_eitem) check_eitem: ' 4 '

    (check_operator) check_operator:  4 

     (check_literal) check_literal:lit=' ,' idx=15 '4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=15 '4 '
     (check_literal)   ',' != '4'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: '4 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=14 ' 4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=15 '4 '
     (check_literal)   '%' != '4'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=14 ' 4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=15 '4 '
     (check_literal)   '"' != '4'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '4 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: ' '

    (check_operator) check_operator:  

     (check_literal) check_literal:lit=' ,' idx=17 ''
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=17 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_operator) ret0:is comma: 0

    (check_function) check_function: ''
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=16 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=17 ''
     (check_literal) check_literal  ret0 Empty test string

     (check_literal) check_literal:lit=' "' idx=16 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=17 ''
     (check_literal) check_literal  ret0 Empty test string

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: ''
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname '':
      (check_vname) check_vname ret0 '':
     (check_variable) check_variable:ret0 
    (check_atom) check_atom:ret1

    (check_sub_expr) check_sub_expr:

     (check_literal) check_literal:lit=' (' idx=16 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'(' idx=17 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_sub_expr) check_sub_expr: ret0
   (check_eitem) check_eitem:ret0
  (check_expression) check_expression:ret1 ' '
 (check_assignment) check_assignment:ret1

 (scan_assignment) scan_assignment:

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'C% = 1 + RND * 4 '
   (scan_vname) scan_vname: ret1 'C'
  (scan_variable) scan_variable: '% = 1 + RND * 4 ' vname='C'
  (scan_variable) scan_variable: Ary test ' = 1 + RND * 4 '

   (check_literal) check_literal:lit='(' idx=2 ' = 1 + RND * 4 '
   (check_literal) check_literal:After drop space:'(' idx=2 ' = 1 + RND * 4 '
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='C%' is str:0 int:1 flt:0 ary:0
   Frst:1 T:'C%' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:C% is not function
token_is_variable: tok:'C%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:C% is not function
 (init_get_name) 
init_get_name:'C%'
 (init_get_name) 
init_get_name:'C%'
 (get_name) 
get_name:gn:'C%'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] i i C%
 (print_var_info) 
VAR INFO: '                C%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0

  (scan_assignment_equals) scan_assignment_equals:lit=' =' ' = 1 + RND * 4 '
  (scan_assignment_equals) scan_assignment_equals:After drop space:'= 1 + RND * 4 '
  (scan_assignment_equals) scan_assignment_equals:while loop:= 1 + RND * 4 
   Frst:0 T:':=' exptype:i
  (operator_precedence) 
:= is operator
':=' is operator
  (process_token) 
Token is operator o1 name::= o2 name:
  (process_token) 
opr1:1 opr2:0
Push 1
 Push:':='
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (1)

  (op_stack_print) 
000: := type:0
  (op_stack_print) 
------------------

  (scan_assignment_equals) scan_assignment_equals:ret1

  (scan_expression) scan_expression: ' 1 + RND * 4 '

   (check_eitem) check_eitem: '1 + RND * 4 '

    (check_operator) check_operator: 1 + RND * 4 

     (check_literal) check_literal:lit=' ,' idx=5 '1 + RND * 4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=5 '1 + RND * 4 '
     (check_literal)   ',' != '1'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: '1 + RND * 4 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=5 '1 + RND * 4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=5 '1 + RND * 4 '
     (check_literal)   '%' != '1'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=5 '1 + RND * 4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=5 '1 + RND * 4 '
     (check_literal)   '"' != '1'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '1 + RND * 4 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (scan_eitem) scan_eitem:

    (check_operator) check_operator: 1 + RND * 4 

     (check_literal) check_literal:lit=' ,' idx=5 '1 + RND * 4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=5 '1 + RND * 4 '
     (check_literal)   ',' != '1'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: '1 + RND * 4 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=5 '1 + RND * 4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=5 '1 + RND * 4 '
     (check_literal)   '%' != '1'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=5 '1 + RND * 4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=5 '1 + RND * 4 '
     (check_literal)   '"' != '1'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '1 + RND * 4 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1

    (scan_atom) scan_atom:

     (check_literal) check_literal:lit=' %' idx=5 '1 + RND * 4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=5 '1 + RND * 4 '
     (check_literal)   '%' != '1'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=5 '1 + RND * 4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=5 '1 + RND * 4 '
     (check_literal)   '"' != '1'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '1 + RND * 4 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1

     (scan_number) scan_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '1 + RND * 4 '
      (check_integer) check_integer:ret1

      (scan_integer) scan_integer:
      (scan_integer) scan_integer:ret1
   Frst:0 T:'1' exptype:i
     (operator_precedence) 
:= is operator
modify_expression_type:Inittype:i Intype:i Outtype:i
(  output_integer) [i,()] i i 1
     (scan_integer) scan_integer:ret1  1
    (scan_atom) scan_atom:ret1
   (scan_expression) n commas now:0

    (check_eitem) check_eitem: ' + RND * 4 '

     (check_operator) check_operator:  + RND * 4 

      (check_literal) check_literal:lit=' ,' idx=7 '+ RND * 4 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=7 '+ RND * 4 '
      (check_literal)   ',' != '+'
      (check_literal) check_literal: ret0
     (check_operator) ret1:is comma: 0
    (check_eitem) check_eitem:ret1 comma:1

    (scan_eitem) scan_eitem:

     (check_operator) check_operator:  + RND * 4 

      (check_literal) check_literal:lit=' ,' idx=7 '+ RND * 4 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=7 '+ RND * 4 '
      (check_literal)   ',' != '+'
      (check_literal) check_literal: ret0
     (check_operator) ret1:is comma: 0

     (scan_operator) scan_operator: ' + RND * 4 '

      (check_literal) check_literal:lit=' ,' idx=7 '+ RND * 4 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=7 '+ RND * 4 '
      (check_literal)   ',' != '+'
      (check_literal) check_literal: ret0
     (scan_operator) scan_operator: ret1 ' RND * 4 '
   Frst:0 T:'+' exptype:i
    (operator_precedence) 
+ is operator
    (operator_precedence) 
:= is operator
'+' is operator
    (process_token) 
Token is operator o1 name:+ o2 name::=
    (process_token) 
opr1:3 opr2:1
    (operator_precedence) 
:= is operator
    (operator_precedence) 
:= is operator
Push 1
 Push:'+'
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (2)

    (op_stack_print) 
000: := type:0
    (op_stack_print) 
001: + type:0
    (op_stack_print) 
------------------

    (scan_eitem) Is comma;0
    (scan_expression) n commas now:0

     (check_eitem) check_eitem: ' RND * 4 '

      (check_operator) check_operator:  RND * 4 

       (check_literal) check_literal:lit=' ,' idx=9 'RND * 4 '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=9 'RND * 4 '
       (check_literal)   ',' != 'R'
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: 'RND * 4 '
      (check_function) check_function: ret1 Found fn=>'RND'
     (check_eitem) check_eitem:ret1

     (scan_eitem) scan_eitem:

      (check_operator) check_operator:  RND * 4 

       (check_literal) check_literal:lit=' ,' idx=9 'RND * 4 '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=9 'RND * 4 '
       (check_literal)   ',' != 'R'
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: 'RND * 4 '
      (check_function) check_function: ret1 Found fn=>'RND'

      (scan_function) scan_function:
   Frst:0 T:'RND' exptype:i
      (operator_precedence) 
+ is operator
      (token_is_function) 
token_is_function:
      (token_is_function) RND is function
      (function_return_type) 
function_return_type: 'RND' =>f
      (function_return_type) 
function_return_type: 'RND' =>1
process_token: 'RND' t=>f
 Push:'RND'
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (3)

      (op_stack_print) 
000: := type:0
      (op_stack_print) 
001: + type:0
      (op_stack_print) 
002: RND type:1
      (op_stack_print) 
------------------

      (scan_expression) n commas now:0

       (check_eitem) check_eitem: ' * 4 '

        (check_operator) check_operator:  * 4 

         (check_literal) check_literal:lit=' ,' idx=13 '* 4 '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:',' idx=13 '* 4 '
         (check_literal)   ',' != '*'
         (check_literal) check_literal: ret0
        (check_operator) ret1:is comma: 0
       (check_eitem) check_eitem:ret1 comma:1

       (scan_eitem) scan_eitem:

        (check_operator) check_operator:  * 4 

         (check_literal) check_literal:lit=' ,' idx=13 '* 4 '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:',' idx=13 '* 4 '
         (check_literal)   ',' != '*'
         (check_literal) check_literal: ret0
        (check_operator) ret1:is comma: 0

        (scan_operator) scan_operator: ' * 4 '

         (check_literal) check_literal:lit=' ,' idx=13 '* 4 '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:',' idx=13 '* 4 '
         (check_literal)   ',' != '*'
         (check_literal) check_literal: ret0
        (scan_operator) scan_operator: ret1 ' 4 '
   Frst:0 T:'*' exptype:i
       (operator_precedence) 
* is operator
'*' is operator
       (process_token) 
Token is operator o1 name:* o2 name:RND
       (process_token) 
opr1:5 opr2:0
Push 1
 Push:'*'
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (4)

       (op_stack_print) 
000: := type:0
       (op_stack_print) 
001: + type:0
       (op_stack_print) 
002: RND type:1
       (op_stack_print) 
003: * type:0
       (op_stack_print) 
------------------

       (scan_eitem) Is comma;0
       (scan_expression) n commas now:0

        (check_eitem) check_eitem: ' 4 '

         (check_operator) check_operator:  4 

          (check_literal) check_literal:lit=' ,' idx=15 '4 '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:',' idx=15 '4 '
          (check_literal)   ',' != '4'
          (check_literal) check_literal: ret0
         (check_operator) ret0:is comma: 0

         (check_function) check_function: '4 '
         (check_function) check_function: ret0

         (check_atom) check_atom:

          (check_literal) check_literal:lit=' %' idx=14 ' 4 '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=15 '4 '
          (check_literal)   '%' != '4'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=14 ' 4 '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=15 '4 '
          (check_literal)   '"' != '4'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '4 '
           (check_integer) check_integer:ret1
          (check_number) check_number: ret1
         (check_atom) check_atom:ret1
        (check_eitem) check_eitem:ret1

        (scan_eitem) scan_eitem:

         (check_operator) check_operator:  4 

          (check_literal) check_literal:lit=' ,' idx=15 '4 '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:',' idx=15 '4 '
          (check_literal)   ',' != '4'
          (check_literal) check_literal: ret0
         (check_operator) ret0:is comma: 0

         (check_function) check_function: '4 '
         (check_function) check_function: ret0

         (check_atom) check_atom:

          (check_literal) check_literal:lit=' %' idx=14 ' 4 '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=15 '4 '
          (check_literal)   '%' != '4'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=14 ' 4 '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=15 '4 '
          (check_literal)   '"' != '4'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '4 '
           (check_integer) check_integer:ret1
          (check_number) check_number: ret1
         (check_atom) check_atom:ret1

         (scan_atom) scan_atom:

          (check_literal) check_literal:lit=' %' idx=14 ' 4 '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=15 '4 '
          (check_literal)   '%' != '4'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=14 ' 4 '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=15 '4 '
          (check_literal)   '"' != '4'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '4 '
           (check_integer) check_integer:ret1
          (check_number) check_number: ret1

          (scan_number) scan_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '4 '
           (check_integer) check_integer:ret1

           (scan_integer) scan_integer:
           (scan_integer) scan_integer:ret1
   Frst:0 T:'4' exptype:i
          (operator_precedence) 
* is operator
modify_expression_type:Inittype:i Intype:i Outtype:i
(  output_integer) [i,()] i i 4
          (scan_integer) scan_integer:ret1  4
         (scan_atom) scan_atom:ret1
        (scan_expression) n commas now:0

         (check_eitem) check_eitem: ' '

          (check_operator) check_operator:  

           (check_literal) check_literal:lit=' ,' idx=17 ''
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:',' idx=17 ''
           (check_literal) check_literal  ret0 Empty test string
          (check_operator) ret0:is comma: 0

          (check_function) check_function: ''
          (check_function) check_function: ret0

          (check_atom) check_atom:

           (check_literal) check_literal:lit=' %' idx=16 ' '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'%' idx=17 ''
           (check_literal) check_literal  ret0 Empty test string

           (check_literal) check_literal:lit=' "' idx=16 ' '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'"' idx=17 ''
           (check_literal) check_literal  ret0 Empty test string

           (check_number) check_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret0

            (check_integer) check_integer: ''
            (check_integer) check_integer:ret0
           (check_number) check_number: ret0

           (check_variable) check_variable:

            (check_vname) check_vname '':
            (check_vname) check_vname ret0 '':
           (check_variable) check_variable:ret0 
          (check_atom) check_atom:ret1

          (check_sub_expr) check_sub_expr:

           (check_literal) check_literal:lit=' (' idx=16 ' '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'(' idx=17 ''
           (check_literal) check_literal  ret0 Empty test string
          (check_sub_expr) check_sub_expr: ret0
         (check_eitem) check_eitem:ret0
        (scan_expression) scan_expression: ret1 ' ' commas:0
       (scan_assignment) scan_assignment: ret1
Finalise stack
Pop '*'
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (3)

      (op_stack_print) 
000: := type:0
      (op_stack_print) 
001: + type:0
      (op_stack_print) 
002: RND type:1
      (op_stack_print) 
------------------

( output_operator) [i,()] i i *
      (token_is_function) 
token_is_function:
      (token_is_function) 
token_is_function:* is not function
Pop 'RND'
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (2)

      (op_stack_print) 
000: := type:0
      (op_stack_print) 
001: + type:0
      (op_stack_print) 
------------------

( output_operator) [i,()] i i RND
      (token_is_function) 
token_is_function:
      (token_is_function) RND is function
Pop '+'
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (1)

      (op_stack_print) 
000: := type:0
      (op_stack_print) 
------------------

( output_operator) [i,()] i i +
      (token_is_function) 
token_is_function:
      (token_is_function) 
token_is_function:+ is not function
Pop ':='
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (0)

      (op_stack_print) 
------------------

( output_operator) [i,()] i i :=
      (token_is_function) 
token_is_function:
      (token_is_function) 
token_is_function::= is not function
      (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'C%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '1' nidx:6  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '4' nidx:16  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '*' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     i rq:i 'RND' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '+' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i ':=' nidx:0  0:
=================
 BE:C%
type_check_stack_push: 'C%'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (1)

      (type_check_stack_print) 
000: 'C%' type:0
      (type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'C%' type:i (0)
 BE:1
type_check_stack_push: '1'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (2)

      (type_check_stack_print) 
000: 'C%' type:0
      (type_check_stack_print) 
001: '1' type:0
      (type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'C%' type:i (0)
001: '1' type:i (0)
 BE:4
type_check_stack_push: '4'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (3)

      (type_check_stack_print) 
000: 'C%' type:0
      (type_check_stack_print) 
001: '1' type:0
      (type_check_stack_print) 
002: '4' type:0
      (type_check_stack_print) 
------------------


Type Check Stack (3)

000: 'C%' type:i (0)
001: '1' type:i (0)
002: '4' type:i (0)
 BE:*
BUFF_ID_OPERATOR
Found operator *
type_check_stack_pop: '4'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (2)

      (type_check_stack_print) 
000: 'C%' type:0
      (type_check_stack_print) 
001: '1' type:0
      (type_check_stack_print) 
------------------

type_check_stack_pop: '1'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (1)

      (type_check_stack_print) 
000: 'C%' type:0
      (type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (2)

      (type_check_stack_print) 
000: 'C%' type:0
      (type_check_stack_print) 
001: '000' type:0
      (type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'C%' type:i (0)
001: '000' type:i (0)
 BE:RND
FN: 0 args
      (function_return_type) 
function_return_type: 'RND' =>f
      (function_return_type) 
function_return_type: 'RND' =>1
ret_type;1 f
typecheck_expression:Ret type of RND : f
type_check_stack_push: '000'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (3)

      (type_check_stack_print) 
000: 'C%' type:0
      (type_check_stack_print) 
001: '000' type:0
      (type_check_stack_print) 
002: '000' type:1
      (type_check_stack_print) 
------------------


Type Check Stack (3)

000: 'C%' type:i (0)
001: '000' type:i (0)
002: '000' type:f (1)
 BE:+
BUFF_ID_OPERATOR
Found operator +
type_check_stack_pop: '000'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (2)

      (type_check_stack_print) 
000: 'C%' type:0
      (type_check_stack_print) 
001: '000' type:0
      (type_check_stack_print) 
------------------

type_check_stack_pop: '000'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (1)

      (type_check_stack_print) 
000: 'C%' type:0
      (type_check_stack_print) 
------------------

 Mutable type 1 0
type_with_least_conversion_from: f i => f
type_with_least_conversion_from: f i => f
 Autoconversion
 --------------
 Op1: type:1 req type:1
 Op2: type:0 req type:0
 BE:  type:1 req type:1
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i 'C%'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i '1'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_INTEGER      i rq:i '4'  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 3 2
(dump_exp_buffer2) N5 EXP_BUFF_ID_FUNCTION     f rq:f 'RND'  0:
=================
 Insert after 4 exp_buffer2_i:5
   Found at i:3
   Copied 4 to 5:
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i 'C%'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i '1'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_INTEGER      i rq:i '4'  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 3 2
(dump_exp_buffer2) N7 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 5 4
(dump_exp_buffer2) N5 EXP_BUFF_ID_FUNCTION     f rq:f 'RND'  0:
=================
type_check_stack_push: '000'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (2)

      (type_check_stack_print) 
000: 'C%' type:0
      (type_check_stack_print) 
001: '000' type:1
      (type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'C%' type:i (0)
001: '000' type:f (1)
 BE::=
BUFF_ID_OPERATOR
Found operator :=
type_check_stack_pop: '000'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (1)

      (type_check_stack_print) 
000: 'C%' type:0
      (type_check_stack_print) 
------------------

type_check_stack_pop: 'C%'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (0)

      (type_check_stack_print) 
------------------

 Mutable type 1 0
type_with_least_conversion_from: f i => f
type_with_least_conversion_from: f i => f
 Autoconversion
 --------------
 Op1: type:1 req type:1
 Op2: type:0 req type:0
 BE:  type:1 req type:1
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i 'C%'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i '1'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_INTEGER      i rq:i '4'  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 3 2
(dump_exp_buffer2) N7 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 5 4
(dump_exp_buffer2) N5 EXP_BUFF_ID_FUNCTION     f rq:f 'RND'  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_OPERATOR     f rq:f '+'  2: 5 4
=================
 Insert after 6 exp_buffer2_i:7
   Found at i:6
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i 'C%'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i '1'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_INTEGER      i rq:i '4'  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 3 2
(dump_exp_buffer2) N7 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 5 4
(dump_exp_buffer2) N5 EXP_BUFF_ID_FUNCTION     f rq:f 'RND'  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_OPERATOR     f rq:f '+'  2: 5 4
(dump_exp_buffer2) N9 EXP_BUFF_ID_AUTOCON      i rq:i 'autocon f->i'  2: 6 1
=================
type_check_stack_push: '000'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (1)

      (type_check_stack_print) 
000: '000' type:0
      (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'C%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '1' nidx:6  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '4' nidx:16  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '*' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     i rq:i 'RND' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '+' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i ':=' nidx:0  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i 'C%'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i '1'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_INTEGER      i rq:i '4'  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 3 2
(dump_exp_buffer2) N7 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 5 4
(dump_exp_buffer2) N5 EXP_BUFF_ID_FUNCTION     f rq:f 'RND'  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_OPERATOR     f rq:f '+'  2: 5 4
(dump_exp_buffer2) N9 EXP_BUFF_ID_AUTOCON      i rq:i 'autocon f->i'  2: 6 1
(dump_exp_buffer2) N8 EXP_BUFF_ID_OPERATOR     i rq:i ':='  2: 6 1
=================
      (process_expression_types) 
==INFIX==

Var: C% ary:0 NumIdx:0
infix_stack_push: 'C%'
infix_stack_push: '1'
infix_stack_push: '4'
infix_stack_pop: '4'
infix_stack_pop: '1'
infix_stack_push: '(1 * 4)'
infix_stack_push: 'RND()'
infix_stack_pop: 'RND()'
infix_stack_pop: '(1 * 4)'
infix_stack_push: '((1 * 4) + RND())'
infix_stack_pop: '((1 * 4) + RND())'
infix_stack_pop: 'C%'
infix_stack_push: '(C% := ((1 * 4) + RND()))'
infix_stack_pop: '(C% := ((1 * 4) + RND()))'
      (process_expression_types) ==(C% := ((1 * 4) + RND()))==
      (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i C%  0:
(    output_qcode) N2 EXP_BUFF_ID_INTEGER      i rq:i 1  0:
(    output_qcode) N3 EXP_BUFF_ID_INTEGER      i rq:i 4  0:
(    output_qcode) N4 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 3 2
(    output_qcode) N7 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 5 4
(    output_qcode) N5 EXP_BUFF_ID_FUNCTION     f rq:f RND  0:
(    output_qcode) N6 EXP_BUFF_ID_OPERATOR     f rq:f +  2: 5 4
(    output_qcode) N9 EXP_BUFF_ID_AUTOCON      i rq:i autocon f->i  2: 6 1
(    output_qcode) N8 EXP_BUFF_ID_OPERATOR     i rq:i :=  2: 6 1

       (check_literal) check_literal:lit=':' idx=17 ''
       (check_literal) check_literal:After drop space:':' idx=17 ''
       (check_literal) check_literal  ret0 Empty test string
      (translate_file) 
cline scanned OK
***********************
**C% = 1 + RND() * 4 **
***********************


 (scan_procdef) scan_procdef:

  (check_textlabel) check_textlabel: 'C% = 1 + RND() * 4 '
  (check_textlabel) check_textlabel:ret0
 (scan_procdef) scan_procdef:ret0
(translate_file) 
cline failed scan

 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'C% = 1 + RND() * 4 ':
     (check_vname) check_vname ret1 '% = 1 + RND() * 4 ':
    (check_variable) check_variable: '% = 1 + RND() * 4 '
    (check_variable) check_variable: Ary test ' = 1 + RND() * 4 '

     (check_literal) check_literal:lit='(' idx=2 ' = 1 + RND() * 4 '
     (check_literal) check_literal:After drop space:'(' idx=2 ' = 1 + RND() * 4 '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=2 ' = 1 + RND() * 4 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=3 '= 1 + RND() * 4 '
   (check_literal) check_literal:After while(): 1 + RND() * 4 
   (check_literal) check_literal:ret1 

   (check_expression) check_expression: '1 + RND() * 4 '

    (check_eitem) check_eitem: '1 + RND() * 4 '

     (check_operator) check_operator: 1 + RND() * 4 

      (check_literal) check_literal:lit=' ,' idx=5 '1 + RND() * 4 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=5 '1 + RND() * 4 '
      (check_literal)   ',' != '1'
      (check_literal) check_literal: ret0
     (check_operator) ret0:is comma: 0

     (check_function) check_function: '1 + RND() * 4 '
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=5 '1 + RND() * 4 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=5 '1 + RND() * 4 '
      (check_literal)   '%' != '1'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=5 '1 + RND() * 4 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=5 '1 + RND() * 4 '
      (check_literal)   '"' != '1'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: '1 + RND() * 4 '
       (check_integer) check_integer:ret1
      (check_number) check_number: ret1
     (check_atom) check_atom:ret1
    (check_eitem) check_eitem:ret1

    (check_eitem) check_eitem: ' + RND() * 4 '

     (check_operator) check_operator:  + RND() * 4 

      (check_literal) check_literal:lit=' ,' idx=7 '+ RND() * 4 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=7 '+ RND() * 4 '
      (check_literal)   ',' != '+'
      (check_literal) check_literal: ret0
     (check_operator) ret1:is comma: 0
    (check_eitem) check_eitem:ret1 comma:1

    (check_eitem) check_eitem: ' RND() * 4 '

     (check_operator) check_operator:  RND() * 4 

      (check_literal) check_literal:lit=' ,' idx=9 'RND() * 4 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=9 'RND() * 4 '
      (check_literal)   ',' != 'R'
      (check_literal) check_literal: ret0
     (check_operator) ret0:is comma: 0

     (check_function) check_function: 'RND() * 4 '
     (check_function) check_function: ret1 Found fn=>'RND'
    (check_eitem) check_eitem:ret1

    (check_eitem) check_eitem: '() * 4 '

     (check_operator) check_operator: () * 4 

      (check_literal) check_literal:lit=' ,' idx=12 '() * 4 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=12 '() * 4 '
      (check_literal)   ',' != '('
      (check_literal) check_literal: ret0
     (check_operator) ret0:is comma: 0

     (check_function) check_function: '() * 4 '
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=12 '() * 4 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=12 '() * 4 '
      (check_literal)   '%' != '('
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=12 '() * 4 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=12 '() * 4 '
      (check_literal)   '"' != '('
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: '() * 4 '
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname '() * 4 ':
       (check_vname) check_vname ret0 '() * 4 ':
      (check_variable) check_variable:ret0 
     (check_atom) check_atom:ret1

     (check_sub_expr) check_sub_expr:

      (check_literal) check_literal:lit=' (' idx=12 '() * 4 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'(' idx=12 '() * 4 '
      (check_literal) check_literal:After while():) * 4 
      (check_literal) check_literal:ret1 
     (check_sub_expr) check_sub_expr: ret1
    (check_eitem) check_eitem:ret1

    (check_eitem) check_eitem: ') * 4 '

     (check_operator) check_operator: ) * 4 

      (check_literal) check_literal:lit=' ,' idx=13 ') * 4 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=13 ') * 4 '
      (check_literal)   ',' != ')'
      (check_literal) check_literal: ret0
     (check_operator) ret0:is comma: 0

     (check_function) check_function: ') * 4 '
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=13 ') * 4 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=13 ') * 4 '
      (check_literal)   '%' != ')'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=13 ') * 4 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=13 ') * 4 '
      (check_literal)   '"' != ')'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: ') * 4 '
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname ') * 4 ':
       (check_vname) check_vname ret0 ') * 4 ':
      (check_variable) check_variable:ret0 
     (check_atom) check_atom:ret1

     (check_sub_expr) check_sub_expr:

      (check_literal) check_literal:lit=' (' idx=13 ') * 4 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'(' idx=13 ') * 4 '
      (check_literal)   '(' != ')'
      (check_literal) check_literal: ret0
     (check_sub_expr) check_sub_expr: ret0
    (check_eitem) check_eitem:ret0
   (check_expression) check_expression:ret1 ') * 4 '
  (check_assignment) check_assignment:ret1
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=6, ') * 4 '
========================================================
C% = 1 + RND() * 4 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'C% = 1 + RND() * 4 ':
    (check_vname) check_vname ret1 '% = 1 + RND() * 4 ':
   (check_variable) check_variable: '% = 1 + RND() * 4 '
   (check_variable) check_variable: Ary test ' = 1 + RND() * 4 '

    (check_literal) check_literal:lit='(' idx=2 ' = 1 + RND() * 4 '
    (check_literal) check_literal:After drop space:'(' idx=2 ' = 1 + RND() * 4 '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=2 ' = 1 + RND() * 4 '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=3 '= 1 + RND() * 4 '
  (check_literal) check_literal:After while(): 1 + RND() * 4 
  (check_literal) check_literal:ret1 

  (check_expression) check_expression: '1 + RND() * 4 '

   (check_eitem) check_eitem: '1 + RND() * 4 '

    (check_operator) check_operator: 1 + RND() * 4 

     (check_literal) check_literal:lit=' ,' idx=5 '1 + RND() * 4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=5 '1 + RND() * 4 '
     (check_literal)   ',' != '1'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: '1 + RND() * 4 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=5 '1 + RND() * 4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=5 '1 + RND() * 4 '
     (check_literal)   '%' != '1'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=5 '1 + RND() * 4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=5 '1 + RND() * 4 '
     (check_literal)   '"' != '1'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '1 + RND() * 4 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: ' + RND() * 4 '

    (check_operator) check_operator:  + RND() * 4 

     (check_literal) check_literal:lit=' ,' idx=7 '+ RND() * 4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=7 '+ RND() * 4 '
     (check_literal)   ',' != '+'
     (check_literal) check_literal: ret0
    (check_operator) ret1:is comma: 0
   (check_eitem) check_eitem:ret1 comma:1

   (check_eitem) check_eitem: ' RND() * 4 '

    (check_operator) check_operator:  RND() * 4 

     (check_literal) check_literal:lit=' ,' idx=9 'RND() * 4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=9 'RND() * 4 '
     (check_literal)   ',' != 'R'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'RND() * 4 '
    (check_function) check_function: ret1 Found fn=>'RND'
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: '() * 4 '

    (check_operator) check_operator: () * 4 

     (check_literal) check_literal:lit=' ,' idx=12 '() * 4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=12 '() * 4 '
     (check_literal)   ',' != '('
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: '() * 4 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=12 '() * 4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=12 '() * 4 '
     (check_literal)   '%' != '('
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=12 '() * 4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=12 '() * 4 '
     (check_literal)   '"' != '('
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '() * 4 '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname '() * 4 ':
      (check_vname) check_vname ret0 '() * 4 ':
     (check_variable) check_variable:ret0 
    (check_atom) check_atom:ret1

    (check_sub_expr) check_sub_expr:

     (check_literal) check_literal:lit=' (' idx=12 '() * 4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'(' idx=12 '() * 4 '
     (check_literal) check_literal:After while():) * 4 
     (check_literal) check_literal:ret1 
    (check_sub_expr) check_sub_expr: ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: ') * 4 '

    (check_operator) check_operator: ) * 4 

     (check_literal) check_literal:lit=' ,' idx=13 ') * 4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=13 ') * 4 '
     (check_literal)   ',' != ')'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: ') * 4 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=13 ') * 4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=13 ') * 4 '
     (check_literal)   '%' != ')'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=13 ') * 4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=13 ') * 4 '
     (check_literal)   '"' != ')'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: ') * 4 '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname ') * 4 ':
      (check_vname) check_vname ret0 ') * 4 ':
     (check_variable) check_variable:ret0 
    (check_atom) check_atom:ret1

    (check_sub_expr) check_sub_expr:

     (check_literal) check_literal:lit=' (' idx=13 ') * 4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'(' idx=13 ') * 4 '
     (check_literal)   '(' != ')'
     (check_literal) check_literal: ret0
    (check_sub_expr) check_sub_expr: ret0
   (check_eitem) check_eitem:ret0
  (check_expression) check_expression:ret1 ') * 4 '
 (check_assignment) check_assignment:ret1

 (scan_assignment) scan_assignment:

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'C% = 1 + RND() * 4 '
   (scan_vname) scan_vname: ret1 'C'
  (scan_variable) scan_variable: '% = 1 + RND() * 4 ' vname='C'
  (scan_variable) scan_variable: Ary test ' = 1 + RND() * 4 '

   (check_literal) check_literal:lit='(' idx=2 ' = 1 + RND() * 4 '
   (check_literal) check_literal:After drop space:'(' idx=2 ' = 1 + RND() * 4 '
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='C%' is str:0 int:1 flt:0 ary:0
   Frst:1 T:'C%' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:C% is not function
token_is_variable: tok:'C%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:C% is not function
 (init_get_name) 
init_get_name:'C%'
 (init_get_name) 
init_get_name:'C%'
 (get_name) 
get_name:gn:'C%'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] i i C%
 (print_var_info) 
VAR INFO: '                C%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0

  (scan_assignment_equals) scan_assignment_equals:lit=' =' ' = 1 + RND() * 4 '
  (scan_assignment_equals) scan_assignment_equals:After drop space:'= 1 + RND() * 4 '
  (scan_assignment_equals) scan_assignment_equals:while loop:= 1 + RND() * 4 
   Frst:0 T:':=' exptype:i
  (operator_precedence) 
:= is operator
':=' is operator
  (process_token) 
Token is operator o1 name::= o2 name:
  (process_token) 
opr1:1 opr2:0
Push 1
 Push:':='
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (1)

  (op_stack_print) 
000: := type:0
  (op_stack_print) 
------------------

  (scan_assignment_equals) scan_assignment_equals:ret1

  (scan_expression) scan_expression: ' 1 + RND() * 4 '

   (check_eitem) check_eitem: '1 + RND() * 4 '

    (check_operator) check_operator: 1 + RND() * 4 

     (check_literal) check_literal:lit=' ,' idx=5 '1 + RND() * 4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=5 '1 + RND() * 4 '
     (check_literal)   ',' != '1'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: '1 + RND() * 4 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=5 '1 + RND() * 4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=5 '1 + RND() * 4 '
     (check_literal)   '%' != '1'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=5 '1 + RND() * 4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=5 '1 + RND() * 4 '
     (check_literal)   '"' != '1'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '1 + RND() * 4 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (scan_eitem) scan_eitem:

    (check_operator) check_operator: 1 + RND() * 4 

     (check_literal) check_literal:lit=' ,' idx=5 '1 + RND() * 4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=5 '1 + RND() * 4 '
     (check_literal)   ',' != '1'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: '1 + RND() * 4 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=5 '1 + RND() * 4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=5 '1 + RND() * 4 '
     (check_literal)   '%' != '1'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=5 '1 + RND() * 4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=5 '1 + RND() * 4 '
     (check_literal)   '"' != '1'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '1 + RND() * 4 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1

    (scan_atom) scan_atom:

     (check_literal) check_literal:lit=' %' idx=5 '1 + RND() * 4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=5 '1 + RND() * 4 '
     (check_literal)   '%' != '1'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=5 '1 + RND() * 4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=5 '1 + RND() * 4 '
     (check_literal)   '"' != '1'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '1 + RND() * 4 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1

     (scan_number) scan_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '1 + RND() * 4 '
      (check_integer) check_integer:ret1

      (scan_integer) scan_integer:
      (scan_integer) scan_integer:ret1
   Frst:0 T:'1' exptype:i
     (operator_precedence) 
:= is operator
modify_expression_type:Inittype:i Intype:i Outtype:i
(  output_integer) [i,()] i i 1
     (scan_integer) scan_integer:ret1  1
    (scan_atom) scan_atom:ret1
   (scan_expression) n commas now:0

    (check_eitem) check_eitem: ' + RND() * 4 '

     (check_operator) check_operator:  + RND() * 4 

      (check_literal) check_literal:lit=' ,' idx=7 '+ RND() * 4 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=7 '+ RND() * 4 '
      (check_literal)   ',' != '+'
      (check_literal) check_literal: ret0
     (check_operator) ret1:is comma: 0
    (check_eitem) check_eitem:ret1 comma:1

    (scan_eitem) scan_eitem:

     (check_operator) check_operator:  + RND() * 4 

      (check_literal) check_literal:lit=' ,' idx=7 '+ RND() * 4 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=7 '+ RND() * 4 '
      (check_literal)   ',' != '+'
      (check_literal) check_literal: ret0
     (check_operator) ret1:is comma: 0

     (scan_operator) scan_operator: ' + RND() * 4 '

      (check_literal) check_literal:lit=' ,' idx=7 '+ RND() * 4 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=7 '+ RND() * 4 '
      (check_literal)   ',' != '+'
      (check_literal) check_literal: ret0
     (scan_operator) scan_operator: ret1 ' RND() * 4 '
   Frst:0 T:'+' exptype:i
    (operator_precedence) 
+ is operator
    (operator_precedence) 
:= is operator
'+' is operator
    (process_token) 
Token is operator o1 name:+ o2 name::=
    (process_token) 
opr1:3 opr2:1
    (operator_precedence) 
:= is operator
    (operator_precedence) 
:= is operator
Push 1
 Push:'+'
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (2)

    (op_stack_print) 
000: := type:0
    (op_stack_print) 
001: + type:0
    (op_stack_print) 
------------------

    (scan_eitem) Is comma;0
    (scan_expression) n commas now:0

     (check_eitem) check_eitem: ' RND() * 4 '

      (check_operator) check_operator:  RND() * 4 

       (check_literal) check_literal:lit=' ,' idx=9 'RND() * 4 '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=9 'RND() * 4 '
       (check_literal)   ',' != 'R'
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: 'RND() * 4 '
      (check_function) check_function: ret1 Found fn=>'RND'
     (check_eitem) check_eitem:ret1

     (scan_eitem) scan_eitem:

      (check_operator) check_operator:  RND() * 4 

       (check_literal) check_literal:lit=' ,' idx=9 'RND() * 4 '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=9 'RND() * 4 '
       (check_literal)   ',' != 'R'
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: 'RND() * 4 '
      (check_function) check_function: ret1 Found fn=>'RND'

      (scan_function) scan_function:
   Frst:0 T:'RND' exptype:i
      (operator_precedence) 
+ is operator
      (token_is_function) 
token_is_function:
      (token_is_function) RND is function
      (function_return_type) 
function_return_type: 'RND' =>f
      (function_return_type) 
function_return_type: 'RND' =>1
process_token: 'RND' t=>f
 Push:'RND'
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (3)

      (op_stack_print) 
000: := type:0
      (op_stack_print) 
001: + type:0
      (op_stack_print) 
002: RND type:1
      (op_stack_print) 
------------------

      (scan_expression) n commas now:0

       (check_eitem) check_eitem: '() * 4 '

        (check_operator) check_operator: () * 4 

         (check_literal) check_literal:lit=' ,' idx=12 '() * 4 '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:',' idx=12 '() * 4 '
         (check_literal)   ',' != '('
         (check_literal) check_literal: ret0
        (check_operator) ret0:is comma: 0

        (check_function) check_function: '() * 4 '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=12 '() * 4 '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=12 '() * 4 '
         (check_literal)   '%' != '('
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=12 '() * 4 '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=12 '() * 4 '
         (check_literal)   '"' != '('
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: '() * 4 '
          (check_integer) check_integer:ret0
         (check_number) check_number: ret0

         (check_variable) check_variable:

          (check_vname) check_vname '() * 4 ':
          (check_vname) check_vname ret0 '() * 4 ':
         (check_variable) check_variable:ret0 
        (check_atom) check_atom:ret1

        (check_sub_expr) check_sub_expr:

         (check_literal) check_literal:lit=' (' idx=12 '() * 4 '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'(' idx=12 '() * 4 '
         (check_literal) check_literal:After while():) * 4 
         (check_literal) check_literal:ret1 
        (check_sub_expr) check_sub_expr: ret1
       (check_eitem) check_eitem:ret1

       (scan_eitem) scan_eitem:

        (check_operator) check_operator: () * 4 

         (check_literal) check_literal:lit=' ,' idx=12 '() * 4 '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:',' idx=12 '() * 4 '
         (check_literal)   ',' != '('
         (check_literal) check_literal: ret0
        (check_operator) ret0:is comma: 0

        (check_function) check_function: '() * 4 '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=12 '() * 4 '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=12 '() * 4 '
         (check_literal)   '%' != '('
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=12 '() * 4 '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=12 '() * 4 '
         (check_literal)   '"' != '('
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: '() * 4 '
          (check_integer) check_integer:ret0
         (check_number) check_number: ret0

         (check_variable) check_variable:

          (check_vname) check_vname '() * 4 ':
          (check_vname) check_vname ret0 '() * 4 ':
         (check_variable) check_variable:ret0 
        (check_atom) check_atom:ret1

        (check_sub_expr) check_sub_expr:

         (check_literal) check_literal:lit=' (' idx=12 '() * 4 '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'(' idx=12 '() * 4 '
         (check_literal) check_literal:After while():) * 4 
         (check_literal) check_literal:ret1 
        (check_sub_expr) check_sub_expr: ret1

        (scan_sub_expr) scan_sub_expr:

         (scan_literal) scan_literal:lit=' (' '() * 4 '
         (scan_literal) scan_literal:After drop space:'() * 4 '
         (scan_literal) scan_literal:while loop:() * 4 
   Frst:0 T:'(' exptype:i
(output_sub_start)
 Push:'('
         (op_stack_print) 
------------------
         (op_stack_print) 
Operator Stack     (4)

         (op_stack_print) 
000: := type:0
         (op_stack_print) 
001: + type:0
         (op_stack_print) 
002: RND type:1
         (op_stack_print) 
003: ( type:16
         (op_stack_print) 
------------------

         (scan_literal) scan_literal:ret1
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
        (op_stack_print) 
------------------
        (op_stack_print) 
Operator Stack     (5)

        (op_stack_print) 
000: := type:0
        (op_stack_print) 
001: + type:0
        (op_stack_print) 
002: RND type:1
        (op_stack_print) 
003: ( type:16
        (op_stack_print) 
004: ( type:16
        (op_stack_print) 
------------------


         (scan_expression) scan_expression: ') * 4 '

          (check_eitem) check_eitem: ') * 4 '

           (check_operator) check_operator: ) * 4 

            (check_literal) check_literal:lit=' ,' idx=13 ') * 4 '
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:',' idx=13 ') * 4 '
            (check_literal)   ',' != ')'
            (check_literal) check_literal: ret0
           (check_operator) ret0:is comma: 0

           (check_function) check_function: ') * 4 '
           (check_function) check_function: ret0

           (check_atom) check_atom:

            (check_literal) check_literal:lit=' %' idx=13 ') * 4 '
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:'%' idx=13 ') * 4 '
            (check_literal)   '%' != ')'
            (check_literal) check_literal: ret0

            (check_literal) check_literal:lit=' "' idx=13 ') * 4 '
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:'"' idx=13 ') * 4 '
            (check_literal)   '"' != ')'
            (check_literal) check_literal: ret0

            (check_number) check_number:

             (check_float) check_float:
             (isfloatdigit) isfloatdigit:
             (check_float) check_float: ret0

             (check_integer) check_integer: ') * 4 '
             (check_integer) check_integer:ret0
            (check_number) check_number: ret0

            (check_variable) check_variable:

             (check_vname) check_vname ') * 4 ':
             (check_vname) check_vname ret0 ') * 4 ':
            (check_variable) check_variable:ret0 
           (check_atom) check_atom:ret1

           (check_sub_expr) check_sub_expr:

            (check_literal) check_literal:lit=' (' idx=13 ') * 4 '
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:'(' idx=13 ') * 4 '
            (check_literal)   '(' != ')'
            (check_literal) check_literal: ret0
           (check_sub_expr) check_sub_expr: ret0
          (check_eitem) check_eitem:ret0
         (scan_expression) scan_expression: ret1 ') * 4 ' commas:0

         (scan_literal) scan_literal:lit=' )' ') * 4 '
         (scan_literal) scan_literal:After drop space:') * 4 '
         (scan_literal) scan_literal:while loop:) * 4 
   Frst:0 T:')' exptype:U
Pop 4
Pop '('
         (op_stack_print) 
------------------
         (op_stack_print) 
Operator Stack     (4)

         (op_stack_print) 
000: := type:0
         (op_stack_print) 
001: + type:0
         (op_stack_print) 
002: RND type:1
         (op_stack_print) 
003: ( type:16
         (op_stack_print) 
------------------

(  output_sub_end)
         (token_is_function) 
token_is_function:
         (token_is_function) 
token_is_function:( is not function
(  output_sub_end)
         (scan_literal) scan_literal:ret1
   Frst:0 T:')' exptype:U
Pop 4
Pop '('
        (op_stack_print) 
------------------
        (op_stack_print) 
Operator Stack     (3)

        (op_stack_print) 
000: := type:0
        (op_stack_print) 
001: + type:0
        (op_stack_print) 
002: RND type:1
        (op_stack_print) 
------------------

(  output_sub_end)
        (token_is_function) 
token_is_function:
        (token_is_function) RND is function
Pop 5
Pop 'RND'
        (op_stack_print) 
------------------
        (op_stack_print) 
Operator Stack     (2)

        (op_stack_print) 
000: := type:0
        (op_stack_print) 
001: + type:0
        (op_stack_print) 
------------------

( output_function) [U,(i )] f f RND
(  output_sub_end)
        (scan_sub_expr) scan_sub_expr:ret1
       (scan_expression) n commas now:0

        (check_eitem) check_eitem: ' * 4 '

         (check_operator) check_operator:  * 4 

          (check_literal) check_literal:lit=' ,' idx=15 '* 4 '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:',' idx=15 '* 4 '
          (check_literal)   ',' != '*'
          (check_literal) check_literal: ret0
         (check_operator) ret1:is comma: 0
        (check_eitem) check_eitem:ret1 comma:1

        (scan_eitem) scan_eitem:

         (check_operator) check_operator:  * 4 

          (check_literal) check_literal:lit=' ,' idx=15 '* 4 '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:',' idx=15 '* 4 '
          (check_literal)   ',' != '*'
          (check_literal) check_literal: ret0
         (check_operator) ret1:is comma: 0

         (scan_operator) scan_operator: ' * 4 '

          (check_literal) check_literal:lit=' ,' idx=15 '* 4 '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:',' idx=15 '* 4 '
          (check_literal)   ',' != '*'
          (check_literal) check_literal: ret0
         (scan_operator) scan_operator: ret1 ' 4 '
   Frst:0 T:'*' exptype:i
        (operator_precedence) 
* is operator
        (operator_precedence) 
+ is operator
'*' is operator
        (process_token) 
Token is operator o1 name:* o2 name:+
        (process_token) 
opr1:5 opr2:3
        (operator_precedence) 
+ is operator
        (operator_precedence) 
+ is operator
Push 1
 Push:'*'
        (op_stack_print) 
------------------
        (op_stack_print) 
Operator Stack     (3)

        (op_stack_print) 
000: := type:0
        (op_stack_print) 
001: + type:0
        (op_stack_print) 
002: * type:0
        (op_stack_print) 
------------------

        (scan_eitem) Is comma;0
        (scan_expression) n commas now:0

         (check_eitem) check_eitem: ' 4 '

          (check_operator) check_operator:  4 

           (check_literal) check_literal:lit=' ,' idx=17 '4 '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:',' idx=17 '4 '
           (check_literal)   ',' != '4'
           (check_literal) check_literal: ret0
          (check_operator) ret0:is comma: 0

          (check_function) check_function: '4 '
          (check_function) check_function: ret0

          (check_atom) check_atom:

           (check_literal) check_literal:lit=' %' idx=16 ' 4 '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'%' idx=17 '4 '
           (check_literal)   '%' != '4'
           (check_literal) check_literal: ret0

           (check_literal) check_literal:lit=' "' idx=16 ' 4 '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'"' idx=17 '4 '
           (check_literal)   '"' != '4'
           (check_literal) check_literal: ret0

           (check_number) check_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret0

            (check_integer) check_integer: '4 '
            (check_integer) check_integer:ret1
           (check_number) check_number: ret1
          (check_atom) check_atom:ret1
         (check_eitem) check_eitem:ret1

         (scan_eitem) scan_eitem:

          (check_operator) check_operator:  4 

           (check_literal) check_literal:lit=' ,' idx=17 '4 '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:',' idx=17 '4 '
           (check_literal)   ',' != '4'
           (check_literal) check_literal: ret0
          (check_operator) ret0:is comma: 0

          (check_function) check_function: '4 '
          (check_function) check_function: ret0

          (check_atom) check_atom:

           (check_literal) check_literal:lit=' %' idx=16 ' 4 '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'%' idx=17 '4 '
           (check_literal)   '%' != '4'
           (check_literal) check_literal: ret0

           (check_literal) check_literal:lit=' "' idx=16 ' 4 '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'"' idx=17 '4 '
           (check_literal)   '"' != '4'
           (check_literal) check_literal: ret0

           (check_number) check_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret0

            (check_integer) check_integer: '4 '
            (check_integer) check_integer:ret1
           (check_number) check_number: ret1
          (check_atom) check_atom:ret1

          (scan_atom) scan_atom:

           (check_literal) check_literal:lit=' %' idx=16 ' 4 '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'%' idx=17 '4 '
           (check_literal)   '%' != '4'
           (check_literal) check_literal: ret0

           (check_literal) check_literal:lit=' "' idx=16 ' 4 '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'"' idx=17 '4 '
           (check_literal)   '"' != '4'
           (check_literal) check_literal: ret0

           (check_number) check_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret0

            (check_integer) check_integer: '4 '
            (check_integer) check_integer:ret1
           (check_number) check_number: ret1

           (scan_number) scan_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret0

            (check_integer) check_integer: '4 '
            (check_integer) check_integer:ret1

            (scan_integer) scan_integer:
            (scan_integer) scan_integer:ret1
   Frst:0 T:'4' exptype:i
           (operator_precedence) 
* is operator
modify_expression_type:Inittype:i Intype:i Outtype:i
(  output_integer) [i,()] i i 4
           (scan_integer) scan_integer:ret1  4
          (scan_atom) scan_atom:ret1
         (scan_expression) n commas now:0

          (check_eitem) check_eitem: ' '

           (check_operator) check_operator:  

            (check_literal) check_literal:lit=' ,' idx=19 ''
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:',' idx=19 ''
            (check_literal) check_literal  ret0 Empty test string
           (check_operator) ret0:is comma: 0

           (check_function) check_function: ''
           (check_function) check_function: ret0

           (check_atom) check_atom:

            (check_literal) check_literal:lit=' %' idx=18 ' '
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:'%' idx=19 ''
            (check_literal) check_literal  ret0 Empty test string

            (check_literal) check_literal:lit=' "' idx=18 ' '
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:'"' idx=19 ''
            (check_literal) check_literal  ret0 Empty test string

            (check_number) check_number:

             (check_float) check_float:
             (isfloatdigit) isfloatdigit:
             (check_float) check_float: ret0

             (check_integer) check_integer: ''
             (check_integer) check_integer:ret0
            (check_number) check_number: ret0

            (check_variable) check_variable:

             (check_vname) check_vname '':
             (check_vname) check_vname ret0 '':
            (check_variable) check_variable:ret0 
           (check_atom) check_atom:ret1

           (check_sub_expr) check_sub_expr:

            (check_literal) check_literal:lit=' (' idx=18 ' '
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:'(' idx=19 ''
            (check_literal) check_literal  ret0 Empty test string
           (check_sub_expr) check_sub_expr: ret0
          (check_eitem) check_eitem:ret0
         (scan_expression) scan_expression: ret1 ' ' commas:0
        (scan_assignment) scan_assignment: ret1
Finalise stack
Pop '*'
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (2)

       (op_stack_print) 
000: := type:0
       (op_stack_print) 
001: + type:0
       (op_stack_print) 
------------------

( output_operator) [i,()] i i *
       (token_is_function) 
token_is_function:
       (token_is_function) 
token_is_function:* is not function
Pop '+'
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (1)

       (op_stack_print) 
000: := type:0
       (op_stack_print) 
------------------

( output_operator) [i,()] i i +
       (token_is_function) 
token_is_function:
       (token_is_function) 
token_is_function:+ is not function
Pop ':='
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (0)

       (op_stack_print) 
------------------

( output_operator) [i,()] i i :=
       (token_is_function) 
token_is_function:
       (token_is_function) 
token_is_function::= is not function
       (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'C%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '1' nidx:6  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     f rq:f 'RND' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '4' nidx:18  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '*' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '+' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i ':=' nidx:0  0:
=================
 BE:C%
type_check_stack_push: 'C%'
       (type_check_stack_print) 
------------------
       (type_check_stack_print) 
Type Check Stack     (1)

       (type_check_stack_print) 
000: 'C%' type:0
       (type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'C%' type:i (0)
 BE:1
type_check_stack_push: '1'
       (type_check_stack_print) 
------------------
       (type_check_stack_print) 
Type Check Stack     (2)

       (type_check_stack_print) 
000: 'C%' type:0
       (type_check_stack_print) 
001: '1' type:0
       (type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'C%' type:i (0)
001: '1' type:i (0)
 BE:

Type Check Stack (2)

000: 'C%' type:i (0)
001: '1' type:i (0)
 BE:

Type Check Stack (2)

000: 'C%' type:i (0)
001: '1' type:i (0)
 BE:

Type Check Stack (2)

000: 'C%' type:i (0)
001: '1' type:i (0)
 BE:

Type Check Stack (2)

000: 'C%' type:i (0)
001: '1' type:i (0)
 BE:

Type Check Stack (2)

000: 'C%' type:i (0)
001: '1' type:i (0)
 BE:RND
FN: 0 args
       (function_return_type) 
function_return_type: 'RND' =>f
       (function_return_type) 
function_return_type: 'RND' =>1
ret_type;1 f
typecheck_expression:Ret type of RND : f
type_check_stack_push: '000'
       (type_check_stack_print) 
------------------
       (type_check_stack_print) 
Type Check Stack     (3)

       (type_check_stack_print) 
000: 'C%' type:0
       (type_check_stack_print) 
001: '1' type:0
       (type_check_stack_print) 
002: '000' type:1
       (type_check_stack_print) 
------------------


Type Check Stack (3)

000: 'C%' type:i (0)
001: '1' type:i (0)
002: '000' type:f (1)
 BE:

Type Check Stack (3)

000: 'C%' type:i (0)
001: '1' type:i (0)
002: '000' type:f (1)
 BE:4
type_check_stack_push: '4'
       (type_check_stack_print) 
------------------
       (type_check_stack_print) 
Type Check Stack     (4)

       (type_check_stack_print) 
000: 'C%' type:0
       (type_check_stack_print) 
001: '1' type:0
       (type_check_stack_print) 
002: '000' type:1
       (type_check_stack_print) 
003: '4' type:0
       (type_check_stack_print) 
------------------


Type Check Stack (4)

000: 'C%' type:i (0)
001: '1' type:i (0)
002: '000' type:f (1)
003: '4' type:i (0)
 BE:*
BUFF_ID_OPERATOR
Found operator *
type_check_stack_pop: '4'
       (type_check_stack_print) 
------------------
       (type_check_stack_print) 
Type Check Stack     (3)

       (type_check_stack_print) 
000: 'C%' type:0
       (type_check_stack_print) 
001: '1' type:0
       (type_check_stack_print) 
002: '000' type:1
       (type_check_stack_print) 
------------------

type_check_stack_pop: '000'
       (type_check_stack_print) 
------------------
       (type_check_stack_print) 
Type Check Stack     (2)

       (type_check_stack_print) 
000: 'C%' type:0
       (type_check_stack_print) 
001: '1' type:0
       (type_check_stack_print) 
------------------

 Mutable type 0 1
type_with_least_conversion_from: i f => f
type_with_least_conversion_from: i f => f
 Autoconversion
 --------------
 Op1: type:0 req type:0
 Op2: type:1 req type:1
 BE:  type:1 req type:1
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i 'C%'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i '1'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_FUNCTION     f rq:f 'RND'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_INTEGER      i rq:i '4'  0:
=================
 Insert after 10 exp_buffer2_i:10
   Found at i:9
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i 'C%'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i '1'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_FUNCTION     f rq:f 'RND'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_INTEGER      i rq:i '4'  0:
(dump_exp_buffer2) N12 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 10 8
=================
type_check_stack_push: '000'
       (type_check_stack_print) 
------------------
       (type_check_stack_print) 
Type Check Stack     (3)

       (type_check_stack_print) 
000: 'C%' type:0
       (type_check_stack_print) 
001: '1' type:0
       (type_check_stack_print) 
002: '000' type:1
       (type_check_stack_print) 
------------------


Type Check Stack (3)

000: 'C%' type:i (0)
001: '1' type:i (0)
002: '000' type:f (1)
 BE:+
BUFF_ID_OPERATOR
Found operator +
type_check_stack_pop: '000'
       (type_check_stack_print) 
------------------
       (type_check_stack_print) 
Type Check Stack     (2)

       (type_check_stack_print) 
000: 'C%' type:0
       (type_check_stack_print) 
001: '1' type:0
       (type_check_stack_print) 
------------------

type_check_stack_pop: '1'
       (type_check_stack_print) 
------------------
       (type_check_stack_print) 
Type Check Stack     (1)

       (type_check_stack_print) 
000: 'C%' type:0
       (type_check_stack_print) 
------------------

 Mutable type 1 0
type_with_least_conversion_from: f i => f
type_with_least_conversion_from: f i => f
 Autoconversion
 --------------
 Op1: type:1 req type:1
 Op2: type:0 req type:0
 BE:  type:1 req type:1
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i 'C%'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i '1'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_FUNCTION     f rq:f 'RND'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_INTEGER      i rq:i '4'  0:
(dump_exp_buffer2) N12 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 10 8
(dump_exp_buffer2) N11 EXP_BUFF_ID_OPERATOR     f rq:f '*'  2: 10 8
=================
 Insert after 2 exp_buffer2_i:12
   Found at i:1
   Copied 11 to 12:
   Copied 10 to 11:
   Copied 9 to 10:
   Copied 8 to 9:
   Copied 7 to 8:
   Copied 6 to 7:
   Copied 5 to 6:
   Copied 4 to 5:
   Copied 3 to 4:
   Copied 2 to 3:
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i 'C%'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i '1'  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 11 2
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_FUNCTION     f rq:f 'RND'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_INTEGER      i rq:i '4'  0:
(dump_exp_buffer2) N12 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 10 8
(dump_exp_buffer2) N11 EXP_BUFF_ID_OPERATOR     f rq:f '*'  2: 10 8
=================
type_check_stack_push: '000'
       (type_check_stack_print) 
------------------
       (type_check_stack_print) 
Type Check Stack     (2)

       (type_check_stack_print) 
000: 'C%' type:0
       (type_check_stack_print) 
001: '000' type:1
       (type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'C%' type:i (0)
001: '000' type:f (1)
 BE::=
BUFF_ID_OPERATOR
Found operator :=
type_check_stack_pop: '000'
       (type_check_stack_print) 
------------------
       (type_check_stack_print) 
Type Check Stack     (1)

       (type_check_stack_print) 
000: 'C%' type:0
       (type_check_stack_print) 
------------------

type_check_stack_pop: 'C%'
       (type_check_stack_print) 
------------------
       (type_check_stack_print) 
Type Check Stack     (0)

       (type_check_stack_print) 
------------------

 Mutable type 1 0
type_with_least_conversion_from: f i => f
type_with_least_conversion_from: f i => f
 Autoconversion
 --------------
 Op1: type:1 req type:1
 Op2: type:0 req type:0
 BE:  type:1 req type:1
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i 'C%'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i '1'  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 11 2
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_FUNCTION     f rq:f 'RND'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_INTEGER      i rq:i '4'  0:
(dump_exp_buffer2) N12 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 10 8
(dump_exp_buffer2) N11 EXP_BUFF_ID_OPERATOR     f rq:f '*'  2: 10 8
(dump_exp_buffer2) N13 EXP_BUFF_ID_OPERATOR     f rq:f '+'  2: 11 2
=================
 Insert after 13 exp_buffer2_i:14
   Found at i:13
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i 'C%'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i '1'  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 11 2
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_FUNCTION     f rq:f 'RND'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_INTEGER      i rq:i '4'  0:
(dump_exp_buffer2) N12 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 10 8
(dump_exp_buffer2) N11 EXP_BUFF_ID_OPERATOR     f rq:f '*'  2: 10 8
(dump_exp_buffer2) N13 EXP_BUFF_ID_OPERATOR     f rq:f '+'  2: 11 2
(dump_exp_buffer2) N16 EXP_BUFF_ID_AUTOCON      i rq:i 'autocon f->i'  2: 13 1
=================
type_check_stack_push: '000'
       (type_check_stack_print) 
------------------
       (type_check_stack_print) 
Type Check Stack     (1)

       (type_check_stack_print) 
000: '000' type:0
       (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'C%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '1' nidx:6  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     f rq:f 'RND' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '4' nidx:18  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '*' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '+' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i ':=' nidx:0  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i 'C%'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i '1'  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 11 2
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_FUNCTION     f rq:f 'RND'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_INTEGER      i rq:i '4'  0:
(dump_exp_buffer2) N12 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 10 8
(dump_exp_buffer2) N11 EXP_BUFF_ID_OPERATOR     f rq:f '*'  2: 10 8
(dump_exp_buffer2) N13 EXP_BUFF_ID_OPERATOR     f rq:f '+'  2: 11 2
(dump_exp_buffer2) N16 EXP_BUFF_ID_AUTOCON      i rq:i 'autocon f->i'  2: 13 1
(dump_exp_buffer2) N15 EXP_BUFF_ID_OPERATOR     i rq:i ':='  2: 13 1
=================
       (process_expression_types) 
==INFIX==

Var: C% ary:0 NumIdx:0
infix_stack_push: 'C%'
infix_stack_push: '1'
infix_stack_push: 'RND()'
infix_stack_push: '4'
infix_stack_pop: '4'
infix_stack_pop: 'RND()'
infix_stack_push: '(RND() * 4)'
infix_stack_pop: '(RND() * 4)'
infix_stack_pop: '1'
infix_stack_push: '(1 + (RND() * 4))'
infix_stack_pop: '(1 + (RND() * 4))'
infix_stack_pop: 'C%'
infix_stack_push: '(C% := (1 + (RND() * 4)))'
infix_stack_pop: '(C% := (1 + (RND() * 4)))'
       (process_expression_types) ==(C% := (1 + (RND() * 4)))==
       (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i C%  0:
(    output_qcode) N2 EXP_BUFF_ID_INTEGER      i rq:i 1  0:
(    output_qcode) N14 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 11 2
(    output_qcode) N3 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N4 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N8 EXP_BUFF_ID_FUNCTION     f rq:f RND  0:
(    output_qcode) N9 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N10 EXP_BUFF_ID_INTEGER      i rq:i 4  0:
(    output_qcode) N12 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 10 8
(    output_qcode) N11 EXP_BUFF_ID_OPERATOR     f rq:f *  2: 10 8
(    output_qcode) N13 EXP_BUFF_ID_OPERATOR     f rq:f +  2: 11 2
(    output_qcode) N16 EXP_BUFF_ID_AUTOCON      i rq:i autocon f->i  2: 13 1
(    output_qcode) N15 EXP_BUFF_ID_OPERATOR     i rq:i :=  2: 13 1

        (check_literal) check_literal:lit=':' idx=19 ''
        (check_literal) check_literal:After drop space:':' idx=19 ''
        (check_literal) check_literal  ret0 Empty test string
       (translate_file) 
cline scanned OK
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'C%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '1' nidx:6  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     f rq:f 'RND' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '4' nidx:18  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '*' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '+' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i ':=' nidx:0  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i 'C%'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i '1'  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 11 2
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_FUNCTION     f rq:f 'RND'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_INTEGER      i rq:i '4'  0:
(dump_exp_buffer2) N12 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 10 8
(dump_exp_buffer2) N11 EXP_BUFF_ID_OPERATOR     f rq:f '*'  2: 10 8
(dump_exp_buffer2) N13 EXP_BUFF_ID_OPERATOR     f rq:f '+'  2: 11 2
(dump_exp_buffer2) N16 EXP_BUFF_ID_AUTOCON      i rq:i 'autocon f->i'  2: 13 1
(dump_exp_buffer2) N15 EXP_BUFF_ID_OPERATOR     i rq:i ':='  2: 13 1
=================
       (main) 

       (main) 
 2 lines scanned Ok
       (main) 
 2 lines scanned failed
       (main) 
 0 lines blank
       (main) 


Operator Stack
