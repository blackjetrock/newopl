
(parser_check) NUM_BUFF_ID    :15
(parser_check) EXP_BUFF_ID_MAX:14
(parser_check) 
***********
**TEST1: **
***********


 (scan_procdef) scan_procdef:

  (check_textlabel) check_textlabel: 'TEST1: '
  (check_textlabel) check_textlabel:ret1

  (scan_literal) scan_literal:lit=':' ': '
  (scan_literal) scan_literal:After drop space:: 
  (scan_literal) scan_literal:while loop:: 
   Frst:1 T:':' exptype:U
  (token_is_function) 
token_is_function:
  (token_is_function) 
token_is_function:: is not function
token_is_variable: tok:':'
  (token_is_function) 
token_is_function:
  (token_is_function) 
token_is_function:: is not function
  (scan_literal) scan_literal:ret1
 (scan_procdef) scan_procdef:ret1
(translate_file) 
cline scanned OK
**************************************
**LOCAL A, B,C,D , E  ,  F   ,    G **
**************************************


 (check_declare) check_declare:

  (check_literal) check_literal:lit=' LOCAL' idx=0 'LOCAL A, B,C,D , E  ,  F   ,    G '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'LOCAL A, B,C,D , E  ,  F   ,    G '
  (check_literal) check_literal:After while(): A, B,C,D , E  ,  F   ,    G 
  (check_literal) check_literal:ret1 
 (check_declare) check_declare:ret 1

  (scan_declare) scan_declare:

   (check_literal) check_literal:lit=' LOCAL' idx=0 'LOCAL A, B,C,D , E  ,  F   ,    G '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'LOCAL' idx=0 'LOCAL A, B,C,D , E  ,  F   ,    G '
   (check_literal) check_literal:After while(): A, B,C,D , E  ,  F   ,    G 
   (check_literal) check_literal:ret1 

   (scan_localglobal) scan_localglobal:

    (scan_literal) scan_literal:lit=' LOCAL' 'LOCAL A, B,C,D , E  ,  F   ,    G '
    (scan_literal) scan_literal:After drop space:LOCAL A, B,C,D , E  ,  F   ,    G 
    (scan_literal) scan_literal:while loop:LOCAL A, B,C,D , E  ,  F   ,    G 
    (scan_literal) scan_literal:while loop:OCAL A, B,C,D , E  ,  F   ,    G 
    (scan_literal) scan_literal:while loop:CAL A, B,C,D , E  ,  F   ,    G 
    (scan_literal) scan_literal:while loop:AL A, B,C,D , E  ,  F   ,    G 
    (scan_literal) scan_literal:while loop:L A, B,C,D , E  ,  F   ,    G 
   Frst:0 T:'LOCAL' exptype:U
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:LOCAL is not function
token_is_variable: tok:'LOCAL'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:LOCAL is not function
    (init_get_name) 
init_get_name:'LOCAL'
    (init_get_name) 
init_get_name:'LOCAL'
    (get_name) 
get_name:gn:'LOCAL'
process_token:type:U req_type:s
modify_expression_type:Inittype:U Intype:f Outtype:f
( output_variable) [f,()] f f LOCAL
    (scan_literal) scan_literal:ret1

    (check_variable) check_variable:

     (check_vname) check_vname 'A, B,C,D , E  ,  F   ,    G ':
     (check_vname) check_vname ret1 ', B,C,D , E  ,  F   ,    G ':
    (check_variable) check_variable: ', B,C,D , E  ,  F   ,    G '
    (check_variable) check_variable: Ary test ', B,C,D , E  ,  F   ,    G '

     (check_literal) check_literal:lit='(' idx=7 ', B,C,D , E  ,  F   ,    G '
     (check_literal) check_literal:After drop space:'(' idx=7 ', B,C,D , E  ,  F   ,    G '
     (check_literal)   '(' != ','
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (scan_variable) scan_variable:

    (scan_vname) scan_vname: ' A, B,C,D , E  ,  F   ,    G '
    (scan_vname) scan_vname: ret1 'A'
   (scan_variable) scan_variable: ', B,C,D , E  ,  F   ,    G ' vname='A'
   (scan_variable) scan_variable: Ary test ', B,C,D , E  ,  F   ,    G '

    (check_literal) check_literal:lit='(' idx=7 ', B,C,D , E  ,  F   ,    G '
    (check_literal) check_literal:After drop space:'(' idx=7 ', B,C,D , E  ,  F   ,    G '
    (check_literal)   '(' != ','
    (check_literal) check_literal: ret0
   (scan_variable) scan_variable:ret1 vname='A' is str:0 int:0 flt:1 ary:0
   Frst:0 T:'A' exptype:f
  (token_is_function) 
token_is_function:
  (token_is_function) 
token_is_function:A is not function
token_is_variable: tok:'A'
  (token_is_function) 
token_is_function:
  (token_is_function) 
token_is_function:A is not function
  (init_get_name) 
init_get_name:'A'
  (init_get_name) 
init_get_name:'A'
  (get_name) 
get_name:gn:'A'
process_token:type:f req_type:i
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f f A
  (scan_localglobal) scan_localglobal: LOCAL variable:'<~>þ'
  (print_var_info) 
VAR INFO: '                 A' gbl:0 ref:0 int:0 flt:1 str:0 ary:0 max_str:0 max_ary:0 num_ind:0

   (check_literal) check_literal:lit=' ,' idx=7 ', B,C,D , E  ,  F   ,    G '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=7 ', B,C,D , E  ,  F   ,    G '
   (check_literal) check_literal:After while(): B,C,D , E  ,  F   ,    G 
   (check_literal) check_literal:ret1 

   (scan_literal) scan_literal:lit=' ,' ', B,C,D , E  ,  F   ,    G '
   (scan_literal) scan_literal:After drop space:, B,C,D , E  ,  F   ,    G 
   (scan_literal) scan_literal:while loop:, B,C,D , E  ,  F   ,    G 
   Frst:0 T:',' exptype:f
(output_sub_start)
   (scan_literal) scan_literal:ret1

   (check_variable) check_variable:

    (check_vname) check_vname 'B,C,D , E  ,  F   ,    G ':
    (check_vname) check_vname ret1 ',C,D , E  ,  F   ,    G ':
   (check_variable) check_variable: ',C,D , E  ,  F   ,    G '
   (check_variable) check_variable: Ary test ',C,D , E  ,  F   ,    G '

    (check_literal) check_literal:lit='(' idx=10 ',C,D , E  ,  F   ,    G '
    (check_literal) check_literal:After drop space:'(' idx=10 ',C,D , E  ,  F   ,    G '
    (check_literal)   '(' != ','
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: ' B,C,D , E  ,  F   ,    G '
   (scan_vname) scan_vname: ret1 'B'
  (scan_variable) scan_variable: ',C,D , E  ,  F   ,    G ' vname='B'
  (scan_variable) scan_variable: Ary test ',C,D , E  ,  F   ,    G '

   (check_literal) check_literal:lit='(' idx=10 ',C,D , E  ,  F   ,    G '
   (check_literal) check_literal:After drop space:'(' idx=10 ',C,D , E  ,  F   ,    G '
   (check_literal)   '(' != ','
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='B' is str:0 int:0 flt:1 ary:0
   Frst:0 T:'B' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:B is not function
token_is_variable: tok:'B'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:B is not function
 (init_get_name) 
init_get_name:'B'
 (init_get_name) 
init_get_name:'B'
 (get_name) 
get_name:gn:'B'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:f Outtype:f
( output_variable) [f,()] f f B
 (scan_localglobal) scan_localglobal: LOCAL variable:'<~>þ'
 (print_var_info) 
VAR INFO: '                 B' gbl:0 ref:0 int:0 flt:1 str:0 ary:0 max_str:0 max_ary:0 num_ind:0

  (check_literal) check_literal:lit=' ,' idx=10 ',C,D , E  ,  F   ,    G '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:',' idx=10 ',C,D , E  ,  F   ,    G '
  (check_literal) check_literal:After while():C,D , E  ,  F   ,    G 
  (check_literal) check_literal:ret1 

  (scan_literal) scan_literal:lit=' ,' ',C,D , E  ,  F   ,    G '
  (scan_literal) scan_literal:After drop space:,C,D , E  ,  F   ,    G 
  (scan_literal) scan_literal:while loop:,C,D , E  ,  F   ,    G 
   Frst:0 T:',' exptype:f
(output_sub_start)
  (scan_literal) scan_literal:ret1

  (check_variable) check_variable:

   (check_vname) check_vname 'C,D , E  ,  F   ,    G ':
   (check_vname) check_vname ret1 ',D , E  ,  F   ,    G ':
  (check_variable) check_variable: ',D , E  ,  F   ,    G '
  (check_variable) check_variable: Ary test ',D , E  ,  F   ,    G '

   (check_literal) check_literal:lit='(' idx=12 ',D , E  ,  F   ,    G '
   (check_literal) check_literal:After drop space:'(' idx=12 ',D , E  ,  F   ,    G '
   (check_literal)   '(' != ','
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) scan_variable:

  (scan_vname) scan_vname: 'C,D , E  ,  F   ,    G '
  (scan_vname) scan_vname: ret1 'C'
 (scan_variable) scan_variable: ',D , E  ,  F   ,    G ' vname='C'
 (scan_variable) scan_variable: Ary test ',D , E  ,  F   ,    G '

  (check_literal) check_literal:lit='(' idx=12 ',D , E  ,  F   ,    G '
  (check_literal) check_literal:After drop space:'(' idx=12 ',D , E  ,  F   ,    G '
  (check_literal)   '(' != ','
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='C' is str:0 int:0 flt:1 ary:0
   Frst:0 T:'C' exptype:U
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C is not function
token_is_variable: tok:'C'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C is not function
(init_get_name) 
init_get_name:'C'
(init_get_name) 
init_get_name:'C'
(get_name) 
get_name:gn:'C'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:f Outtype:f
( output_variable) [f,()] f f C
(scan_localglobal) scan_localglobal: LOCAL variable:'<~>þ'
(print_var_info) 
VAR INFO: '                 C' gbl:0 ref:0 int:0 flt:1 str:0 ary:0 max_str:0 max_ary:0 num_ind:0

 (check_literal) check_literal:lit=' ,' idx=12 ',D , E  ,  F   ,    G '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=12 ',D , E  ,  F   ,    G '
 (check_literal) check_literal:After while():D , E  ,  F   ,    G 
 (check_literal) check_literal:ret1 

 (scan_literal) scan_literal:lit=' ,' ',D , E  ,  F   ,    G '
 (scan_literal) scan_literal:After drop space:,D , E  ,  F   ,    G 
 (scan_literal) scan_literal:while loop:,D , E  ,  F   ,    G 
   Frst:0 T:',' exptype:f
(output_sub_start)
 (scan_literal) scan_literal:ret1

 (check_variable) check_variable:

  (check_vname) check_vname 'D , E  ,  F   ,    G ':
  (check_vname) check_vname ret1 ' , E  ,  F   ,    G ':
 (check_variable) check_variable: ' , E  ,  F   ,    G '
 (check_variable) check_variable: Ary test ' , E  ,  F   ,    G '

  (check_literal) check_literal:lit='(' idx=14 ' , E  ,  F   ,    G '
  (check_literal) check_literal:After drop space:'(' idx=14 ' , E  ,  F   ,    G '
  (check_literal)   '(' != ' '
  (check_literal) check_literal: ret0
 (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
(check_variable) check_variable:ret1 

 (scan_variable) scan_variable:

  (scan_vname) scan_vname: 'D , E  ,  F   ,    G '
  (scan_vname) scan_vname: ret1 'D'
 (scan_variable) scan_variable: ' , E  ,  F   ,    G ' vname='D'
 (scan_variable) scan_variable: Ary test ' , E  ,  F   ,    G '

  (check_literal) check_literal:lit='(' idx=14 ' , E  ,  F   ,    G '
  (check_literal) check_literal:After drop space:'(' idx=14 ' , E  ,  F   ,    G '
  (check_literal)   '(' != ' '
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='D' is str:0 int:0 flt:1 ary:0
   Frst:0 T:'D' exptype:U
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:D is not function
token_is_variable: tok:'D'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:D is not function
(init_get_name) 
init_get_name:'D'
(init_get_name) 
init_get_name:'D'
(get_name) 
get_name:gn:'D'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:f Outtype:f
( output_variable) [f,()] f f D
(scan_localglobal) scan_localglobal: LOCAL variable:'<~>þ'
(print_var_info) 
VAR INFO: '                 D' gbl:0 ref:0 int:0 flt:1 str:0 ary:0 max_str:0 max_ary:0 num_ind:0

 (check_literal) check_literal:lit=' ,' idx=14 ' , E  ,  F   ,    G '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=15 ', E  ,  F   ,    G '
 (check_literal) check_literal:After while(): E  ,  F   ,    G 
 (check_literal) check_literal:ret1 

 (scan_literal) scan_literal:lit=' ,' ' , E  ,  F   ,    G '
 (scan_literal) scan_literal:After drop space:, E  ,  F   ,    G 
 (scan_literal) scan_literal:while loop:, E  ,  F   ,    G 
   Frst:0 T:',' exptype:f
(output_sub_start)
 (scan_literal) scan_literal:ret1

 (check_variable) check_variable:

  (check_vname) check_vname 'E  ,  F   ,    G ':
  (check_vname) check_vname ret1 '  ,  F   ,    G ':
 (check_variable) check_variable: '  ,  F   ,    G '
 (check_variable) check_variable: Ary test '  ,  F   ,    G '

  (check_literal) check_literal:lit='(' idx=18 '  ,  F   ,    G '
  (check_literal) check_literal:After drop space:'(' idx=18 '  ,  F   ,    G '
  (check_literal)   '(' != ' '
  (check_literal) check_literal: ret0
 (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
(check_variable) check_variable:ret1 

 (scan_variable) scan_variable:

  (scan_vname) scan_vname: ' E  ,  F   ,    G '
  (scan_vname) scan_vname: ret1 'E'
 (scan_variable) scan_variable: '  ,  F   ,    G ' vname='E'
 (scan_variable) scan_variable: Ary test '  ,  F   ,    G '

  (check_literal) check_literal:lit='(' idx=18 '  ,  F   ,    G '
  (check_literal) check_literal:After drop space:'(' idx=18 '  ,  F   ,    G '
  (check_literal)   '(' != ' '
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='E' is str:0 int:0 flt:1 ary:0
   Frst:0 T:'E' exptype:U
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:E is not function
token_is_variable: tok:'E'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:E is not function
(init_get_name) 
init_get_name:'E'
(init_get_name) 
init_get_name:'E'
(get_name) 
get_name:gn:'E'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:f Outtype:f
( output_variable) [f,()] f f E
(scan_localglobal) scan_localglobal: LOCAL variable:'<~>þ'
(print_var_info) 
VAR INFO: '                 E' gbl:0 ref:0 int:0 flt:1 str:0 ary:0 max_str:0 max_ary:0 num_ind:0

 (check_literal) check_literal:lit=' ,' idx=18 '  ,  F   ,    G '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=20 ',  F   ,    G '
 (check_literal) check_literal:After while():  F   ,    G 
 (check_literal) check_literal:ret1 

 (scan_literal) scan_literal:lit=' ,' '  ,  F   ,    G '
 (scan_literal) scan_literal:After drop space:,  F   ,    G 
 (scan_literal) scan_literal:while loop:,  F   ,    G 
   Frst:0 T:',' exptype:f
(output_sub_start)
 (scan_literal) scan_literal:ret1

 (check_variable) check_variable:

  (check_vname) check_vname 'F   ,    G ':
  (check_vname) check_vname ret1 '   ,    G ':
 (check_variable) check_variable: '   ,    G '
 (check_variable) check_variable: Ary test '   ,    G '

  (check_literal) check_literal:lit='(' idx=24 '   ,    G '
  (check_literal) check_literal:After drop space:'(' idx=24 '   ,    G '
  (check_literal)   '(' != ' '
  (check_literal) check_literal: ret0
 (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
(check_variable) check_variable:ret1 

 (scan_variable) scan_variable:

  (scan_vname) scan_vname: '  F   ,    G '
  (scan_vname) scan_vname: ret1 'F'
 (scan_variable) scan_variable: '   ,    G ' vname='F'
 (scan_variable) scan_variable: Ary test '   ,    G '

  (check_literal) check_literal:lit='(' idx=24 '   ,    G '
  (check_literal) check_literal:After drop space:'(' idx=24 '   ,    G '
  (check_literal)   '(' != ' '
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='F' is str:0 int:0 flt:1 ary:0
   Frst:0 T:'F' exptype:U
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:F is not function
token_is_variable: tok:'F'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:F is not function
(init_get_name) 
init_get_name:'F'
(init_get_name) 
init_get_name:'F'
(get_name) 
get_name:gn:'F'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:f Outtype:f
( output_variable) [f,()] f f F
(scan_localglobal) scan_localglobal: LOCAL variable:'<~>þ'
(print_var_info) 
VAR INFO: '                 F' gbl:0 ref:0 int:0 flt:1 str:0 ary:0 max_str:0 max_ary:0 num_ind:0

 (check_literal) check_literal:lit=' ,' idx=24 '   ,    G '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=27 ',    G '
 (check_literal) check_literal:After while():    G 
 (check_literal) check_literal:ret1 

 (scan_literal) scan_literal:lit=' ,' '   ,    G '
 (scan_literal) scan_literal:After drop space:,    G 
 (scan_literal) scan_literal:while loop:,    G 
   Frst:0 T:',' exptype:f
(output_sub_start)
 (scan_literal) scan_literal:ret1

 (check_variable) check_variable:

  (check_vname) check_vname 'G ':
  (check_vname) check_vname ret1 ' ':
 (check_variable) check_variable: ' '
 (check_variable) check_variable: Ary test ' '

  (check_literal) check_literal:lit='(' idx=33 ' '
  (check_literal) check_literal:After drop space:'(' idx=33 ' '
  (check_literal)   '(' != ' '
  (check_literal) check_literal: ret0
 (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
(check_variable) check_variable:ret1 

 (scan_variable) scan_variable:

  (scan_vname) scan_vname: '    G '
  (scan_vname) scan_vname: ret1 'G'
 (scan_variable) scan_variable: ' ' vname='G'
 (scan_variable) scan_variable: Ary test ' '

  (check_literal) check_literal:lit='(' idx=33 ' '
  (check_literal) check_literal:After drop space:'(' idx=33 ' '
  (check_literal)   '(' != ' '
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='G' is str:0 int:0 flt:1 ary:0
   Frst:0 T:'G' exptype:U
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:G is not function
token_is_variable: tok:'G'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:G is not function
(init_get_name) 
init_get_name:'G'
(init_get_name) 
init_get_name:'G'
(get_name) 
get_name:gn:'G'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:f Outtype:f
( output_variable) [f,()] f f G
(scan_localglobal) scan_localglobal: LOCAL variable:'<~>þ'
(print_var_info) 
VAR INFO: '                 G' gbl:0 ref:0 int:0 flt:1 str:0 ary:0 max_str:0 max_ary:0 num_ind:0

 (check_literal) check_literal:lit=' ,' idx=33 ' '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=34 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_variable) check_variable:

  (check_vname) check_vname '':
  (check_vname) check_vname ret0 '':
 (check_variable) check_variable:ret0 
(scan_localglobal) scan_localglobal:ret1
(scan_declare) scan_declare:ret 1
*************
**LOCAL A% **
*************


 (check_declare) check_declare:

  (check_literal) check_literal:lit=' LOCAL' idx=0 'LOCAL A% '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'LOCAL A% '
  (check_literal) check_literal:After while(): A% 
  (check_literal) check_literal:ret1 
 (check_declare) check_declare:ret 1

  (scan_declare) scan_declare:

   (check_literal) check_literal:lit=' LOCAL' idx=0 'LOCAL A% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'LOCAL' idx=0 'LOCAL A% '
   (check_literal) check_literal:After while(): A% 
   (check_literal) check_literal:ret1 

   (scan_localglobal) scan_localglobal:

    (scan_literal) scan_literal:lit=' LOCAL' 'LOCAL A% '
    (scan_literal) scan_literal:After drop space:LOCAL A% 
    (scan_literal) scan_literal:while loop:LOCAL A% 
    (scan_literal) scan_literal:while loop:OCAL A% 
    (scan_literal) scan_literal:while loop:CAL A% 
    (scan_literal) scan_literal:while loop:AL A% 
    (scan_literal) scan_literal:while loop:L A% 
   Frst:0 T:'LOCAL' exptype:f
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:LOCAL is not function
token_is_variable: tok:'LOCAL'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:LOCAL is not function
    (init_get_name) 
init_get_name:'LOCAL'
    (init_get_name) 
init_get_name:'LOCAL'
    (get_name) 
get_name:gn:'LOCAL'
process_token:type:f req_type:?
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f f LOCAL
    (scan_literal) scan_literal:ret1

    (check_variable) check_variable:

     (check_vname) check_vname 'A% ':
     (check_vname) check_vname ret1 '% ':
    (check_variable) check_variable: '% '
    (check_variable) check_variable: Ary test ' '

     (check_literal) check_literal:lit='(' idx=8 ' '
     (check_literal) check_literal:After drop space:'(' idx=8 ' '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 

   (scan_variable) scan_variable:

    (scan_vname) scan_vname: ' A% '
    (scan_vname) scan_vname: ret1 'A'
   (scan_variable) scan_variable: '% ' vname='A'
   (scan_variable) scan_variable: Ary test ' '

    (check_literal) check_literal:lit='(' idx=8 ' '
    (check_literal) check_literal:After drop space:'(' idx=8 ' '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (scan_variable) scan_variable:ret1 vname='A%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'A%' exptype:f
  (token_is_function) 
token_is_function:
  (token_is_function) 
token_is_function:A% is not function
token_is_variable: tok:'A%'
  (token_is_function) 
token_is_function:
  (token_is_function) 
token_is_function:A% is not function
  (init_get_name) 
init_get_name:'A%'
  (init_get_name) 
init_get_name:'A%'
  (get_name) 
get_name:gn:'A%'
process_token:type:f req_type:i
modify_expression_type:Inittype:f Intype:i Outtype:f
( output_variable) [f,()] f f A%
  (scan_localglobal) scan_localglobal: LOCAL variable:'<~>þ'
  (print_var_info) 
VAR INFO: '                A%' gbl:0 ref:0 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0

   (check_literal) check_literal:lit=' ,' idx=8 ' '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=9 ''
   (check_literal) check_literal  ret0 Empty test string

   (check_variable) check_variable:

    (check_vname) check_vname '':
    (check_vname) check_vname ret0 '':
   (check_variable) check_variable:ret0 
  (scan_localglobal) scan_localglobal:ret1
 (scan_declare) scan_declare:ret 1
*****************
**LOCAL A%(10) **
*****************


 (check_declare) check_declare:

  (check_literal) check_literal:lit=' LOCAL' idx=0 'LOCAL A%(10) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'LOCAL A%(10) '
  (check_literal) check_literal:After while(): A%(10) 
  (check_literal) check_literal:ret1 
 (check_declare) check_declare:ret 1

  (scan_declare) scan_declare:

   (check_literal) check_literal:lit=' LOCAL' idx=0 'LOCAL A%(10) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'LOCAL' idx=0 'LOCAL A%(10) '
   (check_literal) check_literal:After while(): A%(10) 
   (check_literal) check_literal:ret1 

   (scan_localglobal) scan_localglobal:

    (scan_literal) scan_literal:lit=' LOCAL' 'LOCAL A%(10) '
    (scan_literal) scan_literal:After drop space:LOCAL A%(10) 
    (scan_literal) scan_literal:while loop:LOCAL A%(10) 
    (scan_literal) scan_literal:while loop:OCAL A%(10) 
    (scan_literal) scan_literal:while loop:CAL A%(10) 
    (scan_literal) scan_literal:while loop:AL A%(10) 
    (scan_literal) scan_literal:while loop:L A%(10) 
   Frst:0 T:'LOCAL' exptype:f
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:LOCAL is not function
token_is_variable: tok:'LOCAL'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:LOCAL is not function
    (init_get_name) 
init_get_name:'LOCAL'
    (init_get_name) 
init_get_name:'LOCAL'
    (get_name) 
get_name:gn:'LOCAL'
process_token:type:f req_type:?
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f f LOCAL
    (scan_literal) scan_literal:ret1

    (check_variable) check_variable:

     (check_vname) check_vname 'A%(10) ':
     (check_vname) check_vname ret1 '%(10) ':
    (check_variable) check_variable: '%(10) '
    (check_variable) check_variable: Ary test '(10) '

     (check_literal) check_literal:lit='(' idx=8 '(10) '
     (check_literal) check_literal:After drop space:'(' idx=8 '(10) '
     (check_literal) check_literal:After while():10) 
     (check_literal) check_literal:ret1 
    (check_variable) check_variable: is array

     (check_expression) check_expression: '10) '

      (check_eitem) check_eitem: '10) '

       (check_operator) check_operator: 10) 

        (check_literal) check_literal:lit=',' idx=9 '10) '
        (check_literal) check_literal:After drop space:',' idx=9 '10) '
        (check_literal)   ',' != '1'
        (check_literal) check_literal: ret0
       (check_operator) check_operator:ret0

       (check_function) check_function: '10) '
       (check_function) check_function: ret0

       (check_atom) check_atom:

        (check_literal) check_literal:lit=' %' idx=9 '10) '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'%' idx=9 '10) '
        (check_literal)   '%' != '1'
        (check_literal) check_literal: ret0

        (check_literal) check_literal:lit=' "' idx=9 '10) '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'"' idx=9 '10) '
        (check_literal)   '"' != '1'
        (check_literal) check_literal: ret0

        (check_number) check_number:

         (check_float) check_float:
         (isfloatdigit) isfloatdigit:
         (isfloatdigit) isfloatdigit:
         (isfloatdigit) isfloatdigit:
         (check_float) check_float: ret0

         (check_integer) check_integer: '10) '
         (check_integer) check_integer:ret1
        (check_number) check_number: ret1
       (check_atom) check_atom:ret1
      (check_eitem) check_eitem:ret1

      (check_eitem) check_eitem: ') '

       (check_operator) check_operator: ) 

        (check_literal) check_literal:lit=',' idx=11 ') '
        (check_literal) check_literal:After drop space:',' idx=11 ') '
        (check_literal)   ',' != ')'
        (check_literal) check_literal: ret0
       (check_operator) check_operator:ret0

       (check_function) check_function: ') '
       (check_function) check_function: ret0

       (check_atom) check_atom:

        (check_literal) check_literal:lit=' %' idx=11 ') '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'%' idx=11 ') '
        (check_literal)   '%' != ')'
        (check_literal) check_literal: ret0

        (check_literal) check_literal:lit=' "' idx=11 ') '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'"' idx=11 ') '
        (check_literal)   '"' != ')'
        (check_literal) check_literal: ret0

        (check_number) check_number:

         (check_float) check_float:
         (isfloatdigit) isfloatdigit:
         (check_float) check_float: ret0

         (check_integer) check_integer: ') '
         (check_integer) check_integer:ret0
        (check_number) check_number: ret0

        (check_variable) check_variable:

         (check_vname) check_vname ') ':
         (check_vname) check_vname ret0 ') ':
        (check_variable) check_variable:ret0 
       (check_atom) check_atom:ret1

       (check_sub_expr) check_sub_expr:

        (check_literal) check_literal:lit=' (' idx=11 ') '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'(' idx=11 ') '
        (check_literal)   '(' != ')'
        (check_literal) check_literal: ret0
       (check_sub_expr) check_sub_expr: ret0
      (check_eitem) check_eitem:ret0
     (check_expression) check_expression:ret1 ') '

     (check_literal) check_literal:lit=' ,' idx=11 ') '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=11 ') '
     (check_literal)   ',' != ')'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' )' idx=11 ') '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:')' idx=11 ') '
     (check_literal) check_literal:After while(): 
     (check_literal) check_literal:ret1 
    (check_variable) check_variable:ret1 

    (scan_variable) scan_variable:

     (scan_vname) scan_vname: ' A%(10) '
     (scan_vname) scan_vname: ret1 'A'
    (scan_variable) scan_variable: '%(10) ' vname='A'
    (scan_variable) scan_variable: Ary test '(10) '

     (check_literal) check_literal:lit='(' idx=8 '(10) '
     (check_literal) check_literal:After drop space:'(' idx=8 '(10) '
     (check_literal) check_literal:After while():10) 
     (check_literal) check_literal:ret1 

     (scan_literal) scan_literal:lit='(' '(10) '
     (scan_literal) scan_literal:After drop space:(10) 
     (scan_literal) scan_literal:while loop:(10) 
   Frst:0 T:'(' exptype:f
(output_sub_start)
 Push:'('
     (op_stack_print) 
------------------
     (op_stack_print) 
Operator Stack     (1)

     (op_stack_print) 
000: ( type:16
     (op_stack_print) 
------------------

     (scan_literal) scan_literal:ret1
    (scan_variable) scan_variable: is array

     (scan_integer) scan_integer:
     (scan_integer) scan_integer:ret1
   Frst:0 T:'10' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(f )] i i 10
    (scan_integer) scan_integer:ret1  10

    (check_literal) check_literal:lit=' ,' idx=11 ') '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=11 ') '
    (check_literal)   ',' != ')'
    (check_literal) check_literal: ret0

    (scan_literal) scan_literal:lit=' )' ') '
    (scan_literal) scan_literal:After drop space:) 
    (scan_literal) scan_literal:while loop:) 
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (0)

    (op_stack_print) 
------------------

(  output_sub_end)
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function: is not function
(  output_sub_end)
    (scan_literal) scan_literal:ret1
   (scan_variable) scan_variable:ret1 vname='A%' is str:0 int:1 flt:0 ary:1
   Frst:0 T:'A%' exptype:f
  (token_is_function) 
token_is_function:
  (token_is_function) 
token_is_function:A% is not function
token_is_variable: tok:'A%'
  (token_is_function) 
token_is_function:
  (token_is_function) 
token_is_function:A% is not function
  (init_get_name) 
init_get_name:'A%'
  (init_get_name) 
init_get_name:'A%'
  (get_name) 
get_name:gn:'A%'
process_token:type:f req_type:i
modify_expression_type:Inittype:f Intype:i Outtype:f
( output_variable) [f,()] f f A%
  (scan_localglobal) scan_localglobal: LOCAL variable:'<~>þ'
  (print_var_info) 
VAR INFO: '                A%' gbl:0 ref:0 int:1 flt:0 str:0 ary:1 max_str:0 max_ary:10 num_ind:1

   (check_literal) check_literal:lit=' ,' idx=12 ' '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=13 ''
   (check_literal) check_literal  ret0 Empty test string

   (check_variable) check_variable:

    (check_vname) check_vname '':
    (check_vname) check_vname ret0 '':
   (check_variable) check_variable:ret0 
  (scan_localglobal) scan_localglobal:ret1
 (scan_declare) scan_declare:ret 1
****************
**LOCAL A%,B% **
****************


 (check_declare) check_declare:

  (check_literal) check_literal:lit=' LOCAL' idx=0 'LOCAL A%,B% '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'LOCAL A%,B% '
  (check_literal) check_literal:After while(): A%,B% 
  (check_literal) check_literal:ret1 
 (check_declare) check_declare:ret 1

  (scan_declare) scan_declare:

   (check_literal) check_literal:lit=' LOCAL' idx=0 'LOCAL A%,B% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'LOCAL' idx=0 'LOCAL A%,B% '
   (check_literal) check_literal:After while(): A%,B% 
   (check_literal) check_literal:ret1 

   (scan_localglobal) scan_localglobal:

    (scan_literal) scan_literal:lit=' LOCAL' 'LOCAL A%,B% '
    (scan_literal) scan_literal:After drop space:LOCAL A%,B% 
    (scan_literal) scan_literal:while loop:LOCAL A%,B% 
    (scan_literal) scan_literal:while loop:OCAL A%,B% 
    (scan_literal) scan_literal:while loop:CAL A%,B% 
    (scan_literal) scan_literal:while loop:AL A%,B% 
    (scan_literal) scan_literal:while loop:L A%,B% 
   Frst:0 T:'LOCAL' exptype:f
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:LOCAL is not function
token_is_variable: tok:'LOCAL'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:LOCAL is not function
    (init_get_name) 
init_get_name:'LOCAL'
    (init_get_name) 
init_get_name:'LOCAL'
    (get_name) 
get_name:gn:'LOCAL'
process_token:type:f req_type:?
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f f LOCAL
    (scan_literal) scan_literal:ret1

    (check_variable) check_variable:

     (check_vname) check_vname 'A%,B% ':
     (check_vname) check_vname ret1 '%,B% ':
    (check_variable) check_variable: '%,B% '
    (check_variable) check_variable: Ary test ',B% '

     (check_literal) check_literal:lit='(' idx=8 ',B% '
     (check_literal) check_literal:After drop space:'(' idx=8 ',B% '
     (check_literal)   '(' != ','
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 

   (scan_variable) scan_variable:

    (scan_vname) scan_vname: ' A%,B% '
    (scan_vname) scan_vname: ret1 'A'
   (scan_variable) scan_variable: '%,B% ' vname='A'
   (scan_variable) scan_variable: Ary test ',B% '

    (check_literal) check_literal:lit='(' idx=8 ',B% '
    (check_literal) check_literal:After drop space:'(' idx=8 ',B% '
    (check_literal)   '(' != ','
    (check_literal) check_literal: ret0
   (scan_variable) scan_variable:ret1 vname='A%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'A%' exptype:f
  (token_is_function) 
token_is_function:
  (token_is_function) 
token_is_function:A% is not function
token_is_variable: tok:'A%'
  (token_is_function) 
token_is_function:
  (token_is_function) 
token_is_function:A% is not function
  (init_get_name) 
init_get_name:'A%'
  (init_get_name) 
init_get_name:'A%'
  (get_name) 
get_name:gn:'A%'
process_token:type:f req_type:i
modify_expression_type:Inittype:f Intype:i Outtype:f
( output_variable) [f,()] f f A%
  (scan_localglobal) scan_localglobal: LOCAL variable:'<~>þ'
  (print_var_info) 
VAR INFO: '                A%' gbl:0 ref:0 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0

   (check_literal) check_literal:lit=' ,' idx=8 ',B% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=8 ',B% '
   (check_literal) check_literal:After while():B% 
   (check_literal) check_literal:ret1 

   (scan_literal) scan_literal:lit=' ,' ',B% '
   (scan_literal) scan_literal:After drop space:,B% 
   (scan_literal) scan_literal:while loop:,B% 
   Frst:0 T:',' exptype:f
(output_sub_start)
   (scan_literal) scan_literal:ret1

   (check_variable) check_variable:

    (check_vname) check_vname 'B% ':
    (check_vname) check_vname ret1 '% ':
   (check_variable) check_variable: '% '
   (check_variable) check_variable: Ary test ' '

    (check_literal) check_literal:lit='(' idx=11 ' '
    (check_literal) check_literal:After drop space:'(' idx=11 ' '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'B% '
   (scan_vname) scan_vname: ret1 'B'
  (scan_variable) scan_variable: '% ' vname='B'
  (scan_variable) scan_variable: Ary test ' '

   (check_literal) check_literal:lit='(' idx=11 ' '
   (check_literal) check_literal:After drop space:'(' idx=11 ' '
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='B%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'B%' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:B% is not function
token_is_variable: tok:'B%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:B% is not function
 (init_get_name) 
init_get_name:'B%'
 (init_get_name) 
init_get_name:'B%'
 (get_name) 
get_name:gn:'B%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] i i B%
 (scan_localglobal) scan_localglobal: LOCAL variable:'<~>þ'
 (print_var_info) 
VAR INFO: '                B%' gbl:0 ref:0 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0

  (check_literal) check_literal:lit=' ,' idx=11 ' '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:',' idx=12 ''
  (check_literal) check_literal  ret0 Empty test string

  (check_variable) check_variable:

   (check_vname) check_vname '':
   (check_vname) check_vname ret0 '':
  (check_variable) check_variable:ret0 
 (scan_localglobal) scan_localglobal:ret1
(scan_declare) scan_declare:ret 1
**********************************************
**LOCAL A%(1),B%(2),  A%(1000),    B%(2000) **
**********************************************


 (check_declare) check_declare:

  (check_literal) check_literal:lit=' LOCAL' idx=0 'LOCAL A%(1),B%(2),  A%(1000),    B%(2000) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'LOCAL A%(1),B%(2),  A%(1000),    B%(2000) '
  (check_literal) check_literal:After while(): A%(1),B%(2),  A%(1000),    B%(2000) 
  (check_literal) check_literal:ret1 
 (check_declare) check_declare:ret 1

  (scan_declare) scan_declare:

   (check_literal) check_literal:lit=' LOCAL' idx=0 'LOCAL A%(1),B%(2),  A%(1000),    B%(2000) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'LOCAL' idx=0 'LOCAL A%(1),B%(2),  A%(1000),    B%(2000) '
   (check_literal) check_literal:After while(): A%(1),B%(2),  A%(1000),    B%(2000) 
   (check_literal) check_literal:ret1 

   (scan_localglobal) scan_localglobal:

    (scan_literal) scan_literal:lit=' LOCAL' 'LOCAL A%(1),B%(2),  A%(1000),    B%(2000) '
    (scan_literal) scan_literal:After drop space:LOCAL A%(1),B%(2),  A%(1000),    B%(2000) 
    (scan_literal) scan_literal:while loop:LOCAL A%(1),B%(2),  A%(1000),    B%(2000) 
    (scan_literal) scan_literal:while loop:OCAL A%(1),B%(2),  A%(1000),    B%(2000) 
    (scan_literal) scan_literal:while loop:CAL A%(1),B%(2),  A%(1000),    B%(2000) 
    (scan_literal) scan_literal:while loop:AL A%(1),B%(2),  A%(1000),    B%(2000) 
    (scan_literal) scan_literal:while loop:L A%(1),B%(2),  A%(1000),    B%(2000) 
   Frst:0 T:'LOCAL' exptype:i
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:LOCAL is not function
token_is_variable: tok:'LOCAL'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:LOCAL is not function
    (init_get_name) 
init_get_name:'LOCAL'
    (init_get_name) 
init_get_name:'LOCAL'
    (get_name) 
get_name:gn:'LOCAL'
process_token:type:i req_type:?
modify_expression_type:Inittype:i Intype:f Outtype:f
( output_variable) [f,()] f f LOCAL
    (scan_literal) scan_literal:ret1

    (check_variable) check_variable:

     (check_vname) check_vname 'A%(1),B%(2),  A%(1000),    B%(2000) ':
     (check_vname) check_vname ret1 '%(1),B%(2),  A%(1000),    B%(2000) ':
    (check_variable) check_variable: '%(1),B%(2),  A%(1000),    B%(2000) '
    (check_variable) check_variable: Ary test '(1),B%(2),  A%(1000),    B%(2000) '

     (check_literal) check_literal:lit='(' idx=8 '(1),B%(2),  A%(1000),    B%(2000) '
     (check_literal) check_literal:After drop space:'(' idx=8 '(1),B%(2),  A%(1000),    B%(2000) '
     (check_literal) check_literal:After while():1),B%(2),  A%(1000),    B%(2000) 
     (check_literal) check_literal:ret1 
    (check_variable) check_variable: is array

     (check_expression) check_expression: '1),B%(2),  A%(1000),    B%(2000) '

      (check_eitem) check_eitem: '1),B%(2),  A%(1000),    B%(2000) '

       (check_operator) check_operator: 1),B%(2),  A%(1000),    B%(2000) 

        (check_literal) check_literal:lit=',' idx=9 '1),B%(2),  A%(1000),    B%(2000) '
        (check_literal) check_literal:After drop space:',' idx=9 '1),B%(2),  A%(1000),    B%(2000) '
        (check_literal)   ',' != '1'
        (check_literal) check_literal: ret0
       (check_operator) check_operator:ret0

       (check_function) check_function: '1),B%(2),  A%(1000),    B%(2000) '
       (check_function) check_function: ret0

       (check_atom) check_atom:

        (check_literal) check_literal:lit=' %' idx=9 '1),B%(2),  A%(1000),    B%(2000) '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'%' idx=9 '1),B%(2),  A%(1000),    B%(2000) '
        (check_literal)   '%' != '1'
        (check_literal) check_literal: ret0

        (check_literal) check_literal:lit=' "' idx=9 '1),B%(2),  A%(1000),    B%(2000) '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'"' idx=9 '1),B%(2),  A%(1000),    B%(2000) '
        (check_literal)   '"' != '1'
        (check_literal) check_literal: ret0

        (check_number) check_number:

         (check_float) check_float:
         (isfloatdigit) isfloatdigit:
         (isfloatdigit) isfloatdigit:
         (check_float) check_float: ret0

         (check_integer) check_integer: '1),B%(2),  A%(1000),    B%(2000) '
         (check_integer) check_integer:ret1
        (check_number) check_number: ret1
       (check_atom) check_atom:ret1
      (check_eitem) check_eitem:ret1

      (check_eitem) check_eitem: '),B%(2),  A%(1000),    B%(2000) '

       (check_operator) check_operator: ),B%(2),  A%(1000),    B%(2000) 

        (check_literal) check_literal:lit=',' idx=10 '),B%(2),  A%(1000),    B%(2000) '
        (check_literal) check_literal:After drop space:',' idx=10 '),B%(2),  A%(1000),    B%(2000) '
        (check_literal)   ',' != ')'
        (check_literal) check_literal: ret0
       (check_operator) check_operator:ret0

       (check_function) check_function: '),B%(2),  A%(1000),    B%(2000) '
       (check_function) check_function: ret0

       (check_atom) check_atom:

        (check_literal) check_literal:lit=' %' idx=10 '),B%(2),  A%(1000),    B%(2000) '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'%' idx=10 '),B%(2),  A%(1000),    B%(2000) '
        (check_literal)   '%' != ')'
        (check_literal) check_literal: ret0

        (check_literal) check_literal:lit=' "' idx=10 '),B%(2),  A%(1000),    B%(2000) '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'"' idx=10 '),B%(2),  A%(1000),    B%(2000) '
        (check_literal)   '"' != ')'
        (check_literal) check_literal: ret0

        (check_number) check_number:

         (check_float) check_float:
         (isfloatdigit) isfloatdigit:
         (check_float) check_float: ret0

         (check_integer) check_integer: '),B%(2),  A%(1000),    B%(2000) '
         (check_integer) check_integer:ret0
        (check_number) check_number: ret0

        (check_variable) check_variable:

         (check_vname) check_vname '),B%(2),  A%(1000),    B%(2000) ':
         (check_vname) check_vname ret0 '),B%(2),  A%(1000),    B%(2000) ':
        (check_variable) check_variable:ret0 
       (check_atom) check_atom:ret1

       (check_sub_expr) check_sub_expr:

        (check_literal) check_literal:lit=' (' idx=10 '),B%(2),  A%(1000),    B%(2000) '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'(' idx=10 '),B%(2),  A%(1000),    B%(2000) '
        (check_literal)   '(' != ')'
        (check_literal) check_literal: ret0
       (check_sub_expr) check_sub_expr: ret0
      (check_eitem) check_eitem:ret0
     (check_expression) check_expression:ret1 '),B%(2),  A%(1000),    B%(2000) '

     (check_literal) check_literal:lit=' ,' idx=10 '),B%(2),  A%(1000),    B%(2000) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=10 '),B%(2),  A%(1000),    B%(2000) '
     (check_literal)   ',' != ')'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' )' idx=10 '),B%(2),  A%(1000),    B%(2000) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:')' idx=10 '),B%(2),  A%(1000),    B%(2000) '
     (check_literal) check_literal:After while():,B%(2),  A%(1000),    B%(2000) 
     (check_literal) check_literal:ret1 
    (check_variable) check_variable:ret1 

    (scan_variable) scan_variable:

     (scan_vname) scan_vname: ' A%(1),B%(2),  A%(1000),    B%(2000) '
     (scan_vname) scan_vname: ret1 'A'
    (scan_variable) scan_variable: '%(1),B%(2),  A%(1000),    B%(2000) ' vname='A'
    (scan_variable) scan_variable: Ary test '(1),B%(2),  A%(1000),    B%(2000) '

     (check_literal) check_literal:lit='(' idx=8 '(1),B%(2),  A%(1000),    B%(2000) '
     (check_literal) check_literal:After drop space:'(' idx=8 '(1),B%(2),  A%(1000),    B%(2000) '
     (check_literal) check_literal:After while():1),B%(2),  A%(1000),    B%(2000) 
     (check_literal) check_literal:ret1 

     (scan_literal) scan_literal:lit='(' '(1),B%(2),  A%(1000),    B%(2000) '
     (scan_literal) scan_literal:After drop space:(1),B%(2),  A%(1000),    B%(2000) 
     (scan_literal) scan_literal:while loop:(1),B%(2),  A%(1000),    B%(2000) 
   Frst:0 T:'(' exptype:f
(output_sub_start)
 Push:'('
     (op_stack_print) 
------------------
     (op_stack_print) 
Operator Stack     (1)

     (op_stack_print) 
000: ( type:16
     (op_stack_print) 
------------------

     (scan_literal) scan_literal:ret1
    (scan_variable) scan_variable: is array

     (scan_integer) scan_integer:
     (scan_integer) scan_integer:ret1
   Frst:0 T:'1' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(f )] i i 1
    (scan_integer) scan_integer:ret1  1

    (check_literal) check_literal:lit=' ,' idx=10 '),B%(2),  A%(1000),    B%(2000) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=10 '),B%(2),  A%(1000),    B%(2000) '
    (check_literal)   ',' != ')'
    (check_literal) check_literal: ret0

    (scan_literal) scan_literal:lit=' )' '),B%(2),  A%(1000),    B%(2000) '
    (scan_literal) scan_literal:After drop space:),B%(2),  A%(1000),    B%(2000) 
    (scan_literal) scan_literal:while loop:),B%(2),  A%(1000),    B%(2000) 
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (0)

    (op_stack_print) 
------------------

(  output_sub_end)
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function: is not function
(  output_sub_end)
    (scan_literal) scan_literal:ret1
   (scan_variable) scan_variable:ret1 vname='A%' is str:0 int:1 flt:0 ary:1
   Frst:0 T:'A%' exptype:f
  (token_is_function) 
token_is_function:
  (token_is_function) 
token_is_function:A% is not function
token_is_variable: tok:'A%'
  (token_is_function) 
token_is_function:
  (token_is_function) 
token_is_function:A% is not function
  (init_get_name) 
init_get_name:'A%'
  (init_get_name) 
init_get_name:'A%'
  (get_name) 
get_name:gn:'A%'
process_token:type:f req_type:i
modify_expression_type:Inittype:f Intype:i Outtype:f
( output_variable) [f,()] f f A%
  (scan_localglobal) scan_localglobal: LOCAL variable:'<~>þ'
  (print_var_info) 
VAR INFO: '                A%' gbl:0 ref:0 int:1 flt:0 str:0 ary:1 max_str:0 max_ary:1 num_ind:1

   (check_literal) check_literal:lit=' ,' idx=11 ',B%(2),  A%(1000),    B%(2000) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=11 ',B%(2),  A%(1000),    B%(2000) '
   (check_literal) check_literal:After while():B%(2),  A%(1000),    B%(2000) 
   (check_literal) check_literal:ret1 

   (scan_literal) scan_literal:lit=' ,' ',B%(2),  A%(1000),    B%(2000) '
   (scan_literal) scan_literal:After drop space:,B%(2),  A%(1000),    B%(2000) 
   (scan_literal) scan_literal:while loop:,B%(2),  A%(1000),    B%(2000) 
   Frst:0 T:',' exptype:f
(output_sub_start)
   (scan_literal) scan_literal:ret1

   (check_variable) check_variable:

    (check_vname) check_vname 'B%(2),  A%(1000),    B%(2000) ':
    (check_vname) check_vname ret1 '%(2),  A%(1000),    B%(2000) ':
   (check_variable) check_variable: '%(2),  A%(1000),    B%(2000) '
   (check_variable) check_variable: Ary test '(2),  A%(1000),    B%(2000) '

    (check_literal) check_literal:lit='(' idx=14 '(2),  A%(1000),    B%(2000) '
    (check_literal) check_literal:After drop space:'(' idx=14 '(2),  A%(1000),    B%(2000) '
    (check_literal) check_literal:After while():2),  A%(1000),    B%(2000) 
    (check_literal) check_literal:ret1 
   (check_variable) check_variable: is array

    (check_expression) check_expression: '2),  A%(1000),    B%(2000) '

     (check_eitem) check_eitem: '2),  A%(1000),    B%(2000) '

      (check_operator) check_operator: 2),  A%(1000),    B%(2000) 

       (check_literal) check_literal:lit=',' idx=15 '2),  A%(1000),    B%(2000) '
       (check_literal) check_literal:After drop space:',' idx=15 '2),  A%(1000),    B%(2000) '
       (check_literal)   ',' != '2'
       (check_literal) check_literal: ret0
      (check_operator) check_operator:ret0

      (check_function) check_function: '2),  A%(1000),    B%(2000) '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=15 '2),  A%(1000),    B%(2000) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=15 '2),  A%(1000),    B%(2000) '
       (check_literal)   '%' != '2'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=15 '2),  A%(1000),    B%(2000) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=15 '2),  A%(1000),    B%(2000) '
       (check_literal)   '"' != '2'
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '2),  A%(1000),    B%(2000) '
        (check_integer) check_integer:ret1
       (check_number) check_number: ret1
      (check_atom) check_atom:ret1
     (check_eitem) check_eitem:ret1

     (check_eitem) check_eitem: '),  A%(1000),    B%(2000) '

      (check_operator) check_operator: ),  A%(1000),    B%(2000) 

       (check_literal) check_literal:lit=',' idx=16 '),  A%(1000),    B%(2000) '
       (check_literal) check_literal:After drop space:',' idx=16 '),  A%(1000),    B%(2000) '
       (check_literal)   ',' != ')'
       (check_literal) check_literal: ret0
      (check_operator) check_operator:ret0

      (check_function) check_function: '),  A%(1000),    B%(2000) '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=16 '),  A%(1000),    B%(2000) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=16 '),  A%(1000),    B%(2000) '
       (check_literal)   '%' != ')'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=16 '),  A%(1000),    B%(2000) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=16 '),  A%(1000),    B%(2000) '
       (check_literal)   '"' != ')'
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '),  A%(1000),    B%(2000) '
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname '),  A%(1000),    B%(2000) ':
        (check_vname) check_vname ret0 '),  A%(1000),    B%(2000) ':
       (check_variable) check_variable:ret0 
      (check_atom) check_atom:ret1

      (check_sub_expr) check_sub_expr:

       (check_literal) check_literal:lit=' (' idx=16 '),  A%(1000),    B%(2000) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'(' idx=16 '),  A%(1000),    B%(2000) '
       (check_literal)   '(' != ')'
       (check_literal) check_literal: ret0
      (check_sub_expr) check_sub_expr: ret0
     (check_eitem) check_eitem:ret0
    (check_expression) check_expression:ret1 '),  A%(1000),    B%(2000) '

    (check_literal) check_literal:lit=' ,' idx=16 '),  A%(1000),    B%(2000) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=16 '),  A%(1000),    B%(2000) '
    (check_literal)   ',' != ')'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' )' idx=16 '),  A%(1000),    B%(2000) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:')' idx=16 '),  A%(1000),    B%(2000) '
    (check_literal) check_literal:After while():,  A%(1000),    B%(2000) 
    (check_literal) check_literal:ret1 
   (check_variable) check_variable:ret1 

   (scan_variable) scan_variable:

    (scan_vname) scan_vname: 'B%(2),  A%(1000),    B%(2000) '
    (scan_vname) scan_vname: ret1 'B'
   (scan_variable) scan_variable: '%(2),  A%(1000),    B%(2000) ' vname='B'
   (scan_variable) scan_variable: Ary test '(2),  A%(1000),    B%(2000) '

    (check_literal) check_literal:lit='(' idx=14 '(2),  A%(1000),    B%(2000) '
    (check_literal) check_literal:After drop space:'(' idx=14 '(2),  A%(1000),    B%(2000) '
    (check_literal) check_literal:After while():2),  A%(1000),    B%(2000) 
    (check_literal) check_literal:ret1 

    (scan_literal) scan_literal:lit='(' '(2),  A%(1000),    B%(2000) '
    (scan_literal) scan_literal:After drop space:(2),  A%(1000),    B%(2000) 
    (scan_literal) scan_literal:while loop:(2),  A%(1000),    B%(2000) 
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (1)

    (op_stack_print) 
000: ( type:16
    (op_stack_print) 
------------------

    (scan_literal) scan_literal:ret1
   (scan_variable) scan_variable: is array

    (scan_integer) scan_integer:
    (scan_integer) scan_integer:ret1
   Frst:0 T:'2' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U )] i i 2
   (scan_integer) scan_integer:ret1  2

   (check_literal) check_literal:lit=' ,' idx=16 '),  A%(1000),    B%(2000) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=16 '),  A%(1000),    B%(2000) '
   (check_literal)   ',' != ')'
   (check_literal) check_literal: ret0

   (scan_literal) scan_literal:lit=' )' '),  A%(1000),    B%(2000) '
   (scan_literal) scan_literal:After drop space:),  A%(1000),    B%(2000) 
   (scan_literal) scan_literal:while loop:),  A%(1000),    B%(2000) 
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
   (op_stack_print) 
------------------
   (op_stack_print) 
Operator Stack     (0)

   (op_stack_print) 
------------------

(  output_sub_end)
   (token_is_function) 
token_is_function:
   (token_is_function) 
token_is_function: is not function
(  output_sub_end)
   (scan_literal) scan_literal:ret1
  (scan_variable) scan_variable:ret1 vname='B%' is str:0 int:1 flt:0 ary:1
   Frst:0 T:'B%' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:B% is not function
token_is_variable: tok:'B%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:B% is not function
 (init_get_name) 
init_get_name:'B%'
 (init_get_name) 
init_get_name:'B%'
 (get_name) 
get_name:gn:'B%'
process_token:type:U req_type:?
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] i i B%
 (scan_localglobal) scan_localglobal: LOCAL variable:'<~>þ'
 (print_var_info) 
VAR INFO: '                B%' gbl:0 ref:0 int:1 flt:0 str:0 ary:1 max_str:0 max_ary:2 num_ind:1

  (check_literal) check_literal:lit=' ,' idx=17 ',  A%(1000),    B%(2000) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:',' idx=17 ',  A%(1000),    B%(2000) '
  (check_literal) check_literal:After while():  A%(1000),    B%(2000) 
  (check_literal) check_literal:ret1 

  (scan_literal) scan_literal:lit=' ,' ',  A%(1000),    B%(2000) '
  (scan_literal) scan_literal:After drop space:,  A%(1000),    B%(2000) 
  (scan_literal) scan_literal:while loop:,  A%(1000),    B%(2000) 
   Frst:0 T:',' exptype:i
(output_sub_start)
  (scan_literal) scan_literal:ret1

  (check_variable) check_variable:

   (check_vname) check_vname 'A%(1000),    B%(2000) ':
   (check_vname) check_vname ret1 '%(1000),    B%(2000) ':
  (check_variable) check_variable: '%(1000),    B%(2000) '
  (check_variable) check_variable: Ary test '(1000),    B%(2000) '

   (check_literal) check_literal:lit='(' idx=22 '(1000),    B%(2000) '
   (check_literal) check_literal:After drop space:'(' idx=22 '(1000),    B%(2000) '
   (check_literal) check_literal:After while():1000),    B%(2000) 
   (check_literal) check_literal:ret1 
  (check_variable) check_variable: is array

   (check_expression) check_expression: '1000),    B%(2000) '

    (check_eitem) check_eitem: '1000),    B%(2000) '

     (check_operator) check_operator: 1000),    B%(2000) 

      (check_literal) check_literal:lit=',' idx=23 '1000),    B%(2000) '
      (check_literal) check_literal:After drop space:',' idx=23 '1000),    B%(2000) '
      (check_literal)   ',' != '1'
      (check_literal) check_literal: ret0
     (check_operator) check_operator:ret0

     (check_function) check_function: '1000),    B%(2000) '
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=23 '1000),    B%(2000) '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=23 '1000),    B%(2000) '
      (check_literal)   '%' != '1'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=23 '1000),    B%(2000) '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=23 '1000),    B%(2000) '
      (check_literal)   '"' != '1'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: '1000),    B%(2000) '
       (check_integer) check_integer:ret1
      (check_number) check_number: ret1
     (check_atom) check_atom:ret1
    (check_eitem) check_eitem:ret1

    (check_eitem) check_eitem: '),    B%(2000) '

     (check_operator) check_operator: ),    B%(2000) 

      (check_literal) check_literal:lit=',' idx=27 '),    B%(2000) '
      (check_literal) check_literal:After drop space:',' idx=27 '),    B%(2000) '
      (check_literal)   ',' != ')'
      (check_literal) check_literal: ret0
     (check_operator) check_operator:ret0

     (check_function) check_function: '),    B%(2000) '
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=27 '),    B%(2000) '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=27 '),    B%(2000) '
      (check_literal)   '%' != ')'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=27 '),    B%(2000) '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=27 '),    B%(2000) '
      (check_literal)   '"' != ')'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: '),    B%(2000) '
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname '),    B%(2000) ':
       (check_vname) check_vname ret0 '),    B%(2000) ':
      (check_variable) check_variable:ret0 
     (check_atom) check_atom:ret1

     (check_sub_expr) check_sub_expr:

      (check_literal) check_literal:lit=' (' idx=27 '),    B%(2000) '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'(' idx=27 '),    B%(2000) '
      (check_literal)   '(' != ')'
      (check_literal) check_literal: ret0
     (check_sub_expr) check_sub_expr: ret0
    (check_eitem) check_eitem:ret0
   (check_expression) check_expression:ret1 '),    B%(2000) '

   (check_literal) check_literal:lit=' ,' idx=27 '),    B%(2000) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=27 '),    B%(2000) '
   (check_literal)   ',' != ')'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' )' idx=27 '),    B%(2000) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:')' idx=27 '),    B%(2000) '
   (check_literal) check_literal:After while():,    B%(2000) 
   (check_literal) check_literal:ret1 
  (check_variable) check_variable:ret1 

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: '  A%(1000),    B%(2000) '
   (scan_vname) scan_vname: ret1 'A'
  (scan_variable) scan_variable: '%(1000),    B%(2000) ' vname='A'
  (scan_variable) scan_variable: Ary test '(1000),    B%(2000) '

   (check_literal) check_literal:lit='(' idx=22 '(1000),    B%(2000) '
   (check_literal) check_literal:After drop space:'(' idx=22 '(1000),    B%(2000) '
   (check_literal) check_literal:After while():1000),    B%(2000) 
   (check_literal) check_literal:ret1 

   (scan_literal) scan_literal:lit='(' '(1000),    B%(2000) '
   (scan_literal) scan_literal:After drop space:(1000),    B%(2000) 
   (scan_literal) scan_literal:while loop:(1000),    B%(2000) 
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
   (op_stack_print) 
------------------
   (op_stack_print) 
Operator Stack     (1)

   (op_stack_print) 
000: ( type:16
   (op_stack_print) 
------------------

   (scan_literal) scan_literal:ret1
  (scan_variable) scan_variable: is array

   (scan_integer) scan_integer:
   (scan_integer) scan_integer:ret1
   Frst:0 T:'1000' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U )] i i 1000
  (scan_integer) scan_integer:ret1  1000

  (check_literal) check_literal:lit=' ,' idx=27 '),    B%(2000) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:',' idx=27 '),    B%(2000) '
  (check_literal)   ',' != ')'
  (check_literal) check_literal: ret0

  (scan_literal) scan_literal:lit=' )' '),    B%(2000) '
  (scan_literal) scan_literal:After drop space:),    B%(2000) 
  (scan_literal) scan_literal:while loop:),    B%(2000) 
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (0)

  (op_stack_print) 
------------------

(  output_sub_end)
  (token_is_function) 
token_is_function:
  (token_is_function) 
token_is_function: is not function
(  output_sub_end)
  (scan_literal) scan_literal:ret1
 (scan_variable) scan_variable:ret1 vname='A%' is str:0 int:1 flt:0 ary:1
   Frst:0 T:'A%' exptype:U
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:A% is not function
token_is_variable: tok:'A%'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:A% is not function
(init_get_name) 
init_get_name:'A%'
(init_get_name) 
init_get_name:'A%'
(get_name) 
get_name:gn:'A%'
process_token:type:U req_type:?
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] i i A%
(scan_localglobal) scan_localglobal: LOCAL variable:'<~>þ'
(print_var_info) 
VAR INFO: '                A%' gbl:0 ref:0 int:1 flt:0 str:0 ary:1 max_str:0 max_ary:1000 num_ind:1

 (check_literal) check_literal:lit=' ,' idx=28 ',    B%(2000) '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=28 ',    B%(2000) '
 (check_literal) check_literal:After while():    B%(2000) 
 (check_literal) check_literal:ret1 

 (scan_literal) scan_literal:lit=' ,' ',    B%(2000) '
 (scan_literal) scan_literal:After drop space:,    B%(2000) 
 (scan_literal) scan_literal:while loop:,    B%(2000) 
   Frst:0 T:',' exptype:i
(output_sub_start)
 (scan_literal) scan_literal:ret1

 (check_variable) check_variable:

  (check_vname) check_vname 'B%(2000) ':
  (check_vname) check_vname ret1 '%(2000) ':
 (check_variable) check_variable: '%(2000) '
 (check_variable) check_variable: Ary test '(2000) '

  (check_literal) check_literal:lit='(' idx=35 '(2000) '
  (check_literal) check_literal:After drop space:'(' idx=35 '(2000) '
  (check_literal) check_literal:After while():2000) 
  (check_literal) check_literal:ret1 
 (check_variable) check_variable: is array

  (check_expression) check_expression: '2000) '

   (check_eitem) check_eitem: '2000) '

    (check_operator) check_operator: 2000) 

     (check_literal) check_literal:lit=',' idx=36 '2000) '
     (check_literal) check_literal:After drop space:',' idx=36 '2000) '
     (check_literal)   ',' != '2'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: '2000) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=36 '2000) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=36 '2000) '
     (check_literal)   '%' != '2'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=36 '2000) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=36 '2000) '
     (check_literal)   '"' != '2'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '2000) '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: ') '

    (check_operator) check_operator: ) 

     (check_literal) check_literal:lit=',' idx=40 ') '
     (check_literal) check_literal:After drop space:',' idx=40 ') '
     (check_literal)   ',' != ')'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: ') '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=40 ') '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=40 ') '
     (check_literal)   '%' != ')'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=40 ') '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=40 ') '
     (check_literal)   '"' != ')'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: ') '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname ') ':
      (check_vname) check_vname ret0 ') ':
     (check_variable) check_variable:ret0 
    (check_atom) check_atom:ret1

    (check_sub_expr) check_sub_expr:

     (check_literal) check_literal:lit=' (' idx=40 ') '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'(' idx=40 ') '
     (check_literal)   '(' != ')'
     (check_literal) check_literal: ret0
    (check_sub_expr) check_sub_expr: ret0
   (check_eitem) check_eitem:ret0
  (check_expression) check_expression:ret1 ') '

  (check_literal) check_literal:lit=' ,' idx=40 ') '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:',' idx=40 ') '
  (check_literal)   ',' != ')'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' )' idx=40 ') '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:')' idx=40 ') '
  (check_literal) check_literal:After while(): 
  (check_literal) check_literal:ret1 
 (check_variable) check_variable:ret1 

 (scan_variable) scan_variable:

  (scan_vname) scan_vname: '    B%(2000) '
  (scan_vname) scan_vname: ret1 'B'
 (scan_variable) scan_variable: '%(2000) ' vname='B'
 (scan_variable) scan_variable: Ary test '(2000) '

  (check_literal) check_literal:lit='(' idx=35 '(2000) '
  (check_literal) check_literal:After drop space:'(' idx=35 '(2000) '
  (check_literal) check_literal:After while():2000) 
  (check_literal) check_literal:ret1 

  (scan_literal) scan_literal:lit='(' '(2000) '
  (scan_literal) scan_literal:After drop space:(2000) 
  (scan_literal) scan_literal:while loop:(2000) 
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (1)

  (op_stack_print) 
000: ( type:16
  (op_stack_print) 
------------------

  (scan_literal) scan_literal:ret1
 (scan_variable) scan_variable: is array

  (scan_integer) scan_integer:
  (scan_integer) scan_integer:ret1
   Frst:0 T:'2000' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U )] i i 2000
 (scan_integer) scan_integer:ret1  2000

 (check_literal) check_literal:lit=' ,' idx=40 ') '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=40 ') '
 (check_literal)   ',' != ')'
 (check_literal) check_literal: ret0

 (scan_literal) scan_literal:lit=' )' ') '
 (scan_literal) scan_literal:After drop space:) 
 (scan_literal) scan_literal:while loop:) 
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (0)

 (op_stack_print) 
------------------

(  output_sub_end)
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function: is not function
(  output_sub_end)
 (scan_literal) scan_literal:ret1
(scan_variable) scan_variable:ret1 vname='B%' is str:0 int:1 flt:0 ary:1
   Frst:0 T:'B%' exptype:U
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:B% is not function
token_is_variable: tok:'B%'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:B% is not function
(init_get_name) 
init_get_name:'B%'
(init_get_name) 
init_get_name:'B%'
(get_name) 
get_name:gn:'B%'
process_token:type:U req_type:?
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] i i B%
(scan_localglobal) scan_localglobal: LOCAL variable:'<~>þ'
(print_var_info) 
VAR INFO: '                B%' gbl:0 ref:0 int:1 flt:0 str:0 ary:1 max_str:0 max_ary:2000 num_ind:1

 (check_literal) check_literal:lit=' ,' idx=41 ' '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=42 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_variable) check_variable:

  (check_vname) check_vname '':
  (check_vname) check_vname ret0 '':
 (check_variable) check_variable:ret0 
(scan_localglobal) scan_localglobal:ret1
(scan_declare) scan_declare:ret 1
*************************
**LOCAL A$(10),B$(1,2) **
*************************


 (check_declare) check_declare:

  (check_literal) check_literal:lit=' LOCAL' idx=0 'LOCAL A$(10),B$(1,2) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'LOCAL A$(10),B$(1,2) '
  (check_literal) check_literal:After while(): A$(10),B$(1,2) 
  (check_literal) check_literal:ret1 
 (check_declare) check_declare:ret 1

  (scan_declare) scan_declare:

   (check_literal) check_literal:lit=' LOCAL' idx=0 'LOCAL A$(10),B$(1,2) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'LOCAL' idx=0 'LOCAL A$(10),B$(1,2) '
   (check_literal) check_literal:After while(): A$(10),B$(1,2) 
   (check_literal) check_literal:ret1 

   (scan_localglobal) scan_localglobal:

    (scan_literal) scan_literal:lit=' LOCAL' 'LOCAL A$(10),B$(1,2) '
    (scan_literal) scan_literal:After drop space:LOCAL A$(10),B$(1,2) 
    (scan_literal) scan_literal:while loop:LOCAL A$(10),B$(1,2) 
    (scan_literal) scan_literal:while loop:OCAL A$(10),B$(1,2) 
    (scan_literal) scan_literal:while loop:CAL A$(10),B$(1,2) 
    (scan_literal) scan_literal:while loop:AL A$(10),B$(1,2) 
    (scan_literal) scan_literal:while loop:L A$(10),B$(1,2) 
   Frst:0 T:'LOCAL' exptype:i
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:LOCAL is not function
token_is_variable: tok:'LOCAL'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:LOCAL is not function
    (init_get_name) 
init_get_name:'LOCAL'
    (init_get_name) 
init_get_name:'LOCAL'
    (get_name) 
get_name:gn:'LOCAL'
process_token:type:i req_type:i
modify_expression_type:Inittype:i Intype:f Outtype:f
( output_variable) [f,()] f f LOCAL
    (scan_literal) scan_literal:ret1

    (check_variable) check_variable:

     (check_vname) check_vname 'A$(10),B$(1,2) ':
     (check_vname) check_vname ret1 '$(10),B$(1,2) ':
    (check_variable) check_variable: '$(10),B$(1,2) '
    (check_variable) check_variable: Ary test '(10),B$(1,2) '

     (check_literal) check_literal:lit='(' idx=8 '(10),B$(1,2) '
     (check_literal) check_literal:After drop space:'(' idx=8 '(10),B$(1,2) '
     (check_literal) check_literal:After while():10),B$(1,2) 
     (check_literal) check_literal:ret1 
    (check_variable) check_variable: is array

     (check_expression) check_expression: '10),B$(1,2) '

      (check_eitem) check_eitem: '10),B$(1,2) '

       (check_operator) check_operator: 10),B$(1,2) 

        (check_literal) check_literal:lit=',' idx=9 '10),B$(1,2) '
        (check_literal) check_literal:After drop space:',' idx=9 '10),B$(1,2) '
        (check_literal)   ',' != '1'
        (check_literal) check_literal: ret0
       (check_operator) check_operator:ret0

       (check_function) check_function: '10),B$(1,2) '
       (check_function) check_function: ret0

       (check_atom) check_atom:

        (check_literal) check_literal:lit=' %' idx=9 '10),B$(1,2) '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'%' idx=9 '10),B$(1,2) '
        (check_literal)   '%' != '1'
        (check_literal) check_literal: ret0

        (check_literal) check_literal:lit=' "' idx=9 '10),B$(1,2) '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'"' idx=9 '10),B$(1,2) '
        (check_literal)   '"' != '1'
        (check_literal) check_literal: ret0

        (check_number) check_number:

         (check_float) check_float:
         (isfloatdigit) isfloatdigit:
         (isfloatdigit) isfloatdigit:
         (isfloatdigit) isfloatdigit:
         (check_float) check_float: ret0

         (check_integer) check_integer: '10),B$(1,2) '
         (check_integer) check_integer:ret1
        (check_number) check_number: ret1
       (check_atom) check_atom:ret1
      (check_eitem) check_eitem:ret1

      (check_eitem) check_eitem: '),B$(1,2) '

       (check_operator) check_operator: ),B$(1,2) 

        (check_literal) check_literal:lit=',' idx=11 '),B$(1,2) '
        (check_literal) check_literal:After drop space:',' idx=11 '),B$(1,2) '
        (check_literal)   ',' != ')'
        (check_literal) check_literal: ret0
       (check_operator) check_operator:ret0

       (check_function) check_function: '),B$(1,2) '
       (check_function) check_function: ret0

       (check_atom) check_atom:

        (check_literal) check_literal:lit=' %' idx=11 '),B$(1,2) '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'%' idx=11 '),B$(1,2) '
        (check_literal)   '%' != ')'
        (check_literal) check_literal: ret0

        (check_literal) check_literal:lit=' "' idx=11 '),B$(1,2) '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'"' idx=11 '),B$(1,2) '
        (check_literal)   '"' != ')'
        (check_literal) check_literal: ret0

        (check_number) check_number:

         (check_float) check_float:
         (isfloatdigit) isfloatdigit:
         (check_float) check_float: ret0

         (check_integer) check_integer: '),B$(1,2) '
         (check_integer) check_integer:ret0
        (check_number) check_number: ret0

        (check_variable) check_variable:

         (check_vname) check_vname '),B$(1,2) ':
         (check_vname) check_vname ret0 '),B$(1,2) ':
        (check_variable) check_variable:ret0 
       (check_atom) check_atom:ret1

       (check_sub_expr) check_sub_expr:

        (check_literal) check_literal:lit=' (' idx=11 '),B$(1,2) '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'(' idx=11 '),B$(1,2) '
        (check_literal)   '(' != ')'
        (check_literal) check_literal: ret0
       (check_sub_expr) check_sub_expr: ret0
      (check_eitem) check_eitem:ret0
     (check_expression) check_expression:ret1 '),B$(1,2) '

     (check_literal) check_literal:lit=' ,' idx=11 '),B$(1,2) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=11 '),B$(1,2) '
     (check_literal)   ',' != ')'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' )' idx=11 '),B$(1,2) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:')' idx=11 '),B$(1,2) '
     (check_literal) check_literal:After while():,B$(1,2) 
     (check_literal) check_literal:ret1 
    (check_variable) check_variable:ret1 

    (scan_variable) scan_variable:

     (scan_vname) scan_vname: ' A$(10),B$(1,2) '
     (scan_vname) scan_vname: ret1 'A'
    (scan_variable) scan_variable: '$(10),B$(1,2) ' vname='A'
    (scan_variable) scan_variable: Ary test '(10),B$(1,2) '

     (check_literal) check_literal:lit='(' idx=8 '(10),B$(1,2) '
     (check_literal) check_literal:After drop space:'(' idx=8 '(10),B$(1,2) '
     (check_literal) check_literal:After while():10),B$(1,2) 
     (check_literal) check_literal:ret1 

     (scan_literal) scan_literal:lit='(' '(10),B$(1,2) '
     (scan_literal) scan_literal:After drop space:(10),B$(1,2) 
     (scan_literal) scan_literal:while loop:(10),B$(1,2) 
   Frst:0 T:'(' exptype:f
(output_sub_start)
 Push:'('
     (op_stack_print) 
------------------
     (op_stack_print) 
Operator Stack     (1)

     (op_stack_print) 
000: ( type:16
     (op_stack_print) 
------------------

     (scan_literal) scan_literal:ret1
    (scan_variable) scan_variable: is array

     (scan_integer) scan_integer:
     (scan_integer) scan_integer:ret1
   Frst:0 T:'10' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(f )] i i 10
    (scan_integer) scan_integer:ret1  10

    (check_literal) check_literal:lit=' ,' idx=11 '),B$(1,2) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=11 '),B$(1,2) '
    (check_literal)   ',' != ')'
    (check_literal) check_literal: ret0

    (scan_literal) scan_literal:lit=' )' '),B$(1,2) '
    (scan_literal) scan_literal:After drop space:),B$(1,2) 
    (scan_literal) scan_literal:while loop:),B$(1,2) 
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (0)

    (op_stack_print) 
------------------

(  output_sub_end)
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function: is not function
(  output_sub_end)
    (scan_literal) scan_literal:ret1
   (scan_variable) scan_variable:ret1 vname='A$' is str:1 int:0 flt:0 ary:0
   Frst:0 T:'A$' exptype:f
  (token_is_function) 
token_is_function:
  (token_is_function) 
token_is_function:A$ is not function
token_is_variable: tok:'A$'
  (token_is_function) 
token_is_function:
  (token_is_function) 
token_is_function:A$ is not function
  (init_get_name) 
init_get_name:'A$'
  (init_get_name) 
init_get_name:'A$'
  (get_name) 
get_name:gn:'A$'
process_token:type:f req_type:i
modify_expression_type:Inittype:f Intype:s Outtype:f
( output_variable) [f,()] f f A$
  (scan_localglobal) scan_localglobal: LOCAL variable:'<~>þ'
  (print_var_info) 
VAR INFO: '                A$' gbl:0 ref:0 int:0 flt:0 str:1 ary:0 max_str:10 max_ary:0 num_ind:1

   (check_literal) check_literal:lit=' ,' idx=12 ',B$(1,2) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=12 ',B$(1,2) '
   (check_literal) check_literal:After while():B$(1,2) 
   (check_literal) check_literal:ret1 

   (scan_literal) scan_literal:lit=' ,' ',B$(1,2) '
   (scan_literal) scan_literal:After drop space:,B$(1,2) 
   (scan_literal) scan_literal:while loop:,B$(1,2) 
   Frst:0 T:',' exptype:f
(output_sub_start)
   (scan_literal) scan_literal:ret1

   (check_variable) check_variable:

    (check_vname) check_vname 'B$(1,2) ':
    (check_vname) check_vname ret1 '$(1,2) ':
   (check_variable) check_variable: '$(1,2) '
   (check_variable) check_variable: Ary test '(1,2) '

    (check_literal) check_literal:lit='(' idx=15 '(1,2) '
    (check_literal) check_literal:After drop space:'(' idx=15 '(1,2) '
    (check_literal) check_literal:After while():1,2) 
    (check_literal) check_literal:ret1 
   (check_variable) check_variable: is array

    (check_expression) check_expression: '1,2) '

     (check_eitem) check_eitem: '1,2) '

      (check_operator) check_operator: 1,2) 

       (check_literal) check_literal:lit=',' idx=16 '1,2) '
       (check_literal) check_literal:After drop space:',' idx=16 '1,2) '
       (check_literal)   ',' != '1'
       (check_literal) check_literal: ret0
      (check_operator) check_operator:ret0

      (check_function) check_function: '1,2) '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=16 '1,2) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=16 '1,2) '
       (check_literal)   '%' != '1'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=16 '1,2) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=16 '1,2) '
       (check_literal)   '"' != '1'
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '1,2) '
        (check_integer) check_integer:ret1
       (check_number) check_number: ret1
      (check_atom) check_atom:ret1
     (check_eitem) check_eitem:ret1

     (check_eitem) check_eitem: ',2) '

      (check_operator) check_operator: ,2) 

       (check_literal) check_literal:lit=',' idx=17 ',2) '
       (check_literal) check_literal:After drop space:',' idx=17 ',2) '
       (check_literal) check_literal:After while():2) 
       (check_literal) check_literal:ret1 

       (scan_literal) scan_literal:lit=',' 'B$(1,2) '
       (scan_literal) scan_literal:After drop space:B$(1,2) 
       (scan_literal) scan_literal:while loop:B$(1,2) 
       (scan_literal) scan_literal:ret1

       (check_function) check_function: ',2) '
       (check_function) check_function: ret0

       (check_atom) check_atom:

        (check_literal) check_literal:lit=' %' idx=17 ',2) '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'%' idx=17 ',2) '
        (check_literal)   '%' != ','
        (check_literal) check_literal: ret0

        (check_literal) check_literal:lit=' "' idx=17 ',2) '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'"' idx=17 ',2) '
        (check_literal)   '"' != ','
        (check_literal) check_literal: ret0

        (check_number) check_number:

         (check_float) check_float:
         (isfloatdigit) isfloatdigit:
         (check_float) check_float: ret0

         (check_integer) check_integer: ',2) '
         (check_integer) check_integer:ret0
        (check_number) check_number: ret0

        (check_variable) check_variable:

         (check_vname) check_vname ',2) ':
         (check_vname) check_vname ret0 ',2) ':
        (check_variable) check_variable:ret0 
       (check_atom) check_atom:ret1

       (check_sub_expr) check_sub_expr:

        (check_literal) check_literal:lit=' (' idx=17 ',2) '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'(' idx=17 ',2) '
        (check_literal)   '(' != ','
        (check_literal) check_literal: ret0
       (check_sub_expr) check_sub_expr: ret0
      (check_eitem) check_eitem:ret0
     (check_expression) check_expression:ret1 ',2) '

     (check_literal) check_literal:lit=' ,' idx=17 ',2) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=17 ',2) '
     (check_literal) check_literal:After while():2) 
     (check_literal) check_literal:ret1 

     (check_expression) check_expression: '2) '

      (check_eitem) check_eitem: '2) '

       (check_operator) check_operator: 2) 

        (check_literal) check_literal:lit=',' idx=18 '2) '
        (check_literal) check_literal:After drop space:',' idx=18 '2) '
        (check_literal)   ',' != '2'
        (check_literal) check_literal: ret0
       (check_operator) check_operator:ret0

       (check_function) check_function: '2) '
       (check_function) check_function: ret0

       (check_atom) check_atom:

        (check_literal) check_literal:lit=' %' idx=18 '2) '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'%' idx=18 '2) '
        (check_literal)   '%' != '2'
        (check_literal) check_literal: ret0

        (check_literal) check_literal:lit=' "' idx=18 '2) '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'"' idx=18 '2) '
        (check_literal)   '"' != '2'
        (check_literal) check_literal: ret0

        (check_number) check_number:

         (check_float) check_float:
         (isfloatdigit) isfloatdigit:
         (isfloatdigit) isfloatdigit:
         (check_float) check_float: ret0

         (check_integer) check_integer: '2) '
         (check_integer) check_integer:ret1
        (check_number) check_number: ret1
       (check_atom) check_atom:ret1
      (check_eitem) check_eitem:ret1

      (check_eitem) check_eitem: ') '

       (check_operator) check_operator: ) 

        (check_literal) check_literal:lit=',' idx=19 ') '
        (check_literal) check_literal:After drop space:',' idx=19 ') '
        (check_literal)   ',' != ')'
        (check_literal) check_literal: ret0
       (check_operator) check_operator:ret0

       (check_function) check_function: ') '
       (check_function) check_function: ret0

       (check_atom) check_atom:

        (check_literal) check_literal:lit=' %' idx=19 ') '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'%' idx=19 ') '
        (check_literal)   '%' != ')'
        (check_literal) check_literal: ret0

        (check_literal) check_literal:lit=' "' idx=19 ') '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'"' idx=19 ') '
        (check_literal)   '"' != ')'
        (check_literal) check_literal: ret0

        (check_number) check_number:

         (check_float) check_float:
         (isfloatdigit) isfloatdigit:
         (check_float) check_float: ret0

         (check_integer) check_integer: ') '
         (check_integer) check_integer:ret0
        (check_number) check_number: ret0

        (check_variable) check_variable:

         (check_vname) check_vname ') ':
         (check_vname) check_vname ret0 ') ':
        (check_variable) check_variable:ret0 
       (check_atom) check_atom:ret1

       (check_sub_expr) check_sub_expr:

        (check_literal) check_literal:lit=' (' idx=19 ') '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'(' idx=19 ') '
        (check_literal)   '(' != ')'
        (check_literal) check_literal: ret0
       (check_sub_expr) check_sub_expr: ret0
      (check_eitem) check_eitem:ret0
     (check_expression) check_expression:ret1 ') '

     (check_literal) check_literal:lit=' )' idx=19 ') '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:')' idx=19 ') '
     (check_literal) check_literal:After while(): 
     (check_literal) check_literal:ret1 
    (check_variable) check_variable:ret1 

    (scan_variable) scan_variable:

     (scan_vname) scan_vname: 'B$(1,2) '
     (scan_vname) scan_vname: ret1 'B'
    (scan_variable) scan_variable: '$(1,2) ' vname='B'
    (scan_variable) scan_variable: Ary test '(1,2) '

     (check_literal) check_literal:lit='(' idx=15 '(1,2) '
     (check_literal) check_literal:After drop space:'(' idx=15 '(1,2) '
     (check_literal) check_literal:After while():1,2) 
     (check_literal) check_literal:ret1 

     (scan_literal) scan_literal:lit='(' '(1,2) '
     (scan_literal) scan_literal:After drop space:(1,2) 
     (scan_literal) scan_literal:while loop:(1,2) 
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
     (op_stack_print) 
------------------
     (op_stack_print) 
Operator Stack     (1)

     (op_stack_print) 
000: ( type:16
     (op_stack_print) 
------------------

     (scan_literal) scan_literal:ret1
    (scan_variable) scan_variable: is array

     (scan_integer) scan_integer:
     (scan_integer) scan_integer:ret1
   Frst:0 T:'1' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U )] i i 1
    (scan_integer) scan_integer:ret1  1

    (check_literal) check_literal:lit=' ,' idx=17 ',2) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=17 ',2) '
    (check_literal) check_literal:After while():2) 
    (check_literal) check_literal:ret1 

    (scan_literal) scan_literal:lit=' ,' ',2) '
    (scan_literal) scan_literal:After drop space:,2) 
    (scan_literal) scan_literal:while loop:,2) 
   Frst:0 T:',' exptype:i
(output_sub_start)
    (scan_literal) scan_literal:ret1

    (scan_integer) scan_integer:
    (scan_integer) scan_integer:ret1
   Frst:0 T:'2' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U )] i i 2
   (scan_integer) scan_integer:ret1  2

   (scan_literal) scan_literal:lit=' )' ') '
   (scan_literal) scan_literal:After drop space:) 
   (scan_literal) scan_literal:while loop:) 
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
   (op_stack_print) 
------------------
   (op_stack_print) 
Operator Stack     (0)

   (op_stack_print) 
------------------

(  output_sub_end)
   (token_is_function) 
token_is_function:
   (token_is_function) 
token_is_function: is not function
(  output_sub_end)
   (scan_literal) scan_literal:ret1
  (scan_variable) scan_variable:ret1 vname='B$' is str:1 int:0 flt:0 ary:1
   Frst:0 T:'B$' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:B$ is not function
token_is_variable: tok:'B$'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:B$ is not function
 (init_get_name) 
init_get_name:'B$'
 (init_get_name) 
init_get_name:'B$'
 (get_name) 
get_name:gn:'B$'
process_token:type:U req_type:?
modify_expression_type:Inittype:U Intype:s Outtype:s
( output_variable) [s,()] s s B$
 (scan_localglobal) scan_localglobal: LOCAL variable:'<~>þ'
 (print_var_info) 
VAR INFO: '                B$' gbl:0 ref:0 int:0 flt:0 str:1 ary:1 max_str:2 max_ary:1 num_ind:2

  (check_literal) check_literal:lit=' ,' idx=20 ' '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:',' idx=21 ''
  (check_literal) check_literal  ret0 Empty test string

  (check_variable) check_variable:

   (check_vname) check_vname '':
   (check_vname) check_vname ret0 '':
  (check_variable) check_variable:ret0 
 (scan_localglobal) scan_localglobal:ret1
(scan_declare) scan_declare:ret 1
************************
**LOCAL STR$(12 , 34) **
************************


 (check_declare) check_declare:

  (check_literal) check_literal:lit=' LOCAL' idx=0 'LOCAL STR$(12 , 34) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'LOCAL STR$(12 , 34) '
  (check_literal) check_literal:After while(): STR$(12 , 34) 
  (check_literal) check_literal:ret1 
 (check_declare) check_declare:ret 1

  (scan_declare) scan_declare:

   (check_literal) check_literal:lit=' LOCAL' idx=0 'LOCAL STR$(12 , 34) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'LOCAL' idx=0 'LOCAL STR$(12 , 34) '
   (check_literal) check_literal:After while(): STR$(12 , 34) 
   (check_literal) check_literal:ret1 

   (scan_localglobal) scan_localglobal:

    (scan_literal) scan_literal:lit=' LOCAL' 'LOCAL STR$(12 , 34) '
    (scan_literal) scan_literal:After drop space:LOCAL STR$(12 , 34) 
    (scan_literal) scan_literal:while loop:LOCAL STR$(12 , 34) 
    (scan_literal) scan_literal:while loop:OCAL STR$(12 , 34) 
    (scan_literal) scan_literal:while loop:CAL STR$(12 , 34) 
    (scan_literal) scan_literal:while loop:AL STR$(12 , 34) 
    (scan_literal) scan_literal:while loop:L STR$(12 , 34) 
   Frst:0 T:'LOCAL' exptype:s
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:LOCAL is not function
token_is_variable: tok:'LOCAL'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:LOCAL is not function
    (init_get_name) 
init_get_name:'LOCAL'
    (init_get_name) 
init_get_name:'LOCAL'
    (get_name) 
get_name:gn:'LOCAL'
process_token:type:s req_type:i
modify_expression_type:Inittype:s Intype:f Outtype:s
( output_variable) [s,()] s s LOCAL
    (scan_literal) scan_literal:ret1

    (check_variable) check_variable:

     (check_vname) check_vname 'STR$(12 , 34) ':
     (check_vname) check_vname ret1 '$(12 , 34) ':
    (check_variable) check_variable: '$(12 , 34) '
    (check_variable) check_variable: Ary test '(12 , 34) '

     (check_literal) check_literal:lit='(' idx=10 '(12 , 34) '
     (check_literal) check_literal:After drop space:'(' idx=10 '(12 , 34) '
     (check_literal) check_literal:After while():12 , 34) 
     (check_literal) check_literal:ret1 
    (check_variable) check_variable: is array

     (check_expression) check_expression: '12 , 34) '

      (check_eitem) check_eitem: '12 , 34) '

       (check_operator) check_operator: 12 , 34) 

        (check_literal) check_literal:lit=',' idx=11 '12 , 34) '
        (check_literal) check_literal:After drop space:',' idx=11 '12 , 34) '
        (check_literal)   ',' != '1'
        (check_literal) check_literal: ret0
       (check_operator) check_operator:ret0

       (check_function) check_function: '12 , 34) '
       (check_function) check_function: ret0

       (check_atom) check_atom:

        (check_literal) check_literal:lit=' %' idx=11 '12 , 34) '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'%' idx=11 '12 , 34) '
        (check_literal)   '%' != '1'
        (check_literal) check_literal: ret0

        (check_literal) check_literal:lit=' "' idx=11 '12 , 34) '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'"' idx=11 '12 , 34) '
        (check_literal)   '"' != '1'
        (check_literal) check_literal: ret0

        (check_number) check_number:

         (check_float) check_float:
         (isfloatdigit) isfloatdigit:
         (isfloatdigit) isfloatdigit:
         (isfloatdigit) isfloatdigit:
         (check_float) check_float: ret0

         (check_integer) check_integer: '12 , 34) '
         (check_integer) check_integer:ret1
        (check_number) check_number: ret1
       (check_atom) check_atom:ret1
      (check_eitem) check_eitem:ret1

      (check_eitem) check_eitem: ' , 34) '

       (check_operator) check_operator:  , 34) 

        (check_literal) check_literal:lit=',' idx=14 ', 34) '
        (check_literal) check_literal:After drop space:',' idx=14 ', 34) '
        (check_literal) check_literal:After while(): 34) 
        (check_literal) check_literal:ret1 

        (scan_literal) scan_literal:lit=',' ' STR$(12 , 34) '
        (scan_literal) scan_literal:After drop space: STR$(12 , 34) 
        (scan_literal) scan_literal:while loop: STR$(12 , 34) 
        (scan_literal) scan_literal:ret1

        (check_function) check_function: ', 34) '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=13 ' , 34) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=14 ', 34) '
         (check_literal)   '%' != ','
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=13 ' , 34) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=14 ', 34) '
         (check_literal)   '"' != ','
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: ', 34) '
          (check_integer) check_integer:ret0
         (check_number) check_number: ret0

         (check_variable) check_variable:

          (check_vname) check_vname ', 34) ':
          (check_vname) check_vname ret0 ', 34) ':
         (check_variable) check_variable:ret0 
        (check_atom) check_atom:ret1

        (check_sub_expr) check_sub_expr:

         (check_literal) check_literal:lit=' (' idx=13 ' , 34) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'(' idx=14 ', 34) '
         (check_literal)   '(' != ','
         (check_literal) check_literal: ret0
        (check_sub_expr) check_sub_expr: ret0
       (check_eitem) check_eitem:ret0
      (check_expression) check_expression:ret1 ' , 34) '

      (check_literal) check_literal:lit=' ,' idx=13 ' , 34) '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=14 ', 34) '
      (check_literal) check_literal:After while(): 34) 
      (check_literal) check_literal:ret1 

      (check_expression) check_expression: '34) '

       (check_eitem) check_eitem: '34) '

        (check_operator) check_operator: 34) 

         (check_literal) check_literal:lit=',' idx=16 '34) '
         (check_literal) check_literal:After drop space:',' idx=16 '34) '
         (check_literal)   ',' != '3'
         (check_literal) check_literal: ret0
        (check_operator) check_operator:ret0

        (check_function) check_function: '34) '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=16 '34) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=16 '34) '
         (check_literal)   '%' != '3'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=16 '34) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=16 '34) '
         (check_literal)   '"' != '3'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: '34) '
          (check_integer) check_integer:ret1
         (check_number) check_number: ret1
        (check_atom) check_atom:ret1
       (check_eitem) check_eitem:ret1

       (check_eitem) check_eitem: ') '

        (check_operator) check_operator: ) 

         (check_literal) check_literal:lit=',' idx=18 ') '
         (check_literal) check_literal:After drop space:',' idx=18 ') '
         (check_literal)   ',' != ')'
         (check_literal) check_literal: ret0
        (check_operator) check_operator:ret0

        (check_function) check_function: ') '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=18 ') '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=18 ') '
         (check_literal)   '%' != ')'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=18 ') '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=18 ') '
         (check_literal)   '"' != ')'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: ') '
          (check_integer) check_integer:ret0
         (check_number) check_number: ret0

         (check_variable) check_variable:

          (check_vname) check_vname ') ':
          (check_vname) check_vname ret0 ') ':
         (check_variable) check_variable:ret0 
        (check_atom) check_atom:ret1

        (check_sub_expr) check_sub_expr:

         (check_literal) check_literal:lit=' (' idx=18 ') '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'(' idx=18 ') '
         (check_literal)   '(' != ')'
         (check_literal) check_literal: ret0
        (check_sub_expr) check_sub_expr: ret0
       (check_eitem) check_eitem:ret0
      (check_expression) check_expression:ret1 ') '

      (check_literal) check_literal:lit=' )' idx=18 ') '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:')' idx=18 ') '
      (check_literal) check_literal:After while(): 
      (check_literal) check_literal:ret1 
     (check_variable) check_variable:ret1 

     (scan_variable) scan_variable:

      (scan_vname) scan_vname: ' STR$(12 , 34) '
      (scan_vname) scan_vname: ret1 'STR'
     (scan_variable) scan_variable: '$(12 , 34) ' vname='STR'
     (scan_variable) scan_variable: Ary test '(12 , 34) '

      (check_literal) check_literal:lit='(' idx=10 '(12 , 34) '
      (check_literal) check_literal:After drop space:'(' idx=10 '(12 , 34) '
      (check_literal) check_literal:After while():12 , 34) 
      (check_literal) check_literal:ret1 

      (scan_literal) scan_literal:lit='(' '(12 , 34) '
      (scan_literal) scan_literal:After drop space:(12 , 34) 
      (scan_literal) scan_literal:while loop:(12 , 34) 
   Frst:0 T:'(' exptype:s
(output_sub_start)
 Push:'('
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (1)

      (op_stack_print) 
000: ( type:16
      (op_stack_print) 
------------------

      (scan_literal) scan_literal:ret1
     (scan_variable) scan_variable: is array

      (scan_integer) scan_integer:
      (scan_integer) scan_integer:ret1
   Frst:0 T:'12' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(s )] i i 12
     (scan_integer) scan_integer:ret1  12

     (check_literal) check_literal:lit=' ,' idx=13 ' , 34) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=14 ', 34) '
     (check_literal) check_literal:After while(): 34) 
     (check_literal) check_literal:ret1 

     (scan_literal) scan_literal:lit=' ,' ' , 34) '
     (scan_literal) scan_literal:After drop space:, 34) 
     (scan_literal) scan_literal:while loop:, 34) 
   Frst:0 T:',' exptype:i
(output_sub_start)
     (scan_literal) scan_literal:ret1

     (scan_integer) scan_integer:
     (scan_integer) scan_integer:ret1
   Frst:0 T:'34' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(s )] i i 34
    (scan_integer) scan_integer:ret1  34

    (scan_literal) scan_literal:lit=' )' ') '
    (scan_literal) scan_literal:After drop space:) 
    (scan_literal) scan_literal:while loop:) 
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (0)

    (op_stack_print) 
------------------

(  output_sub_end)
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function: is not function
(  output_sub_end)
    (scan_literal) scan_literal:ret1
   (scan_variable) scan_variable:ret1 vname='STR$' is str:1 int:0 flt:0 ary:1
   Frst:0 T:'STR$' exptype:s
  (token_is_function) 
token_is_function:
  (token_is_function) 
token_is_function:STR$ is not function
token_is_variable: tok:'STR$'
  (token_is_function) 
token_is_function:
  (token_is_function) 
token_is_function:STR$ is not function
  (init_get_name) 
init_get_name:'STR$'
  (init_get_name) 
init_get_name:'STR$'
  (get_name) 
get_name:gn:'STR$'
process_token:type:s req_type:i
modify_expression_type:Inittype:s Intype:s Outtype:s
( output_variable) [s,()] s s STR$
  (scan_localglobal) scan_localglobal: LOCAL variable:'<~>þ'
  (print_var_info) 
VAR INFO: '              STR$' gbl:0 ref:0 int:0 flt:0 str:1 ary:1 max_str:34 max_ary:12 num_ind:2

   (check_literal) check_literal:lit=' ,' idx=19 ' '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=20 ''
   (check_literal) check_literal  ret0 Empty test string

   (check_variable) check_variable:

    (check_vname) check_vname '':
    (check_vname) check_vname ret0 '':
   (check_variable) check_variable:ret0 
  (scan_localglobal) scan_localglobal:ret1
 (scan_declare) scan_declare:ret 1
********************************
**GLOBAL A%,B,C$(5),D$(20,40) **
********************************


 (check_declare) check_declare:

  (check_literal) check_literal:lit=' LOCAL' idx=0 'GLOBAL A%,B,C$(5),D$(20,40) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'GLOBAL A%,B,C$(5),D$(20,40) '
  (check_literal)   'L' != 'G'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'GLOBAL A%,B,C$(5),D$(20,40) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'GLOBAL A%,B,C$(5),D$(20,40) '
  (check_literal) check_literal:After while(): A%,B,C$(5),D$(20,40) 
  (check_literal) check_literal:ret1 
 (check_declare) check_declare:ret 1

  (scan_declare) scan_declare:

   (check_literal) check_literal:lit=' LOCAL' idx=0 'GLOBAL A%,B,C$(5),D$(20,40) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'LOCAL' idx=0 'GLOBAL A%,B,C$(5),D$(20,40) '
   (check_literal)   'L' != 'G'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' GLOBAL' idx=0 'GLOBAL A%,B,C$(5),D$(20,40) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'GLOBAL A%,B,C$(5),D$(20,40) '
   (check_literal) check_literal:After while(): A%,B,C$(5),D$(20,40) 
   (check_literal) check_literal:ret1 

   (scan_localglobal) scan_localglobal:

    (scan_literal) scan_literal:lit=' GLOBAL' 'GLOBAL A%,B,C$(5),D$(20,40) '
    (scan_literal) scan_literal:After drop space:GLOBAL A%,B,C$(5),D$(20,40) 
    (scan_literal) scan_literal:while loop:GLOBAL A%,B,C$(5),D$(20,40) 
    (scan_literal) scan_literal:while loop:LOBAL A%,B,C$(5),D$(20,40) 
    (scan_literal) scan_literal:while loop:OBAL A%,B,C$(5),D$(20,40) 
    (scan_literal) scan_literal:while loop:BAL A%,B,C$(5),D$(20,40) 
    (scan_literal) scan_literal:while loop:AL A%,B,C$(5),D$(20,40) 
    (scan_literal) scan_literal:while loop:L A%,B,C$(5),D$(20,40) 
   Frst:0 T:'GLOBAL' exptype:s
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:GLOBAL is not function
token_is_variable: tok:'GLOBAL'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:GLOBAL is not function
    (init_get_name) 
init_get_name:'GLOBAL'
    (init_get_name) 
init_get_name:'GLOBAL'
    (get_name) 
get_name:gn:'GLOBAL'
process_token:type:s req_type:i
modify_expression_type:Inittype:s Intype:f Outtype:s
( output_variable) [s,()] s s GLOBAL
    (scan_literal) scan_literal:ret1

    (check_variable) check_variable:

     (check_vname) check_vname 'A%,B,C$(5),D$(20,40) ':
     (check_vname) check_vname ret1 '%,B,C$(5),D$(20,40) ':
    (check_variable) check_variable: '%,B,C$(5),D$(20,40) '
    (check_variable) check_variable: Ary test ',B,C$(5),D$(20,40) '

     (check_literal) check_literal:lit='(' idx=9 ',B,C$(5),D$(20,40) '
     (check_literal) check_literal:After drop space:'(' idx=9 ',B,C$(5),D$(20,40) '
     (check_literal)   '(' != ','
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 

   (scan_variable) scan_variable:

    (scan_vname) scan_vname: ' A%,B,C$(5),D$(20,40) '
    (scan_vname) scan_vname: ret1 'A'
   (scan_variable) scan_variable: '%,B,C$(5),D$(20,40) ' vname='A'
   (scan_variable) scan_variable: Ary test ',B,C$(5),D$(20,40) '

    (check_literal) check_literal:lit='(' idx=9 ',B,C$(5),D$(20,40) '
    (check_literal) check_literal:After drop space:'(' idx=9 ',B,C$(5),D$(20,40) '
    (check_literal)   '(' != ','
    (check_literal) check_literal: ret0
   (scan_variable) scan_variable:ret1 vname='A%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'A%' exptype:s
  (token_is_function) 
token_is_function:
  (token_is_function) 
token_is_function:A% is not function
token_is_variable: tok:'A%'
  (token_is_function) 
token_is_function:
  (token_is_function) 
token_is_function:A% is not function
  (init_get_name) 
init_get_name:'A%'
  (init_get_name) 
init_get_name:'A%'
  (get_name) 
get_name:gn:'A%'
process_token:type:s req_type:i
modify_expression_type:Inittype:s Intype:i Outtype:s
( output_variable) [s,()] s s A%
  (scan_localglobal) scan_localglobal: GLOBAL variable:'<~>þ'
  (print_var_info) 
VAR INFO: '                A%' gbl:1 ref:0 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0

   (check_literal) check_literal:lit=' ,' idx=9 ',B,C$(5),D$(20,40) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=9 ',B,C$(5),D$(20,40) '
   (check_literal) check_literal:After while():B,C$(5),D$(20,40) 
   (check_literal) check_literal:ret1 

   (scan_literal) scan_literal:lit=' ,' ',B,C$(5),D$(20,40) '
   (scan_literal) scan_literal:After drop space:,B,C$(5),D$(20,40) 
   (scan_literal) scan_literal:while loop:,B,C$(5),D$(20,40) 
   Frst:0 T:',' exptype:s
(output_sub_start)
   (scan_literal) scan_literal:ret1

   (check_variable) check_variable:

    (check_vname) check_vname 'B,C$(5),D$(20,40) ':
    (check_vname) check_vname ret1 ',C$(5),D$(20,40) ':
   (check_variable) check_variable: ',C$(5),D$(20,40) '
   (check_variable) check_variable: Ary test ',C$(5),D$(20,40) '

    (check_literal) check_literal:lit='(' idx=11 ',C$(5),D$(20,40) '
    (check_literal) check_literal:After drop space:'(' idx=11 ',C$(5),D$(20,40) '
    (check_literal)   '(' != ','
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'B,C$(5),D$(20,40) '
   (scan_vname) scan_vname: ret1 'B'
  (scan_variable) scan_variable: ',C$(5),D$(20,40) ' vname='B'
  (scan_variable) scan_variable: Ary test ',C$(5),D$(20,40) '

   (check_literal) check_literal:lit='(' idx=11 ',C$(5),D$(20,40) '
   (check_literal) check_literal:After drop space:'(' idx=11 ',C$(5),D$(20,40) '
   (check_literal)   '(' != ','
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='B' is str:0 int:0 flt:1 ary:0
   Frst:0 T:'B' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:B is not function
token_is_variable: tok:'B'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:B is not function
 (init_get_name) 
init_get_name:'B'
 (init_get_name) 
init_get_name:'B'
 (get_name) 
get_name:gn:'B'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:f Outtype:f
( output_variable) [f,()] f f B
 (scan_localglobal) scan_localglobal: GLOBAL variable:'<~>þ'
 (print_var_info) 
VAR INFO: '                 B' gbl:1 ref:0 int:0 flt:1 str:0 ary:0 max_str:0 max_ary:0 num_ind:0

  (check_literal) check_literal:lit=' ,' idx=11 ',C$(5),D$(20,40) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:',' idx=11 ',C$(5),D$(20,40) '
  (check_literal) check_literal:After while():C$(5),D$(20,40) 
  (check_literal) check_literal:ret1 

  (scan_literal) scan_literal:lit=' ,' ',C$(5),D$(20,40) '
  (scan_literal) scan_literal:After drop space:,C$(5),D$(20,40) 
  (scan_literal) scan_literal:while loop:,C$(5),D$(20,40) 
   Frst:0 T:',' exptype:f
(output_sub_start)
  (scan_literal) scan_literal:ret1

  (check_variable) check_variable:

   (check_vname) check_vname 'C$(5),D$(20,40) ':
   (check_vname) check_vname ret1 '$(5),D$(20,40) ':
  (check_variable) check_variable: '$(5),D$(20,40) '
  (check_variable) check_variable: Ary test '(5),D$(20,40) '

   (check_literal) check_literal:lit='(' idx=14 '(5),D$(20,40) '
   (check_literal) check_literal:After drop space:'(' idx=14 '(5),D$(20,40) '
   (check_literal) check_literal:After while():5),D$(20,40) 
   (check_literal) check_literal:ret1 
  (check_variable) check_variable: is array

   (check_expression) check_expression: '5),D$(20,40) '

    (check_eitem) check_eitem: '5),D$(20,40) '

     (check_operator) check_operator: 5),D$(20,40) 

      (check_literal) check_literal:lit=',' idx=15 '5),D$(20,40) '
      (check_literal) check_literal:After drop space:',' idx=15 '5),D$(20,40) '
      (check_literal)   ',' != '5'
      (check_literal) check_literal: ret0
     (check_operator) check_operator:ret0

     (check_function) check_function: '5),D$(20,40) '
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=15 '5),D$(20,40) '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=15 '5),D$(20,40) '
      (check_literal)   '%' != '5'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=15 '5),D$(20,40) '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=15 '5),D$(20,40) '
      (check_literal)   '"' != '5'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: '5),D$(20,40) '
       (check_integer) check_integer:ret1
      (check_number) check_number: ret1
     (check_atom) check_atom:ret1
    (check_eitem) check_eitem:ret1

    (check_eitem) check_eitem: '),D$(20,40) '

     (check_operator) check_operator: ),D$(20,40) 

      (check_literal) check_literal:lit=',' idx=16 '),D$(20,40) '
      (check_literal) check_literal:After drop space:',' idx=16 '),D$(20,40) '
      (check_literal)   ',' != ')'
      (check_literal) check_literal: ret0
     (check_operator) check_operator:ret0

     (check_function) check_function: '),D$(20,40) '
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=16 '),D$(20,40) '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=16 '),D$(20,40) '
      (check_literal)   '%' != ')'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=16 '),D$(20,40) '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=16 '),D$(20,40) '
      (check_literal)   '"' != ')'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: '),D$(20,40) '
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname '),D$(20,40) ':
       (check_vname) check_vname ret0 '),D$(20,40) ':
      (check_variable) check_variable:ret0 
     (check_atom) check_atom:ret1

     (check_sub_expr) check_sub_expr:

      (check_literal) check_literal:lit=' (' idx=16 '),D$(20,40) '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'(' idx=16 '),D$(20,40) '
      (check_literal)   '(' != ')'
      (check_literal) check_literal: ret0
     (check_sub_expr) check_sub_expr: ret0
    (check_eitem) check_eitem:ret0
   (check_expression) check_expression:ret1 '),D$(20,40) '

   (check_literal) check_literal:lit=' ,' idx=16 '),D$(20,40) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=16 '),D$(20,40) '
   (check_literal)   ',' != ')'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' )' idx=16 '),D$(20,40) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:')' idx=16 '),D$(20,40) '
   (check_literal) check_literal:After while():,D$(20,40) 
   (check_literal) check_literal:ret1 
  (check_variable) check_variable:ret1 

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'C$(5),D$(20,40) '
   (scan_vname) scan_vname: ret1 'C'
  (scan_variable) scan_variable: '$(5),D$(20,40) ' vname='C'
  (scan_variable) scan_variable: Ary test '(5),D$(20,40) '

   (check_literal) check_literal:lit='(' idx=14 '(5),D$(20,40) '
   (check_literal) check_literal:After drop space:'(' idx=14 '(5),D$(20,40) '
   (check_literal) check_literal:After while():5),D$(20,40) 
   (check_literal) check_literal:ret1 

   (scan_literal) scan_literal:lit='(' '(5),D$(20,40) '
   (scan_literal) scan_literal:After drop space:(5),D$(20,40) 
   (scan_literal) scan_literal:while loop:(5),D$(20,40) 
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
   (op_stack_print) 
------------------
   (op_stack_print) 
Operator Stack     (1)

   (op_stack_print) 
000: ( type:16
   (op_stack_print) 
------------------

   (scan_literal) scan_literal:ret1
  (scan_variable) scan_variable: is array

   (scan_integer) scan_integer:
   (scan_integer) scan_integer:ret1
   Frst:0 T:'5' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U )] i i 5
  (scan_integer) scan_integer:ret1  5

  (check_literal) check_literal:lit=' ,' idx=16 '),D$(20,40) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:',' idx=16 '),D$(20,40) '
  (check_literal)   ',' != ')'
  (check_literal) check_literal: ret0

  (scan_literal) scan_literal:lit=' )' '),D$(20,40) '
  (scan_literal) scan_literal:After drop space:),D$(20,40) 
  (scan_literal) scan_literal:while loop:),D$(20,40) 
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (0)

  (op_stack_print) 
------------------

(  output_sub_end)
  (token_is_function) 
token_is_function:
  (token_is_function) 
token_is_function: is not function
(  output_sub_end)
  (scan_literal) scan_literal:ret1
 (scan_variable) scan_variable:ret1 vname='C$' is str:1 int:0 flt:0 ary:0
   Frst:0 T:'C$' exptype:U
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C$ is not function
token_is_variable: tok:'C$'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:C$ is not function
(init_get_name) 
init_get_name:'C$'
(init_get_name) 
init_get_name:'C$'
(get_name) 
get_name:gn:'C$'
process_token:type:U req_type:?
modify_expression_type:Inittype:U Intype:s Outtype:s
( output_variable) [s,()] s s C$
(scan_localglobal) scan_localglobal: GLOBAL variable:'<~>þ'
(print_var_info) 
VAR INFO: '                C$' gbl:1 ref:0 int:0 flt:0 str:1 ary:0 max_str:5 max_ary:0 num_ind:1

 (check_literal) check_literal:lit=' ,' idx=17 ',D$(20,40) '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=17 ',D$(20,40) '
 (check_literal) check_literal:After while():D$(20,40) 
 (check_literal) check_literal:ret1 

 (scan_literal) scan_literal:lit=' ,' ',D$(20,40) '
 (scan_literal) scan_literal:After drop space:,D$(20,40) 
 (scan_literal) scan_literal:while loop:,D$(20,40) 
   Frst:0 T:',' exptype:s
(output_sub_start)
 (scan_literal) scan_literal:ret1

 (check_variable) check_variable:

  (check_vname) check_vname 'D$(20,40) ':
  (check_vname) check_vname ret1 '$(20,40) ':
 (check_variable) check_variable: '$(20,40) '
 (check_variable) check_variable: Ary test '(20,40) '

  (check_literal) check_literal:lit='(' idx=20 '(20,40) '
  (check_literal) check_literal:After drop space:'(' idx=20 '(20,40) '
  (check_literal) check_literal:After while():20,40) 
  (check_literal) check_literal:ret1 
 (check_variable) check_variable: is array

  (check_expression) check_expression: '20,40) '

   (check_eitem) check_eitem: '20,40) '

    (check_operator) check_operator: 20,40) 

     (check_literal) check_literal:lit=',' idx=21 '20,40) '
     (check_literal) check_literal:After drop space:',' idx=21 '20,40) '
     (check_literal)   ',' != '2'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: '20,40) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=21 '20,40) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=21 '20,40) '
     (check_literal)   '%' != '2'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=21 '20,40) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=21 '20,40) '
     (check_literal)   '"' != '2'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '20,40) '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: ',40) '

    (check_operator) check_operator: ,40) 

     (check_literal) check_literal:lit=',' idx=23 ',40) '
     (check_literal) check_literal:After drop space:',' idx=23 ',40) '
     (check_literal) check_literal:After while():40) 
     (check_literal) check_literal:ret1 

     (scan_literal) scan_literal:lit=',' 'D$(20,40) '
     (scan_literal) scan_literal:After drop space:D$(20,40) 
     (scan_literal) scan_literal:while loop:D$(20,40) 
     (scan_literal) scan_literal:ret1

     (check_function) check_function: ',40) '
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=23 ',40) '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=23 ',40) '
      (check_literal)   '%' != ','
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=23 ',40) '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=23 ',40) '
      (check_literal)   '"' != ','
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: ',40) '
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname ',40) ':
       (check_vname) check_vname ret0 ',40) ':
      (check_variable) check_variable:ret0 
     (check_atom) check_atom:ret1

     (check_sub_expr) check_sub_expr:

      (check_literal) check_literal:lit=' (' idx=23 ',40) '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'(' idx=23 ',40) '
      (check_literal)   '(' != ','
      (check_literal) check_literal: ret0
     (check_sub_expr) check_sub_expr: ret0
    (check_eitem) check_eitem:ret0
   (check_expression) check_expression:ret1 ',40) '

   (check_literal) check_literal:lit=' ,' idx=23 ',40) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=23 ',40) '
   (check_literal) check_literal:After while():40) 
   (check_literal) check_literal:ret1 

   (check_expression) check_expression: '40) '

    (check_eitem) check_eitem: '40) '

     (check_operator) check_operator: 40) 

      (check_literal) check_literal:lit=',' idx=24 '40) '
      (check_literal) check_literal:After drop space:',' idx=24 '40) '
      (check_literal)   ',' != '4'
      (check_literal) check_literal: ret0
     (check_operator) check_operator:ret0

     (check_function) check_function: '40) '
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=24 '40) '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=24 '40) '
      (check_literal)   '%' != '4'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=24 '40) '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=24 '40) '
      (check_literal)   '"' != '4'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: '40) '
       (check_integer) check_integer:ret1
      (check_number) check_number: ret1
     (check_atom) check_atom:ret1
    (check_eitem) check_eitem:ret1

    (check_eitem) check_eitem: ') '

     (check_operator) check_operator: ) 

      (check_literal) check_literal:lit=',' idx=26 ') '
      (check_literal) check_literal:After drop space:',' idx=26 ') '
      (check_literal)   ',' != ')'
      (check_literal) check_literal: ret0
     (check_operator) check_operator:ret0

     (check_function) check_function: ') '
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=26 ') '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=26 ') '
      (check_literal)   '%' != ')'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=26 ') '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=26 ') '
      (check_literal)   '"' != ')'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: ') '
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname ') ':
       (check_vname) check_vname ret0 ') ':
      (check_variable) check_variable:ret0 
     (check_atom) check_atom:ret1

     (check_sub_expr) check_sub_expr:

      (check_literal) check_literal:lit=' (' idx=26 ') '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'(' idx=26 ') '
      (check_literal)   '(' != ')'
      (check_literal) check_literal: ret0
     (check_sub_expr) check_sub_expr: ret0
    (check_eitem) check_eitem:ret0
   (check_expression) check_expression:ret1 ') '

   (check_literal) check_literal:lit=' )' idx=26 ') '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:')' idx=26 ') '
   (check_literal) check_literal:After while(): 
   (check_literal) check_literal:ret1 
  (check_variable) check_variable:ret1 

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'D$(20,40) '
   (scan_vname) scan_vname: ret1 'D'
  (scan_variable) scan_variable: '$(20,40) ' vname='D'
  (scan_variable) scan_variable: Ary test '(20,40) '

   (check_literal) check_literal:lit='(' idx=20 '(20,40) '
   (check_literal) check_literal:After drop space:'(' idx=20 '(20,40) '
   (check_literal) check_literal:After while():20,40) 
   (check_literal) check_literal:ret1 

   (scan_literal) scan_literal:lit='(' '(20,40) '
   (scan_literal) scan_literal:After drop space:(20,40) 
   (scan_literal) scan_literal:while loop:(20,40) 
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
   (op_stack_print) 
------------------
   (op_stack_print) 
Operator Stack     (1)

   (op_stack_print) 
000: ( type:16
   (op_stack_print) 
------------------

   (scan_literal) scan_literal:ret1
  (scan_variable) scan_variable: is array

   (scan_integer) scan_integer:
   (scan_integer) scan_integer:ret1
   Frst:0 T:'20' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U )] i i 20
  (scan_integer) scan_integer:ret1  20

  (check_literal) check_literal:lit=' ,' idx=23 ',40) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:',' idx=23 ',40) '
  (check_literal) check_literal:After while():40) 
  (check_literal) check_literal:ret1 

  (scan_literal) scan_literal:lit=' ,' ',40) '
  (scan_literal) scan_literal:After drop space:,40) 
  (scan_literal) scan_literal:while loop:,40) 
   Frst:0 T:',' exptype:i
(output_sub_start)
  (scan_literal) scan_literal:ret1

  (scan_integer) scan_integer:
  (scan_integer) scan_integer:ret1
   Frst:0 T:'40' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U )] i i 40
 (scan_integer) scan_integer:ret1  40

 (scan_literal) scan_literal:lit=' )' ') '
 (scan_literal) scan_literal:After drop space:) 
 (scan_literal) scan_literal:while loop:) 
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (0)

 (op_stack_print) 
------------------

(  output_sub_end)
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function: is not function
(  output_sub_end)
 (scan_literal) scan_literal:ret1
(scan_variable) scan_variable:ret1 vname='D$' is str:1 int:0 flt:0 ary:1
   Frst:0 T:'D$' exptype:U
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:D$ is not function
token_is_variable: tok:'D$'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:D$ is not function
(init_get_name) 
init_get_name:'D$'
(init_get_name) 
init_get_name:'D$'
(get_name) 
get_name:gn:'D$'
process_token:type:U req_type:?
modify_expression_type:Inittype:U Intype:s Outtype:s
( output_variable) [s,()] s s D$
(scan_localglobal) scan_localglobal: GLOBAL variable:'<~>þ'
(print_var_info) 
VAR INFO: '                D$' gbl:1 ref:0 int:0 flt:0 str:1 ary:1 max_str:40 max_ary:20 num_ind:2

 (check_literal) check_literal:lit=' ,' idx=27 ' '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=28 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_variable) check_variable:

  (check_vname) check_vname '':
  (check_vname) check_vname ret0 '':
 (check_variable) check_variable:ret0 
(scan_localglobal) scan_localglobal:ret1
(scan_declare) scan_declare:ret 1
******************************
**PRINT A(2+3*7)+B(1+2+3+4) **
******************************


 (check_declare) check_declare:

  (check_literal) check_literal:lit=' LOCAL' idx=0 'PRINT A(2+3*7)+B(1+2+3+4) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'PRINT A(2+3*7)+B(1+2+3+4) '
  (check_literal)   'L' != 'P'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'PRINT A(2+3*7)+B(1+2+3+4) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'PRINT A(2+3*7)+B(1+2+3+4) '
  (check_literal)   'G' != 'P'
  (check_literal) check_literal: ret0
 (check_declare) check_declare:ret 0

 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'PRINT A(2+3*7)+B(1+2+3+4) ':
     (check_vname) check_vname ret1 ' A(2+3*7)+B(1+2+3+4) ':
    (check_variable) check_variable: ' A(2+3*7)+B(1+2+3+4) '
    (check_variable) check_variable: Ary test ' A(2+3*7)+B(1+2+3+4) '

     (check_literal) check_literal:lit='(' idx=5 ' A(2+3*7)+B(1+2+3+4) '
     (check_literal) check_literal:After drop space:'(' idx=5 ' A(2+3*7)+B(1+2+3+4) '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=5 ' A(2+3*7)+B(1+2+3+4) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=6 'A(2+3*7)+B(1+2+3+4) '
   (check_literal)   '=' != 'A'
   (check_literal) check_literal: ret0
  (check_assignment) check_assignment:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) check_textlabel: 'PRINT A(2+3*7)+B(1+2+3+4) '
   (check_textlabel) check_textlabel:ret0
  (check_proc_call) check_proc_call:ret0

  (check_command) check_command:
  (check_command) check_command: ret1 found=> 'PRINT'
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=21, ' A(2+3*7)+B(1+2+3+4) '
========================================================
PRINT A(2+3*7)+B(1+2+3+4) 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'PRINT A(2+3*7)+B(1+2+3+4) ':
    (check_vname) check_vname ret1 ' A(2+3*7)+B(1+2+3+4) ':
   (check_variable) check_variable: ' A(2+3*7)+B(1+2+3+4) '
   (check_variable) check_variable: Ary test ' A(2+3*7)+B(1+2+3+4) '

    (check_literal) check_literal:lit='(' idx=5 ' A(2+3*7)+B(1+2+3+4) '
    (check_literal) check_literal:After drop space:'(' idx=5 ' A(2+3*7)+B(1+2+3+4) '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=5 ' A(2+3*7)+B(1+2+3+4) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=6 'A(2+3*7)+B(1+2+3+4) '
  (check_literal)   '=' != 'A'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'PRINT A(2+3*7)+B(1+2+3+4) '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'PRINT'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'PRINT' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) PRINT is function
 (function_return_type) 
function_return_type: 'PRINT' =>v
 (function_return_type) 
function_return_type: 'PRINT' =>17
process_token: 'PRINT' t=>v
 Push:'PRINT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' A(2+3*7)+B(1+2+3+4) '

   (check_eitem) check_eitem: 'A(2+3*7)+B(1+2+3+4) '

    (check_operator) check_operator: A(2+3*7)+B(1+2+3+4) 

     (check_literal) check_literal:lit=',' idx=6 'A(2+3*7)+B(1+2+3+4) '
     (check_literal) check_literal:After drop space:',' idx=6 'A(2+3*7)+B(1+2+3+4) '
     (check_literal)   ',' != 'A'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: 'A(2+3*7)+B(1+2+3+4) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=6 'A(2+3*7)+B(1+2+3+4) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=6 'A(2+3*7)+B(1+2+3+4) '
     (check_literal)   '%' != 'A'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=6 'A(2+3*7)+B(1+2+3+4) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=6 'A(2+3*7)+B(1+2+3+4) '
     (check_literal)   '"' != 'A'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'A(2+3*7)+B(1+2+3+4) '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'A(2+3*7)+B(1+2+3+4) ':
      (check_vname) check_vname ret1 '(2+3*7)+B(1+2+3+4) ':
     (check_variable) check_variable: '(2+3*7)+B(1+2+3+4) '
     (check_variable) check_variable: Ary test '(2+3*7)+B(1+2+3+4) '

      (check_literal) check_literal:lit='(' idx=7 '(2+3*7)+B(1+2+3+4) '
      (check_literal) check_literal:After drop space:'(' idx=7 '(2+3*7)+B(1+2+3+4) '
      (check_literal) check_literal:After while():2+3*7)+B(1+2+3+4) 
      (check_literal) check_literal:ret1 
     (check_variable) check_variable: is array

      (check_expression) check_expression: '2+3*7)+B(1+2+3+4) '

       (check_eitem) check_eitem: '2+3*7)+B(1+2+3+4) '

        (check_operator) check_operator: 2+3*7)+B(1+2+3+4) 

         (check_literal) check_literal:lit=',' idx=8 '2+3*7)+B(1+2+3+4) '
         (check_literal) check_literal:After drop space:',' idx=8 '2+3*7)+B(1+2+3+4) '
         (check_literal)   ',' != '2'
         (check_literal) check_literal: ret0
        (check_operator) check_operator:ret0

        (check_function) check_function: '2+3*7)+B(1+2+3+4) '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=8 '2+3*7)+B(1+2+3+4) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=8 '2+3*7)+B(1+2+3+4) '
         (check_literal)   '%' != '2'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=8 '2+3*7)+B(1+2+3+4) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=8 '2+3*7)+B(1+2+3+4) '
         (check_literal)   '"' != '2'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: '2+3*7)+B(1+2+3+4) '
          (check_integer) check_integer:ret1
         (check_number) check_number: ret1
        (check_atom) check_atom:ret1
       (check_eitem) check_eitem:ret1

       (check_eitem) check_eitem: '+3*7)+B(1+2+3+4) '

        (check_operator) check_operator: +3*7)+B(1+2+3+4) 

         (check_literal) check_literal:lit=',' idx=9 '+3*7)+B(1+2+3+4) '
         (check_literal) check_literal:After drop space:',' idx=9 '+3*7)+B(1+2+3+4) '
         (check_literal)   ',' != '+'
         (check_literal) check_literal: ret0
        (check_operator) check_operator: ret1
       (check_eitem) check_eitem:ret1

       (check_eitem) check_eitem: '3*7)+B(1+2+3+4) '

        (check_operator) check_operator: 3*7)+B(1+2+3+4) 

         (check_literal) check_literal:lit=',' idx=10 '3*7)+B(1+2+3+4) '
         (check_literal) check_literal:After drop space:',' idx=10 '3*7)+B(1+2+3+4) '
         (check_literal)   ',' != '3'
         (check_literal) check_literal: ret0
        (check_operator) check_operator:ret0

        (check_function) check_function: '3*7)+B(1+2+3+4) '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=10 '3*7)+B(1+2+3+4) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=10 '3*7)+B(1+2+3+4) '
         (check_literal)   '%' != '3'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=10 '3*7)+B(1+2+3+4) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=10 '3*7)+B(1+2+3+4) '
         (check_literal)   '"' != '3'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: '3*7)+B(1+2+3+4) '
          (check_integer) check_integer:ret1
         (check_number) check_number: ret1
        (check_atom) check_atom:ret1
       (check_eitem) check_eitem:ret1

       (check_eitem) check_eitem: '*7)+B(1+2+3+4) '

        (check_operator) check_operator: *7)+B(1+2+3+4) 

         (check_literal) check_literal:lit=',' idx=11 '*7)+B(1+2+3+4) '
         (check_literal) check_literal:After drop space:',' idx=11 '*7)+B(1+2+3+4) '
         (check_literal)   ',' != '*'
         (check_literal) check_literal: ret0
        (check_operator) check_operator: ret1
       (check_eitem) check_eitem:ret1

       (check_eitem) check_eitem: '7)+B(1+2+3+4) '

        (check_operator) check_operator: 7)+B(1+2+3+4) 

         (check_literal) check_literal:lit=',' idx=12 '7)+B(1+2+3+4) '
         (check_literal) check_literal:After drop space:',' idx=12 '7)+B(1+2+3+4) '
         (check_literal)   ',' != '7'
         (check_literal) check_literal: ret0
        (check_operator) check_operator:ret0

        (check_function) check_function: '7)+B(1+2+3+4) '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=12 '7)+B(1+2+3+4) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=12 '7)+B(1+2+3+4) '
         (check_literal)   '%' != '7'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=12 '7)+B(1+2+3+4) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=12 '7)+B(1+2+3+4) '
         (check_literal)   '"' != '7'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: '7)+B(1+2+3+4) '
          (check_integer) check_integer:ret1
         (check_number) check_number: ret1
        (check_atom) check_atom:ret1
       (check_eitem) check_eitem:ret1

       (check_eitem) check_eitem: ')+B(1+2+3+4) '

        (check_operator) check_operator: )+B(1+2+3+4) 

         (check_literal) check_literal:lit=',' idx=13 ')+B(1+2+3+4) '
         (check_literal) check_literal:After drop space:',' idx=13 ')+B(1+2+3+4) '
         (check_literal)   ',' != ')'
         (check_literal) check_literal: ret0
        (check_operator) check_operator:ret0

        (check_function) check_function: ')+B(1+2+3+4) '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=13 ')+B(1+2+3+4) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=13 ')+B(1+2+3+4) '
         (check_literal)   '%' != ')'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=13 ')+B(1+2+3+4) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=13 ')+B(1+2+3+4) '
         (check_literal)   '"' != ')'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: ')+B(1+2+3+4) '
          (check_integer) check_integer:ret0
         (check_number) check_number: ret0

         (check_variable) check_variable:

          (check_vname) check_vname ')+B(1+2+3+4) ':
          (check_vname) check_vname ret0 ')+B(1+2+3+4) ':
         (check_variable) check_variable:ret0 
        (check_atom) check_atom:ret1

        (check_sub_expr) check_sub_expr:

         (check_literal) check_literal:lit=' (' idx=13 ')+B(1+2+3+4) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'(' idx=13 ')+B(1+2+3+4) '
         (check_literal)   '(' != ')'
         (check_literal) check_literal: ret0
        (check_sub_expr) check_sub_expr: ret0
       (check_eitem) check_eitem:ret0
      (check_expression) check_expression:ret1 ')+B(1+2+3+4) '

      (check_literal) check_literal:lit=' ,' idx=13 ')+B(1+2+3+4) '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=13 ')+B(1+2+3+4) '
      (check_literal)   ',' != ')'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' )' idx=13 ')+B(1+2+3+4) '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:')' idx=13 ')+B(1+2+3+4) '
      (check_literal) check_literal:After while():+B(1+2+3+4) 
      (check_literal) check_literal:ret1 
     (check_variable) check_variable:ret1 
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (scan_eitem) scan_eitem:

    (check_operator) check_operator: A(2+3*7)+B(1+2+3+4) 

     (check_literal) check_literal:lit=',' idx=6 'A(2+3*7)+B(1+2+3+4) '
     (check_literal) check_literal:After drop space:',' idx=6 'A(2+3*7)+B(1+2+3+4) '
     (check_literal)   ',' != 'A'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: 'A(2+3*7)+B(1+2+3+4) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=6 'A(2+3*7)+B(1+2+3+4) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=6 'A(2+3*7)+B(1+2+3+4) '
     (check_literal)   '%' != 'A'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=6 'A(2+3*7)+B(1+2+3+4) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=6 'A(2+3*7)+B(1+2+3+4) '
     (check_literal)   '"' != 'A'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'A(2+3*7)+B(1+2+3+4) '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'A(2+3*7)+B(1+2+3+4) ':
      (check_vname) check_vname ret1 '(2+3*7)+B(1+2+3+4) ':
     (check_variable) check_variable: '(2+3*7)+B(1+2+3+4) '
     (check_variable) check_variable: Ary test '(2+3*7)+B(1+2+3+4) '

      (check_literal) check_literal:lit='(' idx=7 '(2+3*7)+B(1+2+3+4) '
      (check_literal) check_literal:After drop space:'(' idx=7 '(2+3*7)+B(1+2+3+4) '
      (check_literal) check_literal:After while():2+3*7)+B(1+2+3+4) 
      (check_literal) check_literal:ret1 
     (check_variable) check_variable: is array

      (check_expression) check_expression: '2+3*7)+B(1+2+3+4) '

       (check_eitem) check_eitem: '2+3*7)+B(1+2+3+4) '

        (check_operator) check_operator: 2+3*7)+B(1+2+3+4) 

         (check_literal) check_literal:lit=',' idx=8 '2+3*7)+B(1+2+3+4) '
         (check_literal) check_literal:After drop space:',' idx=8 '2+3*7)+B(1+2+3+4) '
         (check_literal)   ',' != '2'
         (check_literal) check_literal: ret0
        (check_operator) check_operator:ret0

        (check_function) check_function: '2+3*7)+B(1+2+3+4) '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=8 '2+3*7)+B(1+2+3+4) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=8 '2+3*7)+B(1+2+3+4) '
         (check_literal)   '%' != '2'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=8 '2+3*7)+B(1+2+3+4) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=8 '2+3*7)+B(1+2+3+4) '
         (check_literal)   '"' != '2'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: '2+3*7)+B(1+2+3+4) '
          (check_integer) check_integer:ret1
         (check_number) check_number: ret1
        (check_atom) check_atom:ret1
       (check_eitem) check_eitem:ret1

       (check_eitem) check_eitem: '+3*7)+B(1+2+3+4) '

        (check_operator) check_operator: +3*7)+B(1+2+3+4) 

         (check_literal) check_literal:lit=',' idx=9 '+3*7)+B(1+2+3+4) '
         (check_literal) check_literal:After drop space:',' idx=9 '+3*7)+B(1+2+3+4) '
         (check_literal)   ',' != '+'
         (check_literal) check_literal: ret0
        (check_operator) check_operator: ret1
       (check_eitem) check_eitem:ret1

       (check_eitem) check_eitem: '3*7)+B(1+2+3+4) '

        (check_operator) check_operator: 3*7)+B(1+2+3+4) 

         (check_literal) check_literal:lit=',' idx=10 '3*7)+B(1+2+3+4) '
         (check_literal) check_literal:After drop space:',' idx=10 '3*7)+B(1+2+3+4) '
         (check_literal)   ',' != '3'
         (check_literal) check_literal: ret0
        (check_operator) check_operator:ret0

        (check_function) check_function: '3*7)+B(1+2+3+4) '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=10 '3*7)+B(1+2+3+4) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=10 '3*7)+B(1+2+3+4) '
         (check_literal)   '%' != '3'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=10 '3*7)+B(1+2+3+4) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=10 '3*7)+B(1+2+3+4) '
         (check_literal)   '"' != '3'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: '3*7)+B(1+2+3+4) '
          (check_integer) check_integer:ret1
         (check_number) check_number: ret1
        (check_atom) check_atom:ret1
       (check_eitem) check_eitem:ret1

       (check_eitem) check_eitem: '*7)+B(1+2+3+4) '

        (check_operator) check_operator: *7)+B(1+2+3+4) 

         (check_literal) check_literal:lit=',' idx=11 '*7)+B(1+2+3+4) '
         (check_literal) check_literal:After drop space:',' idx=11 '*7)+B(1+2+3+4) '
         (check_literal)   ',' != '*'
         (check_literal) check_literal: ret0
        (check_operator) check_operator: ret1
       (check_eitem) check_eitem:ret1

       (check_eitem) check_eitem: '7)+B(1+2+3+4) '

        (check_operator) check_operator: 7)+B(1+2+3+4) 

         (check_literal) check_literal:lit=',' idx=12 '7)+B(1+2+3+4) '
         (check_literal) check_literal:After drop space:',' idx=12 '7)+B(1+2+3+4) '
         (check_literal)   ',' != '7'
         (check_literal) check_literal: ret0
        (check_operator) check_operator:ret0

        (check_function) check_function: '7)+B(1+2+3+4) '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=12 '7)+B(1+2+3+4) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=12 '7)+B(1+2+3+4) '
         (check_literal)   '%' != '7'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=12 '7)+B(1+2+3+4) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=12 '7)+B(1+2+3+4) '
         (check_literal)   '"' != '7'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: '7)+B(1+2+3+4) '
          (check_integer) check_integer:ret1
         (check_number) check_number: ret1
        (check_atom) check_atom:ret1
       (check_eitem) check_eitem:ret1

       (check_eitem) check_eitem: ')+B(1+2+3+4) '

        (check_operator) check_operator: )+B(1+2+3+4) 

         (check_literal) check_literal:lit=',' idx=13 ')+B(1+2+3+4) '
         (check_literal) check_literal:After drop space:',' idx=13 ')+B(1+2+3+4) '
         (check_literal)   ',' != ')'
         (check_literal) check_literal: ret0
        (check_operator) check_operator:ret0

        (check_function) check_function: ')+B(1+2+3+4) '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=13 ')+B(1+2+3+4) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=13 ')+B(1+2+3+4) '
         (check_literal)   '%' != ')'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=13 ')+B(1+2+3+4) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=13 ')+B(1+2+3+4) '
         (check_literal)   '"' != ')'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: ')+B(1+2+3+4) '
          (check_integer) check_integer:ret0
         (check_number) check_number: ret0

         (check_variable) check_variable:

          (check_vname) check_vname ')+B(1+2+3+4) ':
          (check_vname) check_vname ret0 ')+B(1+2+3+4) ':
         (check_variable) check_variable:ret0 
        (check_atom) check_atom:ret1

        (check_sub_expr) check_sub_expr:

         (check_literal) check_literal:lit=' (' idx=13 ')+B(1+2+3+4) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'(' idx=13 ')+B(1+2+3+4) '
         (check_literal)   '(' != ')'
         (check_literal) check_literal: ret0
        (check_sub_expr) check_sub_expr: ret0
       (check_eitem) check_eitem:ret0
      (check_expression) check_expression:ret1 ')+B(1+2+3+4) '

      (check_literal) check_literal:lit=' ,' idx=13 ')+B(1+2+3+4) '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=13 ')+B(1+2+3+4) '
      (check_literal)   ',' != ')'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' )' idx=13 ')+B(1+2+3+4) '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:')' idx=13 ')+B(1+2+3+4) '
      (check_literal) check_literal:After while():+B(1+2+3+4) 
      (check_literal) check_literal:ret1 
     (check_variable) check_variable:ret1 
    (check_atom) check_atom:ret1

    (scan_atom) scan_atom:

     (check_literal) check_literal:lit=' %' idx=6 'A(2+3*7)+B(1+2+3+4) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=6 'A(2+3*7)+B(1+2+3+4) '
     (check_literal)   '%' != 'A'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=6 'A(2+3*7)+B(1+2+3+4) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=6 'A(2+3*7)+B(1+2+3+4) '
     (check_literal)   '"' != 'A'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'A(2+3*7)+B(1+2+3+4) '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'A(2+3*7)+B(1+2+3+4) ':
      (check_vname) check_vname ret1 '(2+3*7)+B(1+2+3+4) ':
     (check_variable) check_variable: '(2+3*7)+B(1+2+3+4) '
     (check_variable) check_variable: Ary test '(2+3*7)+B(1+2+3+4) '

      (check_literal) check_literal:lit='(' idx=7 '(2+3*7)+B(1+2+3+4) '
      (check_literal) check_literal:After drop space:'(' idx=7 '(2+3*7)+B(1+2+3+4) '
      (check_literal) check_literal:After while():2+3*7)+B(1+2+3+4) 
      (check_literal) check_literal:ret1 
     (check_variable) check_variable: is array

      (check_expression) check_expression: '2+3*7)+B(1+2+3+4) '

       (check_eitem) check_eitem: '2+3*7)+B(1+2+3+4) '

        (check_operator) check_operator: 2+3*7)+B(1+2+3+4) 

         (check_literal) check_literal:lit=',' idx=8 '2+3*7)+B(1+2+3+4) '
         (check_literal) check_literal:After drop space:',' idx=8 '2+3*7)+B(1+2+3+4) '
         (check_literal)   ',' != '2'
         (check_literal) check_literal: ret0
        (check_operator) check_operator:ret0

        (check_function) check_function: '2+3*7)+B(1+2+3+4) '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=8 '2+3*7)+B(1+2+3+4) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=8 '2+3*7)+B(1+2+3+4) '
         (check_literal)   '%' != '2'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=8 '2+3*7)+B(1+2+3+4) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=8 '2+3*7)+B(1+2+3+4) '
         (check_literal)   '"' != '2'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: '2+3*7)+B(1+2+3+4) '
          (check_integer) check_integer:ret1
         (check_number) check_number: ret1
        (check_atom) check_atom:ret1
       (check_eitem) check_eitem:ret1

       (check_eitem) check_eitem: '+3*7)+B(1+2+3+4) '

        (check_operator) check_operator: +3*7)+B(1+2+3+4) 

         (check_literal) check_literal:lit=',' idx=9 '+3*7)+B(1+2+3+4) '
         (check_literal) check_literal:After drop space:',' idx=9 '+3*7)+B(1+2+3+4) '
         (check_literal)   ',' != '+'
         (check_literal) check_literal: ret0
        (check_operator) check_operator: ret1
       (check_eitem) check_eitem:ret1

       (check_eitem) check_eitem: '3*7)+B(1+2+3+4) '

        (check_operator) check_operator: 3*7)+B(1+2+3+4) 

         (check_literal) check_literal:lit=',' idx=10 '3*7)+B(1+2+3+4) '
         (check_literal) check_literal:After drop space:',' idx=10 '3*7)+B(1+2+3+4) '
         (check_literal)   ',' != '3'
         (check_literal) check_literal: ret0
        (check_operator) check_operator:ret0

        (check_function) check_function: '3*7)+B(1+2+3+4) '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=10 '3*7)+B(1+2+3+4) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=10 '3*7)+B(1+2+3+4) '
         (check_literal)   '%' != '3'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=10 '3*7)+B(1+2+3+4) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=10 '3*7)+B(1+2+3+4) '
         (check_literal)   '"' != '3'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: '3*7)+B(1+2+3+4) '
          (check_integer) check_integer:ret1
         (check_number) check_number: ret1
        (check_atom) check_atom:ret1
       (check_eitem) check_eitem:ret1

       (check_eitem) check_eitem: '*7)+B(1+2+3+4) '

        (check_operator) check_operator: *7)+B(1+2+3+4) 

         (check_literal) check_literal:lit=',' idx=11 '*7)+B(1+2+3+4) '
         (check_literal) check_literal:After drop space:',' idx=11 '*7)+B(1+2+3+4) '
         (check_literal)   ',' != '*'
         (check_literal) check_literal: ret0
        (check_operator) check_operator: ret1
       (check_eitem) check_eitem:ret1

       (check_eitem) check_eitem: '7)+B(1+2+3+4) '

        (check_operator) check_operator: 7)+B(1+2+3+4) 

         (check_literal) check_literal:lit=',' idx=12 '7)+B(1+2+3+4) '
         (check_literal) check_literal:After drop space:',' idx=12 '7)+B(1+2+3+4) '
         (check_literal)   ',' != '7'
         (check_literal) check_literal: ret0
        (check_operator) check_operator:ret0

        (check_function) check_function: '7)+B(1+2+3+4) '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=12 '7)+B(1+2+3+4) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=12 '7)+B(1+2+3+4) '
         (check_literal)   '%' != '7'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=12 '7)+B(1+2+3+4) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=12 '7)+B(1+2+3+4) '
         (check_literal)   '"' != '7'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: '7)+B(1+2+3+4) '
          (check_integer) check_integer:ret1
         (check_number) check_number: ret1
        (check_atom) check_atom:ret1
       (check_eitem) check_eitem:ret1

       (check_eitem) check_eitem: ')+B(1+2+3+4) '

        (check_operator) check_operator: )+B(1+2+3+4) 

         (check_literal) check_literal:lit=',' idx=13 ')+B(1+2+3+4) '
         (check_literal) check_literal:After drop space:',' idx=13 ')+B(1+2+3+4) '
         (check_literal)   ',' != ')'
         (check_literal) check_literal: ret0
        (check_operator) check_operator:ret0

        (check_function) check_function: ')+B(1+2+3+4) '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=13 ')+B(1+2+3+4) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=13 ')+B(1+2+3+4) '
         (check_literal)   '%' != ')'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=13 ')+B(1+2+3+4) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=13 ')+B(1+2+3+4) '
         (check_literal)   '"' != ')'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: ')+B(1+2+3+4) '
          (check_integer) check_integer:ret0
         (check_number) check_number: ret0

         (check_variable) check_variable:

          (check_vname) check_vname ')+B(1+2+3+4) ':
          (check_vname) check_vname ret0 ')+B(1+2+3+4) ':
         (check_variable) check_variable:ret0 
        (check_atom) check_atom:ret1

        (check_sub_expr) check_sub_expr:

         (check_literal) check_literal:lit=' (' idx=13 ')+B(1+2+3+4) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'(' idx=13 ')+B(1+2+3+4) '
         (check_literal)   '(' != ')'
         (check_literal) check_literal: ret0
        (check_sub_expr) check_sub_expr: ret0
       (check_eitem) check_eitem:ret0
      (check_expression) check_expression:ret1 ')+B(1+2+3+4) '

      (check_literal) check_literal:lit=' ,' idx=13 ')+B(1+2+3+4) '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=13 ')+B(1+2+3+4) '
      (check_literal)   ',' != ')'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' )' idx=13 ')+B(1+2+3+4) '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:')' idx=13 ')+B(1+2+3+4) '
      (check_literal) check_literal:After while():+B(1+2+3+4) 
      (check_literal) check_literal:ret1 
     (check_variable) check_variable:ret1 

     (scan_variable) scan_variable:

      (scan_vname) scan_vname: 'A(2+3*7)+B(1+2+3+4) '
      (scan_vname) scan_vname: ret1 'A'
     (scan_variable) scan_variable: '(2+3*7)+B(1+2+3+4) ' vname='A'
     (scan_variable) scan_variable: Ary test '(2+3*7)+B(1+2+3+4) '

      (check_literal) check_literal:lit='(' idx=7 '(2+3*7)+B(1+2+3+4) '
      (check_literal) check_literal:After drop space:'(' idx=7 '(2+3*7)+B(1+2+3+4) '
      (check_literal) check_literal:After while():2+3*7)+B(1+2+3+4) 
      (check_literal) check_literal:ret1 

      (scan_literal) scan_literal:lit='(' '(2+3*7)+B(1+2+3+4) '
      (scan_literal) scan_literal:After drop space:(2+3*7)+B(1+2+3+4) 
      (scan_literal) scan_literal:while loop:(2+3*7)+B(1+2+3+4) 
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (3)

      (op_stack_print) 
000: PRINT type:17
      (op_stack_print) 
001: ( type:16
      (op_stack_print) 
002: ( type:16
      (op_stack_print) 
------------------

      (scan_literal) scan_literal:ret1
     (scan_variable) scan_variable: is array

      (scan_expression) scan_expression: '2+3*7)+B(1+2+3+4) '

       (check_eitem) check_eitem: '2+3*7)+B(1+2+3+4) '

        (check_operator) check_operator: 2+3*7)+B(1+2+3+4) 

         (check_literal) check_literal:lit=',' idx=8 '2+3*7)+B(1+2+3+4) '
         (check_literal) check_literal:After drop space:',' idx=8 '2+3*7)+B(1+2+3+4) '
         (check_literal)   ',' != '2'
         (check_literal) check_literal: ret0
        (check_operator) check_operator:ret0

        (check_function) check_function: '2+3*7)+B(1+2+3+4) '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=8 '2+3*7)+B(1+2+3+4) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=8 '2+3*7)+B(1+2+3+4) '
         (check_literal)   '%' != '2'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=8 '2+3*7)+B(1+2+3+4) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=8 '2+3*7)+B(1+2+3+4) '
         (check_literal)   '"' != '2'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: '2+3*7)+B(1+2+3+4) '
          (check_integer) check_integer:ret1
         (check_number) check_number: ret1
        (check_atom) check_atom:ret1
       (check_eitem) check_eitem:ret1

       (scan_eitem) scan_eitem:

        (check_operator) check_operator: 2+3*7)+B(1+2+3+4) 

         (check_literal) check_literal:lit=',' idx=8 '2+3*7)+B(1+2+3+4) '
         (check_literal) check_literal:After drop space:',' idx=8 '2+3*7)+B(1+2+3+4) '
         (check_literal)   ',' != '2'
         (check_literal) check_literal: ret0
        (check_operator) check_operator:ret0

        (check_function) check_function: '2+3*7)+B(1+2+3+4) '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=8 '2+3*7)+B(1+2+3+4) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=8 '2+3*7)+B(1+2+3+4) '
         (check_literal)   '%' != '2'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=8 '2+3*7)+B(1+2+3+4) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=8 '2+3*7)+B(1+2+3+4) '
         (check_literal)   '"' != '2'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: '2+3*7)+B(1+2+3+4) '
          (check_integer) check_integer:ret1
         (check_number) check_number: ret1
        (check_atom) check_atom:ret1

        (scan_atom) scan_atom:

         (check_literal) check_literal:lit=' %' idx=8 '2+3*7)+B(1+2+3+4) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=8 '2+3*7)+B(1+2+3+4) '
         (check_literal)   '%' != '2'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=8 '2+3*7)+B(1+2+3+4) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=8 '2+3*7)+B(1+2+3+4) '
         (check_literal)   '"' != '2'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: '2+3*7)+B(1+2+3+4) '
          (check_integer) check_integer:ret1
         (check_number) check_number: ret1

         (scan_number) scan_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: '2+3*7)+B(1+2+3+4) '
          (check_integer) check_integer:ret1

          (scan_integer) scan_integer:
          (scan_integer) scan_integer:ret1
   Frst:0 T:'2' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U U )] i i 2
         (scan_integer) scan_integer:ret1  2
        (scan_atom) scan_atom:ret1

        (check_eitem) check_eitem: '+3*7)+B(1+2+3+4) '

         (check_operator) check_operator: +3*7)+B(1+2+3+4) 

          (check_literal) check_literal:lit=',' idx=9 '+3*7)+B(1+2+3+4) '
          (check_literal) check_literal:After drop space:',' idx=9 '+3*7)+B(1+2+3+4) '
          (check_literal)   ',' != '+'
          (check_literal) check_literal: ret0
         (check_operator) check_operator: ret1
        (check_eitem) check_eitem:ret1

        (scan_eitem) scan_eitem:

         (check_operator) check_operator: +3*7)+B(1+2+3+4) 

          (check_literal) check_literal:lit=',' idx=9 '+3*7)+B(1+2+3+4) '
          (check_literal) check_literal:After drop space:',' idx=9 '+3*7)+B(1+2+3+4) '
          (check_literal)   ',' != '+'
          (check_literal) check_literal: ret0
         (check_operator) check_operator: ret1

         (scan_operator) scan_operator: '+3*7)+B(1+2+3+4) '

          (check_literal) check_literal:lit=',' idx=9 '+3*7)+B(1+2+3+4) '
          (check_literal) check_literal:After drop space:',' idx=9 '+3*7)+B(1+2+3+4) '
          (check_literal)   ',' != '+'
          (check_literal) check_literal: ret0
         (scan_operator) scan_operator: ret1 '3*7)+B(1+2+3+4) '
   Frst:0 T:'+' exptype:i
        (operator_precedence) 
+ is operator
'+' is operator
        (process_token) 
Token is operator o1 name:+ o2 name:(
        (process_token) 
opr1:3 opr2:0
Push 1
 Push:'+'
        (op_stack_print) 
------------------
        (op_stack_print) 
Operator Stack     (4)

        (op_stack_print) 
000: PRINT type:17
        (op_stack_print) 
001: ( type:16
        (op_stack_print) 
002: ( type:16
        (op_stack_print) 
003: + type:0
        (op_stack_print) 
------------------


         (check_eitem) check_eitem: '3*7)+B(1+2+3+4) '

          (check_operator) check_operator: 3*7)+B(1+2+3+4) 

           (check_literal) check_literal:lit=',' idx=10 '3*7)+B(1+2+3+4) '
           (check_literal) check_literal:After drop space:',' idx=10 '3*7)+B(1+2+3+4) '
           (check_literal)   ',' != '3'
           (check_literal) check_literal: ret0
          (check_operator) check_operator:ret0

          (check_function) check_function: '3*7)+B(1+2+3+4) '
          (check_function) check_function: ret0

          (check_atom) check_atom:

           (check_literal) check_literal:lit=' %' idx=10 '3*7)+B(1+2+3+4) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'%' idx=10 '3*7)+B(1+2+3+4) '
           (check_literal)   '%' != '3'
           (check_literal) check_literal: ret0

           (check_literal) check_literal:lit=' "' idx=10 '3*7)+B(1+2+3+4) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'"' idx=10 '3*7)+B(1+2+3+4) '
           (check_literal)   '"' != '3'
           (check_literal) check_literal: ret0

           (check_number) check_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret0

            (check_integer) check_integer: '3*7)+B(1+2+3+4) '
            (check_integer) check_integer:ret1
           (check_number) check_number: ret1
          (check_atom) check_atom:ret1
         (check_eitem) check_eitem:ret1

         (scan_eitem) scan_eitem:

          (check_operator) check_operator: 3*7)+B(1+2+3+4) 

           (check_literal) check_literal:lit=',' idx=10 '3*7)+B(1+2+3+4) '
           (check_literal) check_literal:After drop space:',' idx=10 '3*7)+B(1+2+3+4) '
           (check_literal)   ',' != '3'
           (check_literal) check_literal: ret0
          (check_operator) check_operator:ret0

          (check_function) check_function: '3*7)+B(1+2+3+4) '
          (check_function) check_function: ret0

          (check_atom) check_atom:

           (check_literal) check_literal:lit=' %' idx=10 '3*7)+B(1+2+3+4) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'%' idx=10 '3*7)+B(1+2+3+4) '
           (check_literal)   '%' != '3'
           (check_literal) check_literal: ret0

           (check_literal) check_literal:lit=' "' idx=10 '3*7)+B(1+2+3+4) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'"' idx=10 '3*7)+B(1+2+3+4) '
           (check_literal)   '"' != '3'
           (check_literal) check_literal: ret0

           (check_number) check_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret0

            (check_integer) check_integer: '3*7)+B(1+2+3+4) '
            (check_integer) check_integer:ret1
           (check_number) check_number: ret1
          (check_atom) check_atom:ret1

          (scan_atom) scan_atom:

           (check_literal) check_literal:lit=' %' idx=10 '3*7)+B(1+2+3+4) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'%' idx=10 '3*7)+B(1+2+3+4) '
           (check_literal)   '%' != '3'
           (check_literal) check_literal: ret0

           (check_literal) check_literal:lit=' "' idx=10 '3*7)+B(1+2+3+4) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'"' idx=10 '3*7)+B(1+2+3+4) '
           (check_literal)   '"' != '3'
           (check_literal) check_literal: ret0

           (check_number) check_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret0

            (check_integer) check_integer: '3*7)+B(1+2+3+4) '
            (check_integer) check_integer:ret1
           (check_number) check_number: ret1

           (scan_number) scan_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret0

            (check_integer) check_integer: '3*7)+B(1+2+3+4) '
            (check_integer) check_integer:ret1

            (scan_integer) scan_integer:
            (scan_integer) scan_integer:ret1
   Frst:0 T:'3' exptype:i
           (operator_precedence) 
+ is operator
modify_expression_type:Inittype:i Intype:i Outtype:i
(  output_integer) [i,(U U )] i i 3
           (scan_integer) scan_integer:ret1  3
          (scan_atom) scan_atom:ret1

          (check_eitem) check_eitem: '*7)+B(1+2+3+4) '

           (check_operator) check_operator: *7)+B(1+2+3+4) 

            (check_literal) check_literal:lit=',' idx=11 '*7)+B(1+2+3+4) '
            (check_literal) check_literal:After drop space:',' idx=11 '*7)+B(1+2+3+4) '
            (check_literal)   ',' != '*'
            (check_literal) check_literal: ret0
           (check_operator) check_operator: ret1
          (check_eitem) check_eitem:ret1

          (scan_eitem) scan_eitem:

           (check_operator) check_operator: *7)+B(1+2+3+4) 

            (check_literal) check_literal:lit=',' idx=11 '*7)+B(1+2+3+4) '
            (check_literal) check_literal:After drop space:',' idx=11 '*7)+B(1+2+3+4) '
            (check_literal)   ',' != '*'
            (check_literal) check_literal: ret0
           (check_operator) check_operator: ret1

           (scan_operator) scan_operator: '*7)+B(1+2+3+4) '

            (check_literal) check_literal:lit=',' idx=11 '*7)+B(1+2+3+4) '
            (check_literal) check_literal:After drop space:',' idx=11 '*7)+B(1+2+3+4) '
            (check_literal)   ',' != '*'
            (check_literal) check_literal: ret0
           (scan_operator) scan_operator: ret1 '7)+B(1+2+3+4) '
   Frst:0 T:'*' exptype:i
          (operator_precedence) 
* is operator
          (operator_precedence) 
+ is operator
'*' is operator
          (process_token) 
Token is operator o1 name:* o2 name:+
          (process_token) 
opr1:5 opr2:3
          (operator_precedence) 
+ is operator
          (operator_precedence) 
+ is operator
Push 1
 Push:'*'
          (op_stack_print) 
------------------
          (op_stack_print) 
Operator Stack     (5)

          (op_stack_print) 
000: PRINT type:17
          (op_stack_print) 
001: ( type:16
          (op_stack_print) 
002: ( type:16
          (op_stack_print) 
003: + type:0
          (op_stack_print) 
004: * type:0
          (op_stack_print) 
------------------


           (check_eitem) check_eitem: '7)+B(1+2+3+4) '

            (check_operator) check_operator: 7)+B(1+2+3+4) 

             (check_literal) check_literal:lit=',' idx=12 '7)+B(1+2+3+4) '
             (check_literal) check_literal:After drop space:',' idx=12 '7)+B(1+2+3+4) '
             (check_literal)   ',' != '7'
             (check_literal) check_literal: ret0
            (check_operator) check_operator:ret0

            (check_function) check_function: '7)+B(1+2+3+4) '
            (check_function) check_function: ret0

            (check_atom) check_atom:

             (check_literal) check_literal:lit=' %' idx=12 '7)+B(1+2+3+4) '
             (check_literal) dropping space
             (check_literal) check_literal:After drop space:'%' idx=12 '7)+B(1+2+3+4) '
             (check_literal)   '%' != '7'
             (check_literal) check_literal: ret0

             (check_literal) check_literal:lit=' "' idx=12 '7)+B(1+2+3+4) '
             (check_literal) dropping space
             (check_literal) check_literal:After drop space:'"' idx=12 '7)+B(1+2+3+4) '
             (check_literal)   '"' != '7'
             (check_literal) check_literal: ret0

             (check_number) check_number:

              (check_float) check_float:
              (isfloatdigit) isfloatdigit:
              (isfloatdigit) isfloatdigit:
              (check_float) check_float: ret0

              (check_integer) check_integer: '7)+B(1+2+3+4) '
              (check_integer) check_integer:ret1
             (check_number) check_number: ret1
            (check_atom) check_atom:ret1
           (check_eitem) check_eitem:ret1

           (scan_eitem) scan_eitem:

            (check_operator) check_operator: 7)+B(1+2+3+4) 

             (check_literal) check_literal:lit=',' idx=12 '7)+B(1+2+3+4) '
             (check_literal) check_literal:After drop space:',' idx=12 '7)+B(1+2+3+4) '
             (check_literal)   ',' != '7'
             (check_literal) check_literal: ret0
            (check_operator) check_operator:ret0

            (check_function) check_function: '7)+B(1+2+3+4) '
            (check_function) check_function: ret0

            (check_atom) check_atom:

             (check_literal) check_literal:lit=' %' idx=12 '7)+B(1+2+3+4) '
             (check_literal) dropping space
             (check_literal) check_literal:After drop space:'%' idx=12 '7)+B(1+2+3+4) '
             (check_literal)   '%' != '7'
             (check_literal) check_literal: ret0

             (check_literal) check_literal:lit=' "' idx=12 '7)+B(1+2+3+4) '
             (check_literal) dropping space
             (check_literal) check_literal:After drop space:'"' idx=12 '7)+B(1+2+3+4) '
             (check_literal)   '"' != '7'
             (check_literal) check_literal: ret0

             (check_number) check_number:

              (check_float) check_float:
              (isfloatdigit) isfloatdigit:
              (isfloatdigit) isfloatdigit:
              (check_float) check_float: ret0

              (check_integer) check_integer: '7)+B(1+2+3+4) '
              (check_integer) check_integer:ret1
             (check_number) check_number: ret1
            (check_atom) check_atom:ret1

            (scan_atom) scan_atom:

             (check_literal) check_literal:lit=' %' idx=12 '7)+B(1+2+3+4) '
             (check_literal) dropping space
             (check_literal) check_literal:After drop space:'%' idx=12 '7)+B(1+2+3+4) '
             (check_literal)   '%' != '7'
             (check_literal) check_literal: ret0

             (check_literal) check_literal:lit=' "' idx=12 '7)+B(1+2+3+4) '
             (check_literal) dropping space
             (check_literal) check_literal:After drop space:'"' idx=12 '7)+B(1+2+3+4) '
             (check_literal)   '"' != '7'
             (check_literal) check_literal: ret0

             (check_number) check_number:

              (check_float) check_float:
              (isfloatdigit) isfloatdigit:
              (isfloatdigit) isfloatdigit:
              (check_float) check_float: ret0

              (check_integer) check_integer: '7)+B(1+2+3+4) '
              (check_integer) check_integer:ret1
             (check_number) check_number: ret1

             (scan_number) scan_number:

              (check_float) check_float:
              (isfloatdigit) isfloatdigit:
              (isfloatdigit) isfloatdigit:
              (check_float) check_float: ret0

              (check_integer) check_integer: '7)+B(1+2+3+4) '
              (check_integer) check_integer:ret1

              (scan_integer) scan_integer:
              (scan_integer) scan_integer:ret1
   Frst:0 T:'7' exptype:i
             (operator_precedence) 
* is operator
modify_expression_type:Inittype:i Intype:i Outtype:i
(  output_integer) [i,(U U )] i i 7
             (scan_integer) scan_integer:ret1  7
            (scan_atom) scan_atom:ret1

            (check_eitem) check_eitem: ')+B(1+2+3+4) '

             (check_operator) check_operator: )+B(1+2+3+4) 

              (check_literal) check_literal:lit=',' idx=13 ')+B(1+2+3+4) '
              (check_literal) check_literal:After drop space:',' idx=13 ')+B(1+2+3+4) '
              (check_literal)   ',' != ')'
              (check_literal) check_literal: ret0
             (check_operator) check_operator:ret0

             (check_function) check_function: ')+B(1+2+3+4) '
             (check_function) check_function: ret0

             (check_atom) check_atom:

              (check_literal) check_literal:lit=' %' idx=13 ')+B(1+2+3+4) '
              (check_literal) dropping space
              (check_literal) check_literal:After drop space:'%' idx=13 ')+B(1+2+3+4) '
              (check_literal)   '%' != ')'
              (check_literal) check_literal: ret0

              (check_literal) check_literal:lit=' "' idx=13 ')+B(1+2+3+4) '
              (check_literal) dropping space
              (check_literal) check_literal:After drop space:'"' idx=13 ')+B(1+2+3+4) '
              (check_literal)   '"' != ')'
              (check_literal) check_literal: ret0

              (check_number) check_number:

               (check_float) check_float:
               (isfloatdigit) isfloatdigit:
               (check_float) check_float: ret0

               (check_integer) check_integer: ')+B(1+2+3+4) '
               (check_integer) check_integer:ret0
              (check_number) check_number: ret0

              (check_variable) check_variable:

               (check_vname) check_vname ')+B(1+2+3+4) ':
               (check_vname) check_vname ret0 ')+B(1+2+3+4) ':
              (check_variable) check_variable:ret0 
             (check_atom) check_atom:ret1

             (check_sub_expr) check_sub_expr:

              (check_literal) check_literal:lit=' (' idx=13 ')+B(1+2+3+4) '
              (check_literal) dropping space
              (check_literal) check_literal:After drop space:'(' idx=13 ')+B(1+2+3+4) '
              (check_literal)   '(' != ')'
              (check_literal) check_literal: ret0
             (check_sub_expr) check_sub_expr: ret0
            (check_eitem) check_eitem:ret0
           (scan_expression) scan_expression: ret1 ')+B(1+2+3+4) '

           (check_literal) check_literal:lit=' ,' idx=13 ')+B(1+2+3+4) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:',' idx=13 ')+B(1+2+3+4) '
           (check_literal)   ',' != ')'
           (check_literal) check_literal: ret0

           (scan_literal) scan_literal:lit=' )' ')+B(1+2+3+4) '
           (scan_literal) scan_literal:After drop space:)+B(1+2+3+4) 
           (scan_literal) scan_literal:while loop:)+B(1+2+3+4) 
   Frst:0 T:')' exptype:i
           (operator_precedence) 
* is operator
           (process_token) 
Pop 3
Pop '*'
           (op_stack_print) 
------------------
           (op_stack_print) 
Operator Stack     (4)

           (op_stack_print) 
000: PRINT type:17
           (op_stack_print) 
001: ( type:16
           (op_stack_print) 
002: ( type:16
           (op_stack_print) 
003: + type:0
           (op_stack_print) 
------------------

( output_operator) [i,(U U )] i i *
           (token_is_function) 
token_is_function:
           (token_is_function) 
token_is_function:* is not function
           (process_token) 
Pop 3
Pop '+'
           (op_stack_print) 
------------------
           (op_stack_print) 
Operator Stack     (3)

           (op_stack_print) 
000: PRINT type:17
           (op_stack_print) 
001: ( type:16
           (op_stack_print) 
002: ( type:16
           (op_stack_print) 
------------------

( output_operator) [i,(U U )] i i +
           (token_is_function) 
token_is_function:
           (token_is_function) 
token_is_function:+ is not function
Pop 4
Pop '('
           (op_stack_print) 
------------------
           (op_stack_print) 
Operator Stack     (2)

           (op_stack_print) 
000: PRINT type:17
           (op_stack_print) 
001: ( type:16
           (op_stack_print) 
------------------

(  output_sub_end)
           (token_is_function) 
token_is_function:
           (token_is_function) 
token_is_function:( is not function
(  output_sub_end)
           (scan_literal) scan_literal:ret1
          (scan_variable) scan_variable:ret1 vname='A' is str:0 int:0 flt:1 ary:1
   Frst:0 T:'A' exptype:U
         (token_is_function) 
token_is_function:
         (token_is_function) 
token_is_function:A is not function
token_is_variable: tok:'A'
         (token_is_function) 
token_is_function:
         (token_is_function) 
token_is_function:A is not function
         (init_get_name) 
init_get_name:'A'
         (init_get_name) 
init_get_name:'A'
         (get_name) 
get_name:gn:'A'
process_token:type:U req_type:?
modify_expression_type:Inittype:U Intype:f Outtype:f
( output_variable) [f,(U )] f f A
         (print_var_info) 
VAR INFO: '                 A' gbl:0 ref:1 int:0 flt:1 str:0 ary:1 max_str:0 max_ary:0 num_ind:1
         (scan_atom) scan_atom:ret1

         (check_eitem) check_eitem: '+B(1+2+3+4) '

          (check_operator) check_operator: +B(1+2+3+4) 

           (check_literal) check_literal:lit=',' idx=14 '+B(1+2+3+4) '
           (check_literal) check_literal:After drop space:',' idx=14 '+B(1+2+3+4) '
           (check_literal)   ',' != '+'
           (check_literal) check_literal: ret0
          (check_operator) check_operator: ret1
         (check_eitem) check_eitem:ret1

         (scan_eitem) scan_eitem:

          (check_operator) check_operator: +B(1+2+3+4) 

           (check_literal) check_literal:lit=',' idx=14 '+B(1+2+3+4) '
           (check_literal) check_literal:After drop space:',' idx=14 '+B(1+2+3+4) '
           (check_literal)   ',' != '+'
           (check_literal) check_literal: ret0
          (check_operator) check_operator: ret1

          (scan_operator) scan_operator: '+B(1+2+3+4) '

           (check_literal) check_literal:lit=',' idx=14 '+B(1+2+3+4) '
           (check_literal) check_literal:After drop space:',' idx=14 '+B(1+2+3+4) '
           (check_literal)   ',' != '+'
           (check_literal) check_literal: ret0
          (scan_operator) scan_operator: ret1 'B(1+2+3+4) '
   Frst:0 T:'+' exptype:f
         (operator_precedence) 
+ is operator
'+' is operator
         (process_token) 
Token is operator o1 name:+ o2 name:(
         (process_token) 
opr1:3 opr2:0
Push 1
 Push:'+'
         (op_stack_print) 
------------------
         (op_stack_print) 
Operator Stack     (3)

         (op_stack_print) 
000: PRINT type:17
         (op_stack_print) 
001: ( type:16
         (op_stack_print) 
002: + type:1
         (op_stack_print) 
------------------


          (check_eitem) check_eitem: 'B(1+2+3+4) '

           (check_operator) check_operator: B(1+2+3+4) 

            (check_literal) check_literal:lit=',' idx=15 'B(1+2+3+4) '
            (check_literal) check_literal:After drop space:',' idx=15 'B(1+2+3+4) '
            (check_literal)   ',' != 'B'
            (check_literal) check_literal: ret0
           (check_operator) check_operator:ret0

           (check_function) check_function: 'B(1+2+3+4) '
           (check_function) check_function: ret0

           (check_atom) check_atom:

            (check_literal) check_literal:lit=' %' idx=15 'B(1+2+3+4) '
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:'%' idx=15 'B(1+2+3+4) '
            (check_literal)   '%' != 'B'
            (check_literal) check_literal: ret0

            (check_literal) check_literal:lit=' "' idx=15 'B(1+2+3+4) '
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:'"' idx=15 'B(1+2+3+4) '
            (check_literal)   '"' != 'B'
            (check_literal) check_literal: ret0

            (check_number) check_number:

             (check_float) check_float:
             (isfloatdigit) isfloatdigit:
             (check_float) check_float: ret0

             (check_integer) check_integer: 'B(1+2+3+4) '
             (check_integer) check_integer:ret0
            (check_number) check_number: ret0

            (check_variable) check_variable:

             (check_vname) check_vname 'B(1+2+3+4) ':
             (check_vname) check_vname ret1 '(1+2+3+4) ':
            (check_variable) check_variable: '(1+2+3+4) '
            (check_variable) check_variable: Ary test '(1+2+3+4) '

             (check_literal) check_literal:lit='(' idx=16 '(1+2+3+4) '
             (check_literal) check_literal:After drop space:'(' idx=16 '(1+2+3+4) '
             (check_literal) check_literal:After while():1+2+3+4) 
             (check_literal) check_literal:ret1 
            (check_variable) check_variable: is array

             (check_expression) check_expression: '1+2+3+4) '

              (check_eitem) check_eitem: '1+2+3+4) '

               (check_operator) check_operator: 1+2+3+4) 

                (check_literal) check_literal:lit=',' idx=17 '1+2+3+4) '
                (check_literal) check_literal:After drop space:',' idx=17 '1+2+3+4) '
                (check_literal)   ',' != '1'
                (check_literal) check_literal: ret0
               (check_operator) check_operator:ret0

               (check_function) check_function: '1+2+3+4) '
               (check_function) check_function: ret0

               (check_atom) check_atom:

                (check_literal) check_literal:lit=' %' idx=17 '1+2+3+4) '
                (check_literal) dropping space
                (check_literal) check_literal:After drop space:'%' idx=17 '1+2+3+4) '
                (check_literal)   '%' != '1'
                (check_literal) check_literal: ret0

                (check_literal) check_literal:lit=' "' idx=17 '1+2+3+4) '
                (check_literal) dropping space
                (check_literal) check_literal:After drop space:'"' idx=17 '1+2+3+4) '
                (check_literal)   '"' != '1'
                (check_literal) check_literal: ret0

                (check_number) check_number:

                 (check_float) check_float:
                 (isfloatdigit) isfloatdigit:
                 (isfloatdigit) isfloatdigit:
                 (check_float) check_float: ret0

                 (check_integer) check_integer: '1+2+3+4) '
                 (check_integer) check_integer:ret1
                (check_number) check_number: ret1
               (check_atom) check_atom:ret1
              (check_eitem) check_eitem:ret1

              (check_eitem) check_eitem: '+2+3+4) '

               (check_operator) check_operator: +2+3+4) 

                (check_literal) check_literal:lit=',' idx=18 '+2+3+4) '
                (check_literal) check_literal:After drop space:',' idx=18 '+2+3+4) '
                (check_literal)   ',' != '+'
                (check_literal) check_literal: ret0
               (check_operator) check_operator: ret1
              (check_eitem) check_eitem:ret1

              (check_eitem) check_eitem: '2+3+4) '

               (check_operator) check_operator: 2+3+4) 

                (check_literal) check_literal:lit=',' idx=19 '2+3+4) '
                (check_literal) check_literal:After drop space:',' idx=19 '2+3+4) '
                (check_literal)   ',' != '2'
                (check_literal) check_literal: ret0
               (check_operator) check_operator:ret0

               (check_function) check_function: '2+3+4) '
               (check_function) check_function: ret0

               (check_atom) check_atom:

                (check_literal) check_literal:lit=' %' idx=19 '2+3+4) '
                (check_literal) dropping space
                (check_literal) check_literal:After drop space:'%' idx=19 '2+3+4) '
                (check_literal)   '%' != '2'
                (check_literal) check_literal: ret0

                (check_literal) check_literal:lit=' "' idx=19 '2+3+4) '
                (check_literal) dropping space
                (check_literal) check_literal:After drop space:'"' idx=19 '2+3+4) '
                (check_literal)   '"' != '2'
                (check_literal) check_literal: ret0

                (check_number) check_number:

                 (check_float) check_float:
                 (isfloatdigit) isfloatdigit:
                 (isfloatdigit) isfloatdigit:
                 (check_float) check_float: ret0

                 (check_integer) check_integer: '2+3+4) '
                 (check_integer) check_integer:ret1
                (check_number) check_number: ret1
               (check_atom) check_atom:ret1
              (check_eitem) check_eitem:ret1

              (check_eitem) check_eitem: '+3+4) '

               (check_operator) check_operator: +3+4) 

                (check_literal) check_literal:lit=',' idx=20 '+3+4) '
                (check_literal) check_literal:After drop space:',' idx=20 '+3+4) '
                (check_literal)   ',' != '+'
                (check_literal) check_literal: ret0
               (check_operator) check_operator: ret1
              (check_eitem) check_eitem:ret1

              (check_eitem) check_eitem: '3+4) '

               (check_operator) check_operator: 3+4) 

                (check_literal) check_literal:lit=',' idx=21 '3+4) '
                (check_literal) check_literal:After drop space:',' idx=21 '3+4) '
                (check_literal)   ',' != '3'
                (check_literal) check_literal: ret0
               (check_operator) check_operator:ret0

               (check_function) check_function: '3+4) '
               (check_function) check_function: ret0

               (check_atom) check_atom:

                (check_literal) check_literal:lit=' %' idx=21 '3+4) '
                (check_literal) dropping space
                (check_literal) check_literal:After drop space:'%' idx=21 '3+4) '
                (check_literal)   '%' != '3'
                (check_literal) check_literal: ret0

                (check_literal) check_literal:lit=' "' idx=21 '3+4) '
                (check_literal) dropping space
                (check_literal) check_literal:After drop space:'"' idx=21 '3+4) '
                (check_literal)   '"' != '3'
                (check_literal) check_literal: ret0

                (check_number) check_number:

                 (check_float) check_float:
                 (isfloatdigit) isfloatdigit:
                 (isfloatdigit) isfloatdigit:
                 (check_float) check_float: ret0

                 (check_integer) check_integer: '3+4) '
                 (check_integer) check_integer:ret1
                (check_number) check_number: ret1
               (check_atom) check_atom:ret1
              (check_eitem) check_eitem:ret1

              (check_eitem) check_eitem: '+4) '

               (check_operator) check_operator: +4) 

                (check_literal) check_literal:lit=',' idx=22 '+4) '
                (check_literal) check_literal:After drop space:',' idx=22 '+4) '
                (check_literal)   ',' != '+'
                (check_literal) check_literal: ret0
               (check_operator) check_operator: ret1
              (check_eitem) check_eitem:ret1

              (check_eitem) check_eitem: '4) '

               (check_operator) check_operator: 4) 

                (check_literal) check_literal:lit=',' idx=23 '4) '
                (check_literal) check_literal:After drop space:',' idx=23 '4) '
                (check_literal)   ',' != '4'
                (check_literal) check_literal: ret0
               (check_operator) check_operator:ret0

               (check_function) check_function: '4) '
               (check_function) check_function: ret0

               (check_atom) check_atom:

                (check_literal) check_literal:lit=' %' idx=23 '4) '
                (check_literal) dropping space
                (check_literal) check_literal:After drop space:'%' idx=23 '4) '
                (check_literal)   '%' != '4'
                (check_literal) check_literal: ret0

                (check_literal) check_literal:lit=' "' idx=23 '4) '
                (check_literal) dropping space
                (check_literal) check_literal:After drop space:'"' idx=23 '4) '
                (check_literal)   '"' != '4'
                (check_literal) check_literal: ret0

                (check_number) check_number:

                 (check_float) check_float:
                 (isfloatdigit) isfloatdigit:
                 (isfloatdigit) isfloatdigit:
                 (check_float) check_float: ret0

                 (check_integer) check_integer: '4) '
                 (check_integer) check_integer:ret1
                (check_number) check_number: ret1
               (check_atom) check_atom:ret1
              (check_eitem) check_eitem:ret1

              (check_eitem) check_eitem: ') '

               (check_operator) check_operator: ) 

                (check_literal) check_literal:lit=',' idx=24 ') '
                (check_literal) check_literal:After drop space:',' idx=24 ') '
                (check_literal)   ',' != ')'
                (check_literal) check_literal: ret0
               (check_operator) check_operator:ret0

               (check_function) check_function: ') '
               (check_function) check_function: ret0

               (check_atom) check_atom:

                (check_literal) check_literal:lit=' %' idx=24 ') '
                (check_literal) dropping space
                (check_literal) check_literal:After drop space:'%' idx=24 ') '
                (check_literal)   '%' != ')'
                (check_literal) check_literal: ret0

                (check_literal) check_literal:lit=' "' idx=24 ') '
                (check_literal) dropping space
                (check_literal) check_literal:After drop space:'"' idx=24 ') '
                (check_literal)   '"' != ')'
                (check_literal) check_literal: ret0

                (check_number) check_number:

                 (check_float) check_float:
                 (isfloatdigit) isfloatdigit:
                 (check_float) check_float: ret0

                 (check_integer) check_integer: ') '
                 (check_integer) check_integer:ret0
                (check_number) check_number: ret0

                (check_variable) check_variable:

                 (check_vname) check_vname ') ':
                 (check_vname) check_vname ret0 ') ':
                (check_variable) check_variable:ret0 
               (check_atom) check_atom:ret1

               (check_sub_expr) check_sub_expr:

                (check_literal) check_literal:lit=' (' idx=24 ') '
                (check_literal) dropping space
                (check_literal) check_literal:After drop space:'(' idx=24 ') '
                (check_literal)   '(' != ')'
                (check_literal) check_literal: ret0
               (check_sub_expr) check_sub_expr: ret0
              (check_eitem) check_eitem:ret0
             (check_expression) check_expression:ret1 ') '

             (check_literal) check_literal:lit=' ,' idx=24 ') '
             (check_literal) dropping space
             (check_literal) check_literal:After drop space:',' idx=24 ') '
             (check_literal)   ',' != ')'
             (check_literal) check_literal: ret0

             (check_literal) check_literal:lit=' )' idx=24 ') '
             (check_literal) dropping space
             (check_literal) check_literal:After drop space:')' idx=24 ') '
             (check_literal) check_literal:After while(): 
             (check_literal) check_literal:ret1 
            (check_variable) check_variable:ret1 
           (check_atom) check_atom:ret1
          (check_eitem) check_eitem:ret1

          (scan_eitem) scan_eitem:

           (check_operator) check_operator: B(1+2+3+4) 

            (check_literal) check_literal:lit=',' idx=15 'B(1+2+3+4) '
            (check_literal) check_literal:After drop space:',' idx=15 'B(1+2+3+4) '
            (check_literal)   ',' != 'B'
            (check_literal) check_literal: ret0
           (check_operator) check_operator:ret0

           (check_function) check_function: 'B(1+2+3+4) '
           (check_function) check_function: ret0

           (check_atom) check_atom:

            (check_literal) check_literal:lit=' %' idx=15 'B(1+2+3+4) '
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:'%' idx=15 'B(1+2+3+4) '
            (check_literal)   '%' != 'B'
            (check_literal) check_literal: ret0

            (check_literal) check_literal:lit=' "' idx=15 'B(1+2+3+4) '
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:'"' idx=15 'B(1+2+3+4) '
            (check_literal)   '"' != 'B'
            (check_literal) check_literal: ret0

            (check_number) check_number:

             (check_float) check_float:
             (isfloatdigit) isfloatdigit:
             (check_float) check_float: ret0

             (check_integer) check_integer: 'B(1+2+3+4) '
             (check_integer) check_integer:ret0
            (check_number) check_number: ret0

            (check_variable) check_variable:

             (check_vname) check_vname 'B(1+2+3+4) ':
             (check_vname) check_vname ret1 '(1+2+3+4) ':
            (check_variable) check_variable: '(1+2+3+4) '
            (check_variable) check_variable: Ary test '(1+2+3+4) '

             (check_literal) check_literal:lit='(' idx=16 '(1+2+3+4) '
             (check_literal) check_literal:After drop space:'(' idx=16 '(1+2+3+4) '
             (check_literal) check_literal:After while():1+2+3+4) 
             (check_literal) check_literal:ret1 
            (check_variable) check_variable: is array

             (check_expression) check_expression: '1+2+3+4) '

              (check_eitem) check_eitem: '1+2+3+4) '

               (check_operator) check_operator: 1+2+3+4) 

                (check_literal) check_literal:lit=',' idx=17 '1+2+3+4) '
                (check_literal) check_literal:After drop space:',' idx=17 '1+2+3+4) '
                (check_literal)   ',' != '1'
                (check_literal) check_literal: ret0
               (check_operator) check_operator:ret0

               (check_function) check_function: '1+2+3+4) '
               (check_function) check_function: ret0

               (check_atom) check_atom:

                (check_literal) check_literal:lit=' %' idx=17 '1+2+3+4) '
                (check_literal) dropping space
                (check_literal) check_literal:After drop space:'%' idx=17 '1+2+3+4) '
                (check_literal)   '%' != '1'
                (check_literal) check_literal: ret0

                (check_literal) check_literal:lit=' "' idx=17 '1+2+3+4) '
                (check_literal) dropping space
                (check_literal) check_literal:After drop space:'"' idx=17 '1+2+3+4) '
                (check_literal)   '"' != '1'
                (check_literal) check_literal: ret0

                (check_number) check_number:

                 (check_float) check_float:
                 (isfloatdigit) isfloatdigit:
                 (isfloatdigit) isfloatdigit:
                 (check_float) check_float: ret0

                 (check_integer) check_integer: '1+2+3+4) '
                 (check_integer) check_integer:ret1
                (check_number) check_number: ret1
               (check_atom) check_atom:ret1
              (check_eitem) check_eitem:ret1

              (check_eitem) check_eitem: '+2+3+4) '

               (check_operator) check_operator: +2+3+4) 

                (check_literal) check_literal:lit=',' idx=18 '+2+3+4) '
                (check_literal) check_literal:After drop space:',' idx=18 '+2+3+4) '
                (check_literal)   ',' != '+'
                (check_literal) check_literal: ret0
               (check_operator) check_operator: ret1
              (check_eitem) check_eitem:ret1

              (check_eitem) check_eitem: '2+3+4) '

               (check_operator) check_operator: 2+3+4) 

                (check_literal) check_literal:lit=',' idx=19 '2+3+4) '
                (check_literal) check_literal:After drop space:',' idx=19 '2+3+4) '
                (check_literal)   ',' != '2'
                (check_literal) check_literal: ret0
               (check_operator) check_operator:ret0

               (check_function) check_function: '2+3+4) '
               (check_function) check_function: ret0

               (check_atom) check_atom:

                (check_literal) check_literal:lit=' %' idx=19 '2+3+4) '
                (check_literal) dropping space
                (check_literal) check_literal:After drop space:'%' idx=19 '2+3+4) '
                (check_literal)   '%' != '2'
                (check_literal) check_literal: ret0

                (check_literal) check_literal:lit=' "' idx=19 '2+3+4) '
                (check_literal) dropping space
                (check_literal) check_literal:After drop space:'"' idx=19 '2+3+4) '
                (check_literal)   '"' != '2'
                (check_literal) check_literal: ret0

                (check_number) check_number:

                 (check_float) check_float:
                 (isfloatdigit) isfloatdigit:
                 (isfloatdigit) isfloatdigit:
                 (check_float) check_float: ret0

                 (check_integer) check_integer: '2+3+4) '
                 (check_integer) check_integer:ret1
                (check_number) check_number: ret1
               (check_atom) check_atom:ret1
              (check_eitem) check_eitem:ret1

              (check_eitem) check_eitem: '+3+4) '

               (check_operator) check_operator: +3+4) 

                (check_literal) check_literal:lit=',' idx=20 '+3+4) '
                (check_literal) check_literal:After drop space:',' idx=20 '+3+4) '
                (check_literal)   ',' != '+'
                (check_literal) check_literal: ret0
               (check_operator) check_operator: ret1
              (check_eitem) check_eitem:ret1

              (check_eitem) check_eitem: '3+4) '

               (check_operator) check_operator: 3+4) 

                (check_literal) check_literal:lit=',' idx=21 '3+4) '
                (check_literal) check_literal:After drop space:',' idx=21 '3+4) '
                (check_literal)   ',' != '3'
                (check_literal) check_literal: ret0
               (check_operator) check_operator:ret0

               (check_function) check_function: '3+4) '
               (check_function) check_function: ret0

               (check_atom) check_atom:

                (check_literal) check_literal:lit=' %' idx=21 '3+4) '
                (check_literal) dropping space
                (check_literal) check_literal:After drop space:'%' idx=21 '3+4) '
                (check_literal)   '%' != '3'
                (check_literal) check_literal: ret0

                (check_literal) check_literal:lit=' "' idx=21 '3+4) '
                (check_literal) dropping space
                (check_literal) check_literal:After drop space:'"' idx=21 '3+4) '
                (check_literal)   '"' != '3'
                (check_literal) check_literal: ret0

                (check_number) check_number:

                 (check_float) check_float:
                 (isfloatdigit) isfloatdigit:
                 (isfloatdigit) isfloatdigit:
                 (check_float) check_float: ret0

                 (check_integer) check_integer: '3+4) '
                 (check_integer) check_integer:ret1
                (check_number) check_number: ret1
               (check_atom) check_atom:ret1
              (check_eitem) check_eitem:ret1

              (check_eitem) check_eitem: '+4) '

               (check_operator) check_operator: +4) 

                (check_literal) check_literal:lit=',' idx=22 '+4) '
                (check_literal) check_literal:After drop space:',' idx=22 '+4) '
                (check_literal)   ',' != '+'
                (check_literal) check_literal: ret0
               (check_operator) check_operator: ret1
              (check_eitem) check_eitem:ret1

              (check_eitem) check_eitem: '4) '

               (check_operator) check_operator: 4) 

                (check_literal) check_literal:lit=',' idx=23 '4) '
                (check_literal) check_literal:After drop space:',' idx=23 '4) '
                (check_literal)   ',' != '4'
                (check_literal) check_literal: ret0
               (check_operator) check_operator:ret0

               (check_function) check_function: '4) '
               (check_function) check_function: ret0

               (check_atom) check_atom:

                (check_literal) check_literal:lit=' %' idx=23 '4) '
                (check_literal) dropping space
                (check_literal) check_literal:After drop space:'%' idx=23 '4) '
                (check_literal)   '%' != '4'
                (check_literal) check_literal: ret0

                (check_literal) check_literal:lit=' "' idx=23 '4) '
                (check_literal) dropping space
                (check_literal) check_literal:After drop space:'"' idx=23 '4) '
                (check_literal)   '"' != '4'
                (check_literal) check_literal: ret0

                (check_number) check_number:

                 (check_float) check_float:
                 (isfloatdigit) isfloatdigit:
                 (isfloatdigit) isfloatdigit:
                 (check_float) check_float: ret0

                 (check_integer) check_integer: '4) '
                 (check_integer) check_integer:ret1
                (check_number) check_number: ret1
               (check_atom) check_atom:ret1
              (check_eitem) check_eitem:ret1

              (check_eitem) check_eitem: ') '

               (check_operator) check_operator: ) 

                (check_literal) check_literal:lit=',' idx=24 ') '
                (check_literal) check_literal:After drop space:',' idx=24 ') '
                (check_literal)   ',' != ')'
                (check_literal) check_literal: ret0
               (check_operator) check_operator:ret0

               (check_function) check_function: ') '
               (check_function) check_function: ret0

               (check_atom) check_atom:

                (check_literal) check_literal:lit=' %' idx=24 ') '
                (check_literal) dropping space
                (check_literal) check_literal:After drop space:'%' idx=24 ') '
                (check_literal)   '%' != ')'
                (check_literal) check_literal: ret0

                (check_literal) check_literal:lit=' "' idx=24 ') '
                (check_literal) dropping space
                (check_literal) check_literal:After drop space:'"' idx=24 ') '
                (check_literal)   '"' != ')'
                (check_literal) check_literal: ret0

                (check_number) check_number:

                 (check_float) check_float:
                 (isfloatdigit) isfloatdigit:
                 (check_float) check_float: ret0

                 (check_integer) check_integer: ') '
                 (check_integer) check_integer:ret0
                (check_number) check_number: ret0

                (check_variable) check_variable:

                 (check_vname) check_vname ') ':
                 (check_vname) check_vname ret0 ') ':
                (check_variable) check_variable:ret0 
               (check_atom) check_atom:ret1

               (check_sub_expr) check_sub_expr:

                (check_literal) check_literal:lit=' (' idx=24 ') '
                (check_literal) dropping space
                (check_literal) check_literal:After drop space:'(' idx=24 ') '
                (check_literal)   '(' != ')'
                (check_literal) check_literal: ret0
               (check_sub_expr) check_sub_expr: ret0
              (check_eitem) check_eitem:ret0
             (check_expression) check_expression:ret1 ') '

             (check_literal) check_literal:lit=' ,' idx=24 ') '
             (check_literal) dropping space
             (check_literal) check_literal:After drop space:',' idx=24 ') '
             (check_literal)   ',' != ')'
             (check_literal) check_literal: ret0

             (check_literal) check_literal:lit=' )' idx=24 ') '
             (check_literal) dropping space
             (check_literal) check_literal:After drop space:')' idx=24 ') '
             (check_literal) check_literal:After while(): 
             (check_literal) check_literal:ret1 
            (check_variable) check_variable:ret1 
           (check_atom) check_atom:ret1

           (scan_atom) scan_atom:

            (check_literal) check_literal:lit=' %' idx=15 'B(1+2+3+4) '
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:'%' idx=15 'B(1+2+3+4) '
            (check_literal)   '%' != 'B'
            (check_literal) check_literal: ret0

            (check_literal) check_literal:lit=' "' idx=15 'B(1+2+3+4) '
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:'"' idx=15 'B(1+2+3+4) '
            (check_literal)   '"' != 'B'
            (check_literal) check_literal: ret0

            (check_number) check_number:

             (check_float) check_float:
             (isfloatdigit) isfloatdigit:
             (check_float) check_float: ret0

             (check_integer) check_integer: 'B(1+2+3+4) '
             (check_integer) check_integer:ret0
            (check_number) check_number: ret0

            (check_variable) check_variable:

             (check_vname) check_vname 'B(1+2+3+4) ':
             (check_vname) check_vname ret1 '(1+2+3+4) ':
            (check_variable) check_variable: '(1+2+3+4) '
            (check_variable) check_variable: Ary test '(1+2+3+4) '

             (check_literal) check_literal:lit='(' idx=16 '(1+2+3+4) '
             (check_literal) check_literal:After drop space:'(' idx=16 '(1+2+3+4) '
             (check_literal) check_literal:After while():1+2+3+4) 
             (check_literal) check_literal:ret1 
            (check_variable) check_variable: is array

             (check_expression) check_expression: '1+2+3+4) '

              (check_eitem) check_eitem: '1+2+3+4) '

               (check_operator) check_operator: 1+2+3+4) 

                (check_literal) check_literal:lit=',' idx=17 '1+2+3+4) '
                (check_literal) check_literal:After drop space:',' idx=17 '1+2+3+4) '
                (check_literal)   ',' != '1'
                (check_literal) check_literal: ret0
               (check_operator) check_operator:ret0

               (check_function) check_function: '1+2+3+4) '
               (check_function) check_function: ret0

               (check_atom) check_atom:

                (check_literal) check_literal:lit=' %' idx=17 '1+2+3+4) '
                (check_literal) dropping space
                (check_literal) check_literal:After drop space:'%' idx=17 '1+2+3+4) '
                (check_literal)   '%' != '1'
                (check_literal) check_literal: ret0

                (check_literal) check_literal:lit=' "' idx=17 '1+2+3+4) '
                (check_literal) dropping space
                (check_literal) check_literal:After drop space:'"' idx=17 '1+2+3+4) '
                (check_literal)   '"' != '1'
                (check_literal) check_literal: ret0

                (check_number) check_number:

                 (check_float) check_float:
                 (isfloatdigit) isfloatdigit:
                 (isfloatdigit) isfloatdigit:
                 (check_float) check_float: ret0

                 (check_integer) check_integer: '1+2+3+4) '
                 (check_integer) check_integer:ret1
                (check_number) check_number: ret1
               (check_atom) check_atom:ret1
              (check_eitem) check_eitem:ret1

              (check_eitem) check_eitem: '+2+3+4) '

               (check_operator) check_operator: +2+3+4) 

                (check_literal) check_literal:lit=',' idx=18 '+2+3+4) '
                (check_literal) check_literal:After drop space:',' idx=18 '+2+3+4) '
                (check_literal)   ',' != '+'
                (check_literal) check_literal: ret0
               (check_operator) check_operator: ret1
              (check_eitem) check_eitem:ret1

              (check_eitem) check_eitem: '2+3+4) '

               (check_operator) check_operator: 2+3+4) 

                (check_literal) check_literal:lit=',' idx=19 '2+3+4) '
                (check_literal) check_literal:After drop space:',' idx=19 '2+3+4) '
                (check_literal)   ',' != '2'
                (check_literal) check_literal: ret0
               (check_operator) check_operator:ret0

               (check_function) check_function: '2+3+4) '
               (check_function) check_function: ret0

               (check_atom) check_atom:

                (check_literal) check_literal:lit=' %' idx=19 '2+3+4) '
                (check_literal) dropping space
                (check_literal) check_literal:After drop space:'%' idx=19 '2+3+4) '
                (check_literal)   '%' != '2'
                (check_literal) check_literal: ret0

                (check_literal) check_literal:lit=' "' idx=19 '2+3+4) '
                (check_literal) dropping space
                (check_literal) check_literal:After drop space:'"' idx=19 '2+3+4) '
                (check_literal)   '"' != '2'
                (check_literal) check_literal: ret0

                (check_number) check_number:

                 (check_float) check_float:
                 (isfloatdigit) isfloatdigit:
                 (isfloatdigit) isfloatdigit:
                 (check_float) check_float: ret0

                 (check_integer) check_integer: '2+3+4) '
                 (check_integer) check_integer:ret1
                (check_number) check_number: ret1
               (check_atom) check_atom:ret1
              (check_eitem) check_eitem:ret1

              (check_eitem) check_eitem: '+3+4) '

               (check_operator) check_operator: +3+4) 

                (check_literal) check_literal:lit=',' idx=20 '+3+4) '
                (check_literal) check_literal:After drop space:',' idx=20 '+3+4) '
                (check_literal)   ',' != '+'
                (check_literal) check_literal: ret0
               (check_operator) check_operator: ret1
              (check_eitem) check_eitem:ret1

              (check_eitem) check_eitem: '3+4) '

               (check_operator) check_operator: 3+4) 

                (check_literal) check_literal:lit=',' idx=21 '3+4) '
                (check_literal) check_literal:After drop space:',' idx=21 '3+4) '
                (check_literal)   ',' != '3'
                (check_literal) check_literal: ret0
               (check_operator) check_operator:ret0

               (check_function) check_function: '3+4) '
               (check_function) check_function: ret0

               (check_atom) check_atom:

                (check_literal) check_literal:lit=' %' idx=21 '3+4) '
                (check_literal) dropping space
                (check_literal) check_literal:After drop space:'%' idx=21 '3+4) '
                (check_literal)   '%' != '3'
                (check_literal) check_literal: ret0

                (check_literal) check_literal:lit=' "' idx=21 '3+4) '
                (check_literal) dropping space
                (check_literal) check_literal:After drop space:'"' idx=21 '3+4) '
                (check_literal)   '"' != '3'
                (check_literal) check_literal: ret0

                (check_number) check_number:

                 (check_float) check_float:
                 (isfloatdigit) isfloatdigit:
                 (isfloatdigit) isfloatdigit:
                 (check_float) check_float: ret0

                 (check_integer) check_integer: '3+4) '
                 (check_integer) check_integer:ret1
                (check_number) check_number: ret1
               (check_atom) check_atom:ret1
              (check_eitem) check_eitem:ret1

              (check_eitem) check_eitem: '+4) '

               (check_operator) check_operator: +4) 

                (check_literal) check_literal:lit=',' idx=22 '+4) '
                (check_literal) check_literal:After drop space:',' idx=22 '+4) '
                (check_literal)   ',' != '+'
                (check_literal) check_literal: ret0
               (check_operator) check_operator: ret1
              (check_eitem) check_eitem:ret1

              (check_eitem) check_eitem: '4) '

               (check_operator) check_operator: 4) 

                (check_literal) check_literal:lit=',' idx=23 '4) '
                (check_literal) check_literal:After drop space:',' idx=23 '4) '
                (check_literal)   ',' != '4'
                (check_literal) check_literal: ret0
               (check_operator) check_operator:ret0

               (check_function) check_function: '4) '
               (check_function) check_function: ret0

               (check_atom) check_atom:

                (check_literal) check_literal:lit=' %' idx=23 '4) '
                (check_literal) dropping space
                (check_literal) check_literal:After drop space:'%' idx=23 '4) '
                (check_literal)   '%' != '4'
                (check_literal) check_literal: ret0

                (check_literal) check_literal:lit=' "' idx=23 '4) '
                (check_literal) dropping space
                (check_literal) check_literal:After drop space:'"' idx=23 '4) '
                (check_literal)   '"' != '4'
                (check_literal) check_literal: ret0

                (check_number) check_number:

                 (check_float) check_float:
                 (isfloatdigit) isfloatdigit:
                 (isfloatdigit) isfloatdigit:
                 (check_float) check_float: ret0

                 (check_integer) check_integer: '4) '
                 (check_integer) check_integer:ret1
                (check_number) check_number: ret1
               (check_atom) check_atom:ret1
              (check_eitem) check_eitem:ret1

              (check_eitem) check_eitem: ') '

               (check_operator) check_operator: ) 

                (check_literal) check_literal:lit=',' idx=24 ') '
                (check_literal) check_literal:After drop space:',' idx=24 ') '
                (check_literal)   ',' != ')'
                (check_literal) check_literal: ret0
               (check_operator) check_operator:ret0

               (check_function) check_function: ') '
               (check_function) check_function: ret0

               (check_atom) check_atom:

                (check_literal) check_literal:lit=' %' idx=24 ') '
                (check_literal) dropping space
                (check_literal) check_literal:After drop space:'%' idx=24 ') '
                (check_literal)   '%' != ')'
                (check_literal) check_literal: ret0

                (check_literal) check_literal:lit=' "' idx=24 ') '
                (check_literal) dropping space
                (check_literal) check_literal:After drop space:'"' idx=24 ') '
                (check_literal)   '"' != ')'
                (check_literal) check_literal: ret0

                (check_number) check_number:

                 (check_float) check_float:
                 (isfloatdigit) isfloatdigit:
                 (check_float) check_float: ret0

                 (check_integer) check_integer: ') '
                 (check_integer) check_integer:ret0
                (check_number) check_number: ret0

                (check_variable) check_variable:

                 (check_vname) check_vname ') ':
                 (check_vname) check_vname ret0 ') ':
                (check_variable) check_variable:ret0 
               (check_atom) check_atom:ret1

               (check_sub_expr) check_sub_expr:

                (check_literal) check_literal:lit=' (' idx=24 ') '
                (check_literal) dropping space
                (check_literal) check_literal:After drop space:'(' idx=24 ') '
                (check_literal)   '(' != ')'
                (check_literal) check_literal: ret0
               (check_sub_expr) check_sub_expr: ret0
              (check_eitem) check_eitem:ret0
             (check_expression) check_expression:ret1 ') '

             (check_literal) check_literal:lit=' ,' idx=24 ') '
             (check_literal) dropping space
             (check_literal) check_literal:After drop space:',' idx=24 ') '
             (check_literal)   ',' != ')'
             (check_literal) check_literal: ret0

             (check_literal) check_literal:lit=' )' idx=24 ') '
             (check_literal) dropping space
             (check_literal) check_literal:After drop space:')' idx=24 ') '
             (check_literal) check_literal:After while(): 
             (check_literal) check_literal:ret1 
            (check_variable) check_variable:ret1 

            (scan_variable) scan_variable:

             (scan_vname) scan_vname: 'B(1+2+3+4) '
             (scan_vname) scan_vname: ret1 'B'
            (scan_variable) scan_variable: '(1+2+3+4) ' vname='B'
            (scan_variable) scan_variable: Ary test '(1+2+3+4) '

             (check_literal) check_literal:lit='(' idx=16 '(1+2+3+4) '
             (check_literal) check_literal:After drop space:'(' idx=16 '(1+2+3+4) '
             (check_literal) check_literal:After while():1+2+3+4) 
             (check_literal) check_literal:ret1 

             (scan_literal) scan_literal:lit='(' '(1+2+3+4) '
             (scan_literal) scan_literal:After drop space:(1+2+3+4) 
             (scan_literal) scan_literal:while loop:(1+2+3+4) 
   Frst:0 T:'(' exptype:f
             (operator_precedence) 
+ is operator
(output_sub_start)
 Push:'('
             (op_stack_print) 
------------------
             (op_stack_print) 
Operator Stack     (4)

             (op_stack_print) 
000: PRINT type:17
             (op_stack_print) 
001: ( type:16
             (op_stack_print) 
002: + type:1
             (op_stack_print) 
003: ( type:16
             (op_stack_print) 
------------------

             (scan_literal) scan_literal:ret1
            (scan_variable) scan_variable: is array

             (scan_expression) scan_expression: '1+2+3+4) '

              (check_eitem) check_eitem: '1+2+3+4) '

               (check_operator) check_operator: 1+2+3+4) 

                (check_literal) check_literal:lit=',' idx=17 '1+2+3+4) '
                (check_literal) check_literal:After drop space:',' idx=17 '1+2+3+4) '
                (check_literal)   ',' != '1'
                (check_literal) check_literal: ret0
               (check_operator) check_operator:ret0

               (check_function) check_function: '1+2+3+4) '
               (check_function) check_function: ret0

               (check_atom) check_atom:

                (check_literal) check_literal:lit=' %' idx=17 '1+2+3+4) '
                (check_literal) dropping space
                (check_literal) check_literal:After drop space:'%' idx=17 '1+2+3+4) '
                (check_literal)   '%' != '1'
                (check_literal) check_literal: ret0

                (check_literal) check_literal:lit=' "' idx=17 '1+2+3+4) '
                (check_literal) dropping space
                (check_literal) check_literal:After drop space:'"' idx=17 '1+2+3+4) '
                (check_literal)   '"' != '1'
                (check_literal) check_literal: ret0

                (check_number) check_number:

                 (check_float) check_float:
                 (isfloatdigit) isfloatdigit:
                 (isfloatdigit) isfloatdigit:
                 (check_float) check_float: ret0

                 (check_integer) check_integer: '1+2+3+4) '
                 (check_integer) check_integer:ret1
                (check_number) check_number: ret1
               (check_atom) check_atom:ret1
              (check_eitem) check_eitem:ret1

              (scan_eitem) scan_eitem:

               (check_operator) check_operator: 1+2+3+4) 

                (check_literal) check_literal:lit=',' idx=17 '1+2+3+4) '
                (check_literal) check_literal:After drop space:',' idx=17 '1+2+3+4) '
                (check_literal)   ',' != '1'
                (check_literal) check_literal: ret0
               (check_operator) check_operator:ret0

               (check_function) check_function: '1+2+3+4) '
               (check_function) check_function: ret0

               (check_atom) check_atom:

                (check_literal) check_literal:lit=' %' idx=17 '1+2+3+4) '
                (check_literal) dropping space
                (check_literal) check_literal:After drop space:'%' idx=17 '1+2+3+4) '
                (check_literal)   '%' != '1'
                (check_literal) check_literal: ret0

                (check_literal) check_literal:lit=' "' idx=17 '1+2+3+4) '
                (check_literal) dropping space
                (check_literal) check_literal:After drop space:'"' idx=17 '1+2+3+4) '
                (check_literal)   '"' != '1'
                (check_literal) check_literal: ret0

                (check_number) check_number:

                 (check_float) check_float:
                 (isfloatdigit) isfloatdigit:
                 (isfloatdigit) isfloatdigit:
                 (check_float) check_float: ret0

                 (check_integer) check_integer: '1+2+3+4) '
                 (check_integer) check_integer:ret1
                (check_number) check_number: ret1
               (check_atom) check_atom:ret1

               (scan_atom) scan_atom:

                (check_literal) check_literal:lit=' %' idx=17 '1+2+3+4) '
                (check_literal) dropping space
                (check_literal) check_literal:After drop space:'%' idx=17 '1+2+3+4) '
                (check_literal)   '%' != '1'
                (check_literal) check_literal: ret0

                (check_literal) check_literal:lit=' "' idx=17 '1+2+3+4) '
                (check_literal) dropping space
                (check_literal) check_literal:After drop space:'"' idx=17 '1+2+3+4) '
                (check_literal)   '"' != '1'
                (check_literal) check_literal: ret0

                (check_number) check_number:

                 (check_float) check_float:
                 (isfloatdigit) isfloatdigit:
                 (isfloatdigit) isfloatdigit:
                 (check_float) check_float: ret0

                 (check_integer) check_integer: '1+2+3+4) '
                 (check_integer) check_integer:ret1
                (check_number) check_number: ret1

                (scan_number) scan_number:

                 (check_float) check_float:
                 (isfloatdigit) isfloatdigit:
                 (isfloatdigit) isfloatdigit:
                 (check_float) check_float: ret0

                 (check_integer) check_integer: '1+2+3+4) '
                 (check_integer) check_integer:ret1

                 (scan_integer) scan_integer:
                 (scan_integer) scan_integer:ret1
   Frst:0 T:'1' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U f )] i i 1
                (scan_integer) scan_integer:ret1  1
               (scan_atom) scan_atom:ret1

               (check_eitem) check_eitem: '+2+3+4) '

                (check_operator) check_operator: +2+3+4) 

                 (check_literal) check_literal:lit=',' idx=18 '+2+3+4) '
                 (check_literal) check_literal:After drop space:',' idx=18 '+2+3+4) '
                 (check_literal)   ',' != '+'
                 (check_literal) check_literal: ret0
                (check_operator) check_operator: ret1
               (check_eitem) check_eitem:ret1

               (scan_eitem) scan_eitem:

                (check_operator) check_operator: +2+3+4) 

                 (check_literal) check_literal:lit=',' idx=18 '+2+3+4) '
                 (check_literal) check_literal:After drop space:',' idx=18 '+2+3+4) '
                 (check_literal)   ',' != '+'
                 (check_literal) check_literal: ret0
                (check_operator) check_operator: ret1

                (scan_operator) scan_operator: '+2+3+4) '

                 (check_literal) check_literal:lit=',' idx=18 '+2+3+4) '
                 (check_literal) check_literal:After drop space:',' idx=18 '+2+3+4) '
                 (check_literal)   ',' != '+'
                 (check_literal) check_literal: ret0
                (scan_operator) scan_operator: ret1 '2+3+4) '
   Frst:0 T:'+' exptype:i
               (operator_precedence) 
+ is operator
'+' is operator
               (process_token) 
Token is operator o1 name:+ o2 name:(
               (process_token) 
opr1:3 opr2:0
Push 1
 Push:'+'
               (op_stack_print) 
------------------
               (op_stack_print) 
Operator Stack     (5)

               (op_stack_print) 
000: PRINT type:17
               (op_stack_print) 
001: ( type:16
               (op_stack_print) 
002: + type:1
               (op_stack_print) 
003: ( type:16
               (op_stack_print) 
004: + type:0
               (op_stack_print) 
------------------


                (check_eitem) check_eitem: '2+3+4) '

                 (check_operator) check_operator: 2+3+4) 

                  (check_literal) check_literal:lit=',' idx=19 '2+3+4) '
                  (check_literal) check_literal:After drop space:',' idx=19 '2+3+4) '
                  (check_literal)   ',' != '2'
                  (check_literal) check_literal: ret0
                 (check_operator) check_operator:ret0

                 (check_function) check_function: '2+3+4) '
                 (check_function) check_function: ret0

                 (check_atom) check_atom:

                  (check_literal) check_literal:lit=' %' idx=19 '2+3+4) '
                  (check_literal) dropping space
                  (check_literal) check_literal:After drop space:'%' idx=19 '2+3+4) '
                  (check_literal)   '%' != '2'
                  (check_literal) check_literal: ret0

                  (check_literal) check_literal:lit=' "' idx=19 '2+3+4) '
                  (check_literal) dropping space
                  (check_literal) check_literal:After drop space:'"' idx=19 '2+3+4) '
                  (check_literal)   '"' != '2'
                  (check_literal) check_literal: ret0

                  (check_number) check_number:

                   (check_float) check_float:
                   (isfloatdigit) isfloatdigit:
                   (isfloatdigit) isfloatdigit:
                   (check_float) check_float: ret0

                   (check_integer) check_integer: '2+3+4) '
                   (check_integer) check_integer:ret1
                  (check_number) check_number: ret1
                 (check_atom) check_atom:ret1
                (check_eitem) check_eitem:ret1

                (scan_eitem) scan_eitem:

                 (check_operator) check_operator: 2+3+4) 

                  (check_literal) check_literal:lit=',' idx=19 '2+3+4) '
                  (check_literal) check_literal:After drop space:',' idx=19 '2+3+4) '
                  (check_literal)   ',' != '2'
                  (check_literal) check_literal: ret0
                 (check_operator) check_operator:ret0

                 (check_function) check_function: '2+3+4) '
                 (check_function) check_function: ret0

                 (check_atom) check_atom:

                  (check_literal) check_literal:lit=' %' idx=19 '2+3+4) '
                  (check_literal) dropping space
                  (check_literal) check_literal:After drop space:'%' idx=19 '2+3+4) '
                  (check_literal)   '%' != '2'
                  (check_literal) check_literal: ret0

                  (check_literal) check_literal:lit=' "' idx=19 '2+3+4) '
                  (check_literal) dropping space
                  (check_literal) check_literal:After drop space:'"' idx=19 '2+3+4) '
                  (check_literal)   '"' != '2'
                  (check_literal) check_literal: ret0

                  (check_number) check_number:

                   (check_float) check_float:
                   (isfloatdigit) isfloatdigit:
                   (isfloatdigit) isfloatdigit:
                   (check_float) check_float: ret0

                   (check_integer) check_integer: '2+3+4) '
                   (check_integer) check_integer:ret1
                  (check_number) check_number: ret1
                 (check_atom) check_atom:ret1

                 (scan_atom) scan_atom:

                  (check_literal) check_literal:lit=' %' idx=19 '2+3+4) '
                  (check_literal) dropping space
                  (check_literal) check_literal:After drop space:'%' idx=19 '2+3+4) '
                  (check_literal)   '%' != '2'
                  (check_literal) check_literal: ret0

                  (check_literal) check_literal:lit=' "' idx=19 '2+3+4) '
                  (check_literal) dropping space
                  (check_literal) check_literal:After drop space:'"' idx=19 '2+3+4) '
                  (check_literal)   '"' != '2'
                  (check_literal) check_literal: ret0

                  (check_number) check_number:

                   (check_float) check_float:
                   (isfloatdigit) isfloatdigit:
                   (isfloatdigit) isfloatdigit:
                   (check_float) check_float: ret0

                   (check_integer) check_integer: '2+3+4) '
                   (check_integer) check_integer:ret1
                  (check_number) check_number: ret1

                  (scan_number) scan_number:

                   (check_float) check_float:
                   (isfloatdigit) isfloatdigit:
                   (isfloatdigit) isfloatdigit:
                   (check_float) check_float: ret0

                   (check_integer) check_integer: '2+3+4) '
                   (check_integer) check_integer:ret1

                   (scan_integer) scan_integer:
                   (scan_integer) scan_integer:ret1
   Frst:0 T:'2' exptype:i
                  (operator_precedence) 
+ is operator
modify_expression_type:Inittype:i Intype:i Outtype:i
(  output_integer) [i,(U f )] i i 2
                  (scan_integer) scan_integer:ret1  2
                 (scan_atom) scan_atom:ret1

                 (check_eitem) check_eitem: '+3+4) '

                  (check_operator) check_operator: +3+4) 

                   (check_literal) check_literal:lit=',' idx=20 '+3+4) '
                   (check_literal) check_literal:After drop space:',' idx=20 '+3+4) '
                   (check_literal)   ',' != '+'
                   (check_literal) check_literal: ret0
                  (check_operator) check_operator: ret1
                 (check_eitem) check_eitem:ret1

                 (scan_eitem) scan_eitem:

                  (check_operator) check_operator: +3+4) 

                   (check_literal) check_literal:lit=',' idx=20 '+3+4) '
                   (check_literal) check_literal:After drop space:',' idx=20 '+3+4) '
                   (check_literal)   ',' != '+'
                   (check_literal) check_literal: ret0
                  (check_operator) check_operator: ret1

                  (scan_operator) scan_operator: '+3+4) '

                   (check_literal) check_literal:lit=',' idx=20 '+3+4) '
                   (check_literal) check_literal:After drop space:',' idx=20 '+3+4) '
                   (check_literal)   ',' != '+'
                   (check_literal) check_literal: ret0
                  (scan_operator) scan_operator: ret1 '3+4) '
   Frst:0 T:'+' exptype:i
                 (operator_precedence) 
+ is operator
                 (operator_precedence) 
+ is operator
'+' is operator
                 (process_token) 
Token is operator o1 name:+ o2 name:+
                 (process_token) 
opr1:3 opr2:3
                 (operator_precedence) 
+ is operator
                 (operator_precedence) 
+ is operator
                 (operator_left_assoc) 
+ is operator
Push 1
 Push:'+'
                 (op_stack_print) 
------------------
                 (op_stack_print) 
Operator Stack     (6)

                 (op_stack_print) 
000: PRINT type:17
                 (op_stack_print) 
001: ( type:16
                 (op_stack_print) 
002: + type:1
                 (op_stack_print) 
003: ( type:16
                 (op_stack_print) 
004: + type:0
                 (op_stack_print) 
005: + type:0
                 (op_stack_print) 
------------------


                  (check_eitem) check_eitem: '3+4) '

                   (check_operator) check_operator: 3+4) 

                    (check_literal) check_literal:lit=',' idx=21 '3+4) '
                    (check_literal) check_literal:After drop space:',' idx=21 '3+4) '
                    (check_literal)   ',' != '3'
                    (check_literal) check_literal: ret0
                   (check_operator) check_operator:ret0

                   (check_function) check_function: '3+4) '
                   (check_function) check_function: ret0

                   (check_atom) check_atom:

                    (check_literal) check_literal:lit=' %' idx=21 '3+4) '
                    (check_literal) dropping space
                    (check_literal) check_literal:After drop space:'%' idx=21 '3+4) '
                    (check_literal)   '%' != '3'
                    (check_literal) check_literal: ret0

                    (check_literal) check_literal:lit=' "' idx=21 '3+4) '
                    (check_literal) dropping space
                    (check_literal) check_literal:After drop space:'"' idx=21 '3+4) '
                    (check_literal)   '"' != '3'
                    (check_literal) check_literal: ret0

                    (check_number) check_number:

                     (check_float) check_float:
                     (isfloatdigit) isfloatdigit:
                     (isfloatdigit) isfloatdigit:
                     (check_float) check_float: ret0

                     (check_integer) check_integer: '3+4) '
                     (check_integer) check_integer:ret1
                    (check_number) check_number: ret1
                   (check_atom) check_atom:ret1
                  (check_eitem) check_eitem:ret1

                  (scan_eitem) scan_eitem:

                   (check_operator) check_operator: 3+4) 

                    (check_literal) check_literal:lit=',' idx=21 '3+4) '
                    (check_literal) check_literal:After drop space:',' idx=21 '3+4) '
                    (check_literal)   ',' != '3'
                    (check_literal) check_literal: ret0
                   (check_operator) check_operator:ret0

                   (check_function) check_function: '3+4) '
                   (check_function) check_function: ret0

                   (check_atom) check_atom:

                    (check_literal) check_literal:lit=' %' idx=21 '3+4) '
                    (check_literal) dropping space
                    (check_literal) check_literal:After drop space:'%' idx=21 '3+4) '
                    (check_literal)   '%' != '3'
                    (check_literal) check_literal: ret0

                    (check_literal) check_literal:lit=' "' idx=21 '3+4) '
                    (check_literal) dropping space
                    (check_literal) check_literal:After drop space:'"' idx=21 '3+4) '
                    (check_literal)   '"' != '3'
                    (check_literal) check_literal: ret0

                    (check_number) check_number:

                     (check_float) check_float:
                     (isfloatdigit) isfloatdigit:
                     (isfloatdigit) isfloatdigit:
                     (check_float) check_float: ret0

                     (check_integer) check_integer: '3+4) '
                     (check_integer) check_integer:ret1
                    (check_number) check_number: ret1
                   (check_atom) check_atom:ret1

                   (scan_atom) scan_atom:

                    (check_literal) check_literal:lit=' %' idx=21 '3+4) '
                    (check_literal) dropping space
                    (check_literal) check_literal:After drop space:'%' idx=21 '3+4) '
                    (check_literal)   '%' != '3'
                    (check_literal) check_literal: ret0

                    (check_literal) check_literal:lit=' "' idx=21 '3+4) '
                    (check_literal) dropping space
                    (check_literal) check_literal:After drop space:'"' idx=21 '3+4) '
                    (check_literal)   '"' != '3'
                    (check_literal) check_literal: ret0

                    (check_number) check_number:

                     (check_float) check_float:
                     (isfloatdigit) isfloatdigit:
                     (isfloatdigit) isfloatdigit:
                     (check_float) check_float: ret0

                     (check_integer) check_integer: '3+4) '
                     (check_integer) check_integer:ret1
                    (check_number) check_number: ret1

                    (scan_number) scan_number:

                     (check_float) check_float:
                     (isfloatdigit) isfloatdigit:
                     (isfloatdigit) isfloatdigit:
                     (check_float) check_float: ret0

                     (check_integer) check_integer: '3+4) '
                     (check_integer) check_integer:ret1

                     (scan_integer) scan_integer:
                     (scan_integer) scan_integer:ret1
   Frst:0 T:'3' exptype:i
                    (operator_precedence) 
+ is operator
modify_expression_type:Inittype:i Intype:i Outtype:i
(  output_integer) [i,(U f )] i i 3
                    (scan_integer) scan_integer:ret1  3
                   (scan_atom) scan_atom:ret1

                   (check_eitem) check_eitem: '+4) '

                    (check_operator) check_operator: +4) 

                     (check_literal) check_literal:lit=',' idx=22 '+4) '
                     (check_literal) check_literal:After drop space:',' idx=22 '+4) '
                     (check_literal)   ',' != '+'
                     (check_literal) check_literal: ret0
                    (check_operator) check_operator: ret1
                   (check_eitem) check_eitem:ret1

                   (scan_eitem) scan_eitem:

                    (check_operator) check_operator: +4) 

                     (check_literal) check_literal:lit=',' idx=22 '+4) '
                     (check_literal) check_literal:After drop space:',' idx=22 '+4) '
                     (check_literal)   ',' != '+'
                     (check_literal) check_literal: ret0
                    (check_operator) check_operator: ret1

                    (scan_operator) scan_operator: '+4) '

                     (check_literal) check_literal:lit=',' idx=22 '+4) '
                     (check_literal) check_literal:After drop space:',' idx=22 '+4) '
                     (check_literal)   ',' != '+'
                     (check_literal) check_literal: ret0
                    (scan_operator) scan_operator: ret1 '4) '
   Frst:0 T:'+' exptype:i
                   (operator_precedence) 
+ is operator
                   (operator_precedence) 
+ is operator
'+' is operator
                   (process_token) 
Token is operator o1 name:+ o2 name:+
                   (process_token) 
opr1:3 opr2:3
                   (operator_precedence) 
+ is operator
                   (operator_precedence) 
+ is operator
                   (operator_left_assoc) 
+ is operator
Push 1
 Push:'+'
                   (op_stack_print) 
------------------
                   (op_stack_print) 
Operator Stack     (7)

                   (op_stack_print) 
000: PRINT type:17
                   (op_stack_print) 
001: ( type:16
                   (op_stack_print) 
002: + type:1
                   (op_stack_print) 
003: ( type:16
                   (op_stack_print) 
004: + type:0
                   (op_stack_print) 
005: + type:0
                   (op_stack_print) 
006: + type:0
                   (op_stack_print) 
------------------


                    (check_eitem) check_eitem: '4) '

                     (check_operator) check_operator: 4) 

                      (check_literal) check_literal:lit=',' idx=23 '4) '
                      (check_literal) check_literal:After drop space:',' idx=23 '4) '
                      (check_literal)   ',' != '4'
                      (check_literal) check_literal: ret0
                     (check_operator) check_operator:ret0

                     (check_function) check_function: '4) '
                     (check_function) check_function: ret0

                     (check_atom) check_atom:

                      (check_literal) check_literal:lit=' %' idx=23 '4) '
                      (check_literal) dropping space
                      (check_literal) check_literal:After drop space:'%' idx=23 '4) '
                      (check_literal)   '%' != '4'
                      (check_literal) check_literal: ret0

                      (check_literal) check_literal:lit=' "' idx=23 '4) '
                      (check_literal) dropping space
                      (check_literal) check_literal:After drop space:'"' idx=23 '4) '
                      (check_literal)   '"' != '4'
                      (check_literal) check_literal: ret0

                      (check_number) check_number:

                       (check_float) check_float:
                       (isfloatdigit) isfloatdigit:
                       (isfloatdigit) isfloatdigit:
                       (check_float) check_float: ret0

                       (check_integer) check_integer: '4) '
                       (check_integer) check_integer:ret1
                      (check_number) check_number: ret1
                     (check_atom) check_atom:ret1
                    (check_eitem) check_eitem:ret1

                    (scan_eitem) scan_eitem:

                     (check_operator) check_operator: 4) 

                      (check_literal) check_literal:lit=',' idx=23 '4) '
                      (check_literal) check_literal:After drop space:',' idx=23 '4) '
                      (check_literal)   ',' != '4'
                      (check_literal) check_literal: ret0
                     (check_operator) check_operator:ret0

                     (check_function) check_function: '4) '
                     (check_function) check_function: ret0

                     (check_atom) check_atom:

                      (check_literal) check_literal:lit=' %' idx=23 '4) '
                      (check_literal) dropping space
                      (check_literal) check_literal:After drop space:'%' idx=23 '4) '
                      (check_literal)   '%' != '4'
                      (check_literal) check_literal: ret0

                      (check_literal) check_literal:lit=' "' idx=23 '4) '
                      (check_literal) dropping space
                      (check_literal) check_literal:After drop space:'"' idx=23 '4) '
                      (check_literal)   '"' != '4'
                      (check_literal) check_literal: ret0

                      (check_number) check_number:

                       (check_float) check_float:
                       (isfloatdigit) isfloatdigit:
                       (isfloatdigit) isfloatdigit:
                       (check_float) check_float: ret0

                       (check_integer) check_integer: '4) '
                       (check_integer) check_integer:ret1
                      (check_number) check_number: ret1
                     (check_atom) check_atom:ret1

                     (scan_atom) scan_atom:

                      (check_literal) check_literal:lit=' %' idx=23 '4) '
                      (check_literal) dropping space
                      (check_literal) check_literal:After drop space:'%' idx=23 '4) '
                      (check_literal)   '%' != '4'
                      (check_literal) check_literal: ret0

                      (check_literal) check_literal:lit=' "' idx=23 '4) '
                      (check_literal) dropping space
                      (check_literal) check_literal:After drop space:'"' idx=23 '4) '
                      (check_literal)   '"' != '4'
                      (check_literal) check_literal: ret0

                      (check_number) check_number:

                       (check_float) check_float:
                       (isfloatdigit) isfloatdigit:
                       (isfloatdigit) isfloatdigit:
                       (check_float) check_float: ret0

                       (check_integer) check_integer: '4) '
                       (check_integer) check_integer:ret1
                      (check_number) check_number: ret1

                      (scan_number) scan_number:

                       (check_float) check_float:
                       (isfloatdigit) isfloatdigit:
                       (isfloatdigit) isfloatdigit:
                       (check_float) check_float: ret0

                       (check_integer) check_integer: '4) '
                       (check_integer) check_integer:ret1

                       (scan_integer) scan_integer:
                       (scan_integer) scan_integer:ret1
   Frst:0 T:'4' exptype:i
                      (operator_precedence) 
+ is operator
modify_expression_type:Inittype:i Intype:i Outtype:i
(  output_integer) [i,(U f )] i i 4
                      (scan_integer) scan_integer:ret1  4
                     (scan_atom) scan_atom:ret1

                     (check_eitem) check_eitem: ') '

                      (check_operator) check_operator: ) 

                       (check_literal) check_literal:lit=',' idx=24 ') '
                       (check_literal) check_literal:After drop space:',' idx=24 ') '
                       (check_literal)   ',' != ')'
                       (check_literal) check_literal: ret0
                      (check_operator) check_operator:ret0

                      (check_function) check_function: ') '
                      (check_function) check_function: ret0

                      (check_atom) check_atom:

                       (check_literal) check_literal:lit=' %' idx=24 ') '
                       (check_literal) dropping space
                       (check_literal) check_literal:After drop space:'%' idx=24 ') '
                       (check_literal)   '%' != ')'
                       (check_literal) check_literal: ret0

                       (check_literal) check_literal:lit=' "' idx=24 ') '
                       (check_literal) dropping space
                       (check_literal) check_literal:After drop space:'"' idx=24 ') '
                       (check_literal)   '"' != ')'
                       (check_literal) check_literal: ret0

                       (check_number) check_number:

                        (check_float) check_float:
                        (isfloatdigit) isfloatdigit:
                        (check_float) check_float: ret0

                        (check_integer) check_integer: ') '
                        (check_integer) check_integer:ret0
                       (check_number) check_number: ret0

                       (check_variable) check_variable:

                        (check_vname) check_vname ') ':
                        (check_vname) check_vname ret0 ') ':
                       (check_variable) check_variable:ret0 
                      (check_atom) check_atom:ret1

                      (check_sub_expr) check_sub_expr:

                       (check_literal) check_literal:lit=' (' idx=24 ') '
                       (check_literal) dropping space
                       (check_literal) check_literal:After drop space:'(' idx=24 ') '
                       (check_literal)   '(' != ')'
                       (check_literal) check_literal: ret0
                      (check_sub_expr) check_sub_expr: ret0
                     (check_eitem) check_eitem:ret0
                    (scan_expression) scan_expression: ret1 ') '

                    (check_literal) check_literal:lit=' ,' idx=24 ') '
                    (check_literal) dropping space
                    (check_literal) check_literal:After drop space:',' idx=24 ') '
                    (check_literal)   ',' != ')'
                    (check_literal) check_literal: ret0

                    (scan_literal) scan_literal:lit=' )' ') '
                    (scan_literal) scan_literal:After drop space:) 
                    (scan_literal) scan_literal:while loop:) 
   Frst:0 T:')' exptype:i
                    (operator_precedence) 
+ is operator
                    (process_token) 
Pop 3
Pop '+'
                    (op_stack_print) 
------------------
                    (op_stack_print) 
Operator Stack     (6)

                    (op_stack_print) 
000: PRINT type:17
                    (op_stack_print) 
001: ( type:16
                    (op_stack_print) 
002: + type:1
                    (op_stack_print) 
003: ( type:16
                    (op_stack_print) 
004: + type:0
                    (op_stack_print) 
005: + type:0
                    (op_stack_print) 
------------------

( output_operator) [i,(U f )] i i +
                    (token_is_function) 
token_is_function:
                    (token_is_function) 
token_is_function:+ is not function
                    (process_token) 
Pop 3
Pop '+'
                    (op_stack_print) 
------------------
                    (op_stack_print) 
Operator Stack     (5)

                    (op_stack_print) 
000: PRINT type:17
                    (op_stack_print) 
001: ( type:16
                    (op_stack_print) 
002: + type:1
                    (op_stack_print) 
003: ( type:16
                    (op_stack_print) 
004: + type:0
                    (op_stack_print) 
------------------

( output_operator) [i,(U f )] i i +
                    (token_is_function) 
token_is_function:
                    (token_is_function) 
token_is_function:+ is not function
                    (process_token) 
Pop 3
Pop '+'
                    (op_stack_print) 
------------------
                    (op_stack_print) 
Operator Stack     (4)

                    (op_stack_print) 
000: PRINT type:17
                    (op_stack_print) 
001: ( type:16
                    (op_stack_print) 
002: + type:1
                    (op_stack_print) 
003: ( type:16
                    (op_stack_print) 
------------------

( output_operator) [i,(U f )] i i +
                    (token_is_function) 
token_is_function:
                    (token_is_function) 
token_is_function:+ is not function
Pop 4
Pop '('
                    (op_stack_print) 
------------------
                    (op_stack_print) 
Operator Stack     (3)

                    (op_stack_print) 
000: PRINT type:17
                    (op_stack_print) 
001: ( type:16
                    (op_stack_print) 
002: + type:1
                    (op_stack_print) 
------------------

(  output_sub_end)
                    (token_is_function) 
token_is_function:
                    (token_is_function) 
token_is_function:+ is not function
(  output_sub_end)
                    (scan_literal) scan_literal:ret1
                   (scan_variable) scan_variable:ret1 vname='B' is str:0 int:0 flt:1 ary:1
   Frst:0 T:'B' exptype:f
                  (operator_precedence) 
+ is operator
                  (token_is_function) 
token_is_function:
                  (token_is_function) 
token_is_function:B is not function
token_is_variable: tok:'B'
                  (token_is_function) 
token_is_function:
                  (token_is_function) 
token_is_function:B is not function
                  (init_get_name) 
init_get_name:'B'
                  (init_get_name) 
init_get_name:'B'
                  (get_name) 
get_name:gn:'B'
process_token:type:f req_type:?
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,(U )] f f B
                  (print_var_info) 
VAR INFO: '                 B' gbl:0 ref:1 int:0 flt:1 str:0 ary:1 max_str:0 max_ary:0 num_ind:1
                  (scan_atom) scan_atom:ret1

                  (check_eitem) check_eitem: ' '

                   (check_operator) check_operator:  

                    (check_literal) check_literal:lit=',' idx=26 ''
                    (check_literal) check_literal:After drop space:',' idx=26 ''
                    (check_literal) check_literal  ret0 Empty test string
                   (check_operator) check_operator:ret0

                   (check_function) check_function: ''
                   (check_function) check_function: ret0

                   (check_atom) check_atom:

                    (check_literal) check_literal:lit=' %' idx=25 ' '
                    (check_literal) dropping space
                    (check_literal) check_literal:After drop space:'%' idx=26 ''
                    (check_literal) check_literal  ret0 Empty test string

                    (check_literal) check_literal:lit=' "' idx=25 ' '
                    (check_literal) dropping space
                    (check_literal) check_literal:After drop space:'"' idx=26 ''
                    (check_literal) check_literal  ret0 Empty test string

                    (check_number) check_number:

                     (check_float) check_float:
                     (isfloatdigit) isfloatdigit:
                     (check_float) check_float: ret0

                     (check_integer) check_integer: ''
                     (check_integer) check_integer:ret0
                    (check_number) check_number: ret0

                    (check_variable) check_variable:

                     (check_vname) check_vname '':
                     (check_vname) check_vname ret0 '':
                    (check_variable) check_variable:ret0 
                   (check_atom) check_atom:ret1

                   (check_sub_expr) check_sub_expr:

                    (check_literal) check_literal:lit=' (' idx=25 ' '
                    (check_literal) dropping space
                    (check_literal) check_literal:After drop space:'(' idx=26 ''
                    (check_literal) check_literal  ret0 Empty test string
                   (check_sub_expr) check_sub_expr: ret0
                  (check_eitem) check_eitem:ret0
                 (scan_expression) scan_expression: ret1 ' '
                (scan_command) scan_command: ret1 =>'PRINT'
               (scan_command) 
ENDEXP
   Frst:0 T:')' exptype:f
               (operator_precedence) 
+ is operator
               (process_token) 
Pop 3
Pop '+'
               (op_stack_print) 
------------------
               (op_stack_print) 
Operator Stack     (2)

               (op_stack_print) 
000: PRINT type:17
               (op_stack_print) 
001: ( type:16
               (op_stack_print) 
------------------

( output_operator) [f,(U )] f f +
               (token_is_function) 
token_is_function:
               (token_is_function) 
token_is_function:+ is not function
Pop 4
Pop '('
               (op_stack_print) 
------------------
               (op_stack_print) 
Operator Stack     (1)

               (op_stack_print) 
000: PRINT type:17
               (op_stack_print) 
------------------

(  output_sub_end)
               (token_is_function) 
token_is_function:
               (token_is_function) PRINT is function
Pop 5
Pop 'PRINT'
               (op_stack_print) 
------------------
               (op_stack_print) 
Operator Stack     (0)

               (op_stack_print) 
------------------

( output_function) [f,(U )] v v PRINT
(  output_sub_end)
Finalise stack
               (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '7'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '*'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '+'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'A'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '1'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '4'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '+'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '+'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '+'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'B'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f '+'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
 BE:

Type Check Stack (0)

 BE:

Type Check Stack (0)

 BE:2
type_check_stack_push: '2'
               (type_check_stack_print) 
------------------
               (type_check_stack_print) 
Type Check Stack     (1)

               (type_check_stack_print) 
000: '2' type:0
               (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '2' type:i (0)
 BE:3
type_check_stack_push: '3'
               (type_check_stack_print) 
------------------
               (type_check_stack_print) 
Type Check Stack     (2)

               (type_check_stack_print) 
000: '2' type:0
               (type_check_stack_print) 
001: '3' type:0
               (type_check_stack_print) 
------------------


Type Check Stack (2)

000: '2' type:i (0)
001: '3' type:i (0)
 BE:7
type_check_stack_push: '7'
               (type_check_stack_print) 
------------------
               (type_check_stack_print) 
Type Check Stack     (3)

               (type_check_stack_print) 
000: '2' type:0
               (type_check_stack_print) 
001: '3' type:0
               (type_check_stack_print) 
002: '7' type:0
               (type_check_stack_print) 
------------------


Type Check Stack (3)

000: '2' type:i (0)
001: '3' type:i (0)
002: '7' type:i (0)
 BE:*
BUFF_ID_OPERATOR
Found operator *
type_check_stack_pop: '7'
               (type_check_stack_print) 
------------------
               (type_check_stack_print) 
Type Check Stack     (2)

               (type_check_stack_print) 
000: '2' type:0
               (type_check_stack_print) 
001: '3' type:0
               (type_check_stack_print) 
------------------

type_check_stack_pop: '3'
               (type_check_stack_print) 
------------------
               (type_check_stack_print) 
Type Check Stack     (1)

               (type_check_stack_print) 
000: '2' type:0
               (type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
               (type_check_stack_print) 
------------------
               (type_check_stack_print) 
Type Check Stack     (2)

               (type_check_stack_print) 
000: '2' type:0
               (type_check_stack_print) 
001: '000' type:0
               (type_check_stack_print) 
------------------


Type Check Stack (2)

000: '2' type:i (0)
001: '000' type:i (0)
 BE:+
BUFF_ID_OPERATOR
Found operator +
type_check_stack_pop: '000'
               (type_check_stack_print) 
------------------
               (type_check_stack_print) 
Type Check Stack     (1)

               (type_check_stack_print) 
000: '2' type:0
               (type_check_stack_print) 
------------------

type_check_stack_pop: '2'
               (type_check_stack_print) 
------------------
               (type_check_stack_print) 
Type Check Stack     (0)

               (type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
               (type_check_stack_print) 
------------------
               (type_check_stack_print) 
Type Check Stack     (1)

               (type_check_stack_print) 
000: '000' type:0
               (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:i (0)
 BE:

Type Check Stack (1)

000: '000' type:i (0)
 BE:

Type Check Stack (1)

000: '000' type:i (0)
 BE:A
type_check_stack_push: 'A'
               (type_check_stack_print) 
------------------
               (type_check_stack_print) 
Type Check Stack     (2)

               (type_check_stack_print) 
000: '000' type:0
               (type_check_stack_print) 
001: 'A' type:1
               (type_check_stack_print) 
------------------


Type Check Stack (2)

000: '000' type:i (0)
001: 'A' type:f (1)
 BE:

Type Check Stack (2)

000: '000' type:i (0)
001: 'A' type:f (1)
 BE:1
type_check_stack_push: '1'
               (type_check_stack_print) 
------------------
               (type_check_stack_print) 
Type Check Stack     (3)

               (type_check_stack_print) 
000: '000' type:0
               (type_check_stack_print) 
001: 'A' type:1
               (type_check_stack_print) 
002: '1' type:0
               (type_check_stack_print) 
------------------


Type Check Stack (3)

000: '000' type:i (0)
001: 'A' type:f (1)
002: '1' type:i (0)
 BE:2
type_check_stack_push: '2'
               (type_check_stack_print) 
------------------
               (type_check_stack_print) 
Type Check Stack     (4)

               (type_check_stack_print) 
000: '000' type:0
               (type_check_stack_print) 
001: 'A' type:1
               (type_check_stack_print) 
002: '1' type:0
               (type_check_stack_print) 
003: '2' type:0
               (type_check_stack_print) 
------------------


Type Check Stack (4)

000: '000' type:i (0)
001: 'A' type:f (1)
002: '1' type:i (0)
003: '2' type:i (0)
 BE:3
type_check_stack_push: '3'
               (type_check_stack_print) 
------------------
               (type_check_stack_print) 
Type Check Stack     (5)

               (type_check_stack_print) 
000: '000' type:0
               (type_check_stack_print) 
001: 'A' type:1
               (type_check_stack_print) 
002: '1' type:0
               (type_check_stack_print) 
003: '2' type:0
               (type_check_stack_print) 
004: '3' type:0
               (type_check_stack_print) 
------------------


Type Check Stack (5)

000: '000' type:i (0)
001: 'A' type:f (1)
002: '1' type:i (0)
003: '2' type:i (0)
004: '3' type:i (0)
 BE:4
type_check_stack_push: '4'
               (type_check_stack_print) 
------------------
               (type_check_stack_print) 
Type Check Stack     (6)

               (type_check_stack_print) 
000: '000' type:0
               (type_check_stack_print) 
001: 'A' type:1
               (type_check_stack_print) 
002: '1' type:0
               (type_check_stack_print) 
003: '2' type:0
               (type_check_stack_print) 
004: '3' type:0
               (type_check_stack_print) 
005: '4' type:0
               (type_check_stack_print) 
------------------


Type Check Stack (6)

000: '000' type:i (0)
001: 'A' type:f (1)
002: '1' type:i (0)
003: '2' type:i (0)
004: '3' type:i (0)
005: '4' type:i (0)
 BE:+
BUFF_ID_OPERATOR
Found operator +
type_check_stack_pop: '4'
               (type_check_stack_print) 
------------------
               (type_check_stack_print) 
Type Check Stack     (5)

               (type_check_stack_print) 
000: '000' type:0
               (type_check_stack_print) 
001: 'A' type:1
               (type_check_stack_print) 
002: '1' type:0
               (type_check_stack_print) 
003: '2' type:0
               (type_check_stack_print) 
004: '3' type:0
               (type_check_stack_print) 
------------------

type_check_stack_pop: '3'
               (type_check_stack_print) 
------------------
               (type_check_stack_print) 
Type Check Stack     (4)

               (type_check_stack_print) 
000: '000' type:0
               (type_check_stack_print) 
001: 'A' type:1
               (type_check_stack_print) 
002: '1' type:0
               (type_check_stack_print) 
003: '2' type:0
               (type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
               (type_check_stack_print) 
------------------
               (type_check_stack_print) 
Type Check Stack     (5)

               (type_check_stack_print) 
000: '000' type:0
               (type_check_stack_print) 
001: 'A' type:1
               (type_check_stack_print) 
002: '1' type:0
               (type_check_stack_print) 
003: '2' type:0
               (type_check_stack_print) 
004: '000' type:0
               (type_check_stack_print) 
------------------


Type Check Stack (5)

000: '000' type:i (0)
001: 'A' type:f (1)
002: '1' type:i (0)
003: '2' type:i (0)
004: '000' type:i (0)
 BE:+
BUFF_ID_OPERATOR
Found operator +
type_check_stack_pop: '000'
               (type_check_stack_print) 
------------------
               (type_check_stack_print) 
Type Check Stack     (4)

               (type_check_stack_print) 
000: '000' type:0
               (type_check_stack_print) 
001: 'A' type:1
               (type_check_stack_print) 
002: '1' type:0
               (type_check_stack_print) 
003: '2' type:0
               (type_check_stack_print) 
------------------

type_check_stack_pop: '2'
               (type_check_stack_print) 
------------------
               (type_check_stack_print) 
Type Check Stack     (3)

               (type_check_stack_print) 
000: '000' type:0
               (type_check_stack_print) 
001: 'A' type:1
               (type_check_stack_print) 
002: '1' type:0
               (type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
               (type_check_stack_print) 
------------------
               (type_check_stack_print) 
Type Check Stack     (4)

               (type_check_stack_print) 
000: '000' type:0
               (type_check_stack_print) 
001: 'A' type:1
               (type_check_stack_print) 
002: '1' type:0
               (type_check_stack_print) 
003: '000' type:0
               (type_check_stack_print) 
------------------


Type Check Stack (4)

000: '000' type:i (0)
001: 'A' type:f (1)
002: '1' type:i (0)
003: '000' type:i (0)
 BE:+
BUFF_ID_OPERATOR
Found operator +
type_check_stack_pop: '000'
               (type_check_stack_print) 
------------------
               (type_check_stack_print) 
Type Check Stack     (3)

               (type_check_stack_print) 
000: '000' type:0
               (type_check_stack_print) 
001: 'A' type:1
               (type_check_stack_print) 
002: '1' type:0
               (type_check_stack_print) 
------------------

type_check_stack_pop: '1'
               (type_check_stack_print) 
------------------
               (type_check_stack_print) 
Type Check Stack     (2)

               (type_check_stack_print) 
000: '000' type:0
               (type_check_stack_print) 
001: 'A' type:1
               (type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
               (type_check_stack_print) 
------------------
               (type_check_stack_print) 
Type Check Stack     (3)

               (type_check_stack_print) 
000: '000' type:0
               (type_check_stack_print) 
001: 'A' type:1
               (type_check_stack_print) 
002: '000' type:0
               (type_check_stack_print) 
------------------


Type Check Stack (3)

000: '000' type:i (0)
001: 'A' type:f (1)
002: '000' type:i (0)
 BE:

Type Check Stack (3)

000: '000' type:i (0)
001: 'A' type:f (1)
002: '000' type:i (0)
 BE:

Type Check Stack (3)

000: '000' type:i (0)
001: 'A' type:f (1)
002: '000' type:i (0)
 BE:B
type_check_stack_push: 'B'
               (type_check_stack_print) 
------------------
               (type_check_stack_print) 
Type Check Stack     (4)

               (type_check_stack_print) 
000: '000' type:0
               (type_check_stack_print) 
001: 'A' type:1
               (type_check_stack_print) 
002: '000' type:0
               (type_check_stack_print) 
003: 'B' type:1
               (type_check_stack_print) 
------------------


Type Check Stack (4)

000: '000' type:i (0)
001: 'A' type:f (1)
002: '000' type:i (0)
003: 'B' type:f (1)
 BE:+
BUFF_ID_OPERATOR
Found operator +
type_check_stack_pop: 'B'
               (type_check_stack_print) 
------------------
               (type_check_stack_print) 
Type Check Stack     (3)

               (type_check_stack_print) 
000: '000' type:0
               (type_check_stack_print) 
001: 'A' type:1
               (type_check_stack_print) 
002: '000' type:0
               (type_check_stack_print) 
------------------

type_check_stack_pop: '000'
               (type_check_stack_print) 
------------------
               (type_check_stack_print) 
Type Check Stack     (2)

               (type_check_stack_print) 
000: '000' type:0
               (type_check_stack_print) 
001: 'A' type:1
               (type_check_stack_print) 
------------------

 Mutable type 1 0
 Autoconversion
 --------------
 Op1: type:1 req type:1
 Op2: type:0 req type:0
 BE:  type:1 req type:1
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:i '7'  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 5 4
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     i rq:i '+'  2: 6 3
(dump_exp_buffer2) N8 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_VARIABLE     f rq:f 'A'  0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N12 EXP_BUFF_ID_INTEGER      i rq:i '1'  0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
(dump_exp_buffer2) N15 EXP_BUFF_ID_INTEGER      i rq:i '4'  0:
(dump_exp_buffer2) N16 EXP_BUFF_ID_OPERATOR     i rq:i '+'  2: 15 14
(dump_exp_buffer2) N17 EXP_BUFF_ID_OPERATOR     i rq:i '+'  2: 16 13
(dump_exp_buffer2) N18 EXP_BUFF_ID_OPERATOR     i rq:i '+'  2: 17 12
(dump_exp_buffer2) N19 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N20 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N21 EXP_BUFF_ID_VARIABLE     f rq:f 'B'  0:
=================
 Insert after 18 exp_buffer2_i:21
   Found at i:17
   Copied 20 to 21:
   Copied 19 to 20:
   Copied 18 to 19:
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:i '7'  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 5 4
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     i rq:i '+'  2: 6 3
(dump_exp_buffer2) N8 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_VARIABLE     f rq:f 'A'  0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N12 EXP_BUFF_ID_INTEGER      i rq:i '1'  0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
(dump_exp_buffer2) N15 EXP_BUFF_ID_INTEGER      i rq:i '4'  0:
(dump_exp_buffer2) N16 EXP_BUFF_ID_OPERATOR     i rq:i '+'  2: 15 14
(dump_exp_buffer2) N17 EXP_BUFF_ID_OPERATOR     i rq:i '+'  2: 16 13
(dump_exp_buffer2) N18 EXP_BUFF_ID_OPERATOR     i rq:i '+'  2: 17 12
(dump_exp_buffer2) N23 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 21 18
(dump_exp_buffer2) N19 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N20 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N21 EXP_BUFF_ID_VARIABLE     f rq:f 'B'  0:
=================
type_check_stack_push: '000'
               (type_check_stack_print) 
------------------
               (type_check_stack_print) 
Type Check Stack     (3)

               (type_check_stack_print) 
000: '000' type:0
               (type_check_stack_print) 
001: 'A' type:1
               (type_check_stack_print) 
002: '000' type:1
               (type_check_stack_print) 
------------------


Type Check Stack (3)

000: '000' type:i (0)
001: 'A' type:f (1)
002: '000' type:f (1)
 BE:

Type Check Stack (3)

000: '000' type:i (0)
001: 'A' type:f (1)
002: '000' type:f (1)
 BE:PRINT
FN: 1 args
               (function_return_type) 
function_return_type: 'PRINT' =>v
               (function_return_type) 
function_return_type: 'PRINT' =>17
ret_type;17 v
typecheck_expression:Ret type of PRINT : v
type_check_stack_pop: '000'
               (type_check_stack_print) 
------------------
               (type_check_stack_print) 
Type Check Stack     (2)

               (type_check_stack_print) 
000: '000' type:0
               (type_check_stack_print) 
001: 'A' type:1
               (type_check_stack_print) 
------------------

FN ARG 0 ri 000 1(f)  Arg not OK
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:i '7'  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 5 4
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     i rq:i '+'  2: 6 3
(dump_exp_buffer2) N8 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_VARIABLE     f rq:f 'A'  0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N12 EXP_BUFF_ID_INTEGER      i rq:i '1'  0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
(dump_exp_buffer2) N15 EXP_BUFF_ID_INTEGER      i rq:i '4'  0:
(dump_exp_buffer2) N16 EXP_BUFF_ID_OPERATOR     i rq:i '+'  2: 15 14
(dump_exp_buffer2) N17 EXP_BUFF_ID_OPERATOR     i rq:i '+'  2: 16 13
(dump_exp_buffer2) N18 EXP_BUFF_ID_OPERATOR     i rq:i '+'  2: 17 12
(dump_exp_buffer2) N23 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 21 18
(dump_exp_buffer2) N19 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N20 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N21 EXP_BUFF_ID_VARIABLE     f rq:f 'B'  0:
(dump_exp_buffer2) N22 EXP_BUFF_ID_OPERATOR     f rq:f '+'  2: 21 18
(dump_exp_buffer2) N24 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
 Insert after 22 exp_buffer2_i:24
   Found at i:22
   Copied 23 to 24:
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:i '7'  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 5 4
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     i rq:i '+'  2: 6 3
(dump_exp_buffer2) N8 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_VARIABLE     f rq:f 'A'  0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N12 EXP_BUFF_ID_INTEGER      i rq:i '1'  0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
(dump_exp_buffer2) N15 EXP_BUFF_ID_INTEGER      i rq:i '4'  0:
(dump_exp_buffer2) N16 EXP_BUFF_ID_OPERATOR     i rq:i '+'  2: 15 14
(dump_exp_buffer2) N17 EXP_BUFF_ID_OPERATOR     i rq:i '+'  2: 16 13
(dump_exp_buffer2) N18 EXP_BUFF_ID_OPERATOR     i rq:i '+'  2: 17 12
(dump_exp_buffer2) N23 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 21 18
(dump_exp_buffer2) N19 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N20 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N21 EXP_BUFF_ID_VARIABLE     f rq:f 'B'  0:
(dump_exp_buffer2) N22 EXP_BUFF_ID_OPERATOR     f rq:f '+'  2: 21 18
(dump_exp_buffer2) N26 EXP_BUFF_ID_AUTOCON      v rq:v 'autocon f->i'  0:
(dump_exp_buffer2) N24 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
type_check_stack_push: '000'
               (type_check_stack_print) 
------------------
               (type_check_stack_print) 
Type Check Stack     (3)

               (type_check_stack_print) 
000: '000' type:0
               (type_check_stack_print) 
001: 'A' type:1
               (type_check_stack_print) 
002: '000' type:17
               (type_check_stack_print) 
------------------


Type Check Stack (3)

000: '000' type:i (0)
001: 'A' type:f (1)
002: '000' type:v (17)
 BE:

Type Check Stack (3)

000: '000' type:i (0)
001: 'A' type:f (1)
002: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '7'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '*'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '+'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'A'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '1'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '4'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '+'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '+'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '+'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'B'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f '+'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:i '7'  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 5 4
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     i rq:i '+'  2: 6 3
(dump_exp_buffer2) N8 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_VARIABLE     f rq:f 'A'  0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N12 EXP_BUFF_ID_INTEGER      i rq:i '1'  0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
(dump_exp_buffer2) N15 EXP_BUFF_ID_INTEGER      i rq:i '4'  0:
(dump_exp_buffer2) N16 EXP_BUFF_ID_OPERATOR     i rq:i '+'  2: 15 14
(dump_exp_buffer2) N17 EXP_BUFF_ID_OPERATOR     i rq:i '+'  2: 16 13
(dump_exp_buffer2) N18 EXP_BUFF_ID_OPERATOR     i rq:i '+'  2: 17 12
(dump_exp_buffer2) N23 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 21 18
(dump_exp_buffer2) N19 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N20 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N21 EXP_BUFF_ID_VARIABLE     f rq:f 'B'  0:
(dump_exp_buffer2) N22 EXP_BUFF_ID_OPERATOR     f rq:f '+'  2: 21 18
(dump_exp_buffer2) N26 EXP_BUFF_ID_AUTOCON      v rq:v 'autocon f->i'  0:
(dump_exp_buffer2) N24 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N25 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
(dump_exp_buffer2) N27 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
               (process_expression_types) 
==INFIX==

infix_stack_push: '2'
infix_stack_push: '3'
infix_stack_push: '7'
infix_stack_pop: '7'
infix_stack_pop: '3'
infix_stack_push: '(3 * 7)'
infix_stack_pop: '(3 * 7)'
infix_stack_pop: '2'
infix_stack_push: '(2 + (3 * 7))'
Var: A ary:1
infix_stack_pop: '(2 + (3 * 7))'
infix_stack_push: 'A((2 + (3 * 7)))'
infix_stack_push: '1'
infix_stack_push: '2'
infix_stack_push: '3'
infix_stack_push: '4'
infix_stack_pop: '4'
infix_stack_pop: '3'
infix_stack_push: '(3 + 4)'
infix_stack_pop: '(3 + 4)'
infix_stack_pop: '2'
infix_stack_push: '(2 + (3 + 4))'
infix_stack_pop: '(2 + (3 + 4))'
infix_stack_pop: '1'
infix_stack_push: '(1 + (2 + (3 + 4)))'
Var: B ary:1
infix_stack_pop: '(1 + (2 + (3 + 4)))'
infix_stack_push: 'B((1 + (2 + (3 + 4))))'
infix_stack_pop: 'B((1 + (2 + (3 + 4))))'
infix_stack_pop: 'A((2 + (3 * 7)))'
infix_stack_push: '(A((2 + (3 * 7))) + B((1 + (2 + (3 + 4)))))'
infix_stack_pop: '(A((2 + (3 * 7))) + B((1 + (2 + (3 + 4)))))'
infix_stack_push: 'PRINT((A((2 + (3 * 7))) + B((1 + (2 + (3 + 4))))) )'
infix_stack_pop: 'PRINT((A((2 + (3 * 7))) + B((1 + (2 + (3 + 4))))) )'
               (process_expression_types) ==PRINT((A((2 + (3 * 7))) + B((1 + (2 + (3 + 4))))) )==
               (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N3 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
(    output_qcode) N4 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(    output_qcode) N5 EXP_BUFF_ID_INTEGER      i rq:i 7  0:
(    output_qcode) N6 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 5 4
(    output_qcode) N7 EXP_BUFF_ID_OPERATOR     i rq:i +  2: 6 3
(    output_qcode) N8 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N9 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N10 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
(    output_qcode) N11 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N12 EXP_BUFF_ID_INTEGER      i rq:i 1  0:
(    output_qcode) N13 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
(    output_qcode) N14 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(    output_qcode) N15 EXP_BUFF_ID_INTEGER      i rq:i 4  0:
(    output_qcode) N16 EXP_BUFF_ID_OPERATOR     i rq:i +  2: 15 14
(    output_qcode) N17 EXP_BUFF_ID_OPERATOR     i rq:i +  2: 16 13
(    output_qcode) N18 EXP_BUFF_ID_OPERATOR     i rq:i +  2: 17 12
(    output_qcode) N23 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 21 18
(    output_qcode) N19 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N20 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N21 EXP_BUFF_ID_VARIABLE     f rq:f B  0:
(    output_qcode) N22 EXP_BUFF_ID_OPERATOR     f rq:f +  2: 21 18
(    output_qcode) N26 EXP_BUFF_ID_AUTOCON      v rq:v autocon f->i  0:
(    output_qcode) N24 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N25 EXP_BUFF_ID_FUNCTION     v rq:v PRINT  0:
(    output_qcode) N27 EXP_BUFF_ID_SUB_END      U rq:i   0:

                (check_literal) check_literal:lit=':' idx=26 ''
                (check_literal) check_literal:After drop space:':' idx=26 ''
                (check_literal) check_literal  ret0 Empty test string
               (translate_file) 
cline scanned OK
**********************************
**A= A + (2*3+3*Z%-   ABC%*1.1) **
**********************************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'A= A + (2*3+3*Z%-   ABC%*1.1) ':
     (check_vname) check_vname ret1 '= A + (2*3+3*Z%-   ABC%*1.1) ':
    (check_variable) check_variable: '= A + (2*3+3*Z%-   ABC%*1.1) '
    (check_variable) check_variable: Ary test '= A + (2*3+3*Z%-   ABC%*1.1) '

     (check_literal) check_literal:lit='(' idx=1 '= A + (2*3+3*Z%-   ABC%*1.1) '
     (check_literal) check_literal:After drop space:'(' idx=1 '= A + (2*3+3*Z%-   ABC%*1.1) '
     (check_literal)   '(' != '='
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=1 '= A + (2*3+3*Z%-   ABC%*1.1) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=1 '= A + (2*3+3*Z%-   ABC%*1.1) '
   (check_literal) check_literal:After while(): A + (2*3+3*Z%-   ABC%*1.1) 
   (check_literal) check_literal:ret1 

   (check_expression) check_expression: 'A + (2*3+3*Z%-   ABC%*1.1) '

    (check_eitem) check_eitem: 'A + (2*3+3*Z%-   ABC%*1.1) '

     (check_operator) check_operator: A + (2*3+3*Z%-   ABC%*1.1) 

      (check_literal) check_literal:lit=',' idx=3 'A + (2*3+3*Z%-   ABC%*1.1) '
      (check_literal) check_literal:After drop space:',' idx=3 'A + (2*3+3*Z%-   ABC%*1.1) '
      (check_literal)   ',' != 'A'
      (check_literal) check_literal: ret0
     (check_operator) check_operator:ret0

     (check_function) check_function: 'A + (2*3+3*Z%-   ABC%*1.1) '
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=3 'A + (2*3+3*Z%-   ABC%*1.1) '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=3 'A + (2*3+3*Z%-   ABC%*1.1) '
      (check_literal)   '%' != 'A'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=3 'A + (2*3+3*Z%-   ABC%*1.1) '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=3 'A + (2*3+3*Z%-   ABC%*1.1) '
      (check_literal)   '"' != 'A'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: 'A + (2*3+3*Z%-   ABC%*1.1) '
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname 'A + (2*3+3*Z%-   ABC%*1.1) ':
       (check_vname) check_vname ret1 ' + (2*3+3*Z%-   ABC%*1.1) ':
      (check_variable) check_variable: ' + (2*3+3*Z%-   ABC%*1.1) '
      (check_variable) check_variable: Ary test ' + (2*3+3*Z%-   ABC%*1.1) '

       (check_literal) check_literal:lit='(' idx=4 ' + (2*3+3*Z%-   ABC%*1.1) '
       (check_literal) check_literal:After drop space:'(' idx=4 ' + (2*3+3*Z%-   ABC%*1.1) '
       (check_literal)   '(' != ' '
       (check_literal) check_literal: ret0
      (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
     (check_variable) check_variable:ret1 
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: ' + (2*3+3*Z%-   ABC%*1.1) '

    (check_operator) check_operator:  + (2*3+3*Z%-   ABC%*1.1) 

     (check_literal) check_literal:lit=',' idx=5 '+ (2*3+3*Z%-   ABC%*1.1) '
     (check_literal) check_literal:After drop space:',' idx=5 '+ (2*3+3*Z%-   ABC%*1.1) '
     (check_literal)   ',' != '+'
     (check_literal) check_literal: ret0
    (check_operator) check_operator: ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: ' (2*3+3*Z%-   ABC%*1.1) '

    (check_operator) check_operator:  (2*3+3*Z%-   ABC%*1.1) 

     (check_literal) check_literal:lit=',' idx=7 '(2*3+3*Z%-   ABC%*1.1) '
     (check_literal) check_literal:After drop space:',' idx=7 '(2*3+3*Z%-   ABC%*1.1) '
     (check_literal)   ',' != '('
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: '(2*3+3*Z%-   ABC%*1.1) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=6 ' (2*3+3*Z%-   ABC%*1.1) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=7 '(2*3+3*Z%-   ABC%*1.1) '
     (check_literal)   '%' != '('
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=6 ' (2*3+3*Z%-   ABC%*1.1) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=7 '(2*3+3*Z%-   ABC%*1.1) '
     (check_literal)   '"' != '('
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '(2*3+3*Z%-   ABC%*1.1) '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname '(2*3+3*Z%-   ABC%*1.1) ':
      (check_vname) check_vname ret0 '(2*3+3*Z%-   ABC%*1.1) ':
     (check_variable) check_variable:ret0 
    (check_atom) check_atom:ret1

    (check_sub_expr) check_sub_expr:

     (check_literal) check_literal:lit=' (' idx=6 ' (2*3+3*Z%-   ABC%*1.1) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'(' idx=7 '(2*3+3*Z%-   ABC%*1.1) '
     (check_literal) check_literal:After while():2*3+3*Z%-   ABC%*1.1) 
     (check_literal) check_literal:ret1 
    (check_sub_expr) check_sub_expr: ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: '2*3+3*Z%-   ABC%*1.1) '

    (check_operator) check_operator: 2*3+3*Z%-   ABC%*1.1) 

     (check_literal) check_literal:lit=',' idx=8 '2*3+3*Z%-   ABC%*1.1) '
     (check_literal) check_literal:After drop space:',' idx=8 '2*3+3*Z%-   ABC%*1.1) '
     (check_literal)   ',' != '2'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: '2*3+3*Z%-   ABC%*1.1) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=8 '2*3+3*Z%-   ABC%*1.1) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=8 '2*3+3*Z%-   ABC%*1.1) '
     (check_literal)   '%' != '2'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=8 '2*3+3*Z%-   ABC%*1.1) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=8 '2*3+3*Z%-   ABC%*1.1) '
     (check_literal)   '"' != '2'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '2*3+3*Z%-   ABC%*1.1) '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: '*3+3*Z%-   ABC%*1.1) '

    (check_operator) check_operator: *3+3*Z%-   ABC%*1.1) 

     (check_literal) check_literal:lit=',' idx=9 '*3+3*Z%-   ABC%*1.1) '
     (check_literal) check_literal:After drop space:',' idx=9 '*3+3*Z%-   ABC%*1.1) '
     (check_literal)   ',' != '*'
     (check_literal) check_literal: ret0
    (check_operator) check_operator: ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: '3+3*Z%-   ABC%*1.1) '

    (check_operator) check_operator: 3+3*Z%-   ABC%*1.1) 

     (check_literal) check_literal:lit=',' idx=10 '3+3*Z%-   ABC%*1.1) '
     (check_literal) check_literal:After drop space:',' idx=10 '3+3*Z%-   ABC%*1.1) '
     (check_literal)   ',' != '3'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: '3+3*Z%-   ABC%*1.1) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=10 '3+3*Z%-   ABC%*1.1) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=10 '3+3*Z%-   ABC%*1.1) '
     (check_literal)   '%' != '3'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=10 '3+3*Z%-   ABC%*1.1) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=10 '3+3*Z%-   ABC%*1.1) '
     (check_literal)   '"' != '3'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '3+3*Z%-   ABC%*1.1) '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: '+3*Z%-   ABC%*1.1) '

    (check_operator) check_operator: +3*Z%-   ABC%*1.1) 

     (check_literal) check_literal:lit=',' idx=11 '+3*Z%-   ABC%*1.1) '
     (check_literal) check_literal:After drop space:',' idx=11 '+3*Z%-   ABC%*1.1) '
     (check_literal)   ',' != '+'
     (check_literal) check_literal: ret0
    (check_operator) check_operator: ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: '3*Z%-   ABC%*1.1) '

    (check_operator) check_operator: 3*Z%-   ABC%*1.1) 

     (check_literal) check_literal:lit=',' idx=12 '3*Z%-   ABC%*1.1) '
     (check_literal) check_literal:After drop space:',' idx=12 '3*Z%-   ABC%*1.1) '
     (check_literal)   ',' != '3'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: '3*Z%-   ABC%*1.1) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=12 '3*Z%-   ABC%*1.1) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=12 '3*Z%-   ABC%*1.1) '
     (check_literal)   '%' != '3'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=12 '3*Z%-   ABC%*1.1) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=12 '3*Z%-   ABC%*1.1) '
     (check_literal)   '"' != '3'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '3*Z%-   ABC%*1.1) '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: '*Z%-   ABC%*1.1) '

    (check_operator) check_operator: *Z%-   ABC%*1.1) 

     (check_literal) check_literal:lit=',' idx=13 '*Z%-   ABC%*1.1) '
     (check_literal) check_literal:After drop space:',' idx=13 '*Z%-   ABC%*1.1) '
     (check_literal)   ',' != '*'
     (check_literal) check_literal: ret0
    (check_operator) check_operator: ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: 'Z%-   ABC%*1.1) '

    (check_operator) check_operator: Z%-   ABC%*1.1) 

     (check_literal) check_literal:lit=',' idx=14 'Z%-   ABC%*1.1) '
     (check_literal) check_literal:After drop space:',' idx=14 'Z%-   ABC%*1.1) '
     (check_literal)   ',' != 'Z'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: 'Z%-   ABC%*1.1) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=14 'Z%-   ABC%*1.1) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=14 'Z%-   ABC%*1.1) '
     (check_literal)   '%' != 'Z'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=14 'Z%-   ABC%*1.1) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=14 'Z%-   ABC%*1.1) '
     (check_literal)   '"' != 'Z'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'Z%-   ABC%*1.1) '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'Z%-   ABC%*1.1) ':
      (check_vname) check_vname ret1 '%-   ABC%*1.1) ':
     (check_variable) check_variable: '%-   ABC%*1.1) '
     (check_variable) check_variable: Ary test '-   ABC%*1.1) '

      (check_literal) check_literal:lit='(' idx=16 '-   ABC%*1.1) '
      (check_literal) check_literal:After drop space:'(' idx=16 '-   ABC%*1.1) '
      (check_literal)   '(' != '-'
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (check_eitem) check_eitem: '-   ABC%*1.1) '

   (check_operator) check_operator: -   ABC%*1.1) 

    (check_literal) check_literal:lit=',' idx=16 '-   ABC%*1.1) '
    (check_literal) check_literal:After drop space:',' idx=16 '-   ABC%*1.1) '
    (check_literal)   ',' != '-'
    (check_literal) check_literal: ret0
   (check_operator) check_operator: ret1
  (check_eitem) check_eitem:ret1

  (check_eitem) check_eitem: '   ABC%*1.1) '

   (check_operator) check_operator:    ABC%*1.1) 

    (check_literal) check_literal:lit=',' idx=20 'ABC%*1.1) '
    (check_literal) check_literal:After drop space:',' idx=20 'ABC%*1.1) '
    (check_literal)   ',' != 'A'
    (check_literal) check_literal: ret0
   (check_operator) check_operator:ret0

   (check_function) check_function: 'ABC%*1.1) '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=17 '   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=20 'ABC%*1.1) '
    (check_literal)   '%' != 'A'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=17 '   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=20 'ABC%*1.1) '
    (check_literal)   '"' != 'A'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'ABC%*1.1) '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'ABC%*1.1) ':
     (check_vname) check_vname ret1 '%*1.1) ':
    (check_variable) check_variable: '%*1.1) '
    (check_variable) check_variable: Ary test '*1.1) '

     (check_literal) check_literal:lit='(' idx=24 '*1.1) '
     (check_literal) check_literal:After drop space:'(' idx=24 '*1.1) '
     (check_literal)   '(' != '*'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1
 (check_eitem) check_eitem:ret1

 (check_eitem) check_eitem: '*1.1) '

  (check_operator) check_operator: *1.1) 

   (check_literal) check_literal:lit=',' idx=24 '*1.1) '
   (check_literal) check_literal:After drop space:',' idx=24 '*1.1) '
   (check_literal)   ',' != '*'
   (check_literal) check_literal: ret0
  (check_operator) check_operator: ret1
 (check_eitem) check_eitem:ret1

 (check_eitem) check_eitem: '1.1) '

  (check_operator) check_operator: 1.1) 

   (check_literal) check_literal:lit=',' idx=25 '1.1) '
   (check_literal) check_literal:After drop space:',' idx=25 '1.1) '
   (check_literal)   ',' != '1'
   (check_literal) check_literal: ret0
  (check_operator) check_operator:ret0

  (check_function) check_function: '1.1) '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=25 '1.1) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=25 '1.1) '
   (check_literal)   '%' != '1'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=25 '1.1) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=25 '1.1) '
   (check_literal)   '"' != '1'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret1
   (check_number) check_number: ret1
  (check_atom) check_atom:ret1
 (check_eitem) check_eitem:ret1

 (check_eitem) check_eitem: ') '

  (check_operator) check_operator: ) 

   (check_literal) check_literal:lit=',' idx=28 ') '
   (check_literal) check_literal:After drop space:',' idx=28 ') '
   (check_literal)   ',' != ')'
   (check_literal) check_literal: ret0
  (check_operator) check_operator:ret0

  (check_function) check_function: ') '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=28 ') '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=28 ') '
   (check_literal)   '%' != ')'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=28 ') '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=28 ') '
   (check_literal)   '"' != ')'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: ') '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname ') ':
    (check_vname) check_vname ret0 ') ':
   (check_variable) check_variable:ret0 
  (check_atom) check_atom:ret1

  (check_sub_expr) check_sub_expr:

   (check_literal) check_literal:lit=' (' idx=28 ') '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'(' idx=28 ') '
   (check_literal)   '(' != ')'
   (check_literal) check_literal: ret0
  (check_sub_expr) check_sub_expr: ret0
 (check_eitem) check_eitem:ret0
(check_expression) check_expression:ret1 ') '
(check_assignment) check_assignment:ret1
(check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=2, ') '
========================================================
A= A + (2*3+3*Z%-   ABC%*1.1) 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'A= A + (2*3+3*Z%-   ABC%*1.1) ':
    (check_vname) check_vname ret1 '= A + (2*3+3*Z%-   ABC%*1.1) ':
   (check_variable) check_variable: '= A + (2*3+3*Z%-   ABC%*1.1) '
   (check_variable) check_variable: Ary test '= A + (2*3+3*Z%-   ABC%*1.1) '

    (check_literal) check_literal:lit='(' idx=1 '= A + (2*3+3*Z%-   ABC%*1.1) '
    (check_literal) check_literal:After drop space:'(' idx=1 '= A + (2*3+3*Z%-   ABC%*1.1) '
    (check_literal)   '(' != '='
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=1 '= A + (2*3+3*Z%-   ABC%*1.1) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=1 '= A + (2*3+3*Z%-   ABC%*1.1) '
  (check_literal) check_literal:After while(): A + (2*3+3*Z%-   ABC%*1.1) 
  (check_literal) check_literal:ret1 

  (check_expression) check_expression: 'A + (2*3+3*Z%-   ABC%*1.1) '

   (check_eitem) check_eitem: 'A + (2*3+3*Z%-   ABC%*1.1) '

    (check_operator) check_operator: A + (2*3+3*Z%-   ABC%*1.1) 

     (check_literal) check_literal:lit=',' idx=3 'A + (2*3+3*Z%-   ABC%*1.1) '
     (check_literal) check_literal:After drop space:',' idx=3 'A + (2*3+3*Z%-   ABC%*1.1) '
     (check_literal)   ',' != 'A'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: 'A + (2*3+3*Z%-   ABC%*1.1) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=3 'A + (2*3+3*Z%-   ABC%*1.1) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=3 'A + (2*3+3*Z%-   ABC%*1.1) '
     (check_literal)   '%' != 'A'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=3 'A + (2*3+3*Z%-   ABC%*1.1) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=3 'A + (2*3+3*Z%-   ABC%*1.1) '
     (check_literal)   '"' != 'A'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'A + (2*3+3*Z%-   ABC%*1.1) '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'A + (2*3+3*Z%-   ABC%*1.1) ':
      (check_vname) check_vname ret1 ' + (2*3+3*Z%-   ABC%*1.1) ':
     (check_variable) check_variable: ' + (2*3+3*Z%-   ABC%*1.1) '
     (check_variable) check_variable: Ary test ' + (2*3+3*Z%-   ABC%*1.1) '

      (check_literal) check_literal:lit='(' idx=4 ' + (2*3+3*Z%-   ABC%*1.1) '
      (check_literal) check_literal:After drop space:'(' idx=4 ' + (2*3+3*Z%-   ABC%*1.1) '
      (check_literal)   '(' != ' '
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (check_eitem) check_eitem: ' + (2*3+3*Z%-   ABC%*1.1) '

   (check_operator) check_operator:  + (2*3+3*Z%-   ABC%*1.1) 

    (check_literal) check_literal:lit=',' idx=5 '+ (2*3+3*Z%-   ABC%*1.1) '
    (check_literal) check_literal:After drop space:',' idx=5 '+ (2*3+3*Z%-   ABC%*1.1) '
    (check_literal)   ',' != '+'
    (check_literal) check_literal: ret0
   (check_operator) check_operator: ret1
  (check_eitem) check_eitem:ret1

  (check_eitem) check_eitem: ' (2*3+3*Z%-   ABC%*1.1) '

   (check_operator) check_operator:  (2*3+3*Z%-   ABC%*1.1) 

    (check_literal) check_literal:lit=',' idx=7 '(2*3+3*Z%-   ABC%*1.1) '
    (check_literal) check_literal:After drop space:',' idx=7 '(2*3+3*Z%-   ABC%*1.1) '
    (check_literal)   ',' != '('
    (check_literal) check_literal: ret0
   (check_operator) check_operator:ret0

   (check_function) check_function: '(2*3+3*Z%-   ABC%*1.1) '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=6 ' (2*3+3*Z%-   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=7 '(2*3+3*Z%-   ABC%*1.1) '
    (check_literal)   '%' != '('
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=6 ' (2*3+3*Z%-   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=7 '(2*3+3*Z%-   ABC%*1.1) '
    (check_literal)   '"' != '('
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '(2*3+3*Z%-   ABC%*1.1) '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname '(2*3+3*Z%-   ABC%*1.1) ':
     (check_vname) check_vname ret0 '(2*3+3*Z%-   ABC%*1.1) ':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret1

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=6 ' (2*3+3*Z%-   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=7 '(2*3+3*Z%-   ABC%*1.1) '
    (check_literal) check_literal:After while():2*3+3*Z%-   ABC%*1.1) 
    (check_literal) check_literal:ret1 
   (check_sub_expr) check_sub_expr: ret1
  (check_eitem) check_eitem:ret1

  (check_eitem) check_eitem: '2*3+3*Z%-   ABC%*1.1) '

   (check_operator) check_operator: 2*3+3*Z%-   ABC%*1.1) 

    (check_literal) check_literal:lit=',' idx=8 '2*3+3*Z%-   ABC%*1.1) '
    (check_literal) check_literal:After drop space:',' idx=8 '2*3+3*Z%-   ABC%*1.1) '
    (check_literal)   ',' != '2'
    (check_literal) check_literal: ret0
   (check_operator) check_operator:ret0

   (check_function) check_function: '2*3+3*Z%-   ABC%*1.1) '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=8 '2*3+3*Z%-   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=8 '2*3+3*Z%-   ABC%*1.1) '
    (check_literal)   '%' != '2'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=8 '2*3+3*Z%-   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=8 '2*3+3*Z%-   ABC%*1.1) '
    (check_literal)   '"' != '2'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '2*3+3*Z%-   ABC%*1.1) '
     (check_integer) check_integer:ret1
    (check_number) check_number: ret1
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (check_eitem) check_eitem: '*3+3*Z%-   ABC%*1.1) '

   (check_operator) check_operator: *3+3*Z%-   ABC%*1.1) 

    (check_literal) check_literal:lit=',' idx=9 '*3+3*Z%-   ABC%*1.1) '
    (check_literal) check_literal:After drop space:',' idx=9 '*3+3*Z%-   ABC%*1.1) '
    (check_literal)   ',' != '*'
    (check_literal) check_literal: ret0
   (check_operator) check_operator: ret1
  (check_eitem) check_eitem:ret1

  (check_eitem) check_eitem: '3+3*Z%-   ABC%*1.1) '

   (check_operator) check_operator: 3+3*Z%-   ABC%*1.1) 

    (check_literal) check_literal:lit=',' idx=10 '3+3*Z%-   ABC%*1.1) '
    (check_literal) check_literal:After drop space:',' idx=10 '3+3*Z%-   ABC%*1.1) '
    (check_literal)   ',' != '3'
    (check_literal) check_literal: ret0
   (check_operator) check_operator:ret0

   (check_function) check_function: '3+3*Z%-   ABC%*1.1) '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=10 '3+3*Z%-   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=10 '3+3*Z%-   ABC%*1.1) '
    (check_literal)   '%' != '3'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=10 '3+3*Z%-   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=10 '3+3*Z%-   ABC%*1.1) '
    (check_literal)   '"' != '3'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '3+3*Z%-   ABC%*1.1) '
     (check_integer) check_integer:ret1
    (check_number) check_number: ret1
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (check_eitem) check_eitem: '+3*Z%-   ABC%*1.1) '

   (check_operator) check_operator: +3*Z%-   ABC%*1.1) 

    (check_literal) check_literal:lit=',' idx=11 '+3*Z%-   ABC%*1.1) '
    (check_literal) check_literal:After drop space:',' idx=11 '+3*Z%-   ABC%*1.1) '
    (check_literal)   ',' != '+'
    (check_literal) check_literal: ret0
   (check_operator) check_operator: ret1
  (check_eitem) check_eitem:ret1

  (check_eitem) check_eitem: '3*Z%-   ABC%*1.1) '

   (check_operator) check_operator: 3*Z%-   ABC%*1.1) 

    (check_literal) check_literal:lit=',' idx=12 '3*Z%-   ABC%*1.1) '
    (check_literal) check_literal:After drop space:',' idx=12 '3*Z%-   ABC%*1.1) '
    (check_literal)   ',' != '3'
    (check_literal) check_literal: ret0
   (check_operator) check_operator:ret0

   (check_function) check_function: '3*Z%-   ABC%*1.1) '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=12 '3*Z%-   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=12 '3*Z%-   ABC%*1.1) '
    (check_literal)   '%' != '3'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=12 '3*Z%-   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=12 '3*Z%-   ABC%*1.1) '
    (check_literal)   '"' != '3'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '3*Z%-   ABC%*1.1) '
     (check_integer) check_integer:ret1
    (check_number) check_number: ret1
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (check_eitem) check_eitem: '*Z%-   ABC%*1.1) '

   (check_operator) check_operator: *Z%-   ABC%*1.1) 

    (check_literal) check_literal:lit=',' idx=13 '*Z%-   ABC%*1.1) '
    (check_literal) check_literal:After drop space:',' idx=13 '*Z%-   ABC%*1.1) '
    (check_literal)   ',' != '*'
    (check_literal) check_literal: ret0
   (check_operator) check_operator: ret1
  (check_eitem) check_eitem:ret1

  (check_eitem) check_eitem: 'Z%-   ABC%*1.1) '

   (check_operator) check_operator: Z%-   ABC%*1.1) 

    (check_literal) check_literal:lit=',' idx=14 'Z%-   ABC%*1.1) '
    (check_literal) check_literal:After drop space:',' idx=14 'Z%-   ABC%*1.1) '
    (check_literal)   ',' != 'Z'
    (check_literal) check_literal: ret0
   (check_operator) check_operator:ret0

   (check_function) check_function: 'Z%-   ABC%*1.1) '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=14 'Z%-   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=14 'Z%-   ABC%*1.1) '
    (check_literal)   '%' != 'Z'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=14 'Z%-   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=14 'Z%-   ABC%*1.1) '
    (check_literal)   '"' != 'Z'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'Z%-   ABC%*1.1) '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'Z%-   ABC%*1.1) ':
     (check_vname) check_vname ret1 '%-   ABC%*1.1) ':
    (check_variable) check_variable: '%-   ABC%*1.1) '
    (check_variable) check_variable: Ary test '-   ABC%*1.1) '

     (check_literal) check_literal:lit='(' idx=16 '-   ABC%*1.1) '
     (check_literal) check_literal:After drop space:'(' idx=16 '-   ABC%*1.1) '
     (check_literal)   '(' != '-'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1
 (check_eitem) check_eitem:ret1

 (check_eitem) check_eitem: '-   ABC%*1.1) '

  (check_operator) check_operator: -   ABC%*1.1) 

   (check_literal) check_literal:lit=',' idx=16 '-   ABC%*1.1) '
   (check_literal) check_literal:After drop space:',' idx=16 '-   ABC%*1.1) '
   (check_literal)   ',' != '-'
   (check_literal) check_literal: ret0
  (check_operator) check_operator: ret1
 (check_eitem) check_eitem:ret1

 (check_eitem) check_eitem: '   ABC%*1.1) '

  (check_operator) check_operator:    ABC%*1.1) 

   (check_literal) check_literal:lit=',' idx=20 'ABC%*1.1) '
   (check_literal) check_literal:After drop space:',' idx=20 'ABC%*1.1) '
   (check_literal)   ',' != 'A'
   (check_literal) check_literal: ret0
  (check_operator) check_operator:ret0

  (check_function) check_function: 'ABC%*1.1) '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=17 '   ABC%*1.1) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=20 'ABC%*1.1) '
   (check_literal)   '%' != 'A'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=17 '   ABC%*1.1) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=20 'ABC%*1.1) '
   (check_literal)   '"' != 'A'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'ABC%*1.1) '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'ABC%*1.1) ':
    (check_vname) check_vname ret1 '%*1.1) ':
   (check_variable) check_variable: '%*1.1) '
   (check_variable) check_variable: Ary test '*1.1) '

    (check_literal) check_literal:lit='(' idx=24 '*1.1) '
    (check_literal) check_literal:After drop space:'(' idx=24 '*1.1) '
    (check_literal)   '(' != '*'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) check_atom:ret1
(check_eitem) check_eitem:ret1

 (check_eitem) check_eitem: '*1.1) '

  (check_operator) check_operator: *1.1) 

   (check_literal) check_literal:lit=',' idx=24 '*1.1) '
   (check_literal) check_literal:After drop space:',' idx=24 '*1.1) '
   (check_literal)   ',' != '*'
   (check_literal) check_literal: ret0
  (check_operator) check_operator: ret1
 (check_eitem) check_eitem:ret1

 (check_eitem) check_eitem: '1.1) '

  (check_operator) check_operator: 1.1) 

   (check_literal) check_literal:lit=',' idx=25 '1.1) '
   (check_literal) check_literal:After drop space:',' idx=25 '1.1) '
   (check_literal)   ',' != '1'
   (check_literal) check_literal: ret0
  (check_operator) check_operator:ret0

  (check_function) check_function: '1.1) '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=25 '1.1) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=25 '1.1) '
   (check_literal)   '%' != '1'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=25 '1.1) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=25 '1.1) '
   (check_literal)   '"' != '1'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret1
   (check_number) check_number: ret1
  (check_atom) check_atom:ret1
 (check_eitem) check_eitem:ret1

 (check_eitem) check_eitem: ') '

  (check_operator) check_operator: ) 

   (check_literal) check_literal:lit=',' idx=28 ') '
   (check_literal) check_literal:After drop space:',' idx=28 ') '
   (check_literal)   ',' != ')'
   (check_literal) check_literal: ret0
  (check_operator) check_operator:ret0

  (check_function) check_function: ') '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=28 ') '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=28 ') '
   (check_literal)   '%' != ')'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=28 ') '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=28 ') '
   (check_literal)   '"' != ')'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: ') '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname ') ':
    (check_vname) check_vname ret0 ') ':
   (check_variable) check_variable:ret0 
  (check_atom) check_atom:ret1

  (check_sub_expr) check_sub_expr:

   (check_literal) check_literal:lit=' (' idx=28 ') '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'(' idx=28 ') '
   (check_literal)   '(' != ')'
   (check_literal) check_literal: ret0
  (check_sub_expr) check_sub_expr: ret0
 (check_eitem) check_eitem:ret0
(check_expression) check_expression:ret1 ') '
(check_assignment) check_assignment:ret1

 (scan_assignment) scan_assignment:

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'A= A + (2*3+3*Z%-   ABC%*1.1) '
   (scan_vname) scan_vname: ret1 'A'
  (scan_variable) scan_variable: '= A + (2*3+3*Z%-   ABC%*1.1) ' vname='A'
  (scan_variable) scan_variable: Ary test '= A + (2*3+3*Z%-   ABC%*1.1) '

   (check_literal) check_literal:lit='(' idx=1 '= A + (2*3+3*Z%-   ABC%*1.1) '
   (check_literal) check_literal:After drop space:'(' idx=1 '= A + (2*3+3*Z%-   ABC%*1.1) '
   (check_literal)   '(' != '='
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='A' is str:0 int:0 flt:1 ary:0
   Frst:1 T:'A' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:A is not function
token_is_variable: tok:'A'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:A is not function
 (init_get_name) 
init_get_name:'A'
 (init_get_name) 
init_get_name:'A'
 (get_name) 
get_name:gn:'A'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] f f A
 (print_var_info) 
VAR INFO: '                 A' gbl:0 ref:1 int:0 flt:1 str:0 ary:0 max_str:0 max_ary:0 num_ind:0

  (scan_literal) scan_literal:lit=' =' '= A + (2*3+3*Z%-   ABC%*1.1) '
  (scan_literal) scan_literal:After drop space:= A + (2*3+3*Z%-   ABC%*1.1) 
  (scan_literal) scan_literal:while loop:= A + (2*3+3*Z%-   ABC%*1.1) 
   Frst:0 T:'=' exptype:i
  (operator_precedence) 
= is operator
'=' is operator
  (process_token) 
Token is operator o1 name:= o2 name:
  (process_token) 
opr1:1 opr2:0
Push 1
 Push:'='
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (1)

  (op_stack_print) 
000: = type:0
  (op_stack_print) 
------------------

  (scan_literal) scan_literal:ret1

  (scan_expression) scan_expression: ' A + (2*3+3*Z%-   ABC%*1.1) '

   (check_eitem) check_eitem: 'A + (2*3+3*Z%-   ABC%*1.1) '

    (check_operator) check_operator: A + (2*3+3*Z%-   ABC%*1.1) 

     (check_literal) check_literal:lit=',' idx=3 'A + (2*3+3*Z%-   ABC%*1.1) '
     (check_literal) check_literal:After drop space:',' idx=3 'A + (2*3+3*Z%-   ABC%*1.1) '
     (check_literal)   ',' != 'A'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: 'A + (2*3+3*Z%-   ABC%*1.1) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=3 'A + (2*3+3*Z%-   ABC%*1.1) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=3 'A + (2*3+3*Z%-   ABC%*1.1) '
     (check_literal)   '%' != 'A'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=3 'A + (2*3+3*Z%-   ABC%*1.1) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=3 'A + (2*3+3*Z%-   ABC%*1.1) '
     (check_literal)   '"' != 'A'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'A + (2*3+3*Z%-   ABC%*1.1) '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'A + (2*3+3*Z%-   ABC%*1.1) ':
      (check_vname) check_vname ret1 ' + (2*3+3*Z%-   ABC%*1.1) ':
     (check_variable) check_variable: ' + (2*3+3*Z%-   ABC%*1.1) '
     (check_variable) check_variable: Ary test ' + (2*3+3*Z%-   ABC%*1.1) '

      (check_literal) check_literal:lit='(' idx=4 ' + (2*3+3*Z%-   ABC%*1.1) '
      (check_literal) check_literal:After drop space:'(' idx=4 ' + (2*3+3*Z%-   ABC%*1.1) '
      (check_literal)   '(' != ' '
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator: A + (2*3+3*Z%-   ABC%*1.1) 

    (check_literal) check_literal:lit=',' idx=3 'A + (2*3+3*Z%-   ABC%*1.1) '
    (check_literal) check_literal:After drop space:',' idx=3 'A + (2*3+3*Z%-   ABC%*1.1) '
    (check_literal)   ',' != 'A'
    (check_literal) check_literal: ret0
   (check_operator) check_operator:ret0

   (check_function) check_function: 'A + (2*3+3*Z%-   ABC%*1.1) '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=3 'A + (2*3+3*Z%-   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=3 'A + (2*3+3*Z%-   ABC%*1.1) '
    (check_literal)   '%' != 'A'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=3 'A + (2*3+3*Z%-   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=3 'A + (2*3+3*Z%-   ABC%*1.1) '
    (check_literal)   '"' != 'A'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'A + (2*3+3*Z%-   ABC%*1.1) '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'A + (2*3+3*Z%-   ABC%*1.1) ':
     (check_vname) check_vname ret1 ' + (2*3+3*Z%-   ABC%*1.1) ':
    (check_variable) check_variable: ' + (2*3+3*Z%-   ABC%*1.1) '
    (check_variable) check_variable: Ary test ' + (2*3+3*Z%-   ABC%*1.1) '

     (check_literal) check_literal:lit='(' idx=4 ' + (2*3+3*Z%-   ABC%*1.1) '
     (check_literal) check_literal:After drop space:'(' idx=4 ' + (2*3+3*Z%-   ABC%*1.1) '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1

  (scan_atom) scan_atom:

   (check_literal) check_literal:lit=' %' idx=3 'A + (2*3+3*Z%-   ABC%*1.1) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=3 'A + (2*3+3*Z%-   ABC%*1.1) '
   (check_literal)   '%' != 'A'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=3 'A + (2*3+3*Z%-   ABC%*1.1) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=3 'A + (2*3+3*Z%-   ABC%*1.1) '
   (check_literal)   '"' != 'A'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'A + (2*3+3*Z%-   ABC%*1.1) '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'A + (2*3+3*Z%-   ABC%*1.1) ':
    (check_vname) check_vname ret1 ' + (2*3+3*Z%-   ABC%*1.1) ':
   (check_variable) check_variable: ' + (2*3+3*Z%-   ABC%*1.1) '
   (check_variable) check_variable: Ary test ' + (2*3+3*Z%-   ABC%*1.1) '

    (check_literal) check_literal:lit='(' idx=4 ' + (2*3+3*Z%-   ABC%*1.1) '
    (check_literal) check_literal:After drop space:'(' idx=4 ' + (2*3+3*Z%-   ABC%*1.1) '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'A + (2*3+3*Z%-   ABC%*1.1) '
   (scan_vname) scan_vname: ret1 'A'
  (scan_variable) scan_variable: ' + (2*3+3*Z%-   ABC%*1.1) ' vname='A'
  (scan_variable) scan_variable: Ary test ' + (2*3+3*Z%-   ABC%*1.1) '

   (check_literal) check_literal:lit='(' idx=4 ' + (2*3+3*Z%-   ABC%*1.1) '
   (check_literal) check_literal:After drop space:'(' idx=4 ' + (2*3+3*Z%-   ABC%*1.1) '
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='A' is str:0 int:0 flt:1 ary:0
   Frst:0 T:'A' exptype:i
 (operator_precedence) 
= is operator
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:A is not function
token_is_variable: tok:'A'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:A is not function
 (init_get_name) 
init_get_name:'A'
 (init_get_name) 
init_get_name:'A'
 (get_name) 
get_name:gn:'A'
process_token:type:i req_type:i
modify_expression_type:Inittype:i Intype:f Outtype:f
( output_variable) [f,()] f f A
 (print_var_info) 
VAR INFO: '                 A' gbl:0 ref:1 int:0 flt:1 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
 (scan_atom) scan_atom:ret1

 (check_eitem) check_eitem: ' + (2*3+3*Z%-   ABC%*1.1) '

  (check_operator) check_operator:  + (2*3+3*Z%-   ABC%*1.1) 

   (check_literal) check_literal:lit=',' idx=5 '+ (2*3+3*Z%-   ABC%*1.1) '
   (check_literal) check_literal:After drop space:',' idx=5 '+ (2*3+3*Z%-   ABC%*1.1) '
   (check_literal)   ',' != '+'
   (check_literal) check_literal: ret0
  (check_operator) check_operator: ret1
 (check_eitem) check_eitem:ret1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator:  + (2*3+3*Z%-   ABC%*1.1) 

   (check_literal) check_literal:lit=',' idx=5 '+ (2*3+3*Z%-   ABC%*1.1) '
   (check_literal) check_literal:After drop space:',' idx=5 '+ (2*3+3*Z%-   ABC%*1.1) '
   (check_literal)   ',' != '+'
   (check_literal) check_literal: ret0
  (check_operator) check_operator: ret1

  (scan_operator) scan_operator: ' + (2*3+3*Z%-   ABC%*1.1) '

   (check_literal) check_literal:lit=',' idx=5 '+ (2*3+3*Z%-   ABC%*1.1) '
   (check_literal) check_literal:After drop space:',' idx=5 '+ (2*3+3*Z%-   ABC%*1.1) '
   (check_literal)   ',' != '+'
   (check_literal) check_literal: ret0
  (scan_operator) scan_operator: ret1 ' (2*3+3*Z%-   ABC%*1.1) '
   Frst:0 T:'+' exptype:f
 (operator_precedence) 
+ is operator
 (operator_precedence) 
= is operator
'+' is operator
 (process_token) 
Token is operator o1 name:+ o2 name:=
 (process_token) 
opr1:3 opr2:1
 (operator_precedence) 
= is operator
 (operator_precedence) 
= is operator
Push 1
 Push:'+'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: = type:0
 (op_stack_print) 
001: + type:1
 (op_stack_print) 
------------------


  (check_eitem) check_eitem: ' (2*3+3*Z%-   ABC%*1.1) '

   (check_operator) check_operator:  (2*3+3*Z%-   ABC%*1.1) 

    (check_literal) check_literal:lit=',' idx=7 '(2*3+3*Z%-   ABC%*1.1) '
    (check_literal) check_literal:After drop space:',' idx=7 '(2*3+3*Z%-   ABC%*1.1) '
    (check_literal)   ',' != '('
    (check_literal) check_literal: ret0
   (check_operator) check_operator:ret0

   (check_function) check_function: '(2*3+3*Z%-   ABC%*1.1) '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=6 ' (2*3+3*Z%-   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=7 '(2*3+3*Z%-   ABC%*1.1) '
    (check_literal)   '%' != '('
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=6 ' (2*3+3*Z%-   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=7 '(2*3+3*Z%-   ABC%*1.1) '
    (check_literal)   '"' != '('
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '(2*3+3*Z%-   ABC%*1.1) '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname '(2*3+3*Z%-   ABC%*1.1) ':
     (check_vname) check_vname ret0 '(2*3+3*Z%-   ABC%*1.1) ':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret1

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=6 ' (2*3+3*Z%-   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=7 '(2*3+3*Z%-   ABC%*1.1) '
    (check_literal) check_literal:After while():2*3+3*Z%-   ABC%*1.1) 
    (check_literal) check_literal:ret1 
   (check_sub_expr) check_sub_expr: ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator:  (2*3+3*Z%-   ABC%*1.1) 

    (check_literal) check_literal:lit=',' idx=7 '(2*3+3*Z%-   ABC%*1.1) '
    (check_literal) check_literal:After drop space:',' idx=7 '(2*3+3*Z%-   ABC%*1.1) '
    (check_literal)   ',' != '('
    (check_literal) check_literal: ret0
   (check_operator) check_operator:ret0

   (check_function) check_function: '(2*3+3*Z%-   ABC%*1.1) '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=6 ' (2*3+3*Z%-   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=7 '(2*3+3*Z%-   ABC%*1.1) '
    (check_literal)   '%' != '('
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=6 ' (2*3+3*Z%-   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=7 '(2*3+3*Z%-   ABC%*1.1) '
    (check_literal)   '"' != '('
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '(2*3+3*Z%-   ABC%*1.1) '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname '(2*3+3*Z%-   ABC%*1.1) ':
     (check_vname) check_vname ret0 '(2*3+3*Z%-   ABC%*1.1) ':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret1

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=6 ' (2*3+3*Z%-   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=7 '(2*3+3*Z%-   ABC%*1.1) '
    (check_literal) check_literal:After while():2*3+3*Z%-   ABC%*1.1) 
    (check_literal) check_literal:ret1 
   (check_sub_expr) check_sub_expr: ret1

   (scan_sub_expr) scan_sub_expr:

    (scan_literal) scan_literal:lit=' (' ' (2*3+3*Z%-   ABC%*1.1) '
    (scan_literal) scan_literal:After drop space:(2*3+3*Z%-   ABC%*1.1) 
    (scan_literal) scan_literal:while loop:(2*3+3*Z%-   ABC%*1.1) 
   Frst:0 T:'(' exptype:f
    (operator_precedence) 
+ is operator
(output_sub_start)
 Push:'('
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (3)

    (op_stack_print) 
000: = type:0
    (op_stack_print) 
001: + type:1
    (op_stack_print) 
002: ( type:16
    (op_stack_print) 
------------------

    (scan_literal) scan_literal:ret1
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
   (op_stack_print) 
------------------
   (op_stack_print) 
Operator Stack     (4)

   (op_stack_print) 
000: = type:0
   (op_stack_print) 
001: + type:1
   (op_stack_print) 
002: ( type:16
   (op_stack_print) 
003: ( type:16
   (op_stack_print) 
------------------


    (scan_expression) scan_expression: '2*3+3*Z%-   ABC%*1.1) '

     (check_eitem) check_eitem: '2*3+3*Z%-   ABC%*1.1) '

      (check_operator) check_operator: 2*3+3*Z%-   ABC%*1.1) 

       (check_literal) check_literal:lit=',' idx=8 '2*3+3*Z%-   ABC%*1.1) '
       (check_literal) check_literal:After drop space:',' idx=8 '2*3+3*Z%-   ABC%*1.1) '
       (check_literal)   ',' != '2'
       (check_literal) check_literal: ret0
      (check_operator) check_operator:ret0

      (check_function) check_function: '2*3+3*Z%-   ABC%*1.1) '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=8 '2*3+3*Z%-   ABC%*1.1) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=8 '2*3+3*Z%-   ABC%*1.1) '
       (check_literal)   '%' != '2'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=8 '2*3+3*Z%-   ABC%*1.1) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=8 '2*3+3*Z%-   ABC%*1.1) '
       (check_literal)   '"' != '2'
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '2*3+3*Z%-   ABC%*1.1) '
        (check_integer) check_integer:ret1
       (check_number) check_number: ret1
      (check_atom) check_atom:ret1
     (check_eitem) check_eitem:ret1

     (scan_eitem) scan_eitem:

      (check_operator) check_operator: 2*3+3*Z%-   ABC%*1.1) 

       (check_literal) check_literal:lit=',' idx=8 '2*3+3*Z%-   ABC%*1.1) '
       (check_literal) check_literal:After drop space:',' idx=8 '2*3+3*Z%-   ABC%*1.1) '
       (check_literal)   ',' != '2'
       (check_literal) check_literal: ret0
      (check_operator) check_operator:ret0

      (check_function) check_function: '2*3+3*Z%-   ABC%*1.1) '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=8 '2*3+3*Z%-   ABC%*1.1) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=8 '2*3+3*Z%-   ABC%*1.1) '
       (check_literal)   '%' != '2'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=8 '2*3+3*Z%-   ABC%*1.1) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=8 '2*3+3*Z%-   ABC%*1.1) '
       (check_literal)   '"' != '2'
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '2*3+3*Z%-   ABC%*1.1) '
        (check_integer) check_integer:ret1
       (check_number) check_number: ret1
      (check_atom) check_atom:ret1

      (scan_atom) scan_atom:

       (check_literal) check_literal:lit=' %' idx=8 '2*3+3*Z%-   ABC%*1.1) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=8 '2*3+3*Z%-   ABC%*1.1) '
       (check_literal)   '%' != '2'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=8 '2*3+3*Z%-   ABC%*1.1) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=8 '2*3+3*Z%-   ABC%*1.1) '
       (check_literal)   '"' != '2'
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '2*3+3*Z%-   ABC%*1.1) '
        (check_integer) check_integer:ret1
       (check_number) check_number: ret1

       (scan_number) scan_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '2*3+3*Z%-   ABC%*1.1) '
        (check_integer) check_integer:ret1

        (scan_integer) scan_integer:
        (scan_integer) scan_integer:ret1
   Frst:0 T:'2' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(f U )] i i 2
       (scan_integer) scan_integer:ret1  2
      (scan_atom) scan_atom:ret1

      (check_eitem) check_eitem: '*3+3*Z%-   ABC%*1.1) '

       (check_operator) check_operator: *3+3*Z%-   ABC%*1.1) 

        (check_literal) check_literal:lit=',' idx=9 '*3+3*Z%-   ABC%*1.1) '
        (check_literal) check_literal:After drop space:',' idx=9 '*3+3*Z%-   ABC%*1.1) '
        (check_literal)   ',' != '*'
        (check_literal) check_literal: ret0
       (check_operator) check_operator: ret1
      (check_eitem) check_eitem:ret1

      (scan_eitem) scan_eitem:

       (check_operator) check_operator: *3+3*Z%-   ABC%*1.1) 

        (check_literal) check_literal:lit=',' idx=9 '*3+3*Z%-   ABC%*1.1) '
        (check_literal) check_literal:After drop space:',' idx=9 '*3+3*Z%-   ABC%*1.1) '
        (check_literal)   ',' != '*'
        (check_literal) check_literal: ret0
       (check_operator) check_operator: ret1

       (scan_operator) scan_operator: '*3+3*Z%-   ABC%*1.1) '

        (check_literal) check_literal:lit=',' idx=9 '*3+3*Z%-   ABC%*1.1) '
        (check_literal) check_literal:After drop space:',' idx=9 '*3+3*Z%-   ABC%*1.1) '
        (check_literal)   ',' != '*'
        (check_literal) check_literal: ret0
       (scan_operator) scan_operator: ret1 '3+3*Z%-   ABC%*1.1) '
   Frst:0 T:'*' exptype:i
      (operator_precedence) 
* is operator
'*' is operator
      (process_token) 
Token is operator o1 name:* o2 name:(
      (process_token) 
opr1:5 opr2:0
Push 1
 Push:'*'
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (5)

      (op_stack_print) 
000: = type:0
      (op_stack_print) 
001: + type:1
      (op_stack_print) 
002: ( type:16
      (op_stack_print) 
003: ( type:16
      (op_stack_print) 
004: * type:0
      (op_stack_print) 
------------------


       (check_eitem) check_eitem: '3+3*Z%-   ABC%*1.1) '

        (check_operator) check_operator: 3+3*Z%-   ABC%*1.1) 

         (check_literal) check_literal:lit=',' idx=10 '3+3*Z%-   ABC%*1.1) '
         (check_literal) check_literal:After drop space:',' idx=10 '3+3*Z%-   ABC%*1.1) '
         (check_literal)   ',' != '3'
         (check_literal) check_literal: ret0
        (check_operator) check_operator:ret0

        (check_function) check_function: '3+3*Z%-   ABC%*1.1) '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=10 '3+3*Z%-   ABC%*1.1) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=10 '3+3*Z%-   ABC%*1.1) '
         (check_literal)   '%' != '3'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=10 '3+3*Z%-   ABC%*1.1) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=10 '3+3*Z%-   ABC%*1.1) '
         (check_literal)   '"' != '3'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: '3+3*Z%-   ABC%*1.1) '
          (check_integer) check_integer:ret1
         (check_number) check_number: ret1
        (check_atom) check_atom:ret1
       (check_eitem) check_eitem:ret1

       (scan_eitem) scan_eitem:

        (check_operator) check_operator: 3+3*Z%-   ABC%*1.1) 

         (check_literal) check_literal:lit=',' idx=10 '3+3*Z%-   ABC%*1.1) '
         (check_literal) check_literal:After drop space:',' idx=10 '3+3*Z%-   ABC%*1.1) '
         (check_literal)   ',' != '3'
         (check_literal) check_literal: ret0
        (check_operator) check_operator:ret0

        (check_function) check_function: '3+3*Z%-   ABC%*1.1) '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=10 '3+3*Z%-   ABC%*1.1) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=10 '3+3*Z%-   ABC%*1.1) '
         (check_literal)   '%' != '3'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=10 '3+3*Z%-   ABC%*1.1) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=10 '3+3*Z%-   ABC%*1.1) '
         (check_literal)   '"' != '3'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: '3+3*Z%-   ABC%*1.1) '
          (check_integer) check_integer:ret1
         (check_number) check_number: ret1
        (check_atom) check_atom:ret1

        (scan_atom) scan_atom:

         (check_literal) check_literal:lit=' %' idx=10 '3+3*Z%-   ABC%*1.1) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=10 '3+3*Z%-   ABC%*1.1) '
         (check_literal)   '%' != '3'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=10 '3+3*Z%-   ABC%*1.1) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=10 '3+3*Z%-   ABC%*1.1) '
         (check_literal)   '"' != '3'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: '3+3*Z%-   ABC%*1.1) '
          (check_integer) check_integer:ret1
         (check_number) check_number: ret1

         (scan_number) scan_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: '3+3*Z%-   ABC%*1.1) '
          (check_integer) check_integer:ret1

          (scan_integer) scan_integer:
          (scan_integer) scan_integer:ret1
   Frst:0 T:'3' exptype:i
         (operator_precedence) 
* is operator
modify_expression_type:Inittype:i Intype:i Outtype:i
(  output_integer) [i,(f U )] i i 3
         (scan_integer) scan_integer:ret1  3
        (scan_atom) scan_atom:ret1

        (check_eitem) check_eitem: '+3*Z%-   ABC%*1.1) '

         (check_operator) check_operator: +3*Z%-   ABC%*1.1) 

          (check_literal) check_literal:lit=',' idx=11 '+3*Z%-   ABC%*1.1) '
          (check_literal) check_literal:After drop space:',' idx=11 '+3*Z%-   ABC%*1.1) '
          (check_literal)   ',' != '+'
          (check_literal) check_literal: ret0
         (check_operator) check_operator: ret1
        (check_eitem) check_eitem:ret1

        (scan_eitem) scan_eitem:

         (check_operator) check_operator: +3*Z%-   ABC%*1.1) 

          (check_literal) check_literal:lit=',' idx=11 '+3*Z%-   ABC%*1.1) '
          (check_literal) check_literal:After drop space:',' idx=11 '+3*Z%-   ABC%*1.1) '
          (check_literal)   ',' != '+'
          (check_literal) check_literal: ret0
         (check_operator) check_operator: ret1

         (scan_operator) scan_operator: '+3*Z%-   ABC%*1.1) '

          (check_literal) check_literal:lit=',' idx=11 '+3*Z%-   ABC%*1.1) '
          (check_literal) check_literal:After drop space:',' idx=11 '+3*Z%-   ABC%*1.1) '
          (check_literal)   ',' != '+'
          (check_literal) check_literal: ret0
         (scan_operator) scan_operator: ret1 '3*Z%-   ABC%*1.1) '
   Frst:0 T:'+' exptype:i
        (operator_precedence) 
+ is operator
        (operator_precedence) 
* is operator
'+' is operator
        (process_token) 
Token is operator o1 name:+ o2 name:*
        (process_token) 
opr1:3 opr2:5
        (operator_precedence) 
* is operator
Pop 1
Pop '*'
        (op_stack_print) 
------------------
        (op_stack_print) 
Operator Stack     (4)

        (op_stack_print) 
000: = type:0
        (op_stack_print) 
001: + type:1
        (op_stack_print) 
002: ( type:16
        (op_stack_print) 
003: ( type:16
        (op_stack_print) 
------------------

        (operator_precedence) 
+ is operator
        (operator_precedence) 
* is operator
( output_operator) [i,(f U )] i i *
        (token_is_function) 
token_is_function:
        (token_is_function) 
token_is_function:* is not function
Push 1
 Push:'+'
        (op_stack_print) 
------------------
        (op_stack_print) 
Operator Stack     (5)

        (op_stack_print) 
000: = type:0
        (op_stack_print) 
001: + type:1
        (op_stack_print) 
002: ( type:16
        (op_stack_print) 
003: ( type:16
        (op_stack_print) 
004: + type:0
        (op_stack_print) 
------------------


         (check_eitem) check_eitem: '3*Z%-   ABC%*1.1) '

          (check_operator) check_operator: 3*Z%-   ABC%*1.1) 

           (check_literal) check_literal:lit=',' idx=12 '3*Z%-   ABC%*1.1) '
           (check_literal) check_literal:After drop space:',' idx=12 '3*Z%-   ABC%*1.1) '
           (check_literal)   ',' != '3'
           (check_literal) check_literal: ret0
          (check_operator) check_operator:ret0

          (check_function) check_function: '3*Z%-   ABC%*1.1) '
          (check_function) check_function: ret0

          (check_atom) check_atom:

           (check_literal) check_literal:lit=' %' idx=12 '3*Z%-   ABC%*1.1) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'%' idx=12 '3*Z%-   ABC%*1.1) '
           (check_literal)   '%' != '3'
           (check_literal) check_literal: ret0

           (check_literal) check_literal:lit=' "' idx=12 '3*Z%-   ABC%*1.1) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'"' idx=12 '3*Z%-   ABC%*1.1) '
           (check_literal)   '"' != '3'
           (check_literal) check_literal: ret0

           (check_number) check_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret0

            (check_integer) check_integer: '3*Z%-   ABC%*1.1) '
            (check_integer) check_integer:ret1
           (check_number) check_number: ret1
          (check_atom) check_atom:ret1
         (check_eitem) check_eitem:ret1

         (scan_eitem) scan_eitem:

          (check_operator) check_operator: 3*Z%-   ABC%*1.1) 

           (check_literal) check_literal:lit=',' idx=12 '3*Z%-   ABC%*1.1) '
           (check_literal) check_literal:After drop space:',' idx=12 '3*Z%-   ABC%*1.1) '
           (check_literal)   ',' != '3'
           (check_literal) check_literal: ret0
          (check_operator) check_operator:ret0

          (check_function) check_function: '3*Z%-   ABC%*1.1) '
          (check_function) check_function: ret0

          (check_atom) check_atom:

           (check_literal) check_literal:lit=' %' idx=12 '3*Z%-   ABC%*1.1) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'%' idx=12 '3*Z%-   ABC%*1.1) '
           (check_literal)   '%' != '3'
           (check_literal) check_literal: ret0

           (check_literal) check_literal:lit=' "' idx=12 '3*Z%-   ABC%*1.1) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'"' idx=12 '3*Z%-   ABC%*1.1) '
           (check_literal)   '"' != '3'
           (check_literal) check_literal: ret0

           (check_number) check_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret0

            (check_integer) check_integer: '3*Z%-   ABC%*1.1) '
            (check_integer) check_integer:ret1
           (check_number) check_number: ret1
          (check_atom) check_atom:ret1

          (scan_atom) scan_atom:

           (check_literal) check_literal:lit=' %' idx=12 '3*Z%-   ABC%*1.1) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'%' idx=12 '3*Z%-   ABC%*1.1) '
           (check_literal)   '%' != '3'
           (check_literal) check_literal: ret0

           (check_literal) check_literal:lit=' "' idx=12 '3*Z%-   ABC%*1.1) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'"' idx=12 '3*Z%-   ABC%*1.1) '
           (check_literal)   '"' != '3'
           (check_literal) check_literal: ret0

           (check_number) check_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret0

            (check_integer) check_integer: '3*Z%-   ABC%*1.1) '
            (check_integer) check_integer:ret1
           (check_number) check_number: ret1

           (scan_number) scan_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret0

            (check_integer) check_integer: '3*Z%-   ABC%*1.1) '
            (check_integer) check_integer:ret1

            (scan_integer) scan_integer:
            (scan_integer) scan_integer:ret1
   Frst:0 T:'3' exptype:i
           (operator_precedence) 
+ is operator
modify_expression_type:Inittype:i Intype:i Outtype:i
(  output_integer) [i,(f U )] i i 3
           (scan_integer) scan_integer:ret1  3
          (scan_atom) scan_atom:ret1

          (check_eitem) check_eitem: '*Z%-   ABC%*1.1) '

           (check_operator) check_operator: *Z%-   ABC%*1.1) 

            (check_literal) check_literal:lit=',' idx=13 '*Z%-   ABC%*1.1) '
            (check_literal) check_literal:After drop space:',' idx=13 '*Z%-   ABC%*1.1) '
            (check_literal)   ',' != '*'
            (check_literal) check_literal: ret0
           (check_operator) check_operator: ret1
          (check_eitem) check_eitem:ret1

          (scan_eitem) scan_eitem:

           (check_operator) check_operator: *Z%-   ABC%*1.1) 

            (check_literal) check_literal:lit=',' idx=13 '*Z%-   ABC%*1.1) '
            (check_literal) check_literal:After drop space:',' idx=13 '*Z%-   ABC%*1.1) '
            (check_literal)   ',' != '*'
            (check_literal) check_literal: ret0
           (check_operator) check_operator: ret1

           (scan_operator) scan_operator: '*Z%-   ABC%*1.1) '

            (check_literal) check_literal:lit=',' idx=13 '*Z%-   ABC%*1.1) '
            (check_literal) check_literal:After drop space:',' idx=13 '*Z%-   ABC%*1.1) '
            (check_literal)   ',' != '*'
            (check_literal) check_literal: ret0
           (scan_operator) scan_operator: ret1 'Z%-   ABC%*1.1) '
   Frst:0 T:'*' exptype:i
          (operator_precedence) 
* is operator
          (operator_precedence) 
+ is operator
'*' is operator
          (process_token) 
Token is operator o1 name:* o2 name:+
          (process_token) 
opr1:5 opr2:3
          (operator_precedence) 
+ is operator
          (operator_precedence) 
+ is operator
Push 1
 Push:'*'
          (op_stack_print) 
------------------
          (op_stack_print) 
Operator Stack     (6)

          (op_stack_print) 
000: = type:0
          (op_stack_print) 
001: + type:1
          (op_stack_print) 
002: ( type:16
          (op_stack_print) 
003: ( type:16
          (op_stack_print) 
004: + type:0
          (op_stack_print) 
005: * type:0
          (op_stack_print) 
------------------


           (check_eitem) check_eitem: 'Z%-   ABC%*1.1) '

            (check_operator) check_operator: Z%-   ABC%*1.1) 

             (check_literal) check_literal:lit=',' idx=14 'Z%-   ABC%*1.1) '
             (check_literal) check_literal:After drop space:',' idx=14 'Z%-   ABC%*1.1) '
             (check_literal)   ',' != 'Z'
             (check_literal) check_literal: ret0
            (check_operator) check_operator:ret0

            (check_function) check_function: 'Z%-   ABC%*1.1) '
            (check_function) check_function: ret0

            (check_atom) check_atom:

             (check_literal) check_literal:lit=' %' idx=14 'Z%-   ABC%*1.1) '
             (check_literal) dropping space
             (check_literal) check_literal:After drop space:'%' idx=14 'Z%-   ABC%*1.1) '
             (check_literal)   '%' != 'Z'
             (check_literal) check_literal: ret0

             (check_literal) check_literal:lit=' "' idx=14 'Z%-   ABC%*1.1) '
             (check_literal) dropping space
             (check_literal) check_literal:After drop space:'"' idx=14 'Z%-   ABC%*1.1) '
             (check_literal)   '"' != 'Z'
             (check_literal) check_literal: ret0

             (check_number) check_number:

              (check_float) check_float:
              (isfloatdigit) isfloatdigit:
              (check_float) check_float: ret0

              (check_integer) check_integer: 'Z%-   ABC%*1.1) '
              (check_integer) check_integer:ret0
             (check_number) check_number: ret0

             (check_variable) check_variable:

              (check_vname) check_vname 'Z%-   ABC%*1.1) ':
              (check_vname) check_vname ret1 '%-   ABC%*1.1) ':
             (check_variable) check_variable: '%-   ABC%*1.1) '
             (check_variable) check_variable: Ary test '-   ABC%*1.1) '

              (check_literal) check_literal:lit='(' idx=16 '-   ABC%*1.1) '
              (check_literal) check_literal:After drop space:'(' idx=16 '-   ABC%*1.1) '
              (check_literal)   '(' != '-'
              (check_literal) check_literal: ret0
             (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
            (check_variable) check_variable:ret1 
           (check_atom) check_atom:ret1
          (check_eitem) check_eitem:ret1

          (scan_eitem) scan_eitem:

           (check_operator) check_operator: Z%-   ABC%*1.1) 

            (check_literal) check_literal:lit=',' idx=14 'Z%-   ABC%*1.1) '
            (check_literal) check_literal:After drop space:',' idx=14 'Z%-   ABC%*1.1) '
            (check_literal)   ',' != 'Z'
            (check_literal) check_literal: ret0
           (check_operator) check_operator:ret0

           (check_function) check_function: 'Z%-   ABC%*1.1) '
           (check_function) check_function: ret0

           (check_atom) check_atom:

            (check_literal) check_literal:lit=' %' idx=14 'Z%-   ABC%*1.1) '
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:'%' idx=14 'Z%-   ABC%*1.1) '
            (check_literal)   '%' != 'Z'
            (check_literal) check_literal: ret0

            (check_literal) check_literal:lit=' "' idx=14 'Z%-   ABC%*1.1) '
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:'"' idx=14 'Z%-   ABC%*1.1) '
            (check_literal)   '"' != 'Z'
            (check_literal) check_literal: ret0

            (check_number) check_number:

             (check_float) check_float:
             (isfloatdigit) isfloatdigit:
             (check_float) check_float: ret0

             (check_integer) check_integer: 'Z%-   ABC%*1.1) '
             (check_integer) check_integer:ret0
            (check_number) check_number: ret0

            (check_variable) check_variable:

             (check_vname) check_vname 'Z%-   ABC%*1.1) ':
             (check_vname) check_vname ret1 '%-   ABC%*1.1) ':
            (check_variable) check_variable: '%-   ABC%*1.1) '
            (check_variable) check_variable: Ary test '-   ABC%*1.1) '

             (check_literal) check_literal:lit='(' idx=16 '-   ABC%*1.1) '
             (check_literal) check_literal:After drop space:'(' idx=16 '-   ABC%*1.1) '
             (check_literal)   '(' != '-'
             (check_literal) check_literal: ret0
            (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
           (check_variable) check_variable:ret1 
          (check_atom) check_atom:ret1

          (scan_atom) scan_atom:

           (check_literal) check_literal:lit=' %' idx=14 'Z%-   ABC%*1.1) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'%' idx=14 'Z%-   ABC%*1.1) '
           (check_literal)   '%' != 'Z'
           (check_literal) check_literal: ret0

           (check_literal) check_literal:lit=' "' idx=14 'Z%-   ABC%*1.1) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'"' idx=14 'Z%-   ABC%*1.1) '
           (check_literal)   '"' != 'Z'
           (check_literal) check_literal: ret0

           (check_number) check_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret0

            (check_integer) check_integer: 'Z%-   ABC%*1.1) '
            (check_integer) check_integer:ret0
           (check_number) check_number: ret0

           (check_variable) check_variable:

            (check_vname) check_vname 'Z%-   ABC%*1.1) ':
            (check_vname) check_vname ret1 '%-   ABC%*1.1) ':
           (check_variable) check_variable: '%-   ABC%*1.1) '
           (check_variable) check_variable: Ary test '-   ABC%*1.1) '

            (check_literal) check_literal:lit='(' idx=16 '-   ABC%*1.1) '
            (check_literal) check_literal:After drop space:'(' idx=16 '-   ABC%*1.1) '
            (check_literal)   '(' != '-'
            (check_literal) check_literal: ret0
           (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
          (check_variable) check_variable:ret1 

          (scan_variable) scan_variable:

           (scan_vname) scan_vname: 'Z%-   ABC%*1.1) '
           (scan_vname) scan_vname: ret1 'Z'
          (scan_variable) scan_variable: '%-   ABC%*1.1) ' vname='Z'
          (scan_variable) scan_variable: Ary test '-   ABC%*1.1) '

           (check_literal) check_literal:lit='(' idx=16 '-   ABC%*1.1) '
           (check_literal) check_literal:After drop space:'(' idx=16 '-   ABC%*1.1) '
           (check_literal)   '(' != '-'
           (check_literal) check_literal: ret0
          (scan_variable) scan_variable:ret1 vname='Z%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'Z%' exptype:i
         (operator_precedence) 
* is operator
         (token_is_function) 
token_is_function:
         (token_is_function) 
token_is_function:Z% is not function
token_is_variable: tok:'Z%'
         (token_is_function) 
token_is_function:
         (token_is_function) 
token_is_function:Z% is not function
         (init_get_name) 
init_get_name:'Z%'
         (init_get_name) 
init_get_name:'Z%'
         (get_name) 
get_name:gn:'Z%'
process_token:type:i req_type:i
modify_expression_type:Inittype:i Intype:i Outtype:i
( output_variable) [i,(f U )] i i Z%
         (print_var_info) 
VAR INFO: '                Z%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
         (scan_atom) scan_atom:ret1

         (check_eitem) check_eitem: '-   ABC%*1.1) '

          (check_operator) check_operator: -   ABC%*1.1) 

           (check_literal) check_literal:lit=',' idx=16 '-   ABC%*1.1) '
           (check_literal) check_literal:After drop space:',' idx=16 '-   ABC%*1.1) '
           (check_literal)   ',' != '-'
           (check_literal) check_literal: ret0
          (check_operator) check_operator: ret1
         (check_eitem) check_eitem:ret1

         (scan_eitem) scan_eitem:

          (check_operator) check_operator: -   ABC%*1.1) 

           (check_literal) check_literal:lit=',' idx=16 '-   ABC%*1.1) '
           (check_literal) check_literal:After drop space:',' idx=16 '-   ABC%*1.1) '
           (check_literal)   ',' != '-'
           (check_literal) check_literal: ret0
          (check_operator) check_operator: ret1

          (scan_operator) scan_operator: '-   ABC%*1.1) '

           (check_literal) check_literal:lit=',' idx=16 '-   ABC%*1.1) '
           (check_literal) check_literal:After drop space:',' idx=16 '-   ABC%*1.1) '
           (check_literal)   ',' != '-'
           (check_literal) check_literal: ret0
          (scan_operator) scan_operator: ret1 '   ABC%*1.1) '
   Frst:0 T:'-' exptype:i
         (operator_precedence) 
- is operator
         (operator_precedence) 
* is operator
'-' is operator
         (process_token) 
Token is operator o1 name:- o2 name:*
         (process_token) 
opr1:3 opr2:5
         (operator_precedence) 
* is operator
Pop 1
Pop '*'
         (op_stack_print) 
------------------
         (op_stack_print) 
Operator Stack     (5)

         (op_stack_print) 
000: = type:0
         (op_stack_print) 
001: + type:1
         (op_stack_print) 
002: ( type:16
         (op_stack_print) 
003: ( type:16
         (op_stack_print) 
004: + type:0
         (op_stack_print) 
------------------

         (operator_precedence) 
- is operator
         (operator_precedence) 
* is operator
( output_operator) [i,(f U )] i i *
         (token_is_function) 
token_is_function:
         (token_is_function) 
token_is_function:* is not function
         (operator_precedence) 
+ is operator
         (operator_precedence) 
+ is operator
         (operator_left_assoc) 
- is operator
Push 1
 Push:'-'
         (op_stack_print) 
------------------
         (op_stack_print) 
Operator Stack     (6)

         (op_stack_print) 
000: = type:0
         (op_stack_print) 
001: + type:1
         (op_stack_print) 
002: ( type:16
         (op_stack_print) 
003: ( type:16
         (op_stack_print) 
004: + type:0
         (op_stack_print) 
005: - type:0
         (op_stack_print) 
------------------


          (check_eitem) check_eitem: '   ABC%*1.1) '

           (check_operator) check_operator:    ABC%*1.1) 

            (check_literal) check_literal:lit=',' idx=20 'ABC%*1.1) '
            (check_literal) check_literal:After drop space:',' idx=20 'ABC%*1.1) '
            (check_literal)   ',' != 'A'
            (check_literal) check_literal: ret0
           (check_operator) check_operator:ret0

           (check_function) check_function: 'ABC%*1.1) '
           (check_function) check_function: ret0

           (check_atom) check_atom:

            (check_literal) check_literal:lit=' %' idx=17 '   ABC%*1.1) '
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:'%' idx=20 'ABC%*1.1) '
            (check_literal)   '%' != 'A'
            (check_literal) check_literal: ret0

            (check_literal) check_literal:lit=' "' idx=17 '   ABC%*1.1) '
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:'"' idx=20 'ABC%*1.1) '
            (check_literal)   '"' != 'A'
            (check_literal) check_literal: ret0

            (check_number) check_number:

             (check_float) check_float:
             (isfloatdigit) isfloatdigit:
             (check_float) check_float: ret0

             (check_integer) check_integer: 'ABC%*1.1) '
             (check_integer) check_integer:ret0
            (check_number) check_number: ret0

            (check_variable) check_variable:

             (check_vname) check_vname 'ABC%*1.1) ':
             (check_vname) check_vname ret1 '%*1.1) ':
            (check_variable) check_variable: '%*1.1) '
            (check_variable) check_variable: Ary test '*1.1) '

             (check_literal) check_literal:lit='(' idx=24 '*1.1) '
             (check_literal) check_literal:After drop space:'(' idx=24 '*1.1) '
             (check_literal)   '(' != '*'
             (check_literal) check_literal: ret0
            (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
           (check_variable) check_variable:ret1 
          (check_atom) check_atom:ret1
         (check_eitem) check_eitem:ret1

         (scan_eitem) scan_eitem:

          (check_operator) check_operator:    ABC%*1.1) 

           (check_literal) check_literal:lit=',' idx=20 'ABC%*1.1) '
           (check_literal) check_literal:After drop space:',' idx=20 'ABC%*1.1) '
           (check_literal)   ',' != 'A'
           (check_literal) check_literal: ret0
          (check_operator) check_operator:ret0

          (check_function) check_function: 'ABC%*1.1) '
          (check_function) check_function: ret0

          (check_atom) check_atom:

           (check_literal) check_literal:lit=' %' idx=17 '   ABC%*1.1) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'%' idx=20 'ABC%*1.1) '
           (check_literal)   '%' != 'A'
           (check_literal) check_literal: ret0

           (check_literal) check_literal:lit=' "' idx=17 '   ABC%*1.1) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'"' idx=20 'ABC%*1.1) '
           (check_literal)   '"' != 'A'
           (check_literal) check_literal: ret0

           (check_number) check_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret0

            (check_integer) check_integer: 'ABC%*1.1) '
            (check_integer) check_integer:ret0
           (check_number) check_number: ret0

           (check_variable) check_variable:

            (check_vname) check_vname 'ABC%*1.1) ':
            (check_vname) check_vname ret1 '%*1.1) ':
           (check_variable) check_variable: '%*1.1) '
           (check_variable) check_variable: Ary test '*1.1) '

            (check_literal) check_literal:lit='(' idx=24 '*1.1) '
            (check_literal) check_literal:After drop space:'(' idx=24 '*1.1) '
            (check_literal)   '(' != '*'
            (check_literal) check_literal: ret0
           (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
          (check_variable) check_variable:ret1 
         (check_atom) check_atom:ret1

         (scan_atom) scan_atom:

          (check_literal) check_literal:lit=' %' idx=17 '   ABC%*1.1) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=20 'ABC%*1.1) '
          (check_literal)   '%' != 'A'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=17 '   ABC%*1.1) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=20 'ABC%*1.1) '
          (check_literal)   '"' != 'A'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: 'ABC%*1.1) '
           (check_integer) check_integer:ret0
          (check_number) check_number: ret0

          (check_variable) check_variable:

           (check_vname) check_vname 'ABC%*1.1) ':
           (check_vname) check_vname ret1 '%*1.1) ':
          (check_variable) check_variable: '%*1.1) '
          (check_variable) check_variable: Ary test '*1.1) '

           (check_literal) check_literal:lit='(' idx=24 '*1.1) '
           (check_literal) check_literal:After drop space:'(' idx=24 '*1.1) '
           (check_literal)   '(' != '*'
           (check_literal) check_literal: ret0
          (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
         (check_variable) check_variable:ret1 

         (scan_variable) scan_variable:

          (scan_vname) scan_vname: '   ABC%*1.1) '
          (scan_vname) scan_vname: ret1 'ABC'
         (scan_variable) scan_variable: '%*1.1) ' vname='ABC'
         (scan_variable) scan_variable: Ary test '*1.1) '

          (check_literal) check_literal:lit='(' idx=24 '*1.1) '
          (check_literal) check_literal:After drop space:'(' idx=24 '*1.1) '
          (check_literal)   '(' != '*'
          (check_literal) check_literal: ret0
         (scan_variable) scan_variable:ret1 vname='ABC%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'ABC%' exptype:i
        (operator_precedence) 
- is operator
        (token_is_function) 
token_is_function:
        (token_is_function) 
token_is_function:ABC% is not function
token_is_variable: tok:'ABC%'
        (token_is_function) 
token_is_function:
        (token_is_function) 
token_is_function:ABC% is not function
        (init_get_name) 
init_get_name:'ABC%'
        (init_get_name) 
init_get_name:'ABC%'
        (get_name) 
get_name:gn:'ABC%'
process_token:type:i req_type:i
modify_expression_type:Inittype:i Intype:i Outtype:i
( output_variable) [i,(f U )] i i ABC%
        (print_var_info) 
VAR INFO: '              ABC%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
        (scan_atom) scan_atom:ret1

        (check_eitem) check_eitem: '*1.1) '

         (check_operator) check_operator: *1.1) 

          (check_literal) check_literal:lit=',' idx=24 '*1.1) '
          (check_literal) check_literal:After drop space:',' idx=24 '*1.1) '
          (check_literal)   ',' != '*'
          (check_literal) check_literal: ret0
         (check_operator) check_operator: ret1
        (check_eitem) check_eitem:ret1

        (scan_eitem) scan_eitem:

         (check_operator) check_operator: *1.1) 

          (check_literal) check_literal:lit=',' idx=24 '*1.1) '
          (check_literal) check_literal:After drop space:',' idx=24 '*1.1) '
          (check_literal)   ',' != '*'
          (check_literal) check_literal: ret0
         (check_operator) check_operator: ret1

         (scan_operator) scan_operator: '*1.1) '

          (check_literal) check_literal:lit=',' idx=24 '*1.1) '
          (check_literal) check_literal:After drop space:',' idx=24 '*1.1) '
          (check_literal)   ',' != '*'
          (check_literal) check_literal: ret0
         (scan_operator) scan_operator: ret1 '1.1) '
   Frst:0 T:'*' exptype:i
        (operator_precedence) 
* is operator
        (operator_precedence) 
- is operator
'*' is operator
        (process_token) 
Token is operator o1 name:* o2 name:-
        (process_token) 
opr1:5 opr2:3
        (operator_precedence) 
- is operator
        (operator_precedence) 
- is operator
Push 1
 Push:'*'
        (op_stack_print) 
------------------
        (op_stack_print) 
Operator Stack     (7)

        (op_stack_print) 
000: = type:0
        (op_stack_print) 
001: + type:1
        (op_stack_print) 
002: ( type:16
        (op_stack_print) 
003: ( type:16
        (op_stack_print) 
004: + type:0
        (op_stack_print) 
005: - type:0
        (op_stack_print) 
006: * type:0
        (op_stack_print) 
------------------


         (check_eitem) check_eitem: '1.1) '

          (check_operator) check_operator: 1.1) 

           (check_literal) check_literal:lit=',' idx=25 '1.1) '
           (check_literal) check_literal:After drop space:',' idx=25 '1.1) '
           (check_literal)   ',' != '1'
           (check_literal) check_literal: ret0
          (check_operator) check_operator:ret0

          (check_function) check_function: '1.1) '
          (check_function) check_function: ret0

          (check_atom) check_atom:

           (check_literal) check_literal:lit=' %' idx=25 '1.1) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'%' idx=25 '1.1) '
           (check_literal)   '%' != '1'
           (check_literal) check_literal: ret0

           (check_literal) check_literal:lit=' "' idx=25 '1.1) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'"' idx=25 '1.1) '
           (check_literal)   '"' != '1'
           (check_literal) check_literal: ret0

           (check_number) check_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret1
           (check_number) check_number: ret1
          (check_atom) check_atom:ret1
         (check_eitem) check_eitem:ret1

         (scan_eitem) scan_eitem:

          (check_operator) check_operator: 1.1) 

           (check_literal) check_literal:lit=',' idx=25 '1.1) '
           (check_literal) check_literal:After drop space:',' idx=25 '1.1) '
           (check_literal)   ',' != '1'
           (check_literal) check_literal: ret0
          (check_operator) check_operator:ret0

          (check_function) check_function: '1.1) '
          (check_function) check_function: ret0

          (check_atom) check_atom:

           (check_literal) check_literal:lit=' %' idx=25 '1.1) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'%' idx=25 '1.1) '
           (check_literal)   '%' != '1'
           (check_literal) check_literal: ret0

           (check_literal) check_literal:lit=' "' idx=25 '1.1) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'"' idx=25 '1.1) '
           (check_literal)   '"' != '1'
           (check_literal) check_literal: ret0

           (check_number) check_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret1
           (check_number) check_number: ret1
          (check_atom) check_atom:ret1

          (scan_atom) scan_atom:

           (check_literal) check_literal:lit=' %' idx=25 '1.1) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'%' idx=25 '1.1) '
           (check_literal)   '%' != '1'
           (check_literal) check_literal: ret0

           (check_literal) check_literal:lit=' "' idx=25 '1.1) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'"' idx=25 '1.1) '
           (check_literal)   '"' != '1'
           (check_literal) check_literal: ret0

           (check_number) check_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret1
           (check_number) check_number: ret1

           (scan_number) scan_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret1

            (scan_float) scan_float:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (scan_float) scan_float: ret1
   Frst:0 T:'1.1' exptype:i
           (operator_precedence) 
* is operator
modify_expression_type:Inittype:i Intype:f Outtype:f
(    output_float) [f,(f U )] f f 1.1
           (scan_atom) scan_atom:ret1

           (check_eitem) check_eitem: ') '

            (check_operator) check_operator: ) 

             (check_literal) check_literal:lit=',' idx=28 ') '
             (check_literal) check_literal:After drop space:',' idx=28 ') '
             (check_literal)   ',' != ')'
             (check_literal) check_literal: ret0
            (check_operator) check_operator:ret0

            (check_function) check_function: ') '
            (check_function) check_function: ret0

            (check_atom) check_atom:

             (check_literal) check_literal:lit=' %' idx=28 ') '
             (check_literal) dropping space
             (check_literal) check_literal:After drop space:'%' idx=28 ') '
             (check_literal)   '%' != ')'
             (check_literal) check_literal: ret0

             (check_literal) check_literal:lit=' "' idx=28 ') '
             (check_literal) dropping space
             (check_literal) check_literal:After drop space:'"' idx=28 ') '
             (check_literal)   '"' != ')'
             (check_literal) check_literal: ret0

             (check_number) check_number:

              (check_float) check_float:
              (isfloatdigit) isfloatdigit:
              (check_float) check_float: ret0

              (check_integer) check_integer: ') '
              (check_integer) check_integer:ret0
             (check_number) check_number: ret0

             (check_variable) check_variable:

              (check_vname) check_vname ') ':
              (check_vname) check_vname ret0 ') ':
             (check_variable) check_variable:ret0 
            (check_atom) check_atom:ret1

            (check_sub_expr) check_sub_expr:

             (check_literal) check_literal:lit=' (' idx=28 ') '
             (check_literal) dropping space
             (check_literal) check_literal:After drop space:'(' idx=28 ') '
             (check_literal)   '(' != ')'
             (check_literal) check_literal: ret0
            (check_sub_expr) check_sub_expr: ret0
           (check_eitem) check_eitem:ret0
          (scan_expression) scan_expression: ret1 ') '

          (scan_literal) scan_literal:lit=' )' ') '
          (scan_literal) scan_literal:After drop space:) 
          (scan_literal) scan_literal:while loop:) 
   Frst:0 T:')' exptype:f
          (operator_precedence) 
* is operator
          (process_token) 
Pop 3
Pop '*'
          (op_stack_print) 
------------------
          (op_stack_print) 
Operator Stack     (6)

          (op_stack_print) 
000: = type:0
          (op_stack_print) 
001: + type:1
          (op_stack_print) 
002: ( type:16
          (op_stack_print) 
003: ( type:16
          (op_stack_print) 
004: + type:0
          (op_stack_print) 
005: - type:0
          (op_stack_print) 
------------------

( output_operator) [f,(f U )] i i *
          (token_is_function) 
token_is_function:
          (token_is_function) 
token_is_function:* is not function
          (process_token) 
Pop 3
Pop '-'
          (op_stack_print) 
------------------
          (op_stack_print) 
Operator Stack     (5)

          (op_stack_print) 
000: = type:0
          (op_stack_print) 
001: + type:1
          (op_stack_print) 
002: ( type:16
          (op_stack_print) 
003: ( type:16
          (op_stack_print) 
004: + type:0
          (op_stack_print) 
------------------

( output_operator) [f,(f U )] i i -
          (token_is_function) 
token_is_function:
          (token_is_function) 
token_is_function:- is not function
          (process_token) 
Pop 3
Pop '+'
          (op_stack_print) 
------------------
          (op_stack_print) 
Operator Stack     (4)

          (op_stack_print) 
000: = type:0
          (op_stack_print) 
001: + type:1
          (op_stack_print) 
002: ( type:16
          (op_stack_print) 
003: ( type:16
          (op_stack_print) 
------------------

( output_operator) [f,(f U )] i i +
          (token_is_function) 
token_is_function:
          (token_is_function) 
token_is_function:+ is not function
Pop 4
Pop '('
          (op_stack_print) 
------------------
          (op_stack_print) 
Operator Stack     (3)

          (op_stack_print) 
000: = type:0
          (op_stack_print) 
001: + type:1
          (op_stack_print) 
002: ( type:16
          (op_stack_print) 
------------------

(  output_sub_end)
          (token_is_function) 
token_is_function:
          (token_is_function) 
token_is_function:( is not function
(  output_sub_end)
          (scan_literal) scan_literal:ret1
   Frst:0 T:')' exptype:U
Pop 4
Pop '('
         (op_stack_print) 
------------------
         (op_stack_print) 
Operator Stack     (2)

         (op_stack_print) 
000: = type:0
         (op_stack_print) 
001: + type:1
         (op_stack_print) 
------------------

(  output_sub_end)
         (token_is_function) 
token_is_function:
         (token_is_function) 
token_is_function:+ is not function
(  output_sub_end)
         (scan_sub_expr) scan_sub_expr:ret1

         (check_eitem) check_eitem: ' '

          (check_operator) check_operator:  

           (check_literal) check_literal:lit=',' idx=30 ''
           (check_literal) check_literal:After drop space:',' idx=30 ''
           (check_literal) check_literal  ret0 Empty test string
          (check_operator) check_operator:ret0

          (check_function) check_function: ''
          (check_function) check_function: ret0

          (check_atom) check_atom:

           (check_literal) check_literal:lit=' %' idx=29 ' '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'%' idx=30 ''
           (check_literal) check_literal  ret0 Empty test string

           (check_literal) check_literal:lit=' "' idx=29 ' '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'"' idx=30 ''
           (check_literal) check_literal  ret0 Empty test string

           (check_number) check_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret0

            (check_integer) check_integer: ''
            (check_integer) check_integer:ret0
           (check_number) check_number: ret0

           (check_variable) check_variable:

            (check_vname) check_vname '':
            (check_vname) check_vname ret0 '':
           (check_variable) check_variable:ret0 
          (check_atom) check_atom:ret1

          (check_sub_expr) check_sub_expr:

           (check_literal) check_literal:lit=' (' idx=29 ' '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'(' idx=30 ''
           (check_literal) check_literal  ret0 Empty test string
          (check_sub_expr) check_sub_expr: ret0
         (check_eitem) check_eitem:ret0
        (scan_expression) scan_expression: ret1 ' '
       (scan_assignment) scan_assignment: ret1
Finalise stack
Pop '+'
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (1)

      (op_stack_print) 
000: = type:0
      (op_stack_print) 
------------------

( output_operator) [f,()] f f +
      (token_is_function) 
token_is_function:
      (token_is_function) 
token_is_function:+ is not function
Pop '='
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (0)

      (op_stack_print) 
------------------

( output_operator) [f,()] f f =
      (token_is_function) 
token_is_function:
      (token_is_function) 
token_is_function:= is not function
      (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'A'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'A'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '*'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'Z%'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '*'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'ABC%'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FLT          f rq:f '1.1'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '*'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '-'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '+'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f '+'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f '='  0:
=================
 BE:A
type_check_stack_push: 'A'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (1)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'A' type:f (1)
 BE:A
type_check_stack_push: 'A'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (2)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A' type:1
      (type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'A' type:f (1)
001: 'A' type:f (1)
 BE:

Type Check Stack (2)

000: 'A' type:f (1)
001: 'A' type:f (1)
 BE:

Type Check Stack (2)

000: 'A' type:f (1)
001: 'A' type:f (1)
 BE:2
type_check_stack_push: '2'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (3)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A' type:1
      (type_check_stack_print) 
002: '2' type:0
      (type_check_stack_print) 
------------------


Type Check Stack (3)

000: 'A' type:f (1)
001: 'A' type:f (1)
002: '2' type:i (0)
 BE:3
type_check_stack_push: '3'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (4)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A' type:1
      (type_check_stack_print) 
002: '2' type:0
      (type_check_stack_print) 
003: '3' type:0
      (type_check_stack_print) 
------------------


Type Check Stack (4)

000: 'A' type:f (1)
001: 'A' type:f (1)
002: '2' type:i (0)
003: '3' type:i (0)
 BE:*
BUFF_ID_OPERATOR
Found operator *
type_check_stack_pop: '3'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (3)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A' type:1
      (type_check_stack_print) 
002: '2' type:0
      (type_check_stack_print) 
------------------

type_check_stack_pop: '2'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (2)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A' type:1
      (type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (3)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A' type:1
      (type_check_stack_print) 
002: '000' type:0
      (type_check_stack_print) 
------------------


Type Check Stack (3)

000: 'A' type:f (1)
001: 'A' type:f (1)
002: '000' type:i (0)
 BE:3
type_check_stack_push: '3'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (4)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A' type:1
      (type_check_stack_print) 
002: '000' type:0
      (type_check_stack_print) 
003: '3' type:0
      (type_check_stack_print) 
------------------


Type Check Stack (4)

000: 'A' type:f (1)
001: 'A' type:f (1)
002: '000' type:i (0)
003: '3' type:i (0)
 BE:Z%
type_check_stack_push: 'Z%'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (5)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A' type:1
      (type_check_stack_print) 
002: '000' type:0
      (type_check_stack_print) 
003: '3' type:0
      (type_check_stack_print) 
004: 'Z%' type:0
      (type_check_stack_print) 
------------------


Type Check Stack (5)

000: 'A' type:f (1)
001: 'A' type:f (1)
002: '000' type:i (0)
003: '3' type:i (0)
004: 'Z%' type:i (0)
 BE:*
BUFF_ID_OPERATOR
Found operator *
type_check_stack_pop: 'Z%'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (4)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A' type:1
      (type_check_stack_print) 
002: '000' type:0
      (type_check_stack_print) 
003: '3' type:0
      (type_check_stack_print) 
------------------

type_check_stack_pop: '3'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (3)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A' type:1
      (type_check_stack_print) 
002: '000' type:0
      (type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (4)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A' type:1
      (type_check_stack_print) 
002: '000' type:0
      (type_check_stack_print) 
003: '000' type:0
      (type_check_stack_print) 
------------------


Type Check Stack (4)

000: 'A' type:f (1)
001: 'A' type:f (1)
002: '000' type:i (0)
003: '000' type:i (0)
 BE:ABC%
type_check_stack_push: 'ABC%'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (5)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A' type:1
      (type_check_stack_print) 
002: '000' type:0
      (type_check_stack_print) 
003: '000' type:0
      (type_check_stack_print) 
004: 'ABC%' type:0
      (type_check_stack_print) 
------------------


Type Check Stack (5)

000: 'A' type:f (1)
001: 'A' type:f (1)
002: '000' type:i (0)
003: '000' type:i (0)
004: 'ABC%' type:i (0)
 BE:1.1
type_check_stack_push: '1.1'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (6)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A' type:1
      (type_check_stack_print) 
002: '000' type:0
      (type_check_stack_print) 
003: '000' type:0
      (type_check_stack_print) 
004: 'ABC%' type:0
      (type_check_stack_print) 
005: '1.1' type:1
      (type_check_stack_print) 
------------------


Type Check Stack (6)

000: 'A' type:f (1)
001: 'A' type:f (1)
002: '000' type:i (0)
003: '000' type:i (0)
004: 'ABC%' type:i (0)
005: '1.1' type:f (1)
 BE:*
BUFF_ID_OPERATOR
Found operator *
type_check_stack_pop: '1.1'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (5)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A' type:1
      (type_check_stack_print) 
002: '000' type:0
      (type_check_stack_print) 
003: '000' type:0
      (type_check_stack_print) 
004: 'ABC%' type:0
      (type_check_stack_print) 
------------------

type_check_stack_pop: 'ABC%'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (4)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A' type:1
      (type_check_stack_print) 
002: '000' type:0
      (type_check_stack_print) 
003: '000' type:0
      (type_check_stack_print) 
------------------

 Mutable type 1 0
type_with_least_conversion_from: f i => f
type_with_least_conversion_from: f i => f
 Autoconversion
 --------------
 Op1: type:1 req type:1
 Op2: type:0 req type:0
 BE:  type:1 req type:1
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f 'A'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     f rq:f 'A'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 6 5
(dump_exp_buffer2) N8 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_VARIABLE     i rq:i 'Z%'  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 9 8
(dump_exp_buffer2) N11 EXP_BUFF_ID_VARIABLE     i rq:i 'ABC%'  0:
(dump_exp_buffer2) N12 EXP_BUFF_ID_FLT          f rq:f '1.1'  0:
=================
 Insert after 11 exp_buffer2_i:12
   Found at i:10
   Copied 11 to 12:
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f 'A'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     f rq:f 'A'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 6 5
(dump_exp_buffer2) N8 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_VARIABLE     i rq:i 'Z%'  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 9 8
(dump_exp_buffer2) N11 EXP_BUFF_ID_VARIABLE     i rq:i 'ABC%'  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 12 11
(dump_exp_buffer2) N12 EXP_BUFF_ID_FLT          f rq:f '1.1'  0:
=================
type_check_stack_push: '000'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (5)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A' type:1
      (type_check_stack_print) 
002: '000' type:0
      (type_check_stack_print) 
003: '000' type:0
      (type_check_stack_print) 
004: '000' type:1
      (type_check_stack_print) 
------------------


Type Check Stack (5)

000: 'A' type:f (1)
001: 'A' type:f (1)
002: '000' type:i (0)
003: '000' type:i (0)
004: '000' type:f (1)
 BE:-
BUFF_ID_OPERATOR
Found operator -
type_check_stack_pop: '000'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (4)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A' type:1
      (type_check_stack_print) 
002: '000' type:0
      (type_check_stack_print) 
003: '000' type:0
      (type_check_stack_print) 
------------------

type_check_stack_pop: '000'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (3)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A' type:1
      (type_check_stack_print) 
002: '000' type:0
      (type_check_stack_print) 
------------------

 Mutable type 1 0
type_with_least_conversion_from: f i => f
type_with_least_conversion_from: f i => f
 Autoconversion
 --------------
 Op1: type:1 req type:1
 Op2: type:0 req type:0
 BE:  type:1 req type:1
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f 'A'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     f rq:f 'A'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 6 5
(dump_exp_buffer2) N8 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_VARIABLE     i rq:i 'Z%'  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 9 8
(dump_exp_buffer2) N11 EXP_BUFF_ID_VARIABLE     i rq:i 'ABC%'  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 12 11
(dump_exp_buffer2) N12 EXP_BUFF_ID_FLT          f rq:f '1.1'  0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_OPERATOR     f rq:f '*'  2: 12 11
=================
 Insert after 10 exp_buffer2_i:14
   Found at i:9
   Copied 13 to 14:
   Copied 12 to 13:
   Copied 11 to 12:
   Copied 10 to 11:
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f 'A'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     f rq:f 'A'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 6 5
(dump_exp_buffer2) N8 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_VARIABLE     i rq:i 'Z%'  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 9 8
(dump_exp_buffer2) N16 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 13 10
(dump_exp_buffer2) N11 EXP_BUFF_ID_VARIABLE     i rq:i 'ABC%'  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 12 11
(dump_exp_buffer2) N12 EXP_BUFF_ID_FLT          f rq:f '1.1'  0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_OPERATOR     f rq:f '*'  2: 12 11
=================
type_check_stack_push: '000'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (4)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A' type:1
      (type_check_stack_print) 
002: '000' type:0
      (type_check_stack_print) 
003: '000' type:1
      (type_check_stack_print) 
------------------


Type Check Stack (4)

000: 'A' type:f (1)
001: 'A' type:f (1)
002: '000' type:i (0)
003: '000' type:f (1)
 BE:+
BUFF_ID_OPERATOR
Found operator +
type_check_stack_pop: '000'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (3)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A' type:1
      (type_check_stack_print) 
002: '000' type:0
      (type_check_stack_print) 
------------------

type_check_stack_pop: '000'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (2)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A' type:1
      (type_check_stack_print) 
------------------

 Mutable type 1 0
type_with_least_conversion_from: f i => f
type_with_least_conversion_from: f i => f
 Autoconversion
 --------------
 Op1: type:1 req type:1
 Op2: type:0 req type:0
 BE:  type:1 req type:1
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f 'A'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     f rq:f 'A'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 6 5
(dump_exp_buffer2) N8 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_VARIABLE     i rq:i 'Z%'  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 9 8
(dump_exp_buffer2) N16 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 13 10
(dump_exp_buffer2) N11 EXP_BUFF_ID_VARIABLE     i rq:i 'ABC%'  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 12 11
(dump_exp_buffer2) N12 EXP_BUFF_ID_FLT          f rq:f '1.1'  0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_OPERATOR     f rq:f '*'  2: 12 11
(dump_exp_buffer2) N15 EXP_BUFF_ID_OPERATOR     f rq:f '-'  2: 13 10
=================
 Insert after 7 exp_buffer2_i:16
   Found at i:6
   Copied 15 to 16:
   Copied 14 to 15:
   Copied 13 to 14:
   Copied 12 to 13:
   Copied 11 to 12:
   Copied 10 to 11:
   Copied 9 to 10:
   Copied 8 to 9:
   Copied 7 to 8:
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f 'A'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     f rq:f 'A'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 6 5
(dump_exp_buffer2) N18 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 15 7
(dump_exp_buffer2) N8 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_VARIABLE     i rq:i 'Z%'  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 9 8
(dump_exp_buffer2) N16 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 13 10
(dump_exp_buffer2) N11 EXP_BUFF_ID_VARIABLE     i rq:i 'ABC%'  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 12 11
(dump_exp_buffer2) N12 EXP_BUFF_ID_FLT          f rq:f '1.1'  0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_OPERATOR     f rq:f '*'  2: 12 11
(dump_exp_buffer2) N15 EXP_BUFF_ID_OPERATOR     f rq:f '-'  2: 13 10
=================
type_check_stack_push: '000'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (3)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A' type:1
      (type_check_stack_print) 
002: '000' type:1
      (type_check_stack_print) 
------------------


Type Check Stack (3)

000: 'A' type:f (1)
001: 'A' type:f (1)
002: '000' type:f (1)
 BE:

Type Check Stack (3)

000: 'A' type:f (1)
001: 'A' type:f (1)
002: '000' type:f (1)
 BE:

Type Check Stack (3)

000: 'A' type:f (1)
001: 'A' type:f (1)
002: '000' type:f (1)
 BE:

Type Check Stack (3)

000: 'A' type:f (1)
001: 'A' type:f (1)
002: '000' type:f (1)
 BE:

Type Check Stack (3)

000: 'A' type:f (1)
001: 'A' type:f (1)
002: '000' type:f (1)
 BE:+
BUFF_ID_OPERATOR
Found operator +
type_check_stack_pop: '000'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (2)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A' type:1
      (type_check_stack_print) 
------------------

type_check_stack_pop: 'A'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (1)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
------------------

 Mutable type 1 1
 Same type
type_check_stack_push: '000'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (2)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: '000' type:1
      (type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'A' type:f (1)
001: '000' type:f (1)
 BE::=
BUFF_ID_OPERATOR
Found operator :=
type_check_stack_pop: '000'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (1)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
------------------

type_check_stack_pop: 'A'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (0)

      (type_check_stack_print) 
------------------

 Mutable type 1 1
 Same type
type_check_stack_push: '000'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (1)

      (type_check_stack_print) 
000: '000' type:1
      (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:f (1)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'A'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'A'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '*'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'Z%'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '*'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'ABC%'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FLT          f rq:f '1.1'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '*'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '-'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '+'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f '+'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f ':='  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f 'A'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     f rq:f 'A'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 6 5
(dump_exp_buffer2) N18 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 15 7
(dump_exp_buffer2) N8 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_VARIABLE     i rq:i 'Z%'  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 9 8
(dump_exp_buffer2) N16 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 13 10
(dump_exp_buffer2) N11 EXP_BUFF_ID_VARIABLE     i rq:i 'ABC%'  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 12 11
(dump_exp_buffer2) N12 EXP_BUFF_ID_FLT          f rq:f '1.1'  0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_OPERATOR     f rq:f '*'  2: 12 11
(dump_exp_buffer2) N15 EXP_BUFF_ID_OPERATOR     f rq:f '-'  2: 13 10
(dump_exp_buffer2) N17 EXP_BUFF_ID_OPERATOR     f rq:f '+'  2: 15 7
(dump_exp_buffer2) N19 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N20 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N21 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N22 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N23 EXP_BUFF_ID_OPERATOR     f rq:f '+'  2: 17 2
(dump_exp_buffer2) N24 EXP_BUFF_ID_OPERATOR     f rq:f ':='  2: 23 1
=================
      (process_expression_types) 
==INFIX==

Var: A ary:0
infix_stack_push: 'A'
Var: A ary:0
infix_stack_push: 'A'
infix_stack_push: '2'
infix_stack_push: '3'
infix_stack_pop: '3'
infix_stack_pop: '2'
infix_stack_push: '(2 * 3)'
infix_stack_push: '3'
Var: Z% ary:0
infix_stack_push: 'Z%'
infix_stack_pop: 'Z%'
infix_stack_pop: '3'
infix_stack_push: '(3 * Z%)'
Var: ABC% ary:0
infix_stack_push: 'ABC%'
infix_stack_push: '1.1'
infix_stack_pop: '1.1'
infix_stack_pop: 'ABC%'
infix_stack_push: '(ABC% * 1.1)'
infix_stack_pop: '(ABC% * 1.1)'
infix_stack_pop: '(3 * Z%)'
infix_stack_push: '((3 * Z%) - (ABC% * 1.1))'
infix_stack_pop: '((3 * Z%) - (ABC% * 1.1))'
infix_stack_pop: '(2 * 3)'
infix_stack_push: '((2 * 3) + ((3 * Z%) - (ABC% * 1.1)))'
infix_stack_pop: '((2 * 3) + ((3 * Z%) - (ABC% * 1.1)))'
infix_stack_pop: 'A'
infix_stack_push: '(A + ((2 * 3) + ((3 * Z%) - (ABC% * 1.1))))'
infix_stack_pop: '(A + ((2 * 3) + ((3 * Z%) - (ABC% * 1.1))))'
infix_stack_pop: 'A'
infix_stack_push: '(A := (A + ((2 * 3) + ((3 * Z%) - (ABC% * 1.1)))))'
infix_stack_pop: '(A := (A + ((2 * 3) + ((3 * Z%) - (ABC% * 1.1)))))'
      (process_expression_types) ==(A := (A + ((2 * 3) + ((3 * Z%) - (ABC% * 1.1)))))==
      (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_START    U rq:?   0:
(    output_qcode) N4 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N5 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
(    output_qcode) N6 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(    output_qcode) N7 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 6 5
(    output_qcode) N18 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 15 7
(    output_qcode) N8 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(    output_qcode) N9 EXP_BUFF_ID_VARIABLE     i rq:i Z%  0:
(    output_qcode) N10 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 9 8
(    output_qcode) N16 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 13 10
(    output_qcode) N11 EXP_BUFF_ID_VARIABLE     i rq:i ABC%  0:
(    output_qcode) N14 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 12 11
(    output_qcode) N12 EXP_BUFF_ID_FLT          f rq:f 1.1  0:
(    output_qcode) N13 EXP_BUFF_ID_OPERATOR     f rq:f *  2: 12 11
(    output_qcode) N15 EXP_BUFF_ID_OPERATOR     f rq:f -  2: 13 10
(    output_qcode) N17 EXP_BUFF_ID_OPERATOR     f rq:f +  2: 15 7
(    output_qcode) N19 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N20 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N21 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N22 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N23 EXP_BUFF_ID_OPERATOR     f rq:f +  2: 17 2
(    output_qcode) N24 EXP_BUFF_ID_OPERATOR     f rq:f :=  2: 23 1

       (check_literal) check_literal:lit=':' idx=30 ''
       (check_literal) check_literal:After drop space:':' idx=30 ''
       (check_literal) check_literal  ret0 Empty test string
      (translate_file) 
cline scanned OK
*********
**X%=2 **
*********


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'X%=2 ':
     (check_vname) check_vname ret1 '%=2 ':
    (check_variable) check_variable: '%=2 '
    (check_variable) check_variable: Ary test '=2 '

     (check_literal) check_literal:lit='(' idx=2 '=2 '
     (check_literal) check_literal:After drop space:'(' idx=2 '=2 '
     (check_literal)   '(' != '='
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=2 '=2 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=2 '=2 '
   (check_literal) check_literal:After while():2 
   (check_literal) check_literal:ret1 

   (check_expression) check_expression: '2 '

    (check_eitem) check_eitem: '2 '

     (check_operator) check_operator: 2 

      (check_literal) check_literal:lit=',' idx=3 '2 '
      (check_literal) check_literal:After drop space:',' idx=3 '2 '
      (check_literal)   ',' != '2'
      (check_literal) check_literal: ret0
     (check_operator) check_operator:ret0

     (check_function) check_function: '2 '
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=3 '2 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=3 '2 '
      (check_literal)   '%' != '2'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=3 '2 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=3 '2 '
      (check_literal)   '"' != '2'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: '2 '
       (check_integer) check_integer:ret1
      (check_number) check_number: ret1
     (check_atom) check_atom:ret1
    (check_eitem) check_eitem:ret1

    (check_eitem) check_eitem: ' '

     (check_operator) check_operator:  

      (check_literal) check_literal:lit=',' idx=5 ''
      (check_literal) check_literal:After drop space:',' idx=5 ''
      (check_literal) check_literal  ret0 Empty test string
     (check_operator) check_operator:ret0

     (check_function) check_function: ''
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=4 ' '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=5 ''
      (check_literal) check_literal  ret0 Empty test string

      (check_literal) check_literal:lit=' "' idx=4 ' '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=5 ''
      (check_literal) check_literal  ret0 Empty test string

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: ''
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname '':
       (check_vname) check_vname ret0 '':
      (check_variable) check_variable:ret0 
     (check_atom) check_atom:ret1

     (check_sub_expr) check_sub_expr:

      (check_literal) check_literal:lit=' (' idx=4 ' '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'(' idx=5 ''
      (check_literal) check_literal  ret0 Empty test string
     (check_sub_expr) check_sub_expr: ret0
    (check_eitem) check_eitem:ret0
   (check_expression) check_expression:ret1 ' '
  (check_assignment) check_assignment:ret1
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=1, ' '
========================================================
X%=2 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'X%=2 ':
    (check_vname) check_vname ret1 '%=2 ':
   (check_variable) check_variable: '%=2 '
   (check_variable) check_variable: Ary test '=2 '

    (check_literal) check_literal:lit='(' idx=2 '=2 '
    (check_literal) check_literal:After drop space:'(' idx=2 '=2 '
    (check_literal)   '(' != '='
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=2 '=2 '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=2 '=2 '
  (check_literal) check_literal:After while():2 
  (check_literal) check_literal:ret1 

  (check_expression) check_expression: '2 '

   (check_eitem) check_eitem: '2 '

    (check_operator) check_operator: 2 

     (check_literal) check_literal:lit=',' idx=3 '2 '
     (check_literal) check_literal:After drop space:',' idx=3 '2 '
     (check_literal)   ',' != '2'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: '2 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=3 '2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=3 '2 '
     (check_literal)   '%' != '2'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=3 '2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=3 '2 '
     (check_literal)   '"' != '2'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '2 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: ' '

    (check_operator) check_operator:  

     (check_literal) check_literal:lit=',' idx=5 ''
     (check_literal) check_literal:After drop space:',' idx=5 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_operator) check_operator:ret0

    (check_function) check_function: ''
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=4 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=5 ''
     (check_literal) check_literal  ret0 Empty test string

     (check_literal) check_literal:lit=' "' idx=4 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=5 ''
     (check_literal) check_literal  ret0 Empty test string

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: ''
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname '':
      (check_vname) check_vname ret0 '':
     (check_variable) check_variable:ret0 
    (check_atom) check_atom:ret1

    (check_sub_expr) check_sub_expr:

     (check_literal) check_literal:lit=' (' idx=4 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'(' idx=5 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_sub_expr) check_sub_expr: ret0
   (check_eitem) check_eitem:ret0
  (check_expression) check_expression:ret1 ' '
 (check_assignment) check_assignment:ret1

 (scan_assignment) scan_assignment:

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'X%=2 '
   (scan_vname) scan_vname: ret1 'X'
  (scan_variable) scan_variable: '%=2 ' vname='X'
  (scan_variable) scan_variable: Ary test '=2 '

   (check_literal) check_literal:lit='(' idx=2 '=2 '
   (check_literal) check_literal:After drop space:'(' idx=2 '=2 '
   (check_literal)   '(' != '='
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='X%' is str:0 int:1 flt:0 ary:0
   Frst:1 T:'X%' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:X% is not function
token_is_variable: tok:'X%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:X% is not function
 (init_get_name) 
init_get_name:'X%'
 (init_get_name) 
init_get_name:'X%'
 (get_name) 
get_name:gn:'X%'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] i i X%
 (print_var_info) 
VAR INFO: '                X%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0

  (scan_literal) scan_literal:lit=' =' '=2 '
  (scan_literal) scan_literal:After drop space:=2 
  (scan_literal) scan_literal:while loop:=2 
   Frst:0 T:'=' exptype:i
  (operator_precedence) 
= is operator
'=' is operator
  (process_token) 
Token is operator o1 name:= o2 name:
  (process_token) 
opr1:1 opr2:0
Push 1
 Push:'='
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (1)

  (op_stack_print) 
000: = type:0
  (op_stack_print) 
------------------

  (scan_literal) scan_literal:ret1

  (scan_expression) scan_expression: '2 '

   (check_eitem) check_eitem: '2 '

    (check_operator) check_operator: 2 

     (check_literal) check_literal:lit=',' idx=3 '2 '
     (check_literal) check_literal:After drop space:',' idx=3 '2 '
     (check_literal)   ',' != '2'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: '2 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=3 '2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=3 '2 '
     (check_literal)   '%' != '2'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=3 '2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=3 '2 '
     (check_literal)   '"' != '2'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '2 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (scan_eitem) scan_eitem:

    (check_operator) check_operator: 2 

     (check_literal) check_literal:lit=',' idx=3 '2 '
     (check_literal) check_literal:After drop space:',' idx=3 '2 '
     (check_literal)   ',' != '2'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: '2 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=3 '2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=3 '2 '
     (check_literal)   '%' != '2'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=3 '2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=3 '2 '
     (check_literal)   '"' != '2'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '2 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1

    (scan_atom) scan_atom:

     (check_literal) check_literal:lit=' %' idx=3 '2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=3 '2 '
     (check_literal)   '%' != '2'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=3 '2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=3 '2 '
     (check_literal)   '"' != '2'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '2 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1

     (scan_number) scan_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '2 '
      (check_integer) check_integer:ret1

      (scan_integer) scan_integer:
      (scan_integer) scan_integer:ret1
   Frst:0 T:'2' exptype:i
     (operator_precedence) 
= is operator
modify_expression_type:Inittype:i Intype:i Outtype:i
(  output_integer) [i,()] i i 2
     (scan_integer) scan_integer:ret1  2
    (scan_atom) scan_atom:ret1

    (check_eitem) check_eitem: ' '

     (check_operator) check_operator:  

      (check_literal) check_literal:lit=',' idx=5 ''
      (check_literal) check_literal:After drop space:',' idx=5 ''
      (check_literal) check_literal  ret0 Empty test string
     (check_operator) check_operator:ret0

     (check_function) check_function: ''
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=4 ' '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=5 ''
      (check_literal) check_literal  ret0 Empty test string

      (check_literal) check_literal:lit=' "' idx=4 ' '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=5 ''
      (check_literal) check_literal  ret0 Empty test string

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: ''
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname '':
       (check_vname) check_vname ret0 '':
      (check_variable) check_variable:ret0 
     (check_atom) check_atom:ret1

     (check_sub_expr) check_sub_expr:

      (check_literal) check_literal:lit=' (' idx=4 ' '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'(' idx=5 ''
      (check_literal) check_literal  ret0 Empty test string
     (check_sub_expr) check_sub_expr: ret0
    (check_eitem) check_eitem:ret0
   (scan_expression) scan_expression: ret1 ' '
  (scan_assignment) scan_assignment: ret1
Finalise stack
Pop '='
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (0)

 (op_stack_print) 
------------------

( output_operator) [i,()] i i =
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:= is not function
 (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'X%'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '='  0:
=================
 BE:X%
type_check_stack_push: 'X%'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (1)

 (type_check_stack_print) 
000: 'X%' type:0
 (type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'X%' type:i (0)
 BE:2
type_check_stack_push: '2'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (2)

 (type_check_stack_print) 
000: 'X%' type:0
 (type_check_stack_print) 
001: '2' type:0
 (type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'X%' type:i (0)
001: '2' type:i (0)
 BE::=
BUFF_ID_OPERATOR
Found operator :=
type_check_stack_pop: '2'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (1)

 (type_check_stack_print) 
000: 'X%' type:0
 (type_check_stack_print) 
------------------

type_check_stack_pop: 'X%'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (0)

 (type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (1)

 (type_check_stack_print) 
000: '000' type:0
 (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'X%'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i ':='  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i 'X%'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_OPERATOR     i rq:i ':='  2: 2 1
=================
 (process_expression_types) 
==INFIX==

Var: X% ary:0
infix_stack_push: 'X%'
infix_stack_push: '2'
infix_stack_pop: '2'
infix_stack_pop: 'X%'
infix_stack_push: '(X% := 2)'
infix_stack_pop: '(X% := 2)'
 (process_expression_types) ==(X% := 2)==
 (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i X%  0:
(    output_qcode) N2 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
(    output_qcode) N3 EXP_BUFF_ID_OPERATOR     i rq:i :=  2: 2 1

  (check_literal) check_literal:lit=':' idx=5 ''
  (check_literal) check_literal:After drop space:':' idx=5 ''
  (check_literal) check_literal  ret0 Empty test string
 (translate_file) 
cline scanned OK
**********************************************
**  A   = A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) **
**********************************************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'A   = A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) ':
     (check_vname) check_vname ret1 '   = A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) ':
    (check_variable) check_variable: '   = A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
    (check_variable) check_variable: Ary test '   = A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '

     (check_literal) check_literal:lit='(' idx=3 '   = A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
     (check_literal) check_literal:After drop space:'(' idx=3 '   = A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=3 '   = A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=6 '= A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
   (check_literal) check_literal:After while(): A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) 
   (check_literal) check_literal:ret1 

   (check_expression) check_expression: 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '

    (check_eitem) check_eitem: 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '

     (check_operator) check_operator: A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) 

      (check_literal) check_literal:lit=',' idx=8 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
      (check_literal) check_literal:After drop space:',' idx=8 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
      (check_literal)   ',' != 'A'
      (check_literal) check_literal: ret0
     (check_operator) check_operator:ret0

     (check_function) check_function: 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=8 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=8 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
      (check_literal)   '%' != 'A'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=8 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=8 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
      (check_literal)   '"' != 'A'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) ':
       (check_vname) check_vname ret1 ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1) ':
      (check_variable) check_variable: ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
      (check_variable) check_variable: Ary test ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '

       (check_literal) check_literal:lit='(' idx=9 ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
       (check_literal) check_literal:After drop space:'(' idx=9 ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
       (check_literal)   '(' != ' '
       (check_literal) check_literal: ret0
      (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
     (check_variable) check_variable:ret1 
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '

    (check_operator) check_operator:  + ( 2 * 3 + 3 * Z%-   ABC%*1.1) 

     (check_literal) check_literal:lit=',' idx=10 '+ ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
     (check_literal) check_literal:After drop space:',' idx=10 '+ ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
     (check_literal)   ',' != '+'
     (check_literal) check_literal: ret0
    (check_operator) check_operator: ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: ' ( 2 * 3 + 3 * Z%-   ABC%*1.1) '

    (check_operator) check_operator:  ( 2 * 3 + 3 * Z%-   ABC%*1.1) 

     (check_literal) check_literal:lit=',' idx=12 '( 2 * 3 + 3 * Z%-   ABC%*1.1) '
     (check_literal) check_literal:After drop space:',' idx=12 '( 2 * 3 + 3 * Z%-   ABC%*1.1) '
     (check_literal)   ',' != '('
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: '( 2 * 3 + 3 * Z%-   ABC%*1.1) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=11 ' ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=12 '( 2 * 3 + 3 * Z%-   ABC%*1.1) '
     (check_literal)   '%' != '('
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=11 ' ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=12 '( 2 * 3 + 3 * Z%-   ABC%*1.1) '
     (check_literal)   '"' != '('
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '( 2 * 3 + 3 * Z%-   ABC%*1.1) '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname '( 2 * 3 + 3 * Z%-   ABC%*1.1) ':
      (check_vname) check_vname ret0 '( 2 * 3 + 3 * Z%-   ABC%*1.1) ':
     (check_variable) check_variable:ret0 
    (check_atom) check_atom:ret1

    (check_sub_expr) check_sub_expr:

     (check_literal) check_literal:lit=' (' idx=11 ' ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'(' idx=12 '( 2 * 3 + 3 * Z%-   ABC%*1.1) '
     (check_literal) check_literal:After while(): 2 * 3 + 3 * Z%-   ABC%*1.1) 
     (check_literal) check_literal:ret1 
    (check_sub_expr) check_sub_expr: ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: ' 2 * 3 + 3 * Z%-   ABC%*1.1) '

    (check_operator) check_operator:  2 * 3 + 3 * Z%-   ABC%*1.1) 

     (check_literal) check_literal:lit=',' idx=14 '2 * 3 + 3 * Z%-   ABC%*1.1) '
     (check_literal) check_literal:After drop space:',' idx=14 '2 * 3 + 3 * Z%-   ABC%*1.1) '
     (check_literal)   ',' != '2'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: '2 * 3 + 3 * Z%-   ABC%*1.1) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=13 ' 2 * 3 + 3 * Z%-   ABC%*1.1) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=14 '2 * 3 + 3 * Z%-   ABC%*1.1) '
     (check_literal)   '%' != '2'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=13 ' 2 * 3 + 3 * Z%-   ABC%*1.1) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=14 '2 * 3 + 3 * Z%-   ABC%*1.1) '
     (check_literal)   '"' != '2'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '2 * 3 + 3 * Z%-   ABC%*1.1) '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: ' * 3 + 3 * Z%-   ABC%*1.1) '

    (check_operator) check_operator:  * 3 + 3 * Z%-   ABC%*1.1) 

     (check_literal) check_literal:lit=',' idx=16 '* 3 + 3 * Z%-   ABC%*1.1) '
     (check_literal) check_literal:After drop space:',' idx=16 '* 3 + 3 * Z%-   ABC%*1.1) '
     (check_literal)   ',' != '*'
     (check_literal) check_literal: ret0
    (check_operator) check_operator: ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: ' 3 + 3 * Z%-   ABC%*1.1) '

    (check_operator) check_operator:  3 + 3 * Z%-   ABC%*1.1) 

     (check_literal) check_literal:lit=',' idx=18 '3 + 3 * Z%-   ABC%*1.1) '
     (check_literal) check_literal:After drop space:',' idx=18 '3 + 3 * Z%-   ABC%*1.1) '
     (check_literal)   ',' != '3'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: '3 + 3 * Z%-   ABC%*1.1) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=17 ' 3 + 3 * Z%-   ABC%*1.1) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=18 '3 + 3 * Z%-   ABC%*1.1) '
     (check_literal)   '%' != '3'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=17 ' 3 + 3 * Z%-   ABC%*1.1) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=18 '3 + 3 * Z%-   ABC%*1.1) '
     (check_literal)   '"' != '3'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '3 + 3 * Z%-   ABC%*1.1) '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: ' + 3 * Z%-   ABC%*1.1) '

    (check_operator) check_operator:  + 3 * Z%-   ABC%*1.1) 

     (check_literal) check_literal:lit=',' idx=20 '+ 3 * Z%-   ABC%*1.1) '
     (check_literal) check_literal:After drop space:',' idx=20 '+ 3 * Z%-   ABC%*1.1) '
     (check_literal)   ',' != '+'
     (check_literal) check_literal: ret0
    (check_operator) check_operator: ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: ' 3 * Z%-   ABC%*1.1) '

    (check_operator) check_operator:  3 * Z%-   ABC%*1.1) 

     (check_literal) check_literal:lit=',' idx=22 '3 * Z%-   ABC%*1.1) '
     (check_literal) check_literal:After drop space:',' idx=22 '3 * Z%-   ABC%*1.1) '
     (check_literal)   ',' != '3'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: '3 * Z%-   ABC%*1.1) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=21 ' 3 * Z%-   ABC%*1.1) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=22 '3 * Z%-   ABC%*1.1) '
     (check_literal)   '%' != '3'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=21 ' 3 * Z%-   ABC%*1.1) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=22 '3 * Z%-   ABC%*1.1) '
     (check_literal)   '"' != '3'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '3 * Z%-   ABC%*1.1) '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: ' * Z%-   ABC%*1.1) '

    (check_operator) check_operator:  * Z%-   ABC%*1.1) 

     (check_literal) check_literal:lit=',' idx=24 '* Z%-   ABC%*1.1) '
     (check_literal) check_literal:After drop space:',' idx=24 '* Z%-   ABC%*1.1) '
     (check_literal)   ',' != '*'
     (check_literal) check_literal: ret0
    (check_operator) check_operator: ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: ' Z%-   ABC%*1.1) '

    (check_operator) check_operator:  Z%-   ABC%*1.1) 

     (check_literal) check_literal:lit=',' idx=26 'Z%-   ABC%*1.1) '
     (check_literal) check_literal:After drop space:',' idx=26 'Z%-   ABC%*1.1) '
     (check_literal)   ',' != 'Z'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: 'Z%-   ABC%*1.1) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=25 ' Z%-   ABC%*1.1) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=26 'Z%-   ABC%*1.1) '
     (check_literal)   '%' != 'Z'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=25 ' Z%-   ABC%*1.1) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=26 'Z%-   ABC%*1.1) '
     (check_literal)   '"' != 'Z'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'Z%-   ABC%*1.1) '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'Z%-   ABC%*1.1) ':
      (check_vname) check_vname ret1 '%-   ABC%*1.1) ':
     (check_variable) check_variable: '%-   ABC%*1.1) '
     (check_variable) check_variable: Ary test '-   ABC%*1.1) '

      (check_literal) check_literal:lit='(' idx=28 '-   ABC%*1.1) '
      (check_literal) check_literal:After drop space:'(' idx=28 '-   ABC%*1.1) '
      (check_literal)   '(' != '-'
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (check_eitem) check_eitem: '-   ABC%*1.1) '

   (check_operator) check_operator: -   ABC%*1.1) 

    (check_literal) check_literal:lit=',' idx=28 '-   ABC%*1.1) '
    (check_literal) check_literal:After drop space:',' idx=28 '-   ABC%*1.1) '
    (check_literal)   ',' != '-'
    (check_literal) check_literal: ret0
   (check_operator) check_operator: ret1
  (check_eitem) check_eitem:ret1

  (check_eitem) check_eitem: '   ABC%*1.1) '

   (check_operator) check_operator:    ABC%*1.1) 

    (check_literal) check_literal:lit=',' idx=32 'ABC%*1.1) '
    (check_literal) check_literal:After drop space:',' idx=32 'ABC%*1.1) '
    (check_literal)   ',' != 'A'
    (check_literal) check_literal: ret0
   (check_operator) check_operator:ret0

   (check_function) check_function: 'ABC%*1.1) '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=29 '   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=32 'ABC%*1.1) '
    (check_literal)   '%' != 'A'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=29 '   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=32 'ABC%*1.1) '
    (check_literal)   '"' != 'A'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'ABC%*1.1) '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'ABC%*1.1) ':
     (check_vname) check_vname ret1 '%*1.1) ':
    (check_variable) check_variable: '%*1.1) '
    (check_variable) check_variable: Ary test '*1.1) '

     (check_literal) check_literal:lit='(' idx=36 '*1.1) '
     (check_literal) check_literal:After drop space:'(' idx=36 '*1.1) '
     (check_literal)   '(' != '*'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1
 (check_eitem) check_eitem:ret1

 (check_eitem) check_eitem: '*1.1) '

  (check_operator) check_operator: *1.1) 

   (check_literal) check_literal:lit=',' idx=36 '*1.1) '
   (check_literal) check_literal:After drop space:',' idx=36 '*1.1) '
   (check_literal)   ',' != '*'
   (check_literal) check_literal: ret0
  (check_operator) check_operator: ret1
 (check_eitem) check_eitem:ret1

 (check_eitem) check_eitem: '1.1) '

  (check_operator) check_operator: 1.1) 

   (check_literal) check_literal:lit=',' idx=37 '1.1) '
   (check_literal) check_literal:After drop space:',' idx=37 '1.1) '
   (check_literal)   ',' != '1'
   (check_literal) check_literal: ret0
  (check_operator) check_operator:ret0

  (check_function) check_function: '1.1) '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=37 '1.1) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=37 '1.1) '
   (check_literal)   '%' != '1'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=37 '1.1) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=37 '1.1) '
   (check_literal)   '"' != '1'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret1
   (check_number) check_number: ret1
  (check_atom) check_atom:ret1
 (check_eitem) check_eitem:ret1

 (check_eitem) check_eitem: ') '

  (check_operator) check_operator: ) 

   (check_literal) check_literal:lit=',' idx=40 ') '
   (check_literal) check_literal:After drop space:',' idx=40 ') '
   (check_literal)   ',' != ')'
   (check_literal) check_literal: ret0
  (check_operator) check_operator:ret0

  (check_function) check_function: ') '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=40 ') '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=40 ') '
   (check_literal)   '%' != ')'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=40 ') '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=40 ') '
   (check_literal)   '"' != ')'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: ') '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname ') ':
    (check_vname) check_vname ret0 ') ':
   (check_variable) check_variable:ret0 
  (check_atom) check_atom:ret1

  (check_sub_expr) check_sub_expr:

   (check_literal) check_literal:lit=' (' idx=40 ') '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'(' idx=40 ') '
   (check_literal)   '(' != ')'
   (check_literal) check_literal: ret0
  (check_sub_expr) check_sub_expr: ret0
 (check_eitem) check_eitem:ret0
(check_expression) check_expression:ret1 ') '
(check_assignment) check_assignment:ret1
(check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=2, ') '
========================================================
  A   = A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'A   = A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) ':
    (check_vname) check_vname ret1 '   = A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) ':
   (check_variable) check_variable: '   = A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
   (check_variable) check_variable: Ary test '   = A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '

    (check_literal) check_literal:lit='(' idx=3 '   = A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
    (check_literal) check_literal:After drop space:'(' idx=3 '   = A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=3 '   = A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=6 '= A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
  (check_literal) check_literal:After while(): A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) 
  (check_literal) check_literal:ret1 

  (check_expression) check_expression: 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '

   (check_eitem) check_eitem: 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '

    (check_operator) check_operator: A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) 

     (check_literal) check_literal:lit=',' idx=8 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
     (check_literal) check_literal:After drop space:',' idx=8 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
     (check_literal)   ',' != 'A'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=8 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=8 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
     (check_literal)   '%' != 'A'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=8 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=8 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
     (check_literal)   '"' != 'A'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) ':
      (check_vname) check_vname ret1 ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1) ':
     (check_variable) check_variable: ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
     (check_variable) check_variable: Ary test ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '

      (check_literal) check_literal:lit='(' idx=9 ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
      (check_literal) check_literal:After drop space:'(' idx=9 ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
      (check_literal)   '(' != ' '
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (check_eitem) check_eitem: ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '

   (check_operator) check_operator:  + ( 2 * 3 + 3 * Z%-   ABC%*1.1) 

    (check_literal) check_literal:lit=',' idx=10 '+ ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
    (check_literal) check_literal:After drop space:',' idx=10 '+ ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
    (check_literal)   ',' != '+'
    (check_literal) check_literal: ret0
   (check_operator) check_operator: ret1
  (check_eitem) check_eitem:ret1

  (check_eitem) check_eitem: ' ( 2 * 3 + 3 * Z%-   ABC%*1.1) '

   (check_operator) check_operator:  ( 2 * 3 + 3 * Z%-   ABC%*1.1) 

    (check_literal) check_literal:lit=',' idx=12 '( 2 * 3 + 3 * Z%-   ABC%*1.1) '
    (check_literal) check_literal:After drop space:',' idx=12 '( 2 * 3 + 3 * Z%-   ABC%*1.1) '
    (check_literal)   ',' != '('
    (check_literal) check_literal: ret0
   (check_operator) check_operator:ret0

   (check_function) check_function: '( 2 * 3 + 3 * Z%-   ABC%*1.1) '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=11 ' ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=12 '( 2 * 3 + 3 * Z%-   ABC%*1.1) '
    (check_literal)   '%' != '('
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=11 ' ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=12 '( 2 * 3 + 3 * Z%-   ABC%*1.1) '
    (check_literal)   '"' != '('
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '( 2 * 3 + 3 * Z%-   ABC%*1.1) '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname '( 2 * 3 + 3 * Z%-   ABC%*1.1) ':
     (check_vname) check_vname ret0 '( 2 * 3 + 3 * Z%-   ABC%*1.1) ':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret1

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=11 ' ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=12 '( 2 * 3 + 3 * Z%-   ABC%*1.1) '
    (check_literal) check_literal:After while(): 2 * 3 + 3 * Z%-   ABC%*1.1) 
    (check_literal) check_literal:ret1 
   (check_sub_expr) check_sub_expr: ret1
  (check_eitem) check_eitem:ret1

  (check_eitem) check_eitem: ' 2 * 3 + 3 * Z%-   ABC%*1.1) '

   (check_operator) check_operator:  2 * 3 + 3 * Z%-   ABC%*1.1) 

    (check_literal) check_literal:lit=',' idx=14 '2 * 3 + 3 * Z%-   ABC%*1.1) '
    (check_literal) check_literal:After drop space:',' idx=14 '2 * 3 + 3 * Z%-   ABC%*1.1) '
    (check_literal)   ',' != '2'
    (check_literal) check_literal: ret0
   (check_operator) check_operator:ret0

   (check_function) check_function: '2 * 3 + 3 * Z%-   ABC%*1.1) '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=13 ' 2 * 3 + 3 * Z%-   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=14 '2 * 3 + 3 * Z%-   ABC%*1.1) '
    (check_literal)   '%' != '2'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=13 ' 2 * 3 + 3 * Z%-   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=14 '2 * 3 + 3 * Z%-   ABC%*1.1) '
    (check_literal)   '"' != '2'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '2 * 3 + 3 * Z%-   ABC%*1.1) '
     (check_integer) check_integer:ret1
    (check_number) check_number: ret1
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (check_eitem) check_eitem: ' * 3 + 3 * Z%-   ABC%*1.1) '

   (check_operator) check_operator:  * 3 + 3 * Z%-   ABC%*1.1) 

    (check_literal) check_literal:lit=',' idx=16 '* 3 + 3 * Z%-   ABC%*1.1) '
    (check_literal) check_literal:After drop space:',' idx=16 '* 3 + 3 * Z%-   ABC%*1.1) '
    (check_literal)   ',' != '*'
    (check_literal) check_literal: ret0
   (check_operator) check_operator: ret1
  (check_eitem) check_eitem:ret1

  (check_eitem) check_eitem: ' 3 + 3 * Z%-   ABC%*1.1) '

   (check_operator) check_operator:  3 + 3 * Z%-   ABC%*1.1) 

    (check_literal) check_literal:lit=',' idx=18 '3 + 3 * Z%-   ABC%*1.1) '
    (check_literal) check_literal:After drop space:',' idx=18 '3 + 3 * Z%-   ABC%*1.1) '
    (check_literal)   ',' != '3'
    (check_literal) check_literal: ret0
   (check_operator) check_operator:ret0

   (check_function) check_function: '3 + 3 * Z%-   ABC%*1.1) '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=17 ' 3 + 3 * Z%-   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=18 '3 + 3 * Z%-   ABC%*1.1) '
    (check_literal)   '%' != '3'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=17 ' 3 + 3 * Z%-   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=18 '3 + 3 * Z%-   ABC%*1.1) '
    (check_literal)   '"' != '3'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '3 + 3 * Z%-   ABC%*1.1) '
     (check_integer) check_integer:ret1
    (check_number) check_number: ret1
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (check_eitem) check_eitem: ' + 3 * Z%-   ABC%*1.1) '

   (check_operator) check_operator:  + 3 * Z%-   ABC%*1.1) 

    (check_literal) check_literal:lit=',' idx=20 '+ 3 * Z%-   ABC%*1.1) '
    (check_literal) check_literal:After drop space:',' idx=20 '+ 3 * Z%-   ABC%*1.1) '
    (check_literal)   ',' != '+'
    (check_literal) check_literal: ret0
   (check_operator) check_operator: ret1
  (check_eitem) check_eitem:ret1

  (check_eitem) check_eitem: ' 3 * Z%-   ABC%*1.1) '

   (check_operator) check_operator:  3 * Z%-   ABC%*1.1) 

    (check_literal) check_literal:lit=',' idx=22 '3 * Z%-   ABC%*1.1) '
    (check_literal) check_literal:After drop space:',' idx=22 '3 * Z%-   ABC%*1.1) '
    (check_literal)   ',' != '3'
    (check_literal) check_literal: ret0
   (check_operator) check_operator:ret0

   (check_function) check_function: '3 * Z%-   ABC%*1.1) '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=21 ' 3 * Z%-   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=22 '3 * Z%-   ABC%*1.1) '
    (check_literal)   '%' != '3'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=21 ' 3 * Z%-   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=22 '3 * Z%-   ABC%*1.1) '
    (check_literal)   '"' != '3'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '3 * Z%-   ABC%*1.1) '
     (check_integer) check_integer:ret1
    (check_number) check_number: ret1
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (check_eitem) check_eitem: ' * Z%-   ABC%*1.1) '

   (check_operator) check_operator:  * Z%-   ABC%*1.1) 

    (check_literal) check_literal:lit=',' idx=24 '* Z%-   ABC%*1.1) '
    (check_literal) check_literal:After drop space:',' idx=24 '* Z%-   ABC%*1.1) '
    (check_literal)   ',' != '*'
    (check_literal) check_literal: ret0
   (check_operator) check_operator: ret1
  (check_eitem) check_eitem:ret1

  (check_eitem) check_eitem: ' Z%-   ABC%*1.1) '

   (check_operator) check_operator:  Z%-   ABC%*1.1) 

    (check_literal) check_literal:lit=',' idx=26 'Z%-   ABC%*1.1) '
    (check_literal) check_literal:After drop space:',' idx=26 'Z%-   ABC%*1.1) '
    (check_literal)   ',' != 'Z'
    (check_literal) check_literal: ret0
   (check_operator) check_operator:ret0

   (check_function) check_function: 'Z%-   ABC%*1.1) '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=25 ' Z%-   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=26 'Z%-   ABC%*1.1) '
    (check_literal)   '%' != 'Z'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=25 ' Z%-   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=26 'Z%-   ABC%*1.1) '
    (check_literal)   '"' != 'Z'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'Z%-   ABC%*1.1) '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'Z%-   ABC%*1.1) ':
     (check_vname) check_vname ret1 '%-   ABC%*1.1) ':
    (check_variable) check_variable: '%-   ABC%*1.1) '
    (check_variable) check_variable: Ary test '-   ABC%*1.1) '

     (check_literal) check_literal:lit='(' idx=28 '-   ABC%*1.1) '
     (check_literal) check_literal:After drop space:'(' idx=28 '-   ABC%*1.1) '
     (check_literal)   '(' != '-'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1
 (check_eitem) check_eitem:ret1

 (check_eitem) check_eitem: '-   ABC%*1.1) '

  (check_operator) check_operator: -   ABC%*1.1) 

   (check_literal) check_literal:lit=',' idx=28 '-   ABC%*1.1) '
   (check_literal) check_literal:After drop space:',' idx=28 '-   ABC%*1.1) '
   (check_literal)   ',' != '-'
   (check_literal) check_literal: ret0
  (check_operator) check_operator: ret1
 (check_eitem) check_eitem:ret1

 (check_eitem) check_eitem: '   ABC%*1.1) '

  (check_operator) check_operator:    ABC%*1.1) 

   (check_literal) check_literal:lit=',' idx=32 'ABC%*1.1) '
   (check_literal) check_literal:After drop space:',' idx=32 'ABC%*1.1) '
   (check_literal)   ',' != 'A'
   (check_literal) check_literal: ret0
  (check_operator) check_operator:ret0

  (check_function) check_function: 'ABC%*1.1) '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=29 '   ABC%*1.1) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=32 'ABC%*1.1) '
   (check_literal)   '%' != 'A'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=29 '   ABC%*1.1) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=32 'ABC%*1.1) '
   (check_literal)   '"' != 'A'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'ABC%*1.1) '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'ABC%*1.1) ':
    (check_vname) check_vname ret1 '%*1.1) ':
   (check_variable) check_variable: '%*1.1) '
   (check_variable) check_variable: Ary test '*1.1) '

    (check_literal) check_literal:lit='(' idx=36 '*1.1) '
    (check_literal) check_literal:After drop space:'(' idx=36 '*1.1) '
    (check_literal)   '(' != '*'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) check_atom:ret1
(check_eitem) check_eitem:ret1

 (check_eitem) check_eitem: '*1.1) '

  (check_operator) check_operator: *1.1) 

   (check_literal) check_literal:lit=',' idx=36 '*1.1) '
   (check_literal) check_literal:After drop space:',' idx=36 '*1.1) '
   (check_literal)   ',' != '*'
   (check_literal) check_literal: ret0
  (check_operator) check_operator: ret1
 (check_eitem) check_eitem:ret1

 (check_eitem) check_eitem: '1.1) '

  (check_operator) check_operator: 1.1) 

   (check_literal) check_literal:lit=',' idx=37 '1.1) '
   (check_literal) check_literal:After drop space:',' idx=37 '1.1) '
   (check_literal)   ',' != '1'
   (check_literal) check_literal: ret0
  (check_operator) check_operator:ret0

  (check_function) check_function: '1.1) '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=37 '1.1) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=37 '1.1) '
   (check_literal)   '%' != '1'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=37 '1.1) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=37 '1.1) '
   (check_literal)   '"' != '1'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret1
   (check_number) check_number: ret1
  (check_atom) check_atom:ret1
 (check_eitem) check_eitem:ret1

 (check_eitem) check_eitem: ') '

  (check_operator) check_operator: ) 

   (check_literal) check_literal:lit=',' idx=40 ') '
   (check_literal) check_literal:After drop space:',' idx=40 ') '
   (check_literal)   ',' != ')'
   (check_literal) check_literal: ret0
  (check_operator) check_operator:ret0

  (check_function) check_function: ') '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=40 ') '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=40 ') '
   (check_literal)   '%' != ')'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=40 ') '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=40 ') '
   (check_literal)   '"' != ')'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: ') '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname ') ':
    (check_vname) check_vname ret0 ') ':
   (check_variable) check_variable:ret0 
  (check_atom) check_atom:ret1

  (check_sub_expr) check_sub_expr:

   (check_literal) check_literal:lit=' (' idx=40 ') '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'(' idx=40 ') '
   (check_literal)   '(' != ')'
   (check_literal) check_literal: ret0
  (check_sub_expr) check_sub_expr: ret0
 (check_eitem) check_eitem:ret0
(check_expression) check_expression:ret1 ') '
(check_assignment) check_assignment:ret1

 (scan_assignment) scan_assignment:

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'A   = A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
   (scan_vname) scan_vname: ret1 'A'
  (scan_variable) scan_variable: '   = A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) ' vname='A'
  (scan_variable) scan_variable: Ary test '   = A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '

   (check_literal) check_literal:lit='(' idx=3 '   = A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
   (check_literal) check_literal:After drop space:'(' idx=3 '   = A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='A' is str:0 int:0 flt:1 ary:0
   Frst:1 T:'A' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:A is not function
token_is_variable: tok:'A'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:A is not function
 (init_get_name) 
init_get_name:'A'
 (init_get_name) 
init_get_name:'A'
 (get_name) 
get_name:gn:'A'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] f f A
 (print_var_info) 
VAR INFO: '                 A' gbl:0 ref:1 int:0 flt:1 str:0 ary:0 max_str:0 max_ary:0 num_ind:0

  (scan_literal) scan_literal:lit=' =' '   = A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
  (scan_literal) scan_literal:After drop space:= A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) 
  (scan_literal) scan_literal:while loop:= A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) 
   Frst:0 T:'=' exptype:i
  (operator_precedence) 
= is operator
'=' is operator
  (process_token) 
Token is operator o1 name:= o2 name:
  (process_token) 
opr1:1 opr2:0
Push 1
 Push:'='
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (1)

  (op_stack_print) 
000: = type:0
  (op_stack_print) 
------------------

  (scan_literal) scan_literal:ret1

  (scan_expression) scan_expression: ' A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '

   (check_eitem) check_eitem: 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '

    (check_operator) check_operator: A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) 

     (check_literal) check_literal:lit=',' idx=8 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
     (check_literal) check_literal:After drop space:',' idx=8 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
     (check_literal)   ',' != 'A'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=8 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=8 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
     (check_literal)   '%' != 'A'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=8 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=8 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
     (check_literal)   '"' != 'A'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) ':
      (check_vname) check_vname ret1 ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1) ':
     (check_variable) check_variable: ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
     (check_variable) check_variable: Ary test ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '

      (check_literal) check_literal:lit='(' idx=9 ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
      (check_literal) check_literal:After drop space:'(' idx=9 ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
      (check_literal)   '(' != ' '
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator: A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) 

    (check_literal) check_literal:lit=',' idx=8 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
    (check_literal) check_literal:After drop space:',' idx=8 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
    (check_literal)   ',' != 'A'
    (check_literal) check_literal: ret0
   (check_operator) check_operator:ret0

   (check_function) check_function: 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=8 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=8 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
    (check_literal)   '%' != 'A'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=8 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=8 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
    (check_literal)   '"' != 'A'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) ':
     (check_vname) check_vname ret1 ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1) ':
    (check_variable) check_variable: ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
    (check_variable) check_variable: Ary test ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '

     (check_literal) check_literal:lit='(' idx=9 ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
     (check_literal) check_literal:After drop space:'(' idx=9 ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1

  (scan_atom) scan_atom:

   (check_literal) check_literal:lit=' %' idx=8 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=8 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
   (check_literal)   '%' != 'A'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=8 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=8 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
   (check_literal)   '"' != 'A'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) ':
    (check_vname) check_vname ret1 ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1) ':
   (check_variable) check_variable: ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
   (check_variable) check_variable: Ary test ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '

    (check_literal) check_literal:lit='(' idx=9 ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
    (check_literal) check_literal:After drop space:'(' idx=9 ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
   (scan_vname) scan_vname: ret1 'A'
  (scan_variable) scan_variable: ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1) ' vname='A'
  (scan_variable) scan_variable: Ary test ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '

   (check_literal) check_literal:lit='(' idx=9 ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
   (check_literal) check_literal:After drop space:'(' idx=9 ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='A' is str:0 int:0 flt:1 ary:0
   Frst:0 T:'A' exptype:i
 (operator_precedence) 
= is operator
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:A is not function
token_is_variable: tok:'A'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:A is not function
 (init_get_name) 
init_get_name:'A'
 (init_get_name) 
init_get_name:'A'
 (get_name) 
get_name:gn:'A'
process_token:type:i req_type:i
modify_expression_type:Inittype:i Intype:f Outtype:f
( output_variable) [f,()] f f A
 (print_var_info) 
VAR INFO: '                 A' gbl:0 ref:1 int:0 flt:1 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
 (scan_atom) scan_atom:ret1

 (check_eitem) check_eitem: ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '

  (check_operator) check_operator:  + ( 2 * 3 + 3 * Z%-   ABC%*1.1) 

   (check_literal) check_literal:lit=',' idx=10 '+ ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
   (check_literal) check_literal:After drop space:',' idx=10 '+ ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
   (check_literal)   ',' != '+'
   (check_literal) check_literal: ret0
  (check_operator) check_operator: ret1
 (check_eitem) check_eitem:ret1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator:  + ( 2 * 3 + 3 * Z%-   ABC%*1.1) 

   (check_literal) check_literal:lit=',' idx=10 '+ ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
   (check_literal) check_literal:After drop space:',' idx=10 '+ ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
   (check_literal)   ',' != '+'
   (check_literal) check_literal: ret0
  (check_operator) check_operator: ret1

  (scan_operator) scan_operator: ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1) '

   (check_literal) check_literal:lit=',' idx=10 '+ ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
   (check_literal) check_literal:After drop space:',' idx=10 '+ ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
   (check_literal)   ',' != '+'
   (check_literal) check_literal: ret0
  (scan_operator) scan_operator: ret1 ' ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
   Frst:0 T:'+' exptype:f
 (operator_precedence) 
+ is operator
 (operator_precedence) 
= is operator
'+' is operator
 (process_token) 
Token is operator o1 name:+ o2 name:=
 (process_token) 
opr1:3 opr2:1
 (operator_precedence) 
= is operator
 (operator_precedence) 
= is operator
Push 1
 Push:'+'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: = type:0
 (op_stack_print) 
001: + type:1
 (op_stack_print) 
------------------


  (check_eitem) check_eitem: ' ( 2 * 3 + 3 * Z%-   ABC%*1.1) '

   (check_operator) check_operator:  ( 2 * 3 + 3 * Z%-   ABC%*1.1) 

    (check_literal) check_literal:lit=',' idx=12 '( 2 * 3 + 3 * Z%-   ABC%*1.1) '
    (check_literal) check_literal:After drop space:',' idx=12 '( 2 * 3 + 3 * Z%-   ABC%*1.1) '
    (check_literal)   ',' != '('
    (check_literal) check_literal: ret0
   (check_operator) check_operator:ret0

   (check_function) check_function: '( 2 * 3 + 3 * Z%-   ABC%*1.1) '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=11 ' ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=12 '( 2 * 3 + 3 * Z%-   ABC%*1.1) '
    (check_literal)   '%' != '('
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=11 ' ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=12 '( 2 * 3 + 3 * Z%-   ABC%*1.1) '
    (check_literal)   '"' != '('
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '( 2 * 3 + 3 * Z%-   ABC%*1.1) '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname '( 2 * 3 + 3 * Z%-   ABC%*1.1) ':
     (check_vname) check_vname ret0 '( 2 * 3 + 3 * Z%-   ABC%*1.1) ':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret1

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=11 ' ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=12 '( 2 * 3 + 3 * Z%-   ABC%*1.1) '
    (check_literal) check_literal:After while(): 2 * 3 + 3 * Z%-   ABC%*1.1) 
    (check_literal) check_literal:ret1 
   (check_sub_expr) check_sub_expr: ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator:  ( 2 * 3 + 3 * Z%-   ABC%*1.1) 

    (check_literal) check_literal:lit=',' idx=12 '( 2 * 3 + 3 * Z%-   ABC%*1.1) '
    (check_literal) check_literal:After drop space:',' idx=12 '( 2 * 3 + 3 * Z%-   ABC%*1.1) '
    (check_literal)   ',' != '('
    (check_literal) check_literal: ret0
   (check_operator) check_operator:ret0

   (check_function) check_function: '( 2 * 3 + 3 * Z%-   ABC%*1.1) '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=11 ' ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=12 '( 2 * 3 + 3 * Z%-   ABC%*1.1) '
    (check_literal)   '%' != '('
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=11 ' ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=12 '( 2 * 3 + 3 * Z%-   ABC%*1.1) '
    (check_literal)   '"' != '('
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '( 2 * 3 + 3 * Z%-   ABC%*1.1) '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname '( 2 * 3 + 3 * Z%-   ABC%*1.1) ':
     (check_vname) check_vname ret0 '( 2 * 3 + 3 * Z%-   ABC%*1.1) ':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret1

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=11 ' ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=12 '( 2 * 3 + 3 * Z%-   ABC%*1.1) '
    (check_literal) check_literal:After while(): 2 * 3 + 3 * Z%-   ABC%*1.1) 
    (check_literal) check_literal:ret1 
   (check_sub_expr) check_sub_expr: ret1

   (scan_sub_expr) scan_sub_expr:

    (scan_literal) scan_literal:lit=' (' ' ( 2 * 3 + 3 * Z%-   ABC%*1.1) '
    (scan_literal) scan_literal:After drop space:( 2 * 3 + 3 * Z%-   ABC%*1.1) 
    (scan_literal) scan_literal:while loop:( 2 * 3 + 3 * Z%-   ABC%*1.1) 
   Frst:0 T:'(' exptype:f
    (operator_precedence) 
+ is operator
(output_sub_start)
 Push:'('
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (3)

    (op_stack_print) 
000: = type:0
    (op_stack_print) 
001: + type:1
    (op_stack_print) 
002: ( type:16
    (op_stack_print) 
------------------

    (scan_literal) scan_literal:ret1
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
   (op_stack_print) 
------------------
   (op_stack_print) 
Operator Stack     (4)

   (op_stack_print) 
000: = type:0
   (op_stack_print) 
001: + type:1
   (op_stack_print) 
002: ( type:16
   (op_stack_print) 
003: ( type:16
   (op_stack_print) 
------------------


    (scan_expression) scan_expression: ' 2 * 3 + 3 * Z%-   ABC%*1.1) '

     (check_eitem) check_eitem: '2 * 3 + 3 * Z%-   ABC%*1.1) '

      (check_operator) check_operator: 2 * 3 + 3 * Z%-   ABC%*1.1) 

       (check_literal) check_literal:lit=',' idx=14 '2 * 3 + 3 * Z%-   ABC%*1.1) '
       (check_literal) check_literal:After drop space:',' idx=14 '2 * 3 + 3 * Z%-   ABC%*1.1) '
       (check_literal)   ',' != '2'
       (check_literal) check_literal: ret0
      (check_operator) check_operator:ret0

      (check_function) check_function: '2 * 3 + 3 * Z%-   ABC%*1.1) '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=14 '2 * 3 + 3 * Z%-   ABC%*1.1) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=14 '2 * 3 + 3 * Z%-   ABC%*1.1) '
       (check_literal)   '%' != '2'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=14 '2 * 3 + 3 * Z%-   ABC%*1.1) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=14 '2 * 3 + 3 * Z%-   ABC%*1.1) '
       (check_literal)   '"' != '2'
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '2 * 3 + 3 * Z%-   ABC%*1.1) '
        (check_integer) check_integer:ret1
       (check_number) check_number: ret1
      (check_atom) check_atom:ret1
     (check_eitem) check_eitem:ret1

     (scan_eitem) scan_eitem:

      (check_operator) check_operator: 2 * 3 + 3 * Z%-   ABC%*1.1) 

       (check_literal) check_literal:lit=',' idx=14 '2 * 3 + 3 * Z%-   ABC%*1.1) '
       (check_literal) check_literal:After drop space:',' idx=14 '2 * 3 + 3 * Z%-   ABC%*1.1) '
       (check_literal)   ',' != '2'
       (check_literal) check_literal: ret0
      (check_operator) check_operator:ret0

      (check_function) check_function: '2 * 3 + 3 * Z%-   ABC%*1.1) '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=14 '2 * 3 + 3 * Z%-   ABC%*1.1) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=14 '2 * 3 + 3 * Z%-   ABC%*1.1) '
       (check_literal)   '%' != '2'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=14 '2 * 3 + 3 * Z%-   ABC%*1.1) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=14 '2 * 3 + 3 * Z%-   ABC%*1.1) '
       (check_literal)   '"' != '2'
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '2 * 3 + 3 * Z%-   ABC%*1.1) '
        (check_integer) check_integer:ret1
       (check_number) check_number: ret1
      (check_atom) check_atom:ret1

      (scan_atom) scan_atom:

       (check_literal) check_literal:lit=' %' idx=14 '2 * 3 + 3 * Z%-   ABC%*1.1) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=14 '2 * 3 + 3 * Z%-   ABC%*1.1) '
       (check_literal)   '%' != '2'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=14 '2 * 3 + 3 * Z%-   ABC%*1.1) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=14 '2 * 3 + 3 * Z%-   ABC%*1.1) '
       (check_literal)   '"' != '2'
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '2 * 3 + 3 * Z%-   ABC%*1.1) '
        (check_integer) check_integer:ret1
       (check_number) check_number: ret1

       (scan_number) scan_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '2 * 3 + 3 * Z%-   ABC%*1.1) '
        (check_integer) check_integer:ret1

        (scan_integer) scan_integer:
        (scan_integer) scan_integer:ret1
   Frst:0 T:'2' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(f U )] i i 2
       (scan_integer) scan_integer:ret1  2
      (scan_atom) scan_atom:ret1

      (check_eitem) check_eitem: ' * 3 + 3 * Z%-   ABC%*1.1) '

       (check_operator) check_operator:  * 3 + 3 * Z%-   ABC%*1.1) 

        (check_literal) check_literal:lit=',' idx=16 '* 3 + 3 * Z%-   ABC%*1.1) '
        (check_literal) check_literal:After drop space:',' idx=16 '* 3 + 3 * Z%-   ABC%*1.1) '
        (check_literal)   ',' != '*'
        (check_literal) check_literal: ret0
       (check_operator) check_operator: ret1
      (check_eitem) check_eitem:ret1

      (scan_eitem) scan_eitem:

       (check_operator) check_operator:  * 3 + 3 * Z%-   ABC%*1.1) 

        (check_literal) check_literal:lit=',' idx=16 '* 3 + 3 * Z%-   ABC%*1.1) '
        (check_literal) check_literal:After drop space:',' idx=16 '* 3 + 3 * Z%-   ABC%*1.1) '
        (check_literal)   ',' != '*'
        (check_literal) check_literal: ret0
       (check_operator) check_operator: ret1

       (scan_operator) scan_operator: ' * 3 + 3 * Z%-   ABC%*1.1) '

        (check_literal) check_literal:lit=',' idx=16 '* 3 + 3 * Z%-   ABC%*1.1) '
        (check_literal) check_literal:After drop space:',' idx=16 '* 3 + 3 * Z%-   ABC%*1.1) '
        (check_literal)   ',' != '*'
        (check_literal) check_literal: ret0
       (scan_operator) scan_operator: ret1 ' 3 + 3 * Z%-   ABC%*1.1) '
   Frst:0 T:'*' exptype:i
      (operator_precedence) 
* is operator
'*' is operator
      (process_token) 
Token is operator o1 name:* o2 name:(
      (process_token) 
opr1:5 opr2:0
Push 1
 Push:'*'
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (5)

      (op_stack_print) 
000: = type:0
      (op_stack_print) 
001: + type:1
      (op_stack_print) 
002: ( type:16
      (op_stack_print) 
003: ( type:16
      (op_stack_print) 
004: * type:0
      (op_stack_print) 
------------------


       (check_eitem) check_eitem: ' 3 + 3 * Z%-   ABC%*1.1) '

        (check_operator) check_operator:  3 + 3 * Z%-   ABC%*1.1) 

         (check_literal) check_literal:lit=',' idx=18 '3 + 3 * Z%-   ABC%*1.1) '
         (check_literal) check_literal:After drop space:',' idx=18 '3 + 3 * Z%-   ABC%*1.1) '
         (check_literal)   ',' != '3'
         (check_literal) check_literal: ret0
        (check_operator) check_operator:ret0

        (check_function) check_function: '3 + 3 * Z%-   ABC%*1.1) '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=17 ' 3 + 3 * Z%-   ABC%*1.1) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=18 '3 + 3 * Z%-   ABC%*1.1) '
         (check_literal)   '%' != '3'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=17 ' 3 + 3 * Z%-   ABC%*1.1) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=18 '3 + 3 * Z%-   ABC%*1.1) '
         (check_literal)   '"' != '3'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: '3 + 3 * Z%-   ABC%*1.1) '
          (check_integer) check_integer:ret1
         (check_number) check_number: ret1
        (check_atom) check_atom:ret1
       (check_eitem) check_eitem:ret1

       (scan_eitem) scan_eitem:

        (check_operator) check_operator:  3 + 3 * Z%-   ABC%*1.1) 

         (check_literal) check_literal:lit=',' idx=18 '3 + 3 * Z%-   ABC%*1.1) '
         (check_literal) check_literal:After drop space:',' idx=18 '3 + 3 * Z%-   ABC%*1.1) '
         (check_literal)   ',' != '3'
         (check_literal) check_literal: ret0
        (check_operator) check_operator:ret0

        (check_function) check_function: '3 + 3 * Z%-   ABC%*1.1) '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=17 ' 3 + 3 * Z%-   ABC%*1.1) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=18 '3 + 3 * Z%-   ABC%*1.1) '
         (check_literal)   '%' != '3'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=17 ' 3 + 3 * Z%-   ABC%*1.1) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=18 '3 + 3 * Z%-   ABC%*1.1) '
         (check_literal)   '"' != '3'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: '3 + 3 * Z%-   ABC%*1.1) '
          (check_integer) check_integer:ret1
         (check_number) check_number: ret1
        (check_atom) check_atom:ret1

        (scan_atom) scan_atom:

         (check_literal) check_literal:lit=' %' idx=17 ' 3 + 3 * Z%-   ABC%*1.1) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=18 '3 + 3 * Z%-   ABC%*1.1) '
         (check_literal)   '%' != '3'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=17 ' 3 + 3 * Z%-   ABC%*1.1) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=18 '3 + 3 * Z%-   ABC%*1.1) '
         (check_literal)   '"' != '3'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: '3 + 3 * Z%-   ABC%*1.1) '
          (check_integer) check_integer:ret1
         (check_number) check_number: ret1

         (scan_number) scan_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: '3 + 3 * Z%-   ABC%*1.1) '
          (check_integer) check_integer:ret1

          (scan_integer) scan_integer:
          (scan_integer) scan_integer:ret1
   Frst:0 T:'3' exptype:i
         (operator_precedence) 
* is operator
modify_expression_type:Inittype:i Intype:i Outtype:i
(  output_integer) [i,(f U )] i i 3
         (scan_integer) scan_integer:ret1  3
        (scan_atom) scan_atom:ret1

        (check_eitem) check_eitem: ' + 3 * Z%-   ABC%*1.1) '

         (check_operator) check_operator:  + 3 * Z%-   ABC%*1.1) 

          (check_literal) check_literal:lit=',' idx=20 '+ 3 * Z%-   ABC%*1.1) '
          (check_literal) check_literal:After drop space:',' idx=20 '+ 3 * Z%-   ABC%*1.1) '
          (check_literal)   ',' != '+'
          (check_literal) check_literal: ret0
         (check_operator) check_operator: ret1
        (check_eitem) check_eitem:ret1

        (scan_eitem) scan_eitem:

         (check_operator) check_operator:  + 3 * Z%-   ABC%*1.1) 

          (check_literal) check_literal:lit=',' idx=20 '+ 3 * Z%-   ABC%*1.1) '
          (check_literal) check_literal:After drop space:',' idx=20 '+ 3 * Z%-   ABC%*1.1) '
          (check_literal)   ',' != '+'
          (check_literal) check_literal: ret0
         (check_operator) check_operator: ret1

         (scan_operator) scan_operator: ' + 3 * Z%-   ABC%*1.1) '

          (check_literal) check_literal:lit=',' idx=20 '+ 3 * Z%-   ABC%*1.1) '
          (check_literal) check_literal:After drop space:',' idx=20 '+ 3 * Z%-   ABC%*1.1) '
          (check_literal)   ',' != '+'
          (check_literal) check_literal: ret0
         (scan_operator) scan_operator: ret1 ' 3 * Z%-   ABC%*1.1) '
   Frst:0 T:'+' exptype:i
        (operator_precedence) 
+ is operator
        (operator_precedence) 
* is operator
'+' is operator
        (process_token) 
Token is operator o1 name:+ o2 name:*
        (process_token) 
opr1:3 opr2:5
        (operator_precedence) 
* is operator
Pop 1
Pop '*'
        (op_stack_print) 
------------------
        (op_stack_print) 
Operator Stack     (4)

        (op_stack_print) 
000: = type:0
        (op_stack_print) 
001: + type:1
        (op_stack_print) 
002: ( type:16
        (op_stack_print) 
003: ( type:16
        (op_stack_print) 
------------------

        (operator_precedence) 
+ is operator
        (operator_precedence) 
* is operator
( output_operator) [i,(f U )] i i *
        (token_is_function) 
token_is_function:
        (token_is_function) 
token_is_function:* is not function
Push 1
 Push:'+'
        (op_stack_print) 
------------------
        (op_stack_print) 
Operator Stack     (5)

        (op_stack_print) 
000: = type:0
        (op_stack_print) 
001: + type:1
        (op_stack_print) 
002: ( type:16
        (op_stack_print) 
003: ( type:16
        (op_stack_print) 
004: + type:0
        (op_stack_print) 
------------------


         (check_eitem) check_eitem: ' 3 * Z%-   ABC%*1.1) '

          (check_operator) check_operator:  3 * Z%-   ABC%*1.1) 

           (check_literal) check_literal:lit=',' idx=22 '3 * Z%-   ABC%*1.1) '
           (check_literal) check_literal:After drop space:',' idx=22 '3 * Z%-   ABC%*1.1) '
           (check_literal)   ',' != '3'
           (check_literal) check_literal: ret0
          (check_operator) check_operator:ret0

          (check_function) check_function: '3 * Z%-   ABC%*1.1) '
          (check_function) check_function: ret0

          (check_atom) check_atom:

           (check_literal) check_literal:lit=' %' idx=21 ' 3 * Z%-   ABC%*1.1) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'%' idx=22 '3 * Z%-   ABC%*1.1) '
           (check_literal)   '%' != '3'
           (check_literal) check_literal: ret0

           (check_literal) check_literal:lit=' "' idx=21 ' 3 * Z%-   ABC%*1.1) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'"' idx=22 '3 * Z%-   ABC%*1.1) '
           (check_literal)   '"' != '3'
           (check_literal) check_literal: ret0

           (check_number) check_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret0

            (check_integer) check_integer: '3 * Z%-   ABC%*1.1) '
            (check_integer) check_integer:ret1
           (check_number) check_number: ret1
          (check_atom) check_atom:ret1
         (check_eitem) check_eitem:ret1

         (scan_eitem) scan_eitem:

          (check_operator) check_operator:  3 * Z%-   ABC%*1.1) 

           (check_literal) check_literal:lit=',' idx=22 '3 * Z%-   ABC%*1.1) '
           (check_literal) check_literal:After drop space:',' idx=22 '3 * Z%-   ABC%*1.1) '
           (check_literal)   ',' != '3'
           (check_literal) check_literal: ret0
          (check_operator) check_operator:ret0

          (check_function) check_function: '3 * Z%-   ABC%*1.1) '
          (check_function) check_function: ret0

          (check_atom) check_atom:

           (check_literal) check_literal:lit=' %' idx=21 ' 3 * Z%-   ABC%*1.1) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'%' idx=22 '3 * Z%-   ABC%*1.1) '
           (check_literal)   '%' != '3'
           (check_literal) check_literal: ret0

           (check_literal) check_literal:lit=' "' idx=21 ' 3 * Z%-   ABC%*1.1) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'"' idx=22 '3 * Z%-   ABC%*1.1) '
           (check_literal)   '"' != '3'
           (check_literal) check_literal: ret0

           (check_number) check_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret0

            (check_integer) check_integer: '3 * Z%-   ABC%*1.1) '
            (check_integer) check_integer:ret1
           (check_number) check_number: ret1
          (check_atom) check_atom:ret1

          (scan_atom) scan_atom:

           (check_literal) check_literal:lit=' %' idx=21 ' 3 * Z%-   ABC%*1.1) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'%' idx=22 '3 * Z%-   ABC%*1.1) '
           (check_literal)   '%' != '3'
           (check_literal) check_literal: ret0

           (check_literal) check_literal:lit=' "' idx=21 ' 3 * Z%-   ABC%*1.1) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'"' idx=22 '3 * Z%-   ABC%*1.1) '
           (check_literal)   '"' != '3'
           (check_literal) check_literal: ret0

           (check_number) check_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret0

            (check_integer) check_integer: '3 * Z%-   ABC%*1.1) '
            (check_integer) check_integer:ret1
           (check_number) check_number: ret1

           (scan_number) scan_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret0

            (check_integer) check_integer: '3 * Z%-   ABC%*1.1) '
            (check_integer) check_integer:ret1

            (scan_integer) scan_integer:
            (scan_integer) scan_integer:ret1
   Frst:0 T:'3' exptype:i
           (operator_precedence) 
+ is operator
modify_expression_type:Inittype:i Intype:i Outtype:i
(  output_integer) [i,(f U )] i i 3
           (scan_integer) scan_integer:ret1  3
          (scan_atom) scan_atom:ret1

          (check_eitem) check_eitem: ' * Z%-   ABC%*1.1) '

           (check_operator) check_operator:  * Z%-   ABC%*1.1) 

            (check_literal) check_literal:lit=',' idx=24 '* Z%-   ABC%*1.1) '
            (check_literal) check_literal:After drop space:',' idx=24 '* Z%-   ABC%*1.1) '
            (check_literal)   ',' != '*'
            (check_literal) check_literal: ret0
           (check_operator) check_operator: ret1
          (check_eitem) check_eitem:ret1

          (scan_eitem) scan_eitem:

           (check_operator) check_operator:  * Z%-   ABC%*1.1) 

            (check_literal) check_literal:lit=',' idx=24 '* Z%-   ABC%*1.1) '
            (check_literal) check_literal:After drop space:',' idx=24 '* Z%-   ABC%*1.1) '
            (check_literal)   ',' != '*'
            (check_literal) check_literal: ret0
           (check_operator) check_operator: ret1

           (scan_operator) scan_operator: ' * Z%-   ABC%*1.1) '

            (check_literal) check_literal:lit=',' idx=24 '* Z%-   ABC%*1.1) '
            (check_literal) check_literal:After drop space:',' idx=24 '* Z%-   ABC%*1.1) '
            (check_literal)   ',' != '*'
            (check_literal) check_literal: ret0
           (scan_operator) scan_operator: ret1 ' Z%-   ABC%*1.1) '
   Frst:0 T:'*' exptype:i
          (operator_precedence) 
* is operator
          (operator_precedence) 
+ is operator
'*' is operator
          (process_token) 
Token is operator o1 name:* o2 name:+
          (process_token) 
opr1:5 opr2:3
          (operator_precedence) 
+ is operator
          (operator_precedence) 
+ is operator
Push 1
 Push:'*'
          (op_stack_print) 
------------------
          (op_stack_print) 
Operator Stack     (6)

          (op_stack_print) 
000: = type:0
          (op_stack_print) 
001: + type:1
          (op_stack_print) 
002: ( type:16
          (op_stack_print) 
003: ( type:16
          (op_stack_print) 
004: + type:0
          (op_stack_print) 
005: * type:0
          (op_stack_print) 
------------------


           (check_eitem) check_eitem: ' Z%-   ABC%*1.1) '

            (check_operator) check_operator:  Z%-   ABC%*1.1) 

             (check_literal) check_literal:lit=',' idx=26 'Z%-   ABC%*1.1) '
             (check_literal) check_literal:After drop space:',' idx=26 'Z%-   ABC%*1.1) '
             (check_literal)   ',' != 'Z'
             (check_literal) check_literal: ret0
            (check_operator) check_operator:ret0

            (check_function) check_function: 'Z%-   ABC%*1.1) '
            (check_function) check_function: ret0

            (check_atom) check_atom:

             (check_literal) check_literal:lit=' %' idx=25 ' Z%-   ABC%*1.1) '
             (check_literal) dropping space
             (check_literal) check_literal:After drop space:'%' idx=26 'Z%-   ABC%*1.1) '
             (check_literal)   '%' != 'Z'
             (check_literal) check_literal: ret0

             (check_literal) check_literal:lit=' "' idx=25 ' Z%-   ABC%*1.1) '
             (check_literal) dropping space
             (check_literal) check_literal:After drop space:'"' idx=26 'Z%-   ABC%*1.1) '
             (check_literal)   '"' != 'Z'
             (check_literal) check_literal: ret0

             (check_number) check_number:

              (check_float) check_float:
              (isfloatdigit) isfloatdigit:
              (check_float) check_float: ret0

              (check_integer) check_integer: 'Z%-   ABC%*1.1) '
              (check_integer) check_integer:ret0
             (check_number) check_number: ret0

             (check_variable) check_variable:

              (check_vname) check_vname 'Z%-   ABC%*1.1) ':
              (check_vname) check_vname ret1 '%-   ABC%*1.1) ':
             (check_variable) check_variable: '%-   ABC%*1.1) '
             (check_variable) check_variable: Ary test '-   ABC%*1.1) '

              (check_literal) check_literal:lit='(' idx=28 '-   ABC%*1.1) '
              (check_literal) check_literal:After drop space:'(' idx=28 '-   ABC%*1.1) '
              (check_literal)   '(' != '-'
              (check_literal) check_literal: ret0
             (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
            (check_variable) check_variable:ret1 
           (check_atom) check_atom:ret1
          (check_eitem) check_eitem:ret1

          (scan_eitem) scan_eitem:

           (check_operator) check_operator:  Z%-   ABC%*1.1) 

            (check_literal) check_literal:lit=',' idx=26 'Z%-   ABC%*1.1) '
            (check_literal) check_literal:After drop space:',' idx=26 'Z%-   ABC%*1.1) '
            (check_literal)   ',' != 'Z'
            (check_literal) check_literal: ret0
           (check_operator) check_operator:ret0

           (check_function) check_function: 'Z%-   ABC%*1.1) '
           (check_function) check_function: ret0

           (check_atom) check_atom:

            (check_literal) check_literal:lit=' %' idx=25 ' Z%-   ABC%*1.1) '
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:'%' idx=26 'Z%-   ABC%*1.1) '
            (check_literal)   '%' != 'Z'
            (check_literal) check_literal: ret0

            (check_literal) check_literal:lit=' "' idx=25 ' Z%-   ABC%*1.1) '
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:'"' idx=26 'Z%-   ABC%*1.1) '
            (check_literal)   '"' != 'Z'
            (check_literal) check_literal: ret0

            (check_number) check_number:

             (check_float) check_float:
             (isfloatdigit) isfloatdigit:
             (check_float) check_float: ret0

             (check_integer) check_integer: 'Z%-   ABC%*1.1) '
             (check_integer) check_integer:ret0
            (check_number) check_number: ret0

            (check_variable) check_variable:

             (check_vname) check_vname 'Z%-   ABC%*1.1) ':
             (check_vname) check_vname ret1 '%-   ABC%*1.1) ':
            (check_variable) check_variable: '%-   ABC%*1.1) '
            (check_variable) check_variable: Ary test '-   ABC%*1.1) '

             (check_literal) check_literal:lit='(' idx=28 '-   ABC%*1.1) '
             (check_literal) check_literal:After drop space:'(' idx=28 '-   ABC%*1.1) '
             (check_literal)   '(' != '-'
             (check_literal) check_literal: ret0
            (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
           (check_variable) check_variable:ret1 
          (check_atom) check_atom:ret1

          (scan_atom) scan_atom:

           (check_literal) check_literal:lit=' %' idx=25 ' Z%-   ABC%*1.1) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'%' idx=26 'Z%-   ABC%*1.1) '
           (check_literal)   '%' != 'Z'
           (check_literal) check_literal: ret0

           (check_literal) check_literal:lit=' "' idx=25 ' Z%-   ABC%*1.1) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'"' idx=26 'Z%-   ABC%*1.1) '
           (check_literal)   '"' != 'Z'
           (check_literal) check_literal: ret0

           (check_number) check_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret0

            (check_integer) check_integer: 'Z%-   ABC%*1.1) '
            (check_integer) check_integer:ret0
           (check_number) check_number: ret0

           (check_variable) check_variable:

            (check_vname) check_vname 'Z%-   ABC%*1.1) ':
            (check_vname) check_vname ret1 '%-   ABC%*1.1) ':
           (check_variable) check_variable: '%-   ABC%*1.1) '
           (check_variable) check_variable: Ary test '-   ABC%*1.1) '

            (check_literal) check_literal:lit='(' idx=28 '-   ABC%*1.1) '
            (check_literal) check_literal:After drop space:'(' idx=28 '-   ABC%*1.1) '
            (check_literal)   '(' != '-'
            (check_literal) check_literal: ret0
           (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
          (check_variable) check_variable:ret1 

          (scan_variable) scan_variable:

           (scan_vname) scan_vname: ' Z%-   ABC%*1.1) '
           (scan_vname) scan_vname: ret1 'Z'
          (scan_variable) scan_variable: '%-   ABC%*1.1) ' vname='Z'
          (scan_variable) scan_variable: Ary test '-   ABC%*1.1) '

           (check_literal) check_literal:lit='(' idx=28 '-   ABC%*1.1) '
           (check_literal) check_literal:After drop space:'(' idx=28 '-   ABC%*1.1) '
           (check_literal)   '(' != '-'
           (check_literal) check_literal: ret0
          (scan_variable) scan_variable:ret1 vname='Z%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'Z%' exptype:i
         (operator_precedence) 
* is operator
         (token_is_function) 
token_is_function:
         (token_is_function) 
token_is_function:Z% is not function
token_is_variable: tok:'Z%'
         (token_is_function) 
token_is_function:
         (token_is_function) 
token_is_function:Z% is not function
         (init_get_name) 
init_get_name:'Z%'
         (init_get_name) 
init_get_name:'Z%'
         (get_name) 
get_name:gn:'Z%'
process_token:type:i req_type:i
modify_expression_type:Inittype:i Intype:i Outtype:i
( output_variable) [i,(f U )] i i Z%
         (print_var_info) 
VAR INFO: '                Z%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
         (scan_atom) scan_atom:ret1

         (check_eitem) check_eitem: '-   ABC%*1.1) '

          (check_operator) check_operator: -   ABC%*1.1) 

           (check_literal) check_literal:lit=',' idx=28 '-   ABC%*1.1) '
           (check_literal) check_literal:After drop space:',' idx=28 '-   ABC%*1.1) '
           (check_literal)   ',' != '-'
           (check_literal) check_literal: ret0
          (check_operator) check_operator: ret1
         (check_eitem) check_eitem:ret1

         (scan_eitem) scan_eitem:

          (check_operator) check_operator: -   ABC%*1.1) 

           (check_literal) check_literal:lit=',' idx=28 '-   ABC%*1.1) '
           (check_literal) check_literal:After drop space:',' idx=28 '-   ABC%*1.1) '
           (check_literal)   ',' != '-'
           (check_literal) check_literal: ret0
          (check_operator) check_operator: ret1

          (scan_operator) scan_operator: '-   ABC%*1.1) '

           (check_literal) check_literal:lit=',' idx=28 '-   ABC%*1.1) '
           (check_literal) check_literal:After drop space:',' idx=28 '-   ABC%*1.1) '
           (check_literal)   ',' != '-'
           (check_literal) check_literal: ret0
          (scan_operator) scan_operator: ret1 '   ABC%*1.1) '
   Frst:0 T:'-' exptype:i
         (operator_precedence) 
- is operator
         (operator_precedence) 
* is operator
'-' is operator
         (process_token) 
Token is operator o1 name:- o2 name:*
         (process_token) 
opr1:3 opr2:5
         (operator_precedence) 
* is operator
Pop 1
Pop '*'
         (op_stack_print) 
------------------
         (op_stack_print) 
Operator Stack     (5)

         (op_stack_print) 
000: = type:0
         (op_stack_print) 
001: + type:1
         (op_stack_print) 
002: ( type:16
         (op_stack_print) 
003: ( type:16
         (op_stack_print) 
004: + type:0
         (op_stack_print) 
------------------

         (operator_precedence) 
- is operator
         (operator_precedence) 
* is operator
( output_operator) [i,(f U )] i i *
         (token_is_function) 
token_is_function:
         (token_is_function) 
token_is_function:* is not function
         (operator_precedence) 
+ is operator
         (operator_precedence) 
+ is operator
         (operator_left_assoc) 
- is operator
Push 1
 Push:'-'
         (op_stack_print) 
------------------
         (op_stack_print) 
Operator Stack     (6)

         (op_stack_print) 
000: = type:0
         (op_stack_print) 
001: + type:1
         (op_stack_print) 
002: ( type:16
         (op_stack_print) 
003: ( type:16
         (op_stack_print) 
004: + type:0
         (op_stack_print) 
005: - type:0
         (op_stack_print) 
------------------


          (check_eitem) check_eitem: '   ABC%*1.1) '

           (check_operator) check_operator:    ABC%*1.1) 

            (check_literal) check_literal:lit=',' idx=32 'ABC%*1.1) '
            (check_literal) check_literal:After drop space:',' idx=32 'ABC%*1.1) '
            (check_literal)   ',' != 'A'
            (check_literal) check_literal: ret0
           (check_operator) check_operator:ret0

           (check_function) check_function: 'ABC%*1.1) '
           (check_function) check_function: ret0

           (check_atom) check_atom:

            (check_literal) check_literal:lit=' %' idx=29 '   ABC%*1.1) '
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:'%' idx=32 'ABC%*1.1) '
            (check_literal)   '%' != 'A'
            (check_literal) check_literal: ret0

            (check_literal) check_literal:lit=' "' idx=29 '   ABC%*1.1) '
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:'"' idx=32 'ABC%*1.1) '
            (check_literal)   '"' != 'A'
            (check_literal) check_literal: ret0

            (check_number) check_number:

             (check_float) check_float:
             (isfloatdigit) isfloatdigit:
             (check_float) check_float: ret0

             (check_integer) check_integer: 'ABC%*1.1) '
             (check_integer) check_integer:ret0
            (check_number) check_number: ret0

            (check_variable) check_variable:

             (check_vname) check_vname 'ABC%*1.1) ':
             (check_vname) check_vname ret1 '%*1.1) ':
            (check_variable) check_variable: '%*1.1) '
            (check_variable) check_variable: Ary test '*1.1) '

             (check_literal) check_literal:lit='(' idx=36 '*1.1) '
             (check_literal) check_literal:After drop space:'(' idx=36 '*1.1) '
             (check_literal)   '(' != '*'
             (check_literal) check_literal: ret0
            (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
           (check_variable) check_variable:ret1 
          (check_atom) check_atom:ret1
         (check_eitem) check_eitem:ret1

         (scan_eitem) scan_eitem:

          (check_operator) check_operator:    ABC%*1.1) 

           (check_literal) check_literal:lit=',' idx=32 'ABC%*1.1) '
           (check_literal) check_literal:After drop space:',' idx=32 'ABC%*1.1) '
           (check_literal)   ',' != 'A'
           (check_literal) check_literal: ret0
          (check_operator) check_operator:ret0

          (check_function) check_function: 'ABC%*1.1) '
          (check_function) check_function: ret0

          (check_atom) check_atom:

           (check_literal) check_literal:lit=' %' idx=29 '   ABC%*1.1) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'%' idx=32 'ABC%*1.1) '
           (check_literal)   '%' != 'A'
           (check_literal) check_literal: ret0

           (check_literal) check_literal:lit=' "' idx=29 '   ABC%*1.1) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'"' idx=32 'ABC%*1.1) '
           (check_literal)   '"' != 'A'
           (check_literal) check_literal: ret0

           (check_number) check_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret0

            (check_integer) check_integer: 'ABC%*1.1) '
            (check_integer) check_integer:ret0
           (check_number) check_number: ret0

           (check_variable) check_variable:

            (check_vname) check_vname 'ABC%*1.1) ':
            (check_vname) check_vname ret1 '%*1.1) ':
           (check_variable) check_variable: '%*1.1) '
           (check_variable) check_variable: Ary test '*1.1) '

            (check_literal) check_literal:lit='(' idx=36 '*1.1) '
            (check_literal) check_literal:After drop space:'(' idx=36 '*1.1) '
            (check_literal)   '(' != '*'
            (check_literal) check_literal: ret0
           (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
          (check_variable) check_variable:ret1 
         (check_atom) check_atom:ret1

         (scan_atom) scan_atom:

          (check_literal) check_literal:lit=' %' idx=29 '   ABC%*1.1) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=32 'ABC%*1.1) '
          (check_literal)   '%' != 'A'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=29 '   ABC%*1.1) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=32 'ABC%*1.1) '
          (check_literal)   '"' != 'A'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: 'ABC%*1.1) '
           (check_integer) check_integer:ret0
          (check_number) check_number: ret0

          (check_variable) check_variable:

           (check_vname) check_vname 'ABC%*1.1) ':
           (check_vname) check_vname ret1 '%*1.1) ':
          (check_variable) check_variable: '%*1.1) '
          (check_variable) check_variable: Ary test '*1.1) '

           (check_literal) check_literal:lit='(' idx=36 '*1.1) '
           (check_literal) check_literal:After drop space:'(' idx=36 '*1.1) '
           (check_literal)   '(' != '*'
           (check_literal) check_literal: ret0
          (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
         (check_variable) check_variable:ret1 

         (scan_variable) scan_variable:

          (scan_vname) scan_vname: '   ABC%*1.1) '
          (scan_vname) scan_vname: ret1 'ABC'
         (scan_variable) scan_variable: '%*1.1) ' vname='ABC'
         (scan_variable) scan_variable: Ary test '*1.1) '

          (check_literal) check_literal:lit='(' idx=36 '*1.1) '
          (check_literal) check_literal:After drop space:'(' idx=36 '*1.1) '
          (check_literal)   '(' != '*'
          (check_literal) check_literal: ret0
         (scan_variable) scan_variable:ret1 vname='ABC%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'ABC%' exptype:i
        (operator_precedence) 
- is operator
        (token_is_function) 
token_is_function:
        (token_is_function) 
token_is_function:ABC% is not function
token_is_variable: tok:'ABC%'
        (token_is_function) 
token_is_function:
        (token_is_function) 
token_is_function:ABC% is not function
        (init_get_name) 
init_get_name:'ABC%'
        (init_get_name) 
init_get_name:'ABC%'
        (get_name) 
get_name:gn:'ABC%'
process_token:type:i req_type:i
modify_expression_type:Inittype:i Intype:i Outtype:i
( output_variable) [i,(f U )] i i ABC%
        (print_var_info) 
VAR INFO: '              ABC%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
        (scan_atom) scan_atom:ret1

        (check_eitem) check_eitem: '*1.1) '

         (check_operator) check_operator: *1.1) 

          (check_literal) check_literal:lit=',' idx=36 '*1.1) '
          (check_literal) check_literal:After drop space:',' idx=36 '*1.1) '
          (check_literal)   ',' != '*'
          (check_literal) check_literal: ret0
         (check_operator) check_operator: ret1
        (check_eitem) check_eitem:ret1

        (scan_eitem) scan_eitem:

         (check_operator) check_operator: *1.1) 

          (check_literal) check_literal:lit=',' idx=36 '*1.1) '
          (check_literal) check_literal:After drop space:',' idx=36 '*1.1) '
          (check_literal)   ',' != '*'
          (check_literal) check_literal: ret0
         (check_operator) check_operator: ret1

         (scan_operator) scan_operator: '*1.1) '

          (check_literal) check_literal:lit=',' idx=36 '*1.1) '
          (check_literal) check_literal:After drop space:',' idx=36 '*1.1) '
          (check_literal)   ',' != '*'
          (check_literal) check_literal: ret0
         (scan_operator) scan_operator: ret1 '1.1) '
   Frst:0 T:'*' exptype:i
        (operator_precedence) 
* is operator
        (operator_precedence) 
- is operator
'*' is operator
        (process_token) 
Token is operator o1 name:* o2 name:-
        (process_token) 
opr1:5 opr2:3
        (operator_precedence) 
- is operator
        (operator_precedence) 
- is operator
Push 1
 Push:'*'
        (op_stack_print) 
------------------
        (op_stack_print) 
Operator Stack     (7)

        (op_stack_print) 
000: = type:0
        (op_stack_print) 
001: + type:1
        (op_stack_print) 
002: ( type:16
        (op_stack_print) 
003: ( type:16
        (op_stack_print) 
004: + type:0
        (op_stack_print) 
005: - type:0
        (op_stack_print) 
006: * type:0
        (op_stack_print) 
------------------


         (check_eitem) check_eitem: '1.1) '

          (check_operator) check_operator: 1.1) 

           (check_literal) check_literal:lit=',' idx=37 '1.1) '
           (check_literal) check_literal:After drop space:',' idx=37 '1.1) '
           (check_literal)   ',' != '1'
           (check_literal) check_literal: ret0
          (check_operator) check_operator:ret0

          (check_function) check_function: '1.1) '
          (check_function) check_function: ret0

          (check_atom) check_atom:

           (check_literal) check_literal:lit=' %' idx=37 '1.1) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'%' idx=37 '1.1) '
           (check_literal)   '%' != '1'
           (check_literal) check_literal: ret0

           (check_literal) check_literal:lit=' "' idx=37 '1.1) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'"' idx=37 '1.1) '
           (check_literal)   '"' != '1'
           (check_literal) check_literal: ret0

           (check_number) check_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret1
           (check_number) check_number: ret1
          (check_atom) check_atom:ret1
         (check_eitem) check_eitem:ret1

         (scan_eitem) scan_eitem:

          (check_operator) check_operator: 1.1) 

           (check_literal) check_literal:lit=',' idx=37 '1.1) '
           (check_literal) check_literal:After drop space:',' idx=37 '1.1) '
           (check_literal)   ',' != '1'
           (check_literal) check_literal: ret0
          (check_operator) check_operator:ret0

          (check_function) check_function: '1.1) '
          (check_function) check_function: ret0

          (check_atom) check_atom:

           (check_literal) check_literal:lit=' %' idx=37 '1.1) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'%' idx=37 '1.1) '
           (check_literal)   '%' != '1'
           (check_literal) check_literal: ret0

           (check_literal) check_literal:lit=' "' idx=37 '1.1) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'"' idx=37 '1.1) '
           (check_literal)   '"' != '1'
           (check_literal) check_literal: ret0

           (check_number) check_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret1
           (check_number) check_number: ret1
          (check_atom) check_atom:ret1

          (scan_atom) scan_atom:

           (check_literal) check_literal:lit=' %' idx=37 '1.1) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'%' idx=37 '1.1) '
           (check_literal)   '%' != '1'
           (check_literal) check_literal: ret0

           (check_literal) check_literal:lit=' "' idx=37 '1.1) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'"' idx=37 '1.1) '
           (check_literal)   '"' != '1'
           (check_literal) check_literal: ret0

           (check_number) check_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret1
           (check_number) check_number: ret1

           (scan_number) scan_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret1

            (scan_float) scan_float:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (scan_float) scan_float: ret1
   Frst:0 T:'1.1' exptype:i
           (operator_precedence) 
* is operator
modify_expression_type:Inittype:i Intype:f Outtype:f
(    output_float) [f,(f U )] f f 1.1
           (scan_atom) scan_atom:ret1

           (check_eitem) check_eitem: ') '

            (check_operator) check_operator: ) 

             (check_literal) check_literal:lit=',' idx=40 ') '
             (check_literal) check_literal:After drop space:',' idx=40 ') '
             (check_literal)   ',' != ')'
             (check_literal) check_literal: ret0
            (check_operator) check_operator:ret0

            (check_function) check_function: ') '
            (check_function) check_function: ret0

            (check_atom) check_atom:

             (check_literal) check_literal:lit=' %' idx=40 ') '
             (check_literal) dropping space
             (check_literal) check_literal:After drop space:'%' idx=40 ') '
             (check_literal)   '%' != ')'
             (check_literal) check_literal: ret0

             (check_literal) check_literal:lit=' "' idx=40 ') '
             (check_literal) dropping space
             (check_literal) check_literal:After drop space:'"' idx=40 ') '
             (check_literal)   '"' != ')'
             (check_literal) check_literal: ret0

             (check_number) check_number:

              (check_float) check_float:
              (isfloatdigit) isfloatdigit:
              (check_float) check_float: ret0

              (check_integer) check_integer: ') '
              (check_integer) check_integer:ret0
             (check_number) check_number: ret0

             (check_variable) check_variable:

              (check_vname) check_vname ') ':
              (check_vname) check_vname ret0 ') ':
             (check_variable) check_variable:ret0 
            (check_atom) check_atom:ret1

            (check_sub_expr) check_sub_expr:

             (check_literal) check_literal:lit=' (' idx=40 ') '
             (check_literal) dropping space
             (check_literal) check_literal:After drop space:'(' idx=40 ') '
             (check_literal)   '(' != ')'
             (check_literal) check_literal: ret0
            (check_sub_expr) check_sub_expr: ret0
           (check_eitem) check_eitem:ret0
          (scan_expression) scan_expression: ret1 ') '

          (scan_literal) scan_literal:lit=' )' ') '
          (scan_literal) scan_literal:After drop space:) 
          (scan_literal) scan_literal:while loop:) 
   Frst:0 T:')' exptype:f
          (operator_precedence) 
* is operator
          (process_token) 
Pop 3
Pop '*'
          (op_stack_print) 
------------------
          (op_stack_print) 
Operator Stack     (6)

          (op_stack_print) 
000: = type:0
          (op_stack_print) 
001: + type:1
          (op_stack_print) 
002: ( type:16
          (op_stack_print) 
003: ( type:16
          (op_stack_print) 
004: + type:0
          (op_stack_print) 
005: - type:0
          (op_stack_print) 
------------------

( output_operator) [f,(f U )] i i *
          (token_is_function) 
token_is_function:
          (token_is_function) 
token_is_function:* is not function
          (process_token) 
Pop 3
Pop '-'
          (op_stack_print) 
------------------
          (op_stack_print) 
Operator Stack     (5)

          (op_stack_print) 
000: = type:0
          (op_stack_print) 
001: + type:1
          (op_stack_print) 
002: ( type:16
          (op_stack_print) 
003: ( type:16
          (op_stack_print) 
004: + type:0
          (op_stack_print) 
------------------

( output_operator) [f,(f U )] i i -
          (token_is_function) 
token_is_function:
          (token_is_function) 
token_is_function:- is not function
          (process_token) 
Pop 3
Pop '+'
          (op_stack_print) 
------------------
          (op_stack_print) 
Operator Stack     (4)

          (op_stack_print) 
000: = type:0
          (op_stack_print) 
001: + type:1
          (op_stack_print) 
002: ( type:16
          (op_stack_print) 
003: ( type:16
          (op_stack_print) 
------------------

( output_operator) [f,(f U )] i i +
          (token_is_function) 
token_is_function:
          (token_is_function) 
token_is_function:+ is not function
Pop 4
Pop '('
          (op_stack_print) 
------------------
          (op_stack_print) 
Operator Stack     (3)

          (op_stack_print) 
000: = type:0
          (op_stack_print) 
001: + type:1
          (op_stack_print) 
002: ( type:16
          (op_stack_print) 
------------------

(  output_sub_end)
          (token_is_function) 
token_is_function:
          (token_is_function) 
token_is_function:( is not function
(  output_sub_end)
          (scan_literal) scan_literal:ret1
   Frst:0 T:')' exptype:U
Pop 4
Pop '('
         (op_stack_print) 
------------------
         (op_stack_print) 
Operator Stack     (2)

         (op_stack_print) 
000: = type:0
         (op_stack_print) 
001: + type:1
         (op_stack_print) 
------------------

(  output_sub_end)
         (token_is_function) 
token_is_function:
         (token_is_function) 
token_is_function:+ is not function
(  output_sub_end)
         (scan_sub_expr) scan_sub_expr:ret1

         (check_eitem) check_eitem: ' '

          (check_operator) check_operator:  

           (check_literal) check_literal:lit=',' idx=42 ''
           (check_literal) check_literal:After drop space:',' idx=42 ''
           (check_literal) check_literal  ret0 Empty test string
          (check_operator) check_operator:ret0

          (check_function) check_function: ''
          (check_function) check_function: ret0

          (check_atom) check_atom:

           (check_literal) check_literal:lit=' %' idx=41 ' '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'%' idx=42 ''
           (check_literal) check_literal  ret0 Empty test string

           (check_literal) check_literal:lit=' "' idx=41 ' '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'"' idx=42 ''
           (check_literal) check_literal  ret0 Empty test string

           (check_number) check_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret0

            (check_integer) check_integer: ''
            (check_integer) check_integer:ret0
           (check_number) check_number: ret0

           (check_variable) check_variable:

            (check_vname) check_vname '':
            (check_vname) check_vname ret0 '':
           (check_variable) check_variable:ret0 
          (check_atom) check_atom:ret1

          (check_sub_expr) check_sub_expr:

           (check_literal) check_literal:lit=' (' idx=41 ' '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'(' idx=42 ''
           (check_literal) check_literal  ret0 Empty test string
          (check_sub_expr) check_sub_expr: ret0
         (check_eitem) check_eitem:ret0
        (scan_expression) scan_expression: ret1 ' '
       (scan_assignment) scan_assignment: ret1
Finalise stack
Pop '+'
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (1)

      (op_stack_print) 
000: = type:0
      (op_stack_print) 
------------------

( output_operator) [f,()] f f +
      (token_is_function) 
token_is_function:
      (token_is_function) 
token_is_function:+ is not function
Pop '='
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (0)

      (op_stack_print) 
------------------

( output_operator) [f,()] f f =
      (token_is_function) 
token_is_function:
      (token_is_function) 
token_is_function:= is not function
      (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'A'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'A'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '*'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'Z%'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '*'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'ABC%'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FLT          f rq:f '1.1'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '*'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '-'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '+'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f '+'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f '='  0:
=================
 BE:A
type_check_stack_push: 'A'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (1)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'A' type:f (1)
 BE:A
type_check_stack_push: 'A'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (2)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A' type:1
      (type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'A' type:f (1)
001: 'A' type:f (1)
 BE:

Type Check Stack (2)

000: 'A' type:f (1)
001: 'A' type:f (1)
 BE:

Type Check Stack (2)

000: 'A' type:f (1)
001: 'A' type:f (1)
 BE:2
type_check_stack_push: '2'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (3)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A' type:1
      (type_check_stack_print) 
002: '2' type:0
      (type_check_stack_print) 
------------------


Type Check Stack (3)

000: 'A' type:f (1)
001: 'A' type:f (1)
002: '2' type:i (0)
 BE:3
type_check_stack_push: '3'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (4)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A' type:1
      (type_check_stack_print) 
002: '2' type:0
      (type_check_stack_print) 
003: '3' type:0
      (type_check_stack_print) 
------------------


Type Check Stack (4)

000: 'A' type:f (1)
001: 'A' type:f (1)
002: '2' type:i (0)
003: '3' type:i (0)
 BE:*
BUFF_ID_OPERATOR
Found operator *
type_check_stack_pop: '3'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (3)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A' type:1
      (type_check_stack_print) 
002: '2' type:0
      (type_check_stack_print) 
------------------

type_check_stack_pop: '2'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (2)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A' type:1
      (type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (3)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A' type:1
      (type_check_stack_print) 
002: '000' type:0
      (type_check_stack_print) 
------------------


Type Check Stack (3)

000: 'A' type:f (1)
001: 'A' type:f (1)
002: '000' type:i (0)
 BE:3
type_check_stack_push: '3'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (4)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A' type:1
      (type_check_stack_print) 
002: '000' type:0
      (type_check_stack_print) 
003: '3' type:0
      (type_check_stack_print) 
------------------


Type Check Stack (4)

000: 'A' type:f (1)
001: 'A' type:f (1)
002: '000' type:i (0)
003: '3' type:i (0)
 BE:Z%
type_check_stack_push: 'Z%'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (5)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A' type:1
      (type_check_stack_print) 
002: '000' type:0
      (type_check_stack_print) 
003: '3' type:0
      (type_check_stack_print) 
004: 'Z%' type:0
      (type_check_stack_print) 
------------------


Type Check Stack (5)

000: 'A' type:f (1)
001: 'A' type:f (1)
002: '000' type:i (0)
003: '3' type:i (0)
004: 'Z%' type:i (0)
 BE:*
BUFF_ID_OPERATOR
Found operator *
type_check_stack_pop: 'Z%'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (4)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A' type:1
      (type_check_stack_print) 
002: '000' type:0
      (type_check_stack_print) 
003: '3' type:0
      (type_check_stack_print) 
------------------

type_check_stack_pop: '3'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (3)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A' type:1
      (type_check_stack_print) 
002: '000' type:0
      (type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (4)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A' type:1
      (type_check_stack_print) 
002: '000' type:0
      (type_check_stack_print) 
003: '000' type:0
      (type_check_stack_print) 
------------------


Type Check Stack (4)

000: 'A' type:f (1)
001: 'A' type:f (1)
002: '000' type:i (0)
003: '000' type:i (0)
 BE:ABC%
type_check_stack_push: 'ABC%'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (5)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A' type:1
      (type_check_stack_print) 
002: '000' type:0
      (type_check_stack_print) 
003: '000' type:0
      (type_check_stack_print) 
004: 'ABC%' type:0
      (type_check_stack_print) 
------------------


Type Check Stack (5)

000: 'A' type:f (1)
001: 'A' type:f (1)
002: '000' type:i (0)
003: '000' type:i (0)
004: 'ABC%' type:i (0)
 BE:1.1
type_check_stack_push: '1.1'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (6)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A' type:1
      (type_check_stack_print) 
002: '000' type:0
      (type_check_stack_print) 
003: '000' type:0
      (type_check_stack_print) 
004: 'ABC%' type:0
      (type_check_stack_print) 
005: '1.1' type:1
      (type_check_stack_print) 
------------------


Type Check Stack (6)

000: 'A' type:f (1)
001: 'A' type:f (1)
002: '000' type:i (0)
003: '000' type:i (0)
004: 'ABC%' type:i (0)
005: '1.1' type:f (1)
 BE:*
BUFF_ID_OPERATOR
Found operator *
type_check_stack_pop: '1.1'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (5)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A' type:1
      (type_check_stack_print) 
002: '000' type:0
      (type_check_stack_print) 
003: '000' type:0
      (type_check_stack_print) 
004: 'ABC%' type:0
      (type_check_stack_print) 
------------------

type_check_stack_pop: 'ABC%'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (4)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A' type:1
      (type_check_stack_print) 
002: '000' type:0
      (type_check_stack_print) 
003: '000' type:0
      (type_check_stack_print) 
------------------

 Mutable type 1 0
type_with_least_conversion_from: f i => f
type_with_least_conversion_from: f i => f
 Autoconversion
 --------------
 Op1: type:1 req type:1
 Op2: type:0 req type:0
 BE:  type:1 req type:1
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f 'A'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     f rq:f 'A'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 6 5
(dump_exp_buffer2) N8 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_VARIABLE     i rq:i 'Z%'  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 9 8
(dump_exp_buffer2) N11 EXP_BUFF_ID_VARIABLE     i rq:i 'ABC%'  0:
(dump_exp_buffer2) N12 EXP_BUFF_ID_FLT          f rq:f '1.1'  0:
=================
 Insert after 11 exp_buffer2_i:12
   Found at i:10
   Copied 11 to 12:
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f 'A'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     f rq:f 'A'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 6 5
(dump_exp_buffer2) N8 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_VARIABLE     i rq:i 'Z%'  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 9 8
(dump_exp_buffer2) N11 EXP_BUFF_ID_VARIABLE     i rq:i 'ABC%'  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 12 11
(dump_exp_buffer2) N12 EXP_BUFF_ID_FLT          f rq:f '1.1'  0:
=================
type_check_stack_push: '000'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (5)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A' type:1
      (type_check_stack_print) 
002: '000' type:0
      (type_check_stack_print) 
003: '000' type:0
      (type_check_stack_print) 
004: '000' type:1
      (type_check_stack_print) 
------------------


Type Check Stack (5)

000: 'A' type:f (1)
001: 'A' type:f (1)
002: '000' type:i (0)
003: '000' type:i (0)
004: '000' type:f (1)
 BE:-
BUFF_ID_OPERATOR
Found operator -
type_check_stack_pop: '000'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (4)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A' type:1
      (type_check_stack_print) 
002: '000' type:0
      (type_check_stack_print) 
003: '000' type:0
      (type_check_stack_print) 
------------------

type_check_stack_pop: '000'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (3)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A' type:1
      (type_check_stack_print) 
002: '000' type:0
      (type_check_stack_print) 
------------------

 Mutable type 1 0
type_with_least_conversion_from: f i => f
type_with_least_conversion_from: f i => f
 Autoconversion
 --------------
 Op1: type:1 req type:1
 Op2: type:0 req type:0
 BE:  type:1 req type:1
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f 'A'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     f rq:f 'A'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 6 5
(dump_exp_buffer2) N8 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_VARIABLE     i rq:i 'Z%'  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 9 8
(dump_exp_buffer2) N11 EXP_BUFF_ID_VARIABLE     i rq:i 'ABC%'  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 12 11
(dump_exp_buffer2) N12 EXP_BUFF_ID_FLT          f rq:f '1.1'  0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_OPERATOR     f rq:f '*'  2: 12 11
=================
 Insert after 10 exp_buffer2_i:14
   Found at i:9
   Copied 13 to 14:
   Copied 12 to 13:
   Copied 11 to 12:
   Copied 10 to 11:
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f 'A'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     f rq:f 'A'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 6 5
(dump_exp_buffer2) N8 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_VARIABLE     i rq:i 'Z%'  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 9 8
(dump_exp_buffer2) N16 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 13 10
(dump_exp_buffer2) N11 EXP_BUFF_ID_VARIABLE     i rq:i 'ABC%'  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 12 11
(dump_exp_buffer2) N12 EXP_BUFF_ID_FLT          f rq:f '1.1'  0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_OPERATOR     f rq:f '*'  2: 12 11
=================
type_check_stack_push: '000'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (4)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A' type:1
      (type_check_stack_print) 
002: '000' type:0
      (type_check_stack_print) 
003: '000' type:1
      (type_check_stack_print) 
------------------


Type Check Stack (4)

000: 'A' type:f (1)
001: 'A' type:f (1)
002: '000' type:i (0)
003: '000' type:f (1)
 BE:+
BUFF_ID_OPERATOR
Found operator +
type_check_stack_pop: '000'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (3)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A' type:1
      (type_check_stack_print) 
002: '000' type:0
      (type_check_stack_print) 
------------------

type_check_stack_pop: '000'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (2)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A' type:1
      (type_check_stack_print) 
------------------

 Mutable type 1 0
type_with_least_conversion_from: f i => f
type_with_least_conversion_from: f i => f
 Autoconversion
 --------------
 Op1: type:1 req type:1
 Op2: type:0 req type:0
 BE:  type:1 req type:1
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f 'A'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     f rq:f 'A'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 6 5
(dump_exp_buffer2) N8 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_VARIABLE     i rq:i 'Z%'  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 9 8
(dump_exp_buffer2) N16 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 13 10
(dump_exp_buffer2) N11 EXP_BUFF_ID_VARIABLE     i rq:i 'ABC%'  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 12 11
(dump_exp_buffer2) N12 EXP_BUFF_ID_FLT          f rq:f '1.1'  0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_OPERATOR     f rq:f '*'  2: 12 11
(dump_exp_buffer2) N15 EXP_BUFF_ID_OPERATOR     f rq:f '-'  2: 13 10
=================
 Insert after 7 exp_buffer2_i:16
   Found at i:6
   Copied 15 to 16:
   Copied 14 to 15:
   Copied 13 to 14:
   Copied 12 to 13:
   Copied 11 to 12:
   Copied 10 to 11:
   Copied 9 to 10:
   Copied 8 to 9:
   Copied 7 to 8:
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f 'A'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     f rq:f 'A'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 6 5
(dump_exp_buffer2) N18 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 15 7
(dump_exp_buffer2) N8 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_VARIABLE     i rq:i 'Z%'  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 9 8
(dump_exp_buffer2) N16 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 13 10
(dump_exp_buffer2) N11 EXP_BUFF_ID_VARIABLE     i rq:i 'ABC%'  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 12 11
(dump_exp_buffer2) N12 EXP_BUFF_ID_FLT          f rq:f '1.1'  0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_OPERATOR     f rq:f '*'  2: 12 11
(dump_exp_buffer2) N15 EXP_BUFF_ID_OPERATOR     f rq:f '-'  2: 13 10
=================
type_check_stack_push: '000'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (3)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A' type:1
      (type_check_stack_print) 
002: '000' type:1
      (type_check_stack_print) 
------------------


Type Check Stack (3)

000: 'A' type:f (1)
001: 'A' type:f (1)
002: '000' type:f (1)
 BE:

Type Check Stack (3)

000: 'A' type:f (1)
001: 'A' type:f (1)
002: '000' type:f (1)
 BE:

Type Check Stack (3)

000: 'A' type:f (1)
001: 'A' type:f (1)
002: '000' type:f (1)
 BE:

Type Check Stack (3)

000: 'A' type:f (1)
001: 'A' type:f (1)
002: '000' type:f (1)
 BE:

Type Check Stack (3)

000: 'A' type:f (1)
001: 'A' type:f (1)
002: '000' type:f (1)
 BE:+
BUFF_ID_OPERATOR
Found operator +
type_check_stack_pop: '000'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (2)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A' type:1
      (type_check_stack_print) 
------------------

type_check_stack_pop: 'A'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (1)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
------------------

 Mutable type 1 1
 Same type
type_check_stack_push: '000'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (2)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: '000' type:1
      (type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'A' type:f (1)
001: '000' type:f (1)
 BE::=
BUFF_ID_OPERATOR
Found operator :=
type_check_stack_pop: '000'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (1)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
------------------

type_check_stack_pop: 'A'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (0)

      (type_check_stack_print) 
------------------

 Mutable type 1 1
 Same type
type_check_stack_push: '000'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (1)

      (type_check_stack_print) 
000: '000' type:1
      (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:f (1)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'A'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'A'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '*'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'Z%'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '*'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'ABC%'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FLT          f rq:f '1.1'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '*'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '-'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '+'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f '+'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f ':='  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f 'A'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     f rq:f 'A'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 6 5
(dump_exp_buffer2) N18 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 15 7
(dump_exp_buffer2) N8 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_VARIABLE     i rq:i 'Z%'  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 9 8
(dump_exp_buffer2) N16 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 13 10
(dump_exp_buffer2) N11 EXP_BUFF_ID_VARIABLE     i rq:i 'ABC%'  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 12 11
(dump_exp_buffer2) N12 EXP_BUFF_ID_FLT          f rq:f '1.1'  0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_OPERATOR     f rq:f '*'  2: 12 11
(dump_exp_buffer2) N15 EXP_BUFF_ID_OPERATOR     f rq:f '-'  2: 13 10
(dump_exp_buffer2) N17 EXP_BUFF_ID_OPERATOR     f rq:f '+'  2: 15 7
(dump_exp_buffer2) N19 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N20 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N21 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N22 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N23 EXP_BUFF_ID_OPERATOR     f rq:f '+'  2: 17 2
(dump_exp_buffer2) N24 EXP_BUFF_ID_OPERATOR     f rq:f ':='  2: 23 1
=================
      (process_expression_types) 
==INFIX==

Var: A ary:0
infix_stack_push: 'A'
Var: A ary:0
infix_stack_push: 'A'
infix_stack_push: '2'
infix_stack_push: '3'
infix_stack_pop: '3'
infix_stack_pop: '2'
infix_stack_push: '(2 * 3)'
infix_stack_push: '3'
Var: Z% ary:0
infix_stack_push: 'Z%'
infix_stack_pop: 'Z%'
infix_stack_pop: '3'
infix_stack_push: '(3 * Z%)'
Var: ABC% ary:0
infix_stack_push: 'ABC%'
infix_stack_push: '1.1'
infix_stack_pop: '1.1'
infix_stack_pop: 'ABC%'
infix_stack_push: '(ABC% * 1.1)'
infix_stack_pop: '(ABC% * 1.1)'
infix_stack_pop: '(3 * Z%)'
infix_stack_push: '((3 * Z%) - (ABC% * 1.1))'
infix_stack_pop: '((3 * Z%) - (ABC% * 1.1))'
infix_stack_pop: '(2 * 3)'
infix_stack_push: '((2 * 3) + ((3 * Z%) - (ABC% * 1.1)))'
infix_stack_pop: '((2 * 3) + ((3 * Z%) - (ABC% * 1.1)))'
infix_stack_pop: 'A'
infix_stack_push: '(A + ((2 * 3) + ((3 * Z%) - (ABC% * 1.1))))'
infix_stack_pop: '(A + ((2 * 3) + ((3 * Z%) - (ABC% * 1.1))))'
infix_stack_pop: 'A'
infix_stack_push: '(A := (A + ((2 * 3) + ((3 * Z%) - (ABC% * 1.1)))))'
infix_stack_pop: '(A := (A + ((2 * 3) + ((3 * Z%) - (ABC% * 1.1)))))'
      (process_expression_types) ==(A := (A + ((2 * 3) + ((3 * Z%) - (ABC% * 1.1)))))==
      (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_START    U rq:?   0:
(    output_qcode) N4 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N5 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
(    output_qcode) N6 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(    output_qcode) N7 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 6 5
(    output_qcode) N18 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 15 7
(    output_qcode) N8 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(    output_qcode) N9 EXP_BUFF_ID_VARIABLE     i rq:i Z%  0:
(    output_qcode) N10 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 9 8
(    output_qcode) N16 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 13 10
(    output_qcode) N11 EXP_BUFF_ID_VARIABLE     i rq:i ABC%  0:
(    output_qcode) N14 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 12 11
(    output_qcode) N12 EXP_BUFF_ID_FLT          f rq:f 1.1  0:
(    output_qcode) N13 EXP_BUFF_ID_OPERATOR     f rq:f *  2: 12 11
(    output_qcode) N15 EXP_BUFF_ID_OPERATOR     f rq:f -  2: 13 10
(    output_qcode) N17 EXP_BUFF_ID_OPERATOR     f rq:f +  2: 15 7
(    output_qcode) N19 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N20 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N21 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N22 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N23 EXP_BUFF_ID_OPERATOR     f rq:f +  2: 17 2
(    output_qcode) N24 EXP_BUFF_ID_OPERATOR     f rq:f :=  2: 23 1

       (check_literal) check_literal:lit=':' idx=42 ''
       (check_literal) check_literal:After drop space:':' idx=42 ''
       (check_literal) check_literal  ret0 Empty test string
      (translate_file) 
cline scanned OK
***************
**  X%  =  2 **
***************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'X%  =  2 ':
     (check_vname) check_vname ret1 '%  =  2 ':
    (check_variable) check_variable: '%  =  2 '
    (check_variable) check_variable: Ary test '  =  2 '

     (check_literal) check_literal:lit='(' idx=4 '  =  2 '
     (check_literal) check_literal:After drop space:'(' idx=4 '  =  2 '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=4 '  =  2 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=6 '=  2 '
   (check_literal) check_literal:After while():  2 
   (check_literal) check_literal:ret1 

   (check_expression) check_expression: '2 '

    (check_eitem) check_eitem: '2 '

     (check_operator) check_operator: 2 

      (check_literal) check_literal:lit=',' idx=9 '2 '
      (check_literal) check_literal:After drop space:',' idx=9 '2 '
      (check_literal)   ',' != '2'
      (check_literal) check_literal: ret0
     (check_operator) check_operator:ret0

     (check_function) check_function: '2 '
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=9 '2 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=9 '2 '
      (check_literal)   '%' != '2'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=9 '2 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=9 '2 '
      (check_literal)   '"' != '2'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: '2 '
       (check_integer) check_integer:ret1
      (check_number) check_number: ret1
     (check_atom) check_atom:ret1
    (check_eitem) check_eitem:ret1

    (check_eitem) check_eitem: ' '

     (check_operator) check_operator:  

      (check_literal) check_literal:lit=',' idx=11 ''
      (check_literal) check_literal:After drop space:',' idx=11 ''
      (check_literal) check_literal  ret0 Empty test string
     (check_operator) check_operator:ret0

     (check_function) check_function: ''
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=10 ' '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=11 ''
      (check_literal) check_literal  ret0 Empty test string

      (check_literal) check_literal:lit=' "' idx=10 ' '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=11 ''
      (check_literal) check_literal  ret0 Empty test string

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: ''
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname '':
       (check_vname) check_vname ret0 '':
      (check_variable) check_variable:ret0 
     (check_atom) check_atom:ret1

     (check_sub_expr) check_sub_expr:

      (check_literal) check_literal:lit=' (' idx=10 ' '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'(' idx=11 ''
      (check_literal) check_literal  ret0 Empty test string
     (check_sub_expr) check_sub_expr: ret0
    (check_eitem) check_eitem:ret0
   (check_expression) check_expression:ret1 ' '
  (check_assignment) check_assignment:ret1
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=1, ' '
========================================================
  X%  =  2 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'X%  =  2 ':
    (check_vname) check_vname ret1 '%  =  2 ':
   (check_variable) check_variable: '%  =  2 '
   (check_variable) check_variable: Ary test '  =  2 '

    (check_literal) check_literal:lit='(' idx=4 '  =  2 '
    (check_literal) check_literal:After drop space:'(' idx=4 '  =  2 '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=4 '  =  2 '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=6 '=  2 '
  (check_literal) check_literal:After while():  2 
  (check_literal) check_literal:ret1 

  (check_expression) check_expression: '2 '

   (check_eitem) check_eitem: '2 '

    (check_operator) check_operator: 2 

     (check_literal) check_literal:lit=',' idx=9 '2 '
     (check_literal) check_literal:After drop space:',' idx=9 '2 '
     (check_literal)   ',' != '2'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: '2 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=9 '2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=9 '2 '
     (check_literal)   '%' != '2'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=9 '2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=9 '2 '
     (check_literal)   '"' != '2'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '2 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: ' '

    (check_operator) check_operator:  

     (check_literal) check_literal:lit=',' idx=11 ''
     (check_literal) check_literal:After drop space:',' idx=11 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_operator) check_operator:ret0

    (check_function) check_function: ''
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=10 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=11 ''
     (check_literal) check_literal  ret0 Empty test string

     (check_literal) check_literal:lit=' "' idx=10 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=11 ''
     (check_literal) check_literal  ret0 Empty test string

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: ''
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname '':
      (check_vname) check_vname ret0 '':
     (check_variable) check_variable:ret0 
    (check_atom) check_atom:ret1

    (check_sub_expr) check_sub_expr:

     (check_literal) check_literal:lit=' (' idx=10 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'(' idx=11 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_sub_expr) check_sub_expr: ret0
   (check_eitem) check_eitem:ret0
  (check_expression) check_expression:ret1 ' '
 (check_assignment) check_assignment:ret1

 (scan_assignment) scan_assignment:

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'X%  =  2 '
   (scan_vname) scan_vname: ret1 'X'
  (scan_variable) scan_variable: '%  =  2 ' vname='X'
  (scan_variable) scan_variable: Ary test '  =  2 '

   (check_literal) check_literal:lit='(' idx=4 '  =  2 '
   (check_literal) check_literal:After drop space:'(' idx=4 '  =  2 '
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='X%' is str:0 int:1 flt:0 ary:0
   Frst:1 T:'X%' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:X% is not function
token_is_variable: tok:'X%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:X% is not function
 (init_get_name) 
init_get_name:'X%'
 (init_get_name) 
init_get_name:'X%'
 (get_name) 
get_name:gn:'X%'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] i i X%
 (print_var_info) 
VAR INFO: '                X%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0

  (scan_literal) scan_literal:lit=' =' '  =  2 '
  (scan_literal) scan_literal:After drop space:=  2 
  (scan_literal) scan_literal:while loop:=  2 
   Frst:0 T:'=' exptype:i
  (operator_precedence) 
= is operator
'=' is operator
  (process_token) 
Token is operator o1 name:= o2 name:
  (process_token) 
opr1:1 opr2:0
Push 1
 Push:'='
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (1)

  (op_stack_print) 
000: = type:0
  (op_stack_print) 
------------------

  (scan_literal) scan_literal:ret1

  (scan_expression) scan_expression: '  2 '

   (check_eitem) check_eitem: '2 '

    (check_operator) check_operator: 2 

     (check_literal) check_literal:lit=',' idx=9 '2 '
     (check_literal) check_literal:After drop space:',' idx=9 '2 '
     (check_literal)   ',' != '2'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: '2 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=9 '2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=9 '2 '
     (check_literal)   '%' != '2'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=9 '2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=9 '2 '
     (check_literal)   '"' != '2'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '2 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (scan_eitem) scan_eitem:

    (check_operator) check_operator: 2 

     (check_literal) check_literal:lit=',' idx=9 '2 '
     (check_literal) check_literal:After drop space:',' idx=9 '2 '
     (check_literal)   ',' != '2'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: '2 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=9 '2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=9 '2 '
     (check_literal)   '%' != '2'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=9 '2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=9 '2 '
     (check_literal)   '"' != '2'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '2 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1

    (scan_atom) scan_atom:

     (check_literal) check_literal:lit=' %' idx=9 '2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=9 '2 '
     (check_literal)   '%' != '2'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=9 '2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=9 '2 '
     (check_literal)   '"' != '2'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '2 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1

     (scan_number) scan_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '2 '
      (check_integer) check_integer:ret1

      (scan_integer) scan_integer:
      (scan_integer) scan_integer:ret1
   Frst:0 T:'2' exptype:i
     (operator_precedence) 
= is operator
modify_expression_type:Inittype:i Intype:i Outtype:i
(  output_integer) [i,()] i i 2
     (scan_integer) scan_integer:ret1  2
    (scan_atom) scan_atom:ret1

    (check_eitem) check_eitem: ' '

     (check_operator) check_operator:  

      (check_literal) check_literal:lit=',' idx=11 ''
      (check_literal) check_literal:After drop space:',' idx=11 ''
      (check_literal) check_literal  ret0 Empty test string
     (check_operator) check_operator:ret0

     (check_function) check_function: ''
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=10 ' '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=11 ''
      (check_literal) check_literal  ret0 Empty test string

      (check_literal) check_literal:lit=' "' idx=10 ' '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=11 ''
      (check_literal) check_literal  ret0 Empty test string

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: ''
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname '':
       (check_vname) check_vname ret0 '':
      (check_variable) check_variable:ret0 
     (check_atom) check_atom:ret1

     (check_sub_expr) check_sub_expr:

      (check_literal) check_literal:lit=' (' idx=10 ' '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'(' idx=11 ''
      (check_literal) check_literal  ret0 Empty test string
     (check_sub_expr) check_sub_expr: ret0
    (check_eitem) check_eitem:ret0
   (scan_expression) scan_expression: ret1 ' '
  (scan_assignment) scan_assignment: ret1
Finalise stack
Pop '='
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (0)

 (op_stack_print) 
------------------

( output_operator) [i,()] i i =
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:= is not function
 (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'X%'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '='  0:
=================
 BE:X%
type_check_stack_push: 'X%'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (1)

 (type_check_stack_print) 
000: 'X%' type:0
 (type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'X%' type:i (0)
 BE:2
type_check_stack_push: '2'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (2)

 (type_check_stack_print) 
000: 'X%' type:0
 (type_check_stack_print) 
001: '2' type:0
 (type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'X%' type:i (0)
001: '2' type:i (0)
 BE::=
BUFF_ID_OPERATOR
Found operator :=
type_check_stack_pop: '2'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (1)

 (type_check_stack_print) 
000: 'X%' type:0
 (type_check_stack_print) 
------------------

type_check_stack_pop: 'X%'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (0)

 (type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (1)

 (type_check_stack_print) 
000: '000' type:0
 (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'X%'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i ':='  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i 'X%'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_OPERATOR     i rq:i ':='  2: 2 1
=================
 (process_expression_types) 
==INFIX==

Var: X% ary:0
infix_stack_push: 'X%'
infix_stack_push: '2'
infix_stack_pop: '2'
infix_stack_pop: 'X%'
infix_stack_push: '(X% := 2)'
infix_stack_pop: '(X% := 2)'
 (process_expression_types) ==(X% := 2)==
 (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i X%  0:
(    output_qcode) N2 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
(    output_qcode) N3 EXP_BUFF_ID_OPERATOR     i rq:i :=  2: 2 1

  (check_literal) check_literal:lit=':' idx=11 ''
  (check_literal) check_literal:After drop space:':' idx=11 ''
  (check_literal) check_literal  ret0 Empty test string
 (translate_file) 
cline scanned OK
**********
**X%=Y% **
**********


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'X%=Y% ':
     (check_vname) check_vname ret1 '%=Y% ':
    (check_variable) check_variable: '%=Y% '
    (check_variable) check_variable: Ary test '=Y% '

     (check_literal) check_literal:lit='(' idx=2 '=Y% '
     (check_literal) check_literal:After drop space:'(' idx=2 '=Y% '
     (check_literal)   '(' != '='
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=2 '=Y% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=2 '=Y% '
   (check_literal) check_literal:After while():Y% 
   (check_literal) check_literal:ret1 

   (check_expression) check_expression: 'Y% '

    (check_eitem) check_eitem: 'Y% '

     (check_operator) check_operator: Y% 

      (check_literal) check_literal:lit=',' idx=3 'Y% '
      (check_literal) check_literal:After drop space:',' idx=3 'Y% '
      (check_literal)   ',' != 'Y'
      (check_literal) check_literal: ret0
     (check_operator) check_operator:ret0

     (check_function) check_function: 'Y% '
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=3 'Y% '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=3 'Y% '
      (check_literal)   '%' != 'Y'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=3 'Y% '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=3 'Y% '
      (check_literal)   '"' != 'Y'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: 'Y% '
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname 'Y% ':
       (check_vname) check_vname ret1 '% ':
      (check_variable) check_variable: '% '
      (check_variable) check_variable: Ary test ' '

       (check_literal) check_literal:lit='(' idx=5 ' '
       (check_literal) check_literal:After drop space:'(' idx=5 ' '
       (check_literal)   '(' != ' '
       (check_literal) check_literal: ret0
      (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
     (check_variable) check_variable:ret1 
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: ' '

    (check_operator) check_operator:  

     (check_literal) check_literal:lit=',' idx=6 ''
     (check_literal) check_literal:After drop space:',' idx=6 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_operator) check_operator:ret0

    (check_function) check_function: ''
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=5 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=6 ''
     (check_literal) check_literal  ret0 Empty test string

     (check_literal) check_literal:lit=' "' idx=5 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=6 ''
     (check_literal) check_literal  ret0 Empty test string

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: ''
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname '':
      (check_vname) check_vname ret0 '':
     (check_variable) check_variable:ret0 
    (check_atom) check_atom:ret1

    (check_sub_expr) check_sub_expr:

     (check_literal) check_literal:lit=' (' idx=5 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'(' idx=6 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_sub_expr) check_sub_expr: ret0
   (check_eitem) check_eitem:ret0
  (check_expression) check_expression:ret1 ' '
 (check_assignment) check_assignment:ret1
(check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=1, ' '
========================================================
X%=Y% 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'X%=Y% ':
    (check_vname) check_vname ret1 '%=Y% ':
   (check_variable) check_variable: '%=Y% '
   (check_variable) check_variable: Ary test '=Y% '

    (check_literal) check_literal:lit='(' idx=2 '=Y% '
    (check_literal) check_literal:After drop space:'(' idx=2 '=Y% '
    (check_literal)   '(' != '='
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=2 '=Y% '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=2 '=Y% '
  (check_literal) check_literal:After while():Y% 
  (check_literal) check_literal:ret1 

  (check_expression) check_expression: 'Y% '

   (check_eitem) check_eitem: 'Y% '

    (check_operator) check_operator: Y% 

     (check_literal) check_literal:lit=',' idx=3 'Y% '
     (check_literal) check_literal:After drop space:',' idx=3 'Y% '
     (check_literal)   ',' != 'Y'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: 'Y% '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=3 'Y% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=3 'Y% '
     (check_literal)   '%' != 'Y'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=3 'Y% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=3 'Y% '
     (check_literal)   '"' != 'Y'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'Y% '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'Y% ':
      (check_vname) check_vname ret1 '% ':
     (check_variable) check_variable: '% '
     (check_variable) check_variable: Ary test ' '

      (check_literal) check_literal:lit='(' idx=5 ' '
      (check_literal) check_literal:After drop space:'(' idx=5 ' '
      (check_literal)   '(' != ' '
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (check_eitem) check_eitem: ' '

   (check_operator) check_operator:  

    (check_literal) check_literal:lit=',' idx=6 ''
    (check_literal) check_literal:After drop space:',' idx=6 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_operator) check_operator:ret0

   (check_function) check_function: ''
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=5 ' '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=6 ''
    (check_literal) check_literal  ret0 Empty test string

    (check_literal) check_literal:lit=' "' idx=5 ' '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=6 ''
    (check_literal) check_literal  ret0 Empty test string

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: ''
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname '':
     (check_vname) check_vname ret0 '':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret1

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=5 ' '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=6 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_sub_expr) check_sub_expr: ret0
  (check_eitem) check_eitem:ret0
 (check_expression) check_expression:ret1 ' '
(check_assignment) check_assignment:ret1

 (scan_assignment) scan_assignment:

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'X%=Y% '
   (scan_vname) scan_vname: ret1 'X'
  (scan_variable) scan_variable: '%=Y% ' vname='X'
  (scan_variable) scan_variable: Ary test '=Y% '

   (check_literal) check_literal:lit='(' idx=2 '=Y% '
   (check_literal) check_literal:After drop space:'(' idx=2 '=Y% '
   (check_literal)   '(' != '='
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='X%' is str:0 int:1 flt:0 ary:0
   Frst:1 T:'X%' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:X% is not function
token_is_variable: tok:'X%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:X% is not function
 (init_get_name) 
init_get_name:'X%'
 (init_get_name) 
init_get_name:'X%'
 (get_name) 
get_name:gn:'X%'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] i i X%
 (print_var_info) 
VAR INFO: '                X%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0

  (scan_literal) scan_literal:lit=' =' '=Y% '
  (scan_literal) scan_literal:After drop space:=Y% 
  (scan_literal) scan_literal:while loop:=Y% 
   Frst:0 T:'=' exptype:i
  (operator_precedence) 
= is operator
'=' is operator
  (process_token) 
Token is operator o1 name:= o2 name:
  (process_token) 
opr1:1 opr2:0
Push 1
 Push:'='
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (1)

  (op_stack_print) 
000: = type:0
  (op_stack_print) 
------------------

  (scan_literal) scan_literal:ret1

  (scan_expression) scan_expression: 'Y% '

   (check_eitem) check_eitem: 'Y% '

    (check_operator) check_operator: Y% 

     (check_literal) check_literal:lit=',' idx=3 'Y% '
     (check_literal) check_literal:After drop space:',' idx=3 'Y% '
     (check_literal)   ',' != 'Y'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: 'Y% '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=3 'Y% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=3 'Y% '
     (check_literal)   '%' != 'Y'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=3 'Y% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=3 'Y% '
     (check_literal)   '"' != 'Y'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'Y% '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'Y% ':
      (check_vname) check_vname ret1 '% ':
     (check_variable) check_variable: '% '
     (check_variable) check_variable: Ary test ' '

      (check_literal) check_literal:lit='(' idx=5 ' '
      (check_literal) check_literal:After drop space:'(' idx=5 ' '
      (check_literal)   '(' != ' '
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator: Y% 

    (check_literal) check_literal:lit=',' idx=3 'Y% '
    (check_literal) check_literal:After drop space:',' idx=3 'Y% '
    (check_literal)   ',' != 'Y'
    (check_literal) check_literal: ret0
   (check_operator) check_operator:ret0

   (check_function) check_function: 'Y% '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=3 'Y% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=3 'Y% '
    (check_literal)   '%' != 'Y'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=3 'Y% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=3 'Y% '
    (check_literal)   '"' != 'Y'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'Y% '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'Y% ':
     (check_vname) check_vname ret1 '% ':
    (check_variable) check_variable: '% '
    (check_variable) check_variable: Ary test ' '

     (check_literal) check_literal:lit='(' idx=5 ' '
     (check_literal) check_literal:After drop space:'(' idx=5 ' '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1

  (scan_atom) scan_atom:

   (check_literal) check_literal:lit=' %' idx=3 'Y% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=3 'Y% '
   (check_literal)   '%' != 'Y'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=3 'Y% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=3 'Y% '
   (check_literal)   '"' != 'Y'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'Y% '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'Y% ':
    (check_vname) check_vname ret1 '% ':
   (check_variable) check_variable: '% '
   (check_variable) check_variable: Ary test ' '

    (check_literal) check_literal:lit='(' idx=5 ' '
    (check_literal) check_literal:After drop space:'(' idx=5 ' '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'Y% '
   (scan_vname) scan_vname: ret1 'Y'
  (scan_variable) scan_variable: '% ' vname='Y'
  (scan_variable) scan_variable: Ary test ' '

   (check_literal) check_literal:lit='(' idx=5 ' '
   (check_literal) check_literal:After drop space:'(' idx=5 ' '
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='Y%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'Y%' exptype:i
 (operator_precedence) 
= is operator
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:Y% is not function
token_is_variable: tok:'Y%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:Y% is not function
 (init_get_name) 
init_get_name:'Y%'
 (init_get_name) 
init_get_name:'Y%'
 (get_name) 
get_name:gn:'Y%'
process_token:type:i req_type:i
modify_expression_type:Inittype:i Intype:i Outtype:i
( output_variable) [i,()] i i Y%
 (print_var_info) 
VAR INFO: '                Y%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
 (scan_atom) scan_atom:ret1

 (check_eitem) check_eitem: ' '

  (check_operator) check_operator:  

   (check_literal) check_literal:lit=',' idx=6 ''
   (check_literal) check_literal:After drop space:',' idx=6 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_operator) check_operator:ret0

  (check_function) check_function: ''
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=5 ' '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=6 ''
   (check_literal) check_literal  ret0 Empty test string

   (check_literal) check_literal:lit=' "' idx=5 ' '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=6 ''
   (check_literal) check_literal  ret0 Empty test string

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: ''
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname '':
    (check_vname) check_vname ret0 '':
   (check_variable) check_variable:ret0 
  (check_atom) check_atom:ret1

  (check_sub_expr) check_sub_expr:

   (check_literal) check_literal:lit=' (' idx=5 ' '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'(' idx=6 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_sub_expr) check_sub_expr: ret0
 (check_eitem) check_eitem:ret0
(scan_expression) scan_expression: ret1 ' '
(scan_assignment) scan_assignment: ret1
Finalise stack
Pop '='
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_operator) [i,()] i i =
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:= is not function
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'X%'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'Y%'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '='  0:
=================
 BE:X%
type_check_stack_push: 'X%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'X%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'X%' type:i (0)
 BE:Y%
type_check_stack_push: 'Y%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'X%' type:0
(type_check_stack_print) 
001: 'Y%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'X%' type:i (0)
001: 'Y%' type:i (0)
 BE::=
BUFF_ID_OPERATOR
Found operator :=
type_check_stack_pop: 'Y%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'X%' type:0
(type_check_stack_print) 
------------------

type_check_stack_pop: 'X%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (0)

(type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'X%'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'Y%'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i ':='  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i 'X%'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'Y%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_OPERATOR     i rq:i ':='  2: 2 1
=================
(process_expression_types) 
==INFIX==

Var: X% ary:0
infix_stack_push: 'X%'
Var: Y% ary:0
infix_stack_push: 'Y%'
infix_stack_pop: 'Y%'
infix_stack_pop: 'X%'
infix_stack_push: '(X% := Y%)'
infix_stack_pop: '(X% := Y%)'
(process_expression_types) ==(X% := Y%)==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i X%  0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     i rq:i Y%  0:
(    output_qcode) N3 EXP_BUFF_ID_OPERATOR     i rq:i :=  2: 2 1

 (check_literal) check_literal:lit=':' idx=6 ''
 (check_literal) check_literal:After drop space:':' idx=6 ''
 (check_literal) check_literal  ret0 Empty test string
(translate_file) 
cline scanned OK
***********
**X%= Z% **
***********


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'X%= Z% ':
     (check_vname) check_vname ret1 '%= Z% ':
    (check_variable) check_variable: '%= Z% '
    (check_variable) check_variable: Ary test '= Z% '

     (check_literal) check_literal:lit='(' idx=2 '= Z% '
     (check_literal) check_literal:After drop space:'(' idx=2 '= Z% '
     (check_literal)   '(' != '='
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=2 '= Z% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=2 '= Z% '
   (check_literal) check_literal:After while(): Z% 
   (check_literal) check_literal:ret1 

   (check_expression) check_expression: 'Z% '

    (check_eitem) check_eitem: 'Z% '

     (check_operator) check_operator: Z% 

      (check_literal) check_literal:lit=',' idx=4 'Z% '
      (check_literal) check_literal:After drop space:',' idx=4 'Z% '
      (check_literal)   ',' != 'Z'
      (check_literal) check_literal: ret0
     (check_operator) check_operator:ret0

     (check_function) check_function: 'Z% '
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=4 'Z% '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=4 'Z% '
      (check_literal)   '%' != 'Z'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=4 'Z% '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=4 'Z% '
      (check_literal)   '"' != 'Z'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: 'Z% '
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname 'Z% ':
       (check_vname) check_vname ret1 '% ':
      (check_variable) check_variable: '% '
      (check_variable) check_variable: Ary test ' '

       (check_literal) check_literal:lit='(' idx=6 ' '
       (check_literal) check_literal:After drop space:'(' idx=6 ' '
       (check_literal)   '(' != ' '
       (check_literal) check_literal: ret0
      (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
     (check_variable) check_variable:ret1 
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: ' '

    (check_operator) check_operator:  

     (check_literal) check_literal:lit=',' idx=7 ''
     (check_literal) check_literal:After drop space:',' idx=7 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_operator) check_operator:ret0

    (check_function) check_function: ''
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=6 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=7 ''
     (check_literal) check_literal  ret0 Empty test string

     (check_literal) check_literal:lit=' "' idx=6 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=7 ''
     (check_literal) check_literal  ret0 Empty test string

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: ''
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname '':
      (check_vname) check_vname ret0 '':
     (check_variable) check_variable:ret0 
    (check_atom) check_atom:ret1

    (check_sub_expr) check_sub_expr:

     (check_literal) check_literal:lit=' (' idx=6 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'(' idx=7 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_sub_expr) check_sub_expr: ret0
   (check_eitem) check_eitem:ret0
  (check_expression) check_expression:ret1 ' '
 (check_assignment) check_assignment:ret1
(check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=1, ' '
========================================================
X%= Z% 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'X%= Z% ':
    (check_vname) check_vname ret1 '%= Z% ':
   (check_variable) check_variable: '%= Z% '
   (check_variable) check_variable: Ary test '= Z% '

    (check_literal) check_literal:lit='(' idx=2 '= Z% '
    (check_literal) check_literal:After drop space:'(' idx=2 '= Z% '
    (check_literal)   '(' != '='
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=2 '= Z% '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=2 '= Z% '
  (check_literal) check_literal:After while(): Z% 
  (check_literal) check_literal:ret1 

  (check_expression) check_expression: 'Z% '

   (check_eitem) check_eitem: 'Z% '

    (check_operator) check_operator: Z% 

     (check_literal) check_literal:lit=',' idx=4 'Z% '
     (check_literal) check_literal:After drop space:',' idx=4 'Z% '
     (check_literal)   ',' != 'Z'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: 'Z% '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=4 'Z% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=4 'Z% '
     (check_literal)   '%' != 'Z'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=4 'Z% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=4 'Z% '
     (check_literal)   '"' != 'Z'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'Z% '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'Z% ':
      (check_vname) check_vname ret1 '% ':
     (check_variable) check_variable: '% '
     (check_variable) check_variable: Ary test ' '

      (check_literal) check_literal:lit='(' idx=6 ' '
      (check_literal) check_literal:After drop space:'(' idx=6 ' '
      (check_literal)   '(' != ' '
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (check_eitem) check_eitem: ' '

   (check_operator) check_operator:  

    (check_literal) check_literal:lit=',' idx=7 ''
    (check_literal) check_literal:After drop space:',' idx=7 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_operator) check_operator:ret0

   (check_function) check_function: ''
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=6 ' '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=7 ''
    (check_literal) check_literal  ret0 Empty test string

    (check_literal) check_literal:lit=' "' idx=6 ' '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=7 ''
    (check_literal) check_literal  ret0 Empty test string

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: ''
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname '':
     (check_vname) check_vname ret0 '':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret1

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=6 ' '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=7 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_sub_expr) check_sub_expr: ret0
  (check_eitem) check_eitem:ret0
 (check_expression) check_expression:ret1 ' '
(check_assignment) check_assignment:ret1

 (scan_assignment) scan_assignment:

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'X%= Z% '
   (scan_vname) scan_vname: ret1 'X'
  (scan_variable) scan_variable: '%= Z% ' vname='X'
  (scan_variable) scan_variable: Ary test '= Z% '

   (check_literal) check_literal:lit='(' idx=2 '= Z% '
   (check_literal) check_literal:After drop space:'(' idx=2 '= Z% '
   (check_literal)   '(' != '='
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='X%' is str:0 int:1 flt:0 ary:0
   Frst:1 T:'X%' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:X% is not function
token_is_variable: tok:'X%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:X% is not function
 (init_get_name) 
init_get_name:'X%'
 (init_get_name) 
init_get_name:'X%'
 (get_name) 
get_name:gn:'X%'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] i i X%
 (print_var_info) 
VAR INFO: '                X%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0

  (scan_literal) scan_literal:lit=' =' '= Z% '
  (scan_literal) scan_literal:After drop space:= Z% 
  (scan_literal) scan_literal:while loop:= Z% 
   Frst:0 T:'=' exptype:i
  (operator_precedence) 
= is operator
'=' is operator
  (process_token) 
Token is operator o1 name:= o2 name:
  (process_token) 
opr1:1 opr2:0
Push 1
 Push:'='
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (1)

  (op_stack_print) 
000: = type:0
  (op_stack_print) 
------------------

  (scan_literal) scan_literal:ret1

  (scan_expression) scan_expression: ' Z% '

   (check_eitem) check_eitem: 'Z% '

    (check_operator) check_operator: Z% 

     (check_literal) check_literal:lit=',' idx=4 'Z% '
     (check_literal) check_literal:After drop space:',' idx=4 'Z% '
     (check_literal)   ',' != 'Z'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: 'Z% '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=4 'Z% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=4 'Z% '
     (check_literal)   '%' != 'Z'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=4 'Z% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=4 'Z% '
     (check_literal)   '"' != 'Z'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'Z% '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'Z% ':
      (check_vname) check_vname ret1 '% ':
     (check_variable) check_variable: '% '
     (check_variable) check_variable: Ary test ' '

      (check_literal) check_literal:lit='(' idx=6 ' '
      (check_literal) check_literal:After drop space:'(' idx=6 ' '
      (check_literal)   '(' != ' '
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator: Z% 

    (check_literal) check_literal:lit=',' idx=4 'Z% '
    (check_literal) check_literal:After drop space:',' idx=4 'Z% '
    (check_literal)   ',' != 'Z'
    (check_literal) check_literal: ret0
   (check_operator) check_operator:ret0

   (check_function) check_function: 'Z% '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=4 'Z% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=4 'Z% '
    (check_literal)   '%' != 'Z'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=4 'Z% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=4 'Z% '
    (check_literal)   '"' != 'Z'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'Z% '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'Z% ':
     (check_vname) check_vname ret1 '% ':
    (check_variable) check_variable: '% '
    (check_variable) check_variable: Ary test ' '

     (check_literal) check_literal:lit='(' idx=6 ' '
     (check_literal) check_literal:After drop space:'(' idx=6 ' '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1

  (scan_atom) scan_atom:

   (check_literal) check_literal:lit=' %' idx=4 'Z% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=4 'Z% '
   (check_literal)   '%' != 'Z'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=4 'Z% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=4 'Z% '
   (check_literal)   '"' != 'Z'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'Z% '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'Z% ':
    (check_vname) check_vname ret1 '% ':
   (check_variable) check_variable: '% '
   (check_variable) check_variable: Ary test ' '

    (check_literal) check_literal:lit='(' idx=6 ' '
    (check_literal) check_literal:After drop space:'(' idx=6 ' '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'Z% '
   (scan_vname) scan_vname: ret1 'Z'
  (scan_variable) scan_variable: '% ' vname='Z'
  (scan_variable) scan_variable: Ary test ' '

   (check_literal) check_literal:lit='(' idx=6 ' '
   (check_literal) check_literal:After drop space:'(' idx=6 ' '
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='Z%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'Z%' exptype:i
 (operator_precedence) 
= is operator
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:Z% is not function
token_is_variable: tok:'Z%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:Z% is not function
 (init_get_name) 
init_get_name:'Z%'
 (init_get_name) 
init_get_name:'Z%'
 (get_name) 
get_name:gn:'Z%'
process_token:type:i req_type:i
modify_expression_type:Inittype:i Intype:i Outtype:i
( output_variable) [i,()] i i Z%
 (print_var_info) 
VAR INFO: '                Z%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
 (scan_atom) scan_atom:ret1

 (check_eitem) check_eitem: ' '

  (check_operator) check_operator:  

   (check_literal) check_literal:lit=',' idx=7 ''
   (check_literal) check_literal:After drop space:',' idx=7 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_operator) check_operator:ret0

  (check_function) check_function: ''
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=6 ' '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=7 ''
   (check_literal) check_literal  ret0 Empty test string

   (check_literal) check_literal:lit=' "' idx=6 ' '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=7 ''
   (check_literal) check_literal  ret0 Empty test string

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: ''
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname '':
    (check_vname) check_vname ret0 '':
   (check_variable) check_variable:ret0 
  (check_atom) check_atom:ret1

  (check_sub_expr) check_sub_expr:

   (check_literal) check_literal:lit=' (' idx=6 ' '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'(' idx=7 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_sub_expr) check_sub_expr: ret0
 (check_eitem) check_eitem:ret0
(scan_expression) scan_expression: ret1 ' '
(scan_assignment) scan_assignment: ret1
Finalise stack
Pop '='
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_operator) [i,()] i i =
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:= is not function
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'X%'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'Z%'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '='  0:
=================
 BE:X%
type_check_stack_push: 'X%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'X%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'X%' type:i (0)
 BE:Z%
type_check_stack_push: 'Z%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'X%' type:0
(type_check_stack_print) 
001: 'Z%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'X%' type:i (0)
001: 'Z%' type:i (0)
 BE::=
BUFF_ID_OPERATOR
Found operator :=
type_check_stack_pop: 'Z%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'X%' type:0
(type_check_stack_print) 
------------------

type_check_stack_pop: 'X%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (0)

(type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'X%'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'Z%'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i ':='  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i 'X%'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'Z%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_OPERATOR     i rq:i ':='  2: 2 1
=================
(process_expression_types) 
==INFIX==

Var: X% ary:0
infix_stack_push: 'X%'
Var: Z% ary:0
infix_stack_push: 'Z%'
infix_stack_pop: 'Z%'
infix_stack_pop: 'X%'
infix_stack_push: '(X% := Z%)'
infix_stack_pop: '(X% := Z%)'
(process_expression_types) ==(X% := Z%)==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i X%  0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     i rq:i Z%  0:
(    output_qcode) N3 EXP_BUFF_ID_OPERATOR     i rq:i :=  2: 2 1

 (check_literal) check_literal:lit=':' idx=7 ''
 (check_literal) check_literal:After drop space:':' idx=7 ''
 (check_literal) check_literal  ret0 Empty test string
(translate_file) 
cline scanned OK
*************
**A% = 1+2 **
*************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'A% = 1+2 ':
     (check_vname) check_vname ret1 '% = 1+2 ':
    (check_variable) check_variable: '% = 1+2 '
    (check_variable) check_variable: Ary test ' = 1+2 '

     (check_literal) check_literal:lit='(' idx=2 ' = 1+2 '
     (check_literal) check_literal:After drop space:'(' idx=2 ' = 1+2 '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=2 ' = 1+2 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=3 '= 1+2 '
   (check_literal) check_literal:After while(): 1+2 
   (check_literal) check_literal:ret1 

   (check_expression) check_expression: '1+2 '

    (check_eitem) check_eitem: '1+2 '

     (check_operator) check_operator: 1+2 

      (check_literal) check_literal:lit=',' idx=5 '1+2 '
      (check_literal) check_literal:After drop space:',' idx=5 '1+2 '
      (check_literal)   ',' != '1'
      (check_literal) check_literal: ret0
     (check_operator) check_operator:ret0

     (check_function) check_function: '1+2 '
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=5 '1+2 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=5 '1+2 '
      (check_literal)   '%' != '1'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=5 '1+2 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=5 '1+2 '
      (check_literal)   '"' != '1'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: '1+2 '
       (check_integer) check_integer:ret1
      (check_number) check_number: ret1
     (check_atom) check_atom:ret1
    (check_eitem) check_eitem:ret1

    (check_eitem) check_eitem: '+2 '

     (check_operator) check_operator: +2 

      (check_literal) check_literal:lit=',' idx=6 '+2 '
      (check_literal) check_literal:After drop space:',' idx=6 '+2 '
      (check_literal)   ',' != '+'
      (check_literal) check_literal: ret0
     (check_operator) check_operator: ret1
    (check_eitem) check_eitem:ret1

    (check_eitem) check_eitem: '2 '

     (check_operator) check_operator: 2 

      (check_literal) check_literal:lit=',' idx=7 '2 '
      (check_literal) check_literal:After drop space:',' idx=7 '2 '
      (check_literal)   ',' != '2'
      (check_literal) check_literal: ret0
     (check_operator) check_operator:ret0

     (check_function) check_function: '2 '
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=7 '2 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=7 '2 '
      (check_literal)   '%' != '2'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=7 '2 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=7 '2 '
      (check_literal)   '"' != '2'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: '2 '
       (check_integer) check_integer:ret1
      (check_number) check_number: ret1
     (check_atom) check_atom:ret1
    (check_eitem) check_eitem:ret1

    (check_eitem) check_eitem: ' '

     (check_operator) check_operator:  

      (check_literal) check_literal:lit=',' idx=9 ''
      (check_literal) check_literal:After drop space:',' idx=9 ''
      (check_literal) check_literal  ret0 Empty test string
     (check_operator) check_operator:ret0

     (check_function) check_function: ''
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=8 ' '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=9 ''
      (check_literal) check_literal  ret0 Empty test string

      (check_literal) check_literal:lit=' "' idx=8 ' '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=9 ''
      (check_literal) check_literal  ret0 Empty test string

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: ''
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname '':
       (check_vname) check_vname ret0 '':
      (check_variable) check_variable:ret0 
     (check_atom) check_atom:ret1

     (check_sub_expr) check_sub_expr:

      (check_literal) check_literal:lit=' (' idx=8 ' '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'(' idx=9 ''
      (check_literal) check_literal  ret0 Empty test string
     (check_sub_expr) check_sub_expr: ret0
    (check_eitem) check_eitem:ret0
   (check_expression) check_expression:ret1 ' '
  (check_assignment) check_assignment:ret1
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=1, ' '
========================================================
A% = 1+2 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'A% = 1+2 ':
    (check_vname) check_vname ret1 '% = 1+2 ':
   (check_variable) check_variable: '% = 1+2 '
   (check_variable) check_variable: Ary test ' = 1+2 '

    (check_literal) check_literal:lit='(' idx=2 ' = 1+2 '
    (check_literal) check_literal:After drop space:'(' idx=2 ' = 1+2 '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=2 ' = 1+2 '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=3 '= 1+2 '
  (check_literal) check_literal:After while(): 1+2 
  (check_literal) check_literal:ret1 

  (check_expression) check_expression: '1+2 '

   (check_eitem) check_eitem: '1+2 '

    (check_operator) check_operator: 1+2 

     (check_literal) check_literal:lit=',' idx=5 '1+2 '
     (check_literal) check_literal:After drop space:',' idx=5 '1+2 '
     (check_literal)   ',' != '1'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: '1+2 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=5 '1+2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=5 '1+2 '
     (check_literal)   '%' != '1'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=5 '1+2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=5 '1+2 '
     (check_literal)   '"' != '1'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '1+2 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: '+2 '

    (check_operator) check_operator: +2 

     (check_literal) check_literal:lit=',' idx=6 '+2 '
     (check_literal) check_literal:After drop space:',' idx=6 '+2 '
     (check_literal)   ',' != '+'
     (check_literal) check_literal: ret0
    (check_operator) check_operator: ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: '2 '

    (check_operator) check_operator: 2 

     (check_literal) check_literal:lit=',' idx=7 '2 '
     (check_literal) check_literal:After drop space:',' idx=7 '2 '
     (check_literal)   ',' != '2'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: '2 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=7 '2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=7 '2 '
     (check_literal)   '%' != '2'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=7 '2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=7 '2 '
     (check_literal)   '"' != '2'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '2 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: ' '

    (check_operator) check_operator:  

     (check_literal) check_literal:lit=',' idx=9 ''
     (check_literal) check_literal:After drop space:',' idx=9 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_operator) check_operator:ret0

    (check_function) check_function: ''
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=8 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=9 ''
     (check_literal) check_literal  ret0 Empty test string

     (check_literal) check_literal:lit=' "' idx=8 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=9 ''
     (check_literal) check_literal  ret0 Empty test string

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: ''
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname '':
      (check_vname) check_vname ret0 '':
     (check_variable) check_variable:ret0 
    (check_atom) check_atom:ret1

    (check_sub_expr) check_sub_expr:

     (check_literal) check_literal:lit=' (' idx=8 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'(' idx=9 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_sub_expr) check_sub_expr: ret0
   (check_eitem) check_eitem:ret0
  (check_expression) check_expression:ret1 ' '
 (check_assignment) check_assignment:ret1

 (scan_assignment) scan_assignment:

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'A% = 1+2 '
   (scan_vname) scan_vname: ret1 'A'
  (scan_variable) scan_variable: '% = 1+2 ' vname='A'
  (scan_variable) scan_variable: Ary test ' = 1+2 '

   (check_literal) check_literal:lit='(' idx=2 ' = 1+2 '
   (check_literal) check_literal:After drop space:'(' idx=2 ' = 1+2 '
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='A%' is str:0 int:1 flt:0 ary:0
   Frst:1 T:'A%' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:A% is not function
token_is_variable: tok:'A%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:A% is not function
 (init_get_name) 
init_get_name:'A%'
 (init_get_name) 
init_get_name:'A%'
 (get_name) 
get_name:gn:'A%'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] i i A%
 (print_var_info) 
VAR INFO: '                A%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0

  (scan_literal) scan_literal:lit=' =' ' = 1+2 '
  (scan_literal) scan_literal:After drop space:= 1+2 
  (scan_literal) scan_literal:while loop:= 1+2 
   Frst:0 T:'=' exptype:i
  (operator_precedence) 
= is operator
'=' is operator
  (process_token) 
Token is operator o1 name:= o2 name:
  (process_token) 
opr1:1 opr2:0
Push 1
 Push:'='
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (1)

  (op_stack_print) 
000: = type:0
  (op_stack_print) 
------------------

  (scan_literal) scan_literal:ret1

  (scan_expression) scan_expression: ' 1+2 '

   (check_eitem) check_eitem: '1+2 '

    (check_operator) check_operator: 1+2 

     (check_literal) check_literal:lit=',' idx=5 '1+2 '
     (check_literal) check_literal:After drop space:',' idx=5 '1+2 '
     (check_literal)   ',' != '1'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: '1+2 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=5 '1+2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=5 '1+2 '
     (check_literal)   '%' != '1'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=5 '1+2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=5 '1+2 '
     (check_literal)   '"' != '1'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '1+2 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (scan_eitem) scan_eitem:

    (check_operator) check_operator: 1+2 

     (check_literal) check_literal:lit=',' idx=5 '1+2 '
     (check_literal) check_literal:After drop space:',' idx=5 '1+2 '
     (check_literal)   ',' != '1'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: '1+2 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=5 '1+2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=5 '1+2 '
     (check_literal)   '%' != '1'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=5 '1+2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=5 '1+2 '
     (check_literal)   '"' != '1'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '1+2 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1

    (scan_atom) scan_atom:

     (check_literal) check_literal:lit=' %' idx=5 '1+2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=5 '1+2 '
     (check_literal)   '%' != '1'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=5 '1+2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=5 '1+2 '
     (check_literal)   '"' != '1'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '1+2 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1

     (scan_number) scan_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '1+2 '
      (check_integer) check_integer:ret1

      (scan_integer) scan_integer:
      (scan_integer) scan_integer:ret1
   Frst:0 T:'1' exptype:i
     (operator_precedence) 
= is operator
modify_expression_type:Inittype:i Intype:i Outtype:i
(  output_integer) [i,()] i i 1
     (scan_integer) scan_integer:ret1  1
    (scan_atom) scan_atom:ret1

    (check_eitem) check_eitem: '+2 '

     (check_operator) check_operator: +2 

      (check_literal) check_literal:lit=',' idx=6 '+2 '
      (check_literal) check_literal:After drop space:',' idx=6 '+2 '
      (check_literal)   ',' != '+'
      (check_literal) check_literal: ret0
     (check_operator) check_operator: ret1
    (check_eitem) check_eitem:ret1

    (scan_eitem) scan_eitem:

     (check_operator) check_operator: +2 

      (check_literal) check_literal:lit=',' idx=6 '+2 '
      (check_literal) check_literal:After drop space:',' idx=6 '+2 '
      (check_literal)   ',' != '+'
      (check_literal) check_literal: ret0
     (check_operator) check_operator: ret1

     (scan_operator) scan_operator: '+2 '

      (check_literal) check_literal:lit=',' idx=6 '+2 '
      (check_literal) check_literal:After drop space:',' idx=6 '+2 '
      (check_literal)   ',' != '+'
      (check_literal) check_literal: ret0
     (scan_operator) scan_operator: ret1 '2 '
   Frst:0 T:'+' exptype:i
    (operator_precedence) 
+ is operator
    (operator_precedence) 
= is operator
'+' is operator
    (process_token) 
Token is operator o1 name:+ o2 name:=
    (process_token) 
opr1:3 opr2:1
    (operator_precedence) 
= is operator
    (operator_precedence) 
= is operator
Push 1
 Push:'+'
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (2)

    (op_stack_print) 
000: = type:0
    (op_stack_print) 
001: + type:0
    (op_stack_print) 
------------------


     (check_eitem) check_eitem: '2 '

      (check_operator) check_operator: 2 

       (check_literal) check_literal:lit=',' idx=7 '2 '
       (check_literal) check_literal:After drop space:',' idx=7 '2 '
       (check_literal)   ',' != '2'
       (check_literal) check_literal: ret0
      (check_operator) check_operator:ret0

      (check_function) check_function: '2 '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=7 '2 '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=7 '2 '
       (check_literal)   '%' != '2'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=7 '2 '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=7 '2 '
       (check_literal)   '"' != '2'
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '2 '
        (check_integer) check_integer:ret1
       (check_number) check_number: ret1
      (check_atom) check_atom:ret1
     (check_eitem) check_eitem:ret1

     (scan_eitem) scan_eitem:

      (check_operator) check_operator: 2 

       (check_literal) check_literal:lit=',' idx=7 '2 '
       (check_literal) check_literal:After drop space:',' idx=7 '2 '
       (check_literal)   ',' != '2'
       (check_literal) check_literal: ret0
      (check_operator) check_operator:ret0

      (check_function) check_function: '2 '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=7 '2 '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=7 '2 '
       (check_literal)   '%' != '2'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=7 '2 '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=7 '2 '
       (check_literal)   '"' != '2'
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '2 '
        (check_integer) check_integer:ret1
       (check_number) check_number: ret1
      (check_atom) check_atom:ret1

      (scan_atom) scan_atom:

       (check_literal) check_literal:lit=' %' idx=7 '2 '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=7 '2 '
       (check_literal)   '%' != '2'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=7 '2 '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=7 '2 '
       (check_literal)   '"' != '2'
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '2 '
        (check_integer) check_integer:ret1
       (check_number) check_number: ret1

       (scan_number) scan_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '2 '
        (check_integer) check_integer:ret1

        (scan_integer) scan_integer:
        (scan_integer) scan_integer:ret1
   Frst:0 T:'2' exptype:i
       (operator_precedence) 
+ is operator
modify_expression_type:Inittype:i Intype:i Outtype:i
(  output_integer) [i,()] i i 2
       (scan_integer) scan_integer:ret1  2
      (scan_atom) scan_atom:ret1

      (check_eitem) check_eitem: ' '

       (check_operator) check_operator:  

        (check_literal) check_literal:lit=',' idx=9 ''
        (check_literal) check_literal:After drop space:',' idx=9 ''
        (check_literal) check_literal  ret0 Empty test string
       (check_operator) check_operator:ret0

       (check_function) check_function: ''
       (check_function) check_function: ret0

       (check_atom) check_atom:

        (check_literal) check_literal:lit=' %' idx=8 ' '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'%' idx=9 ''
        (check_literal) check_literal  ret0 Empty test string

        (check_literal) check_literal:lit=' "' idx=8 ' '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'"' idx=9 ''
        (check_literal) check_literal  ret0 Empty test string

        (check_number) check_number:

         (check_float) check_float:
         (isfloatdigit) isfloatdigit:
         (check_float) check_float: ret0

         (check_integer) check_integer: ''
         (check_integer) check_integer:ret0
        (check_number) check_number: ret0

        (check_variable) check_variable:

         (check_vname) check_vname '':
         (check_vname) check_vname ret0 '':
        (check_variable) check_variable:ret0 
       (check_atom) check_atom:ret1

       (check_sub_expr) check_sub_expr:

        (check_literal) check_literal:lit=' (' idx=8 ' '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'(' idx=9 ''
        (check_literal) check_literal  ret0 Empty test string
       (check_sub_expr) check_sub_expr: ret0
      (check_eitem) check_eitem:ret0
     (scan_expression) scan_expression: ret1 ' '
    (scan_assignment) scan_assignment: ret1
Finalise stack
Pop '+'
   (op_stack_print) 
------------------
   (op_stack_print) 
Operator Stack     (1)

   (op_stack_print) 
000: = type:0
   (op_stack_print) 
------------------

( output_operator) [i,()] i i +
   (token_is_function) 
token_is_function:
   (token_is_function) 
token_is_function:+ is not function
Pop '='
   (op_stack_print) 
------------------
   (op_stack_print) 
Operator Stack     (0)

   (op_stack_print) 
------------------

( output_operator) [i,()] i i =
   (token_is_function) 
token_is_function:
   (token_is_function) 
token_is_function:= is not function
   (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'A%'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '1'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '+'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '='  0:
=================
 BE:A%
type_check_stack_push: 'A%'
   (type_check_stack_print) 
------------------
   (type_check_stack_print) 
Type Check Stack     (1)

   (type_check_stack_print) 
000: 'A%' type:0
   (type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'A%' type:i (0)
 BE:1
type_check_stack_push: '1'
   (type_check_stack_print) 
------------------
   (type_check_stack_print) 
Type Check Stack     (2)

   (type_check_stack_print) 
000: 'A%' type:0
   (type_check_stack_print) 
001: '1' type:0
   (type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'A%' type:i (0)
001: '1' type:i (0)
 BE:2
type_check_stack_push: '2'
   (type_check_stack_print) 
------------------
   (type_check_stack_print) 
Type Check Stack     (3)

   (type_check_stack_print) 
000: 'A%' type:0
   (type_check_stack_print) 
001: '1' type:0
   (type_check_stack_print) 
002: '2' type:0
   (type_check_stack_print) 
------------------


Type Check Stack (3)

000: 'A%' type:i (0)
001: '1' type:i (0)
002: '2' type:i (0)
 BE:+
BUFF_ID_OPERATOR
Found operator +
type_check_stack_pop: '2'
   (type_check_stack_print) 
------------------
   (type_check_stack_print) 
Type Check Stack     (2)

   (type_check_stack_print) 
000: 'A%' type:0
   (type_check_stack_print) 
001: '1' type:0
   (type_check_stack_print) 
------------------

type_check_stack_pop: '1'
   (type_check_stack_print) 
------------------
   (type_check_stack_print) 
Type Check Stack     (1)

   (type_check_stack_print) 
000: 'A%' type:0
   (type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
   (type_check_stack_print) 
------------------
   (type_check_stack_print) 
Type Check Stack     (2)

   (type_check_stack_print) 
000: 'A%' type:0
   (type_check_stack_print) 
001: '000' type:0
   (type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'A%' type:i (0)
001: '000' type:i (0)
 BE::=
BUFF_ID_OPERATOR
Found operator :=
type_check_stack_pop: '000'
   (type_check_stack_print) 
------------------
   (type_check_stack_print) 
Type Check Stack     (1)

   (type_check_stack_print) 
000: 'A%' type:0
   (type_check_stack_print) 
------------------

type_check_stack_pop: 'A%'
   (type_check_stack_print) 
------------------
   (type_check_stack_print) 
Type Check Stack     (0)

   (type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
   (type_check_stack_print) 
------------------
   (type_check_stack_print) 
Type Check Stack     (1)

   (type_check_stack_print) 
000: '000' type:0
   (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'A%'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '1'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '+'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i ':='  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i 'A%'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i '1'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_OPERATOR     i rq:i '+'  2: 3 2
(dump_exp_buffer2) N5 EXP_BUFF_ID_OPERATOR     i rq:i ':='  2: 4 1
=================
   (process_expression_types) 
==INFIX==

Var: A% ary:0
infix_stack_push: 'A%'
infix_stack_push: '1'
infix_stack_push: '2'
infix_stack_pop: '2'
infix_stack_pop: '1'
infix_stack_push: '(1 + 2)'
infix_stack_pop: '(1 + 2)'
infix_stack_pop: 'A%'
infix_stack_push: '(A% := (1 + 2))'
infix_stack_pop: '(A% := (1 + 2))'
   (process_expression_types) ==(A% := (1 + 2))==
   (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i A%  0:
(    output_qcode) N2 EXP_BUFF_ID_INTEGER      i rq:i 1  0:
(    output_qcode) N3 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
(    output_qcode) N4 EXP_BUFF_ID_OPERATOR     i rq:i +  2: 3 2
(    output_qcode) N5 EXP_BUFF_ID_OPERATOR     i rq:i :=  2: 4 1

    (check_literal) check_literal:lit=':' idx=9 ''
    (check_literal) check_literal:After drop space:':' idx=9 ''
    (check_literal) check_literal  ret0 Empty test string
   (translate_file) 
cline scanned OK
************
**A% = B% **
************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'A% = B% ':
     (check_vname) check_vname ret1 '% = B% ':
    (check_variable) check_variable: '% = B% '
    (check_variable) check_variable: Ary test ' = B% '

     (check_literal) check_literal:lit='(' idx=2 ' = B% '
     (check_literal) check_literal:After drop space:'(' idx=2 ' = B% '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=2 ' = B% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=3 '= B% '
   (check_literal) check_literal:After while(): B% 
   (check_literal) check_literal:ret1 

   (check_expression) check_expression: 'B% '

    (check_eitem) check_eitem: 'B% '

     (check_operator) check_operator: B% 

      (check_literal) check_literal:lit=',' idx=5 'B% '
      (check_literal) check_literal:After drop space:',' idx=5 'B% '
      (check_literal)   ',' != 'B'
      (check_literal) check_literal: ret0
     (check_operator) check_operator:ret0

     (check_function) check_function: 'B% '
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=5 'B% '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=5 'B% '
      (check_literal)   '%' != 'B'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=5 'B% '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=5 'B% '
      (check_literal)   '"' != 'B'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: 'B% '
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname 'B% ':
       (check_vname) check_vname ret1 '% ':
      (check_variable) check_variable: '% '
      (check_variable) check_variable: Ary test ' '

       (check_literal) check_literal:lit='(' idx=7 ' '
       (check_literal) check_literal:After drop space:'(' idx=7 ' '
       (check_literal)   '(' != ' '
       (check_literal) check_literal: ret0
      (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
     (check_variable) check_variable:ret1 
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: ' '

    (check_operator) check_operator:  

     (check_literal) check_literal:lit=',' idx=8 ''
     (check_literal) check_literal:After drop space:',' idx=8 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_operator) check_operator:ret0

    (check_function) check_function: ''
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=7 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=8 ''
     (check_literal) check_literal  ret0 Empty test string

     (check_literal) check_literal:lit=' "' idx=7 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=8 ''
     (check_literal) check_literal  ret0 Empty test string

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: ''
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname '':
      (check_vname) check_vname ret0 '':
     (check_variable) check_variable:ret0 
    (check_atom) check_atom:ret1

    (check_sub_expr) check_sub_expr:

     (check_literal) check_literal:lit=' (' idx=7 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'(' idx=8 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_sub_expr) check_sub_expr: ret0
   (check_eitem) check_eitem:ret0
  (check_expression) check_expression:ret1 ' '
 (check_assignment) check_assignment:ret1
(check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=1, ' '
========================================================
A% = B% 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'A% = B% ':
    (check_vname) check_vname ret1 '% = B% ':
   (check_variable) check_variable: '% = B% '
   (check_variable) check_variable: Ary test ' = B% '

    (check_literal) check_literal:lit='(' idx=2 ' = B% '
    (check_literal) check_literal:After drop space:'(' idx=2 ' = B% '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=2 ' = B% '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=3 '= B% '
  (check_literal) check_literal:After while(): B% 
  (check_literal) check_literal:ret1 

  (check_expression) check_expression: 'B% '

   (check_eitem) check_eitem: 'B% '

    (check_operator) check_operator: B% 

     (check_literal) check_literal:lit=',' idx=5 'B% '
     (check_literal) check_literal:After drop space:',' idx=5 'B% '
     (check_literal)   ',' != 'B'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: 'B% '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=5 'B% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=5 'B% '
     (check_literal)   '%' != 'B'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=5 'B% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=5 'B% '
     (check_literal)   '"' != 'B'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'B% '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'B% ':
      (check_vname) check_vname ret1 '% ':
     (check_variable) check_variable: '% '
     (check_variable) check_variable: Ary test ' '

      (check_literal) check_literal:lit='(' idx=7 ' '
      (check_literal) check_literal:After drop space:'(' idx=7 ' '
      (check_literal)   '(' != ' '
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (check_eitem) check_eitem: ' '

   (check_operator) check_operator:  

    (check_literal) check_literal:lit=',' idx=8 ''
    (check_literal) check_literal:After drop space:',' idx=8 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_operator) check_operator:ret0

   (check_function) check_function: ''
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=7 ' '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=8 ''
    (check_literal) check_literal  ret0 Empty test string

    (check_literal) check_literal:lit=' "' idx=7 ' '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=8 ''
    (check_literal) check_literal  ret0 Empty test string

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: ''
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname '':
     (check_vname) check_vname ret0 '':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret1

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=7 ' '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=8 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_sub_expr) check_sub_expr: ret0
  (check_eitem) check_eitem:ret0
 (check_expression) check_expression:ret1 ' '
(check_assignment) check_assignment:ret1

 (scan_assignment) scan_assignment:

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'A% = B% '
   (scan_vname) scan_vname: ret1 'A'
  (scan_variable) scan_variable: '% = B% ' vname='A'
  (scan_variable) scan_variable: Ary test ' = B% '

   (check_literal) check_literal:lit='(' idx=2 ' = B% '
   (check_literal) check_literal:After drop space:'(' idx=2 ' = B% '
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='A%' is str:0 int:1 flt:0 ary:0
   Frst:1 T:'A%' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:A% is not function
token_is_variable: tok:'A%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:A% is not function
 (init_get_name) 
init_get_name:'A%'
 (init_get_name) 
init_get_name:'A%'
 (get_name) 
get_name:gn:'A%'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] i i A%
 (print_var_info) 
VAR INFO: '                A%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0

  (scan_literal) scan_literal:lit=' =' ' = B% '
  (scan_literal) scan_literal:After drop space:= B% 
  (scan_literal) scan_literal:while loop:= B% 
   Frst:0 T:'=' exptype:i
  (operator_precedence) 
= is operator
'=' is operator
  (process_token) 
Token is operator o1 name:= o2 name:
  (process_token) 
opr1:1 opr2:0
Push 1
 Push:'='
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (1)

  (op_stack_print) 
000: = type:0
  (op_stack_print) 
------------------

  (scan_literal) scan_literal:ret1

  (scan_expression) scan_expression: ' B% '

   (check_eitem) check_eitem: 'B% '

    (check_operator) check_operator: B% 

     (check_literal) check_literal:lit=',' idx=5 'B% '
     (check_literal) check_literal:After drop space:',' idx=5 'B% '
     (check_literal)   ',' != 'B'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: 'B% '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=5 'B% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=5 'B% '
     (check_literal)   '%' != 'B'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=5 'B% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=5 'B% '
     (check_literal)   '"' != 'B'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'B% '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'B% ':
      (check_vname) check_vname ret1 '% ':
     (check_variable) check_variable: '% '
     (check_variable) check_variable: Ary test ' '

      (check_literal) check_literal:lit='(' idx=7 ' '
      (check_literal) check_literal:After drop space:'(' idx=7 ' '
      (check_literal)   '(' != ' '
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator: B% 

    (check_literal) check_literal:lit=',' idx=5 'B% '
    (check_literal) check_literal:After drop space:',' idx=5 'B% '
    (check_literal)   ',' != 'B'
    (check_literal) check_literal: ret0
   (check_operator) check_operator:ret0

   (check_function) check_function: 'B% '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=5 'B% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=5 'B% '
    (check_literal)   '%' != 'B'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=5 'B% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=5 'B% '
    (check_literal)   '"' != 'B'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'B% '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'B% ':
     (check_vname) check_vname ret1 '% ':
    (check_variable) check_variable: '% '
    (check_variable) check_variable: Ary test ' '

     (check_literal) check_literal:lit='(' idx=7 ' '
     (check_literal) check_literal:After drop space:'(' idx=7 ' '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1

  (scan_atom) scan_atom:

   (check_literal) check_literal:lit=' %' idx=5 'B% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=5 'B% '
   (check_literal)   '%' != 'B'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=5 'B% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=5 'B% '
   (check_literal)   '"' != 'B'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'B% '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'B% ':
    (check_vname) check_vname ret1 '% ':
   (check_variable) check_variable: '% '
   (check_variable) check_variable: Ary test ' '

    (check_literal) check_literal:lit='(' idx=7 ' '
    (check_literal) check_literal:After drop space:'(' idx=7 ' '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'B% '
   (scan_vname) scan_vname: ret1 'B'
  (scan_variable) scan_variable: '% ' vname='B'
  (scan_variable) scan_variable: Ary test ' '

   (check_literal) check_literal:lit='(' idx=7 ' '
   (check_literal) check_literal:After drop space:'(' idx=7 ' '
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='B%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'B%' exptype:i
 (operator_precedence) 
= is operator
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:B% is not function
token_is_variable: tok:'B%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:B% is not function
 (init_get_name) 
init_get_name:'B%'
 (init_get_name) 
init_get_name:'B%'
 (get_name) 
get_name:gn:'B%'
process_token:type:i req_type:i
modify_expression_type:Inittype:i Intype:i Outtype:i
( output_variable) [i,()] i i B%
 (print_var_info) 
VAR INFO: '                B%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
 (scan_atom) scan_atom:ret1

 (check_eitem) check_eitem: ' '

  (check_operator) check_operator:  

   (check_literal) check_literal:lit=',' idx=8 ''
   (check_literal) check_literal:After drop space:',' idx=8 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_operator) check_operator:ret0

  (check_function) check_function: ''
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=7 ' '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=8 ''
   (check_literal) check_literal  ret0 Empty test string

   (check_literal) check_literal:lit=' "' idx=7 ' '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=8 ''
   (check_literal) check_literal  ret0 Empty test string

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: ''
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname '':
    (check_vname) check_vname ret0 '':
   (check_variable) check_variable:ret0 
  (check_atom) check_atom:ret1

  (check_sub_expr) check_sub_expr:

   (check_literal) check_literal:lit=' (' idx=7 ' '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'(' idx=8 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_sub_expr) check_sub_expr: ret0
 (check_eitem) check_eitem:ret0
(scan_expression) scan_expression: ret1 ' '
(scan_assignment) scan_assignment: ret1
Finalise stack
Pop '='
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_operator) [i,()] i i =
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:= is not function
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'A%'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'B%'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '='  0:
=================
 BE:A%
type_check_stack_push: 'A%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'A%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'A%' type:i (0)
 BE:B%
type_check_stack_push: 'B%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'A%' type:0
(type_check_stack_print) 
001: 'B%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'A%' type:i (0)
001: 'B%' type:i (0)
 BE::=
BUFF_ID_OPERATOR
Found operator :=
type_check_stack_pop: 'B%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'A%' type:0
(type_check_stack_print) 
------------------

type_check_stack_pop: 'A%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (0)

(type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'A%'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'B%'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i ':='  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i 'A%'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'B%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_OPERATOR     i rq:i ':='  2: 2 1
=================
(process_expression_types) 
==INFIX==

Var: A% ary:0
infix_stack_push: 'A%'
Var: B% ary:0
infix_stack_push: 'B%'
infix_stack_pop: 'B%'
infix_stack_pop: 'A%'
infix_stack_push: '(A% := B%)'
infix_stack_pop: '(A% := B%)'
(process_expression_types) ==(A% := B%)==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i A%  0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     i rq:i B%  0:
(    output_qcode) N3 EXP_BUFF_ID_OPERATOR     i rq:i :=  2: 2 1

 (check_literal) check_literal:lit=':' idx=8 ''
 (check_literal) check_literal:After drop space:':' idx=8 ''
 (check_literal) check_literal  ret0 Empty test string
(translate_file) 
cline scanned OK
*****************
**A% = A% + B% **
*****************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'A% = A% + B% ':
     (check_vname) check_vname ret1 '% = A% + B% ':
    (check_variable) check_variable: '% = A% + B% '
    (check_variable) check_variable: Ary test ' = A% + B% '

     (check_literal) check_literal:lit='(' idx=2 ' = A% + B% '
     (check_literal) check_literal:After drop space:'(' idx=2 ' = A% + B% '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=2 ' = A% + B% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=3 '= A% + B% '
   (check_literal) check_literal:After while(): A% + B% 
   (check_literal) check_literal:ret1 

   (check_expression) check_expression: 'A% + B% '

    (check_eitem) check_eitem: 'A% + B% '

     (check_operator) check_operator: A% + B% 

      (check_literal) check_literal:lit=',' idx=5 'A% + B% '
      (check_literal) check_literal:After drop space:',' idx=5 'A% + B% '
      (check_literal)   ',' != 'A'
      (check_literal) check_literal: ret0
     (check_operator) check_operator:ret0

     (check_function) check_function: 'A% + B% '
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=5 'A% + B% '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=5 'A% + B% '
      (check_literal)   '%' != 'A'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=5 'A% + B% '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=5 'A% + B% '
      (check_literal)   '"' != 'A'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: 'A% + B% '
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname 'A% + B% ':
       (check_vname) check_vname ret1 '% + B% ':
      (check_variable) check_variable: '% + B% '
      (check_variable) check_variable: Ary test ' + B% '

       (check_literal) check_literal:lit='(' idx=7 ' + B% '
       (check_literal) check_literal:After drop space:'(' idx=7 ' + B% '
       (check_literal)   '(' != ' '
       (check_literal) check_literal: ret0
      (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
     (check_variable) check_variable:ret1 
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: ' + B% '

    (check_operator) check_operator:  + B% 

     (check_literal) check_literal:lit=',' idx=8 '+ B% '
     (check_literal) check_literal:After drop space:',' idx=8 '+ B% '
     (check_literal)   ',' != '+'
     (check_literal) check_literal: ret0
    (check_operator) check_operator: ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: ' B% '

    (check_operator) check_operator:  B% 

     (check_literal) check_literal:lit=',' idx=10 'B% '
     (check_literal) check_literal:After drop space:',' idx=10 'B% '
     (check_literal)   ',' != 'B'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: 'B% '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=9 ' B% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=10 'B% '
     (check_literal)   '%' != 'B'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=9 ' B% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=10 'B% '
     (check_literal)   '"' != 'B'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'B% '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'B% ':
      (check_vname) check_vname ret1 '% ':
     (check_variable) check_variable: '% '
     (check_variable) check_variable: Ary test ' '

      (check_literal) check_literal:lit='(' idx=12 ' '
      (check_literal) check_literal:After drop space:'(' idx=12 ' '
      (check_literal)   '(' != ' '
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (check_eitem) check_eitem: ' '

   (check_operator) check_operator:  

    (check_literal) check_literal:lit=',' idx=13 ''
    (check_literal) check_literal:After drop space:',' idx=13 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_operator) check_operator:ret0

   (check_function) check_function: ''
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=12 ' '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=13 ''
    (check_literal) check_literal  ret0 Empty test string

    (check_literal) check_literal:lit=' "' idx=12 ' '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=13 ''
    (check_literal) check_literal  ret0 Empty test string

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: ''
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname '':
     (check_vname) check_vname ret0 '':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret1

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=12 ' '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=13 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_sub_expr) check_sub_expr: ret0
  (check_eitem) check_eitem:ret0
 (check_expression) check_expression:ret1 ' '
(check_assignment) check_assignment:ret1
(check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=1, ' '
========================================================
A% = A% + B% 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'A% = A% + B% ':
    (check_vname) check_vname ret1 '% = A% + B% ':
   (check_variable) check_variable: '% = A% + B% '
   (check_variable) check_variable: Ary test ' = A% + B% '

    (check_literal) check_literal:lit='(' idx=2 ' = A% + B% '
    (check_literal) check_literal:After drop space:'(' idx=2 ' = A% + B% '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=2 ' = A% + B% '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=3 '= A% + B% '
  (check_literal) check_literal:After while(): A% + B% 
  (check_literal) check_literal:ret1 

  (check_expression) check_expression: 'A% + B% '

   (check_eitem) check_eitem: 'A% + B% '

    (check_operator) check_operator: A% + B% 

     (check_literal) check_literal:lit=',' idx=5 'A% + B% '
     (check_literal) check_literal:After drop space:',' idx=5 'A% + B% '
     (check_literal)   ',' != 'A'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: 'A% + B% '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=5 'A% + B% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=5 'A% + B% '
     (check_literal)   '%' != 'A'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=5 'A% + B% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=5 'A% + B% '
     (check_literal)   '"' != 'A'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'A% + B% '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'A% + B% ':
      (check_vname) check_vname ret1 '% + B% ':
     (check_variable) check_variable: '% + B% '
     (check_variable) check_variable: Ary test ' + B% '

      (check_literal) check_literal:lit='(' idx=7 ' + B% '
      (check_literal) check_literal:After drop space:'(' idx=7 ' + B% '
      (check_literal)   '(' != ' '
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (check_eitem) check_eitem: ' + B% '

   (check_operator) check_operator:  + B% 

    (check_literal) check_literal:lit=',' idx=8 '+ B% '
    (check_literal) check_literal:After drop space:',' idx=8 '+ B% '
    (check_literal)   ',' != '+'
    (check_literal) check_literal: ret0
   (check_operator) check_operator: ret1
  (check_eitem) check_eitem:ret1

  (check_eitem) check_eitem: ' B% '

   (check_operator) check_operator:  B% 

    (check_literal) check_literal:lit=',' idx=10 'B% '
    (check_literal) check_literal:After drop space:',' idx=10 'B% '
    (check_literal)   ',' != 'B'
    (check_literal) check_literal: ret0
   (check_operator) check_operator:ret0

   (check_function) check_function: 'B% '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=9 ' B% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=10 'B% '
    (check_literal)   '%' != 'B'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=9 ' B% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=10 'B% '
    (check_literal)   '"' != 'B'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'B% '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'B% ':
     (check_vname) check_vname ret1 '% ':
    (check_variable) check_variable: '% '
    (check_variable) check_variable: Ary test ' '

     (check_literal) check_literal:lit='(' idx=12 ' '
     (check_literal) check_literal:After drop space:'(' idx=12 ' '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1
 (check_eitem) check_eitem:ret1

 (check_eitem) check_eitem: ' '

  (check_operator) check_operator:  

   (check_literal) check_literal:lit=',' idx=13 ''
   (check_literal) check_literal:After drop space:',' idx=13 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_operator) check_operator:ret0

  (check_function) check_function: ''
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=12 ' '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=13 ''
   (check_literal) check_literal  ret0 Empty test string

   (check_literal) check_literal:lit=' "' idx=12 ' '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=13 ''
   (check_literal) check_literal  ret0 Empty test string

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: ''
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname '':
    (check_vname) check_vname ret0 '':
   (check_variable) check_variable:ret0 
  (check_atom) check_atom:ret1

  (check_sub_expr) check_sub_expr:

   (check_literal) check_literal:lit=' (' idx=12 ' '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'(' idx=13 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_sub_expr) check_sub_expr: ret0
 (check_eitem) check_eitem:ret0
(check_expression) check_expression:ret1 ' '
(check_assignment) check_assignment:ret1

 (scan_assignment) scan_assignment:

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'A% = A% + B% '
   (scan_vname) scan_vname: ret1 'A'
  (scan_variable) scan_variable: '% = A% + B% ' vname='A'
  (scan_variable) scan_variable: Ary test ' = A% + B% '

   (check_literal) check_literal:lit='(' idx=2 ' = A% + B% '
   (check_literal) check_literal:After drop space:'(' idx=2 ' = A% + B% '
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='A%' is str:0 int:1 flt:0 ary:0
   Frst:1 T:'A%' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:A% is not function
token_is_variable: tok:'A%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:A% is not function
 (init_get_name) 
init_get_name:'A%'
 (init_get_name) 
init_get_name:'A%'
 (get_name) 
get_name:gn:'A%'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] i i A%
 (print_var_info) 
VAR INFO: '                A%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0

  (scan_literal) scan_literal:lit=' =' ' = A% + B% '
  (scan_literal) scan_literal:After drop space:= A% + B% 
  (scan_literal) scan_literal:while loop:= A% + B% 
   Frst:0 T:'=' exptype:i
  (operator_precedence) 
= is operator
'=' is operator
  (process_token) 
Token is operator o1 name:= o2 name:
  (process_token) 
opr1:1 opr2:0
Push 1
 Push:'='
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (1)

  (op_stack_print) 
000: = type:0
  (op_stack_print) 
------------------

  (scan_literal) scan_literal:ret1

  (scan_expression) scan_expression: ' A% + B% '

   (check_eitem) check_eitem: 'A% + B% '

    (check_operator) check_operator: A% + B% 

     (check_literal) check_literal:lit=',' idx=5 'A% + B% '
     (check_literal) check_literal:After drop space:',' idx=5 'A% + B% '
     (check_literal)   ',' != 'A'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: 'A% + B% '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=5 'A% + B% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=5 'A% + B% '
     (check_literal)   '%' != 'A'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=5 'A% + B% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=5 'A% + B% '
     (check_literal)   '"' != 'A'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'A% + B% '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'A% + B% ':
      (check_vname) check_vname ret1 '% + B% ':
     (check_variable) check_variable: '% + B% '
     (check_variable) check_variable: Ary test ' + B% '

      (check_literal) check_literal:lit='(' idx=7 ' + B% '
      (check_literal) check_literal:After drop space:'(' idx=7 ' + B% '
      (check_literal)   '(' != ' '
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator: A% + B% 

    (check_literal) check_literal:lit=',' idx=5 'A% + B% '
    (check_literal) check_literal:After drop space:',' idx=5 'A% + B% '
    (check_literal)   ',' != 'A'
    (check_literal) check_literal: ret0
   (check_operator) check_operator:ret0

   (check_function) check_function: 'A% + B% '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=5 'A% + B% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=5 'A% + B% '
    (check_literal)   '%' != 'A'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=5 'A% + B% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=5 'A% + B% '
    (check_literal)   '"' != 'A'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'A% + B% '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'A% + B% ':
     (check_vname) check_vname ret1 '% + B% ':
    (check_variable) check_variable: '% + B% '
    (check_variable) check_variable: Ary test ' + B% '

     (check_literal) check_literal:lit='(' idx=7 ' + B% '
     (check_literal) check_literal:After drop space:'(' idx=7 ' + B% '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1

  (scan_atom) scan_atom:

   (check_literal) check_literal:lit=' %' idx=5 'A% + B% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=5 'A% + B% '
   (check_literal)   '%' != 'A'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=5 'A% + B% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=5 'A% + B% '
   (check_literal)   '"' != 'A'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'A% + B% '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'A% + B% ':
    (check_vname) check_vname ret1 '% + B% ':
   (check_variable) check_variable: '% + B% '
   (check_variable) check_variable: Ary test ' + B% '

    (check_literal) check_literal:lit='(' idx=7 ' + B% '
    (check_literal) check_literal:After drop space:'(' idx=7 ' + B% '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'A% + B% '
   (scan_vname) scan_vname: ret1 'A'
  (scan_variable) scan_variable: '% + B% ' vname='A'
  (scan_variable) scan_variable: Ary test ' + B% '

   (check_literal) check_literal:lit='(' idx=7 ' + B% '
   (check_literal) check_literal:After drop space:'(' idx=7 ' + B% '
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='A%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'A%' exptype:i
 (operator_precedence) 
= is operator
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:A% is not function
token_is_variable: tok:'A%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:A% is not function
 (init_get_name) 
init_get_name:'A%'
 (init_get_name) 
init_get_name:'A%'
 (get_name) 
get_name:gn:'A%'
process_token:type:i req_type:i
modify_expression_type:Inittype:i Intype:i Outtype:i
( output_variable) [i,()] i i A%
 (print_var_info) 
VAR INFO: '                A%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
 (scan_atom) scan_atom:ret1

 (check_eitem) check_eitem: ' + B% '

  (check_operator) check_operator:  + B% 

   (check_literal) check_literal:lit=',' idx=8 '+ B% '
   (check_literal) check_literal:After drop space:',' idx=8 '+ B% '
   (check_literal)   ',' != '+'
   (check_literal) check_literal: ret0
  (check_operator) check_operator: ret1
 (check_eitem) check_eitem:ret1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator:  + B% 

   (check_literal) check_literal:lit=',' idx=8 '+ B% '
   (check_literal) check_literal:After drop space:',' idx=8 '+ B% '
   (check_literal)   ',' != '+'
   (check_literal) check_literal: ret0
  (check_operator) check_operator: ret1

  (scan_operator) scan_operator: ' + B% '

   (check_literal) check_literal:lit=',' idx=8 '+ B% '
   (check_literal) check_literal:After drop space:',' idx=8 '+ B% '
   (check_literal)   ',' != '+'
   (check_literal) check_literal: ret0
  (scan_operator) scan_operator: ret1 ' B% '
   Frst:0 T:'+' exptype:i
 (operator_precedence) 
+ is operator
 (operator_precedence) 
= is operator
'+' is operator
 (process_token) 
Token is operator o1 name:+ o2 name:=
 (process_token) 
opr1:3 opr2:1
 (operator_precedence) 
= is operator
 (operator_precedence) 
= is operator
Push 1
 Push:'+'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: = type:0
 (op_stack_print) 
001: + type:0
 (op_stack_print) 
------------------


  (check_eitem) check_eitem: ' B% '

   (check_operator) check_operator:  B% 

    (check_literal) check_literal:lit=',' idx=10 'B% '
    (check_literal) check_literal:After drop space:',' idx=10 'B% '
    (check_literal)   ',' != 'B'
    (check_literal) check_literal: ret0
   (check_operator) check_operator:ret0

   (check_function) check_function: 'B% '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=9 ' B% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=10 'B% '
    (check_literal)   '%' != 'B'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=9 ' B% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=10 'B% '
    (check_literal)   '"' != 'B'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'B% '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'B% ':
     (check_vname) check_vname ret1 '% ':
    (check_variable) check_variable: '% '
    (check_variable) check_variable: Ary test ' '

     (check_literal) check_literal:lit='(' idx=12 ' '
     (check_literal) check_literal:After drop space:'(' idx=12 ' '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1
 (check_eitem) check_eitem:ret1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator:  B% 

   (check_literal) check_literal:lit=',' idx=10 'B% '
   (check_literal) check_literal:After drop space:',' idx=10 'B% '
   (check_literal)   ',' != 'B'
   (check_literal) check_literal: ret0
  (check_operator) check_operator:ret0

  (check_function) check_function: 'B% '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=9 ' B% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=10 'B% '
   (check_literal)   '%' != 'B'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=9 ' B% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=10 'B% '
   (check_literal)   '"' != 'B'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'B% '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'B% ':
    (check_vname) check_vname ret1 '% ':
   (check_variable) check_variable: '% '
   (check_variable) check_variable: Ary test ' '

    (check_literal) check_literal:lit='(' idx=12 ' '
    (check_literal) check_literal:After drop space:'(' idx=12 ' '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) check_atom:ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=9 ' B% '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=10 'B% '
  (check_literal)   '%' != 'B'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=9 ' B% '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=10 'B% '
  (check_literal)   '"' != 'B'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) check_float: ret0

   (check_integer) check_integer: 'B% '
   (check_integer) check_integer:ret0
  (check_number) check_number: ret0

  (check_variable) check_variable:

   (check_vname) check_vname 'B% ':
   (check_vname) check_vname ret1 '% ':
  (check_variable) check_variable: '% '
  (check_variable) check_variable: Ary test ' '

   (check_literal) check_literal:lit='(' idx=12 ' '
   (check_literal) check_literal:After drop space:'(' idx=12 ' '
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) scan_variable:

  (scan_vname) scan_vname: ' B% '
  (scan_vname) scan_vname: ret1 'B'
 (scan_variable) scan_variable: '% ' vname='B'
 (scan_variable) scan_variable: Ary test ' '

  (check_literal) check_literal:lit='(' idx=12 ' '
  (check_literal) check_literal:After drop space:'(' idx=12 ' '
  (check_literal)   '(' != ' '
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='B%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'B%' exptype:i
(operator_precedence) 
+ is operator
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:B% is not function
token_is_variable: tok:'B%'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:B% is not function
(init_get_name) 
init_get_name:'B%'
(init_get_name) 
init_get_name:'B%'
(get_name) 
get_name:gn:'B%'
process_token:type:i req_type:i
modify_expression_type:Inittype:i Intype:i Outtype:i
( output_variable) [i,()] i i B%
(print_var_info) 
VAR INFO: '                B%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
(scan_atom) scan_atom:ret1

 (check_eitem) check_eitem: ' '

  (check_operator) check_operator:  

   (check_literal) check_literal:lit=',' idx=13 ''
   (check_literal) check_literal:After drop space:',' idx=13 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_operator) check_operator:ret0

  (check_function) check_function: ''
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=12 ' '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=13 ''
   (check_literal) check_literal  ret0 Empty test string

   (check_literal) check_literal:lit=' "' idx=12 ' '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=13 ''
   (check_literal) check_literal  ret0 Empty test string

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: ''
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname '':
    (check_vname) check_vname ret0 '':
   (check_variable) check_variable:ret0 
  (check_atom) check_atom:ret1

  (check_sub_expr) check_sub_expr:

   (check_literal) check_literal:lit=' (' idx=12 ' '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'(' idx=13 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_sub_expr) check_sub_expr: ret0
 (check_eitem) check_eitem:ret0
(scan_expression) scan_expression: ret1 ' '
(scan_assignment) scan_assignment: ret1
Finalise stack
Pop '+'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: = type:0
(op_stack_print) 
------------------

( output_operator) [i,()] i i +
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:+ is not function
Pop '='
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_operator) [i,()] i i =
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:= is not function
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'A%'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'A%'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'B%'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '+'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '='  0:
=================
 BE:A%
type_check_stack_push: 'A%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'A%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'A%' type:i (0)
 BE:A%
type_check_stack_push: 'A%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'A%' type:0
(type_check_stack_print) 
001: 'A%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'A%' type:i (0)
001: 'A%' type:i (0)
 BE:B%
type_check_stack_push: 'B%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (3)

(type_check_stack_print) 
000: 'A%' type:0
(type_check_stack_print) 
001: 'A%' type:0
(type_check_stack_print) 
002: 'B%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (3)

000: 'A%' type:i (0)
001: 'A%' type:i (0)
002: 'B%' type:i (0)
 BE:+
BUFF_ID_OPERATOR
Found operator +
type_check_stack_pop: 'B%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'A%' type:0
(type_check_stack_print) 
001: 'A%' type:0
(type_check_stack_print) 
------------------

type_check_stack_pop: 'A%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'A%' type:0
(type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'A%' type:0
(type_check_stack_print) 
001: '000' type:0
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'A%' type:i (0)
001: '000' type:i (0)
 BE::=
BUFF_ID_OPERATOR
Found operator :=
type_check_stack_pop: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'A%' type:0
(type_check_stack_print) 
------------------

type_check_stack_pop: 'A%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (0)

(type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'A%'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'A%'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'B%'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '+'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i ':='  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i 'A%'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'A%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     i rq:i 'B%'  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_OPERATOR     i rq:i '+'  2: 3 2
(dump_exp_buffer2) N5 EXP_BUFF_ID_OPERATOR     i rq:i ':='  2: 4 1
=================
(process_expression_types) 
==INFIX==

Var: A% ary:0
infix_stack_push: 'A%'
Var: A% ary:0
infix_stack_push: 'A%'
Var: B% ary:0
infix_stack_push: 'B%'
infix_stack_pop: 'B%'
infix_stack_pop: 'A%'
infix_stack_push: '(A% + B%)'
infix_stack_pop: '(A% + B%)'
infix_stack_pop: 'A%'
infix_stack_push: '(A% := (A% + B%))'
infix_stack_pop: '(A% := (A% + B%))'
(process_expression_types) ==(A% := (A% + B%))==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i A%  0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     i rq:i A%  0:
(    output_qcode) N3 EXP_BUFF_ID_VARIABLE     i rq:i B%  0:
(    output_qcode) N4 EXP_BUFF_ID_OPERATOR     i rq:i +  2: 3 2
(    output_qcode) N5 EXP_BUFF_ID_OPERATOR     i rq:i :=  2: 4 1

 (check_literal) check_literal:lit=':' idx=13 ''
 (check_literal) check_literal:After drop space:':' idx=13 ''
 (check_literal) check_literal  ret0 Empty test string
(translate_file) 
cline scanned OK
***********************
**A% = 2 + (A% * B%) **
***********************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'A% = 2 + (A% * B%) ':
     (check_vname) check_vname ret1 '% = 2 + (A% * B%) ':
    (check_variable) check_variable: '% = 2 + (A% * B%) '
    (check_variable) check_variable: Ary test ' = 2 + (A% * B%) '

     (check_literal) check_literal:lit='(' idx=2 ' = 2 + (A% * B%) '
     (check_literal) check_literal:After drop space:'(' idx=2 ' = 2 + (A% * B%) '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=2 ' = 2 + (A% * B%) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=3 '= 2 + (A% * B%) '
   (check_literal) check_literal:After while(): 2 + (A% * B%) 
   (check_literal) check_literal:ret1 

   (check_expression) check_expression: '2 + (A% * B%) '

    (check_eitem) check_eitem: '2 + (A% * B%) '

     (check_operator) check_operator: 2 + (A% * B%) 

      (check_literal) check_literal:lit=',' idx=5 '2 + (A% * B%) '
      (check_literal) check_literal:After drop space:',' idx=5 '2 + (A% * B%) '
      (check_literal)   ',' != '2'
      (check_literal) check_literal: ret0
     (check_operator) check_operator:ret0

     (check_function) check_function: '2 + (A% * B%) '
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=5 '2 + (A% * B%) '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=5 '2 + (A% * B%) '
      (check_literal)   '%' != '2'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=5 '2 + (A% * B%) '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=5 '2 + (A% * B%) '
      (check_literal)   '"' != '2'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: '2 + (A% * B%) '
       (check_integer) check_integer:ret1
      (check_number) check_number: ret1
     (check_atom) check_atom:ret1
    (check_eitem) check_eitem:ret1

    (check_eitem) check_eitem: ' + (A% * B%) '

     (check_operator) check_operator:  + (A% * B%) 

      (check_literal) check_literal:lit=',' idx=7 '+ (A% * B%) '
      (check_literal) check_literal:After drop space:',' idx=7 '+ (A% * B%) '
      (check_literal)   ',' != '+'
      (check_literal) check_literal: ret0
     (check_operator) check_operator: ret1
    (check_eitem) check_eitem:ret1

    (check_eitem) check_eitem: ' (A% * B%) '

     (check_operator) check_operator:  (A% * B%) 

      (check_literal) check_literal:lit=',' idx=9 '(A% * B%) '
      (check_literal) check_literal:After drop space:',' idx=9 '(A% * B%) '
      (check_literal)   ',' != '('
      (check_literal) check_literal: ret0
     (check_operator) check_operator:ret0

     (check_function) check_function: '(A% * B%) '
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=8 ' (A% * B%) '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=9 '(A% * B%) '
      (check_literal)   '%' != '('
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=8 ' (A% * B%) '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=9 '(A% * B%) '
      (check_literal)   '"' != '('
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: '(A% * B%) '
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname '(A% * B%) ':
       (check_vname) check_vname ret0 '(A% * B%) ':
      (check_variable) check_variable:ret0 
     (check_atom) check_atom:ret1

     (check_sub_expr) check_sub_expr:

      (check_literal) check_literal:lit=' (' idx=8 ' (A% * B%) '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'(' idx=9 '(A% * B%) '
      (check_literal) check_literal:After while():A% * B%) 
      (check_literal) check_literal:ret1 
     (check_sub_expr) check_sub_expr: ret1
    (check_eitem) check_eitem:ret1

    (check_eitem) check_eitem: 'A% * B%) '

     (check_operator) check_operator: A% * B%) 

      (check_literal) check_literal:lit=',' idx=10 'A% * B%) '
      (check_literal) check_literal:After drop space:',' idx=10 'A% * B%) '
      (check_literal)   ',' != 'A'
      (check_literal) check_literal: ret0
     (check_operator) check_operator:ret0

     (check_function) check_function: 'A% * B%) '
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=10 'A% * B%) '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=10 'A% * B%) '
      (check_literal)   '%' != 'A'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=10 'A% * B%) '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=10 'A% * B%) '
      (check_literal)   '"' != 'A'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: 'A% * B%) '
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname 'A% * B%) ':
       (check_vname) check_vname ret1 '% * B%) ':
      (check_variable) check_variable: '% * B%) '
      (check_variable) check_variable: Ary test ' * B%) '

       (check_literal) check_literal:lit='(' idx=12 ' * B%) '
       (check_literal) check_literal:After drop space:'(' idx=12 ' * B%) '
       (check_literal)   '(' != ' '
       (check_literal) check_literal: ret0
      (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
     (check_variable) check_variable:ret1 
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: ' * B%) '

    (check_operator) check_operator:  * B%) 

     (check_literal) check_literal:lit=',' idx=13 '* B%) '
     (check_literal) check_literal:After drop space:',' idx=13 '* B%) '
     (check_literal)   ',' != '*'
     (check_literal) check_literal: ret0
    (check_operator) check_operator: ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: ' B%) '

    (check_operator) check_operator:  B%) 

     (check_literal) check_literal:lit=',' idx=15 'B%) '
     (check_literal) check_literal:After drop space:',' idx=15 'B%) '
     (check_literal)   ',' != 'B'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: 'B%) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=14 ' B%) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=15 'B%) '
     (check_literal)   '%' != 'B'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=14 ' B%) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=15 'B%) '
     (check_literal)   '"' != 'B'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'B%) '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'B%) ':
      (check_vname) check_vname ret1 '%) ':
     (check_variable) check_variable: '%) '
     (check_variable) check_variable: Ary test ') '

      (check_literal) check_literal:lit='(' idx=17 ') '
      (check_literal) check_literal:After drop space:'(' idx=17 ') '
      (check_literal)   '(' != ')'
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (check_eitem) check_eitem: ') '

   (check_operator) check_operator: ) 

    (check_literal) check_literal:lit=',' idx=17 ') '
    (check_literal) check_literal:After drop space:',' idx=17 ') '
    (check_literal)   ',' != ')'
    (check_literal) check_literal: ret0
   (check_operator) check_operator:ret0

   (check_function) check_function: ') '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=17 ') '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=17 ') '
    (check_literal)   '%' != ')'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=17 ') '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=17 ') '
    (check_literal)   '"' != ')'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: ') '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname ') ':
     (check_vname) check_vname ret0 ') ':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret1

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=17 ') '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=17 ') '
    (check_literal)   '(' != ')'
    (check_literal) check_literal: ret0
   (check_sub_expr) check_sub_expr: ret0
  (check_eitem) check_eitem:ret0
 (check_expression) check_expression:ret1 ') '
(check_assignment) check_assignment:ret1
(check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=2, ') '
========================================================
A% = 2 + (A% * B%) 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'A% = 2 + (A% * B%) ':
    (check_vname) check_vname ret1 '% = 2 + (A% * B%) ':
   (check_variable) check_variable: '% = 2 + (A% * B%) '
   (check_variable) check_variable: Ary test ' = 2 + (A% * B%) '

    (check_literal) check_literal:lit='(' idx=2 ' = 2 + (A% * B%) '
    (check_literal) check_literal:After drop space:'(' idx=2 ' = 2 + (A% * B%) '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=2 ' = 2 + (A% * B%) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=3 '= 2 + (A% * B%) '
  (check_literal) check_literal:After while(): 2 + (A% * B%) 
  (check_literal) check_literal:ret1 

  (check_expression) check_expression: '2 + (A% * B%) '

   (check_eitem) check_eitem: '2 + (A% * B%) '

    (check_operator) check_operator: 2 + (A% * B%) 

     (check_literal) check_literal:lit=',' idx=5 '2 + (A% * B%) '
     (check_literal) check_literal:After drop space:',' idx=5 '2 + (A% * B%) '
     (check_literal)   ',' != '2'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: '2 + (A% * B%) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=5 '2 + (A% * B%) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=5 '2 + (A% * B%) '
     (check_literal)   '%' != '2'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=5 '2 + (A% * B%) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=5 '2 + (A% * B%) '
     (check_literal)   '"' != '2'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '2 + (A% * B%) '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: ' + (A% * B%) '

    (check_operator) check_operator:  + (A% * B%) 

     (check_literal) check_literal:lit=',' idx=7 '+ (A% * B%) '
     (check_literal) check_literal:After drop space:',' idx=7 '+ (A% * B%) '
     (check_literal)   ',' != '+'
     (check_literal) check_literal: ret0
    (check_operator) check_operator: ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: ' (A% * B%) '

    (check_operator) check_operator:  (A% * B%) 

     (check_literal) check_literal:lit=',' idx=9 '(A% * B%) '
     (check_literal) check_literal:After drop space:',' idx=9 '(A% * B%) '
     (check_literal)   ',' != '('
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: '(A% * B%) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=8 ' (A% * B%) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=9 '(A% * B%) '
     (check_literal)   '%' != '('
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=8 ' (A% * B%) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=9 '(A% * B%) '
     (check_literal)   '"' != '('
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '(A% * B%) '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname '(A% * B%) ':
      (check_vname) check_vname ret0 '(A% * B%) ':
     (check_variable) check_variable:ret0 
    (check_atom) check_atom:ret1

    (check_sub_expr) check_sub_expr:

     (check_literal) check_literal:lit=' (' idx=8 ' (A% * B%) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'(' idx=9 '(A% * B%) '
     (check_literal) check_literal:After while():A% * B%) 
     (check_literal) check_literal:ret1 
    (check_sub_expr) check_sub_expr: ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: 'A% * B%) '

    (check_operator) check_operator: A% * B%) 

     (check_literal) check_literal:lit=',' idx=10 'A% * B%) '
     (check_literal) check_literal:After drop space:',' idx=10 'A% * B%) '
     (check_literal)   ',' != 'A'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: 'A% * B%) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=10 'A% * B%) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=10 'A% * B%) '
     (check_literal)   '%' != 'A'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=10 'A% * B%) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=10 'A% * B%) '
     (check_literal)   '"' != 'A'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'A% * B%) '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'A% * B%) ':
      (check_vname) check_vname ret1 '% * B%) ':
     (check_variable) check_variable: '% * B%) '
     (check_variable) check_variable: Ary test ' * B%) '

      (check_literal) check_literal:lit='(' idx=12 ' * B%) '
      (check_literal) check_literal:After drop space:'(' idx=12 ' * B%) '
      (check_literal)   '(' != ' '
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (check_eitem) check_eitem: ' * B%) '

   (check_operator) check_operator:  * B%) 

    (check_literal) check_literal:lit=',' idx=13 '* B%) '
    (check_literal) check_literal:After drop space:',' idx=13 '* B%) '
    (check_literal)   ',' != '*'
    (check_literal) check_literal: ret0
   (check_operator) check_operator: ret1
  (check_eitem) check_eitem:ret1

  (check_eitem) check_eitem: ' B%) '

   (check_operator) check_operator:  B%) 

    (check_literal) check_literal:lit=',' idx=15 'B%) '
    (check_literal) check_literal:After drop space:',' idx=15 'B%) '
    (check_literal)   ',' != 'B'
    (check_literal) check_literal: ret0
   (check_operator) check_operator:ret0

   (check_function) check_function: 'B%) '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=14 ' B%) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=15 'B%) '
    (check_literal)   '%' != 'B'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=14 ' B%) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=15 'B%) '
    (check_literal)   '"' != 'B'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'B%) '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'B%) ':
     (check_vname) check_vname ret1 '%) ':
    (check_variable) check_variable: '%) '
    (check_variable) check_variable: Ary test ') '

     (check_literal) check_literal:lit='(' idx=17 ') '
     (check_literal) check_literal:After drop space:'(' idx=17 ') '
     (check_literal)   '(' != ')'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1
 (check_eitem) check_eitem:ret1

 (check_eitem) check_eitem: ') '

  (check_operator) check_operator: ) 

   (check_literal) check_literal:lit=',' idx=17 ') '
   (check_literal) check_literal:After drop space:',' idx=17 ') '
   (check_literal)   ',' != ')'
   (check_literal) check_literal: ret0
  (check_operator) check_operator:ret0

  (check_function) check_function: ') '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=17 ') '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=17 ') '
   (check_literal)   '%' != ')'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=17 ') '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=17 ') '
   (check_literal)   '"' != ')'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: ') '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname ') ':
    (check_vname) check_vname ret0 ') ':
   (check_variable) check_variable:ret0 
  (check_atom) check_atom:ret1

  (check_sub_expr) check_sub_expr:

   (check_literal) check_literal:lit=' (' idx=17 ') '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'(' idx=17 ') '
   (check_literal)   '(' != ')'
   (check_literal) check_literal: ret0
  (check_sub_expr) check_sub_expr: ret0
 (check_eitem) check_eitem:ret0
(check_expression) check_expression:ret1 ') '
(check_assignment) check_assignment:ret1

 (scan_assignment) scan_assignment:

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'A% = 2 + (A% * B%) '
   (scan_vname) scan_vname: ret1 'A'
  (scan_variable) scan_variable: '% = 2 + (A% * B%) ' vname='A'
  (scan_variable) scan_variable: Ary test ' = 2 + (A% * B%) '

   (check_literal) check_literal:lit='(' idx=2 ' = 2 + (A% * B%) '
   (check_literal) check_literal:After drop space:'(' idx=2 ' = 2 + (A% * B%) '
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='A%' is str:0 int:1 flt:0 ary:0
   Frst:1 T:'A%' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:A% is not function
token_is_variable: tok:'A%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:A% is not function
 (init_get_name) 
init_get_name:'A%'
 (init_get_name) 
init_get_name:'A%'
 (get_name) 
get_name:gn:'A%'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] i i A%
 (print_var_info) 
VAR INFO: '                A%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0

  (scan_literal) scan_literal:lit=' =' ' = 2 + (A% * B%) '
  (scan_literal) scan_literal:After drop space:= 2 + (A% * B%) 
  (scan_literal) scan_literal:while loop:= 2 + (A% * B%) 
   Frst:0 T:'=' exptype:i
  (operator_precedence) 
= is operator
'=' is operator
  (process_token) 
Token is operator o1 name:= o2 name:
  (process_token) 
opr1:1 opr2:0
Push 1
 Push:'='
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (1)

  (op_stack_print) 
000: = type:0
  (op_stack_print) 
------------------

  (scan_literal) scan_literal:ret1

  (scan_expression) scan_expression: ' 2 + (A% * B%) '

   (check_eitem) check_eitem: '2 + (A% * B%) '

    (check_operator) check_operator: 2 + (A% * B%) 

     (check_literal) check_literal:lit=',' idx=5 '2 + (A% * B%) '
     (check_literal) check_literal:After drop space:',' idx=5 '2 + (A% * B%) '
     (check_literal)   ',' != '2'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: '2 + (A% * B%) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=5 '2 + (A% * B%) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=5 '2 + (A% * B%) '
     (check_literal)   '%' != '2'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=5 '2 + (A% * B%) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=5 '2 + (A% * B%) '
     (check_literal)   '"' != '2'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '2 + (A% * B%) '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (scan_eitem) scan_eitem:

    (check_operator) check_operator: 2 + (A% * B%) 

     (check_literal) check_literal:lit=',' idx=5 '2 + (A% * B%) '
     (check_literal) check_literal:After drop space:',' idx=5 '2 + (A% * B%) '
     (check_literal)   ',' != '2'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: '2 + (A% * B%) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=5 '2 + (A% * B%) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=5 '2 + (A% * B%) '
     (check_literal)   '%' != '2'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=5 '2 + (A% * B%) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=5 '2 + (A% * B%) '
     (check_literal)   '"' != '2'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '2 + (A% * B%) '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1

    (scan_atom) scan_atom:

     (check_literal) check_literal:lit=' %' idx=5 '2 + (A% * B%) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=5 '2 + (A% * B%) '
     (check_literal)   '%' != '2'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=5 '2 + (A% * B%) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=5 '2 + (A% * B%) '
     (check_literal)   '"' != '2'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '2 + (A% * B%) '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1

     (scan_number) scan_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '2 + (A% * B%) '
      (check_integer) check_integer:ret1

      (scan_integer) scan_integer:
      (scan_integer) scan_integer:ret1
   Frst:0 T:'2' exptype:i
     (operator_precedence) 
= is operator
modify_expression_type:Inittype:i Intype:i Outtype:i
(  output_integer) [i,()] i i 2
     (scan_integer) scan_integer:ret1  2
    (scan_atom) scan_atom:ret1

    (check_eitem) check_eitem: ' + (A% * B%) '

     (check_operator) check_operator:  + (A% * B%) 

      (check_literal) check_literal:lit=',' idx=7 '+ (A% * B%) '
      (check_literal) check_literal:After drop space:',' idx=7 '+ (A% * B%) '
      (check_literal)   ',' != '+'
      (check_literal) check_literal: ret0
     (check_operator) check_operator: ret1
    (check_eitem) check_eitem:ret1

    (scan_eitem) scan_eitem:

     (check_operator) check_operator:  + (A% * B%) 

      (check_literal) check_literal:lit=',' idx=7 '+ (A% * B%) '
      (check_literal) check_literal:After drop space:',' idx=7 '+ (A% * B%) '
      (check_literal)   ',' != '+'
      (check_literal) check_literal: ret0
     (check_operator) check_operator: ret1

     (scan_operator) scan_operator: ' + (A% * B%) '

      (check_literal) check_literal:lit=',' idx=7 '+ (A% * B%) '
      (check_literal) check_literal:After drop space:',' idx=7 '+ (A% * B%) '
      (check_literal)   ',' != '+'
      (check_literal) check_literal: ret0
     (scan_operator) scan_operator: ret1 ' (A% * B%) '
   Frst:0 T:'+' exptype:i
    (operator_precedence) 
+ is operator
    (operator_precedence) 
= is operator
'+' is operator
    (process_token) 
Token is operator o1 name:+ o2 name:=
    (process_token) 
opr1:3 opr2:1
    (operator_precedence) 
= is operator
    (operator_precedence) 
= is operator
Push 1
 Push:'+'
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (2)

    (op_stack_print) 
000: = type:0
    (op_stack_print) 
001: + type:0
    (op_stack_print) 
------------------


     (check_eitem) check_eitem: ' (A% * B%) '

      (check_operator) check_operator:  (A% * B%) 

       (check_literal) check_literal:lit=',' idx=9 '(A% * B%) '
       (check_literal) check_literal:After drop space:',' idx=9 '(A% * B%) '
       (check_literal)   ',' != '('
       (check_literal) check_literal: ret0
      (check_operator) check_operator:ret0

      (check_function) check_function: '(A% * B%) '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=8 ' (A% * B%) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=9 '(A% * B%) '
       (check_literal)   '%' != '('
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=8 ' (A% * B%) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=9 '(A% * B%) '
       (check_literal)   '"' != '('
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '(A% * B%) '
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname '(A% * B%) ':
        (check_vname) check_vname ret0 '(A% * B%) ':
       (check_variable) check_variable:ret0 
      (check_atom) check_atom:ret1

      (check_sub_expr) check_sub_expr:

       (check_literal) check_literal:lit=' (' idx=8 ' (A% * B%) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'(' idx=9 '(A% * B%) '
       (check_literal) check_literal:After while():A% * B%) 
       (check_literal) check_literal:ret1 
      (check_sub_expr) check_sub_expr: ret1
     (check_eitem) check_eitem:ret1

     (scan_eitem) scan_eitem:

      (check_operator) check_operator:  (A% * B%) 

       (check_literal) check_literal:lit=',' idx=9 '(A% * B%) '
       (check_literal) check_literal:After drop space:',' idx=9 '(A% * B%) '
       (check_literal)   ',' != '('
       (check_literal) check_literal: ret0
      (check_operator) check_operator:ret0

      (check_function) check_function: '(A% * B%) '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=8 ' (A% * B%) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=9 '(A% * B%) '
       (check_literal)   '%' != '('
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=8 ' (A% * B%) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=9 '(A% * B%) '
       (check_literal)   '"' != '('
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '(A% * B%) '
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname '(A% * B%) ':
        (check_vname) check_vname ret0 '(A% * B%) ':
       (check_variable) check_variable:ret0 
      (check_atom) check_atom:ret1

      (check_sub_expr) check_sub_expr:

       (check_literal) check_literal:lit=' (' idx=8 ' (A% * B%) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'(' idx=9 '(A% * B%) '
       (check_literal) check_literal:After while():A% * B%) 
       (check_literal) check_literal:ret1 
      (check_sub_expr) check_sub_expr: ret1

      (scan_sub_expr) scan_sub_expr:

       (scan_literal) scan_literal:lit=' (' ' (A% * B%) '
       (scan_literal) scan_literal:After drop space:(A% * B%) 
       (scan_literal) scan_literal:while loop:(A% * B%) 
   Frst:0 T:'(' exptype:i
       (operator_precedence) 
+ is operator
(output_sub_start)
 Push:'('
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (3)

       (op_stack_print) 
000: = type:0
       (op_stack_print) 
001: + type:0
       (op_stack_print) 
002: ( type:16
       (op_stack_print) 
------------------

       (scan_literal) scan_literal:ret1
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (4)

      (op_stack_print) 
000: = type:0
      (op_stack_print) 
001: + type:0
      (op_stack_print) 
002: ( type:16
      (op_stack_print) 
003: ( type:16
      (op_stack_print) 
------------------


       (scan_expression) scan_expression: 'A% * B%) '

        (check_eitem) check_eitem: 'A% * B%) '

         (check_operator) check_operator: A% * B%) 

          (check_literal) check_literal:lit=',' idx=10 'A% * B%) '
          (check_literal) check_literal:After drop space:',' idx=10 'A% * B%) '
          (check_literal)   ',' != 'A'
          (check_literal) check_literal: ret0
         (check_operator) check_operator:ret0

         (check_function) check_function: 'A% * B%) '
         (check_function) check_function: ret0

         (check_atom) check_atom:

          (check_literal) check_literal:lit=' %' idx=10 'A% * B%) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=10 'A% * B%) '
          (check_literal)   '%' != 'A'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=10 'A% * B%) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=10 'A% * B%) '
          (check_literal)   '"' != 'A'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: 'A% * B%) '
           (check_integer) check_integer:ret0
          (check_number) check_number: ret0

          (check_variable) check_variable:

           (check_vname) check_vname 'A% * B%) ':
           (check_vname) check_vname ret1 '% * B%) ':
          (check_variable) check_variable: '% * B%) '
          (check_variable) check_variable: Ary test ' * B%) '

           (check_literal) check_literal:lit='(' idx=12 ' * B%) '
           (check_literal) check_literal:After drop space:'(' idx=12 ' * B%) '
           (check_literal)   '(' != ' '
           (check_literal) check_literal: ret0
          (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
         (check_variable) check_variable:ret1 
        (check_atom) check_atom:ret1
       (check_eitem) check_eitem:ret1

       (scan_eitem) scan_eitem:

        (check_operator) check_operator: A% * B%) 

         (check_literal) check_literal:lit=',' idx=10 'A% * B%) '
         (check_literal) check_literal:After drop space:',' idx=10 'A% * B%) '
         (check_literal)   ',' != 'A'
         (check_literal) check_literal: ret0
        (check_operator) check_operator:ret0

        (check_function) check_function: 'A% * B%) '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=10 'A% * B%) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=10 'A% * B%) '
         (check_literal)   '%' != 'A'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=10 'A% * B%) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=10 'A% * B%) '
         (check_literal)   '"' != 'A'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: 'A% * B%) '
          (check_integer) check_integer:ret0
         (check_number) check_number: ret0

         (check_variable) check_variable:

          (check_vname) check_vname 'A% * B%) ':
          (check_vname) check_vname ret1 '% * B%) ':
         (check_variable) check_variable: '% * B%) '
         (check_variable) check_variable: Ary test ' * B%) '

          (check_literal) check_literal:lit='(' idx=12 ' * B%) '
          (check_literal) check_literal:After drop space:'(' idx=12 ' * B%) '
          (check_literal)   '(' != ' '
          (check_literal) check_literal: ret0
         (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
        (check_variable) check_variable:ret1 
       (check_atom) check_atom:ret1

       (scan_atom) scan_atom:

        (check_literal) check_literal:lit=' %' idx=10 'A% * B%) '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'%' idx=10 'A% * B%) '
        (check_literal)   '%' != 'A'
        (check_literal) check_literal: ret0

        (check_literal) check_literal:lit=' "' idx=10 'A% * B%) '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'"' idx=10 'A% * B%) '
        (check_literal)   '"' != 'A'
        (check_literal) check_literal: ret0

        (check_number) check_number:

         (check_float) check_float:
         (isfloatdigit) isfloatdigit:
         (check_float) check_float: ret0

         (check_integer) check_integer: 'A% * B%) '
         (check_integer) check_integer:ret0
        (check_number) check_number: ret0

        (check_variable) check_variable:

         (check_vname) check_vname 'A% * B%) ':
         (check_vname) check_vname ret1 '% * B%) ':
        (check_variable) check_variable: '% * B%) '
        (check_variable) check_variable: Ary test ' * B%) '

         (check_literal) check_literal:lit='(' idx=12 ' * B%) '
         (check_literal) check_literal:After drop space:'(' idx=12 ' * B%) '
         (check_literal)   '(' != ' '
         (check_literal) check_literal: ret0
        (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
       (check_variable) check_variable:ret1 

       (scan_variable) scan_variable:

        (scan_vname) scan_vname: 'A% * B%) '
        (scan_vname) scan_vname: ret1 'A'
       (scan_variable) scan_variable: '% * B%) ' vname='A'
       (scan_variable) scan_variable: Ary test ' * B%) '

        (check_literal) check_literal:lit='(' idx=12 ' * B%) '
        (check_literal) check_literal:After drop space:'(' idx=12 ' * B%) '
        (check_literal)   '(' != ' '
        (check_literal) check_literal: ret0
       (scan_variable) scan_variable:ret1 vname='A%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'A%' exptype:U
      (token_is_function) 
token_is_function:
      (token_is_function) 
token_is_function:A% is not function
token_is_variable: tok:'A%'
      (token_is_function) 
token_is_function:
      (token_is_function) 
token_is_function:A% is not function
      (init_get_name) 
init_get_name:'A%'
      (init_get_name) 
init_get_name:'A%'
      (get_name) 
get_name:gn:'A%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,(i U )] i i A%
      (print_var_info) 
VAR INFO: '                A%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
      (scan_atom) scan_atom:ret1

      (check_eitem) check_eitem: ' * B%) '

       (check_operator) check_operator:  * B%) 

        (check_literal) check_literal:lit=',' idx=13 '* B%) '
        (check_literal) check_literal:After drop space:',' idx=13 '* B%) '
        (check_literal)   ',' != '*'
        (check_literal) check_literal: ret0
       (check_operator) check_operator: ret1
      (check_eitem) check_eitem:ret1

      (scan_eitem) scan_eitem:

       (check_operator) check_operator:  * B%) 

        (check_literal) check_literal:lit=',' idx=13 '* B%) '
        (check_literal) check_literal:After drop space:',' idx=13 '* B%) '
        (check_literal)   ',' != '*'
        (check_literal) check_literal: ret0
       (check_operator) check_operator: ret1

       (scan_operator) scan_operator: ' * B%) '

        (check_literal) check_literal:lit=',' idx=13 '* B%) '
        (check_literal) check_literal:After drop space:',' idx=13 '* B%) '
        (check_literal)   ',' != '*'
        (check_literal) check_literal: ret0
       (scan_operator) scan_operator: ret1 ' B%) '
   Frst:0 T:'*' exptype:i
      (operator_precedence) 
* is operator
'*' is operator
      (process_token) 
Token is operator o1 name:* o2 name:(
      (process_token) 
opr1:5 opr2:0
Push 1
 Push:'*'
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (5)

      (op_stack_print) 
000: = type:0
      (op_stack_print) 
001: + type:0
      (op_stack_print) 
002: ( type:16
      (op_stack_print) 
003: ( type:16
      (op_stack_print) 
004: * type:0
      (op_stack_print) 
------------------


       (check_eitem) check_eitem: ' B%) '

        (check_operator) check_operator:  B%) 

         (check_literal) check_literal:lit=',' idx=15 'B%) '
         (check_literal) check_literal:After drop space:',' idx=15 'B%) '
         (check_literal)   ',' != 'B'
         (check_literal) check_literal: ret0
        (check_operator) check_operator:ret0

        (check_function) check_function: 'B%) '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=14 ' B%) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=15 'B%) '
         (check_literal)   '%' != 'B'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=14 ' B%) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=15 'B%) '
         (check_literal)   '"' != 'B'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: 'B%) '
          (check_integer) check_integer:ret0
         (check_number) check_number: ret0

         (check_variable) check_variable:

          (check_vname) check_vname 'B%) ':
          (check_vname) check_vname ret1 '%) ':
         (check_variable) check_variable: '%) '
         (check_variable) check_variable: Ary test ') '

          (check_literal) check_literal:lit='(' idx=17 ') '
          (check_literal) check_literal:After drop space:'(' idx=17 ') '
          (check_literal)   '(' != ')'
          (check_literal) check_literal: ret0
         (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
        (check_variable) check_variable:ret1 
       (check_atom) check_atom:ret1
      (check_eitem) check_eitem:ret1

      (scan_eitem) scan_eitem:

       (check_operator) check_operator:  B%) 

        (check_literal) check_literal:lit=',' idx=15 'B%) '
        (check_literal) check_literal:After drop space:',' idx=15 'B%) '
        (check_literal)   ',' != 'B'
        (check_literal) check_literal: ret0
       (check_operator) check_operator:ret0

       (check_function) check_function: 'B%) '
       (check_function) check_function: ret0

       (check_atom) check_atom:

        (check_literal) check_literal:lit=' %' idx=14 ' B%) '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'%' idx=15 'B%) '
        (check_literal)   '%' != 'B'
        (check_literal) check_literal: ret0

        (check_literal) check_literal:lit=' "' idx=14 ' B%) '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'"' idx=15 'B%) '
        (check_literal)   '"' != 'B'
        (check_literal) check_literal: ret0

        (check_number) check_number:

         (check_float) check_float:
         (isfloatdigit) isfloatdigit:
         (check_float) check_float: ret0

         (check_integer) check_integer: 'B%) '
         (check_integer) check_integer:ret0
        (check_number) check_number: ret0

        (check_variable) check_variable:

         (check_vname) check_vname 'B%) ':
         (check_vname) check_vname ret1 '%) ':
        (check_variable) check_variable: '%) '
        (check_variable) check_variable: Ary test ') '

         (check_literal) check_literal:lit='(' idx=17 ') '
         (check_literal) check_literal:After drop space:'(' idx=17 ') '
         (check_literal)   '(' != ')'
         (check_literal) check_literal: ret0
        (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
       (check_variable) check_variable:ret1 
      (check_atom) check_atom:ret1

      (scan_atom) scan_atom:

       (check_literal) check_literal:lit=' %' idx=14 ' B%) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=15 'B%) '
       (check_literal)   '%' != 'B'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=14 ' B%) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=15 'B%) '
       (check_literal)   '"' != 'B'
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: 'B%) '
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname 'B%) ':
        (check_vname) check_vname ret1 '%) ':
       (check_variable) check_variable: '%) '
       (check_variable) check_variable: Ary test ') '

        (check_literal) check_literal:lit='(' idx=17 ') '
        (check_literal) check_literal:After drop space:'(' idx=17 ') '
        (check_literal)   '(' != ')'
        (check_literal) check_literal: ret0
       (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
      (check_variable) check_variable:ret1 

      (scan_variable) scan_variable:

       (scan_vname) scan_vname: ' B%) '
       (scan_vname) scan_vname: ret1 'B'
      (scan_variable) scan_variable: '%) ' vname='B'
      (scan_variable) scan_variable: Ary test ') '

       (check_literal) check_literal:lit='(' idx=17 ') '
       (check_literal) check_literal:After drop space:'(' idx=17 ') '
       (check_literal)   '(' != ')'
       (check_literal) check_literal: ret0
      (scan_variable) scan_variable:ret1 vname='B%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'B%' exptype:i
     (operator_precedence) 
* is operator
     (token_is_function) 
token_is_function:
     (token_is_function) 
token_is_function:B% is not function
token_is_variable: tok:'B%'
     (token_is_function) 
token_is_function:
     (token_is_function) 
token_is_function:B% is not function
     (init_get_name) 
init_get_name:'B%'
     (init_get_name) 
init_get_name:'B%'
     (get_name) 
get_name:gn:'B%'
process_token:type:i req_type:i
modify_expression_type:Inittype:i Intype:i Outtype:i
( output_variable) [i,(i U )] i i B%
     (print_var_info) 
VAR INFO: '                B%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
     (scan_atom) scan_atom:ret1

     (check_eitem) check_eitem: ') '

      (check_operator) check_operator: ) 

       (check_literal) check_literal:lit=',' idx=17 ') '
       (check_literal) check_literal:After drop space:',' idx=17 ') '
       (check_literal)   ',' != ')'
       (check_literal) check_literal: ret0
      (check_operator) check_operator:ret0

      (check_function) check_function: ') '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=17 ') '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=17 ') '
       (check_literal)   '%' != ')'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=17 ') '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=17 ') '
       (check_literal)   '"' != ')'
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: ') '
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname ') ':
        (check_vname) check_vname ret0 ') ':
       (check_variable) check_variable:ret0 
      (check_atom) check_atom:ret1

      (check_sub_expr) check_sub_expr:

       (check_literal) check_literal:lit=' (' idx=17 ') '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'(' idx=17 ') '
       (check_literal)   '(' != ')'
       (check_literal) check_literal: ret0
      (check_sub_expr) check_sub_expr: ret0
     (check_eitem) check_eitem:ret0
    (scan_expression) scan_expression: ret1 ') '

    (scan_literal) scan_literal:lit=' )' ') '
    (scan_literal) scan_literal:After drop space:) 
    (scan_literal) scan_literal:while loop:) 
   Frst:0 T:')' exptype:i
    (operator_precedence) 
* is operator
    (process_token) 
Pop 3
Pop '*'
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (4)

    (op_stack_print) 
000: = type:0
    (op_stack_print) 
001: + type:0
    (op_stack_print) 
002: ( type:16
    (op_stack_print) 
003: ( type:16
    (op_stack_print) 
------------------

( output_operator) [i,(i U )] i i *
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:* is not function
Pop 4
Pop '('
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (3)

    (op_stack_print) 
000: = type:0
    (op_stack_print) 
001: + type:0
    (op_stack_print) 
002: ( type:16
    (op_stack_print) 
------------------

(  output_sub_end)
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:( is not function
(  output_sub_end)
    (scan_literal) scan_literal:ret1
   Frst:0 T:')' exptype:U
Pop 4
Pop '('
   (op_stack_print) 
------------------
   (op_stack_print) 
Operator Stack     (2)

   (op_stack_print) 
000: = type:0
   (op_stack_print) 
001: + type:0
   (op_stack_print) 
------------------

(  output_sub_end)
   (token_is_function) 
token_is_function:
   (token_is_function) 
token_is_function:+ is not function
(  output_sub_end)
   (scan_sub_expr) scan_sub_expr:ret1

   (check_eitem) check_eitem: ' '

    (check_operator) check_operator:  

     (check_literal) check_literal:lit=',' idx=19 ''
     (check_literal) check_literal:After drop space:',' idx=19 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_operator) check_operator:ret0

    (check_function) check_function: ''
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=18 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=19 ''
     (check_literal) check_literal  ret0 Empty test string

     (check_literal) check_literal:lit=' "' idx=18 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=19 ''
     (check_literal) check_literal  ret0 Empty test string

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: ''
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname '':
      (check_vname) check_vname ret0 '':
     (check_variable) check_variable:ret0 
    (check_atom) check_atom:ret1

    (check_sub_expr) check_sub_expr:

     (check_literal) check_literal:lit=' (' idx=18 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'(' idx=19 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_sub_expr) check_sub_expr: ret0
   (check_eitem) check_eitem:ret0
  (scan_expression) scan_expression: ret1 ' '
 (scan_assignment) scan_assignment: ret1
Finalise stack
Pop '+'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: = type:0
(op_stack_print) 
------------------

( output_operator) [i,()] i i +
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:+ is not function
Pop '='
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_operator) [i,()] i i =
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:= is not function
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'A%'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'A%'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'B%'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '*'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '+'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '='  0:
=================
 BE:A%
type_check_stack_push: 'A%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'A%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'A%' type:i (0)
 BE:2
type_check_stack_push: '2'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'A%' type:0
(type_check_stack_print) 
001: '2' type:0
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'A%' type:i (0)
001: '2' type:i (0)
 BE:

Type Check Stack (2)

000: 'A%' type:i (0)
001: '2' type:i (0)
 BE:

Type Check Stack (2)

000: 'A%' type:i (0)
001: '2' type:i (0)
 BE:A%
type_check_stack_push: 'A%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (3)

(type_check_stack_print) 
000: 'A%' type:0
(type_check_stack_print) 
001: '2' type:0
(type_check_stack_print) 
002: 'A%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (3)

000: 'A%' type:i (0)
001: '2' type:i (0)
002: 'A%' type:i (0)
 BE:B%
type_check_stack_push: 'B%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (4)

(type_check_stack_print) 
000: 'A%' type:0
(type_check_stack_print) 
001: '2' type:0
(type_check_stack_print) 
002: 'A%' type:0
(type_check_stack_print) 
003: 'B%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (4)

000: 'A%' type:i (0)
001: '2' type:i (0)
002: 'A%' type:i (0)
003: 'B%' type:i (0)
 BE:*
BUFF_ID_OPERATOR
Found operator *
type_check_stack_pop: 'B%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (3)

(type_check_stack_print) 
000: 'A%' type:0
(type_check_stack_print) 
001: '2' type:0
(type_check_stack_print) 
002: 'A%' type:0
(type_check_stack_print) 
------------------

type_check_stack_pop: 'A%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'A%' type:0
(type_check_stack_print) 
001: '2' type:0
(type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (3)

(type_check_stack_print) 
000: 'A%' type:0
(type_check_stack_print) 
001: '2' type:0
(type_check_stack_print) 
002: '000' type:0
(type_check_stack_print) 
------------------


Type Check Stack (3)

000: 'A%' type:i (0)
001: '2' type:i (0)
002: '000' type:i (0)
 BE:

Type Check Stack (3)

000: 'A%' type:i (0)
001: '2' type:i (0)
002: '000' type:i (0)
 BE:

Type Check Stack (3)

000: 'A%' type:i (0)
001: '2' type:i (0)
002: '000' type:i (0)
 BE:

Type Check Stack (3)

000: 'A%' type:i (0)
001: '2' type:i (0)
002: '000' type:i (0)
 BE:

Type Check Stack (3)

000: 'A%' type:i (0)
001: '2' type:i (0)
002: '000' type:i (0)
 BE:+
BUFF_ID_OPERATOR
Found operator +
type_check_stack_pop: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'A%' type:0
(type_check_stack_print) 
001: '2' type:0
(type_check_stack_print) 
------------------

type_check_stack_pop: '2'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'A%' type:0
(type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'A%' type:0
(type_check_stack_print) 
001: '000' type:0
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'A%' type:i (0)
001: '000' type:i (0)
 BE::=
BUFF_ID_OPERATOR
Found operator :=
type_check_stack_pop: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'A%' type:0
(type_check_stack_print) 
------------------

type_check_stack_pop: 'A%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (0)

(type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'A%'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'A%'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'B%'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '*'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '+'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i ':='  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i 'A%'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_VARIABLE     i rq:i 'A%'  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_VARIABLE     i rq:i 'B%'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 6 5
(dump_exp_buffer2) N8 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N12 EXP_BUFF_ID_OPERATOR     i rq:i '+'  2: 7 2
(dump_exp_buffer2) N13 EXP_BUFF_ID_OPERATOR     i rq:i ':='  2: 12 1
=================
(process_expression_types) 
==INFIX==

Var: A% ary:0
infix_stack_push: 'A%'
infix_stack_push: '2'
Var: A% ary:0
infix_stack_push: 'A%'
Var: B% ary:0
infix_stack_push: 'B%'
infix_stack_pop: 'B%'
infix_stack_pop: 'A%'
infix_stack_push: '(A% * B%)'
infix_stack_pop: '(A% * B%)'
infix_stack_pop: '2'
infix_stack_push: '(2 + (A% * B%))'
infix_stack_pop: '(2 + (A% * B%))'
infix_stack_pop: 'A%'
infix_stack_push: '(A% := (2 + (A% * B%)))'
infix_stack_pop: '(A% := (2 + (A% * B%)))'
(process_expression_types) ==(A% := (2 + (A% * B%)))==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i A%  0:
(    output_qcode) N2 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_START    U rq:?   0:
(    output_qcode) N4 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N5 EXP_BUFF_ID_VARIABLE     i rq:i A%  0:
(    output_qcode) N6 EXP_BUFF_ID_VARIABLE     i rq:i B%  0:
(    output_qcode) N7 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 6 5
(    output_qcode) N8 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N9 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N10 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N11 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N12 EXP_BUFF_ID_OPERATOR     i rq:i +  2: 7 2
(    output_qcode) N13 EXP_BUFF_ID_OPERATOR     i rq:i :=  2: 12 1

 (check_literal) check_literal:lit=':' idx=19 ''
 (check_literal) check_literal:After drop space:':' idx=19 ''
 (check_literal) check_literal  ret0 Empty test string
(translate_file) 
cline scanned OK
************************************
**A = A% + (2*3+3*Z%-   ABC%*1.1) **
************************************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'A = A% + (2*3+3*Z%-   ABC%*1.1) ':
     (check_vname) check_vname ret1 ' = A% + (2*3+3*Z%-   ABC%*1.1) ':
    (check_variable) check_variable: ' = A% + (2*3+3*Z%-   ABC%*1.1) '
    (check_variable) check_variable: Ary test ' = A% + (2*3+3*Z%-   ABC%*1.1) '

     (check_literal) check_literal:lit='(' idx=1 ' = A% + (2*3+3*Z%-   ABC%*1.1) '
     (check_literal) check_literal:After drop space:'(' idx=1 ' = A% + (2*3+3*Z%-   ABC%*1.1) '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=1 ' = A% + (2*3+3*Z%-   ABC%*1.1) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=2 '= A% + (2*3+3*Z%-   ABC%*1.1) '
   (check_literal) check_literal:After while(): A% + (2*3+3*Z%-   ABC%*1.1) 
   (check_literal) check_literal:ret1 

   (check_expression) check_expression: 'A% + (2*3+3*Z%-   ABC%*1.1) '

    (check_eitem) check_eitem: 'A% + (2*3+3*Z%-   ABC%*1.1) '

     (check_operator) check_operator: A% + (2*3+3*Z%-   ABC%*1.1) 

      (check_literal) check_literal:lit=',' idx=4 'A% + (2*3+3*Z%-   ABC%*1.1) '
      (check_literal) check_literal:After drop space:',' idx=4 'A% + (2*3+3*Z%-   ABC%*1.1) '
      (check_literal)   ',' != 'A'
      (check_literal) check_literal: ret0
     (check_operator) check_operator:ret0

     (check_function) check_function: 'A% + (2*3+3*Z%-   ABC%*1.1) '
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=4 'A% + (2*3+3*Z%-   ABC%*1.1) '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=4 'A% + (2*3+3*Z%-   ABC%*1.1) '
      (check_literal)   '%' != 'A'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=4 'A% + (2*3+3*Z%-   ABC%*1.1) '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=4 'A% + (2*3+3*Z%-   ABC%*1.1) '
      (check_literal)   '"' != 'A'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: 'A% + (2*3+3*Z%-   ABC%*1.1) '
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname 'A% + (2*3+3*Z%-   ABC%*1.1) ':
       (check_vname) check_vname ret1 '% + (2*3+3*Z%-   ABC%*1.1) ':
      (check_variable) check_variable: '% + (2*3+3*Z%-   ABC%*1.1) '
      (check_variable) check_variable: Ary test ' + (2*3+3*Z%-   ABC%*1.1) '

       (check_literal) check_literal:lit='(' idx=6 ' + (2*3+3*Z%-   ABC%*1.1) '
       (check_literal) check_literal:After drop space:'(' idx=6 ' + (2*3+3*Z%-   ABC%*1.1) '
       (check_literal)   '(' != ' '
       (check_literal) check_literal: ret0
      (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
     (check_variable) check_variable:ret1 
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: ' + (2*3+3*Z%-   ABC%*1.1) '

    (check_operator) check_operator:  + (2*3+3*Z%-   ABC%*1.1) 

     (check_literal) check_literal:lit=',' idx=7 '+ (2*3+3*Z%-   ABC%*1.1) '
     (check_literal) check_literal:After drop space:',' idx=7 '+ (2*3+3*Z%-   ABC%*1.1) '
     (check_literal)   ',' != '+'
     (check_literal) check_literal: ret0
    (check_operator) check_operator: ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: ' (2*3+3*Z%-   ABC%*1.1) '

    (check_operator) check_operator:  (2*3+3*Z%-   ABC%*1.1) 

     (check_literal) check_literal:lit=',' idx=9 '(2*3+3*Z%-   ABC%*1.1) '
     (check_literal) check_literal:After drop space:',' idx=9 '(2*3+3*Z%-   ABC%*1.1) '
     (check_literal)   ',' != '('
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: '(2*3+3*Z%-   ABC%*1.1) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=8 ' (2*3+3*Z%-   ABC%*1.1) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=9 '(2*3+3*Z%-   ABC%*1.1) '
     (check_literal)   '%' != '('
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=8 ' (2*3+3*Z%-   ABC%*1.1) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=9 '(2*3+3*Z%-   ABC%*1.1) '
     (check_literal)   '"' != '('
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '(2*3+3*Z%-   ABC%*1.1) '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname '(2*3+3*Z%-   ABC%*1.1) ':
      (check_vname) check_vname ret0 '(2*3+3*Z%-   ABC%*1.1) ':
     (check_variable) check_variable:ret0 
    (check_atom) check_atom:ret1

    (check_sub_expr) check_sub_expr:

     (check_literal) check_literal:lit=' (' idx=8 ' (2*3+3*Z%-   ABC%*1.1) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'(' idx=9 '(2*3+3*Z%-   ABC%*1.1) '
     (check_literal) check_literal:After while():2*3+3*Z%-   ABC%*1.1) 
     (check_literal) check_literal:ret1 
    (check_sub_expr) check_sub_expr: ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: '2*3+3*Z%-   ABC%*1.1) '

    (check_operator) check_operator: 2*3+3*Z%-   ABC%*1.1) 

     (check_literal) check_literal:lit=',' idx=10 '2*3+3*Z%-   ABC%*1.1) '
     (check_literal) check_literal:After drop space:',' idx=10 '2*3+3*Z%-   ABC%*1.1) '
     (check_literal)   ',' != '2'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: '2*3+3*Z%-   ABC%*1.1) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=10 '2*3+3*Z%-   ABC%*1.1) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=10 '2*3+3*Z%-   ABC%*1.1) '
     (check_literal)   '%' != '2'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=10 '2*3+3*Z%-   ABC%*1.1) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=10 '2*3+3*Z%-   ABC%*1.1) '
     (check_literal)   '"' != '2'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '2*3+3*Z%-   ABC%*1.1) '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: '*3+3*Z%-   ABC%*1.1) '

    (check_operator) check_operator: *3+3*Z%-   ABC%*1.1) 

     (check_literal) check_literal:lit=',' idx=11 '*3+3*Z%-   ABC%*1.1) '
     (check_literal) check_literal:After drop space:',' idx=11 '*3+3*Z%-   ABC%*1.1) '
     (check_literal)   ',' != '*'
     (check_literal) check_literal: ret0
    (check_operator) check_operator: ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: '3+3*Z%-   ABC%*1.1) '

    (check_operator) check_operator: 3+3*Z%-   ABC%*1.1) 

     (check_literal) check_literal:lit=',' idx=12 '3+3*Z%-   ABC%*1.1) '
     (check_literal) check_literal:After drop space:',' idx=12 '3+3*Z%-   ABC%*1.1) '
     (check_literal)   ',' != '3'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: '3+3*Z%-   ABC%*1.1) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=12 '3+3*Z%-   ABC%*1.1) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=12 '3+3*Z%-   ABC%*1.1) '
     (check_literal)   '%' != '3'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=12 '3+3*Z%-   ABC%*1.1) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=12 '3+3*Z%-   ABC%*1.1) '
     (check_literal)   '"' != '3'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '3+3*Z%-   ABC%*1.1) '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: '+3*Z%-   ABC%*1.1) '

    (check_operator) check_operator: +3*Z%-   ABC%*1.1) 

     (check_literal) check_literal:lit=',' idx=13 '+3*Z%-   ABC%*1.1) '
     (check_literal) check_literal:After drop space:',' idx=13 '+3*Z%-   ABC%*1.1) '
     (check_literal)   ',' != '+'
     (check_literal) check_literal: ret0
    (check_operator) check_operator: ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: '3*Z%-   ABC%*1.1) '

    (check_operator) check_operator: 3*Z%-   ABC%*1.1) 

     (check_literal) check_literal:lit=',' idx=14 '3*Z%-   ABC%*1.1) '
     (check_literal) check_literal:After drop space:',' idx=14 '3*Z%-   ABC%*1.1) '
     (check_literal)   ',' != '3'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: '3*Z%-   ABC%*1.1) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=14 '3*Z%-   ABC%*1.1) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=14 '3*Z%-   ABC%*1.1) '
     (check_literal)   '%' != '3'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=14 '3*Z%-   ABC%*1.1) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=14 '3*Z%-   ABC%*1.1) '
     (check_literal)   '"' != '3'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '3*Z%-   ABC%*1.1) '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: '*Z%-   ABC%*1.1) '

    (check_operator) check_operator: *Z%-   ABC%*1.1) 

     (check_literal) check_literal:lit=',' idx=15 '*Z%-   ABC%*1.1) '
     (check_literal) check_literal:After drop space:',' idx=15 '*Z%-   ABC%*1.1) '
     (check_literal)   ',' != '*'
     (check_literal) check_literal: ret0
    (check_operator) check_operator: ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: 'Z%-   ABC%*1.1) '

    (check_operator) check_operator: Z%-   ABC%*1.1) 

     (check_literal) check_literal:lit=',' idx=16 'Z%-   ABC%*1.1) '
     (check_literal) check_literal:After drop space:',' idx=16 'Z%-   ABC%*1.1) '
     (check_literal)   ',' != 'Z'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: 'Z%-   ABC%*1.1) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=16 'Z%-   ABC%*1.1) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=16 'Z%-   ABC%*1.1) '
     (check_literal)   '%' != 'Z'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=16 'Z%-   ABC%*1.1) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=16 'Z%-   ABC%*1.1) '
     (check_literal)   '"' != 'Z'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'Z%-   ABC%*1.1) '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'Z%-   ABC%*1.1) ':
      (check_vname) check_vname ret1 '%-   ABC%*1.1) ':
     (check_variable) check_variable: '%-   ABC%*1.1) '
     (check_variable) check_variable: Ary test '-   ABC%*1.1) '

      (check_literal) check_literal:lit='(' idx=18 '-   ABC%*1.1) '
      (check_literal) check_literal:After drop space:'(' idx=18 '-   ABC%*1.1) '
      (check_literal)   '(' != '-'
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (check_eitem) check_eitem: '-   ABC%*1.1) '

   (check_operator) check_operator: -   ABC%*1.1) 

    (check_literal) check_literal:lit=',' idx=18 '-   ABC%*1.1) '
    (check_literal) check_literal:After drop space:',' idx=18 '-   ABC%*1.1) '
    (check_literal)   ',' != '-'
    (check_literal) check_literal: ret0
   (check_operator) check_operator: ret1
  (check_eitem) check_eitem:ret1

  (check_eitem) check_eitem: '   ABC%*1.1) '

   (check_operator) check_operator:    ABC%*1.1) 

    (check_literal) check_literal:lit=',' idx=22 'ABC%*1.1) '
    (check_literal) check_literal:After drop space:',' idx=22 'ABC%*1.1) '
    (check_literal)   ',' != 'A'
    (check_literal) check_literal: ret0
   (check_operator) check_operator:ret0

   (check_function) check_function: 'ABC%*1.1) '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=19 '   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=22 'ABC%*1.1) '
    (check_literal)   '%' != 'A'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=19 '   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=22 'ABC%*1.1) '
    (check_literal)   '"' != 'A'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'ABC%*1.1) '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'ABC%*1.1) ':
     (check_vname) check_vname ret1 '%*1.1) ':
    (check_variable) check_variable: '%*1.1) '
    (check_variable) check_variable: Ary test '*1.1) '

     (check_literal) check_literal:lit='(' idx=26 '*1.1) '
     (check_literal) check_literal:After drop space:'(' idx=26 '*1.1) '
     (check_literal)   '(' != '*'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1
 (check_eitem) check_eitem:ret1

 (check_eitem) check_eitem: '*1.1) '

  (check_operator) check_operator: *1.1) 

   (check_literal) check_literal:lit=',' idx=26 '*1.1) '
   (check_literal) check_literal:After drop space:',' idx=26 '*1.1) '
   (check_literal)   ',' != '*'
   (check_literal) check_literal: ret0
  (check_operator) check_operator: ret1
 (check_eitem) check_eitem:ret1

 (check_eitem) check_eitem: '1.1) '

  (check_operator) check_operator: 1.1) 

   (check_literal) check_literal:lit=',' idx=27 '1.1) '
   (check_literal) check_literal:After drop space:',' idx=27 '1.1) '
   (check_literal)   ',' != '1'
   (check_literal) check_literal: ret0
  (check_operator) check_operator:ret0

  (check_function) check_function: '1.1) '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=27 '1.1) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=27 '1.1) '
   (check_literal)   '%' != '1'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=27 '1.1) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=27 '1.1) '
   (check_literal)   '"' != '1'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret1
   (check_number) check_number: ret1
  (check_atom) check_atom:ret1
 (check_eitem) check_eitem:ret1

 (check_eitem) check_eitem: ') '

  (check_operator) check_operator: ) 

   (check_literal) check_literal:lit=',' idx=30 ') '
   (check_literal) check_literal:After drop space:',' idx=30 ') '
   (check_literal)   ',' != ')'
   (check_literal) check_literal: ret0
  (check_operator) check_operator:ret0

  (check_function) check_function: ') '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=30 ') '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=30 ') '
   (check_literal)   '%' != ')'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=30 ') '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=30 ') '
   (check_literal)   '"' != ')'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: ') '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname ') ':
    (check_vname) check_vname ret0 ') ':
   (check_variable) check_variable:ret0 
  (check_atom) check_atom:ret1

  (check_sub_expr) check_sub_expr:

   (check_literal) check_literal:lit=' (' idx=30 ') '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'(' idx=30 ') '
   (check_literal)   '(' != ')'
   (check_literal) check_literal: ret0
  (check_sub_expr) check_sub_expr: ret0
 (check_eitem) check_eitem:ret0
(check_expression) check_expression:ret1 ') '
(check_assignment) check_assignment:ret1
(check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=2, ') '
========================================================
A = A% + (2*3+3*Z%-   ABC%*1.1) 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'A = A% + (2*3+3*Z%-   ABC%*1.1) ':
    (check_vname) check_vname ret1 ' = A% + (2*3+3*Z%-   ABC%*1.1) ':
   (check_variable) check_variable: ' = A% + (2*3+3*Z%-   ABC%*1.1) '
   (check_variable) check_variable: Ary test ' = A% + (2*3+3*Z%-   ABC%*1.1) '

    (check_literal) check_literal:lit='(' idx=1 ' = A% + (2*3+3*Z%-   ABC%*1.1) '
    (check_literal) check_literal:After drop space:'(' idx=1 ' = A% + (2*3+3*Z%-   ABC%*1.1) '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=1 ' = A% + (2*3+3*Z%-   ABC%*1.1) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=2 '= A% + (2*3+3*Z%-   ABC%*1.1) '
  (check_literal) check_literal:After while(): A% + (2*3+3*Z%-   ABC%*1.1) 
  (check_literal) check_literal:ret1 

  (check_expression) check_expression: 'A% + (2*3+3*Z%-   ABC%*1.1) '

   (check_eitem) check_eitem: 'A% + (2*3+3*Z%-   ABC%*1.1) '

    (check_operator) check_operator: A% + (2*3+3*Z%-   ABC%*1.1) 

     (check_literal) check_literal:lit=',' idx=4 'A% + (2*3+3*Z%-   ABC%*1.1) '
     (check_literal) check_literal:After drop space:',' idx=4 'A% + (2*3+3*Z%-   ABC%*1.1) '
     (check_literal)   ',' != 'A'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: 'A% + (2*3+3*Z%-   ABC%*1.1) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=4 'A% + (2*3+3*Z%-   ABC%*1.1) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=4 'A% + (2*3+3*Z%-   ABC%*1.1) '
     (check_literal)   '%' != 'A'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=4 'A% + (2*3+3*Z%-   ABC%*1.1) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=4 'A% + (2*3+3*Z%-   ABC%*1.1) '
     (check_literal)   '"' != 'A'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'A% + (2*3+3*Z%-   ABC%*1.1) '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'A% + (2*3+3*Z%-   ABC%*1.1) ':
      (check_vname) check_vname ret1 '% + (2*3+3*Z%-   ABC%*1.1) ':
     (check_variable) check_variable: '% + (2*3+3*Z%-   ABC%*1.1) '
     (check_variable) check_variable: Ary test ' + (2*3+3*Z%-   ABC%*1.1) '

      (check_literal) check_literal:lit='(' idx=6 ' + (2*3+3*Z%-   ABC%*1.1) '
      (check_literal) check_literal:After drop space:'(' idx=6 ' + (2*3+3*Z%-   ABC%*1.1) '
      (check_literal)   '(' != ' '
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (check_eitem) check_eitem: ' + (2*3+3*Z%-   ABC%*1.1) '

   (check_operator) check_operator:  + (2*3+3*Z%-   ABC%*1.1) 

    (check_literal) check_literal:lit=',' idx=7 '+ (2*3+3*Z%-   ABC%*1.1) '
    (check_literal) check_literal:After drop space:',' idx=7 '+ (2*3+3*Z%-   ABC%*1.1) '
    (check_literal)   ',' != '+'
    (check_literal) check_literal: ret0
   (check_operator) check_operator: ret1
  (check_eitem) check_eitem:ret1

  (check_eitem) check_eitem: ' (2*3+3*Z%-   ABC%*1.1) '

   (check_operator) check_operator:  (2*3+3*Z%-   ABC%*1.1) 

    (check_literal) check_literal:lit=',' idx=9 '(2*3+3*Z%-   ABC%*1.1) '
    (check_literal) check_literal:After drop space:',' idx=9 '(2*3+3*Z%-   ABC%*1.1) '
    (check_literal)   ',' != '('
    (check_literal) check_literal: ret0
   (check_operator) check_operator:ret0

   (check_function) check_function: '(2*3+3*Z%-   ABC%*1.1) '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=8 ' (2*3+3*Z%-   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=9 '(2*3+3*Z%-   ABC%*1.1) '
    (check_literal)   '%' != '('
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=8 ' (2*3+3*Z%-   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=9 '(2*3+3*Z%-   ABC%*1.1) '
    (check_literal)   '"' != '('
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '(2*3+3*Z%-   ABC%*1.1) '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname '(2*3+3*Z%-   ABC%*1.1) ':
     (check_vname) check_vname ret0 '(2*3+3*Z%-   ABC%*1.1) ':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret1

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=8 ' (2*3+3*Z%-   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=9 '(2*3+3*Z%-   ABC%*1.1) '
    (check_literal) check_literal:After while():2*3+3*Z%-   ABC%*1.1) 
    (check_literal) check_literal:ret1 
   (check_sub_expr) check_sub_expr: ret1
  (check_eitem) check_eitem:ret1

  (check_eitem) check_eitem: '2*3+3*Z%-   ABC%*1.1) '

   (check_operator) check_operator: 2*3+3*Z%-   ABC%*1.1) 

    (check_literal) check_literal:lit=',' idx=10 '2*3+3*Z%-   ABC%*1.1) '
    (check_literal) check_literal:After drop space:',' idx=10 '2*3+3*Z%-   ABC%*1.1) '
    (check_literal)   ',' != '2'
    (check_literal) check_literal: ret0
   (check_operator) check_operator:ret0

   (check_function) check_function: '2*3+3*Z%-   ABC%*1.1) '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=10 '2*3+3*Z%-   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=10 '2*3+3*Z%-   ABC%*1.1) '
    (check_literal)   '%' != '2'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=10 '2*3+3*Z%-   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=10 '2*3+3*Z%-   ABC%*1.1) '
    (check_literal)   '"' != '2'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '2*3+3*Z%-   ABC%*1.1) '
     (check_integer) check_integer:ret1
    (check_number) check_number: ret1
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (check_eitem) check_eitem: '*3+3*Z%-   ABC%*1.1) '

   (check_operator) check_operator: *3+3*Z%-   ABC%*1.1) 

    (check_literal) check_literal:lit=',' idx=11 '*3+3*Z%-   ABC%*1.1) '
    (check_literal) check_literal:After drop space:',' idx=11 '*3+3*Z%-   ABC%*1.1) '
    (check_literal)   ',' != '*'
    (check_literal) check_literal: ret0
   (check_operator) check_operator: ret1
  (check_eitem) check_eitem:ret1

  (check_eitem) check_eitem: '3+3*Z%-   ABC%*1.1) '

   (check_operator) check_operator: 3+3*Z%-   ABC%*1.1) 

    (check_literal) check_literal:lit=',' idx=12 '3+3*Z%-   ABC%*1.1) '
    (check_literal) check_literal:After drop space:',' idx=12 '3+3*Z%-   ABC%*1.1) '
    (check_literal)   ',' != '3'
    (check_literal) check_literal: ret0
   (check_operator) check_operator:ret0

   (check_function) check_function: '3+3*Z%-   ABC%*1.1) '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=12 '3+3*Z%-   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=12 '3+3*Z%-   ABC%*1.1) '
    (check_literal)   '%' != '3'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=12 '3+3*Z%-   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=12 '3+3*Z%-   ABC%*1.1) '
    (check_literal)   '"' != '3'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '3+3*Z%-   ABC%*1.1) '
     (check_integer) check_integer:ret1
    (check_number) check_number: ret1
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (check_eitem) check_eitem: '+3*Z%-   ABC%*1.1) '

   (check_operator) check_operator: +3*Z%-   ABC%*1.1) 

    (check_literal) check_literal:lit=',' idx=13 '+3*Z%-   ABC%*1.1) '
    (check_literal) check_literal:After drop space:',' idx=13 '+3*Z%-   ABC%*1.1) '
    (check_literal)   ',' != '+'
    (check_literal) check_literal: ret0
   (check_operator) check_operator: ret1
  (check_eitem) check_eitem:ret1

  (check_eitem) check_eitem: '3*Z%-   ABC%*1.1) '

   (check_operator) check_operator: 3*Z%-   ABC%*1.1) 

    (check_literal) check_literal:lit=',' idx=14 '3*Z%-   ABC%*1.1) '
    (check_literal) check_literal:After drop space:',' idx=14 '3*Z%-   ABC%*1.1) '
    (check_literal)   ',' != '3'
    (check_literal) check_literal: ret0
   (check_operator) check_operator:ret0

   (check_function) check_function: '3*Z%-   ABC%*1.1) '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=14 '3*Z%-   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=14 '3*Z%-   ABC%*1.1) '
    (check_literal)   '%' != '3'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=14 '3*Z%-   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=14 '3*Z%-   ABC%*1.1) '
    (check_literal)   '"' != '3'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '3*Z%-   ABC%*1.1) '
     (check_integer) check_integer:ret1
    (check_number) check_number: ret1
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (check_eitem) check_eitem: '*Z%-   ABC%*1.1) '

   (check_operator) check_operator: *Z%-   ABC%*1.1) 

    (check_literal) check_literal:lit=',' idx=15 '*Z%-   ABC%*1.1) '
    (check_literal) check_literal:After drop space:',' idx=15 '*Z%-   ABC%*1.1) '
    (check_literal)   ',' != '*'
    (check_literal) check_literal: ret0
   (check_operator) check_operator: ret1
  (check_eitem) check_eitem:ret1

  (check_eitem) check_eitem: 'Z%-   ABC%*1.1) '

   (check_operator) check_operator: Z%-   ABC%*1.1) 

    (check_literal) check_literal:lit=',' idx=16 'Z%-   ABC%*1.1) '
    (check_literal) check_literal:After drop space:',' idx=16 'Z%-   ABC%*1.1) '
    (check_literal)   ',' != 'Z'
    (check_literal) check_literal: ret0
   (check_operator) check_operator:ret0

   (check_function) check_function: 'Z%-   ABC%*1.1) '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=16 'Z%-   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=16 'Z%-   ABC%*1.1) '
    (check_literal)   '%' != 'Z'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=16 'Z%-   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=16 'Z%-   ABC%*1.1) '
    (check_literal)   '"' != 'Z'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'Z%-   ABC%*1.1) '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'Z%-   ABC%*1.1) ':
     (check_vname) check_vname ret1 '%-   ABC%*1.1) ':
    (check_variable) check_variable: '%-   ABC%*1.1) '
    (check_variable) check_variable: Ary test '-   ABC%*1.1) '

     (check_literal) check_literal:lit='(' idx=18 '-   ABC%*1.1) '
     (check_literal) check_literal:After drop space:'(' idx=18 '-   ABC%*1.1) '
     (check_literal)   '(' != '-'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1
 (check_eitem) check_eitem:ret1

 (check_eitem) check_eitem: '-   ABC%*1.1) '

  (check_operator) check_operator: -   ABC%*1.1) 

   (check_literal) check_literal:lit=',' idx=18 '-   ABC%*1.1) '
   (check_literal) check_literal:After drop space:',' idx=18 '-   ABC%*1.1) '
   (check_literal)   ',' != '-'
   (check_literal) check_literal: ret0
  (check_operator) check_operator: ret1
 (check_eitem) check_eitem:ret1

 (check_eitem) check_eitem: '   ABC%*1.1) '

  (check_operator) check_operator:    ABC%*1.1) 

   (check_literal) check_literal:lit=',' idx=22 'ABC%*1.1) '
   (check_literal) check_literal:After drop space:',' idx=22 'ABC%*1.1) '
   (check_literal)   ',' != 'A'
   (check_literal) check_literal: ret0
  (check_operator) check_operator:ret0

  (check_function) check_function: 'ABC%*1.1) '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=19 '   ABC%*1.1) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=22 'ABC%*1.1) '
   (check_literal)   '%' != 'A'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=19 '   ABC%*1.1) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=22 'ABC%*1.1) '
   (check_literal)   '"' != 'A'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'ABC%*1.1) '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'ABC%*1.1) ':
    (check_vname) check_vname ret1 '%*1.1) ':
   (check_variable) check_variable: '%*1.1) '
   (check_variable) check_variable: Ary test '*1.1) '

    (check_literal) check_literal:lit='(' idx=26 '*1.1) '
    (check_literal) check_literal:After drop space:'(' idx=26 '*1.1) '
    (check_literal)   '(' != '*'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) check_atom:ret1
(check_eitem) check_eitem:ret1

 (check_eitem) check_eitem: '*1.1) '

  (check_operator) check_operator: *1.1) 

   (check_literal) check_literal:lit=',' idx=26 '*1.1) '
   (check_literal) check_literal:After drop space:',' idx=26 '*1.1) '
   (check_literal)   ',' != '*'
   (check_literal) check_literal: ret0
  (check_operator) check_operator: ret1
 (check_eitem) check_eitem:ret1

 (check_eitem) check_eitem: '1.1) '

  (check_operator) check_operator: 1.1) 

   (check_literal) check_literal:lit=',' idx=27 '1.1) '
   (check_literal) check_literal:After drop space:',' idx=27 '1.1) '
   (check_literal)   ',' != '1'
   (check_literal) check_literal: ret0
  (check_operator) check_operator:ret0

  (check_function) check_function: '1.1) '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=27 '1.1) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=27 '1.1) '
   (check_literal)   '%' != '1'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=27 '1.1) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=27 '1.1) '
   (check_literal)   '"' != '1'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret1
   (check_number) check_number: ret1
  (check_atom) check_atom:ret1
 (check_eitem) check_eitem:ret1

 (check_eitem) check_eitem: ') '

  (check_operator) check_operator: ) 

   (check_literal) check_literal:lit=',' idx=30 ') '
   (check_literal) check_literal:After drop space:',' idx=30 ') '
   (check_literal)   ',' != ')'
   (check_literal) check_literal: ret0
  (check_operator) check_operator:ret0

  (check_function) check_function: ') '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=30 ') '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=30 ') '
   (check_literal)   '%' != ')'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=30 ') '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=30 ') '
   (check_literal)   '"' != ')'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: ') '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname ') ':
    (check_vname) check_vname ret0 ') ':
   (check_variable) check_variable:ret0 
  (check_atom) check_atom:ret1

  (check_sub_expr) check_sub_expr:

   (check_literal) check_literal:lit=' (' idx=30 ') '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'(' idx=30 ') '
   (check_literal)   '(' != ')'
   (check_literal) check_literal: ret0
  (check_sub_expr) check_sub_expr: ret0
 (check_eitem) check_eitem:ret0
(check_expression) check_expression:ret1 ') '
(check_assignment) check_assignment:ret1

 (scan_assignment) scan_assignment:

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'A = A% + (2*3+3*Z%-   ABC%*1.1) '
   (scan_vname) scan_vname: ret1 'A'
  (scan_variable) scan_variable: ' = A% + (2*3+3*Z%-   ABC%*1.1) ' vname='A'
  (scan_variable) scan_variable: Ary test ' = A% + (2*3+3*Z%-   ABC%*1.1) '

   (check_literal) check_literal:lit='(' idx=1 ' = A% + (2*3+3*Z%-   ABC%*1.1) '
   (check_literal) check_literal:After drop space:'(' idx=1 ' = A% + (2*3+3*Z%-   ABC%*1.1) '
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='A' is str:0 int:0 flt:1 ary:0
   Frst:1 T:'A' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:A is not function
token_is_variable: tok:'A'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:A is not function
 (init_get_name) 
init_get_name:'A'
 (init_get_name) 
init_get_name:'A'
 (get_name) 
get_name:gn:'A'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] f f A
 (print_var_info) 
VAR INFO: '                 A' gbl:0 ref:1 int:0 flt:1 str:0 ary:0 max_str:0 max_ary:0 num_ind:0

  (scan_literal) scan_literal:lit=' =' ' = A% + (2*3+3*Z%-   ABC%*1.1) '
  (scan_literal) scan_literal:After drop space:= A% + (2*3+3*Z%-   ABC%*1.1) 
  (scan_literal) scan_literal:while loop:= A% + (2*3+3*Z%-   ABC%*1.1) 
   Frst:0 T:'=' exptype:i
  (operator_precedence) 
= is operator
'=' is operator
  (process_token) 
Token is operator o1 name:= o2 name:
  (process_token) 
opr1:1 opr2:0
Push 1
 Push:'='
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (1)

  (op_stack_print) 
000: = type:0
  (op_stack_print) 
------------------

  (scan_literal) scan_literal:ret1

  (scan_expression) scan_expression: ' A% + (2*3+3*Z%-   ABC%*1.1) '

   (check_eitem) check_eitem: 'A% + (2*3+3*Z%-   ABC%*1.1) '

    (check_operator) check_operator: A% + (2*3+3*Z%-   ABC%*1.1) 

     (check_literal) check_literal:lit=',' idx=4 'A% + (2*3+3*Z%-   ABC%*1.1) '
     (check_literal) check_literal:After drop space:',' idx=4 'A% + (2*3+3*Z%-   ABC%*1.1) '
     (check_literal)   ',' != 'A'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: 'A% + (2*3+3*Z%-   ABC%*1.1) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=4 'A% + (2*3+3*Z%-   ABC%*1.1) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=4 'A% + (2*3+3*Z%-   ABC%*1.1) '
     (check_literal)   '%' != 'A'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=4 'A% + (2*3+3*Z%-   ABC%*1.1) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=4 'A% + (2*3+3*Z%-   ABC%*1.1) '
     (check_literal)   '"' != 'A'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'A% + (2*3+3*Z%-   ABC%*1.1) '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'A% + (2*3+3*Z%-   ABC%*1.1) ':
      (check_vname) check_vname ret1 '% + (2*3+3*Z%-   ABC%*1.1) ':
     (check_variable) check_variable: '% + (2*3+3*Z%-   ABC%*1.1) '
     (check_variable) check_variable: Ary test ' + (2*3+3*Z%-   ABC%*1.1) '

      (check_literal) check_literal:lit='(' idx=6 ' + (2*3+3*Z%-   ABC%*1.1) '
      (check_literal) check_literal:After drop space:'(' idx=6 ' + (2*3+3*Z%-   ABC%*1.1) '
      (check_literal)   '(' != ' '
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator: A% + (2*3+3*Z%-   ABC%*1.1) 

    (check_literal) check_literal:lit=',' idx=4 'A% + (2*3+3*Z%-   ABC%*1.1) '
    (check_literal) check_literal:After drop space:',' idx=4 'A% + (2*3+3*Z%-   ABC%*1.1) '
    (check_literal)   ',' != 'A'
    (check_literal) check_literal: ret0
   (check_operator) check_operator:ret0

   (check_function) check_function: 'A% + (2*3+3*Z%-   ABC%*1.1) '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=4 'A% + (2*3+3*Z%-   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=4 'A% + (2*3+3*Z%-   ABC%*1.1) '
    (check_literal)   '%' != 'A'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=4 'A% + (2*3+3*Z%-   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=4 'A% + (2*3+3*Z%-   ABC%*1.1) '
    (check_literal)   '"' != 'A'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'A% + (2*3+3*Z%-   ABC%*1.1) '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'A% + (2*3+3*Z%-   ABC%*1.1) ':
     (check_vname) check_vname ret1 '% + (2*3+3*Z%-   ABC%*1.1) ':
    (check_variable) check_variable: '% + (2*3+3*Z%-   ABC%*1.1) '
    (check_variable) check_variable: Ary test ' + (2*3+3*Z%-   ABC%*1.1) '

     (check_literal) check_literal:lit='(' idx=6 ' + (2*3+3*Z%-   ABC%*1.1) '
     (check_literal) check_literal:After drop space:'(' idx=6 ' + (2*3+3*Z%-   ABC%*1.1) '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1

  (scan_atom) scan_atom:

   (check_literal) check_literal:lit=' %' idx=4 'A% + (2*3+3*Z%-   ABC%*1.1) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=4 'A% + (2*3+3*Z%-   ABC%*1.1) '
   (check_literal)   '%' != 'A'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=4 'A% + (2*3+3*Z%-   ABC%*1.1) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=4 'A% + (2*3+3*Z%-   ABC%*1.1) '
   (check_literal)   '"' != 'A'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'A% + (2*3+3*Z%-   ABC%*1.1) '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'A% + (2*3+3*Z%-   ABC%*1.1) ':
    (check_vname) check_vname ret1 '% + (2*3+3*Z%-   ABC%*1.1) ':
   (check_variable) check_variable: '% + (2*3+3*Z%-   ABC%*1.1) '
   (check_variable) check_variable: Ary test ' + (2*3+3*Z%-   ABC%*1.1) '

    (check_literal) check_literal:lit='(' idx=6 ' + (2*3+3*Z%-   ABC%*1.1) '
    (check_literal) check_literal:After drop space:'(' idx=6 ' + (2*3+3*Z%-   ABC%*1.1) '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'A% + (2*3+3*Z%-   ABC%*1.1) '
   (scan_vname) scan_vname: ret1 'A'
  (scan_variable) scan_variable: '% + (2*3+3*Z%-   ABC%*1.1) ' vname='A'
  (scan_variable) scan_variable: Ary test ' + (2*3+3*Z%-   ABC%*1.1) '

   (check_literal) check_literal:lit='(' idx=6 ' + (2*3+3*Z%-   ABC%*1.1) '
   (check_literal) check_literal:After drop space:'(' idx=6 ' + (2*3+3*Z%-   ABC%*1.1) '
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='A%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'A%' exptype:i
 (operator_precedence) 
= is operator
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:A% is not function
token_is_variable: tok:'A%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:A% is not function
 (init_get_name) 
init_get_name:'A%'
 (init_get_name) 
init_get_name:'A%'
 (get_name) 
get_name:gn:'A%'
process_token:type:i req_type:i
modify_expression_type:Inittype:i Intype:i Outtype:i
( output_variable) [i,()] i i A%
 (print_var_info) 
VAR INFO: '                A%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
 (scan_atom) scan_atom:ret1

 (check_eitem) check_eitem: ' + (2*3+3*Z%-   ABC%*1.1) '

  (check_operator) check_operator:  + (2*3+3*Z%-   ABC%*1.1) 

   (check_literal) check_literal:lit=',' idx=7 '+ (2*3+3*Z%-   ABC%*1.1) '
   (check_literal) check_literal:After drop space:',' idx=7 '+ (2*3+3*Z%-   ABC%*1.1) '
   (check_literal)   ',' != '+'
   (check_literal) check_literal: ret0
  (check_operator) check_operator: ret1
 (check_eitem) check_eitem:ret1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator:  + (2*3+3*Z%-   ABC%*1.1) 

   (check_literal) check_literal:lit=',' idx=7 '+ (2*3+3*Z%-   ABC%*1.1) '
   (check_literal) check_literal:After drop space:',' idx=7 '+ (2*3+3*Z%-   ABC%*1.1) '
   (check_literal)   ',' != '+'
   (check_literal) check_literal: ret0
  (check_operator) check_operator: ret1

  (scan_operator) scan_operator: ' + (2*3+3*Z%-   ABC%*1.1) '

   (check_literal) check_literal:lit=',' idx=7 '+ (2*3+3*Z%-   ABC%*1.1) '
   (check_literal) check_literal:After drop space:',' idx=7 '+ (2*3+3*Z%-   ABC%*1.1) '
   (check_literal)   ',' != '+'
   (check_literal) check_literal: ret0
  (scan_operator) scan_operator: ret1 ' (2*3+3*Z%-   ABC%*1.1) '
   Frst:0 T:'+' exptype:i
 (operator_precedence) 
+ is operator
 (operator_precedence) 
= is operator
'+' is operator
 (process_token) 
Token is operator o1 name:+ o2 name:=
 (process_token) 
opr1:3 opr2:1
 (operator_precedence) 
= is operator
 (operator_precedence) 
= is operator
Push 1
 Push:'+'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: = type:0
 (op_stack_print) 
001: + type:0
 (op_stack_print) 
------------------


  (check_eitem) check_eitem: ' (2*3+3*Z%-   ABC%*1.1) '

   (check_operator) check_operator:  (2*3+3*Z%-   ABC%*1.1) 

    (check_literal) check_literal:lit=',' idx=9 '(2*3+3*Z%-   ABC%*1.1) '
    (check_literal) check_literal:After drop space:',' idx=9 '(2*3+3*Z%-   ABC%*1.1) '
    (check_literal)   ',' != '('
    (check_literal) check_literal: ret0
   (check_operator) check_operator:ret0

   (check_function) check_function: '(2*3+3*Z%-   ABC%*1.1) '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=8 ' (2*3+3*Z%-   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=9 '(2*3+3*Z%-   ABC%*1.1) '
    (check_literal)   '%' != '('
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=8 ' (2*3+3*Z%-   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=9 '(2*3+3*Z%-   ABC%*1.1) '
    (check_literal)   '"' != '('
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '(2*3+3*Z%-   ABC%*1.1) '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname '(2*3+3*Z%-   ABC%*1.1) ':
     (check_vname) check_vname ret0 '(2*3+3*Z%-   ABC%*1.1) ':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret1

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=8 ' (2*3+3*Z%-   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=9 '(2*3+3*Z%-   ABC%*1.1) '
    (check_literal) check_literal:After while():2*3+3*Z%-   ABC%*1.1) 
    (check_literal) check_literal:ret1 
   (check_sub_expr) check_sub_expr: ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator:  (2*3+3*Z%-   ABC%*1.1) 

    (check_literal) check_literal:lit=',' idx=9 '(2*3+3*Z%-   ABC%*1.1) '
    (check_literal) check_literal:After drop space:',' idx=9 '(2*3+3*Z%-   ABC%*1.1) '
    (check_literal)   ',' != '('
    (check_literal) check_literal: ret0
   (check_operator) check_operator:ret0

   (check_function) check_function: '(2*3+3*Z%-   ABC%*1.1) '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=8 ' (2*3+3*Z%-   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=9 '(2*3+3*Z%-   ABC%*1.1) '
    (check_literal)   '%' != '('
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=8 ' (2*3+3*Z%-   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=9 '(2*3+3*Z%-   ABC%*1.1) '
    (check_literal)   '"' != '('
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '(2*3+3*Z%-   ABC%*1.1) '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname '(2*3+3*Z%-   ABC%*1.1) ':
     (check_vname) check_vname ret0 '(2*3+3*Z%-   ABC%*1.1) ':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret1

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=8 ' (2*3+3*Z%-   ABC%*1.1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=9 '(2*3+3*Z%-   ABC%*1.1) '
    (check_literal) check_literal:After while():2*3+3*Z%-   ABC%*1.1) 
    (check_literal) check_literal:ret1 
   (check_sub_expr) check_sub_expr: ret1

   (scan_sub_expr) scan_sub_expr:

    (scan_literal) scan_literal:lit=' (' ' (2*3+3*Z%-   ABC%*1.1) '
    (scan_literal) scan_literal:After drop space:(2*3+3*Z%-   ABC%*1.1) 
    (scan_literal) scan_literal:while loop:(2*3+3*Z%-   ABC%*1.1) 
   Frst:0 T:'(' exptype:i
    (operator_precedence) 
+ is operator
(output_sub_start)
 Push:'('
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (3)

    (op_stack_print) 
000: = type:0
    (op_stack_print) 
001: + type:0
    (op_stack_print) 
002: ( type:16
    (op_stack_print) 
------------------

    (scan_literal) scan_literal:ret1
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
   (op_stack_print) 
------------------
   (op_stack_print) 
Operator Stack     (4)

   (op_stack_print) 
000: = type:0
   (op_stack_print) 
001: + type:0
   (op_stack_print) 
002: ( type:16
   (op_stack_print) 
003: ( type:16
   (op_stack_print) 
------------------


    (scan_expression) scan_expression: '2*3+3*Z%-   ABC%*1.1) '

     (check_eitem) check_eitem: '2*3+3*Z%-   ABC%*1.1) '

      (check_operator) check_operator: 2*3+3*Z%-   ABC%*1.1) 

       (check_literal) check_literal:lit=',' idx=10 '2*3+3*Z%-   ABC%*1.1) '
       (check_literal) check_literal:After drop space:',' idx=10 '2*3+3*Z%-   ABC%*1.1) '
       (check_literal)   ',' != '2'
       (check_literal) check_literal: ret0
      (check_operator) check_operator:ret0

      (check_function) check_function: '2*3+3*Z%-   ABC%*1.1) '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=10 '2*3+3*Z%-   ABC%*1.1) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=10 '2*3+3*Z%-   ABC%*1.1) '
       (check_literal)   '%' != '2'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=10 '2*3+3*Z%-   ABC%*1.1) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=10 '2*3+3*Z%-   ABC%*1.1) '
       (check_literal)   '"' != '2'
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '2*3+3*Z%-   ABC%*1.1) '
        (check_integer) check_integer:ret1
       (check_number) check_number: ret1
      (check_atom) check_atom:ret1
     (check_eitem) check_eitem:ret1

     (scan_eitem) scan_eitem:

      (check_operator) check_operator: 2*3+3*Z%-   ABC%*1.1) 

       (check_literal) check_literal:lit=',' idx=10 '2*3+3*Z%-   ABC%*1.1) '
       (check_literal) check_literal:After drop space:',' idx=10 '2*3+3*Z%-   ABC%*1.1) '
       (check_literal)   ',' != '2'
       (check_literal) check_literal: ret0
      (check_operator) check_operator:ret0

      (check_function) check_function: '2*3+3*Z%-   ABC%*1.1) '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=10 '2*3+3*Z%-   ABC%*1.1) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=10 '2*3+3*Z%-   ABC%*1.1) '
       (check_literal)   '%' != '2'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=10 '2*3+3*Z%-   ABC%*1.1) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=10 '2*3+3*Z%-   ABC%*1.1) '
       (check_literal)   '"' != '2'
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '2*3+3*Z%-   ABC%*1.1) '
        (check_integer) check_integer:ret1
       (check_number) check_number: ret1
      (check_atom) check_atom:ret1

      (scan_atom) scan_atom:

       (check_literal) check_literal:lit=' %' idx=10 '2*3+3*Z%-   ABC%*1.1) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=10 '2*3+3*Z%-   ABC%*1.1) '
       (check_literal)   '%' != '2'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=10 '2*3+3*Z%-   ABC%*1.1) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=10 '2*3+3*Z%-   ABC%*1.1) '
       (check_literal)   '"' != '2'
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '2*3+3*Z%-   ABC%*1.1) '
        (check_integer) check_integer:ret1
       (check_number) check_number: ret1

       (scan_number) scan_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '2*3+3*Z%-   ABC%*1.1) '
        (check_integer) check_integer:ret1

        (scan_integer) scan_integer:
        (scan_integer) scan_integer:ret1
   Frst:0 T:'2' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(i U )] i i 2
       (scan_integer) scan_integer:ret1  2
      (scan_atom) scan_atom:ret1

      (check_eitem) check_eitem: '*3+3*Z%-   ABC%*1.1) '

       (check_operator) check_operator: *3+3*Z%-   ABC%*1.1) 

        (check_literal) check_literal:lit=',' idx=11 '*3+3*Z%-   ABC%*1.1) '
        (check_literal) check_literal:After drop space:',' idx=11 '*3+3*Z%-   ABC%*1.1) '
        (check_literal)   ',' != '*'
        (check_literal) check_literal: ret0
       (check_operator) check_operator: ret1
      (check_eitem) check_eitem:ret1

      (scan_eitem) scan_eitem:

       (check_operator) check_operator: *3+3*Z%-   ABC%*1.1) 

        (check_literal) check_literal:lit=',' idx=11 '*3+3*Z%-   ABC%*1.1) '
        (check_literal) check_literal:After drop space:',' idx=11 '*3+3*Z%-   ABC%*1.1) '
        (check_literal)   ',' != '*'
        (check_literal) check_literal: ret0
       (check_operator) check_operator: ret1

       (scan_operator) scan_operator: '*3+3*Z%-   ABC%*1.1) '

        (check_literal) check_literal:lit=',' idx=11 '*3+3*Z%-   ABC%*1.1) '
        (check_literal) check_literal:After drop space:',' idx=11 '*3+3*Z%-   ABC%*1.1) '
        (check_literal)   ',' != '*'
        (check_literal) check_literal: ret0
       (scan_operator) scan_operator: ret1 '3+3*Z%-   ABC%*1.1) '
   Frst:0 T:'*' exptype:i
      (operator_precedence) 
* is operator
'*' is operator
      (process_token) 
Token is operator o1 name:* o2 name:(
      (process_token) 
opr1:5 opr2:0
Push 1
 Push:'*'
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (5)

      (op_stack_print) 
000: = type:0
      (op_stack_print) 
001: + type:0
      (op_stack_print) 
002: ( type:16
      (op_stack_print) 
003: ( type:16
      (op_stack_print) 
004: * type:0
      (op_stack_print) 
------------------


       (check_eitem) check_eitem: '3+3*Z%-   ABC%*1.1) '

        (check_operator) check_operator: 3+3*Z%-   ABC%*1.1) 

         (check_literal) check_literal:lit=',' idx=12 '3+3*Z%-   ABC%*1.1) '
         (check_literal) check_literal:After drop space:',' idx=12 '3+3*Z%-   ABC%*1.1) '
         (check_literal)   ',' != '3'
         (check_literal) check_literal: ret0
        (check_operator) check_operator:ret0

        (check_function) check_function: '3+3*Z%-   ABC%*1.1) '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=12 '3+3*Z%-   ABC%*1.1) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=12 '3+3*Z%-   ABC%*1.1) '
         (check_literal)   '%' != '3'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=12 '3+3*Z%-   ABC%*1.1) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=12 '3+3*Z%-   ABC%*1.1) '
         (check_literal)   '"' != '3'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: '3+3*Z%-   ABC%*1.1) '
          (check_integer) check_integer:ret1
         (check_number) check_number: ret1
        (check_atom) check_atom:ret1
       (check_eitem) check_eitem:ret1

       (scan_eitem) scan_eitem:

        (check_operator) check_operator: 3+3*Z%-   ABC%*1.1) 

         (check_literal) check_literal:lit=',' idx=12 '3+3*Z%-   ABC%*1.1) '
         (check_literal) check_literal:After drop space:',' idx=12 '3+3*Z%-   ABC%*1.1) '
         (check_literal)   ',' != '3'
         (check_literal) check_literal: ret0
        (check_operator) check_operator:ret0

        (check_function) check_function: '3+3*Z%-   ABC%*1.1) '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=12 '3+3*Z%-   ABC%*1.1) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=12 '3+3*Z%-   ABC%*1.1) '
         (check_literal)   '%' != '3'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=12 '3+3*Z%-   ABC%*1.1) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=12 '3+3*Z%-   ABC%*1.1) '
         (check_literal)   '"' != '3'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: '3+3*Z%-   ABC%*1.1) '
          (check_integer) check_integer:ret1
         (check_number) check_number: ret1
        (check_atom) check_atom:ret1

        (scan_atom) scan_atom:

         (check_literal) check_literal:lit=' %' idx=12 '3+3*Z%-   ABC%*1.1) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=12 '3+3*Z%-   ABC%*1.1) '
         (check_literal)   '%' != '3'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=12 '3+3*Z%-   ABC%*1.1) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=12 '3+3*Z%-   ABC%*1.1) '
         (check_literal)   '"' != '3'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: '3+3*Z%-   ABC%*1.1) '
          (check_integer) check_integer:ret1
         (check_number) check_number: ret1

         (scan_number) scan_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: '3+3*Z%-   ABC%*1.1) '
          (check_integer) check_integer:ret1

          (scan_integer) scan_integer:
          (scan_integer) scan_integer:ret1
   Frst:0 T:'3' exptype:i
         (operator_precedence) 
* is operator
modify_expression_type:Inittype:i Intype:i Outtype:i
(  output_integer) [i,(i U )] i i 3
         (scan_integer) scan_integer:ret1  3
        (scan_atom) scan_atom:ret1

        (check_eitem) check_eitem: '+3*Z%-   ABC%*1.1) '

         (check_operator) check_operator: +3*Z%-   ABC%*1.1) 

          (check_literal) check_literal:lit=',' idx=13 '+3*Z%-   ABC%*1.1) '
          (check_literal) check_literal:After drop space:',' idx=13 '+3*Z%-   ABC%*1.1) '
          (check_literal)   ',' != '+'
          (check_literal) check_literal: ret0
         (check_operator) check_operator: ret1
        (check_eitem) check_eitem:ret1

        (scan_eitem) scan_eitem:

         (check_operator) check_operator: +3*Z%-   ABC%*1.1) 

          (check_literal) check_literal:lit=',' idx=13 '+3*Z%-   ABC%*1.1) '
          (check_literal) check_literal:After drop space:',' idx=13 '+3*Z%-   ABC%*1.1) '
          (check_literal)   ',' != '+'
          (check_literal) check_literal: ret0
         (check_operator) check_operator: ret1

         (scan_operator) scan_operator: '+3*Z%-   ABC%*1.1) '

          (check_literal) check_literal:lit=',' idx=13 '+3*Z%-   ABC%*1.1) '
          (check_literal) check_literal:After drop space:',' idx=13 '+3*Z%-   ABC%*1.1) '
          (check_literal)   ',' != '+'
          (check_literal) check_literal: ret0
         (scan_operator) scan_operator: ret1 '3*Z%-   ABC%*1.1) '
   Frst:0 T:'+' exptype:i
        (operator_precedence) 
+ is operator
        (operator_precedence) 
* is operator
'+' is operator
        (process_token) 
Token is operator o1 name:+ o2 name:*
        (process_token) 
opr1:3 opr2:5
        (operator_precedence) 
* is operator
Pop 1
Pop '*'
        (op_stack_print) 
------------------
        (op_stack_print) 
Operator Stack     (4)

        (op_stack_print) 
000: = type:0
        (op_stack_print) 
001: + type:0
        (op_stack_print) 
002: ( type:16
        (op_stack_print) 
003: ( type:16
        (op_stack_print) 
------------------

        (operator_precedence) 
+ is operator
        (operator_precedence) 
* is operator
( output_operator) [i,(i U )] i i *
        (token_is_function) 
token_is_function:
        (token_is_function) 
token_is_function:* is not function
Push 1
 Push:'+'
        (op_stack_print) 
------------------
        (op_stack_print) 
Operator Stack     (5)

        (op_stack_print) 
000: = type:0
        (op_stack_print) 
001: + type:0
        (op_stack_print) 
002: ( type:16
        (op_stack_print) 
003: ( type:16
        (op_stack_print) 
004: + type:0
        (op_stack_print) 
------------------


         (check_eitem) check_eitem: '3*Z%-   ABC%*1.1) '

          (check_operator) check_operator: 3*Z%-   ABC%*1.1) 

           (check_literal) check_literal:lit=',' idx=14 '3*Z%-   ABC%*1.1) '
           (check_literal) check_literal:After drop space:',' idx=14 '3*Z%-   ABC%*1.1) '
           (check_literal)   ',' != '3'
           (check_literal) check_literal: ret0
          (check_operator) check_operator:ret0

          (check_function) check_function: '3*Z%-   ABC%*1.1) '
          (check_function) check_function: ret0

          (check_atom) check_atom:

           (check_literal) check_literal:lit=' %' idx=14 '3*Z%-   ABC%*1.1) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'%' idx=14 '3*Z%-   ABC%*1.1) '
           (check_literal)   '%' != '3'
           (check_literal) check_literal: ret0

           (check_literal) check_literal:lit=' "' idx=14 '3*Z%-   ABC%*1.1) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'"' idx=14 '3*Z%-   ABC%*1.1) '
           (check_literal)   '"' != '3'
           (check_literal) check_literal: ret0

           (check_number) check_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret0

            (check_integer) check_integer: '3*Z%-   ABC%*1.1) '
            (check_integer) check_integer:ret1
           (check_number) check_number: ret1
          (check_atom) check_atom:ret1
         (check_eitem) check_eitem:ret1

         (scan_eitem) scan_eitem:

          (check_operator) check_operator: 3*Z%-   ABC%*1.1) 

           (check_literal) check_literal:lit=',' idx=14 '3*Z%-   ABC%*1.1) '
           (check_literal) check_literal:After drop space:',' idx=14 '3*Z%-   ABC%*1.1) '
           (check_literal)   ',' != '3'
           (check_literal) check_literal: ret0
          (check_operator) check_operator:ret0

          (check_function) check_function: '3*Z%-   ABC%*1.1) '
          (check_function) check_function: ret0

          (check_atom) check_atom:

           (check_literal) check_literal:lit=' %' idx=14 '3*Z%-   ABC%*1.1) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'%' idx=14 '3*Z%-   ABC%*1.1) '
           (check_literal)   '%' != '3'
           (check_literal) check_literal: ret0

           (check_literal) check_literal:lit=' "' idx=14 '3*Z%-   ABC%*1.1) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'"' idx=14 '3*Z%-   ABC%*1.1) '
           (check_literal)   '"' != '3'
           (check_literal) check_literal: ret0

           (check_number) check_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret0

            (check_integer) check_integer: '3*Z%-   ABC%*1.1) '
            (check_integer) check_integer:ret1
           (check_number) check_number: ret1
          (check_atom) check_atom:ret1

          (scan_atom) scan_atom:

           (check_literal) check_literal:lit=' %' idx=14 '3*Z%-   ABC%*1.1) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'%' idx=14 '3*Z%-   ABC%*1.1) '
           (check_literal)   '%' != '3'
           (check_literal) check_literal: ret0

           (check_literal) check_literal:lit=' "' idx=14 '3*Z%-   ABC%*1.1) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'"' idx=14 '3*Z%-   ABC%*1.1) '
           (check_literal)   '"' != '3'
           (check_literal) check_literal: ret0

           (check_number) check_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret0

            (check_integer) check_integer: '3*Z%-   ABC%*1.1) '
            (check_integer) check_integer:ret1
           (check_number) check_number: ret1

           (scan_number) scan_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret0

            (check_integer) check_integer: '3*Z%-   ABC%*1.1) '
            (check_integer) check_integer:ret1

            (scan_integer) scan_integer:
            (scan_integer) scan_integer:ret1
   Frst:0 T:'3' exptype:i
           (operator_precedence) 
+ is operator
modify_expression_type:Inittype:i Intype:i Outtype:i
(  output_integer) [i,(i U )] i i 3
           (scan_integer) scan_integer:ret1  3
          (scan_atom) scan_atom:ret1

          (check_eitem) check_eitem: '*Z%-   ABC%*1.1) '

           (check_operator) check_operator: *Z%-   ABC%*1.1) 

            (check_literal) check_literal:lit=',' idx=15 '*Z%-   ABC%*1.1) '
            (check_literal) check_literal:After drop space:',' idx=15 '*Z%-   ABC%*1.1) '
            (check_literal)   ',' != '*'
            (check_literal) check_literal: ret0
           (check_operator) check_operator: ret1
          (check_eitem) check_eitem:ret1

          (scan_eitem) scan_eitem:

           (check_operator) check_operator: *Z%-   ABC%*1.1) 

            (check_literal) check_literal:lit=',' idx=15 '*Z%-   ABC%*1.1) '
            (check_literal) check_literal:After drop space:',' idx=15 '*Z%-   ABC%*1.1) '
            (check_literal)   ',' != '*'
            (check_literal) check_literal: ret0
           (check_operator) check_operator: ret1

           (scan_operator) scan_operator: '*Z%-   ABC%*1.1) '

            (check_literal) check_literal:lit=',' idx=15 '*Z%-   ABC%*1.1) '
            (check_literal) check_literal:After drop space:',' idx=15 '*Z%-   ABC%*1.1) '
            (check_literal)   ',' != '*'
            (check_literal) check_literal: ret0
           (scan_operator) scan_operator: ret1 'Z%-   ABC%*1.1) '
   Frst:0 T:'*' exptype:i
          (operator_precedence) 
* is operator
          (operator_precedence) 
+ is operator
'*' is operator
          (process_token) 
Token is operator o1 name:* o2 name:+
          (process_token) 
opr1:5 opr2:3
          (operator_precedence) 
+ is operator
          (operator_precedence) 
+ is operator
Push 1
 Push:'*'
          (op_stack_print) 
------------------
          (op_stack_print) 
Operator Stack     (6)

          (op_stack_print) 
000: = type:0
          (op_stack_print) 
001: + type:0
          (op_stack_print) 
002: ( type:16
          (op_stack_print) 
003: ( type:16
          (op_stack_print) 
004: + type:0
          (op_stack_print) 
005: * type:0
          (op_stack_print) 
------------------


           (check_eitem) check_eitem: 'Z%-   ABC%*1.1) '

            (check_operator) check_operator: Z%-   ABC%*1.1) 

             (check_literal) check_literal:lit=',' idx=16 'Z%-   ABC%*1.1) '
             (check_literal) check_literal:After drop space:',' idx=16 'Z%-   ABC%*1.1) '
             (check_literal)   ',' != 'Z'
             (check_literal) check_literal: ret0
            (check_operator) check_operator:ret0

            (check_function) check_function: 'Z%-   ABC%*1.1) '
            (check_function) check_function: ret0

            (check_atom) check_atom:

             (check_literal) check_literal:lit=' %' idx=16 'Z%-   ABC%*1.1) '
             (check_literal) dropping space
             (check_literal) check_literal:After drop space:'%' idx=16 'Z%-   ABC%*1.1) '
             (check_literal)   '%' != 'Z'
             (check_literal) check_literal: ret0

             (check_literal) check_literal:lit=' "' idx=16 'Z%-   ABC%*1.1) '
             (check_literal) dropping space
             (check_literal) check_literal:After drop space:'"' idx=16 'Z%-   ABC%*1.1) '
             (check_literal)   '"' != 'Z'
             (check_literal) check_literal: ret0

             (check_number) check_number:

              (check_float) check_float:
              (isfloatdigit) isfloatdigit:
              (check_float) check_float: ret0

              (check_integer) check_integer: 'Z%-   ABC%*1.1) '
              (check_integer) check_integer:ret0
             (check_number) check_number: ret0

             (check_variable) check_variable:

              (check_vname) check_vname 'Z%-   ABC%*1.1) ':
              (check_vname) check_vname ret1 '%-   ABC%*1.1) ':
             (check_variable) check_variable: '%-   ABC%*1.1) '
             (check_variable) check_variable: Ary test '-   ABC%*1.1) '

              (check_literal) check_literal:lit='(' idx=18 '-   ABC%*1.1) '
              (check_literal) check_literal:After drop space:'(' idx=18 '-   ABC%*1.1) '
              (check_literal)   '(' != '-'
              (check_literal) check_literal: ret0
             (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
            (check_variable) check_variable:ret1 
           (check_atom) check_atom:ret1
          (check_eitem) check_eitem:ret1

          (scan_eitem) scan_eitem:

           (check_operator) check_operator: Z%-   ABC%*1.1) 

            (check_literal) check_literal:lit=',' idx=16 'Z%-   ABC%*1.1) '
            (check_literal) check_literal:After drop space:',' idx=16 'Z%-   ABC%*1.1) '
            (check_literal)   ',' != 'Z'
            (check_literal) check_literal: ret0
           (check_operator) check_operator:ret0

           (check_function) check_function: 'Z%-   ABC%*1.1) '
           (check_function) check_function: ret0

           (check_atom) check_atom:

            (check_literal) check_literal:lit=' %' idx=16 'Z%-   ABC%*1.1) '
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:'%' idx=16 'Z%-   ABC%*1.1) '
            (check_literal)   '%' != 'Z'
            (check_literal) check_literal: ret0

            (check_literal) check_literal:lit=' "' idx=16 'Z%-   ABC%*1.1) '
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:'"' idx=16 'Z%-   ABC%*1.1) '
            (check_literal)   '"' != 'Z'
            (check_literal) check_literal: ret0

            (check_number) check_number:

             (check_float) check_float:
             (isfloatdigit) isfloatdigit:
             (check_float) check_float: ret0

             (check_integer) check_integer: 'Z%-   ABC%*1.1) '
             (check_integer) check_integer:ret0
            (check_number) check_number: ret0

            (check_variable) check_variable:

             (check_vname) check_vname 'Z%-   ABC%*1.1) ':
             (check_vname) check_vname ret1 '%-   ABC%*1.1) ':
            (check_variable) check_variable: '%-   ABC%*1.1) '
            (check_variable) check_variable: Ary test '-   ABC%*1.1) '

             (check_literal) check_literal:lit='(' idx=18 '-   ABC%*1.1) '
             (check_literal) check_literal:After drop space:'(' idx=18 '-   ABC%*1.1) '
             (check_literal)   '(' != '-'
             (check_literal) check_literal: ret0
            (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
           (check_variable) check_variable:ret1 
          (check_atom) check_atom:ret1

          (scan_atom) scan_atom:

           (check_literal) check_literal:lit=' %' idx=16 'Z%-   ABC%*1.1) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'%' idx=16 'Z%-   ABC%*1.1) '
           (check_literal)   '%' != 'Z'
           (check_literal) check_literal: ret0

           (check_literal) check_literal:lit=' "' idx=16 'Z%-   ABC%*1.1) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'"' idx=16 'Z%-   ABC%*1.1) '
           (check_literal)   '"' != 'Z'
           (check_literal) check_literal: ret0

           (check_number) check_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret0

            (check_integer) check_integer: 'Z%-   ABC%*1.1) '
            (check_integer) check_integer:ret0
           (check_number) check_number: ret0

           (check_variable) check_variable:

            (check_vname) check_vname 'Z%-   ABC%*1.1) ':
            (check_vname) check_vname ret1 '%-   ABC%*1.1) ':
           (check_variable) check_variable: '%-   ABC%*1.1) '
           (check_variable) check_variable: Ary test '-   ABC%*1.1) '

            (check_literal) check_literal:lit='(' idx=18 '-   ABC%*1.1) '
            (check_literal) check_literal:After drop space:'(' idx=18 '-   ABC%*1.1) '
            (check_literal)   '(' != '-'
            (check_literal) check_literal: ret0
           (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
          (check_variable) check_variable:ret1 

          (scan_variable) scan_variable:

           (scan_vname) scan_vname: 'Z%-   ABC%*1.1) '
           (scan_vname) scan_vname: ret1 'Z'
          (scan_variable) scan_variable: '%-   ABC%*1.1) ' vname='Z'
          (scan_variable) scan_variable: Ary test '-   ABC%*1.1) '

           (check_literal) check_literal:lit='(' idx=18 '-   ABC%*1.1) '
           (check_literal) check_literal:After drop space:'(' idx=18 '-   ABC%*1.1) '
           (check_literal)   '(' != '-'
           (check_literal) check_literal: ret0
          (scan_variable) scan_variable:ret1 vname='Z%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'Z%' exptype:i
         (operator_precedence) 
* is operator
         (token_is_function) 
token_is_function:
         (token_is_function) 
token_is_function:Z% is not function
token_is_variable: tok:'Z%'
         (token_is_function) 
token_is_function:
         (token_is_function) 
token_is_function:Z% is not function
         (init_get_name) 
init_get_name:'Z%'
         (init_get_name) 
init_get_name:'Z%'
         (get_name) 
get_name:gn:'Z%'
process_token:type:i req_type:i
modify_expression_type:Inittype:i Intype:i Outtype:i
( output_variable) [i,(i U )] i i Z%
         (print_var_info) 
VAR INFO: '                Z%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
         (scan_atom) scan_atom:ret1

         (check_eitem) check_eitem: '-   ABC%*1.1) '

          (check_operator) check_operator: -   ABC%*1.1) 

           (check_literal) check_literal:lit=',' idx=18 '-   ABC%*1.1) '
           (check_literal) check_literal:After drop space:',' idx=18 '-   ABC%*1.1) '
           (check_literal)   ',' != '-'
           (check_literal) check_literal: ret0
          (check_operator) check_operator: ret1
         (check_eitem) check_eitem:ret1

         (scan_eitem) scan_eitem:

          (check_operator) check_operator: -   ABC%*1.1) 

           (check_literal) check_literal:lit=',' idx=18 '-   ABC%*1.1) '
           (check_literal) check_literal:After drop space:',' idx=18 '-   ABC%*1.1) '
           (check_literal)   ',' != '-'
           (check_literal) check_literal: ret0
          (check_operator) check_operator: ret1

          (scan_operator) scan_operator: '-   ABC%*1.1) '

           (check_literal) check_literal:lit=',' idx=18 '-   ABC%*1.1) '
           (check_literal) check_literal:After drop space:',' idx=18 '-   ABC%*1.1) '
           (check_literal)   ',' != '-'
           (check_literal) check_literal: ret0
          (scan_operator) scan_operator: ret1 '   ABC%*1.1) '
   Frst:0 T:'-' exptype:i
         (operator_precedence) 
- is operator
         (operator_precedence) 
* is operator
'-' is operator
         (process_token) 
Token is operator o1 name:- o2 name:*
         (process_token) 
opr1:3 opr2:5
         (operator_precedence) 
* is operator
Pop 1
Pop '*'
         (op_stack_print) 
------------------
         (op_stack_print) 
Operator Stack     (5)

         (op_stack_print) 
000: = type:0
         (op_stack_print) 
001: + type:0
         (op_stack_print) 
002: ( type:16
         (op_stack_print) 
003: ( type:16
         (op_stack_print) 
004: + type:0
         (op_stack_print) 
------------------

         (operator_precedence) 
- is operator
         (operator_precedence) 
* is operator
( output_operator) [i,(i U )] i i *
         (token_is_function) 
token_is_function:
         (token_is_function) 
token_is_function:* is not function
         (operator_precedence) 
+ is operator
         (operator_precedence) 
+ is operator
         (operator_left_assoc) 
- is operator
Push 1
 Push:'-'
         (op_stack_print) 
------------------
         (op_stack_print) 
Operator Stack     (6)

         (op_stack_print) 
000: = type:0
         (op_stack_print) 
001: + type:0
         (op_stack_print) 
002: ( type:16
         (op_stack_print) 
003: ( type:16
         (op_stack_print) 
004: + type:0
         (op_stack_print) 
005: - type:0
         (op_stack_print) 
------------------


          (check_eitem) check_eitem: '   ABC%*1.1) '

           (check_operator) check_operator:    ABC%*1.1) 

            (check_literal) check_literal:lit=',' idx=22 'ABC%*1.1) '
            (check_literal) check_literal:After drop space:',' idx=22 'ABC%*1.1) '
            (check_literal)   ',' != 'A'
            (check_literal) check_literal: ret0
           (check_operator) check_operator:ret0

           (check_function) check_function: 'ABC%*1.1) '
           (check_function) check_function: ret0

           (check_atom) check_atom:

            (check_literal) check_literal:lit=' %' idx=19 '   ABC%*1.1) '
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:'%' idx=22 'ABC%*1.1) '
            (check_literal)   '%' != 'A'
            (check_literal) check_literal: ret0

            (check_literal) check_literal:lit=' "' idx=19 '   ABC%*1.1) '
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:'"' idx=22 'ABC%*1.1) '
            (check_literal)   '"' != 'A'
            (check_literal) check_literal: ret0

            (check_number) check_number:

             (check_float) check_float:
             (isfloatdigit) isfloatdigit:
             (check_float) check_float: ret0

             (check_integer) check_integer: 'ABC%*1.1) '
             (check_integer) check_integer:ret0
            (check_number) check_number: ret0

            (check_variable) check_variable:

             (check_vname) check_vname 'ABC%*1.1) ':
             (check_vname) check_vname ret1 '%*1.1) ':
            (check_variable) check_variable: '%*1.1) '
            (check_variable) check_variable: Ary test '*1.1) '

             (check_literal) check_literal:lit='(' idx=26 '*1.1) '
             (check_literal) check_literal:After drop space:'(' idx=26 '*1.1) '
             (check_literal)   '(' != '*'
             (check_literal) check_literal: ret0
            (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
           (check_variable) check_variable:ret1 
          (check_atom) check_atom:ret1
         (check_eitem) check_eitem:ret1

         (scan_eitem) scan_eitem:

          (check_operator) check_operator:    ABC%*1.1) 

           (check_literal) check_literal:lit=',' idx=22 'ABC%*1.1) '
           (check_literal) check_literal:After drop space:',' idx=22 'ABC%*1.1) '
           (check_literal)   ',' != 'A'
           (check_literal) check_literal: ret0
          (check_operator) check_operator:ret0

          (check_function) check_function: 'ABC%*1.1) '
          (check_function) check_function: ret0

          (check_atom) check_atom:

           (check_literal) check_literal:lit=' %' idx=19 '   ABC%*1.1) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'%' idx=22 'ABC%*1.1) '
           (check_literal)   '%' != 'A'
           (check_literal) check_literal: ret0

           (check_literal) check_literal:lit=' "' idx=19 '   ABC%*1.1) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'"' idx=22 'ABC%*1.1) '
           (check_literal)   '"' != 'A'
           (check_literal) check_literal: ret0

           (check_number) check_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret0

            (check_integer) check_integer: 'ABC%*1.1) '
            (check_integer) check_integer:ret0
           (check_number) check_number: ret0

           (check_variable) check_variable:

            (check_vname) check_vname 'ABC%*1.1) ':
            (check_vname) check_vname ret1 '%*1.1) ':
           (check_variable) check_variable: '%*1.1) '
           (check_variable) check_variable: Ary test '*1.1) '

            (check_literal) check_literal:lit='(' idx=26 '*1.1) '
            (check_literal) check_literal:After drop space:'(' idx=26 '*1.1) '
            (check_literal)   '(' != '*'
            (check_literal) check_literal: ret0
           (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
          (check_variable) check_variable:ret1 
         (check_atom) check_atom:ret1

         (scan_atom) scan_atom:

          (check_literal) check_literal:lit=' %' idx=19 '   ABC%*1.1) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=22 'ABC%*1.1) '
          (check_literal)   '%' != 'A'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=19 '   ABC%*1.1) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=22 'ABC%*1.1) '
          (check_literal)   '"' != 'A'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: 'ABC%*1.1) '
           (check_integer) check_integer:ret0
          (check_number) check_number: ret0

          (check_variable) check_variable:

           (check_vname) check_vname 'ABC%*1.1) ':
           (check_vname) check_vname ret1 '%*1.1) ':
          (check_variable) check_variable: '%*1.1) '
          (check_variable) check_variable: Ary test '*1.1) '

           (check_literal) check_literal:lit='(' idx=26 '*1.1) '
           (check_literal) check_literal:After drop space:'(' idx=26 '*1.1) '
           (check_literal)   '(' != '*'
           (check_literal) check_literal: ret0
          (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
         (check_variable) check_variable:ret1 

         (scan_variable) scan_variable:

          (scan_vname) scan_vname: '   ABC%*1.1) '
          (scan_vname) scan_vname: ret1 'ABC'
         (scan_variable) scan_variable: '%*1.1) ' vname='ABC'
         (scan_variable) scan_variable: Ary test '*1.1) '

          (check_literal) check_literal:lit='(' idx=26 '*1.1) '
          (check_literal) check_literal:After drop space:'(' idx=26 '*1.1) '
          (check_literal)   '(' != '*'
          (check_literal) check_literal: ret0
         (scan_variable) scan_variable:ret1 vname='ABC%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'ABC%' exptype:i
        (operator_precedence) 
- is operator
        (token_is_function) 
token_is_function:
        (token_is_function) 
token_is_function:ABC% is not function
token_is_variable: tok:'ABC%'
        (token_is_function) 
token_is_function:
        (token_is_function) 
token_is_function:ABC% is not function
        (init_get_name) 
init_get_name:'ABC%'
        (init_get_name) 
init_get_name:'ABC%'
        (get_name) 
get_name:gn:'ABC%'
process_token:type:i req_type:i
modify_expression_type:Inittype:i Intype:i Outtype:i
( output_variable) [i,(i U )] i i ABC%
        (print_var_info) 
VAR INFO: '              ABC%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
        (scan_atom) scan_atom:ret1

        (check_eitem) check_eitem: '*1.1) '

         (check_operator) check_operator: *1.1) 

          (check_literal) check_literal:lit=',' idx=26 '*1.1) '
          (check_literal) check_literal:After drop space:',' idx=26 '*1.1) '
          (check_literal)   ',' != '*'
          (check_literal) check_literal: ret0
         (check_operator) check_operator: ret1
        (check_eitem) check_eitem:ret1

        (scan_eitem) scan_eitem:

         (check_operator) check_operator: *1.1) 

          (check_literal) check_literal:lit=',' idx=26 '*1.1) '
          (check_literal) check_literal:After drop space:',' idx=26 '*1.1) '
          (check_literal)   ',' != '*'
          (check_literal) check_literal: ret0
         (check_operator) check_operator: ret1

         (scan_operator) scan_operator: '*1.1) '

          (check_literal) check_literal:lit=',' idx=26 '*1.1) '
          (check_literal) check_literal:After drop space:',' idx=26 '*1.1) '
          (check_literal)   ',' != '*'
          (check_literal) check_literal: ret0
         (scan_operator) scan_operator: ret1 '1.1) '
   Frst:0 T:'*' exptype:i
        (operator_precedence) 
* is operator
        (operator_precedence) 
- is operator
'*' is operator
        (process_token) 
Token is operator o1 name:* o2 name:-
        (process_token) 
opr1:5 opr2:3
        (operator_precedence) 
- is operator
        (operator_precedence) 
- is operator
Push 1
 Push:'*'
        (op_stack_print) 
------------------
        (op_stack_print) 
Operator Stack     (7)

        (op_stack_print) 
000: = type:0
        (op_stack_print) 
001: + type:0
        (op_stack_print) 
002: ( type:16
        (op_stack_print) 
003: ( type:16
        (op_stack_print) 
004: + type:0
        (op_stack_print) 
005: - type:0
        (op_stack_print) 
006: * type:0
        (op_stack_print) 
------------------


         (check_eitem) check_eitem: '1.1) '

          (check_operator) check_operator: 1.1) 

           (check_literal) check_literal:lit=',' idx=27 '1.1) '
           (check_literal) check_literal:After drop space:',' idx=27 '1.1) '
           (check_literal)   ',' != '1'
           (check_literal) check_literal: ret0
          (check_operator) check_operator:ret0

          (check_function) check_function: '1.1) '
          (check_function) check_function: ret0

          (check_atom) check_atom:

           (check_literal) check_literal:lit=' %' idx=27 '1.1) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'%' idx=27 '1.1) '
           (check_literal)   '%' != '1'
           (check_literal) check_literal: ret0

           (check_literal) check_literal:lit=' "' idx=27 '1.1) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'"' idx=27 '1.1) '
           (check_literal)   '"' != '1'
           (check_literal) check_literal: ret0

           (check_number) check_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret1
           (check_number) check_number: ret1
          (check_atom) check_atom:ret1
         (check_eitem) check_eitem:ret1

         (scan_eitem) scan_eitem:

          (check_operator) check_operator: 1.1) 

           (check_literal) check_literal:lit=',' idx=27 '1.1) '
           (check_literal) check_literal:After drop space:',' idx=27 '1.1) '
           (check_literal)   ',' != '1'
           (check_literal) check_literal: ret0
          (check_operator) check_operator:ret0

          (check_function) check_function: '1.1) '
          (check_function) check_function: ret0

          (check_atom) check_atom:

           (check_literal) check_literal:lit=' %' idx=27 '1.1) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'%' idx=27 '1.1) '
           (check_literal)   '%' != '1'
           (check_literal) check_literal: ret0

           (check_literal) check_literal:lit=' "' idx=27 '1.1) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'"' idx=27 '1.1) '
           (check_literal)   '"' != '1'
           (check_literal) check_literal: ret0

           (check_number) check_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret1
           (check_number) check_number: ret1
          (check_atom) check_atom:ret1

          (scan_atom) scan_atom:

           (check_literal) check_literal:lit=' %' idx=27 '1.1) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'%' idx=27 '1.1) '
           (check_literal)   '%' != '1'
           (check_literal) check_literal: ret0

           (check_literal) check_literal:lit=' "' idx=27 '1.1) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'"' idx=27 '1.1) '
           (check_literal)   '"' != '1'
           (check_literal) check_literal: ret0

           (check_number) check_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret1
           (check_number) check_number: ret1

           (scan_number) scan_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret1

            (scan_float) scan_float:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (scan_float) scan_float: ret1
   Frst:0 T:'1.1' exptype:i
           (operator_precedence) 
* is operator
modify_expression_type:Inittype:i Intype:f Outtype:f
(    output_float) [f,(i U )] f f 1.1
           (scan_atom) scan_atom:ret1

           (check_eitem) check_eitem: ') '

            (check_operator) check_operator: ) 

             (check_literal) check_literal:lit=',' idx=30 ') '
             (check_literal) check_literal:After drop space:',' idx=30 ') '
             (check_literal)   ',' != ')'
             (check_literal) check_literal: ret0
            (check_operator) check_operator:ret0

            (check_function) check_function: ') '
            (check_function) check_function: ret0

            (check_atom) check_atom:

             (check_literal) check_literal:lit=' %' idx=30 ') '
             (check_literal) dropping space
             (check_literal) check_literal:After drop space:'%' idx=30 ') '
             (check_literal)   '%' != ')'
             (check_literal) check_literal: ret0

             (check_literal) check_literal:lit=' "' idx=30 ') '
             (check_literal) dropping space
             (check_literal) check_literal:After drop space:'"' idx=30 ') '
             (check_literal)   '"' != ')'
             (check_literal) check_literal: ret0

             (check_number) check_number:

              (check_float) check_float:
              (isfloatdigit) isfloatdigit:
              (check_float) check_float: ret0

              (check_integer) check_integer: ') '
              (check_integer) check_integer:ret0
             (check_number) check_number: ret0

             (check_variable) check_variable:

              (check_vname) check_vname ') ':
              (check_vname) check_vname ret0 ') ':
             (check_variable) check_variable:ret0 
            (check_atom) check_atom:ret1

            (check_sub_expr) check_sub_expr:

             (check_literal) check_literal:lit=' (' idx=30 ') '
             (check_literal) dropping space
             (check_literal) check_literal:After drop space:'(' idx=30 ') '
             (check_literal)   '(' != ')'
             (check_literal) check_literal: ret0
            (check_sub_expr) check_sub_expr: ret0
           (check_eitem) check_eitem:ret0
          (scan_expression) scan_expression: ret1 ') '

          (scan_literal) scan_literal:lit=' )' ') '
          (scan_literal) scan_literal:After drop space:) 
          (scan_literal) scan_literal:while loop:) 
   Frst:0 T:')' exptype:f
          (operator_precedence) 
* is operator
          (process_token) 
Pop 3
Pop '*'
          (op_stack_print) 
------------------
          (op_stack_print) 
Operator Stack     (6)

          (op_stack_print) 
000: = type:0
          (op_stack_print) 
001: + type:0
          (op_stack_print) 
002: ( type:16
          (op_stack_print) 
003: ( type:16
          (op_stack_print) 
004: + type:0
          (op_stack_print) 
005: - type:0
          (op_stack_print) 
------------------

( output_operator) [f,(i U )] i i *
          (token_is_function) 
token_is_function:
          (token_is_function) 
token_is_function:* is not function
          (process_token) 
Pop 3
Pop '-'
          (op_stack_print) 
------------------
          (op_stack_print) 
Operator Stack     (5)

          (op_stack_print) 
000: = type:0
          (op_stack_print) 
001: + type:0
          (op_stack_print) 
002: ( type:16
          (op_stack_print) 
003: ( type:16
          (op_stack_print) 
004: + type:0
          (op_stack_print) 
------------------

( output_operator) [f,(i U )] i i -
          (token_is_function) 
token_is_function:
          (token_is_function) 
token_is_function:- is not function
          (process_token) 
Pop 3
Pop '+'
          (op_stack_print) 
------------------
          (op_stack_print) 
Operator Stack     (4)

          (op_stack_print) 
000: = type:0
          (op_stack_print) 
001: + type:0
          (op_stack_print) 
002: ( type:16
          (op_stack_print) 
003: ( type:16
          (op_stack_print) 
------------------

( output_operator) [f,(i U )] i i +
          (token_is_function) 
token_is_function:
          (token_is_function) 
token_is_function:+ is not function
Pop 4
Pop '('
          (op_stack_print) 
------------------
          (op_stack_print) 
Operator Stack     (3)

          (op_stack_print) 
000: = type:0
          (op_stack_print) 
001: + type:0
          (op_stack_print) 
002: ( type:16
          (op_stack_print) 
------------------

(  output_sub_end)
          (token_is_function) 
token_is_function:
          (token_is_function) 
token_is_function:( is not function
(  output_sub_end)
          (scan_literal) scan_literal:ret1
   Frst:0 T:')' exptype:U
Pop 4
Pop '('
         (op_stack_print) 
------------------
         (op_stack_print) 
Operator Stack     (2)

         (op_stack_print) 
000: = type:0
         (op_stack_print) 
001: + type:0
         (op_stack_print) 
------------------

(  output_sub_end)
         (token_is_function) 
token_is_function:
         (token_is_function) 
token_is_function:+ is not function
(  output_sub_end)
         (scan_sub_expr) scan_sub_expr:ret1

         (check_eitem) check_eitem: ' '

          (check_operator) check_operator:  

           (check_literal) check_literal:lit=',' idx=32 ''
           (check_literal) check_literal:After drop space:',' idx=32 ''
           (check_literal) check_literal  ret0 Empty test string
          (check_operator) check_operator:ret0

          (check_function) check_function: ''
          (check_function) check_function: ret0

          (check_atom) check_atom:

           (check_literal) check_literal:lit=' %' idx=31 ' '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'%' idx=32 ''
           (check_literal) check_literal  ret0 Empty test string

           (check_literal) check_literal:lit=' "' idx=31 ' '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'"' idx=32 ''
           (check_literal) check_literal  ret0 Empty test string

           (check_number) check_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret0

            (check_integer) check_integer: ''
            (check_integer) check_integer:ret0
           (check_number) check_number: ret0

           (check_variable) check_variable:

            (check_vname) check_vname '':
            (check_vname) check_vname ret0 '':
           (check_variable) check_variable:ret0 
          (check_atom) check_atom:ret1

          (check_sub_expr) check_sub_expr:

           (check_literal) check_literal:lit=' (' idx=31 ' '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'(' idx=32 ''
           (check_literal) check_literal  ret0 Empty test string
          (check_sub_expr) check_sub_expr: ret0
         (check_eitem) check_eitem:ret0
        (scan_expression) scan_expression: ret1 ' '
       (scan_assignment) scan_assignment: ret1
Finalise stack
Pop '+'
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (1)

      (op_stack_print) 
000: = type:0
      (op_stack_print) 
------------------

( output_operator) [i,()] i i +
      (token_is_function) 
token_is_function:
      (token_is_function) 
token_is_function:+ is not function
Pop '='
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (0)

      (op_stack_print) 
------------------

( output_operator) [i,()] i i =
      (token_is_function) 
token_is_function:
      (token_is_function) 
token_is_function:= is not function
      (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'A'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'A%'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '*'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'Z%'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '*'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'ABC%'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FLT          f rq:f '1.1'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '*'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '-'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '+'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '+'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '='  0:
=================
 BE:A
type_check_stack_push: 'A'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (1)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'A' type:f (1)
 BE:A%
type_check_stack_push: 'A%'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (2)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A%' type:0
      (type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'A' type:f (1)
001: 'A%' type:i (0)
 BE:

Type Check Stack (2)

000: 'A' type:f (1)
001: 'A%' type:i (0)
 BE:

Type Check Stack (2)

000: 'A' type:f (1)
001: 'A%' type:i (0)
 BE:2
type_check_stack_push: '2'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (3)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A%' type:0
      (type_check_stack_print) 
002: '2' type:0
      (type_check_stack_print) 
------------------


Type Check Stack (3)

000: 'A' type:f (1)
001: 'A%' type:i (0)
002: '2' type:i (0)
 BE:3
type_check_stack_push: '3'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (4)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A%' type:0
      (type_check_stack_print) 
002: '2' type:0
      (type_check_stack_print) 
003: '3' type:0
      (type_check_stack_print) 
------------------


Type Check Stack (4)

000: 'A' type:f (1)
001: 'A%' type:i (0)
002: '2' type:i (0)
003: '3' type:i (0)
 BE:*
BUFF_ID_OPERATOR
Found operator *
type_check_stack_pop: '3'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (3)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A%' type:0
      (type_check_stack_print) 
002: '2' type:0
      (type_check_stack_print) 
------------------

type_check_stack_pop: '2'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (2)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A%' type:0
      (type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (3)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A%' type:0
      (type_check_stack_print) 
002: '000' type:0
      (type_check_stack_print) 
------------------


Type Check Stack (3)

000: 'A' type:f (1)
001: 'A%' type:i (0)
002: '000' type:i (0)
 BE:3
type_check_stack_push: '3'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (4)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A%' type:0
      (type_check_stack_print) 
002: '000' type:0
      (type_check_stack_print) 
003: '3' type:0
      (type_check_stack_print) 
------------------


Type Check Stack (4)

000: 'A' type:f (1)
001: 'A%' type:i (0)
002: '000' type:i (0)
003: '3' type:i (0)
 BE:Z%
type_check_stack_push: 'Z%'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (5)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A%' type:0
      (type_check_stack_print) 
002: '000' type:0
      (type_check_stack_print) 
003: '3' type:0
      (type_check_stack_print) 
004: 'Z%' type:0
      (type_check_stack_print) 
------------------


Type Check Stack (5)

000: 'A' type:f (1)
001: 'A%' type:i (0)
002: '000' type:i (0)
003: '3' type:i (0)
004: 'Z%' type:i (0)
 BE:*
BUFF_ID_OPERATOR
Found operator *
type_check_stack_pop: 'Z%'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (4)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A%' type:0
      (type_check_stack_print) 
002: '000' type:0
      (type_check_stack_print) 
003: '3' type:0
      (type_check_stack_print) 
------------------

type_check_stack_pop: '3'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (3)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A%' type:0
      (type_check_stack_print) 
002: '000' type:0
      (type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (4)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A%' type:0
      (type_check_stack_print) 
002: '000' type:0
      (type_check_stack_print) 
003: '000' type:0
      (type_check_stack_print) 
------------------


Type Check Stack (4)

000: 'A' type:f (1)
001: 'A%' type:i (0)
002: '000' type:i (0)
003: '000' type:i (0)
 BE:ABC%
type_check_stack_push: 'ABC%'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (5)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A%' type:0
      (type_check_stack_print) 
002: '000' type:0
      (type_check_stack_print) 
003: '000' type:0
      (type_check_stack_print) 
004: 'ABC%' type:0
      (type_check_stack_print) 
------------------


Type Check Stack (5)

000: 'A' type:f (1)
001: 'A%' type:i (0)
002: '000' type:i (0)
003: '000' type:i (0)
004: 'ABC%' type:i (0)
 BE:1.1
type_check_stack_push: '1.1'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (6)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A%' type:0
      (type_check_stack_print) 
002: '000' type:0
      (type_check_stack_print) 
003: '000' type:0
      (type_check_stack_print) 
004: 'ABC%' type:0
      (type_check_stack_print) 
005: '1.1' type:1
      (type_check_stack_print) 
------------------


Type Check Stack (6)

000: 'A' type:f (1)
001: 'A%' type:i (0)
002: '000' type:i (0)
003: '000' type:i (0)
004: 'ABC%' type:i (0)
005: '1.1' type:f (1)
 BE:*
BUFF_ID_OPERATOR
Found operator *
type_check_stack_pop: '1.1'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (5)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A%' type:0
      (type_check_stack_print) 
002: '000' type:0
      (type_check_stack_print) 
003: '000' type:0
      (type_check_stack_print) 
004: 'ABC%' type:0
      (type_check_stack_print) 
------------------

type_check_stack_pop: 'ABC%'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (4)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A%' type:0
      (type_check_stack_print) 
002: '000' type:0
      (type_check_stack_print) 
003: '000' type:0
      (type_check_stack_print) 
------------------

 Mutable type 1 0
type_with_least_conversion_from: f i => f
type_with_least_conversion_from: f i => f
 Autoconversion
 --------------
 Op1: type:1 req type:1
 Op2: type:0 req type:0
 BE:  type:1 req type:1
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f 'A'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'A%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 6 5
(dump_exp_buffer2) N8 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_VARIABLE     i rq:i 'Z%'  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 9 8
(dump_exp_buffer2) N11 EXP_BUFF_ID_VARIABLE     i rq:i 'ABC%'  0:
(dump_exp_buffer2) N12 EXP_BUFF_ID_FLT          f rq:f '1.1'  0:
=================
 Insert after 11 exp_buffer2_i:12
   Found at i:10
   Copied 11 to 12:
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f 'A'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'A%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 6 5
(dump_exp_buffer2) N8 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_VARIABLE     i rq:i 'Z%'  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 9 8
(dump_exp_buffer2) N11 EXP_BUFF_ID_VARIABLE     i rq:i 'ABC%'  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 12 11
(dump_exp_buffer2) N12 EXP_BUFF_ID_FLT          f rq:f '1.1'  0:
=================
type_check_stack_push: '000'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (5)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A%' type:0
      (type_check_stack_print) 
002: '000' type:0
      (type_check_stack_print) 
003: '000' type:0
      (type_check_stack_print) 
004: '000' type:1
      (type_check_stack_print) 
------------------


Type Check Stack (5)

000: 'A' type:f (1)
001: 'A%' type:i (0)
002: '000' type:i (0)
003: '000' type:i (0)
004: '000' type:f (1)
 BE:-
BUFF_ID_OPERATOR
Found operator -
type_check_stack_pop: '000'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (4)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A%' type:0
      (type_check_stack_print) 
002: '000' type:0
      (type_check_stack_print) 
003: '000' type:0
      (type_check_stack_print) 
------------------

type_check_stack_pop: '000'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (3)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A%' type:0
      (type_check_stack_print) 
002: '000' type:0
      (type_check_stack_print) 
------------------

 Mutable type 1 0
type_with_least_conversion_from: f i => f
type_with_least_conversion_from: f i => f
 Autoconversion
 --------------
 Op1: type:1 req type:1
 Op2: type:0 req type:0
 BE:  type:1 req type:1
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f 'A'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'A%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 6 5
(dump_exp_buffer2) N8 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_VARIABLE     i rq:i 'Z%'  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 9 8
(dump_exp_buffer2) N11 EXP_BUFF_ID_VARIABLE     i rq:i 'ABC%'  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 12 11
(dump_exp_buffer2) N12 EXP_BUFF_ID_FLT          f rq:f '1.1'  0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_OPERATOR     f rq:f '*'  2: 12 11
=================
 Insert after 10 exp_buffer2_i:14
   Found at i:9
   Copied 13 to 14:
   Copied 12 to 13:
   Copied 11 to 12:
   Copied 10 to 11:
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f 'A'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'A%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 6 5
(dump_exp_buffer2) N8 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_VARIABLE     i rq:i 'Z%'  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 9 8
(dump_exp_buffer2) N16 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 13 10
(dump_exp_buffer2) N11 EXP_BUFF_ID_VARIABLE     i rq:i 'ABC%'  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 12 11
(dump_exp_buffer2) N12 EXP_BUFF_ID_FLT          f rq:f '1.1'  0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_OPERATOR     f rq:f '*'  2: 12 11
=================
type_check_stack_push: '000'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (4)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A%' type:0
      (type_check_stack_print) 
002: '000' type:0
      (type_check_stack_print) 
003: '000' type:1
      (type_check_stack_print) 
------------------


Type Check Stack (4)

000: 'A' type:f (1)
001: 'A%' type:i (0)
002: '000' type:i (0)
003: '000' type:f (1)
 BE:+
BUFF_ID_OPERATOR
Found operator +
type_check_stack_pop: '000'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (3)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A%' type:0
      (type_check_stack_print) 
002: '000' type:0
      (type_check_stack_print) 
------------------

type_check_stack_pop: '000'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (2)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A%' type:0
      (type_check_stack_print) 
------------------

 Mutable type 1 0
type_with_least_conversion_from: f i => f
type_with_least_conversion_from: f i => f
 Autoconversion
 --------------
 Op1: type:1 req type:1
 Op2: type:0 req type:0
 BE:  type:1 req type:1
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f 'A'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'A%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 6 5
(dump_exp_buffer2) N8 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_VARIABLE     i rq:i 'Z%'  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 9 8
(dump_exp_buffer2) N16 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 13 10
(dump_exp_buffer2) N11 EXP_BUFF_ID_VARIABLE     i rq:i 'ABC%'  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 12 11
(dump_exp_buffer2) N12 EXP_BUFF_ID_FLT          f rq:f '1.1'  0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_OPERATOR     f rq:f '*'  2: 12 11
(dump_exp_buffer2) N15 EXP_BUFF_ID_OPERATOR     f rq:f '-'  2: 13 10
=================
 Insert after 7 exp_buffer2_i:16
   Found at i:6
   Copied 15 to 16:
   Copied 14 to 15:
   Copied 13 to 14:
   Copied 12 to 13:
   Copied 11 to 12:
   Copied 10 to 11:
   Copied 9 to 10:
   Copied 8 to 9:
   Copied 7 to 8:
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f 'A'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'A%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 6 5
(dump_exp_buffer2) N18 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 15 7
(dump_exp_buffer2) N8 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_VARIABLE     i rq:i 'Z%'  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 9 8
(dump_exp_buffer2) N16 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 13 10
(dump_exp_buffer2) N11 EXP_BUFF_ID_VARIABLE     i rq:i 'ABC%'  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 12 11
(dump_exp_buffer2) N12 EXP_BUFF_ID_FLT          f rq:f '1.1'  0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_OPERATOR     f rq:f '*'  2: 12 11
(dump_exp_buffer2) N15 EXP_BUFF_ID_OPERATOR     f rq:f '-'  2: 13 10
=================
type_check_stack_push: '000'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (3)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A%' type:0
      (type_check_stack_print) 
002: '000' type:1
      (type_check_stack_print) 
------------------


Type Check Stack (3)

000: 'A' type:f (1)
001: 'A%' type:i (0)
002: '000' type:f (1)
 BE:

Type Check Stack (3)

000: 'A' type:f (1)
001: 'A%' type:i (0)
002: '000' type:f (1)
 BE:

Type Check Stack (3)

000: 'A' type:f (1)
001: 'A%' type:i (0)
002: '000' type:f (1)
 BE:

Type Check Stack (3)

000: 'A' type:f (1)
001: 'A%' type:i (0)
002: '000' type:f (1)
 BE:

Type Check Stack (3)

000: 'A' type:f (1)
001: 'A%' type:i (0)
002: '000' type:f (1)
 BE:+
BUFF_ID_OPERATOR
Found operator +
type_check_stack_pop: '000'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (2)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: 'A%' type:0
      (type_check_stack_print) 
------------------

type_check_stack_pop: 'A%'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (1)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
------------------

 Mutable type 1 0
type_with_least_conversion_from: f i => f
type_with_least_conversion_from: f i => f
 Autoconversion
 --------------
 Op1: type:1 req type:1
 Op2: type:0 req type:0
 BE:  type:1 req type:1
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f 'A'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'A%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 6 5
(dump_exp_buffer2) N18 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 15 7
(dump_exp_buffer2) N8 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_VARIABLE     i rq:i 'Z%'  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 9 8
(dump_exp_buffer2) N16 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 13 10
(dump_exp_buffer2) N11 EXP_BUFF_ID_VARIABLE     i rq:i 'ABC%'  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 12 11
(dump_exp_buffer2) N12 EXP_BUFF_ID_FLT          f rq:f '1.1'  0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_OPERATOR     f rq:f '*'  2: 12 11
(dump_exp_buffer2) N15 EXP_BUFF_ID_OPERATOR     f rq:f '-'  2: 13 10
(dump_exp_buffer2) N17 EXP_BUFF_ID_OPERATOR     f rq:f '+'  2: 15 7
(dump_exp_buffer2) N19 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N20 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N21 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N22 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
 Insert after 2 exp_buffer2_i:22
   Found at i:1
   Copied 21 to 22:
   Copied 20 to 21:
   Copied 19 to 20:
   Copied 18 to 19:
   Copied 17 to 18:
   Copied 16 to 17:
   Copied 15 to 16:
   Copied 14 to 15:
   Copied 13 to 14:
   Copied 12 to 13:
   Copied 11 to 12:
   Copied 10 to 11:
   Copied 9 to 10:
   Copied 8 to 9:
   Copied 7 to 8:
   Copied 6 to 7:
   Copied 5 to 6:
   Copied 4 to 5:
   Copied 3 to 4:
   Copied 2 to 3:
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f 'A'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'A%'  0:
(dump_exp_buffer2) N24 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 17 2
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 6 5
(dump_exp_buffer2) N18 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 15 7
(dump_exp_buffer2) N8 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_VARIABLE     i rq:i 'Z%'  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 9 8
(dump_exp_buffer2) N16 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 13 10
(dump_exp_buffer2) N11 EXP_BUFF_ID_VARIABLE     i rq:i 'ABC%'  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 12 11
(dump_exp_buffer2) N12 EXP_BUFF_ID_FLT          f rq:f '1.1'  0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_OPERATOR     f rq:f '*'  2: 12 11
(dump_exp_buffer2) N15 EXP_BUFF_ID_OPERATOR     f rq:f '-'  2: 13 10
(dump_exp_buffer2) N17 EXP_BUFF_ID_OPERATOR     f rq:f '+'  2: 15 7
(dump_exp_buffer2) N19 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N20 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N21 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N22 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
type_check_stack_push: '000'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (2)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
001: '000' type:1
      (type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'A' type:f (1)
001: '000' type:f (1)
 BE::=
BUFF_ID_OPERATOR
Found operator :=
type_check_stack_pop: '000'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (1)

      (type_check_stack_print) 
000: 'A' type:1
      (type_check_stack_print) 
------------------

type_check_stack_pop: 'A'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (0)

      (type_check_stack_print) 
------------------

 Mutable type 1 1
type_with_least_conversion_from: f f => f
type_with_least_conversion_from: f f => f
 Same type
type_check_stack_push: '000'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (1)

      (type_check_stack_print) 
000: '000' type:1
      (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:f (1)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'A'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'A%'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '*'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'Z%'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '*'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'ABC%'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FLT          f rq:f '1.1'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '*'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '-'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '+'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '+'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i ':='  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f 'A'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'A%'  0:
(dump_exp_buffer2) N24 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 17 2
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 6 5
(dump_exp_buffer2) N18 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 15 7
(dump_exp_buffer2) N8 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_VARIABLE     i rq:i 'Z%'  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 9 8
(dump_exp_buffer2) N16 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 13 10
(dump_exp_buffer2) N11 EXP_BUFF_ID_VARIABLE     i rq:i 'ABC%'  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 12 11
(dump_exp_buffer2) N12 EXP_BUFF_ID_FLT          f rq:f '1.1'  0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_OPERATOR     f rq:f '*'  2: 12 11
(dump_exp_buffer2) N15 EXP_BUFF_ID_OPERATOR     f rq:f '-'  2: 13 10
(dump_exp_buffer2) N17 EXP_BUFF_ID_OPERATOR     f rq:f '+'  2: 15 7
(dump_exp_buffer2) N19 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N20 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N21 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N22 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N23 EXP_BUFF_ID_OPERATOR     f rq:f '+'  2: 17 2
(dump_exp_buffer2) N25 EXP_BUFF_ID_OPERATOR     f rq:f ':='  2: 23 1
=================
      (process_expression_types) 
==INFIX==

Var: A ary:0
infix_stack_push: 'A'
Var: A% ary:0
infix_stack_push: 'A%'
infix_stack_push: '2'
infix_stack_push: '3'
infix_stack_pop: '3'
infix_stack_pop: '2'
infix_stack_push: '(2 * 3)'
infix_stack_push: '3'
Var: Z% ary:0
infix_stack_push: 'Z%'
infix_stack_pop: 'Z%'
infix_stack_pop: '3'
infix_stack_push: '(3 * Z%)'
Var: ABC% ary:0
infix_stack_push: 'ABC%'
infix_stack_push: '1.1'
infix_stack_pop: '1.1'
infix_stack_pop: 'ABC%'
infix_stack_push: '(ABC% * 1.1)'
infix_stack_pop: '(ABC% * 1.1)'
infix_stack_pop: '(3 * Z%)'
infix_stack_push: '((3 * Z%) - (ABC% * 1.1))'
infix_stack_pop: '((3 * Z%) - (ABC% * 1.1))'
infix_stack_pop: '(2 * 3)'
infix_stack_push: '((2 * 3) + ((3 * Z%) - (ABC% * 1.1)))'
infix_stack_pop: '((2 * 3) + ((3 * Z%) - (ABC% * 1.1)))'
infix_stack_pop: 'A%'
infix_stack_push: '(A% + ((2 * 3) + ((3 * Z%) - (ABC% * 1.1))))'
infix_stack_pop: '(A% + ((2 * 3) + ((3 * Z%) - (ABC% * 1.1))))'
infix_stack_pop: 'A'
infix_stack_push: '(A := (A% + ((2 * 3) + ((3 * Z%) - (ABC% * 1.1)))))'
infix_stack_pop: '(A := (A% + ((2 * 3) + ((3 * Z%) - (ABC% * 1.1)))))'
      (process_expression_types) ==(A := (A% + ((2 * 3) + ((3 * Z%) - (ABC% * 1.1)))))==
      (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     i rq:i A%  0:
(    output_qcode) N24 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 17 2
(    output_qcode) N3 EXP_BUFF_ID_SUB_START    U rq:?   0:
(    output_qcode) N4 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N5 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
(    output_qcode) N6 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(    output_qcode) N7 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 6 5
(    output_qcode) N18 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 15 7
(    output_qcode) N8 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(    output_qcode) N9 EXP_BUFF_ID_VARIABLE     i rq:i Z%  0:
(    output_qcode) N10 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 9 8
(    output_qcode) N16 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 13 10
(    output_qcode) N11 EXP_BUFF_ID_VARIABLE     i rq:i ABC%  0:
(    output_qcode) N14 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 12 11
(    output_qcode) N12 EXP_BUFF_ID_FLT          f rq:f 1.1  0:
(    output_qcode) N13 EXP_BUFF_ID_OPERATOR     f rq:f *  2: 12 11
(    output_qcode) N15 EXP_BUFF_ID_OPERATOR     f rq:f -  2: 13 10
(    output_qcode) N17 EXP_BUFF_ID_OPERATOR     f rq:f +  2: 15 7
(    output_qcode) N19 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N20 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N21 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N22 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N23 EXP_BUFF_ID_OPERATOR     f rq:f +  2: 17 2
(    output_qcode) N25 EXP_BUFF_ID_OPERATOR     f rq:f :=  2: 23 1

       (check_literal) check_literal:lit=':' idx=32 ''
       (check_literal) check_literal:After drop space:':' idx=32 ''
       (check_literal) check_literal  ret0 Empty test string
      (translate_file) 
cline scanned OK
************
**A% = 20 **
************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'A% = 20 ':
     (check_vname) check_vname ret1 '% = 20 ':
    (check_variable) check_variable: '% = 20 '
    (check_variable) check_variable: Ary test ' = 20 '

     (check_literal) check_literal:lit='(' idx=2 ' = 20 '
     (check_literal) check_literal:After drop space:'(' idx=2 ' = 20 '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=2 ' = 20 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=3 '= 20 '
   (check_literal) check_literal:After while(): 20 
   (check_literal) check_literal:ret1 

   (check_expression) check_expression: '20 '

    (check_eitem) check_eitem: '20 '

     (check_operator) check_operator: 20 

      (check_literal) check_literal:lit=',' idx=5 '20 '
      (check_literal) check_literal:After drop space:',' idx=5 '20 '
      (check_literal)   ',' != '2'
      (check_literal) check_literal: ret0
     (check_operator) check_operator:ret0

     (check_function) check_function: '20 '
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=5 '20 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=5 '20 '
      (check_literal)   '%' != '2'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=5 '20 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=5 '20 '
      (check_literal)   '"' != '2'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: '20 '
       (check_integer) check_integer:ret1
      (check_number) check_number: ret1
     (check_atom) check_atom:ret1
    (check_eitem) check_eitem:ret1

    (check_eitem) check_eitem: ' '

     (check_operator) check_operator:  

      (check_literal) check_literal:lit=',' idx=8 ''
      (check_literal) check_literal:After drop space:',' idx=8 ''
      (check_literal) check_literal  ret0 Empty test string
     (check_operator) check_operator:ret0

     (check_function) check_function: ''
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=7 ' '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=8 ''
      (check_literal) check_literal  ret0 Empty test string

      (check_literal) check_literal:lit=' "' idx=7 ' '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=8 ''
      (check_literal) check_literal  ret0 Empty test string

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: ''
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname '':
       (check_vname) check_vname ret0 '':
      (check_variable) check_variable:ret0 
     (check_atom) check_atom:ret1

     (check_sub_expr) check_sub_expr:

      (check_literal) check_literal:lit=' (' idx=7 ' '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'(' idx=8 ''
      (check_literal) check_literal  ret0 Empty test string
     (check_sub_expr) check_sub_expr: ret0
    (check_eitem) check_eitem:ret0
   (check_expression) check_expression:ret1 ' '
  (check_assignment) check_assignment:ret1
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=1, ' '
========================================================
A% = 20 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'A% = 20 ':
    (check_vname) check_vname ret1 '% = 20 ':
   (check_variable) check_variable: '% = 20 '
   (check_variable) check_variable: Ary test ' = 20 '

    (check_literal) check_literal:lit='(' idx=2 ' = 20 '
    (check_literal) check_literal:After drop space:'(' idx=2 ' = 20 '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=2 ' = 20 '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=3 '= 20 '
  (check_literal) check_literal:After while(): 20 
  (check_literal) check_literal:ret1 

  (check_expression) check_expression: '20 '

   (check_eitem) check_eitem: '20 '

    (check_operator) check_operator: 20 

     (check_literal) check_literal:lit=',' idx=5 '20 '
     (check_literal) check_literal:After drop space:',' idx=5 '20 '
     (check_literal)   ',' != '2'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: '20 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=5 '20 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=5 '20 '
     (check_literal)   '%' != '2'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=5 '20 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=5 '20 '
     (check_literal)   '"' != '2'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '20 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: ' '

    (check_operator) check_operator:  

     (check_literal) check_literal:lit=',' idx=8 ''
     (check_literal) check_literal:After drop space:',' idx=8 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_operator) check_operator:ret0

    (check_function) check_function: ''
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=7 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=8 ''
     (check_literal) check_literal  ret0 Empty test string

     (check_literal) check_literal:lit=' "' idx=7 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=8 ''
     (check_literal) check_literal  ret0 Empty test string

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: ''
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname '':
      (check_vname) check_vname ret0 '':
     (check_variable) check_variable:ret0 
    (check_atom) check_atom:ret1

    (check_sub_expr) check_sub_expr:

     (check_literal) check_literal:lit=' (' idx=7 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'(' idx=8 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_sub_expr) check_sub_expr: ret0
   (check_eitem) check_eitem:ret0
  (check_expression) check_expression:ret1 ' '
 (check_assignment) check_assignment:ret1

 (scan_assignment) scan_assignment:

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'A% = 20 '
   (scan_vname) scan_vname: ret1 'A'
  (scan_variable) scan_variable: '% = 20 ' vname='A'
  (scan_variable) scan_variable: Ary test ' = 20 '

   (check_literal) check_literal:lit='(' idx=2 ' = 20 '
   (check_literal) check_literal:After drop space:'(' idx=2 ' = 20 '
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='A%' is str:0 int:1 flt:0 ary:0
   Frst:1 T:'A%' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:A% is not function
token_is_variable: tok:'A%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:A% is not function
 (init_get_name) 
init_get_name:'A%'
 (init_get_name) 
init_get_name:'A%'
 (get_name) 
get_name:gn:'A%'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] i i A%
 (print_var_info) 
VAR INFO: '                A%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0

  (scan_literal) scan_literal:lit=' =' ' = 20 '
  (scan_literal) scan_literal:After drop space:= 20 
  (scan_literal) scan_literal:while loop:= 20 
   Frst:0 T:'=' exptype:i
  (operator_precedence) 
= is operator
'=' is operator
  (process_token) 
Token is operator o1 name:= o2 name:
  (process_token) 
opr1:1 opr2:0
Push 1
 Push:'='
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (1)

  (op_stack_print) 
000: = type:0
  (op_stack_print) 
------------------

  (scan_literal) scan_literal:ret1

  (scan_expression) scan_expression: ' 20 '

   (check_eitem) check_eitem: '20 '

    (check_operator) check_operator: 20 

     (check_literal) check_literal:lit=',' idx=5 '20 '
     (check_literal) check_literal:After drop space:',' idx=5 '20 '
     (check_literal)   ',' != '2'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: '20 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=5 '20 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=5 '20 '
     (check_literal)   '%' != '2'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=5 '20 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=5 '20 '
     (check_literal)   '"' != '2'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '20 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (scan_eitem) scan_eitem:

    (check_operator) check_operator: 20 

     (check_literal) check_literal:lit=',' idx=5 '20 '
     (check_literal) check_literal:After drop space:',' idx=5 '20 '
     (check_literal)   ',' != '2'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: '20 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=5 '20 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=5 '20 '
     (check_literal)   '%' != '2'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=5 '20 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=5 '20 '
     (check_literal)   '"' != '2'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '20 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1

    (scan_atom) scan_atom:

     (check_literal) check_literal:lit=' %' idx=5 '20 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=5 '20 '
     (check_literal)   '%' != '2'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=5 '20 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=5 '20 '
     (check_literal)   '"' != '2'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '20 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1

     (scan_number) scan_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '20 '
      (check_integer) check_integer:ret1

      (scan_integer) scan_integer:
      (scan_integer) scan_integer:ret1
   Frst:0 T:'20' exptype:i
     (operator_precedence) 
= is operator
modify_expression_type:Inittype:i Intype:i Outtype:i
(  output_integer) [i,()] i i 20
     (scan_integer) scan_integer:ret1  20
    (scan_atom) scan_atom:ret1

    (check_eitem) check_eitem: ' '

     (check_operator) check_operator:  

      (check_literal) check_literal:lit=',' idx=8 ''
      (check_literal) check_literal:After drop space:',' idx=8 ''
      (check_literal) check_literal  ret0 Empty test string
     (check_operator) check_operator:ret0

     (check_function) check_function: ''
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=7 ' '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=8 ''
      (check_literal) check_literal  ret0 Empty test string

      (check_literal) check_literal:lit=' "' idx=7 ' '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=8 ''
      (check_literal) check_literal  ret0 Empty test string

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: ''
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname '':
       (check_vname) check_vname ret0 '':
      (check_variable) check_variable:ret0 
     (check_atom) check_atom:ret1

     (check_sub_expr) check_sub_expr:

      (check_literal) check_literal:lit=' (' idx=7 ' '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'(' idx=8 ''
      (check_literal) check_literal  ret0 Empty test string
     (check_sub_expr) check_sub_expr: ret0
    (check_eitem) check_eitem:ret0
   (scan_expression) scan_expression: ret1 ' '
  (scan_assignment) scan_assignment: ret1
Finalise stack
Pop '='
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (0)

 (op_stack_print) 
------------------

( output_operator) [i,()] i i =
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:= is not function
 (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'A%'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '20'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '='  0:
=================
 BE:A%
type_check_stack_push: 'A%'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (1)

 (type_check_stack_print) 
000: 'A%' type:0
 (type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'A%' type:i (0)
 BE:20
type_check_stack_push: '20'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (2)

 (type_check_stack_print) 
000: 'A%' type:0
 (type_check_stack_print) 
001: '20' type:0
 (type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'A%' type:i (0)
001: '20' type:i (0)
 BE::=
BUFF_ID_OPERATOR
Found operator :=
type_check_stack_pop: '20'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (1)

 (type_check_stack_print) 
000: 'A%' type:0
 (type_check_stack_print) 
------------------

type_check_stack_pop: 'A%'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (0)

 (type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (1)

 (type_check_stack_print) 
000: '000' type:0
 (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'A%'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '20'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i ':='  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i 'A%'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i '20'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_OPERATOR     i rq:i ':='  2: 2 1
=================
 (process_expression_types) 
==INFIX==

Var: A% ary:0
infix_stack_push: 'A%'
infix_stack_push: '20'
infix_stack_pop: '20'
infix_stack_pop: 'A%'
infix_stack_push: '(A% := 20)'
infix_stack_pop: '(A% := 20)'
 (process_expression_types) ==(A% := 20)==
 (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i A%  0:
(    output_qcode) N2 EXP_BUFF_ID_INTEGER      i rq:i 20  0:
(    output_qcode) N3 EXP_BUFF_ID_OPERATOR     i rq:i :=  2: 2 1

  (check_literal) check_literal:lit=':' idx=8 ''
  (check_literal) check_literal:After drop space:':' idx=8 ''
  (check_literal) check_literal  ret0 Empty test string
 (translate_file) 
cline scanned OK
****************
**PRINT "abc" **
****************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'PRINT "abc" ':
     (check_vname) check_vname ret1 ' "abc" ':
    (check_variable) check_variable: ' "abc" '
    (check_variable) check_variable: Ary test ' "abc" '

     (check_literal) check_literal:lit='(' idx=5 ' "abc" '
     (check_literal) check_literal:After drop space:'(' idx=5 ' "abc" '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=5 ' "abc" '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=6 '"abc" '
   (check_literal)   '=' != '"'
   (check_literal) check_literal: ret0
  (check_assignment) check_assignment:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) check_textlabel: 'PRINT "abc" '
   (check_textlabel) check_textlabel:ret0
  (check_proc_call) check_proc_call:ret0

  (check_command) check_command:
  (check_command) check_command: ret1 found=> 'PRINT'
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=7, ' "abc" '
========================================================
PRINT "abc" 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'PRINT "abc" ':
    (check_vname) check_vname ret1 ' "abc" ':
   (check_variable) check_variable: ' "abc" '
   (check_variable) check_variable: Ary test ' "abc" '

    (check_literal) check_literal:lit='(' idx=5 ' "abc" '
    (check_literal) check_literal:After drop space:'(' idx=5 ' "abc" '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=5 ' "abc" '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=6 '"abc" '
  (check_literal)   '=' != '"'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'PRINT "abc" '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'PRINT'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'PRINT' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) PRINT is function
 (function_return_type) 
function_return_type: 'PRINT' =>v
 (function_return_type) 
function_return_type: 'PRINT' =>17
process_token: 'PRINT' t=>v
 Push:'PRINT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' "abc" '

   (check_eitem) check_eitem: '"abc" '

    (check_operator) check_operator: "abc" 

     (check_literal) check_literal:lit=',' idx=6 '"abc" '
     (check_literal) check_literal:After drop space:',' idx=6 '"abc" '
     (check_literal)   ',' != '"'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: '"abc" '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=6 '"abc" '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=6 '"abc" '
     (check_literal)   '%' != '"'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=6 '"abc" '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=6 '"abc" '
     (check_literal) check_literal:After while():abc" 
     (check_literal) check_literal:ret1 
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (scan_eitem) scan_eitem:

    (check_operator) check_operator: "abc" 

     (check_literal) check_literal:lit=',' idx=6 '"abc" '
     (check_literal) check_literal:After drop space:',' idx=6 '"abc" '
     (check_literal)   ',' != '"'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: '"abc" '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=6 '"abc" '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=6 '"abc" '
     (check_literal)   '%' != '"'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=6 '"abc" '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=6 '"abc" '
     (check_literal) check_literal:After while():abc" 
     (check_literal) check_literal:ret1 
    (check_atom) check_atom:ret1

    (scan_atom) scan_atom:

     (check_literal) check_literal:lit=' %' idx=6 '"abc" '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=6 '"abc" '
     (check_literal)   '%' != '"'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=6 '"abc" '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=6 '"abc" '
     (check_literal) check_literal:After while():abc" 
     (check_literal) check_literal:ret1 

     (scan_string) scan_string:

      (check_literal) check_literal:lit=' "' idx=6 '"abc" '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"abc" '
      (check_literal) check_literal:After while():abc" 
      (check_literal) check_literal:ret1 
     (scan_string)   (in if) 'abc" '
     (scan_string)   (in wh) 'abc" '
     (scan_string)   (in wh) 'bc" '
     (scan_string)   (in wh) 'bc" '
     (scan_string)   (in wh) 'c" '
     (scan_string)   (in wh) 'c" '
     (scan_string)   (in wh) '" '
     (scan_string) scan_string: ret1
   Frst:0 T:'"abc"' exptype:U
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"abc" is not function
token_is_variable: tok:'"abc"'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"abc" is not function
(   output_string) [U,(U )] s ? "abc"
modify_expression_type:Inittype:U Intype:s Outtype:s
    (scan_atom) scan_atom:ret1

    (check_eitem) check_eitem: ' '

     (check_operator) check_operator:  

      (check_literal) check_literal:lit=',' idx=12 ''
      (check_literal) check_literal:After drop space:',' idx=12 ''
      (check_literal) check_literal  ret0 Empty test string
     (check_operator) check_operator:ret0

     (check_function) check_function: ''
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=11 ' '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=12 ''
      (check_literal) check_literal  ret0 Empty test string

      (check_literal) check_literal:lit=' "' idx=11 ' '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=12 ''
      (check_literal) check_literal  ret0 Empty test string

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: ''
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname '':
       (check_vname) check_vname ret0 '':
      (check_variable) check_variable:ret0 
     (check_atom) check_atom:ret1

     (check_sub_expr) check_sub_expr:

      (check_literal) check_literal:lit=' (' idx=11 ' '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'(' idx=12 ''
      (check_literal) check_literal  ret0 Empty test string
     (check_sub_expr) check_sub_expr: ret0
    (check_eitem) check_eitem:ret0
   (scan_expression) scan_expression: ret1 ' '
  (scan_command) scan_command: ret1 =>'PRINT'
 (scan_command) 
ENDEXP
   Frst:0 T:')' exptype:s
Pop 4
Pop '('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
------------------

(  output_sub_end)
 (token_is_function) 
token_is_function:
 (token_is_function) PRINT is function
Pop 5
Pop 'PRINT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (0)

 (op_stack_print) 
------------------

( output_function) [s,(U )] v v PRINT
(  output_sub_end)
Finalise stack
 (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_STR          s rq:? '"abc"'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
 BE:

Type Check Stack (0)

 BE:"abc"
type_check_stack_push: '"abc"'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (1)

 (type_check_stack_print) 
000: '"abc"' type:2
 (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '"abc"' type:s (2)
 BE:

Type Check Stack (1)

000: '"abc"' type:s (2)
 BE:PRINT
FN: 1 args
 (function_return_type) 
function_return_type: 'PRINT' =>v
 (function_return_type) 
function_return_type: 'PRINT' =>17
ret_type;17 v
typecheck_expression:Ret type of PRINT : v
type_check_stack_pop: '"abc"'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (0)

 (type_check_stack_print) 
------------------

FN ARG 0 ri "abc" 2(s)  Arg not OK
type_check_stack_push: '000'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (1)

 (type_check_stack_print) 
000: '000' type:17
 (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_STR          s rq:? '"abc"'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_STR          s rq:? '"abc"'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
 (process_expression_types) 
==INFIX==

infix_stack_push: '"abc"'
infix_stack_pop: '"abc"'
infix_stack_push: 'PRINT("abc" )'
infix_stack_pop: 'PRINT("abc" )'
 (process_expression_types) ==PRINT("abc" )==
 (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_STR          s rq:? "abc"  0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N4 EXP_BUFF_ID_FUNCTION     v rq:v PRINT  0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_END      U rq:i   0:

  (check_literal) check_literal:lit=':' idx=12 ''
  (check_literal) check_literal:After drop space:':' idx=12 ''
  (check_literal) check_literal  ret0 Empty test string
 (translate_file) 
cline scanned OK
*******************
**PRINT "asdfgh" **
*******************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'PRINT "asdfgh" ':
     (check_vname) check_vname ret1 ' "asdfgh" ':
    (check_variable) check_variable: ' "asdfgh" '
    (check_variable) check_variable: Ary test ' "asdfgh" '

     (check_literal) check_literal:lit='(' idx=5 ' "asdfgh" '
     (check_literal) check_literal:After drop space:'(' idx=5 ' "asdfgh" '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=5 ' "asdfgh" '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=6 '"asdfgh" '
   (check_literal)   '=' != '"'
   (check_literal) check_literal: ret0
  (check_assignment) check_assignment:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) check_textlabel: 'PRINT "asdfgh" '
   (check_textlabel) check_textlabel:ret0
  (check_proc_call) check_proc_call:ret0

  (check_command) check_command:
  (check_command) check_command: ret1 found=> 'PRINT'
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=10, ' "asdfgh" '
========================================================
PRINT "asdfgh" 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'PRINT "asdfgh" ':
    (check_vname) check_vname ret1 ' "asdfgh" ':
   (check_variable) check_variable: ' "asdfgh" '
   (check_variable) check_variable: Ary test ' "asdfgh" '

    (check_literal) check_literal:lit='(' idx=5 ' "asdfgh" '
    (check_literal) check_literal:After drop space:'(' idx=5 ' "asdfgh" '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=5 ' "asdfgh" '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=6 '"asdfgh" '
  (check_literal)   '=' != '"'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'PRINT "asdfgh" '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'PRINT'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'PRINT' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) PRINT is function
 (function_return_type) 
function_return_type: 'PRINT' =>v
 (function_return_type) 
function_return_type: 'PRINT' =>17
process_token: 'PRINT' t=>v
 Push:'PRINT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' "asdfgh" '

   (check_eitem) check_eitem: '"asdfgh" '

    (check_operator) check_operator: "asdfgh" 

     (check_literal) check_literal:lit=',' idx=6 '"asdfgh" '
     (check_literal) check_literal:After drop space:',' idx=6 '"asdfgh" '
     (check_literal)   ',' != '"'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: '"asdfgh" '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=6 '"asdfgh" '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=6 '"asdfgh" '
     (check_literal)   '%' != '"'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=6 '"asdfgh" '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=6 '"asdfgh" '
     (check_literal) check_literal:After while():asdfgh" 
     (check_literal) check_literal:ret1 
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (scan_eitem) scan_eitem:

    (check_operator) check_operator: "asdfgh" 

     (check_literal) check_literal:lit=',' idx=6 '"asdfgh" '
     (check_literal) check_literal:After drop space:',' idx=6 '"asdfgh" '
     (check_literal)   ',' != '"'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: '"asdfgh" '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=6 '"asdfgh" '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=6 '"asdfgh" '
     (check_literal)   '%' != '"'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=6 '"asdfgh" '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=6 '"asdfgh" '
     (check_literal) check_literal:After while():asdfgh" 
     (check_literal) check_literal:ret1 
    (check_atom) check_atom:ret1

    (scan_atom) scan_atom:

     (check_literal) check_literal:lit=' %' idx=6 '"asdfgh" '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=6 '"asdfgh" '
     (check_literal)   '%' != '"'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=6 '"asdfgh" '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=6 '"asdfgh" '
     (check_literal) check_literal:After while():asdfgh" 
     (check_literal) check_literal:ret1 

     (scan_string) scan_string:

      (check_literal) check_literal:lit=' "' idx=6 '"asdfgh" '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '"asdfgh" '
      (check_literal) check_literal:After while():asdfgh" 
      (check_literal) check_literal:ret1 
     (scan_string)   (in if) 'asdfgh" '
     (scan_string)   (in wh) 'asdfgh" '
     (scan_string)   (in wh) 'sdfgh" '
     (scan_string)   (in wh) 'sdfgh" '
     (scan_string)   (in wh) 'dfgh" '
     (scan_string)   (in wh) 'dfgh" '
     (scan_string)   (in wh) 'fgh" '
     (scan_string)   (in wh) 'fgh" '
     (scan_string)   (in wh) 'gh" '
     (scan_string)   (in wh) 'gh" '
     (scan_string)   (in wh) 'h" '
     (scan_string)   (in wh) 'h" '
     (scan_string)   (in wh) '" '
     (scan_string) scan_string: ret1
   Frst:0 T:'"asdfgh"' exptype:U
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"asdfgh" is not function
token_is_variable: tok:'"asdfgh"'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"asdfgh" is not function
(   output_string) [U,(U )] s ? "asdfgh"
modify_expression_type:Inittype:U Intype:s Outtype:s
    (scan_atom) scan_atom:ret1

    (check_eitem) check_eitem: ' '

     (check_operator) check_operator:  

      (check_literal) check_literal:lit=',' idx=15 ''
      (check_literal) check_literal:After drop space:',' idx=15 ''
      (check_literal) check_literal  ret0 Empty test string
     (check_operator) check_operator:ret0

     (check_function) check_function: ''
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=14 ' '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=15 ''
      (check_literal) check_literal  ret0 Empty test string

      (check_literal) check_literal:lit=' "' idx=14 ' '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=15 ''
      (check_literal) check_literal  ret0 Empty test string

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: ''
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname '':
       (check_vname) check_vname ret0 '':
      (check_variable) check_variable:ret0 
     (check_atom) check_atom:ret1

     (check_sub_expr) check_sub_expr:

      (check_literal) check_literal:lit=' (' idx=14 ' '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'(' idx=15 ''
      (check_literal) check_literal  ret0 Empty test string
     (check_sub_expr) check_sub_expr: ret0
    (check_eitem) check_eitem:ret0
   (scan_expression) scan_expression: ret1 ' '
  (scan_command) scan_command: ret1 =>'PRINT'
 (scan_command) 
ENDEXP
   Frst:0 T:')' exptype:s
Pop 4
Pop '('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
------------------

(  output_sub_end)
 (token_is_function) 
token_is_function:
 (token_is_function) PRINT is function
Pop 5
Pop 'PRINT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (0)

 (op_stack_print) 
------------------

( output_function) [s,(U )] v v PRINT
(  output_sub_end)
Finalise stack
 (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_STR          s rq:? '"asdfgh"'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
 BE:

Type Check Stack (0)

 BE:"asdfgh"
type_check_stack_push: '"asdfgh"'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (1)

 (type_check_stack_print) 
000: '"asdfgh"' type:2
 (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '"asdfgh"' type:s (2)
 BE:

Type Check Stack (1)

000: '"asdfgh"' type:s (2)
 BE:PRINT
FN: 1 args
 (function_return_type) 
function_return_type: 'PRINT' =>v
 (function_return_type) 
function_return_type: 'PRINT' =>17
ret_type;17 v
typecheck_expression:Ret type of PRINT : v
type_check_stack_pop: '"asdfgh"'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (0)

 (type_check_stack_print) 
------------------

FN ARG 0 ri "asdfgh" 2(s)  Arg not OK
type_check_stack_push: '000'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (1)

 (type_check_stack_print) 
000: '000' type:17
 (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_STR          s rq:? '"asdfgh"'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_STR          s rq:? '"asdfgh"'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
 (process_expression_types) 
==INFIX==

infix_stack_push: '"asdfgh"'
infix_stack_pop: '"asdfgh"'
infix_stack_push: 'PRINT("asdfgh" )'
infix_stack_pop: 'PRINT("asdfgh" )'
 (process_expression_types) ==PRINT("asdfgh" )==
 (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_STR          s rq:? "asdfgh"  0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N4 EXP_BUFF_ID_FUNCTION     v rq:v PRINT  0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_END      U rq:i   0:

  (check_literal) check_literal:lit=':' idx=15 ''
  (check_literal) check_literal:After drop space:':' idx=15 ''
  (check_literal) check_literal  ret0 Empty test string
 (translate_file) 
cline scanned OK
**************************
**PRINT   "    abc    " **
**************************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'PRINT   "    abc    " ':
     (check_vname) check_vname ret1 '   "    abc    " ':
    (check_variable) check_variable: '   "    abc    " '
    (check_variable) check_variable: Ary test '   "    abc    " '

     (check_literal) check_literal:lit='(' idx=5 '   "    abc    " '
     (check_literal) check_literal:After drop space:'(' idx=5 '   "    abc    " '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=5 '   "    abc    " '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=8 '"    abc    " '
   (check_literal)   '=' != '"'
   (check_literal) check_literal: ret0
  (check_assignment) check_assignment:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) check_textlabel: 'PRINT   "    abc    " '
   (check_textlabel) check_textlabel:ret0
  (check_proc_call) check_proc_call:ret0

  (check_command) check_command:
  (check_command) check_command: ret1 found=> 'PRINT'
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=17, '   "    abc    " '
========================================================
PRINT   "    abc    " 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'PRINT   "    abc    " ':
    (check_vname) check_vname ret1 '   "    abc    " ':
   (check_variable) check_variable: '   "    abc    " '
   (check_variable) check_variable: Ary test '   "    abc    " '

    (check_literal) check_literal:lit='(' idx=5 '   "    abc    " '
    (check_literal) check_literal:After drop space:'(' idx=5 '   "    abc    " '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=5 '   "    abc    " '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=8 '"    abc    " '
  (check_literal)   '=' != '"'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'PRINT   "    abc    " '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'PRINT'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'PRINT' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) PRINT is function
 (function_return_type) 
function_return_type: 'PRINT' =>v
 (function_return_type) 
function_return_type: 'PRINT' =>17
process_token: 'PRINT' t=>v
 Push:'PRINT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: '   "    abc    " '

   (check_eitem) check_eitem: '"    abc    " '

    (check_operator) check_operator: "    abc    " 

     (check_literal) check_literal:lit=',' idx=8 '"    abc    " '
     (check_literal) check_literal:After drop space:',' idx=8 '"    abc    " '
     (check_literal)   ',' != '"'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: '"    abc    " '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=8 '"    abc    " '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=8 '"    abc    " '
     (check_literal)   '%' != '"'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=8 '"    abc    " '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=8 '"    abc    " '
     (check_literal) check_literal:After while():    abc    " 
     (check_literal) check_literal:ret1 
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (scan_eitem) scan_eitem:

    (check_operator) check_operator: "    abc    " 

     (check_literal) check_literal:lit=',' idx=8 '"    abc    " '
     (check_literal) check_literal:After drop space:',' idx=8 '"    abc    " '
     (check_literal)   ',' != '"'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: '"    abc    " '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=8 '"    abc    " '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=8 '"    abc    " '
     (check_literal)   '%' != '"'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=8 '"    abc    " '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=8 '"    abc    " '
     (check_literal) check_literal:After while():    abc    " 
     (check_literal) check_literal:ret1 
    (check_atom) check_atom:ret1

    (scan_atom) scan_atom:

     (check_literal) check_literal:lit=' %' idx=8 '"    abc    " '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=8 '"    abc    " '
     (check_literal)   '%' != '"'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=8 '"    abc    " '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=8 '"    abc    " '
     (check_literal) check_literal:After while():    abc    " 
     (check_literal) check_literal:ret1 

     (scan_string) scan_string:

      (check_literal) check_literal:lit=' "' idx=8 '"    abc    " '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=8 '"    abc    " '
      (check_literal) check_literal:After while():    abc    " 
      (check_literal) check_literal:ret1 
     (scan_string)   (in if) '    abc    " '
     (scan_string)   (in wh) '    abc    " '
     (scan_string)   (in wh) '   abc    " '
     (scan_string)   (in wh) '   abc    " '
     (scan_string)   (in wh) '  abc    " '
     (scan_string)   (in wh) '  abc    " '
     (scan_string)   (in wh) ' abc    " '
     (scan_string)   (in wh) ' abc    " '
     (scan_string)   (in wh) 'abc    " '
     (scan_string)   (in wh) 'abc    " '
     (scan_string)   (in wh) 'bc    " '
     (scan_string)   (in wh) 'bc    " '
     (scan_string)   (in wh) 'c    " '
     (scan_string)   (in wh) 'c    " '
     (scan_string)   (in wh) '    " '
     (scan_string)   (in wh) '    " '
     (scan_string)   (in wh) '   " '
     (scan_string)   (in wh) '   " '
     (scan_string)   (in wh) '  " '
     (scan_string)   (in wh) '  " '
     (scan_string)   (in wh) ' " '
     (scan_string)   (in wh) ' " '
     (scan_string)   (in wh) '" '
     (scan_string) scan_string: ret1
   Frst:0 T:'"    abc    "' exptype:U
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"    abc    " is not function
token_is_variable: tok:'"    abc    "'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"    abc    " is not function
(   output_string) [U,(U )] s ? "    abc    "
modify_expression_type:Inittype:U Intype:s Outtype:s
    (scan_atom) scan_atom:ret1

    (check_eitem) check_eitem: ' '

     (check_operator) check_operator:  

      (check_literal) check_literal:lit=',' idx=22 ''
      (check_literal) check_literal:After drop space:',' idx=22 ''
      (check_literal) check_literal  ret0 Empty test string
     (check_operator) check_operator:ret0

     (check_function) check_function: ''
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=21 ' '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=22 ''
      (check_literal) check_literal  ret0 Empty test string

      (check_literal) check_literal:lit=' "' idx=21 ' '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=22 ''
      (check_literal) check_literal  ret0 Empty test string

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: ''
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname '':
       (check_vname) check_vname ret0 '':
      (check_variable) check_variable:ret0 
     (check_atom) check_atom:ret1

     (check_sub_expr) check_sub_expr:

      (check_literal) check_literal:lit=' (' idx=21 ' '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'(' idx=22 ''
      (check_literal) check_literal  ret0 Empty test string
     (check_sub_expr) check_sub_expr: ret0
    (check_eitem) check_eitem:ret0
   (scan_expression) scan_expression: ret1 ' '
  (scan_command) scan_command: ret1 =>'PRINT'
 (scan_command) 
ENDEXP
   Frst:0 T:')' exptype:s
Pop 4
Pop '('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
------------------

(  output_sub_end)
 (token_is_function) 
token_is_function:
 (token_is_function) PRINT is function
Pop 5
Pop 'PRINT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (0)

 (op_stack_print) 
------------------

( output_function) [s,(U )] v v PRINT
(  output_sub_end)
Finalise stack
 (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_STR          s rq:? '"    abc    "'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
 BE:

Type Check Stack (0)

 BE:"    abc    "
type_check_stack_push: '"    abc    "'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (1)

 (type_check_stack_print) 
000: '"    abc    "' type:2
 (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '"    abc    "' type:s (2)
 BE:

Type Check Stack (1)

000: '"    abc    "' type:s (2)
 BE:PRINT
FN: 1 args
 (function_return_type) 
function_return_type: 'PRINT' =>v
 (function_return_type) 
function_return_type: 'PRINT' =>17
ret_type;17 v
typecheck_expression:Ret type of PRINT : v
type_check_stack_pop: '"    abc    "'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (0)

 (type_check_stack_print) 
------------------

FN ARG 0 ri "    abc    " 2(s)  Arg not OK
type_check_stack_push: '000'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (1)

 (type_check_stack_print) 
000: '000' type:17
 (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_STR          s rq:? '"    abc    "'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_STR          s rq:? '"    abc    "'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
 (process_expression_types) 
==INFIX==

infix_stack_push: '"    abc    "'
infix_stack_pop: '"    abc    "'
infix_stack_push: 'PRINT("    abc    " )'
infix_stack_pop: 'PRINT("    abc    " )'
 (process_expression_types) ==PRINT("    abc    " )==
 (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_STR          s rq:? "    abc    "  0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N4 EXP_BUFF_ID_FUNCTION     v rq:v PRINT  0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_END      U rq:i   0:

  (check_literal) check_literal:lit=':' idx=22 ''
  (check_literal) check_literal:After drop space:':' idx=22 ''
  (check_literal) check_literal  ret0 Empty test string
 (translate_file) 
cline scanned OK
*************
**PRINT A% **
*************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'PRINT A% ':
     (check_vname) check_vname ret1 ' A% ':
    (check_variable) check_variable: ' A% '
    (check_variable) check_variable: Ary test ' A% '

     (check_literal) check_literal:lit='(' idx=5 ' A% '
     (check_literal) check_literal:After drop space:'(' idx=5 ' A% '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=5 ' A% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=6 'A% '
   (check_literal)   '=' != 'A'
   (check_literal) check_literal: ret0
  (check_assignment) check_assignment:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) check_textlabel: 'PRINT A% '
   (check_textlabel) check_textlabel:ret0
  (check_proc_call) check_proc_call:ret0

  (check_command) check_command:
  (check_command) check_command: ret1 found=> 'PRINT'
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=4, ' A% '
========================================================
PRINT A% 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'PRINT A% ':
    (check_vname) check_vname ret1 ' A% ':
   (check_variable) check_variable: ' A% '
   (check_variable) check_variable: Ary test ' A% '

    (check_literal) check_literal:lit='(' idx=5 ' A% '
    (check_literal) check_literal:After drop space:'(' idx=5 ' A% '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=5 ' A% '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=6 'A% '
  (check_literal)   '=' != 'A'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'PRINT A% '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'PRINT'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'PRINT' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) PRINT is function
 (function_return_type) 
function_return_type: 'PRINT' =>v
 (function_return_type) 
function_return_type: 'PRINT' =>17
process_token: 'PRINT' t=>v
 Push:'PRINT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' A% '

   (check_eitem) check_eitem: 'A% '

    (check_operator) check_operator: A% 

     (check_literal) check_literal:lit=',' idx=6 'A% '
     (check_literal) check_literal:After drop space:',' idx=6 'A% '
     (check_literal)   ',' != 'A'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: 'A% '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=6 'A% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=6 'A% '
     (check_literal)   '%' != 'A'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=6 'A% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=6 'A% '
     (check_literal)   '"' != 'A'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'A% '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'A% ':
      (check_vname) check_vname ret1 '% ':
     (check_variable) check_variable: '% '
     (check_variable) check_variable: Ary test ' '

      (check_literal) check_literal:lit='(' idx=8 ' '
      (check_literal) check_literal:After drop space:'(' idx=8 ' '
      (check_literal)   '(' != ' '
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator: A% 

    (check_literal) check_literal:lit=',' idx=6 'A% '
    (check_literal) check_literal:After drop space:',' idx=6 'A% '
    (check_literal)   ',' != 'A'
    (check_literal) check_literal: ret0
   (check_operator) check_operator:ret0

   (check_function) check_function: 'A% '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=6 'A% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=6 'A% '
    (check_literal)   '%' != 'A'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=6 'A% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=6 'A% '
    (check_literal)   '"' != 'A'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'A% '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'A% ':
     (check_vname) check_vname ret1 '% ':
    (check_variable) check_variable: '% '
    (check_variable) check_variable: Ary test ' '

     (check_literal) check_literal:lit='(' idx=8 ' '
     (check_literal) check_literal:After drop space:'(' idx=8 ' '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1

  (scan_atom) scan_atom:

   (check_literal) check_literal:lit=' %' idx=6 'A% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=6 'A% '
   (check_literal)   '%' != 'A'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=6 'A% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=6 'A% '
   (check_literal)   '"' != 'A'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'A% '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'A% ':
    (check_vname) check_vname ret1 '% ':
   (check_variable) check_variable: '% '
   (check_variable) check_variable: Ary test ' '

    (check_literal) check_literal:lit='(' idx=8 ' '
    (check_literal) check_literal:After drop space:'(' idx=8 ' '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'A% '
   (scan_vname) scan_vname: ret1 'A'
  (scan_variable) scan_variable: '% ' vname='A'
  (scan_variable) scan_variable: Ary test ' '

   (check_literal) check_literal:lit='(' idx=8 ' '
   (check_literal) check_literal:After drop space:'(' idx=8 ' '
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='A%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'A%' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:A% is not function
token_is_variable: tok:'A%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:A% is not function
 (init_get_name) 
init_get_name:'A%'
 (init_get_name) 
init_get_name:'A%'
 (get_name) 
get_name:gn:'A%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,(U )] i i A%
 (print_var_info) 
VAR INFO: '                A%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
 (scan_atom) scan_atom:ret1

 (check_eitem) check_eitem: ' '

  (check_operator) check_operator:  

   (check_literal) check_literal:lit=',' idx=9 ''
   (check_literal) check_literal:After drop space:',' idx=9 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_operator) check_operator:ret0

  (check_function) check_function: ''
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=8 ' '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=9 ''
   (check_literal) check_literal  ret0 Empty test string

   (check_literal) check_literal:lit=' "' idx=8 ' '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=9 ''
   (check_literal) check_literal  ret0 Empty test string

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: ''
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname '':
    (check_vname) check_vname ret0 '':
   (check_variable) check_variable:ret0 
  (check_atom) check_atom:ret1

  (check_sub_expr) check_sub_expr:

   (check_literal) check_literal:lit=' (' idx=8 ' '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'(' idx=9 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_sub_expr) check_sub_expr: ret0
 (check_eitem) check_eitem:ret0
(scan_expression) scan_expression: ret1 ' '
(scan_command) scan_command: ret1 =>'PRINT'
(scan_command) 
ENDEXP
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: PRINT type:17
(op_stack_print) 
------------------

(  output_sub_end)
(token_is_function) 
token_is_function:
(token_is_function) PRINT is function
Pop 5
Pop 'PRINT'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_function) [i,(U )] v v PRINT
(  output_sub_end)
Finalise stack
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'A%'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
 BE:

Type Check Stack (0)

 BE:A%
type_check_stack_push: 'A%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'A%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'A%' type:i (0)
 BE:

Type Check Stack (1)

000: 'A%' type:i (0)
 BE:PRINT
FN: 1 args
(function_return_type) 
function_return_type: 'PRINT' =>v
(function_return_type) 
function_return_type: 'PRINT' =>17
ret_type;17 v
typecheck_expression:Ret type of PRINT : v
type_check_stack_pop: 'A%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (0)

(type_check_stack_print) 
------------------

FN ARG 0 ri A% 0(i)  Arg ok
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:17
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'A%'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'A%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
(process_expression_types) 
==INFIX==

Var: A% ary:0
infix_stack_push: 'A%'
infix_stack_pop: 'A%'
infix_stack_push: 'PRINT(A% )'
infix_stack_pop: 'PRINT(A% )'
(process_expression_types) ==PRINT(A% )==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     i rq:i A%  0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N4 EXP_BUFF_ID_FUNCTION     v rq:v PRINT  0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_END      U rq:i   0:

 (check_literal) check_literal:lit=':' idx=9 ''
 (check_literal) check_literal:After drop space:':' idx=9 ''
 (check_literal) check_literal  ret0 Empty test string
(translate_file) 
cline scanned OK
************
**PRINT B **
************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'PRINT B ':
     (check_vname) check_vname ret1 ' B ':
    (check_variable) check_variable: ' B '
    (check_variable) check_variable: Ary test ' B '

     (check_literal) check_literal:lit='(' idx=5 ' B '
     (check_literal) check_literal:After drop space:'(' idx=5 ' B '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=5 ' B '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=6 'B '
   (check_literal)   '=' != 'B'
   (check_literal) check_literal: ret0
  (check_assignment) check_assignment:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) check_textlabel: 'PRINT B '
   (check_textlabel) check_textlabel:ret0
  (check_proc_call) check_proc_call:ret0

  (check_command) check_command:
  (check_command) check_command: ret1 found=> 'PRINT'
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=3, ' B '
========================================================
PRINT B 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'PRINT B ':
    (check_vname) check_vname ret1 ' B ':
   (check_variable) check_variable: ' B '
   (check_variable) check_variable: Ary test ' B '

    (check_literal) check_literal:lit='(' idx=5 ' B '
    (check_literal) check_literal:After drop space:'(' idx=5 ' B '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=5 ' B '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=6 'B '
  (check_literal)   '=' != 'B'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'PRINT B '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'PRINT'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'PRINT' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) PRINT is function
 (function_return_type) 
function_return_type: 'PRINT' =>v
 (function_return_type) 
function_return_type: 'PRINT' =>17
process_token: 'PRINT' t=>v
 Push:'PRINT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' B '

   (check_eitem) check_eitem: 'B '

    (check_operator) check_operator: B 

     (check_literal) check_literal:lit=',' idx=6 'B '
     (check_literal) check_literal:After drop space:',' idx=6 'B '
     (check_literal)   ',' != 'B'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: 'B '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=6 'B '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=6 'B '
     (check_literal)   '%' != 'B'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=6 'B '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=6 'B '
     (check_literal)   '"' != 'B'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'B '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'B ':
      (check_vname) check_vname ret1 ' ':
     (check_variable) check_variable: ' '
     (check_variable) check_variable: Ary test ' '

      (check_literal) check_literal:lit='(' idx=7 ' '
      (check_literal) check_literal:After drop space:'(' idx=7 ' '
      (check_literal)   '(' != ' '
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator: B 

    (check_literal) check_literal:lit=',' idx=6 'B '
    (check_literal) check_literal:After drop space:',' idx=6 'B '
    (check_literal)   ',' != 'B'
    (check_literal) check_literal: ret0
   (check_operator) check_operator:ret0

   (check_function) check_function: 'B '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=6 'B '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=6 'B '
    (check_literal)   '%' != 'B'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=6 'B '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=6 'B '
    (check_literal)   '"' != 'B'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'B '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'B ':
     (check_vname) check_vname ret1 ' ':
    (check_variable) check_variable: ' '
    (check_variable) check_variable: Ary test ' '

     (check_literal) check_literal:lit='(' idx=7 ' '
     (check_literal) check_literal:After drop space:'(' idx=7 ' '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1

  (scan_atom) scan_atom:

   (check_literal) check_literal:lit=' %' idx=6 'B '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=6 'B '
   (check_literal)   '%' != 'B'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=6 'B '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=6 'B '
   (check_literal)   '"' != 'B'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'B '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'B ':
    (check_vname) check_vname ret1 ' ':
   (check_variable) check_variable: ' '
   (check_variable) check_variable: Ary test ' '

    (check_literal) check_literal:lit='(' idx=7 ' '
    (check_literal) check_literal:After drop space:'(' idx=7 ' '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'B '
   (scan_vname) scan_vname: ret1 'B'
  (scan_variable) scan_variable: ' ' vname='B'
  (scan_variable) scan_variable: Ary test ' '

   (check_literal) check_literal:lit='(' idx=7 ' '
   (check_literal) check_literal:After drop space:'(' idx=7 ' '
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='B' is str:0 int:0 flt:1 ary:0
   Frst:0 T:'B' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:B is not function
token_is_variable: tok:'B'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:B is not function
 (init_get_name) 
init_get_name:'B'
 (init_get_name) 
init_get_name:'B'
 (get_name) 
get_name:gn:'B'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:f Outtype:f
( output_variable) [f,(U )] f f B
 (print_var_info) 
VAR INFO: '                 B' gbl:0 ref:1 int:0 flt:1 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
 (scan_atom) scan_atom:ret1

 (check_eitem) check_eitem: ' '

  (check_operator) check_operator:  

   (check_literal) check_literal:lit=',' idx=8 ''
   (check_literal) check_literal:After drop space:',' idx=8 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_operator) check_operator:ret0

  (check_function) check_function: ''
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=7 ' '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=8 ''
   (check_literal) check_literal  ret0 Empty test string

   (check_literal) check_literal:lit=' "' idx=7 ' '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=8 ''
   (check_literal) check_literal  ret0 Empty test string

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: ''
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname '':
    (check_vname) check_vname ret0 '':
   (check_variable) check_variable:ret0 
  (check_atom) check_atom:ret1

  (check_sub_expr) check_sub_expr:

   (check_literal) check_literal:lit=' (' idx=7 ' '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'(' idx=8 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_sub_expr) check_sub_expr: ret0
 (check_eitem) check_eitem:ret0
(scan_expression) scan_expression: ret1 ' '
(scan_command) scan_command: ret1 =>'PRINT'
(scan_command) 
ENDEXP
   Frst:0 T:')' exptype:f
Pop 4
Pop '('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: PRINT type:17
(op_stack_print) 
------------------

(  output_sub_end)
(token_is_function) 
token_is_function:
(token_is_function) PRINT is function
Pop 5
Pop 'PRINT'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_function) [f,(U )] v v PRINT
(  output_sub_end)
Finalise stack
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'B'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
 BE:

Type Check Stack (0)

 BE:B
type_check_stack_push: 'B'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'B' type:1
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'B' type:f (1)
 BE:

Type Check Stack (1)

000: 'B' type:f (1)
 BE:PRINT
FN: 1 args
(function_return_type) 
function_return_type: 'PRINT' =>v
(function_return_type) 
function_return_type: 'PRINT' =>17
ret_type;17 v
typecheck_expression:Ret type of PRINT : v
type_check_stack_pop: 'B'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (0)

(type_check_stack_print) 
------------------

FN ARG 0 ri B 1(f)  Arg not OK
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     f rq:f 'B'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
 Insert after 2 exp_buffer2_i:3
   Found at i:1
   Copied 2 to 3:
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     f rq:f 'B'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_AUTOCON      v rq:v 'autocon f->i'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:17
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'B'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     f rq:f 'B'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_AUTOCON      v rq:v 'autocon f->i'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
(process_expression_types) 
==INFIX==

Var: B ary:0
infix_stack_push: 'B'
infix_stack_pop: 'B'
infix_stack_push: 'PRINT(B )'
infix_stack_pop: 'PRINT(B )'
(process_expression_types) ==PRINT(B )==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     f rq:f B  0:
(    output_qcode) N5 EXP_BUFF_ID_AUTOCON      v rq:v autocon f->i  0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N4 EXP_BUFF_ID_FUNCTION     v rq:v PRINT  0:
(    output_qcode) N6 EXP_BUFF_ID_SUB_END      U rq:i   0:

 (check_literal) check_literal:lit=':' idx=8 ''
 (check_literal) check_literal:After drop space:':' idx=8 ''
 (check_literal) check_literal  ret0 Empty test string
(translate_file) 
cline scanned OK
**************
**PRINT ABC **
**************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'PRINT ABC ':
     (check_vname) check_vname ret1 ' ABC ':
    (check_variable) check_variable: ' ABC '
    (check_variable) check_variable: Ary test ' ABC '

     (check_literal) check_literal:lit='(' idx=5 ' ABC '
     (check_literal) check_literal:After drop space:'(' idx=5 ' ABC '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=5 ' ABC '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=6 'ABC '
   (check_literal)   '=' != 'A'
   (check_literal) check_literal: ret0
  (check_assignment) check_assignment:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) check_textlabel: 'PRINT ABC '
   (check_textlabel) check_textlabel:ret0
  (check_proc_call) check_proc_call:ret0

  (check_command) check_command:
  (check_command) check_command: ret1 found=> 'PRINT'
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=5, ' ABC '
========================================================
PRINT ABC 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'PRINT ABC ':
    (check_vname) check_vname ret1 ' ABC ':
   (check_variable) check_variable: ' ABC '
   (check_variable) check_variable: Ary test ' ABC '

    (check_literal) check_literal:lit='(' idx=5 ' ABC '
    (check_literal) check_literal:After drop space:'(' idx=5 ' ABC '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=5 ' ABC '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=6 'ABC '
  (check_literal)   '=' != 'A'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'PRINT ABC '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'PRINT'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'PRINT' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) PRINT is function
 (function_return_type) 
function_return_type: 'PRINT' =>v
 (function_return_type) 
function_return_type: 'PRINT' =>17
process_token: 'PRINT' t=>v
 Push:'PRINT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' ABC '

   (check_eitem) check_eitem: 'ABC '

    (check_operator) check_operator: ABC 

     (check_literal) check_literal:lit=',' idx=6 'ABC '
     (check_literal) check_literal:After drop space:',' idx=6 'ABC '
     (check_literal)   ',' != 'A'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: 'ABC '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=6 'ABC '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=6 'ABC '
     (check_literal)   '%' != 'A'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=6 'ABC '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=6 'ABC '
     (check_literal)   '"' != 'A'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'ABC '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'ABC ':
      (check_vname) check_vname ret1 ' ':
     (check_variable) check_variable: ' '
     (check_variable) check_variable: Ary test ' '

      (check_literal) check_literal:lit='(' idx=9 ' '
      (check_literal) check_literal:After drop space:'(' idx=9 ' '
      (check_literal)   '(' != ' '
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator: ABC 

    (check_literal) check_literal:lit=',' idx=6 'ABC '
    (check_literal) check_literal:After drop space:',' idx=6 'ABC '
    (check_literal)   ',' != 'A'
    (check_literal) check_literal: ret0
   (check_operator) check_operator:ret0

   (check_function) check_function: 'ABC '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=6 'ABC '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=6 'ABC '
    (check_literal)   '%' != 'A'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=6 'ABC '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=6 'ABC '
    (check_literal)   '"' != 'A'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'ABC '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'ABC ':
     (check_vname) check_vname ret1 ' ':
    (check_variable) check_variable: ' '
    (check_variable) check_variable: Ary test ' '

     (check_literal) check_literal:lit='(' idx=9 ' '
     (check_literal) check_literal:After drop space:'(' idx=9 ' '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1

  (scan_atom) scan_atom:

   (check_literal) check_literal:lit=' %' idx=6 'ABC '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=6 'ABC '
   (check_literal)   '%' != 'A'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=6 'ABC '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=6 'ABC '
   (check_literal)   '"' != 'A'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'ABC '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'ABC ':
    (check_vname) check_vname ret1 ' ':
   (check_variable) check_variable: ' '
   (check_variable) check_variable: Ary test ' '

    (check_literal) check_literal:lit='(' idx=9 ' '
    (check_literal) check_literal:After drop space:'(' idx=9 ' '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'ABC '
   (scan_vname) scan_vname: ret1 'ABC'
  (scan_variable) scan_variable: ' ' vname='ABC'
  (scan_variable) scan_variable: Ary test ' '

   (check_literal) check_literal:lit='(' idx=9 ' '
   (check_literal) check_literal:After drop space:'(' idx=9 ' '
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='ABC' is str:0 int:0 flt:1 ary:0
   Frst:0 T:'ABC' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:ABC is not function
token_is_variable: tok:'ABC'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:ABC is not function
 (init_get_name) 
init_get_name:'ABC'
 (init_get_name) 
init_get_name:'ABC'
 (get_name) 
get_name:gn:'ABC'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:f Outtype:f
( output_variable) [f,(U )] f f ABC
 (print_var_info) 
VAR INFO: '               ABC' gbl:0 ref:1 int:0 flt:1 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
 (scan_atom) scan_atom:ret1

 (check_eitem) check_eitem: ' '

  (check_operator) check_operator:  

   (check_literal) check_literal:lit=',' idx=10 ''
   (check_literal) check_literal:After drop space:',' idx=10 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_operator) check_operator:ret0

  (check_function) check_function: ''
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=9 ' '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=10 ''
   (check_literal) check_literal  ret0 Empty test string

   (check_literal) check_literal:lit=' "' idx=9 ' '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=10 ''
   (check_literal) check_literal  ret0 Empty test string

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: ''
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname '':
    (check_vname) check_vname ret0 '':
   (check_variable) check_variable:ret0 
  (check_atom) check_atom:ret1

  (check_sub_expr) check_sub_expr:

   (check_literal) check_literal:lit=' (' idx=9 ' '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'(' idx=10 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_sub_expr) check_sub_expr: ret0
 (check_eitem) check_eitem:ret0
(scan_expression) scan_expression: ret1 ' '
(scan_command) scan_command: ret1 =>'PRINT'
(scan_command) 
ENDEXP
   Frst:0 T:')' exptype:f
Pop 4
Pop '('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: PRINT type:17
(op_stack_print) 
------------------

(  output_sub_end)
(token_is_function) 
token_is_function:
(token_is_function) PRINT is function
Pop 5
Pop 'PRINT'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_function) [f,(U )] v v PRINT
(  output_sub_end)
Finalise stack
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'ABC'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
 BE:

Type Check Stack (0)

 BE:ABC
type_check_stack_push: 'ABC'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'ABC' type:1
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'ABC' type:f (1)
 BE:

Type Check Stack (1)

000: 'ABC' type:f (1)
 BE:PRINT
FN: 1 args
(function_return_type) 
function_return_type: 'PRINT' =>v
(function_return_type) 
function_return_type: 'PRINT' =>17
ret_type;17 v
typecheck_expression:Ret type of PRINT : v
type_check_stack_pop: 'ABC'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (0)

(type_check_stack_print) 
------------------

FN ARG 0 ri ABC 1(f)  Arg not OK
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     f rq:f 'ABC'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
 Insert after 2 exp_buffer2_i:3
   Found at i:1
   Copied 2 to 3:
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     f rq:f 'ABC'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_AUTOCON      v rq:v 'autocon f->i'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:17
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'ABC'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     f rq:f 'ABC'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_AUTOCON      v rq:v 'autocon f->i'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
(process_expression_types) 
==INFIX==

Var: ABC ary:0
infix_stack_push: 'ABC'
infix_stack_pop: 'ABC'
infix_stack_push: 'PRINT(ABC )'
infix_stack_pop: 'PRINT(ABC )'
(process_expression_types) ==PRINT(ABC )==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     f rq:f ABC  0:
(    output_qcode) N5 EXP_BUFF_ID_AUTOCON      v rq:v autocon f->i  0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N4 EXP_BUFF_ID_FUNCTION     v rq:v PRINT  0:
(    output_qcode) N6 EXP_BUFF_ID_SUB_END      U rq:i   0:

 (check_literal) check_literal:lit=':' idx=10 ''
 (check_literal) check_literal:After drop space:':' idx=10 ''
 (check_literal) check_literal  ret0 Empty test string
(translate_file) 
cline scanned OK
***************
**PRINT ABC% **
***************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'PRINT ABC% ':
     (check_vname) check_vname ret1 ' ABC% ':
    (check_variable) check_variable: ' ABC% '
    (check_variable) check_variable: Ary test ' ABC% '

     (check_literal) check_literal:lit='(' idx=5 ' ABC% '
     (check_literal) check_literal:After drop space:'(' idx=5 ' ABC% '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=5 ' ABC% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=6 'ABC% '
   (check_literal)   '=' != 'A'
   (check_literal) check_literal: ret0
  (check_assignment) check_assignment:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) check_textlabel: 'PRINT ABC% '
   (check_textlabel) check_textlabel:ret0
  (check_proc_call) check_proc_call:ret0

  (check_command) check_command:
  (check_command) check_command: ret1 found=> 'PRINT'
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=6, ' ABC% '
========================================================
PRINT ABC% 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'PRINT ABC% ':
    (check_vname) check_vname ret1 ' ABC% ':
   (check_variable) check_variable: ' ABC% '
   (check_variable) check_variable: Ary test ' ABC% '

    (check_literal) check_literal:lit='(' idx=5 ' ABC% '
    (check_literal) check_literal:After drop space:'(' idx=5 ' ABC% '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=5 ' ABC% '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=6 'ABC% '
  (check_literal)   '=' != 'A'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'PRINT ABC% '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'PRINT'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'PRINT' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) PRINT is function
 (function_return_type) 
function_return_type: 'PRINT' =>v
 (function_return_type) 
function_return_type: 'PRINT' =>17
process_token: 'PRINT' t=>v
 Push:'PRINT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' ABC% '

   (check_eitem) check_eitem: 'ABC% '

    (check_operator) check_operator: ABC% 

     (check_literal) check_literal:lit=',' idx=6 'ABC% '
     (check_literal) check_literal:After drop space:',' idx=6 'ABC% '
     (check_literal)   ',' != 'A'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: 'ABC% '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=6 'ABC% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=6 'ABC% '
     (check_literal)   '%' != 'A'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=6 'ABC% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=6 'ABC% '
     (check_literal)   '"' != 'A'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'ABC% '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'ABC% ':
      (check_vname) check_vname ret1 '% ':
     (check_variable) check_variable: '% '
     (check_variable) check_variable: Ary test ' '

      (check_literal) check_literal:lit='(' idx=10 ' '
      (check_literal) check_literal:After drop space:'(' idx=10 ' '
      (check_literal)   '(' != ' '
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator: ABC% 

    (check_literal) check_literal:lit=',' idx=6 'ABC% '
    (check_literal) check_literal:After drop space:',' idx=6 'ABC% '
    (check_literal)   ',' != 'A'
    (check_literal) check_literal: ret0
   (check_operator) check_operator:ret0

   (check_function) check_function: 'ABC% '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=6 'ABC% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=6 'ABC% '
    (check_literal)   '%' != 'A'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=6 'ABC% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=6 'ABC% '
    (check_literal)   '"' != 'A'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'ABC% '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'ABC% ':
     (check_vname) check_vname ret1 '% ':
    (check_variable) check_variable: '% '
    (check_variable) check_variable: Ary test ' '

     (check_literal) check_literal:lit='(' idx=10 ' '
     (check_literal) check_literal:After drop space:'(' idx=10 ' '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1

  (scan_atom) scan_atom:

   (check_literal) check_literal:lit=' %' idx=6 'ABC% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=6 'ABC% '
   (check_literal)   '%' != 'A'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=6 'ABC% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=6 'ABC% '
   (check_literal)   '"' != 'A'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'ABC% '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'ABC% ':
    (check_vname) check_vname ret1 '% ':
   (check_variable) check_variable: '% '
   (check_variable) check_variable: Ary test ' '

    (check_literal) check_literal:lit='(' idx=10 ' '
    (check_literal) check_literal:After drop space:'(' idx=10 ' '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'ABC% '
   (scan_vname) scan_vname: ret1 'ABC'
  (scan_variable) scan_variable: '% ' vname='ABC'
  (scan_variable) scan_variable: Ary test ' '

   (check_literal) check_literal:lit='(' idx=10 ' '
   (check_literal) check_literal:After drop space:'(' idx=10 ' '
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='ABC%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'ABC%' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:ABC% is not function
token_is_variable: tok:'ABC%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:ABC% is not function
 (init_get_name) 
init_get_name:'ABC%'
 (init_get_name) 
init_get_name:'ABC%'
 (get_name) 
get_name:gn:'ABC%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,(U )] i i ABC%
 (print_var_info) 
VAR INFO: '              ABC%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
 (scan_atom) scan_atom:ret1

 (check_eitem) check_eitem: ' '

  (check_operator) check_operator:  

   (check_literal) check_literal:lit=',' idx=11 ''
   (check_literal) check_literal:After drop space:',' idx=11 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_operator) check_operator:ret0

  (check_function) check_function: ''
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=10 ' '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=11 ''
   (check_literal) check_literal  ret0 Empty test string

   (check_literal) check_literal:lit=' "' idx=10 ' '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=11 ''
   (check_literal) check_literal  ret0 Empty test string

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: ''
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname '':
    (check_vname) check_vname ret0 '':
   (check_variable) check_variable:ret0 
  (check_atom) check_atom:ret1

  (check_sub_expr) check_sub_expr:

   (check_literal) check_literal:lit=' (' idx=10 ' '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'(' idx=11 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_sub_expr) check_sub_expr: ret0
 (check_eitem) check_eitem:ret0
(scan_expression) scan_expression: ret1 ' '
(scan_command) scan_command: ret1 =>'PRINT'
(scan_command) 
ENDEXP
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: PRINT type:17
(op_stack_print) 
------------------

(  output_sub_end)
(token_is_function) 
token_is_function:
(token_is_function) PRINT is function
Pop 5
Pop 'PRINT'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_function) [i,(U )] v v PRINT
(  output_sub_end)
Finalise stack
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'ABC%'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
 BE:

Type Check Stack (0)

 BE:ABC%
type_check_stack_push: 'ABC%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'ABC%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'ABC%' type:i (0)
 BE:

Type Check Stack (1)

000: 'ABC%' type:i (0)
 BE:PRINT
FN: 1 args
(function_return_type) 
function_return_type: 'PRINT' =>v
(function_return_type) 
function_return_type: 'PRINT' =>17
ret_type;17 v
typecheck_expression:Ret type of PRINT : v
type_check_stack_pop: 'ABC%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (0)

(type_check_stack_print) 
------------------

FN ARG 0 ri ABC% 0(i)  Arg ok
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:17
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'ABC%'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'ABC%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
(process_expression_types) 
==INFIX==

Var: ABC% ary:0
infix_stack_push: 'ABC%'
infix_stack_pop: 'ABC%'
infix_stack_push: 'PRINT(ABC% )'
infix_stack_pop: 'PRINT(ABC% )'
(process_expression_types) ==PRINT(ABC% )==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     i rq:i ABC%  0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N4 EXP_BUFF_ID_FUNCTION     v rq:v PRINT  0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_END      U rq:i   0:

 (check_literal) check_literal:lit=':' idx=11 ''
 (check_literal) check_literal:After drop space:':' idx=11 ''
 (check_literal) check_literal  ret0 Empty test string
(translate_file) 
cline scanned OK
*************
**PRINT A$ **
*************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'PRINT A$ ':
     (check_vname) check_vname ret1 ' A$ ':
    (check_variable) check_variable: ' A$ '
    (check_variable) check_variable: Ary test ' A$ '

     (check_literal) check_literal:lit='(' idx=5 ' A$ '
     (check_literal) check_literal:After drop space:'(' idx=5 ' A$ '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=5 ' A$ '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=6 'A$ '
   (check_literal)   '=' != 'A'
   (check_literal) check_literal: ret0
  (check_assignment) check_assignment:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) check_textlabel: 'PRINT A$ '
   (check_textlabel) check_textlabel:ret0
  (check_proc_call) check_proc_call:ret0

  (check_command) check_command:
  (check_command) check_command: ret1 found=> 'PRINT'
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=4, ' A$ '
========================================================
PRINT A$ 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'PRINT A$ ':
    (check_vname) check_vname ret1 ' A$ ':
   (check_variable) check_variable: ' A$ '
   (check_variable) check_variable: Ary test ' A$ '

    (check_literal) check_literal:lit='(' idx=5 ' A$ '
    (check_literal) check_literal:After drop space:'(' idx=5 ' A$ '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=5 ' A$ '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=6 'A$ '
  (check_literal)   '=' != 'A'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'PRINT A$ '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'PRINT'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'PRINT' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) PRINT is function
 (function_return_type) 
function_return_type: 'PRINT' =>v
 (function_return_type) 
function_return_type: 'PRINT' =>17
process_token: 'PRINT' t=>v
 Push:'PRINT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' A$ '

   (check_eitem) check_eitem: 'A$ '

    (check_operator) check_operator: A$ 

     (check_literal) check_literal:lit=',' idx=6 'A$ '
     (check_literal) check_literal:After drop space:',' idx=6 'A$ '
     (check_literal)   ',' != 'A'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: 'A$ '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=6 'A$ '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=6 'A$ '
     (check_literal)   '%' != 'A'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=6 'A$ '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=6 'A$ '
     (check_literal)   '"' != 'A'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'A$ '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'A$ ':
      (check_vname) check_vname ret1 '$ ':
     (check_variable) check_variable: '$ '
     (check_variable) check_variable: Ary test ' '

      (check_literal) check_literal:lit='(' idx=8 ' '
      (check_literal) check_literal:After drop space:'(' idx=8 ' '
      (check_literal)   '(' != ' '
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='$' is str:1 int:0 flt:0 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator: A$ 

    (check_literal) check_literal:lit=',' idx=6 'A$ '
    (check_literal) check_literal:After drop space:',' idx=6 'A$ '
    (check_literal)   ',' != 'A'
    (check_literal) check_literal: ret0
   (check_operator) check_operator:ret0

   (check_function) check_function: 'A$ '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=6 'A$ '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=6 'A$ '
    (check_literal)   '%' != 'A'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=6 'A$ '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=6 'A$ '
    (check_literal)   '"' != 'A'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'A$ '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'A$ ':
     (check_vname) check_vname ret1 '$ ':
    (check_variable) check_variable: '$ '
    (check_variable) check_variable: Ary test ' '

     (check_literal) check_literal:lit='(' idx=8 ' '
     (check_literal) check_literal:After drop space:'(' idx=8 ' '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='$' is str:1 int:0 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1

  (scan_atom) scan_atom:

   (check_literal) check_literal:lit=' %' idx=6 'A$ '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=6 'A$ '
   (check_literal)   '%' != 'A'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=6 'A$ '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=6 'A$ '
   (check_literal)   '"' != 'A'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'A$ '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'A$ ':
    (check_vname) check_vname ret1 '$ ':
   (check_variable) check_variable: '$ '
   (check_variable) check_variable: Ary test ' '

    (check_literal) check_literal:lit='(' idx=8 ' '
    (check_literal) check_literal:After drop space:'(' idx=8 ' '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='$' is str:1 int:0 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'A$ '
   (scan_vname) scan_vname: ret1 'A'
  (scan_variable) scan_variable: '$ ' vname='A'
  (scan_variable) scan_variable: Ary test ' '

   (check_literal) check_literal:lit='(' idx=8 ' '
   (check_literal) check_literal:After drop space:'(' idx=8 ' '
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='A$' is str:1 int:0 flt:0 ary:0
   Frst:0 T:'A$' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:A$ is not function
token_is_variable: tok:'A$'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:A$ is not function
 (init_get_name) 
init_get_name:'A$'
 (init_get_name) 
init_get_name:'A$'
 (get_name) 
get_name:gn:'A$'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:s Outtype:s
( output_variable) [s,(U )] s s A$
 (print_var_info) 
VAR INFO: '                A$' gbl:0 ref:1 int:0 flt:0 str:1 ary:0 max_str:0 max_ary:0 num_ind:0
 (scan_atom) scan_atom:ret1

 (check_eitem) check_eitem: ' '

  (check_operator) check_operator:  

   (check_literal) check_literal:lit=',' idx=9 ''
   (check_literal) check_literal:After drop space:',' idx=9 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_operator) check_operator:ret0

  (check_function) check_function: ''
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=8 ' '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=9 ''
   (check_literal) check_literal  ret0 Empty test string

   (check_literal) check_literal:lit=' "' idx=8 ' '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=9 ''
   (check_literal) check_literal  ret0 Empty test string

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: ''
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname '':
    (check_vname) check_vname ret0 '':
   (check_variable) check_variable:ret0 
  (check_atom) check_atom:ret1

  (check_sub_expr) check_sub_expr:

   (check_literal) check_literal:lit=' (' idx=8 ' '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'(' idx=9 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_sub_expr) check_sub_expr: ret0
 (check_eitem) check_eitem:ret0
(scan_expression) scan_expression: ret1 ' '
(scan_command) scan_command: ret1 =>'PRINT'
(scan_command) 
ENDEXP
   Frst:0 T:')' exptype:s
Pop 4
Pop '('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: PRINT type:17
(op_stack_print) 
------------------

(  output_sub_end)
(token_is_function) 
token_is_function:
(token_is_function) PRINT is function
Pop 5
Pop 'PRINT'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_function) [s,(U )] v v PRINT
(  output_sub_end)
Finalise stack
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     s rq:s 'A$'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
 BE:

Type Check Stack (0)

 BE:A$
type_check_stack_push: 'A$'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'A$' type:2
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'A$' type:s (2)
 BE:

Type Check Stack (1)

000: 'A$' type:s (2)
 BE:PRINT
FN: 1 args
(function_return_type) 
function_return_type: 'PRINT' =>v
(function_return_type) 
function_return_type: 'PRINT' =>17
ret_type;17 v
typecheck_expression:Ret type of PRINT : v
type_check_stack_pop: 'A$'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (0)

(type_check_stack_print) 
------------------

FN ARG 0 ri A$ 2(s)  Arg not OK
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:17
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     s rq:s 'A$'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     s rq:s 'A$'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
(process_expression_types) 
==INFIX==

Var: A$ ary:0
infix_stack_push: 'A$'
infix_stack_pop: 'A$'
infix_stack_push: 'PRINT(A$ )'
infix_stack_pop: 'PRINT(A$ )'
(process_expression_types) ==PRINT(A$ )==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     s rq:s A$  0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N4 EXP_BUFF_ID_FUNCTION     v rq:v PRINT  0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_END      U rq:i   0:

 (check_literal) check_literal:lit=':' idx=9 ''
 (check_literal) check_literal:After drop space:':' idx=9 ''
 (check_literal) check_literal  ret0 Empty test string
(translate_file) 
cline scanned OK
***************
**PRINT DEF$ **
***************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'PRINT DEF$ ':
     (check_vname) check_vname ret1 ' DEF$ ':
    (check_variable) check_variable: ' DEF$ '
    (check_variable) check_variable: Ary test ' DEF$ '

     (check_literal) check_literal:lit='(' idx=5 ' DEF$ '
     (check_literal) check_literal:After drop space:'(' idx=5 ' DEF$ '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=5 ' DEF$ '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=6 'DEF$ '
   (check_literal)   '=' != 'D'
   (check_literal) check_literal: ret0
  (check_assignment) check_assignment:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) check_textlabel: 'PRINT DEF$ '
   (check_textlabel) check_textlabel:ret0
  (check_proc_call) check_proc_call:ret0

  (check_command) check_command:
  (check_command) check_command: ret1 found=> 'PRINT'
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=6, ' DEF$ '
========================================================
PRINT DEF$ 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'PRINT DEF$ ':
    (check_vname) check_vname ret1 ' DEF$ ':
   (check_variable) check_variable: ' DEF$ '
   (check_variable) check_variable: Ary test ' DEF$ '

    (check_literal) check_literal:lit='(' idx=5 ' DEF$ '
    (check_literal) check_literal:After drop space:'(' idx=5 ' DEF$ '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=5 ' DEF$ '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=6 'DEF$ '
  (check_literal)   '=' != 'D'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'PRINT DEF$ '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'PRINT'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'PRINT' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) PRINT is function
 (function_return_type) 
function_return_type: 'PRINT' =>v
 (function_return_type) 
function_return_type: 'PRINT' =>17
process_token: 'PRINT' t=>v
 Push:'PRINT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' DEF$ '

   (check_eitem) check_eitem: 'DEF$ '

    (check_operator) check_operator: DEF$ 

     (check_literal) check_literal:lit=',' idx=6 'DEF$ '
     (check_literal) check_literal:After drop space:',' idx=6 'DEF$ '
     (check_literal)   ',' != 'D'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: 'DEF$ '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=6 'DEF$ '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=6 'DEF$ '
     (check_literal)   '%' != 'D'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=6 'DEF$ '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=6 'DEF$ '
     (check_literal)   '"' != 'D'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'DEF$ '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'DEF$ ':
      (check_vname) check_vname ret1 '$ ':
     (check_variable) check_variable: '$ '
     (check_variable) check_variable: Ary test ' '

      (check_literal) check_literal:lit='(' idx=10 ' '
      (check_literal) check_literal:After drop space:'(' idx=10 ' '
      (check_literal)   '(' != ' '
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='$' is str:1 int:0 flt:0 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator: DEF$ 

    (check_literal) check_literal:lit=',' idx=6 'DEF$ '
    (check_literal) check_literal:After drop space:',' idx=6 'DEF$ '
    (check_literal)   ',' != 'D'
    (check_literal) check_literal: ret0
   (check_operator) check_operator:ret0

   (check_function) check_function: 'DEF$ '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=6 'DEF$ '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=6 'DEF$ '
    (check_literal)   '%' != 'D'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=6 'DEF$ '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=6 'DEF$ '
    (check_literal)   '"' != 'D'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'DEF$ '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'DEF$ ':
     (check_vname) check_vname ret1 '$ ':
    (check_variable) check_variable: '$ '
    (check_variable) check_variable: Ary test ' '

     (check_literal) check_literal:lit='(' idx=10 ' '
     (check_literal) check_literal:After drop space:'(' idx=10 ' '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='$' is str:1 int:0 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1

  (scan_atom) scan_atom:

   (check_literal) check_literal:lit=' %' idx=6 'DEF$ '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=6 'DEF$ '
   (check_literal)   '%' != 'D'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=6 'DEF$ '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=6 'DEF$ '
   (check_literal)   '"' != 'D'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'DEF$ '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'DEF$ ':
    (check_vname) check_vname ret1 '$ ':
   (check_variable) check_variable: '$ '
   (check_variable) check_variable: Ary test ' '

    (check_literal) check_literal:lit='(' idx=10 ' '
    (check_literal) check_literal:After drop space:'(' idx=10 ' '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='$' is str:1 int:0 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'DEF$ '
   (scan_vname) scan_vname: ret1 'DEF'
  (scan_variable) scan_variable: '$ ' vname='DEF'
  (scan_variable) scan_variable: Ary test ' '

   (check_literal) check_literal:lit='(' idx=10 ' '
   (check_literal) check_literal:After drop space:'(' idx=10 ' '
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='DEF$' is str:1 int:0 flt:0 ary:0
   Frst:0 T:'DEF$' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:DEF$ is not function
token_is_variable: tok:'DEF$'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:DEF$ is not function
 (init_get_name) 
init_get_name:'DEF$'
 (init_get_name) 
init_get_name:'DEF$'
 (get_name) 
get_name:gn:'DEF$'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:s Outtype:s
( output_variable) [s,(U )] s s DEF$
 (print_var_info) 
VAR INFO: '              DEF$' gbl:0 ref:1 int:0 flt:0 str:1 ary:0 max_str:0 max_ary:0 num_ind:0
 (scan_atom) scan_atom:ret1

 (check_eitem) check_eitem: ' '

  (check_operator) check_operator:  

   (check_literal) check_literal:lit=',' idx=11 ''
   (check_literal) check_literal:After drop space:',' idx=11 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_operator) check_operator:ret0

  (check_function) check_function: ''
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=10 ' '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=11 ''
   (check_literal) check_literal  ret0 Empty test string

   (check_literal) check_literal:lit=' "' idx=10 ' '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=11 ''
   (check_literal) check_literal  ret0 Empty test string

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: ''
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname '':
    (check_vname) check_vname ret0 '':
   (check_variable) check_variable:ret0 
  (check_atom) check_atom:ret1

  (check_sub_expr) check_sub_expr:

   (check_literal) check_literal:lit=' (' idx=10 ' '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'(' idx=11 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_sub_expr) check_sub_expr: ret0
 (check_eitem) check_eitem:ret0
(scan_expression) scan_expression: ret1 ' '
(scan_command) scan_command: ret1 =>'PRINT'
(scan_command) 
ENDEXP
   Frst:0 T:')' exptype:s
Pop 4
Pop '('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: PRINT type:17
(op_stack_print) 
------------------

(  output_sub_end)
(token_is_function) 
token_is_function:
(token_is_function) PRINT is function
Pop 5
Pop 'PRINT'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_function) [s,(U )] v v PRINT
(  output_sub_end)
Finalise stack
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     s rq:s 'DEF$'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
 BE:

Type Check Stack (0)

 BE:DEF$
type_check_stack_push: 'DEF$'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'DEF$' type:2
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'DEF$' type:s (2)
 BE:

Type Check Stack (1)

000: 'DEF$' type:s (2)
 BE:PRINT
FN: 1 args
(function_return_type) 
function_return_type: 'PRINT' =>v
(function_return_type) 
function_return_type: 'PRINT' =>17
ret_type;17 v
typecheck_expression:Ret type of PRINT : v
type_check_stack_pop: 'DEF$'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (0)

(type_check_stack_print) 
------------------

FN ARG 0 ri DEF$ 2(s)  Arg not OK
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:17
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     s rq:s 'DEF$'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     s rq:s 'DEF$'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
(process_expression_types) 
==INFIX==

Var: DEF$ ary:0
infix_stack_push: 'DEF$'
infix_stack_pop: 'DEF$'
infix_stack_push: 'PRINT(DEF$ )'
infix_stack_pop: 'PRINT(DEF$ )'
(process_expression_types) ==PRINT(DEF$ )==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     s rq:s DEF$  0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N4 EXP_BUFF_ID_FUNCTION     v rq:v PRINT  0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_END      U rq:i   0:

 (check_literal) check_literal:lit=':' idx=11 ''
 (check_literal) check_literal:After drop space:':' idx=11 ''
 (check_literal) check_literal  ret0 Empty test string
(translate_file) 
cline scanned OK
***************
**PRINT A(2) **
***************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'PRINT A(2) ':
     (check_vname) check_vname ret1 ' A(2) ':
    (check_variable) check_variable: ' A(2) '
    (check_variable) check_variable: Ary test ' A(2) '

     (check_literal) check_literal:lit='(' idx=5 ' A(2) '
     (check_literal) check_literal:After drop space:'(' idx=5 ' A(2) '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=5 ' A(2) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=6 'A(2) '
   (check_literal)   '=' != 'A'
   (check_literal) check_literal: ret0
  (check_assignment) check_assignment:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) check_textlabel: 'PRINT A(2) '
   (check_textlabel) check_textlabel:ret0
  (check_proc_call) check_proc_call:ret0

  (check_command) check_command:
  (check_command) check_command: ret1 found=> 'PRINT'
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=6, ' A(2) '
========================================================
PRINT A(2) 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'PRINT A(2) ':
    (check_vname) check_vname ret1 ' A(2) ':
   (check_variable) check_variable: ' A(2) '
   (check_variable) check_variable: Ary test ' A(2) '

    (check_literal) check_literal:lit='(' idx=5 ' A(2) '
    (check_literal) check_literal:After drop space:'(' idx=5 ' A(2) '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=5 ' A(2) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=6 'A(2) '
  (check_literal)   '=' != 'A'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'PRINT A(2) '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'PRINT'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'PRINT' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) PRINT is function
 (function_return_type) 
function_return_type: 'PRINT' =>v
 (function_return_type) 
function_return_type: 'PRINT' =>17
process_token: 'PRINT' t=>v
 Push:'PRINT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' A(2) '

   (check_eitem) check_eitem: 'A(2) '

    (check_operator) check_operator: A(2) 

     (check_literal) check_literal:lit=',' idx=6 'A(2) '
     (check_literal) check_literal:After drop space:',' idx=6 'A(2) '
     (check_literal)   ',' != 'A'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: 'A(2) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=6 'A(2) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=6 'A(2) '
     (check_literal)   '%' != 'A'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=6 'A(2) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=6 'A(2) '
     (check_literal)   '"' != 'A'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'A(2) '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'A(2) ':
      (check_vname) check_vname ret1 '(2) ':
     (check_variable) check_variable: '(2) '
     (check_variable) check_variable: Ary test '(2) '

      (check_literal) check_literal:lit='(' idx=7 '(2) '
      (check_literal) check_literal:After drop space:'(' idx=7 '(2) '
      (check_literal) check_literal:After while():2) 
      (check_literal) check_literal:ret1 
     (check_variable) check_variable: is array

      (check_expression) check_expression: '2) '

       (check_eitem) check_eitem: '2) '

        (check_operator) check_operator: 2) 

         (check_literal) check_literal:lit=',' idx=8 '2) '
         (check_literal) check_literal:After drop space:',' idx=8 '2) '
         (check_literal)   ',' != '2'
         (check_literal) check_literal: ret0
        (check_operator) check_operator:ret0

        (check_function) check_function: '2) '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=8 '2) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=8 '2) '
         (check_literal)   '%' != '2'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=8 '2) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=8 '2) '
         (check_literal)   '"' != '2'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: '2) '
          (check_integer) check_integer:ret1
         (check_number) check_number: ret1
        (check_atom) check_atom:ret1
       (check_eitem) check_eitem:ret1

       (check_eitem) check_eitem: ') '

        (check_operator) check_operator: ) 

         (check_literal) check_literal:lit=',' idx=9 ') '
         (check_literal) check_literal:After drop space:',' idx=9 ') '
         (check_literal)   ',' != ')'
         (check_literal) check_literal: ret0
        (check_operator) check_operator:ret0

        (check_function) check_function: ') '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=9 ') '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=9 ') '
         (check_literal)   '%' != ')'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=9 ') '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=9 ') '
         (check_literal)   '"' != ')'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: ') '
          (check_integer) check_integer:ret0
         (check_number) check_number: ret0

         (check_variable) check_variable:

          (check_vname) check_vname ') ':
          (check_vname) check_vname ret0 ') ':
         (check_variable) check_variable:ret0 
        (check_atom) check_atom:ret1

        (check_sub_expr) check_sub_expr:

         (check_literal) check_literal:lit=' (' idx=9 ') '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'(' idx=9 ') '
         (check_literal)   '(' != ')'
         (check_literal) check_literal: ret0
        (check_sub_expr) check_sub_expr: ret0
       (check_eitem) check_eitem:ret0
      (check_expression) check_expression:ret1 ') '

      (check_literal) check_literal:lit=' ,' idx=9 ') '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=9 ') '
      (check_literal)   ',' != ')'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' )' idx=9 ') '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:')' idx=9 ') '
      (check_literal) check_literal:After while(): 
      (check_literal) check_literal:ret1 
     (check_variable) check_variable:ret1 
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (scan_eitem) scan_eitem:

    (check_operator) check_operator: A(2) 

     (check_literal) check_literal:lit=',' idx=6 'A(2) '
     (check_literal) check_literal:After drop space:',' idx=6 'A(2) '
     (check_literal)   ',' != 'A'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: 'A(2) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=6 'A(2) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=6 'A(2) '
     (check_literal)   '%' != 'A'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=6 'A(2) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=6 'A(2) '
     (check_literal)   '"' != 'A'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'A(2) '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'A(2) ':
      (check_vname) check_vname ret1 '(2) ':
     (check_variable) check_variable: '(2) '
     (check_variable) check_variable: Ary test '(2) '

      (check_literal) check_literal:lit='(' idx=7 '(2) '
      (check_literal) check_literal:After drop space:'(' idx=7 '(2) '
      (check_literal) check_literal:After while():2) 
      (check_literal) check_literal:ret1 
     (check_variable) check_variable: is array

      (check_expression) check_expression: '2) '

       (check_eitem) check_eitem: '2) '

        (check_operator) check_operator: 2) 

         (check_literal) check_literal:lit=',' idx=8 '2) '
         (check_literal) check_literal:After drop space:',' idx=8 '2) '
         (check_literal)   ',' != '2'
         (check_literal) check_literal: ret0
        (check_operator) check_operator:ret0

        (check_function) check_function: '2) '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=8 '2) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=8 '2) '
         (check_literal)   '%' != '2'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=8 '2) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=8 '2) '
         (check_literal)   '"' != '2'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: '2) '
          (check_integer) check_integer:ret1
         (check_number) check_number: ret1
        (check_atom) check_atom:ret1
       (check_eitem) check_eitem:ret1

       (check_eitem) check_eitem: ') '

        (check_operator) check_operator: ) 

         (check_literal) check_literal:lit=',' idx=9 ') '
         (check_literal) check_literal:After drop space:',' idx=9 ') '
         (check_literal)   ',' != ')'
         (check_literal) check_literal: ret0
        (check_operator) check_operator:ret0

        (check_function) check_function: ') '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=9 ') '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=9 ') '
         (check_literal)   '%' != ')'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=9 ') '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=9 ') '
         (check_literal)   '"' != ')'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: ') '
          (check_integer) check_integer:ret0
         (check_number) check_number: ret0

         (check_variable) check_variable:

          (check_vname) check_vname ') ':
          (check_vname) check_vname ret0 ') ':
         (check_variable) check_variable:ret0 
        (check_atom) check_atom:ret1

        (check_sub_expr) check_sub_expr:

         (check_literal) check_literal:lit=' (' idx=9 ') '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'(' idx=9 ') '
         (check_literal)   '(' != ')'
         (check_literal) check_literal: ret0
        (check_sub_expr) check_sub_expr: ret0
       (check_eitem) check_eitem:ret0
      (check_expression) check_expression:ret1 ') '

      (check_literal) check_literal:lit=' ,' idx=9 ') '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=9 ') '
      (check_literal)   ',' != ')'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' )' idx=9 ') '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:')' idx=9 ') '
      (check_literal) check_literal:After while(): 
      (check_literal) check_literal:ret1 
     (check_variable) check_variable:ret1 
    (check_atom) check_atom:ret1

    (scan_atom) scan_atom:

     (check_literal) check_literal:lit=' %' idx=6 'A(2) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=6 'A(2) '
     (check_literal)   '%' != 'A'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=6 'A(2) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=6 'A(2) '
     (check_literal)   '"' != 'A'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'A(2) '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'A(2) ':
      (check_vname) check_vname ret1 '(2) ':
     (check_variable) check_variable: '(2) '
     (check_variable) check_variable: Ary test '(2) '

      (check_literal) check_literal:lit='(' idx=7 '(2) '
      (check_literal) check_literal:After drop space:'(' idx=7 '(2) '
      (check_literal) check_literal:After while():2) 
      (check_literal) check_literal:ret1 
     (check_variable) check_variable: is array

      (check_expression) check_expression: '2) '

       (check_eitem) check_eitem: '2) '

        (check_operator) check_operator: 2) 

         (check_literal) check_literal:lit=',' idx=8 '2) '
         (check_literal) check_literal:After drop space:',' idx=8 '2) '
         (check_literal)   ',' != '2'
         (check_literal) check_literal: ret0
        (check_operator) check_operator:ret0

        (check_function) check_function: '2) '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=8 '2) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=8 '2) '
         (check_literal)   '%' != '2'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=8 '2) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=8 '2) '
         (check_literal)   '"' != '2'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: '2) '
          (check_integer) check_integer:ret1
         (check_number) check_number: ret1
        (check_atom) check_atom:ret1
       (check_eitem) check_eitem:ret1

       (check_eitem) check_eitem: ') '

        (check_operator) check_operator: ) 

         (check_literal) check_literal:lit=',' idx=9 ') '
         (check_literal) check_literal:After drop space:',' idx=9 ') '
         (check_literal)   ',' != ')'
         (check_literal) check_literal: ret0
        (check_operator) check_operator:ret0

        (check_function) check_function: ') '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=9 ') '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=9 ') '
         (check_literal)   '%' != ')'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=9 ') '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=9 ') '
         (check_literal)   '"' != ')'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: ') '
          (check_integer) check_integer:ret0
         (check_number) check_number: ret0

         (check_variable) check_variable:

          (check_vname) check_vname ') ':
          (check_vname) check_vname ret0 ') ':
         (check_variable) check_variable:ret0 
        (check_atom) check_atom:ret1

        (check_sub_expr) check_sub_expr:

         (check_literal) check_literal:lit=' (' idx=9 ') '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'(' idx=9 ') '
         (check_literal)   '(' != ')'
         (check_literal) check_literal: ret0
        (check_sub_expr) check_sub_expr: ret0
       (check_eitem) check_eitem:ret0
      (check_expression) check_expression:ret1 ') '

      (check_literal) check_literal:lit=' ,' idx=9 ') '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=9 ') '
      (check_literal)   ',' != ')'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' )' idx=9 ') '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:')' idx=9 ') '
      (check_literal) check_literal:After while(): 
      (check_literal) check_literal:ret1 
     (check_variable) check_variable:ret1 

     (scan_variable) scan_variable:

      (scan_vname) scan_vname: 'A(2) '
      (scan_vname) scan_vname: ret1 'A'
     (scan_variable) scan_variable: '(2) ' vname='A'
     (scan_variable) scan_variable: Ary test '(2) '

      (check_literal) check_literal:lit='(' idx=7 '(2) '
      (check_literal) check_literal:After drop space:'(' idx=7 '(2) '
      (check_literal) check_literal:After while():2) 
      (check_literal) check_literal:ret1 

      (scan_literal) scan_literal:lit='(' '(2) '
      (scan_literal) scan_literal:After drop space:(2) 
      (scan_literal) scan_literal:while loop:(2) 
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (3)

      (op_stack_print) 
000: PRINT type:17
      (op_stack_print) 
001: ( type:16
      (op_stack_print) 
002: ( type:16
      (op_stack_print) 
------------------

      (scan_literal) scan_literal:ret1
     (scan_variable) scan_variable: is array

      (scan_expression) scan_expression: '2) '

       (check_eitem) check_eitem: '2) '

        (check_operator) check_operator: 2) 

         (check_literal) check_literal:lit=',' idx=8 '2) '
         (check_literal) check_literal:After drop space:',' idx=8 '2) '
         (check_literal)   ',' != '2'
         (check_literal) check_literal: ret0
        (check_operator) check_operator:ret0

        (check_function) check_function: '2) '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=8 '2) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=8 '2) '
         (check_literal)   '%' != '2'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=8 '2) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=8 '2) '
         (check_literal)   '"' != '2'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: '2) '
          (check_integer) check_integer:ret1
         (check_number) check_number: ret1
        (check_atom) check_atom:ret1
       (check_eitem) check_eitem:ret1

       (scan_eitem) scan_eitem:

        (check_operator) check_operator: 2) 

         (check_literal) check_literal:lit=',' idx=8 '2) '
         (check_literal) check_literal:After drop space:',' idx=8 '2) '
         (check_literal)   ',' != '2'
         (check_literal) check_literal: ret0
        (check_operator) check_operator:ret0

        (check_function) check_function: '2) '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=8 '2) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=8 '2) '
         (check_literal)   '%' != '2'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=8 '2) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=8 '2) '
         (check_literal)   '"' != '2'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: '2) '
          (check_integer) check_integer:ret1
         (check_number) check_number: ret1
        (check_atom) check_atom:ret1

        (scan_atom) scan_atom:

         (check_literal) check_literal:lit=' %' idx=8 '2) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=8 '2) '
         (check_literal)   '%' != '2'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=8 '2) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=8 '2) '
         (check_literal)   '"' != '2'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: '2) '
          (check_integer) check_integer:ret1
         (check_number) check_number: ret1

         (scan_number) scan_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: '2) '
          (check_integer) check_integer:ret1

          (scan_integer) scan_integer:
          (scan_integer) scan_integer:ret1
   Frst:0 T:'2' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U U )] i i 2
         (scan_integer) scan_integer:ret1  2
        (scan_atom) scan_atom:ret1

        (check_eitem) check_eitem: ') '

         (check_operator) check_operator: ) 

          (check_literal) check_literal:lit=',' idx=9 ') '
          (check_literal) check_literal:After drop space:',' idx=9 ') '
          (check_literal)   ',' != ')'
          (check_literal) check_literal: ret0
         (check_operator) check_operator:ret0

         (check_function) check_function: ') '
         (check_function) check_function: ret0

         (check_atom) check_atom:

          (check_literal) check_literal:lit=' %' idx=9 ') '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=9 ') '
          (check_literal)   '%' != ')'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=9 ') '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=9 ') '
          (check_literal)   '"' != ')'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: ') '
           (check_integer) check_integer:ret0
          (check_number) check_number: ret0

          (check_variable) check_variable:

           (check_vname) check_vname ') ':
           (check_vname) check_vname ret0 ') ':
          (check_variable) check_variable:ret0 
         (check_atom) check_atom:ret1

         (check_sub_expr) check_sub_expr:

          (check_literal) check_literal:lit=' (' idx=9 ') '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'(' idx=9 ') '
          (check_literal)   '(' != ')'
          (check_literal) check_literal: ret0
         (check_sub_expr) check_sub_expr: ret0
        (check_eitem) check_eitem:ret0
       (scan_expression) scan_expression: ret1 ') '

       (check_literal) check_literal:lit=' ,' idx=9 ') '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=9 ') '
       (check_literal)   ',' != ')'
       (check_literal) check_literal: ret0

       (scan_literal) scan_literal:lit=' )' ') '
       (scan_literal) scan_literal:After drop space:) 
       (scan_literal) scan_literal:while loop:) 
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (2)

       (op_stack_print) 
000: PRINT type:17
       (op_stack_print) 
001: ( type:16
       (op_stack_print) 
------------------

(  output_sub_end)
       (token_is_function) 
token_is_function:
       (token_is_function) 
token_is_function:( is not function
(  output_sub_end)
       (scan_literal) scan_literal:ret1
      (scan_variable) scan_variable:ret1 vname='A' is str:0 int:0 flt:1 ary:1
   Frst:0 T:'A' exptype:U
     (token_is_function) 
token_is_function:
     (token_is_function) 
token_is_function:A is not function
token_is_variable: tok:'A'
     (token_is_function) 
token_is_function:
     (token_is_function) 
token_is_function:A is not function
     (init_get_name) 
init_get_name:'A'
     (init_get_name) 
init_get_name:'A'
     (get_name) 
get_name:gn:'A'
process_token:type:U req_type:?
modify_expression_type:Inittype:U Intype:f Outtype:f
( output_variable) [f,(U )] f f A
     (print_var_info) 
VAR INFO: '                 A' gbl:0 ref:1 int:0 flt:1 str:0 ary:1 max_str:0 max_ary:0 num_ind:1
     (scan_atom) scan_atom:ret1

     (check_eitem) check_eitem: ' '

      (check_operator) check_operator:  

       (check_literal) check_literal:lit=',' idx=11 ''
       (check_literal) check_literal:After drop space:',' idx=11 ''
       (check_literal) check_literal  ret0 Empty test string
      (check_operator) check_operator:ret0

      (check_function) check_function: ''
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=10 ' '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=11 ''
       (check_literal) check_literal  ret0 Empty test string

       (check_literal) check_literal:lit=' "' idx=10 ' '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=11 ''
       (check_literal) check_literal  ret0 Empty test string

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: ''
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname '':
        (check_vname) check_vname ret0 '':
       (check_variable) check_variable:ret0 
      (check_atom) check_atom:ret1

      (check_sub_expr) check_sub_expr:

       (check_literal) check_literal:lit=' (' idx=10 ' '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'(' idx=11 ''
       (check_literal) check_literal  ret0 Empty test string
      (check_sub_expr) check_sub_expr: ret0
     (check_eitem) check_eitem:ret0
    (scan_expression) scan_expression: ret1 ' '
   (scan_command) scan_command: ret1 =>'PRINT'
  (scan_command) 
ENDEXP
   Frst:0 T:')' exptype:f
Pop 4
Pop '('
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (1)

  (op_stack_print) 
000: PRINT type:17
  (op_stack_print) 
------------------

(  output_sub_end)
  (token_is_function) 
token_is_function:
  (token_is_function) PRINT is function
Pop 5
Pop 'PRINT'
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (0)

  (op_stack_print) 
------------------

( output_function) [f,(U )] v v PRINT
(  output_sub_end)
Finalise stack
  (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'A'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
 BE:

Type Check Stack (0)

 BE:

Type Check Stack (0)

 BE:2
type_check_stack_push: '2'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (1)

  (type_check_stack_print) 
000: '2' type:0
  (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '2' type:i (0)
 BE:

Type Check Stack (1)

000: '2' type:i (0)
 BE:

Type Check Stack (1)

000: '2' type:i (0)
 BE:A
type_check_stack_push: 'A'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (2)

  (type_check_stack_print) 
000: '2' type:0
  (type_check_stack_print) 
001: 'A' type:1
  (type_check_stack_print) 
------------------


Type Check Stack (2)

000: '2' type:i (0)
001: 'A' type:f (1)
 BE:

Type Check Stack (2)

000: '2' type:i (0)
001: 'A' type:f (1)
 BE:PRINT
FN: 1 args
  (function_return_type) 
function_return_type: 'PRINT' =>v
  (function_return_type) 
function_return_type: 'PRINT' =>17
ret_type;17 v
typecheck_expression:Ret type of PRINT : v
type_check_stack_pop: 'A'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (1)

  (type_check_stack_print) 
000: '2' type:0
  (type_check_stack_print) 
------------------

FN ARG 0 ri A 1(f)  Arg not OK
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_VARIABLE     f rq:f 'A'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
 Insert after 6 exp_buffer2_i:7
   Found at i:5
   Copied 6 to 7:
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_VARIABLE     f rq:f 'A'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_AUTOCON      v rq:v 'autocon f->i'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
type_check_stack_push: '000'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (2)

  (type_check_stack_print) 
000: '2' type:0
  (type_check_stack_print) 
001: '000' type:17
  (type_check_stack_print) 
------------------


Type Check Stack (2)

000: '2' type:i (0)
001: '000' type:v (17)
 BE:

Type Check Stack (2)

000: '2' type:i (0)
001: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'A'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_VARIABLE     f rq:f 'A'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_AUTOCON      v rq:v 'autocon f->i'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
  (process_expression_types) 
==INFIX==

infix_stack_push: '2'
Var: A ary:1
infix_stack_pop: '2'
infix_stack_push: 'A(2)'
infix_stack_pop: 'A(2)'
infix_stack_push: 'PRINT(A(2) )'
infix_stack_pop: 'PRINT(A(2) )'
  (process_expression_types) ==PRINT(A(2) )==
  (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N3 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
(    output_qcode) N4 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
(    output_qcode) N9 EXP_BUFF_ID_AUTOCON      v rq:v autocon f->i  0:
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N8 EXP_BUFF_ID_FUNCTION     v rq:v PRINT  0:
(    output_qcode) N10 EXP_BUFF_ID_SUB_END      U rq:i   0:

   (check_literal) check_literal:lit=':' idx=11 ''
   (check_literal) check_literal:After drop space:':' idx=11 ''
   (check_literal) check_literal  ret0 Empty test string
  (translate_file) 
cline scanned OK
*****************
**PRINT B%(10) **
*****************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'PRINT B%(10) ':
     (check_vname) check_vname ret1 ' B%(10) ':
    (check_variable) check_variable: ' B%(10) '
    (check_variable) check_variable: Ary test ' B%(10) '

     (check_literal) check_literal:lit='(' idx=5 ' B%(10) '
     (check_literal) check_literal:After drop space:'(' idx=5 ' B%(10) '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=5 ' B%(10) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=6 'B%(10) '
   (check_literal)   '=' != 'B'
   (check_literal) check_literal: ret0
  (check_assignment) check_assignment:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) check_textlabel: 'PRINT B%(10) '
   (check_textlabel) check_textlabel:ret0
  (check_proc_call) check_proc_call:ret0

  (check_command) check_command:
  (check_command) check_command: ret1 found=> 'PRINT'
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=8, ' B%(10) '
========================================================
PRINT B%(10) 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'PRINT B%(10) ':
    (check_vname) check_vname ret1 ' B%(10) ':
   (check_variable) check_variable: ' B%(10) '
   (check_variable) check_variable: Ary test ' B%(10) '

    (check_literal) check_literal:lit='(' idx=5 ' B%(10) '
    (check_literal) check_literal:After drop space:'(' idx=5 ' B%(10) '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=5 ' B%(10) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=6 'B%(10) '
  (check_literal)   '=' != 'B'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'PRINT B%(10) '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'PRINT'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'PRINT' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) PRINT is function
 (function_return_type) 
function_return_type: 'PRINT' =>v
 (function_return_type) 
function_return_type: 'PRINT' =>17
process_token: 'PRINT' t=>v
 Push:'PRINT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' B%(10) '

   (check_eitem) check_eitem: 'B%(10) '

    (check_operator) check_operator: B%(10) 

     (check_literal) check_literal:lit=',' idx=6 'B%(10) '
     (check_literal) check_literal:After drop space:',' idx=6 'B%(10) '
     (check_literal)   ',' != 'B'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: 'B%(10) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=6 'B%(10) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=6 'B%(10) '
     (check_literal)   '%' != 'B'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=6 'B%(10) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=6 'B%(10) '
     (check_literal)   '"' != 'B'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'B%(10) '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'B%(10) ':
      (check_vname) check_vname ret1 '%(10) ':
     (check_variable) check_variable: '%(10) '
     (check_variable) check_variable: Ary test '(10) '

      (check_literal) check_literal:lit='(' idx=8 '(10) '
      (check_literal) check_literal:After drop space:'(' idx=8 '(10) '
      (check_literal) check_literal:After while():10) 
      (check_literal) check_literal:ret1 
     (check_variable) check_variable: is array

      (check_expression) check_expression: '10) '

       (check_eitem) check_eitem: '10) '

        (check_operator) check_operator: 10) 

         (check_literal) check_literal:lit=',' idx=9 '10) '
         (check_literal) check_literal:After drop space:',' idx=9 '10) '
         (check_literal)   ',' != '1'
         (check_literal) check_literal: ret0
        (check_operator) check_operator:ret0

        (check_function) check_function: '10) '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=9 '10) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=9 '10) '
         (check_literal)   '%' != '1'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=9 '10) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=9 '10) '
         (check_literal)   '"' != '1'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: '10) '
          (check_integer) check_integer:ret1
         (check_number) check_number: ret1
        (check_atom) check_atom:ret1
       (check_eitem) check_eitem:ret1

       (check_eitem) check_eitem: ') '

        (check_operator) check_operator: ) 

         (check_literal) check_literal:lit=',' idx=11 ') '
         (check_literal) check_literal:After drop space:',' idx=11 ') '
         (check_literal)   ',' != ')'
         (check_literal) check_literal: ret0
        (check_operator) check_operator:ret0

        (check_function) check_function: ') '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=11 ') '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=11 ') '
         (check_literal)   '%' != ')'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=11 ') '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=11 ') '
         (check_literal)   '"' != ')'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: ') '
          (check_integer) check_integer:ret0
         (check_number) check_number: ret0

         (check_variable) check_variable:

          (check_vname) check_vname ') ':
          (check_vname) check_vname ret0 ') ':
         (check_variable) check_variable:ret0 
        (check_atom) check_atom:ret1

        (check_sub_expr) check_sub_expr:

         (check_literal) check_literal:lit=' (' idx=11 ') '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'(' idx=11 ') '
         (check_literal)   '(' != ')'
         (check_literal) check_literal: ret0
        (check_sub_expr) check_sub_expr: ret0
       (check_eitem) check_eitem:ret0
      (check_expression) check_expression:ret1 ') '

      (check_literal) check_literal:lit=' ,' idx=11 ') '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=11 ') '
      (check_literal)   ',' != ')'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' )' idx=11 ') '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:')' idx=11 ') '
      (check_literal) check_literal:After while(): 
      (check_literal) check_literal:ret1 
     (check_variable) check_variable:ret1 
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (scan_eitem) scan_eitem:

    (check_operator) check_operator: B%(10) 

     (check_literal) check_literal:lit=',' idx=6 'B%(10) '
     (check_literal) check_literal:After drop space:',' idx=6 'B%(10) '
     (check_literal)   ',' != 'B'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: 'B%(10) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=6 'B%(10) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=6 'B%(10) '
     (check_literal)   '%' != 'B'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=6 'B%(10) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=6 'B%(10) '
     (check_literal)   '"' != 'B'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'B%(10) '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'B%(10) ':
      (check_vname) check_vname ret1 '%(10) ':
     (check_variable) check_variable: '%(10) '
     (check_variable) check_variable: Ary test '(10) '

      (check_literal) check_literal:lit='(' idx=8 '(10) '
      (check_literal) check_literal:After drop space:'(' idx=8 '(10) '
      (check_literal) check_literal:After while():10) 
      (check_literal) check_literal:ret1 
     (check_variable) check_variable: is array

      (check_expression) check_expression: '10) '

       (check_eitem) check_eitem: '10) '

        (check_operator) check_operator: 10) 

         (check_literal) check_literal:lit=',' idx=9 '10) '
         (check_literal) check_literal:After drop space:',' idx=9 '10) '
         (check_literal)   ',' != '1'
         (check_literal) check_literal: ret0
        (check_operator) check_operator:ret0

        (check_function) check_function: '10) '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=9 '10) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=9 '10) '
         (check_literal)   '%' != '1'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=9 '10) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=9 '10) '
         (check_literal)   '"' != '1'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: '10) '
          (check_integer) check_integer:ret1
         (check_number) check_number: ret1
        (check_atom) check_atom:ret1
       (check_eitem) check_eitem:ret1

       (check_eitem) check_eitem: ') '

        (check_operator) check_operator: ) 

         (check_literal) check_literal:lit=',' idx=11 ') '
         (check_literal) check_literal:After drop space:',' idx=11 ') '
         (check_literal)   ',' != ')'
         (check_literal) check_literal: ret0
        (check_operator) check_operator:ret0

        (check_function) check_function: ') '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=11 ') '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=11 ') '
         (check_literal)   '%' != ')'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=11 ') '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=11 ') '
         (check_literal)   '"' != ')'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: ') '
          (check_integer) check_integer:ret0
         (check_number) check_number: ret0

         (check_variable) check_variable:

          (check_vname) check_vname ') ':
          (check_vname) check_vname ret0 ') ':
         (check_variable) check_variable:ret0 
        (check_atom) check_atom:ret1

        (check_sub_expr) check_sub_expr:

         (check_literal) check_literal:lit=' (' idx=11 ') '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'(' idx=11 ') '
         (check_literal)   '(' != ')'
         (check_literal) check_literal: ret0
        (check_sub_expr) check_sub_expr: ret0
       (check_eitem) check_eitem:ret0
      (check_expression) check_expression:ret1 ') '

      (check_literal) check_literal:lit=' ,' idx=11 ') '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=11 ') '
      (check_literal)   ',' != ')'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' )' idx=11 ') '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:')' idx=11 ') '
      (check_literal) check_literal:After while(): 
      (check_literal) check_literal:ret1 
     (check_variable) check_variable:ret1 
    (check_atom) check_atom:ret1

    (scan_atom) scan_atom:

     (check_literal) check_literal:lit=' %' idx=6 'B%(10) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=6 'B%(10) '
     (check_literal)   '%' != 'B'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=6 'B%(10) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=6 'B%(10) '
     (check_literal)   '"' != 'B'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'B%(10) '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'B%(10) ':
      (check_vname) check_vname ret1 '%(10) ':
     (check_variable) check_variable: '%(10) '
     (check_variable) check_variable: Ary test '(10) '

      (check_literal) check_literal:lit='(' idx=8 '(10) '
      (check_literal) check_literal:After drop space:'(' idx=8 '(10) '
      (check_literal) check_literal:After while():10) 
      (check_literal) check_literal:ret1 
     (check_variable) check_variable: is array

      (check_expression) check_expression: '10) '

       (check_eitem) check_eitem: '10) '

        (check_operator) check_operator: 10) 

         (check_literal) check_literal:lit=',' idx=9 '10) '
         (check_literal) check_literal:After drop space:',' idx=9 '10) '
         (check_literal)   ',' != '1'
         (check_literal) check_literal: ret0
        (check_operator) check_operator:ret0

        (check_function) check_function: '10) '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=9 '10) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=9 '10) '
         (check_literal)   '%' != '1'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=9 '10) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=9 '10) '
         (check_literal)   '"' != '1'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: '10) '
          (check_integer) check_integer:ret1
         (check_number) check_number: ret1
        (check_atom) check_atom:ret1
       (check_eitem) check_eitem:ret1

       (check_eitem) check_eitem: ') '

        (check_operator) check_operator: ) 

         (check_literal) check_literal:lit=',' idx=11 ') '
         (check_literal) check_literal:After drop space:',' idx=11 ') '
         (check_literal)   ',' != ')'
         (check_literal) check_literal: ret0
        (check_operator) check_operator:ret0

        (check_function) check_function: ') '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=11 ') '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=11 ') '
         (check_literal)   '%' != ')'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=11 ') '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=11 ') '
         (check_literal)   '"' != ')'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: ') '
          (check_integer) check_integer:ret0
         (check_number) check_number: ret0

         (check_variable) check_variable:

          (check_vname) check_vname ') ':
          (check_vname) check_vname ret0 ') ':
         (check_variable) check_variable:ret0 
        (check_atom) check_atom:ret1

        (check_sub_expr) check_sub_expr:

         (check_literal) check_literal:lit=' (' idx=11 ') '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'(' idx=11 ') '
         (check_literal)   '(' != ')'
         (check_literal) check_literal: ret0
        (check_sub_expr) check_sub_expr: ret0
       (check_eitem) check_eitem:ret0
      (check_expression) check_expression:ret1 ') '

      (check_literal) check_literal:lit=' ,' idx=11 ') '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=11 ') '
      (check_literal)   ',' != ')'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' )' idx=11 ') '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:')' idx=11 ') '
      (check_literal) check_literal:After while(): 
      (check_literal) check_literal:ret1 
     (check_variable) check_variable:ret1 

     (scan_variable) scan_variable:

      (scan_vname) scan_vname: 'B%(10) '
      (scan_vname) scan_vname: ret1 'B'
     (scan_variable) scan_variable: '%(10) ' vname='B'
     (scan_variable) scan_variable: Ary test '(10) '

      (check_literal) check_literal:lit='(' idx=8 '(10) '
      (check_literal) check_literal:After drop space:'(' idx=8 '(10) '
      (check_literal) check_literal:After while():10) 
      (check_literal) check_literal:ret1 

      (scan_literal) scan_literal:lit='(' '(10) '
      (scan_literal) scan_literal:After drop space:(10) 
      (scan_literal) scan_literal:while loop:(10) 
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (3)

      (op_stack_print) 
000: PRINT type:17
      (op_stack_print) 
001: ( type:16
      (op_stack_print) 
002: ( type:16
      (op_stack_print) 
------------------

      (scan_literal) scan_literal:ret1
     (scan_variable) scan_variable: is array

      (scan_expression) scan_expression: '10) '

       (check_eitem) check_eitem: '10) '

        (check_operator) check_operator: 10) 

         (check_literal) check_literal:lit=',' idx=9 '10) '
         (check_literal) check_literal:After drop space:',' idx=9 '10) '
         (check_literal)   ',' != '1'
         (check_literal) check_literal: ret0
        (check_operator) check_operator:ret0

        (check_function) check_function: '10) '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=9 '10) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=9 '10) '
         (check_literal)   '%' != '1'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=9 '10) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=9 '10) '
         (check_literal)   '"' != '1'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: '10) '
          (check_integer) check_integer:ret1
         (check_number) check_number: ret1
        (check_atom) check_atom:ret1
       (check_eitem) check_eitem:ret1

       (scan_eitem) scan_eitem:

        (check_operator) check_operator: 10) 

         (check_literal) check_literal:lit=',' idx=9 '10) '
         (check_literal) check_literal:After drop space:',' idx=9 '10) '
         (check_literal)   ',' != '1'
         (check_literal) check_literal: ret0
        (check_operator) check_operator:ret0

        (check_function) check_function: '10) '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=9 '10) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=9 '10) '
         (check_literal)   '%' != '1'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=9 '10) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=9 '10) '
         (check_literal)   '"' != '1'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: '10) '
          (check_integer) check_integer:ret1
         (check_number) check_number: ret1
        (check_atom) check_atom:ret1

        (scan_atom) scan_atom:

         (check_literal) check_literal:lit=' %' idx=9 '10) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=9 '10) '
         (check_literal)   '%' != '1'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=9 '10) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=9 '10) '
         (check_literal)   '"' != '1'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: '10) '
          (check_integer) check_integer:ret1
         (check_number) check_number: ret1

         (scan_number) scan_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: '10) '
          (check_integer) check_integer:ret1

          (scan_integer) scan_integer:
          (scan_integer) scan_integer:ret1
   Frst:0 T:'10' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U U )] i i 10
         (scan_integer) scan_integer:ret1  10
        (scan_atom) scan_atom:ret1

        (check_eitem) check_eitem: ') '

         (check_operator) check_operator: ) 

          (check_literal) check_literal:lit=',' idx=11 ') '
          (check_literal) check_literal:After drop space:',' idx=11 ') '
          (check_literal)   ',' != ')'
          (check_literal) check_literal: ret0
         (check_operator) check_operator:ret0

         (check_function) check_function: ') '
         (check_function) check_function: ret0

         (check_atom) check_atom:

          (check_literal) check_literal:lit=' %' idx=11 ') '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=11 ') '
          (check_literal)   '%' != ')'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=11 ') '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=11 ') '
          (check_literal)   '"' != ')'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: ') '
           (check_integer) check_integer:ret0
          (check_number) check_number: ret0

          (check_variable) check_variable:

           (check_vname) check_vname ') ':
           (check_vname) check_vname ret0 ') ':
          (check_variable) check_variable:ret0 
         (check_atom) check_atom:ret1

         (check_sub_expr) check_sub_expr:

          (check_literal) check_literal:lit=' (' idx=11 ') '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'(' idx=11 ') '
          (check_literal)   '(' != ')'
          (check_literal) check_literal: ret0
         (check_sub_expr) check_sub_expr: ret0
        (check_eitem) check_eitem:ret0
       (scan_expression) scan_expression: ret1 ') '

       (check_literal) check_literal:lit=' ,' idx=11 ') '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=11 ') '
       (check_literal)   ',' != ')'
       (check_literal) check_literal: ret0

       (scan_literal) scan_literal:lit=' )' ') '
       (scan_literal) scan_literal:After drop space:) 
       (scan_literal) scan_literal:while loop:) 
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (2)

       (op_stack_print) 
000: PRINT type:17
       (op_stack_print) 
001: ( type:16
       (op_stack_print) 
------------------

(  output_sub_end)
       (token_is_function) 
token_is_function:
       (token_is_function) 
token_is_function:( is not function
(  output_sub_end)
       (scan_literal) scan_literal:ret1
      (scan_variable) scan_variable:ret1 vname='B%' is str:0 int:1 flt:0 ary:1
   Frst:0 T:'B%' exptype:U
     (token_is_function) 
token_is_function:
     (token_is_function) 
token_is_function:B% is not function
token_is_variable: tok:'B%'
     (token_is_function) 
token_is_function:
     (token_is_function) 
token_is_function:B% is not function
     (init_get_name) 
init_get_name:'B%'
     (init_get_name) 
init_get_name:'B%'
     (get_name) 
get_name:gn:'B%'
process_token:type:U req_type:?
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,(U )] i i B%
     (print_var_info) 
VAR INFO: '                B%' gbl:0 ref:1 int:1 flt:0 str:0 ary:1 max_str:0 max_ary:0 num_ind:1
     (scan_atom) scan_atom:ret1

     (check_eitem) check_eitem: ' '

      (check_operator) check_operator:  

       (check_literal) check_literal:lit=',' idx=13 ''
       (check_literal) check_literal:After drop space:',' idx=13 ''
       (check_literal) check_literal  ret0 Empty test string
      (check_operator) check_operator:ret0

      (check_function) check_function: ''
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=12 ' '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=13 ''
       (check_literal) check_literal  ret0 Empty test string

       (check_literal) check_literal:lit=' "' idx=12 ' '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=13 ''
       (check_literal) check_literal  ret0 Empty test string

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: ''
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname '':
        (check_vname) check_vname ret0 '':
       (check_variable) check_variable:ret0 
      (check_atom) check_atom:ret1

      (check_sub_expr) check_sub_expr:

       (check_literal) check_literal:lit=' (' idx=12 ' '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'(' idx=13 ''
       (check_literal) check_literal  ret0 Empty test string
      (check_sub_expr) check_sub_expr: ret0
     (check_eitem) check_eitem:ret0
    (scan_expression) scan_expression: ret1 ' '
   (scan_command) scan_command: ret1 =>'PRINT'
  (scan_command) 
ENDEXP
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (1)

  (op_stack_print) 
000: PRINT type:17
  (op_stack_print) 
------------------

(  output_sub_end)
  (token_is_function) 
token_is_function:
  (token_is_function) PRINT is function
Pop 5
Pop 'PRINT'
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (0)

  (op_stack_print) 
------------------

( output_function) [i,(U )] v v PRINT
(  output_sub_end)
Finalise stack
  (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '10'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'B%'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
 BE:

Type Check Stack (0)

 BE:

Type Check Stack (0)

 BE:10
type_check_stack_push: '10'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (1)

  (type_check_stack_print) 
000: '10' type:0
  (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '10' type:i (0)
 BE:

Type Check Stack (1)

000: '10' type:i (0)
 BE:

Type Check Stack (1)

000: '10' type:i (0)
 BE:B%
type_check_stack_push: 'B%'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (2)

  (type_check_stack_print) 
000: '10' type:0
  (type_check_stack_print) 
001: 'B%' type:0
  (type_check_stack_print) 
------------------


Type Check Stack (2)

000: '10' type:i (0)
001: 'B%' type:i (0)
 BE:

Type Check Stack (2)

000: '10' type:i (0)
001: 'B%' type:i (0)
 BE:PRINT
FN: 1 args
  (function_return_type) 
function_return_type: 'PRINT' =>v
  (function_return_type) 
function_return_type: 'PRINT' =>17
ret_type;17 v
typecheck_expression:Ret type of PRINT : v
type_check_stack_pop: 'B%'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (1)

  (type_check_stack_print) 
000: '10' type:0
  (type_check_stack_print) 
------------------

FN ARG 0 ri B% 0(i)  Arg ok
type_check_stack_push: '000'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (2)

  (type_check_stack_print) 
000: '10' type:0
  (type_check_stack_print) 
001: '000' type:17
  (type_check_stack_print) 
------------------


Type Check Stack (2)

000: '10' type:i (0)
001: '000' type:v (17)
 BE:

Type Check Stack (2)

000: '10' type:i (0)
001: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '10'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'B%'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_INTEGER      i rq:i '10'  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_VARIABLE     i rq:i 'B%'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
  (process_expression_types) 
==INFIX==

infix_stack_push: '10'
Var: B% ary:1
infix_stack_pop: '10'
infix_stack_push: 'B%(10)'
infix_stack_pop: 'B%(10)'
infix_stack_push: 'PRINT(B%(10) )'
infix_stack_pop: 'PRINT(B%(10) )'
  (process_expression_types) ==PRINT(B%(10) )==
  (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N3 EXP_BUFF_ID_INTEGER      i rq:i 10  0:
(    output_qcode) N4 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_VARIABLE     i rq:i B%  0:
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N8 EXP_BUFF_ID_FUNCTION     v rq:v PRINT  0:
(    output_qcode) N9 EXP_BUFF_ID_SUB_END      U rq:i   0:

   (check_literal) check_literal:lit=':' idx=13 ''
   (check_literal) check_literal:After drop space:':' idx=13 ''
   (check_literal) check_literal  ret0 Empty test string
  (translate_file) 
cline scanned OK
****************
**PRINT D$(2) **
****************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'PRINT D$(2) ':
     (check_vname) check_vname ret1 ' D$(2) ':
    (check_variable) check_variable: ' D$(2) '
    (check_variable) check_variable: Ary test ' D$(2) '

     (check_literal) check_literal:lit='(' idx=5 ' D$(2) '
     (check_literal) check_literal:After drop space:'(' idx=5 ' D$(2) '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=5 ' D$(2) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=6 'D$(2) '
   (check_literal)   '=' != 'D'
   (check_literal) check_literal: ret0
  (check_assignment) check_assignment:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) check_textlabel: 'PRINT D$(2) '
   (check_textlabel) check_textlabel:ret0
  (check_proc_call) check_proc_call:ret0

  (check_command) check_command:
  (check_command) check_command: ret1 found=> 'PRINT'
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=7, ' D$(2) '
========================================================
PRINT D$(2) 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'PRINT D$(2) ':
    (check_vname) check_vname ret1 ' D$(2) ':
   (check_variable) check_variable: ' D$(2) '
   (check_variable) check_variable: Ary test ' D$(2) '

    (check_literal) check_literal:lit='(' idx=5 ' D$(2) '
    (check_literal) check_literal:After drop space:'(' idx=5 ' D$(2) '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=5 ' D$(2) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=6 'D$(2) '
  (check_literal)   '=' != 'D'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'PRINT D$(2) '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'PRINT'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'PRINT' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) PRINT is function
 (function_return_type) 
function_return_type: 'PRINT' =>v
 (function_return_type) 
function_return_type: 'PRINT' =>17
process_token: 'PRINT' t=>v
 Push:'PRINT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' D$(2) '

   (check_eitem) check_eitem: 'D$(2) '

    (check_operator) check_operator: D$(2) 

     (check_literal) check_literal:lit=',' idx=6 'D$(2) '
     (check_literal) check_literal:After drop space:',' idx=6 'D$(2) '
     (check_literal)   ',' != 'D'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: 'D$(2) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=6 'D$(2) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=6 'D$(2) '
     (check_literal)   '%' != 'D'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=6 'D$(2) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=6 'D$(2) '
     (check_literal)   '"' != 'D'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'D$(2) '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'D$(2) ':
      (check_vname) check_vname ret1 '$(2) ':
     (check_variable) check_variable: '$(2) '
     (check_variable) check_variable: Ary test '(2) '

      (check_literal) check_literal:lit='(' idx=8 '(2) '
      (check_literal) check_literal:After drop space:'(' idx=8 '(2) '
      (check_literal) check_literal:After while():2) 
      (check_literal) check_literal:ret1 
     (check_variable) check_variable: is array

      (check_expression) check_expression: '2) '

       (check_eitem) check_eitem: '2) '

        (check_operator) check_operator: 2) 

         (check_literal) check_literal:lit=',' idx=9 '2) '
         (check_literal) check_literal:After drop space:',' idx=9 '2) '
         (check_literal)   ',' != '2'
         (check_literal) check_literal: ret0
        (check_operator) check_operator:ret0

        (check_function) check_function: '2) '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=9 '2) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=9 '2) '
         (check_literal)   '%' != '2'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=9 '2) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=9 '2) '
         (check_literal)   '"' != '2'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: '2) '
          (check_integer) check_integer:ret1
         (check_number) check_number: ret1
        (check_atom) check_atom:ret1
       (check_eitem) check_eitem:ret1

       (check_eitem) check_eitem: ') '

        (check_operator) check_operator: ) 

         (check_literal) check_literal:lit=',' idx=10 ') '
         (check_literal) check_literal:After drop space:',' idx=10 ') '
         (check_literal)   ',' != ')'
         (check_literal) check_literal: ret0
        (check_operator) check_operator:ret0

        (check_function) check_function: ') '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=10 ') '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=10 ') '
         (check_literal)   '%' != ')'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=10 ') '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=10 ') '
         (check_literal)   '"' != ')'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: ') '
          (check_integer) check_integer:ret0
         (check_number) check_number: ret0

         (check_variable) check_variable:

          (check_vname) check_vname ') ':
          (check_vname) check_vname ret0 ') ':
         (check_variable) check_variable:ret0 
        (check_atom) check_atom:ret1

        (check_sub_expr) check_sub_expr:

         (check_literal) check_literal:lit=' (' idx=10 ') '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'(' idx=10 ') '
         (check_literal)   '(' != ')'
         (check_literal) check_literal: ret0
        (check_sub_expr) check_sub_expr: ret0
       (check_eitem) check_eitem:ret0
      (check_expression) check_expression:ret1 ') '

      (check_literal) check_literal:lit=' ,' idx=10 ') '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=10 ') '
      (check_literal)   ',' != ')'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' )' idx=10 ') '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:')' idx=10 ') '
      (check_literal) check_literal:After while(): 
      (check_literal) check_literal:ret1 
     (check_variable) check_variable:ret1 
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (scan_eitem) scan_eitem:

    (check_operator) check_operator: D$(2) 

     (check_literal) check_literal:lit=',' idx=6 'D$(2) '
     (check_literal) check_literal:After drop space:',' idx=6 'D$(2) '
     (check_literal)   ',' != 'D'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: 'D$(2) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=6 'D$(2) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=6 'D$(2) '
     (check_literal)   '%' != 'D'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=6 'D$(2) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=6 'D$(2) '
     (check_literal)   '"' != 'D'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'D$(2) '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'D$(2) ':
      (check_vname) check_vname ret1 '$(2) ':
     (check_variable) check_variable: '$(2) '
     (check_variable) check_variable: Ary test '(2) '

      (check_literal) check_literal:lit='(' idx=8 '(2) '
      (check_literal) check_literal:After drop space:'(' idx=8 '(2) '
      (check_literal) check_literal:After while():2) 
      (check_literal) check_literal:ret1 
     (check_variable) check_variable: is array

      (check_expression) check_expression: '2) '

       (check_eitem) check_eitem: '2) '

        (check_operator) check_operator: 2) 

         (check_literal) check_literal:lit=',' idx=9 '2) '
         (check_literal) check_literal:After drop space:',' idx=9 '2) '
         (check_literal)   ',' != '2'
         (check_literal) check_literal: ret0
        (check_operator) check_operator:ret0

        (check_function) check_function: '2) '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=9 '2) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=9 '2) '
         (check_literal)   '%' != '2'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=9 '2) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=9 '2) '
         (check_literal)   '"' != '2'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: '2) '
          (check_integer) check_integer:ret1
         (check_number) check_number: ret1
        (check_atom) check_atom:ret1
       (check_eitem) check_eitem:ret1

       (check_eitem) check_eitem: ') '

        (check_operator) check_operator: ) 

         (check_literal) check_literal:lit=',' idx=10 ') '
         (check_literal) check_literal:After drop space:',' idx=10 ') '
         (check_literal)   ',' != ')'
         (check_literal) check_literal: ret0
        (check_operator) check_operator:ret0

        (check_function) check_function: ') '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=10 ') '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=10 ') '
         (check_literal)   '%' != ')'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=10 ') '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=10 ') '
         (check_literal)   '"' != ')'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: ') '
          (check_integer) check_integer:ret0
         (check_number) check_number: ret0

         (check_variable) check_variable:

          (check_vname) check_vname ') ':
          (check_vname) check_vname ret0 ') ':
         (check_variable) check_variable:ret0 
        (check_atom) check_atom:ret1

        (check_sub_expr) check_sub_expr:

         (check_literal) check_literal:lit=' (' idx=10 ') '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'(' idx=10 ') '
         (check_literal)   '(' != ')'
         (check_literal) check_literal: ret0
        (check_sub_expr) check_sub_expr: ret0
       (check_eitem) check_eitem:ret0
      (check_expression) check_expression:ret1 ') '

      (check_literal) check_literal:lit=' ,' idx=10 ') '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=10 ') '
      (check_literal)   ',' != ')'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' )' idx=10 ') '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:')' idx=10 ') '
      (check_literal) check_literal:After while(): 
      (check_literal) check_literal:ret1 
     (check_variable) check_variable:ret1 
    (check_atom) check_atom:ret1

    (scan_atom) scan_atom:

     (check_literal) check_literal:lit=' %' idx=6 'D$(2) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=6 'D$(2) '
     (check_literal)   '%' != 'D'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=6 'D$(2) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=6 'D$(2) '
     (check_literal)   '"' != 'D'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'D$(2) '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'D$(2) ':
      (check_vname) check_vname ret1 '$(2) ':
     (check_variable) check_variable: '$(2) '
     (check_variable) check_variable: Ary test '(2) '

      (check_literal) check_literal:lit='(' idx=8 '(2) '
      (check_literal) check_literal:After drop space:'(' idx=8 '(2) '
      (check_literal) check_literal:After while():2) 
      (check_literal) check_literal:ret1 
     (check_variable) check_variable: is array

      (check_expression) check_expression: '2) '

       (check_eitem) check_eitem: '2) '

        (check_operator) check_operator: 2) 

         (check_literal) check_literal:lit=',' idx=9 '2) '
         (check_literal) check_literal:After drop space:',' idx=9 '2) '
         (check_literal)   ',' != '2'
         (check_literal) check_literal: ret0
        (check_operator) check_operator:ret0

        (check_function) check_function: '2) '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=9 '2) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=9 '2) '
         (check_literal)   '%' != '2'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=9 '2) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=9 '2) '
         (check_literal)   '"' != '2'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: '2) '
          (check_integer) check_integer:ret1
         (check_number) check_number: ret1
        (check_atom) check_atom:ret1
       (check_eitem) check_eitem:ret1

       (check_eitem) check_eitem: ') '

        (check_operator) check_operator: ) 

         (check_literal) check_literal:lit=',' idx=10 ') '
         (check_literal) check_literal:After drop space:',' idx=10 ') '
         (check_literal)   ',' != ')'
         (check_literal) check_literal: ret0
        (check_operator) check_operator:ret0

        (check_function) check_function: ') '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=10 ') '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=10 ') '
         (check_literal)   '%' != ')'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=10 ') '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=10 ') '
         (check_literal)   '"' != ')'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: ') '
          (check_integer) check_integer:ret0
         (check_number) check_number: ret0

         (check_variable) check_variable:

          (check_vname) check_vname ') ':
          (check_vname) check_vname ret0 ') ':
         (check_variable) check_variable:ret0 
        (check_atom) check_atom:ret1

        (check_sub_expr) check_sub_expr:

         (check_literal) check_literal:lit=' (' idx=10 ') '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'(' idx=10 ') '
         (check_literal)   '(' != ')'
         (check_literal) check_literal: ret0
        (check_sub_expr) check_sub_expr: ret0
       (check_eitem) check_eitem:ret0
      (check_expression) check_expression:ret1 ') '

      (check_literal) check_literal:lit=' ,' idx=10 ') '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=10 ') '
      (check_literal)   ',' != ')'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' )' idx=10 ') '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:')' idx=10 ') '
      (check_literal) check_literal:After while(): 
      (check_literal) check_literal:ret1 
     (check_variable) check_variable:ret1 

     (scan_variable) scan_variable:

      (scan_vname) scan_vname: 'D$(2) '
      (scan_vname) scan_vname: ret1 'D'
     (scan_variable) scan_variable: '$(2) ' vname='D'
     (scan_variable) scan_variable: Ary test '(2) '

      (check_literal) check_literal:lit='(' idx=8 '(2) '
      (check_literal) check_literal:After drop space:'(' idx=8 '(2) '
      (check_literal) check_literal:After while():2) 
      (check_literal) check_literal:ret1 

      (scan_literal) scan_literal:lit='(' '(2) '
      (scan_literal) scan_literal:After drop space:(2) 
      (scan_literal) scan_literal:while loop:(2) 
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (3)

      (op_stack_print) 
000: PRINT type:17
      (op_stack_print) 
001: ( type:16
      (op_stack_print) 
002: ( type:16
      (op_stack_print) 
------------------

      (scan_literal) scan_literal:ret1
     (scan_variable) scan_variable: is array

      (scan_expression) scan_expression: '2) '

       (check_eitem) check_eitem: '2) '

        (check_operator) check_operator: 2) 

         (check_literal) check_literal:lit=',' idx=9 '2) '
         (check_literal) check_literal:After drop space:',' idx=9 '2) '
         (check_literal)   ',' != '2'
         (check_literal) check_literal: ret0
        (check_operator) check_operator:ret0

        (check_function) check_function: '2) '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=9 '2) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=9 '2) '
         (check_literal)   '%' != '2'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=9 '2) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=9 '2) '
         (check_literal)   '"' != '2'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: '2) '
          (check_integer) check_integer:ret1
         (check_number) check_number: ret1
        (check_atom) check_atom:ret1
       (check_eitem) check_eitem:ret1

       (scan_eitem) scan_eitem:

        (check_operator) check_operator: 2) 

         (check_literal) check_literal:lit=',' idx=9 '2) '
         (check_literal) check_literal:After drop space:',' idx=9 '2) '
         (check_literal)   ',' != '2'
         (check_literal) check_literal: ret0
        (check_operator) check_operator:ret0

        (check_function) check_function: '2) '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=9 '2) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=9 '2) '
         (check_literal)   '%' != '2'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=9 '2) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=9 '2) '
         (check_literal)   '"' != '2'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: '2) '
          (check_integer) check_integer:ret1
         (check_number) check_number: ret1
        (check_atom) check_atom:ret1

        (scan_atom) scan_atom:

         (check_literal) check_literal:lit=' %' idx=9 '2) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=9 '2) '
         (check_literal)   '%' != '2'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=9 '2) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=9 '2) '
         (check_literal)   '"' != '2'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: '2) '
          (check_integer) check_integer:ret1
         (check_number) check_number: ret1

         (scan_number) scan_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: '2) '
          (check_integer) check_integer:ret1

          (scan_integer) scan_integer:
          (scan_integer) scan_integer:ret1
   Frst:0 T:'2' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U U )] i i 2
         (scan_integer) scan_integer:ret1  2
        (scan_atom) scan_atom:ret1

        (check_eitem) check_eitem: ') '

         (check_operator) check_operator: ) 

          (check_literal) check_literal:lit=',' idx=10 ') '
          (check_literal) check_literal:After drop space:',' idx=10 ') '
          (check_literal)   ',' != ')'
          (check_literal) check_literal: ret0
         (check_operator) check_operator:ret0

         (check_function) check_function: ') '
         (check_function) check_function: ret0

         (check_atom) check_atom:

          (check_literal) check_literal:lit=' %' idx=10 ') '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=10 ') '
          (check_literal)   '%' != ')'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=10 ') '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=10 ') '
          (check_literal)   '"' != ')'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: ') '
           (check_integer) check_integer:ret0
          (check_number) check_number: ret0

          (check_variable) check_variable:

           (check_vname) check_vname ') ':
           (check_vname) check_vname ret0 ') ':
          (check_variable) check_variable:ret0 
         (check_atom) check_atom:ret1

         (check_sub_expr) check_sub_expr:

          (check_literal) check_literal:lit=' (' idx=10 ') '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'(' idx=10 ') '
          (check_literal)   '(' != ')'
          (check_literal) check_literal: ret0
         (check_sub_expr) check_sub_expr: ret0
        (check_eitem) check_eitem:ret0
       (scan_expression) scan_expression: ret1 ') '

       (check_literal) check_literal:lit=' ,' idx=10 ') '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=10 ') '
       (check_literal)   ',' != ')'
       (check_literal) check_literal: ret0

       (scan_literal) scan_literal:lit=' )' ') '
       (scan_literal) scan_literal:After drop space:) 
       (scan_literal) scan_literal:while loop:) 
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (2)

       (op_stack_print) 
000: PRINT type:17
       (op_stack_print) 
001: ( type:16
       (op_stack_print) 
------------------

(  output_sub_end)
       (token_is_function) 
token_is_function:
       (token_is_function) 
token_is_function:( is not function
(  output_sub_end)
       (scan_literal) scan_literal:ret1
      (scan_variable) scan_variable:ret1 vname='D$' is str:1 int:0 flt:0 ary:1
   Frst:0 T:'D$' exptype:U
     (token_is_function) 
token_is_function:
     (token_is_function) 
token_is_function:D$ is not function
token_is_variable: tok:'D$'
     (token_is_function) 
token_is_function:
     (token_is_function) 
token_is_function:D$ is not function
     (init_get_name) 
init_get_name:'D$'
     (init_get_name) 
init_get_name:'D$'
     (get_name) 
get_name:gn:'D$'
process_token:type:U req_type:?
modify_expression_type:Inittype:U Intype:s Outtype:s
( output_variable) [s,(U )] s s D$
     (print_var_info) 
VAR INFO: '                D$' gbl:0 ref:1 int:0 flt:0 str:1 ary:1 max_str:0 max_ary:0 num_ind:1
     (scan_atom) scan_atom:ret1

     (check_eitem) check_eitem: ' '

      (check_operator) check_operator:  

       (check_literal) check_literal:lit=',' idx=12 ''
       (check_literal) check_literal:After drop space:',' idx=12 ''
       (check_literal) check_literal  ret0 Empty test string
      (check_operator) check_operator:ret0

      (check_function) check_function: ''
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=11 ' '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=12 ''
       (check_literal) check_literal  ret0 Empty test string

       (check_literal) check_literal:lit=' "' idx=11 ' '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=12 ''
       (check_literal) check_literal  ret0 Empty test string

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: ''
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname '':
        (check_vname) check_vname ret0 '':
       (check_variable) check_variable:ret0 
      (check_atom) check_atom:ret1

      (check_sub_expr) check_sub_expr:

       (check_literal) check_literal:lit=' (' idx=11 ' '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'(' idx=12 ''
       (check_literal) check_literal  ret0 Empty test string
      (check_sub_expr) check_sub_expr: ret0
     (check_eitem) check_eitem:ret0
    (scan_expression) scan_expression: ret1 ' '
   (scan_command) scan_command: ret1 =>'PRINT'
  (scan_command) 
ENDEXP
   Frst:0 T:')' exptype:s
Pop 4
Pop '('
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (1)

  (op_stack_print) 
000: PRINT type:17
  (op_stack_print) 
------------------

(  output_sub_end)
  (token_is_function) 
token_is_function:
  (token_is_function) PRINT is function
Pop 5
Pop 'PRINT'
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (0)

  (op_stack_print) 
------------------

( output_function) [s,(U )] v v PRINT
(  output_sub_end)
Finalise stack
  (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     s rq:s 'D$'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
 BE:

Type Check Stack (0)

 BE:

Type Check Stack (0)

 BE:2
type_check_stack_push: '2'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (1)

  (type_check_stack_print) 
000: '2' type:0
  (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '2' type:i (0)
 BE:

Type Check Stack (1)

000: '2' type:i (0)
 BE:

Type Check Stack (1)

000: '2' type:i (0)
 BE:D$
type_check_stack_push: 'D$'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (2)

  (type_check_stack_print) 
000: '2' type:0
  (type_check_stack_print) 
001: 'D$' type:2
  (type_check_stack_print) 
------------------


Type Check Stack (2)

000: '2' type:i (0)
001: 'D$' type:s (2)
 BE:

Type Check Stack (2)

000: '2' type:i (0)
001: 'D$' type:s (2)
 BE:PRINT
FN: 1 args
  (function_return_type) 
function_return_type: 'PRINT' =>v
  (function_return_type) 
function_return_type: 'PRINT' =>17
ret_type;17 v
typecheck_expression:Ret type of PRINT : v
type_check_stack_pop: 'D$'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (1)

  (type_check_stack_print) 
000: '2' type:0
  (type_check_stack_print) 
------------------

FN ARG 0 ri D$ 2(s)  Arg not OK
type_check_stack_push: '000'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (2)

  (type_check_stack_print) 
000: '2' type:0
  (type_check_stack_print) 
001: '000' type:17
  (type_check_stack_print) 
------------------


Type Check Stack (2)

000: '2' type:i (0)
001: '000' type:v (17)
 BE:

Type Check Stack (2)

000: '2' type:i (0)
001: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     s rq:s 'D$'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_VARIABLE     s rq:s 'D$'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
  (process_expression_types) 
==INFIX==

infix_stack_push: '2'
Var: D$ ary:1
infix_stack_pop: '2'
infix_stack_push: 'D$(2)'
infix_stack_pop: 'D$(2)'
infix_stack_push: 'PRINT(D$(2) )'
infix_stack_pop: 'PRINT(D$(2) )'
  (process_expression_types) ==PRINT(D$(2) )==
  (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N3 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
(    output_qcode) N4 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_VARIABLE     s rq:s D$  0:
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N8 EXP_BUFF_ID_FUNCTION     v rq:v PRINT  0:
(    output_qcode) N9 EXP_BUFF_ID_SUB_END      U rq:i   0:

   (check_literal) check_literal:lit=':' idx=12 ''
   (check_literal) check_literal:After drop space:':' idx=12 ''
   (check_literal) check_literal  ret0 Empty test string
  (translate_file) 
cline scanned OK
********************
**PRINT F$(10,12) **
********************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'PRINT F$(10,12) ':
     (check_vname) check_vname ret1 ' F$(10,12) ':
    (check_variable) check_variable: ' F$(10,12) '
    (check_variable) check_variable: Ary test ' F$(10,12) '

     (check_literal) check_literal:lit='(' idx=5 ' F$(10,12) '
     (check_literal) check_literal:After drop space:'(' idx=5 ' F$(10,12) '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=5 ' F$(10,12) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=6 'F$(10,12) '
   (check_literal)   '=' != 'F'
   (check_literal) check_literal: ret0
  (check_assignment) check_assignment:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) check_textlabel: 'PRINT F$(10,12) '
   (check_textlabel) check_textlabel:ret0
  (check_proc_call) check_proc_call:ret0

  (check_command) check_command:
  (check_command) check_command: ret1 found=> 'PRINT'
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=11, ' F$(10,12) '
========================================================
PRINT F$(10,12) 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'PRINT F$(10,12) ':
    (check_vname) check_vname ret1 ' F$(10,12) ':
   (check_variable) check_variable: ' F$(10,12) '
   (check_variable) check_variable: Ary test ' F$(10,12) '

    (check_literal) check_literal:lit='(' idx=5 ' F$(10,12) '
    (check_literal) check_literal:After drop space:'(' idx=5 ' F$(10,12) '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=5 ' F$(10,12) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=6 'F$(10,12) '
  (check_literal)   '=' != 'F'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'PRINT F$(10,12) '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'PRINT'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'PRINT' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) PRINT is function
 (function_return_type) 
function_return_type: 'PRINT' =>v
 (function_return_type) 
function_return_type: 'PRINT' =>17
process_token: 'PRINT' t=>v
 Push:'PRINT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' F$(10,12) '

   (check_eitem) check_eitem: 'F$(10,12) '

    (check_operator) check_operator: F$(10,12) 

     (check_literal) check_literal:lit=',' idx=6 'F$(10,12) '
     (check_literal) check_literal:After drop space:',' idx=6 'F$(10,12) '
     (check_literal)   ',' != 'F'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: 'F$(10,12) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=6 'F$(10,12) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=6 'F$(10,12) '
     (check_literal)   '%' != 'F'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=6 'F$(10,12) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=6 'F$(10,12) '
     (check_literal)   '"' != 'F'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'F$(10,12) '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'F$(10,12) ':
      (check_vname) check_vname ret1 '$(10,12) ':
     (check_variable) check_variable: '$(10,12) '
     (check_variable) check_variable: Ary test '(10,12) '

      (check_literal) check_literal:lit='(' idx=8 '(10,12) '
      (check_literal) check_literal:After drop space:'(' idx=8 '(10,12) '
      (check_literal) check_literal:After while():10,12) 
      (check_literal) check_literal:ret1 
     (check_variable) check_variable: is array

      (check_expression) check_expression: '10,12) '

       (check_eitem) check_eitem: '10,12) '

        (check_operator) check_operator: 10,12) 

         (check_literal) check_literal:lit=',' idx=9 '10,12) '
         (check_literal) check_literal:After drop space:',' idx=9 '10,12) '
         (check_literal)   ',' != '1'
         (check_literal) check_literal: ret0
        (check_operator) check_operator:ret0

        (check_function) check_function: '10,12) '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=9 '10,12) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=9 '10,12) '
         (check_literal)   '%' != '1'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=9 '10,12) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=9 '10,12) '
         (check_literal)   '"' != '1'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: '10,12) '
          (check_integer) check_integer:ret1
         (check_number) check_number: ret1
        (check_atom) check_atom:ret1
       (check_eitem) check_eitem:ret1

       (check_eitem) check_eitem: ',12) '

        (check_operator) check_operator: ,12) 

         (check_literal) check_literal:lit=',' idx=11 ',12) '
         (check_literal) check_literal:After drop space:',' idx=11 ',12) '
         (check_literal) check_literal:After while():12) 
         (check_literal) check_literal:ret1 

         (scan_literal) scan_literal:lit=',' 'F$(10,12) '
         (scan_literal) scan_literal:After drop space:F$(10,12) 
         (scan_literal) scan_literal:while loop:F$(10,12) 
         (scan_literal) scan_literal:ret1

         (check_function) check_function: ',12) '
         (check_function) check_function: ret0

         (check_atom) check_atom:

          (check_literal) check_literal:lit=' %' idx=11 ',12) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=11 ',12) '
          (check_literal)   '%' != ','
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=11 ',12) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=11 ',12) '
          (check_literal)   '"' != ','
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: ',12) '
           (check_integer) check_integer:ret0
          (check_number) check_number: ret0

          (check_variable) check_variable:

           (check_vname) check_vname ',12) ':
           (check_vname) check_vname ret0 ',12) ':
          (check_variable) check_variable:ret0 
         (check_atom) check_atom:ret1

         (check_sub_expr) check_sub_expr:

          (check_literal) check_literal:lit=' (' idx=11 ',12) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'(' idx=11 ',12) '
          (check_literal)   '(' != ','
          (check_literal) check_literal: ret0
         (check_sub_expr) check_sub_expr: ret0
        (check_eitem) check_eitem:ret0
       (check_expression) check_expression:ret1 ',12) '

       (check_literal) check_literal:lit=' ,' idx=11 ',12) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=11 ',12) '
       (check_literal) check_literal:After while():12) 
       (check_literal) check_literal:ret1 

       (check_expression) check_expression: '12) '

        (check_eitem) check_eitem: '12) '

         (check_operator) check_operator: 12) 

          (check_literal) check_literal:lit=',' idx=12 '12) '
          (check_literal) check_literal:After drop space:',' idx=12 '12) '
          (check_literal)   ',' != '1'
          (check_literal) check_literal: ret0
         (check_operator) check_operator:ret0

         (check_function) check_function: '12) '
         (check_function) check_function: ret0

         (check_atom) check_atom:

          (check_literal) check_literal:lit=' %' idx=12 '12) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=12 '12) '
          (check_literal)   '%' != '1'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=12 '12) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=12 '12) '
          (check_literal)   '"' != '1'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '12) '
           (check_integer) check_integer:ret1
          (check_number) check_number: ret1
         (check_atom) check_atom:ret1
        (check_eitem) check_eitem:ret1

        (check_eitem) check_eitem: ') '

         (check_operator) check_operator: ) 

          (check_literal) check_literal:lit=',' idx=14 ') '
          (check_literal) check_literal:After drop space:',' idx=14 ') '
          (check_literal)   ',' != ')'
          (check_literal) check_literal: ret0
         (check_operator) check_operator:ret0

         (check_function) check_function: ') '
         (check_function) check_function: ret0

         (check_atom) check_atom:

          (check_literal) check_literal:lit=' %' idx=14 ') '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=14 ') '
          (check_literal)   '%' != ')'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=14 ') '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=14 ') '
          (check_literal)   '"' != ')'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: ') '
           (check_integer) check_integer:ret0
          (check_number) check_number: ret0

          (check_variable) check_variable:

           (check_vname) check_vname ') ':
           (check_vname) check_vname ret0 ') ':
          (check_variable) check_variable:ret0 
         (check_atom) check_atom:ret1

         (check_sub_expr) check_sub_expr:

          (check_literal) check_literal:lit=' (' idx=14 ') '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'(' idx=14 ') '
          (check_literal)   '(' != ')'
          (check_literal) check_literal: ret0
         (check_sub_expr) check_sub_expr: ret0
        (check_eitem) check_eitem:ret0
       (check_expression) check_expression:ret1 ') '

       (check_literal) check_literal:lit=' )' idx=14 ') '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:')' idx=14 ') '
       (check_literal) check_literal:After while(): 
       (check_literal) check_literal:ret1 
      (check_variable) check_variable:ret1 
     (check_atom) check_atom:ret1
    (check_eitem) check_eitem:ret1

    (scan_eitem) scan_eitem:

     (check_operator) check_operator: F$(10,12) 

      (check_literal) check_literal:lit=',' idx=6 'F$(10,12) '
      (check_literal) check_literal:After drop space:',' idx=6 'F$(10,12) '
      (check_literal)   ',' != 'F'
      (check_literal) check_literal: ret0
     (check_operator) check_operator:ret0

     (check_function) check_function: 'F$(10,12) '
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=6 'F$(10,12) '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 'F$(10,12) '
      (check_literal)   '%' != 'F'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=6 'F$(10,12) '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 'F$(10,12) '
      (check_literal)   '"' != 'F'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: 'F$(10,12) '
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname 'F$(10,12) ':
       (check_vname) check_vname ret1 '$(10,12) ':
      (check_variable) check_variable: '$(10,12) '
      (check_variable) check_variable: Ary test '(10,12) '

       (check_literal) check_literal:lit='(' idx=8 '(10,12) '
       (check_literal) check_literal:After drop space:'(' idx=8 '(10,12) '
       (check_literal) check_literal:After while():10,12) 
       (check_literal) check_literal:ret1 
      (check_variable) check_variable: is array

       (check_expression) check_expression: '10,12) '

        (check_eitem) check_eitem: '10,12) '

         (check_operator) check_operator: 10,12) 

          (check_literal) check_literal:lit=',' idx=9 '10,12) '
          (check_literal) check_literal:After drop space:',' idx=9 '10,12) '
          (check_literal)   ',' != '1'
          (check_literal) check_literal: ret0
         (check_operator) check_operator:ret0

         (check_function) check_function: '10,12) '
         (check_function) check_function: ret0

         (check_atom) check_atom:

          (check_literal) check_literal:lit=' %' idx=9 '10,12) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=9 '10,12) '
          (check_literal)   '%' != '1'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=9 '10,12) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=9 '10,12) '
          (check_literal)   '"' != '1'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '10,12) '
           (check_integer) check_integer:ret1
          (check_number) check_number: ret1
         (check_atom) check_atom:ret1
        (check_eitem) check_eitem:ret1

        (check_eitem) check_eitem: ',12) '

         (check_operator) check_operator: ,12) 

          (check_literal) check_literal:lit=',' idx=11 ',12) '
          (check_literal) check_literal:After drop space:',' idx=11 ',12) '
          (check_literal) check_literal:After while():12) 
          (check_literal) check_literal:ret1 

          (scan_literal) scan_literal:lit=',' 'F$(10,12) '
          (scan_literal) scan_literal:After drop space:F$(10,12) 
          (scan_literal) scan_literal:while loop:F$(10,12) 
          (scan_literal) scan_literal:ret1

          (check_function) check_function: ',12) '
          (check_function) check_function: ret0

          (check_atom) check_atom:

           (check_literal) check_literal:lit=' %' idx=11 ',12) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'%' idx=11 ',12) '
           (check_literal)   '%' != ','
           (check_literal) check_literal: ret0

           (check_literal) check_literal:lit=' "' idx=11 ',12) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'"' idx=11 ',12) '
           (check_literal)   '"' != ','
           (check_literal) check_literal: ret0

           (check_number) check_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret0

            (check_integer) check_integer: ',12) '
            (check_integer) check_integer:ret0
           (check_number) check_number: ret0

           (check_variable) check_variable:

            (check_vname) check_vname ',12) ':
            (check_vname) check_vname ret0 ',12) ':
           (check_variable) check_variable:ret0 
          (check_atom) check_atom:ret1

          (check_sub_expr) check_sub_expr:

           (check_literal) check_literal:lit=' (' idx=11 ',12) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'(' idx=11 ',12) '
           (check_literal)   '(' != ','
           (check_literal) check_literal: ret0
          (check_sub_expr) check_sub_expr: ret0
         (check_eitem) check_eitem:ret0
        (check_expression) check_expression:ret1 ',12) '

        (check_literal) check_literal:lit=' ,' idx=11 ',12) '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:',' idx=11 ',12) '
        (check_literal) check_literal:After while():12) 
        (check_literal) check_literal:ret1 

        (check_expression) check_expression: '12) '

         (check_eitem) check_eitem: '12) '

          (check_operator) check_operator: 12) 

           (check_literal) check_literal:lit=',' idx=12 '12) '
           (check_literal) check_literal:After drop space:',' idx=12 '12) '
           (check_literal)   ',' != '1'
           (check_literal) check_literal: ret0
          (check_operator) check_operator:ret0

          (check_function) check_function: '12) '
          (check_function) check_function: ret0

          (check_atom) check_atom:

           (check_literal) check_literal:lit=' %' idx=12 '12) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'%' idx=12 '12) '
           (check_literal)   '%' != '1'
           (check_literal) check_literal: ret0

           (check_literal) check_literal:lit=' "' idx=12 '12) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'"' idx=12 '12) '
           (check_literal)   '"' != '1'
           (check_literal) check_literal: ret0

           (check_number) check_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret0

            (check_integer) check_integer: '12) '
            (check_integer) check_integer:ret1
           (check_number) check_number: ret1
          (check_atom) check_atom:ret1
         (check_eitem) check_eitem:ret1

         (check_eitem) check_eitem: ') '

          (check_operator) check_operator: ) 

           (check_literal) check_literal:lit=',' idx=14 ') '
           (check_literal) check_literal:After drop space:',' idx=14 ') '
           (check_literal)   ',' != ')'
           (check_literal) check_literal: ret0
          (check_operator) check_operator:ret0

          (check_function) check_function: ') '
          (check_function) check_function: ret0

          (check_atom) check_atom:

           (check_literal) check_literal:lit=' %' idx=14 ') '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'%' idx=14 ') '
           (check_literal)   '%' != ')'
           (check_literal) check_literal: ret0

           (check_literal) check_literal:lit=' "' idx=14 ') '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'"' idx=14 ') '
           (check_literal)   '"' != ')'
           (check_literal) check_literal: ret0

           (check_number) check_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret0

            (check_integer) check_integer: ') '
            (check_integer) check_integer:ret0
           (check_number) check_number: ret0

           (check_variable) check_variable:

            (check_vname) check_vname ') ':
            (check_vname) check_vname ret0 ') ':
           (check_variable) check_variable:ret0 
          (check_atom) check_atom:ret1

          (check_sub_expr) check_sub_expr:

           (check_literal) check_literal:lit=' (' idx=14 ') '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'(' idx=14 ') '
           (check_literal)   '(' != ')'
           (check_literal) check_literal: ret0
          (check_sub_expr) check_sub_expr: ret0
         (check_eitem) check_eitem:ret0
        (check_expression) check_expression:ret1 ') '

        (check_literal) check_literal:lit=' )' idx=14 ') '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:')' idx=14 ') '
        (check_literal) check_literal:After while(): 
        (check_literal) check_literal:ret1 
       (check_variable) check_variable:ret1 
      (check_atom) check_atom:ret1

      (scan_atom) scan_atom:

       (check_literal) check_literal:lit=' %' idx=6 'F$(10,12) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=6 'F$(10,12) '
       (check_literal)   '%' != 'F'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=6 'F$(10,12) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=6 'F$(10,12) '
       (check_literal)   '"' != 'F'
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: 'F$(10,12) '
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname 'F$(10,12) ':
        (check_vname) check_vname ret1 '$(10,12) ':
       (check_variable) check_variable: '$(10,12) '
       (check_variable) check_variable: Ary test '(10,12) '

        (check_literal) check_literal:lit='(' idx=8 '(10,12) '
        (check_literal) check_literal:After drop space:'(' idx=8 '(10,12) '
        (check_literal) check_literal:After while():10,12) 
        (check_literal) check_literal:ret1 
       (check_variable) check_variable: is array

        (check_expression) check_expression: '10,12) '

         (check_eitem) check_eitem: '10,12) '

          (check_operator) check_operator: 10,12) 

           (check_literal) check_literal:lit=',' idx=9 '10,12) '
           (check_literal) check_literal:After drop space:',' idx=9 '10,12) '
           (check_literal)   ',' != '1'
           (check_literal) check_literal: ret0
          (check_operator) check_operator:ret0

          (check_function) check_function: '10,12) '
          (check_function) check_function: ret0

          (check_atom) check_atom:

           (check_literal) check_literal:lit=' %' idx=9 '10,12) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'%' idx=9 '10,12) '
           (check_literal)   '%' != '1'
           (check_literal) check_literal: ret0

           (check_literal) check_literal:lit=' "' idx=9 '10,12) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'"' idx=9 '10,12) '
           (check_literal)   '"' != '1'
           (check_literal) check_literal: ret0

           (check_number) check_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret0

            (check_integer) check_integer: '10,12) '
            (check_integer) check_integer:ret1
           (check_number) check_number: ret1
          (check_atom) check_atom:ret1
         (check_eitem) check_eitem:ret1

         (check_eitem) check_eitem: ',12) '

          (check_operator) check_operator: ,12) 

           (check_literal) check_literal:lit=',' idx=11 ',12) '
           (check_literal) check_literal:After drop space:',' idx=11 ',12) '
           (check_literal) check_literal:After while():12) 
           (check_literal) check_literal:ret1 

           (scan_literal) scan_literal:lit=',' 'F$(10,12) '
           (scan_literal) scan_literal:After drop space:F$(10,12) 
           (scan_literal) scan_literal:while loop:F$(10,12) 
           (scan_literal) scan_literal:ret1

           (check_function) check_function: ',12) '
           (check_function) check_function: ret0

           (check_atom) check_atom:

            (check_literal) check_literal:lit=' %' idx=11 ',12) '
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:'%' idx=11 ',12) '
            (check_literal)   '%' != ','
            (check_literal) check_literal: ret0

            (check_literal) check_literal:lit=' "' idx=11 ',12) '
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:'"' idx=11 ',12) '
            (check_literal)   '"' != ','
            (check_literal) check_literal: ret0

            (check_number) check_number:

             (check_float) check_float:
             (isfloatdigit) isfloatdigit:
             (check_float) check_float: ret0

             (check_integer) check_integer: ',12) '
             (check_integer) check_integer:ret0
            (check_number) check_number: ret0

            (check_variable) check_variable:

             (check_vname) check_vname ',12) ':
             (check_vname) check_vname ret0 ',12) ':
            (check_variable) check_variable:ret0 
           (check_atom) check_atom:ret1

           (check_sub_expr) check_sub_expr:

            (check_literal) check_literal:lit=' (' idx=11 ',12) '
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:'(' idx=11 ',12) '
            (check_literal)   '(' != ','
            (check_literal) check_literal: ret0
           (check_sub_expr) check_sub_expr: ret0
          (check_eitem) check_eitem:ret0
         (check_expression) check_expression:ret1 ',12) '

         (check_literal) check_literal:lit=' ,' idx=11 ',12) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:',' idx=11 ',12) '
         (check_literal) check_literal:After while():12) 
         (check_literal) check_literal:ret1 

         (check_expression) check_expression: '12) '

          (check_eitem) check_eitem: '12) '

           (check_operator) check_operator: 12) 

            (check_literal) check_literal:lit=',' idx=12 '12) '
            (check_literal) check_literal:After drop space:',' idx=12 '12) '
            (check_literal)   ',' != '1'
            (check_literal) check_literal: ret0
           (check_operator) check_operator:ret0

           (check_function) check_function: '12) '
           (check_function) check_function: ret0

           (check_atom) check_atom:

            (check_literal) check_literal:lit=' %' idx=12 '12) '
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:'%' idx=12 '12) '
            (check_literal)   '%' != '1'
            (check_literal) check_literal: ret0

            (check_literal) check_literal:lit=' "' idx=12 '12) '
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:'"' idx=12 '12) '
            (check_literal)   '"' != '1'
            (check_literal) check_literal: ret0

            (check_number) check_number:

             (check_float) check_float:
             (isfloatdigit) isfloatdigit:
             (isfloatdigit) isfloatdigit:
             (isfloatdigit) isfloatdigit:
             (check_float) check_float: ret0

             (check_integer) check_integer: '12) '
             (check_integer) check_integer:ret1
            (check_number) check_number: ret1
           (check_atom) check_atom:ret1
          (check_eitem) check_eitem:ret1

          (check_eitem) check_eitem: ') '

           (check_operator) check_operator: ) 

            (check_literal) check_literal:lit=',' idx=14 ') '
            (check_literal) check_literal:After drop space:',' idx=14 ') '
            (check_literal)   ',' != ')'
            (check_literal) check_literal: ret0
           (check_operator) check_operator:ret0

           (check_function) check_function: ') '
           (check_function) check_function: ret0

           (check_atom) check_atom:

            (check_literal) check_literal:lit=' %' idx=14 ') '
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:'%' idx=14 ') '
            (check_literal)   '%' != ')'
            (check_literal) check_literal: ret0

            (check_literal) check_literal:lit=' "' idx=14 ') '
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:'"' idx=14 ') '
            (check_literal)   '"' != ')'
            (check_literal) check_literal: ret0

            (check_number) check_number:

             (check_float) check_float:
             (isfloatdigit) isfloatdigit:
             (check_float) check_float: ret0

             (check_integer) check_integer: ') '
             (check_integer) check_integer:ret0
            (check_number) check_number: ret0

            (check_variable) check_variable:

             (check_vname) check_vname ') ':
             (check_vname) check_vname ret0 ') ':
            (check_variable) check_variable:ret0 
           (check_atom) check_atom:ret1

           (check_sub_expr) check_sub_expr:

            (check_literal) check_literal:lit=' (' idx=14 ') '
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:'(' idx=14 ') '
            (check_literal)   '(' != ')'
            (check_literal) check_literal: ret0
           (check_sub_expr) check_sub_expr: ret0
          (check_eitem) check_eitem:ret0
         (check_expression) check_expression:ret1 ') '

         (check_literal) check_literal:lit=' )' idx=14 ') '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:')' idx=14 ') '
         (check_literal) check_literal:After while(): 
         (check_literal) check_literal:ret1 
        (check_variable) check_variable:ret1 

        (scan_variable) scan_variable:

         (scan_vname) scan_vname: 'F$(10,12) '
         (scan_vname) scan_vname: ret1 'F'
        (scan_variable) scan_variable: '$(10,12) ' vname='F'
        (scan_variable) scan_variable: Ary test '(10,12) '

         (check_literal) check_literal:lit='(' idx=8 '(10,12) '
         (check_literal) check_literal:After drop space:'(' idx=8 '(10,12) '
         (check_literal) check_literal:After while():10,12) 
         (check_literal) check_literal:ret1 

         (scan_literal) scan_literal:lit='(' '(10,12) '
         (scan_literal) scan_literal:After drop space:(10,12) 
         (scan_literal) scan_literal:while loop:(10,12) 
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
         (op_stack_print) 
------------------
         (op_stack_print) 
Operator Stack     (3)

         (op_stack_print) 
000: PRINT type:17
         (op_stack_print) 
001: ( type:16
         (op_stack_print) 
002: ( type:16
         (op_stack_print) 
------------------

         (scan_literal) scan_literal:ret1
        (scan_variable) scan_variable: is array

         (scan_expression) scan_expression: '10,12) '

          (check_eitem) check_eitem: '10,12) '

           (check_operator) check_operator: 10,12) 

            (check_literal) check_literal:lit=',' idx=9 '10,12) '
            (check_literal) check_literal:After drop space:',' idx=9 '10,12) '
            (check_literal)   ',' != '1'
            (check_literal) check_literal: ret0
           (check_operator) check_operator:ret0

           (check_function) check_function: '10,12) '
           (check_function) check_function: ret0

           (check_atom) check_atom:

            (check_literal) check_literal:lit=' %' idx=9 '10,12) '
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:'%' idx=9 '10,12) '
            (check_literal)   '%' != '1'
            (check_literal) check_literal: ret0

            (check_literal) check_literal:lit=' "' idx=9 '10,12) '
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:'"' idx=9 '10,12) '
            (check_literal)   '"' != '1'
            (check_literal) check_literal: ret0

            (check_number) check_number:

             (check_float) check_float:
             (isfloatdigit) isfloatdigit:
             (isfloatdigit) isfloatdigit:
             (isfloatdigit) isfloatdigit:
             (check_float) check_float: ret0

             (check_integer) check_integer: '10,12) '
             (check_integer) check_integer:ret1
            (check_number) check_number: ret1
           (check_atom) check_atom:ret1
          (check_eitem) check_eitem:ret1

          (scan_eitem) scan_eitem:

           (check_operator) check_operator: 10,12) 

            (check_literal) check_literal:lit=',' idx=9 '10,12) '
            (check_literal) check_literal:After drop space:',' idx=9 '10,12) '
            (check_literal)   ',' != '1'
            (check_literal) check_literal: ret0
           (check_operator) check_operator:ret0

           (check_function) check_function: '10,12) '
           (check_function) check_function: ret0

           (check_atom) check_atom:

            (check_literal) check_literal:lit=' %' idx=9 '10,12) '
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:'%' idx=9 '10,12) '
            (check_literal)   '%' != '1'
            (check_literal) check_literal: ret0

            (check_literal) check_literal:lit=' "' idx=9 '10,12) '
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:'"' idx=9 '10,12) '
            (check_literal)   '"' != '1'
            (check_literal) check_literal: ret0

            (check_number) check_number:

             (check_float) check_float:
             (isfloatdigit) isfloatdigit:
             (isfloatdigit) isfloatdigit:
             (isfloatdigit) isfloatdigit:
             (check_float) check_float: ret0

             (check_integer) check_integer: '10,12) '
             (check_integer) check_integer:ret1
            (check_number) check_number: ret1
           (check_atom) check_atom:ret1

           (scan_atom) scan_atom:

            (check_literal) check_literal:lit=' %' idx=9 '10,12) '
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:'%' idx=9 '10,12) '
            (check_literal)   '%' != '1'
            (check_literal) check_literal: ret0

            (check_literal) check_literal:lit=' "' idx=9 '10,12) '
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:'"' idx=9 '10,12) '
            (check_literal)   '"' != '1'
            (check_literal) check_literal: ret0

            (check_number) check_number:

             (check_float) check_float:
             (isfloatdigit) isfloatdigit:
             (isfloatdigit) isfloatdigit:
             (isfloatdigit) isfloatdigit:
             (check_float) check_float: ret0

             (check_integer) check_integer: '10,12) '
             (check_integer) check_integer:ret1
            (check_number) check_number: ret1

            (scan_number) scan_number:

             (check_float) check_float:
             (isfloatdigit) isfloatdigit:
             (isfloatdigit) isfloatdigit:
             (isfloatdigit) isfloatdigit:
             (check_float) check_float: ret0

             (check_integer) check_integer: '10,12) '
             (check_integer) check_integer:ret1

             (scan_integer) scan_integer:
             (scan_integer) scan_integer:ret1
   Frst:0 T:'10' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U U )] i i 10
            (scan_integer) scan_integer:ret1  10
           (scan_atom) scan_atom:ret1

           (check_eitem) check_eitem: ',12) '

            (check_operator) check_operator: ,12) 

             (check_literal) check_literal:lit=',' idx=11 ',12) '
             (check_literal) check_literal:After drop space:',' idx=11 ',12) '
             (check_literal) check_literal:After while():12) 
             (check_literal) check_literal:ret1 

             (scan_literal) scan_literal:lit=',' ',12) '
             (scan_literal) scan_literal:After drop space:,12) 
             (scan_literal) scan_literal:while loop:,12) 
   Frst:0 T:',' exptype:i
(output_sub_start)
             (scan_literal) scan_literal:ret1
            (check_eitem) check_eitem:ret1

            (scan_eitem) scan_eitem:

             (check_operator) check_operator: 12) 

              (check_literal) check_literal:lit=',' idx=12 '12) '
              (check_literal) check_literal:After drop space:',' idx=12 '12) '
              (check_literal)   ',' != '1'
              (check_literal) check_literal: ret0
             (check_operator) check_operator:ret0

             (check_function) check_function: '12) '
             (check_function) check_function: ret0

             (check_atom) check_atom:

              (check_literal) check_literal:lit=' %' idx=12 '12) '
              (check_literal) dropping space
              (check_literal) check_literal:After drop space:'%' idx=12 '12) '
              (check_literal)   '%' != '1'
              (check_literal) check_literal: ret0

              (check_literal) check_literal:lit=' "' idx=12 '12) '
              (check_literal) dropping space
              (check_literal) check_literal:After drop space:'"' idx=12 '12) '
              (check_literal)   '"' != '1'
              (check_literal) check_literal: ret0

              (check_number) check_number:

               (check_float) check_float:
               (isfloatdigit) isfloatdigit:
               (isfloatdigit) isfloatdigit:
               (isfloatdigit) isfloatdigit:
               (check_float) check_float: ret0

               (check_integer) check_integer: '12) '
               (check_integer) check_integer:ret1
              (check_number) check_number: ret1
             (check_atom) check_atom:ret1

             (scan_atom) scan_atom:

              (check_literal) check_literal:lit=' %' idx=12 '12) '
              (check_literal) dropping space
              (check_literal) check_literal:After drop space:'%' idx=12 '12) '
              (check_literal)   '%' != '1'
              (check_literal) check_literal: ret0

              (check_literal) check_literal:lit=' "' idx=12 '12) '
              (check_literal) dropping space
              (check_literal) check_literal:After drop space:'"' idx=12 '12) '
              (check_literal)   '"' != '1'
              (check_literal) check_literal: ret0

              (check_number) check_number:

               (check_float) check_float:
               (isfloatdigit) isfloatdigit:
               (isfloatdigit) isfloatdigit:
               (isfloatdigit) isfloatdigit:
               (check_float) check_float: ret0

               (check_integer) check_integer: '12) '
               (check_integer) check_integer:ret1
              (check_number) check_number: ret1

              (scan_number) scan_number:

               (check_float) check_float:
               (isfloatdigit) isfloatdigit:
               (isfloatdigit) isfloatdigit:
               (isfloatdigit) isfloatdigit:
               (check_float) check_float: ret0

               (check_integer) check_integer: '12) '
               (check_integer) check_integer:ret1

               (scan_integer) scan_integer:
               (scan_integer) scan_integer:ret1
   Frst:0 T:'12' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U U )] i i 12
              (scan_integer) scan_integer:ret1  12
             (scan_atom) scan_atom:ret1

             (check_eitem) check_eitem: ') '

              (check_operator) check_operator: ) 

               (check_literal) check_literal:lit=',' idx=14 ') '
               (check_literal) check_literal:After drop space:',' idx=14 ') '
               (check_literal)   ',' != ')'
               (check_literal) check_literal: ret0
              (check_operator) check_operator:ret0

              (check_function) check_function: ') '
              (check_function) check_function: ret0

              (check_atom) check_atom:

               (check_literal) check_literal:lit=' %' idx=14 ') '
               (check_literal) dropping space
               (check_literal) check_literal:After drop space:'%' idx=14 ') '
               (check_literal)   '%' != ')'
               (check_literal) check_literal: ret0

               (check_literal) check_literal:lit=' "' idx=14 ') '
               (check_literal) dropping space
               (check_literal) check_literal:After drop space:'"' idx=14 ') '
               (check_literal)   '"' != ')'
               (check_literal) check_literal: ret0

               (check_number) check_number:

                (check_float) check_float:
                (isfloatdigit) isfloatdigit:
                (check_float) check_float: ret0

                (check_integer) check_integer: ') '
                (check_integer) check_integer:ret0
               (check_number) check_number: ret0

               (check_variable) check_variable:

                (check_vname) check_vname ') ':
                (check_vname) check_vname ret0 ') ':
               (check_variable) check_variable:ret0 
              (check_atom) check_atom:ret1

              (check_sub_expr) check_sub_expr:

               (check_literal) check_literal:lit=' (' idx=14 ') '
               (check_literal) dropping space
               (check_literal) check_literal:After drop space:'(' idx=14 ') '
               (check_literal)   '(' != ')'
               (check_literal) check_literal: ret0
              (check_sub_expr) check_sub_expr: ret0
             (check_eitem) check_eitem:ret0
            (scan_expression) scan_expression: ret1 ') '

            (check_literal) check_literal:lit=' ,' idx=14 ') '
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:',' idx=14 ') '
            (check_literal)   ',' != ')'
            (check_literal) check_literal: ret0

            (scan_literal) scan_literal:lit=' )' ') '
            (scan_literal) scan_literal:After drop space:) 
            (scan_literal) scan_literal:while loop:) 
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
            (op_stack_print) 
------------------
            (op_stack_print) 
Operator Stack     (2)

            (op_stack_print) 
000: PRINT type:17
            (op_stack_print) 
001: ( type:16
            (op_stack_print) 
------------------

(  output_sub_end)
            (token_is_function) 
token_is_function:
            (token_is_function) 
token_is_function:( is not function
(  output_sub_end)
            (scan_literal) scan_literal:ret1
           (scan_variable) scan_variable:ret1 vname='F$' is str:1 int:0 flt:0 ary:1
   Frst:0 T:'F$' exptype:U
          (token_is_function) 
token_is_function:
          (token_is_function) 
token_is_function:F$ is not function
token_is_variable: tok:'F$'
          (token_is_function) 
token_is_function:
          (token_is_function) 
token_is_function:F$ is not function
          (init_get_name) 
init_get_name:'F$'
          (init_get_name) 
init_get_name:'F$'
          (get_name) 
get_name:gn:'F$'
process_token:type:U req_type:?
modify_expression_type:Inittype:U Intype:s Outtype:s
( output_variable) [s,(U )] s s F$
          (print_var_info) 
VAR INFO: '                F$' gbl:0 ref:1 int:0 flt:0 str:1 ary:1 max_str:0 max_ary:0 num_ind:1
          (scan_atom) scan_atom:ret1

          (check_eitem) check_eitem: ' '

           (check_operator) check_operator:  

            (check_literal) check_literal:lit=',' idx=16 ''
            (check_literal) check_literal:After drop space:',' idx=16 ''
            (check_literal) check_literal  ret0 Empty test string
           (check_operator) check_operator:ret0

           (check_function) check_function: ''
           (check_function) check_function: ret0

           (check_atom) check_atom:

            (check_literal) check_literal:lit=' %' idx=15 ' '
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:'%' idx=16 ''
            (check_literal) check_literal  ret0 Empty test string

            (check_literal) check_literal:lit=' "' idx=15 ' '
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:'"' idx=16 ''
            (check_literal) check_literal  ret0 Empty test string

            (check_number) check_number:

             (check_float) check_float:
             (isfloatdigit) isfloatdigit:
             (check_float) check_float: ret0

             (check_integer) check_integer: ''
             (check_integer) check_integer:ret0
            (check_number) check_number: ret0

            (check_variable) check_variable:

             (check_vname) check_vname '':
             (check_vname) check_vname ret0 '':
            (check_variable) check_variable:ret0 
           (check_atom) check_atom:ret1

           (check_sub_expr) check_sub_expr:

            (check_literal) check_literal:lit=' (' idx=15 ' '
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:'(' idx=16 ''
            (check_literal) check_literal  ret0 Empty test string
           (check_sub_expr) check_sub_expr: ret0
          (check_eitem) check_eitem:ret0
         (scan_expression) scan_expression: ret1 ' '
        (scan_command) scan_command: ret1 =>'PRINT'
       (scan_command) 
ENDEXP
   Frst:0 T:')' exptype:s
Pop 4
Pop '('
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (1)

       (op_stack_print) 
000: PRINT type:17
       (op_stack_print) 
------------------

(  output_sub_end)
       (token_is_function) 
token_is_function:
       (token_is_function) PRINT is function
Pop 5
Pop 'PRINT'
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (0)

       (op_stack_print) 
------------------

( output_function) [s,(U )] v v PRINT
(  output_sub_end)
Finalise stack
       (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '10'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '12'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     s rq:s 'F$'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
 BE:

Type Check Stack (0)

 BE:

Type Check Stack (0)

 BE:10
type_check_stack_push: '10'
       (type_check_stack_print) 
------------------
       (type_check_stack_print) 
Type Check Stack     (1)

       (type_check_stack_print) 
000: '10' type:0
       (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '10' type:i (0)
 BE:

Type Check Stack (1)

000: '10' type:i (0)
 BE:12
type_check_stack_push: '12'
       (type_check_stack_print) 
------------------
       (type_check_stack_print) 
Type Check Stack     (2)

       (type_check_stack_print) 
000: '10' type:0
       (type_check_stack_print) 
001: '12' type:0
       (type_check_stack_print) 
------------------


Type Check Stack (2)

000: '10' type:i (0)
001: '12' type:i (0)
 BE:

Type Check Stack (2)

000: '10' type:i (0)
001: '12' type:i (0)
 BE:

Type Check Stack (2)

000: '10' type:i (0)
001: '12' type:i (0)
 BE:F$
type_check_stack_push: 'F$'
       (type_check_stack_print) 
------------------
       (type_check_stack_print) 
Type Check Stack     (3)

       (type_check_stack_print) 
000: '10' type:0
       (type_check_stack_print) 
001: '12' type:0
       (type_check_stack_print) 
002: 'F$' type:2
       (type_check_stack_print) 
------------------


Type Check Stack (3)

000: '10' type:i (0)
001: '12' type:i (0)
002: 'F$' type:s (2)
 BE:

Type Check Stack (3)

000: '10' type:i (0)
001: '12' type:i (0)
002: 'F$' type:s (2)
 BE:PRINT
FN: 1 args
       (function_return_type) 
function_return_type: 'PRINT' =>v
       (function_return_type) 
function_return_type: 'PRINT' =>17
ret_type;17 v
typecheck_expression:Ret type of PRINT : v
type_check_stack_pop: 'F$'
       (type_check_stack_print) 
------------------
       (type_check_stack_print) 
Type Check Stack     (2)

       (type_check_stack_print) 
000: '10' type:0
       (type_check_stack_print) 
001: '12' type:0
       (type_check_stack_print) 
------------------

FN ARG 0 ri F$ 2(s)  Arg not OK
type_check_stack_push: '000'
       (type_check_stack_print) 
------------------
       (type_check_stack_print) 
Type Check Stack     (3)

       (type_check_stack_print) 
000: '10' type:0
       (type_check_stack_print) 
001: '12' type:0
       (type_check_stack_print) 
002: '000' type:17
       (type_check_stack_print) 
------------------


Type Check Stack (3)

000: '10' type:i (0)
001: '12' type:i (0)
002: '000' type:v (17)
 BE:

Type Check Stack (3)

000: '10' type:i (0)
001: '12' type:i (0)
002: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '10'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '12'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     s rq:s 'F$'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_INTEGER      i rq:i '10'  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:i '12'  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_VARIABLE     s rq:s 'F$'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
       (process_expression_types) 
==INFIX==

infix_stack_push: '10'
infix_stack_push: '12'
Var: F$ ary:1
infix_stack_pop: '12'
infix_stack_push: 'F$(12)'
infix_stack_pop: 'F$(12)'
infix_stack_push: 'PRINT(F$(12) )'
infix_stack_pop: 'PRINT(F$(12) )'
       (process_expression_types) ==PRINT(F$(12) )==
       (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N3 EXP_BUFF_ID_INTEGER      i rq:i 10  0:
(    output_qcode) N4 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N5 EXP_BUFF_ID_INTEGER      i rq:i 12  0:
(    output_qcode) N6 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N8 EXP_BUFF_ID_VARIABLE     s rq:s F$  0:
(    output_qcode) N9 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N10 EXP_BUFF_ID_FUNCTION     v rq:v PRINT  0:
(    output_qcode) N11 EXP_BUFF_ID_SUB_END      U rq:i   0:

        (check_literal) check_literal:lit=':' idx=16 ''
        (check_literal) check_literal:After drop space:':' idx=16 ''
        (check_literal) check_literal  ret0 Empty test string
       (translate_file) 
cline scanned OK
**************************
**UDG 1,2,3,4,5,6,7,8,9 **
**************************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'UDG 1,2,3,4,5,6,7,8,9 ':
     (check_vname) check_vname ret1 ' 1,2,3,4,5,6,7,8,9 ':
    (check_variable) check_variable: ' 1,2,3,4,5,6,7,8,9 '
    (check_variable) check_variable: Ary test ' 1,2,3,4,5,6,7,8,9 '

     (check_literal) check_literal:lit='(' idx=3 ' 1,2,3,4,5,6,7,8,9 '
     (check_literal) check_literal:After drop space:'(' idx=3 ' 1,2,3,4,5,6,7,8,9 '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=3 ' 1,2,3,4,5,6,7,8,9 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=4 '1,2,3,4,5,6,7,8,9 '
   (check_literal)   '=' != '1'
   (check_literal) check_literal: ret0
  (check_assignment) check_assignment:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) check_textlabel: 'UDG 1,2,3,4,5,6,7,8,9 '
   (check_textlabel) check_textlabel:ret0
  (check_proc_call) check_proc_call:ret0

  (check_command) check_command:
  (check_command) check_command: ret1 found=> 'UDG'
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=19, ' 1,2,3,4,5,6,7,8,9 '
========================================================
UDG 1,2,3,4,5,6,7,8,9 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'UDG 1,2,3,4,5,6,7,8,9 ':
    (check_vname) check_vname ret1 ' 1,2,3,4,5,6,7,8,9 ':
   (check_variable) check_variable: ' 1,2,3,4,5,6,7,8,9 '
   (check_variable) check_variable: Ary test ' 1,2,3,4,5,6,7,8,9 '

    (check_literal) check_literal:lit='(' idx=3 ' 1,2,3,4,5,6,7,8,9 '
    (check_literal) check_literal:After drop space:'(' idx=3 ' 1,2,3,4,5,6,7,8,9 '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=3 ' 1,2,3,4,5,6,7,8,9 '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=4 '1,2,3,4,5,6,7,8,9 '
  (check_literal)   '=' != '1'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'UDG 1,2,3,4,5,6,7,8,9 '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'UDG'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'UDG' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) UDG is function
 (function_return_type) 
function_return_type: 'UDG' =>v
 (function_return_type) 
function_return_type: 'UDG' =>17
process_token: 'UDG' t=>v
 Push:'UDG'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: UDG type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: UDG type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' 1,2,3,4,5,6,7,8,9 '

   (check_eitem) check_eitem: '1,2,3,4,5,6,7,8,9 '

    (check_operator) check_operator: 1,2,3,4,5,6,7,8,9 

     (check_literal) check_literal:lit=',' idx=4 '1,2,3,4,5,6,7,8,9 '
     (check_literal) check_literal:After drop space:',' idx=4 '1,2,3,4,5,6,7,8,9 '
     (check_literal)   ',' != '1'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: '1,2,3,4,5,6,7,8,9 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=4 '1,2,3,4,5,6,7,8,9 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=4 '1,2,3,4,5,6,7,8,9 '
     (check_literal)   '%' != '1'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=4 '1,2,3,4,5,6,7,8,9 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=4 '1,2,3,4,5,6,7,8,9 '
     (check_literal)   '"' != '1'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '1,2,3,4,5,6,7,8,9 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (scan_eitem) scan_eitem:

    (check_operator) check_operator: 1,2,3,4,5,6,7,8,9 

     (check_literal) check_literal:lit=',' idx=4 '1,2,3,4,5,6,7,8,9 '
     (check_literal) check_literal:After drop space:',' idx=4 '1,2,3,4,5,6,7,8,9 '
     (check_literal)   ',' != '1'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: '1,2,3,4,5,6,7,8,9 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=4 '1,2,3,4,5,6,7,8,9 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=4 '1,2,3,4,5,6,7,8,9 '
     (check_literal)   '%' != '1'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=4 '1,2,3,4,5,6,7,8,9 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=4 '1,2,3,4,5,6,7,8,9 '
     (check_literal)   '"' != '1'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '1,2,3,4,5,6,7,8,9 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1

    (scan_atom) scan_atom:

     (check_literal) check_literal:lit=' %' idx=4 '1,2,3,4,5,6,7,8,9 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=4 '1,2,3,4,5,6,7,8,9 '
     (check_literal)   '%' != '1'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=4 '1,2,3,4,5,6,7,8,9 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=4 '1,2,3,4,5,6,7,8,9 '
     (check_literal)   '"' != '1'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '1,2,3,4,5,6,7,8,9 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1

     (scan_number) scan_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '1,2,3,4,5,6,7,8,9 '
      (check_integer) check_integer:ret1

      (scan_integer) scan_integer:
      (scan_integer) scan_integer:ret1
   Frst:0 T:'1' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U )] i i 1
     (scan_integer) scan_integer:ret1  1
    (scan_atom) scan_atom:ret1

    (check_eitem) check_eitem: ',2,3,4,5,6,7,8,9 '

     (check_operator) check_operator: ,2,3,4,5,6,7,8,9 

      (check_literal) check_literal:lit=',' idx=5 ',2,3,4,5,6,7,8,9 '
      (check_literal) check_literal:After drop space:',' idx=5 ',2,3,4,5,6,7,8,9 '
      (check_literal) check_literal:After while():2,3,4,5,6,7,8,9 
      (check_literal) check_literal:ret1 

      (scan_literal) scan_literal:lit=',' ',2,3,4,5,6,7,8,9 '
      (scan_literal) scan_literal:After drop space:,2,3,4,5,6,7,8,9 
      (scan_literal) scan_literal:while loop:,2,3,4,5,6,7,8,9 
   Frst:0 T:',' exptype:i
(output_sub_start)
      (scan_literal) scan_literal:ret1
     (check_eitem) check_eitem:ret1

     (scan_eitem) scan_eitem:

      (check_operator) check_operator: 2,3,4,5,6,7,8,9 

       (check_literal) check_literal:lit=',' idx=6 '2,3,4,5,6,7,8,9 '
       (check_literal) check_literal:After drop space:',' idx=6 '2,3,4,5,6,7,8,9 '
       (check_literal)   ',' != '2'
       (check_literal) check_literal: ret0
      (check_operator) check_operator:ret0

      (check_function) check_function: '2,3,4,5,6,7,8,9 '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=6 '2,3,4,5,6,7,8,9 '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=6 '2,3,4,5,6,7,8,9 '
       (check_literal)   '%' != '2'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=6 '2,3,4,5,6,7,8,9 '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=6 '2,3,4,5,6,7,8,9 '
       (check_literal)   '"' != '2'
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '2,3,4,5,6,7,8,9 '
        (check_integer) check_integer:ret1
       (check_number) check_number: ret1
      (check_atom) check_atom:ret1

      (scan_atom) scan_atom:

       (check_literal) check_literal:lit=' %' idx=6 '2,3,4,5,6,7,8,9 '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=6 '2,3,4,5,6,7,8,9 '
       (check_literal)   '%' != '2'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=6 '2,3,4,5,6,7,8,9 '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=6 '2,3,4,5,6,7,8,9 '
       (check_literal)   '"' != '2'
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '2,3,4,5,6,7,8,9 '
        (check_integer) check_integer:ret1
       (check_number) check_number: ret1

       (scan_number) scan_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '2,3,4,5,6,7,8,9 '
        (check_integer) check_integer:ret1

        (scan_integer) scan_integer:
        (scan_integer) scan_integer:ret1
   Frst:0 T:'2' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U )] i i 2
       (scan_integer) scan_integer:ret1  2
      (scan_atom) scan_atom:ret1

      (check_eitem) check_eitem: ',3,4,5,6,7,8,9 '

       (check_operator) check_operator: ,3,4,5,6,7,8,9 

        (check_literal) check_literal:lit=',' idx=7 ',3,4,5,6,7,8,9 '
        (check_literal) check_literal:After drop space:',' idx=7 ',3,4,5,6,7,8,9 '
        (check_literal) check_literal:After while():3,4,5,6,7,8,9 
        (check_literal) check_literal:ret1 

        (scan_literal) scan_literal:lit=',' ',3,4,5,6,7,8,9 '
        (scan_literal) scan_literal:After drop space:,3,4,5,6,7,8,9 
        (scan_literal) scan_literal:while loop:,3,4,5,6,7,8,9 
   Frst:0 T:',' exptype:i
(output_sub_start)
        (scan_literal) scan_literal:ret1
       (check_eitem) check_eitem:ret1

       (scan_eitem) scan_eitem:

        (check_operator) check_operator: 3,4,5,6,7,8,9 

         (check_literal) check_literal:lit=',' idx=8 '3,4,5,6,7,8,9 '
         (check_literal) check_literal:After drop space:',' idx=8 '3,4,5,6,7,8,9 '
         (check_literal)   ',' != '3'
         (check_literal) check_literal: ret0
        (check_operator) check_operator:ret0

        (check_function) check_function: '3,4,5,6,7,8,9 '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=8 '3,4,5,6,7,8,9 '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=8 '3,4,5,6,7,8,9 '
         (check_literal)   '%' != '3'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=8 '3,4,5,6,7,8,9 '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=8 '3,4,5,6,7,8,9 '
         (check_literal)   '"' != '3'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: '3,4,5,6,7,8,9 '
          (check_integer) check_integer:ret1
         (check_number) check_number: ret1
        (check_atom) check_atom:ret1

        (scan_atom) scan_atom:

         (check_literal) check_literal:lit=' %' idx=8 '3,4,5,6,7,8,9 '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=8 '3,4,5,6,7,8,9 '
         (check_literal)   '%' != '3'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=8 '3,4,5,6,7,8,9 '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=8 '3,4,5,6,7,8,9 '
         (check_literal)   '"' != '3'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: '3,4,5,6,7,8,9 '
          (check_integer) check_integer:ret1
         (check_number) check_number: ret1

         (scan_number) scan_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: '3,4,5,6,7,8,9 '
          (check_integer) check_integer:ret1

          (scan_integer) scan_integer:
          (scan_integer) scan_integer:ret1
   Frst:0 T:'3' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U )] i i 3
         (scan_integer) scan_integer:ret1  3
        (scan_atom) scan_atom:ret1

        (check_eitem) check_eitem: ',4,5,6,7,8,9 '

         (check_operator) check_operator: ,4,5,6,7,8,9 

          (check_literal) check_literal:lit=',' idx=9 ',4,5,6,7,8,9 '
          (check_literal) check_literal:After drop space:',' idx=9 ',4,5,6,7,8,9 '
          (check_literal) check_literal:After while():4,5,6,7,8,9 
          (check_literal) check_literal:ret1 

          (scan_literal) scan_literal:lit=',' ',4,5,6,7,8,9 '
          (scan_literal) scan_literal:After drop space:,4,5,6,7,8,9 
          (scan_literal) scan_literal:while loop:,4,5,6,7,8,9 
   Frst:0 T:',' exptype:i
(output_sub_start)
          (scan_literal) scan_literal:ret1
         (check_eitem) check_eitem:ret1

         (scan_eitem) scan_eitem:

          (check_operator) check_operator: 4,5,6,7,8,9 

           (check_literal) check_literal:lit=',' idx=10 '4,5,6,7,8,9 '
           (check_literal) check_literal:After drop space:',' idx=10 '4,5,6,7,8,9 '
           (check_literal)   ',' != '4'
           (check_literal) check_literal: ret0
          (check_operator) check_operator:ret0

          (check_function) check_function: '4,5,6,7,8,9 '
          (check_function) check_function: ret0

          (check_atom) check_atom:

           (check_literal) check_literal:lit=' %' idx=10 '4,5,6,7,8,9 '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'%' idx=10 '4,5,6,7,8,9 '
           (check_literal)   '%' != '4'
           (check_literal) check_literal: ret0

           (check_literal) check_literal:lit=' "' idx=10 '4,5,6,7,8,9 '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'"' idx=10 '4,5,6,7,8,9 '
           (check_literal)   '"' != '4'
           (check_literal) check_literal: ret0

           (check_number) check_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret0

            (check_integer) check_integer: '4,5,6,7,8,9 '
            (check_integer) check_integer:ret1
           (check_number) check_number: ret1
          (check_atom) check_atom:ret1

          (scan_atom) scan_atom:

           (check_literal) check_literal:lit=' %' idx=10 '4,5,6,7,8,9 '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'%' idx=10 '4,5,6,7,8,9 '
           (check_literal)   '%' != '4'
           (check_literal) check_literal: ret0

           (check_literal) check_literal:lit=' "' idx=10 '4,5,6,7,8,9 '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'"' idx=10 '4,5,6,7,8,9 '
           (check_literal)   '"' != '4'
           (check_literal) check_literal: ret0

           (check_number) check_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret0

            (check_integer) check_integer: '4,5,6,7,8,9 '
            (check_integer) check_integer:ret1
           (check_number) check_number: ret1

           (scan_number) scan_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret0

            (check_integer) check_integer: '4,5,6,7,8,9 '
            (check_integer) check_integer:ret1

            (scan_integer) scan_integer:
            (scan_integer) scan_integer:ret1
   Frst:0 T:'4' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U )] i i 4
           (scan_integer) scan_integer:ret1  4
          (scan_atom) scan_atom:ret1

          (check_eitem) check_eitem: ',5,6,7,8,9 '

           (check_operator) check_operator: ,5,6,7,8,9 

            (check_literal) check_literal:lit=',' idx=11 ',5,6,7,8,9 '
            (check_literal) check_literal:After drop space:',' idx=11 ',5,6,7,8,9 '
            (check_literal) check_literal:After while():5,6,7,8,9 
            (check_literal) check_literal:ret1 

            (scan_literal) scan_literal:lit=',' ',5,6,7,8,9 '
            (scan_literal) scan_literal:After drop space:,5,6,7,8,9 
            (scan_literal) scan_literal:while loop:,5,6,7,8,9 
   Frst:0 T:',' exptype:i
(output_sub_start)
            (scan_literal) scan_literal:ret1
           (check_eitem) check_eitem:ret1

           (scan_eitem) scan_eitem:

            (check_operator) check_operator: 5,6,7,8,9 

             (check_literal) check_literal:lit=',' idx=12 '5,6,7,8,9 '
             (check_literal) check_literal:After drop space:',' idx=12 '5,6,7,8,9 '
             (check_literal)   ',' != '5'
             (check_literal) check_literal: ret0
            (check_operator) check_operator:ret0

            (check_function) check_function: '5,6,7,8,9 '
            (check_function) check_function: ret0

            (check_atom) check_atom:

             (check_literal) check_literal:lit=' %' idx=12 '5,6,7,8,9 '
             (check_literal) dropping space
             (check_literal) check_literal:After drop space:'%' idx=12 '5,6,7,8,9 '
             (check_literal)   '%' != '5'
             (check_literal) check_literal: ret0

             (check_literal) check_literal:lit=' "' idx=12 '5,6,7,8,9 '
             (check_literal) dropping space
             (check_literal) check_literal:After drop space:'"' idx=12 '5,6,7,8,9 '
             (check_literal)   '"' != '5'
             (check_literal) check_literal: ret0

             (check_number) check_number:

              (check_float) check_float:
              (isfloatdigit) isfloatdigit:
              (isfloatdigit) isfloatdigit:
              (check_float) check_float: ret0

              (check_integer) check_integer: '5,6,7,8,9 '
              (check_integer) check_integer:ret1
             (check_number) check_number: ret1
            (check_atom) check_atom:ret1

            (scan_atom) scan_atom:

             (check_literal) check_literal:lit=' %' idx=12 '5,6,7,8,9 '
             (check_literal) dropping space
             (check_literal) check_literal:After drop space:'%' idx=12 '5,6,7,8,9 '
             (check_literal)   '%' != '5'
             (check_literal) check_literal: ret0

             (check_literal) check_literal:lit=' "' idx=12 '5,6,7,8,9 '
             (check_literal) dropping space
             (check_literal) check_literal:After drop space:'"' idx=12 '5,6,7,8,9 '
             (check_literal)   '"' != '5'
             (check_literal) check_literal: ret0

             (check_number) check_number:

              (check_float) check_float:
              (isfloatdigit) isfloatdigit:
              (isfloatdigit) isfloatdigit:
              (check_float) check_float: ret0

              (check_integer) check_integer: '5,6,7,8,9 '
              (check_integer) check_integer:ret1
             (check_number) check_number: ret1

             (scan_number) scan_number:

              (check_float) check_float:
              (isfloatdigit) isfloatdigit:
              (isfloatdigit) isfloatdigit:
              (check_float) check_float: ret0

              (check_integer) check_integer: '5,6,7,8,9 '
              (check_integer) check_integer:ret1

              (scan_integer) scan_integer:
              (scan_integer) scan_integer:ret1
   Frst:0 T:'5' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U )] i i 5
             (scan_integer) scan_integer:ret1  5
            (scan_atom) scan_atom:ret1

            (check_eitem) check_eitem: ',6,7,8,9 '

             (check_operator) check_operator: ,6,7,8,9 

              (check_literal) check_literal:lit=',' idx=13 ',6,7,8,9 '
              (check_literal) check_literal:After drop space:',' idx=13 ',6,7,8,9 '
              (check_literal) check_literal:After while():6,7,8,9 
              (check_literal) check_literal:ret1 

              (scan_literal) scan_literal:lit=',' ',6,7,8,9 '
              (scan_literal) scan_literal:After drop space:,6,7,8,9 
              (scan_literal) scan_literal:while loop:,6,7,8,9 
   Frst:0 T:',' exptype:i
(output_sub_start)
              (scan_literal) scan_literal:ret1
             (check_eitem) check_eitem:ret1

             (scan_eitem) scan_eitem:

              (check_operator) check_operator: 6,7,8,9 

               (check_literal) check_literal:lit=',' idx=14 '6,7,8,9 '
               (check_literal) check_literal:After drop space:',' idx=14 '6,7,8,9 '
               (check_literal)   ',' != '6'
               (check_literal) check_literal: ret0
              (check_operator) check_operator:ret0

              (check_function) check_function: '6,7,8,9 '
              (check_function) check_function: ret0

              (check_atom) check_atom:

               (check_literal) check_literal:lit=' %' idx=14 '6,7,8,9 '
               (check_literal) dropping space
               (check_literal) check_literal:After drop space:'%' idx=14 '6,7,8,9 '
               (check_literal)   '%' != '6'
               (check_literal) check_literal: ret0

               (check_literal) check_literal:lit=' "' idx=14 '6,7,8,9 '
               (check_literal) dropping space
               (check_literal) check_literal:After drop space:'"' idx=14 '6,7,8,9 '
               (check_literal)   '"' != '6'
               (check_literal) check_literal: ret0

               (check_number) check_number:

                (check_float) check_float:
                (isfloatdigit) isfloatdigit:
                (isfloatdigit) isfloatdigit:
                (check_float) check_float: ret0

                (check_integer) check_integer: '6,7,8,9 '
                (check_integer) check_integer:ret1
               (check_number) check_number: ret1
              (check_atom) check_atom:ret1

              (scan_atom) scan_atom:

               (check_literal) check_literal:lit=' %' idx=14 '6,7,8,9 '
               (check_literal) dropping space
               (check_literal) check_literal:After drop space:'%' idx=14 '6,7,8,9 '
               (check_literal)   '%' != '6'
               (check_literal) check_literal: ret0

               (check_literal) check_literal:lit=' "' idx=14 '6,7,8,9 '
               (check_literal) dropping space
               (check_literal) check_literal:After drop space:'"' idx=14 '6,7,8,9 '
               (check_literal)   '"' != '6'
               (check_literal) check_literal: ret0

               (check_number) check_number:

                (check_float) check_float:
                (isfloatdigit) isfloatdigit:
                (isfloatdigit) isfloatdigit:
                (check_float) check_float: ret0

                (check_integer) check_integer: '6,7,8,9 '
                (check_integer) check_integer:ret1
               (check_number) check_number: ret1

               (scan_number) scan_number:

                (check_float) check_float:
                (isfloatdigit) isfloatdigit:
                (isfloatdigit) isfloatdigit:
                (check_float) check_float: ret0

                (check_integer) check_integer: '6,7,8,9 '
                (check_integer) check_integer:ret1

                (scan_integer) scan_integer:
                (scan_integer) scan_integer:ret1
   Frst:0 T:'6' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U )] i i 6
               (scan_integer) scan_integer:ret1  6
              (scan_atom) scan_atom:ret1

              (check_eitem) check_eitem: ',7,8,9 '

               (check_operator) check_operator: ,7,8,9 

                (check_literal) check_literal:lit=',' idx=15 ',7,8,9 '
                (check_literal) check_literal:After drop space:',' idx=15 ',7,8,9 '
                (check_literal) check_literal:After while():7,8,9 
                (check_literal) check_literal:ret1 

                (scan_literal) scan_literal:lit=',' ',7,8,9 '
                (scan_literal) scan_literal:After drop space:,7,8,9 
                (scan_literal) scan_literal:while loop:,7,8,9 
   Frst:0 T:',' exptype:i
(output_sub_start)
                (scan_literal) scan_literal:ret1
               (check_eitem) check_eitem:ret1

               (scan_eitem) scan_eitem:

                (check_operator) check_operator: 7,8,9 

                 (check_literal) check_literal:lit=',' idx=16 '7,8,9 '
                 (check_literal) check_literal:After drop space:',' idx=16 '7,8,9 '
                 (check_literal)   ',' != '7'
                 (check_literal) check_literal: ret0
                (check_operator) check_operator:ret0

                (check_function) check_function: '7,8,9 '
                (check_function) check_function: ret0

                (check_atom) check_atom:

                 (check_literal) check_literal:lit=' %' idx=16 '7,8,9 '
                 (check_literal) dropping space
                 (check_literal) check_literal:After drop space:'%' idx=16 '7,8,9 '
                 (check_literal)   '%' != '7'
                 (check_literal) check_literal: ret0

                 (check_literal) check_literal:lit=' "' idx=16 '7,8,9 '
                 (check_literal) dropping space
                 (check_literal) check_literal:After drop space:'"' idx=16 '7,8,9 '
                 (check_literal)   '"' != '7'
                 (check_literal) check_literal: ret0

                 (check_number) check_number:

                  (check_float) check_float:
                  (isfloatdigit) isfloatdigit:
                  (isfloatdigit) isfloatdigit:
                  (check_float) check_float: ret0

                  (check_integer) check_integer: '7,8,9 '
                  (check_integer) check_integer:ret1
                 (check_number) check_number: ret1
                (check_atom) check_atom:ret1

                (scan_atom) scan_atom:

                 (check_literal) check_literal:lit=' %' idx=16 '7,8,9 '
                 (check_literal) dropping space
                 (check_literal) check_literal:After drop space:'%' idx=16 '7,8,9 '
                 (check_literal)   '%' != '7'
                 (check_literal) check_literal: ret0

                 (check_literal) check_literal:lit=' "' idx=16 '7,8,9 '
                 (check_literal) dropping space
                 (check_literal) check_literal:After drop space:'"' idx=16 '7,8,9 '
                 (check_literal)   '"' != '7'
                 (check_literal) check_literal: ret0

                 (check_number) check_number:

                  (check_float) check_float:
                  (isfloatdigit) isfloatdigit:
                  (isfloatdigit) isfloatdigit:
                  (check_float) check_float: ret0

                  (check_integer) check_integer: '7,8,9 '
                  (check_integer) check_integer:ret1
                 (check_number) check_number: ret1

                 (scan_number) scan_number:

                  (check_float) check_float:
                  (isfloatdigit) isfloatdigit:
                  (isfloatdigit) isfloatdigit:
                  (check_float) check_float: ret0

                  (check_integer) check_integer: '7,8,9 '
                  (check_integer) check_integer:ret1

                  (scan_integer) scan_integer:
                  (scan_integer) scan_integer:ret1
   Frst:0 T:'7' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U )] i i 7
                 (scan_integer) scan_integer:ret1  7
                (scan_atom) scan_atom:ret1

                (check_eitem) check_eitem: ',8,9 '

                 (check_operator) check_operator: ,8,9 

                  (check_literal) check_literal:lit=',' idx=17 ',8,9 '
                  (check_literal) check_literal:After drop space:',' idx=17 ',8,9 '
                  (check_literal) check_literal:After while():8,9 
                  (check_literal) check_literal:ret1 

                  (scan_literal) scan_literal:lit=',' ',8,9 '
                  (scan_literal) scan_literal:After drop space:,8,9 
                  (scan_literal) scan_literal:while loop:,8,9 
   Frst:0 T:',' exptype:i
(output_sub_start)
                  (scan_literal) scan_literal:ret1
                 (check_eitem) check_eitem:ret1

                 (scan_eitem) scan_eitem:

                  (check_operator) check_operator: 8,9 

                   (check_literal) check_literal:lit=',' idx=18 '8,9 '
                   (check_literal) check_literal:After drop space:',' idx=18 '8,9 '
                   (check_literal)   ',' != '8'
                   (check_literal) check_literal: ret0
                  (check_operator) check_operator:ret0

                  (check_function) check_function: '8,9 '
                  (check_function) check_function: ret0

                  (check_atom) check_atom:

                   (check_literal) check_literal:lit=' %' idx=18 '8,9 '
                   (check_literal) dropping space
                   (check_literal) check_literal:After drop space:'%' idx=18 '8,9 '
                   (check_literal)   '%' != '8'
                   (check_literal) check_literal: ret0

                   (check_literal) check_literal:lit=' "' idx=18 '8,9 '
                   (check_literal) dropping space
                   (check_literal) check_literal:After drop space:'"' idx=18 '8,9 '
                   (check_literal)   '"' != '8'
                   (check_literal) check_literal: ret0

                   (check_number) check_number:

                    (check_float) check_float:
                    (isfloatdigit) isfloatdigit:
                    (isfloatdigit) isfloatdigit:
                    (check_float) check_float: ret0

                    (check_integer) check_integer: '8,9 '
                    (check_integer) check_integer:ret1
                   (check_number) check_number: ret1
                  (check_atom) check_atom:ret1

                  (scan_atom) scan_atom:

                   (check_literal) check_literal:lit=' %' idx=18 '8,9 '
                   (check_literal) dropping space
                   (check_literal) check_literal:After drop space:'%' idx=18 '8,9 '
                   (check_literal)   '%' != '8'
                   (check_literal) check_literal: ret0

                   (check_literal) check_literal:lit=' "' idx=18 '8,9 '
                   (check_literal) dropping space
                   (check_literal) check_literal:After drop space:'"' idx=18 '8,9 '
                   (check_literal)   '"' != '8'
                   (check_literal) check_literal: ret0

                   (check_number) check_number:

                    (check_float) check_float:
                    (isfloatdigit) isfloatdigit:
                    (isfloatdigit) isfloatdigit:
                    (check_float) check_float: ret0

                    (check_integer) check_integer: '8,9 '
                    (check_integer) check_integer:ret1
                   (check_number) check_number: ret1

                   (scan_number) scan_number:

                    (check_float) check_float:
                    (isfloatdigit) isfloatdigit:
                    (isfloatdigit) isfloatdigit:
                    (check_float) check_float: ret0

                    (check_integer) check_integer: '8,9 '
                    (check_integer) check_integer:ret1

                    (scan_integer) scan_integer:
                    (scan_integer) scan_integer:ret1
   Frst:0 T:'8' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U )] i i 8
                   (scan_integer) scan_integer:ret1  8
                  (scan_atom) scan_atom:ret1

                  (check_eitem) check_eitem: ',9 '

                   (check_operator) check_operator: ,9 

                    (check_literal) check_literal:lit=',' idx=19 ',9 '
                    (check_literal) check_literal:After drop space:',' idx=19 ',9 '
                    (check_literal) check_literal:After while():9 
                    (check_literal) check_literal:ret1 

                    (scan_literal) scan_literal:lit=',' ',9 '
                    (scan_literal) scan_literal:After drop space:,9 
                    (scan_literal) scan_literal:while loop:,9 
   Frst:0 T:',' exptype:i
(output_sub_start)
                    (scan_literal) scan_literal:ret1
                   (check_eitem) check_eitem:ret1

                   (scan_eitem) scan_eitem:

                    (check_operator) check_operator: 9 

                     (check_literal) check_literal:lit=',' idx=20 '9 '
                     (check_literal) check_literal:After drop space:',' idx=20 '9 '
                     (check_literal)   ',' != '9'
                     (check_literal) check_literal: ret0
                    (check_operator) check_operator:ret0

                    (check_function) check_function: '9 '
                    (check_function) check_function: ret0

                    (check_atom) check_atom:

                     (check_literal) check_literal:lit=' %' idx=20 '9 '
                     (check_literal) dropping space
                     (check_literal) check_literal:After drop space:'%' idx=20 '9 '
                     (check_literal)   '%' != '9'
                     (check_literal) check_literal: ret0

                     (check_literal) check_literal:lit=' "' idx=20 '9 '
                     (check_literal) dropping space
                     (check_literal) check_literal:After drop space:'"' idx=20 '9 '
                     (check_literal)   '"' != '9'
                     (check_literal) check_literal: ret0

                     (check_number) check_number:

                      (check_float) check_float:
                      (isfloatdigit) isfloatdigit:
                      (isfloatdigit) isfloatdigit:
                      (check_float) check_float: ret0

                      (check_integer) check_integer: '9 '
                      (check_integer) check_integer:ret1
                     (check_number) check_number: ret1
                    (check_atom) check_atom:ret1

                    (scan_atom) scan_atom:

                     (check_literal) check_literal:lit=' %' idx=20 '9 '
                     (check_literal) dropping space
                     (check_literal) check_literal:After drop space:'%' idx=20 '9 '
                     (check_literal)   '%' != '9'
                     (check_literal) check_literal: ret0

                     (check_literal) check_literal:lit=' "' idx=20 '9 '
                     (check_literal) dropping space
                     (check_literal) check_literal:After drop space:'"' idx=20 '9 '
                     (check_literal)   '"' != '9'
                     (check_literal) check_literal: ret0

                     (check_number) check_number:

                      (check_float) check_float:
                      (isfloatdigit) isfloatdigit:
                      (isfloatdigit) isfloatdigit:
                      (check_float) check_float: ret0

                      (check_integer) check_integer: '9 '
                      (check_integer) check_integer:ret1
                     (check_number) check_number: ret1

                     (scan_number) scan_number:

                      (check_float) check_float:
                      (isfloatdigit) isfloatdigit:
                      (isfloatdigit) isfloatdigit:
                      (check_float) check_float: ret0

                      (check_integer) check_integer: '9 '
                      (check_integer) check_integer:ret1

                      (scan_integer) scan_integer:
                      (scan_integer) scan_integer:ret1
   Frst:0 T:'9' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U )] i i 9
                     (scan_integer) scan_integer:ret1  9
                    (scan_atom) scan_atom:ret1

                    (check_eitem) check_eitem: ' '

                     (check_operator) check_operator:  

                      (check_literal) check_literal:lit=',' idx=22 ''
                      (check_literal) check_literal:After drop space:',' idx=22 ''
                      (check_literal) check_literal  ret0 Empty test string
                     (check_operator) check_operator:ret0

                     (check_function) check_function: ''
                     (check_function) check_function: ret0

                     (check_atom) check_atom:

                      (check_literal) check_literal:lit=' %' idx=21 ' '
                      (check_literal) dropping space
                      (check_literal) check_literal:After drop space:'%' idx=22 ''
                      (check_literal) check_literal  ret0 Empty test string

                      (check_literal) check_literal:lit=' "' idx=21 ' '
                      (check_literal) dropping space
                      (check_literal) check_literal:After drop space:'"' idx=22 ''
                      (check_literal) check_literal  ret0 Empty test string

                      (check_number) check_number:

                       (check_float) check_float:
                       (isfloatdigit) isfloatdigit:
                       (check_float) check_float: ret0

                       (check_integer) check_integer: ''
                       (check_integer) check_integer:ret0
                      (check_number) check_number: ret0

                      (check_variable) check_variable:

                       (check_vname) check_vname '':
                       (check_vname) check_vname ret0 '':
                      (check_variable) check_variable:ret0 
                     (check_atom) check_atom:ret1

                     (check_sub_expr) check_sub_expr:

                      (check_literal) check_literal:lit=' (' idx=21 ' '
                      (check_literal) dropping space
                      (check_literal) check_literal:After drop space:'(' idx=22 ''
                      (check_literal) check_literal  ret0 Empty test string
                     (check_sub_expr) check_sub_expr: ret0
                    (check_eitem) check_eitem:ret0
                   (scan_expression) scan_expression: ret1 ' '
                  (scan_command) scan_command: ret1 =>'UDG'
                 (scan_command) 
ENDEXP
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
                 (op_stack_print) 
------------------
                 (op_stack_print) 
Operator Stack     (1)

                 (op_stack_print) 
000: UDG type:17
                 (op_stack_print) 
------------------

(  output_sub_end)
                 (token_is_function) 
token_is_function:
                 (token_is_function) UDG is function
Pop 5
Pop 'UDG'
                 (op_stack_print) 
------------------
                 (op_stack_print) 
Operator Stack     (0)

                 (op_stack_print) 
------------------

( output_function) [i,(U )] v v UDG
(  output_sub_end)
Finalise stack
                 (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '1'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '4'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '5'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '6'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '7'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '8'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '9'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'UDG'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
 BE:

Type Check Stack (0)

 BE:1
type_check_stack_push: '1'
                 (type_check_stack_print) 
------------------
                 (type_check_stack_print) 
Type Check Stack     (1)

                 (type_check_stack_print) 
000: '1' type:0
                 (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '1' type:i (0)
 BE:

Type Check Stack (1)

000: '1' type:i (0)
 BE:2
type_check_stack_push: '2'
                 (type_check_stack_print) 
------------------
                 (type_check_stack_print) 
Type Check Stack     (2)

                 (type_check_stack_print) 
000: '1' type:0
                 (type_check_stack_print) 
001: '2' type:0
                 (type_check_stack_print) 
------------------


Type Check Stack (2)

000: '1' type:i (0)
001: '2' type:i (0)
 BE:

Type Check Stack (2)

000: '1' type:i (0)
001: '2' type:i (0)
 BE:3
type_check_stack_push: '3'
                 (type_check_stack_print) 
------------------
                 (type_check_stack_print) 
Type Check Stack     (3)

                 (type_check_stack_print) 
000: '1' type:0
                 (type_check_stack_print) 
001: '2' type:0
                 (type_check_stack_print) 
002: '3' type:0
                 (type_check_stack_print) 
------------------


Type Check Stack (3)

000: '1' type:i (0)
001: '2' type:i (0)
002: '3' type:i (0)
 BE:

Type Check Stack (3)

000: '1' type:i (0)
001: '2' type:i (0)
002: '3' type:i (0)
 BE:4
type_check_stack_push: '4'
                 (type_check_stack_print) 
------------------
                 (type_check_stack_print) 
Type Check Stack     (4)

                 (type_check_stack_print) 
000: '1' type:0
                 (type_check_stack_print) 
001: '2' type:0
                 (type_check_stack_print) 
002: '3' type:0
                 (type_check_stack_print) 
003: '4' type:0
                 (type_check_stack_print) 
------------------


Type Check Stack (4)

000: '1' type:i (0)
001: '2' type:i (0)
002: '3' type:i (0)
003: '4' type:i (0)
 BE:

Type Check Stack (4)

000: '1' type:i (0)
001: '2' type:i (0)
002: '3' type:i (0)
003: '4' type:i (0)
 BE:5
type_check_stack_push: '5'
                 (type_check_stack_print) 
------------------
                 (type_check_stack_print) 
Type Check Stack     (5)

                 (type_check_stack_print) 
000: '1' type:0
                 (type_check_stack_print) 
001: '2' type:0
                 (type_check_stack_print) 
002: '3' type:0
                 (type_check_stack_print) 
003: '4' type:0
                 (type_check_stack_print) 
004: '5' type:0
                 (type_check_stack_print) 
------------------


Type Check Stack (5)

000: '1' type:i (0)
001: '2' type:i (0)
002: '3' type:i (0)
003: '4' type:i (0)
004: '5' type:i (0)
 BE:

Type Check Stack (5)

000: '1' type:i (0)
001: '2' type:i (0)
002: '3' type:i (0)
003: '4' type:i (0)
004: '5' type:i (0)
 BE:6
type_check_stack_push: '6'
                 (type_check_stack_print) 
------------------
                 (type_check_stack_print) 
Type Check Stack     (6)

                 (type_check_stack_print) 
000: '1' type:0
                 (type_check_stack_print) 
001: '2' type:0
                 (type_check_stack_print) 
002: '3' type:0
                 (type_check_stack_print) 
003: '4' type:0
                 (type_check_stack_print) 
004: '5' type:0
                 (type_check_stack_print) 
005: '6' type:0
                 (type_check_stack_print) 
------------------


Type Check Stack (6)

000: '1' type:i (0)
001: '2' type:i (0)
002: '3' type:i (0)
003: '4' type:i (0)
004: '5' type:i (0)
005: '6' type:i (0)
 BE:

Type Check Stack (6)

000: '1' type:i (0)
001: '2' type:i (0)
002: '3' type:i (0)
003: '4' type:i (0)
004: '5' type:i (0)
005: '6' type:i (0)
 BE:7
type_check_stack_push: '7'
                 (type_check_stack_print) 
------------------
                 (type_check_stack_print) 
Type Check Stack     (7)

                 (type_check_stack_print) 
000: '1' type:0
                 (type_check_stack_print) 
001: '2' type:0
                 (type_check_stack_print) 
002: '3' type:0
                 (type_check_stack_print) 
003: '4' type:0
                 (type_check_stack_print) 
004: '5' type:0
                 (type_check_stack_print) 
005: '6' type:0
                 (type_check_stack_print) 
006: '7' type:0
                 (type_check_stack_print) 
------------------


Type Check Stack (7)

000: '1' type:i (0)
001: '2' type:i (0)
002: '3' type:i (0)
003: '4' type:i (0)
004: '5' type:i (0)
005: '6' type:i (0)
006: '7' type:i (0)
 BE:

Type Check Stack (7)

000: '1' type:i (0)
001: '2' type:i (0)
002: '3' type:i (0)
003: '4' type:i (0)
004: '5' type:i (0)
005: '6' type:i (0)
006: '7' type:i (0)
 BE:8
type_check_stack_push: '8'
                 (type_check_stack_print) 
------------------
                 (type_check_stack_print) 
Type Check Stack     (8)

                 (type_check_stack_print) 
000: '1' type:0
                 (type_check_stack_print) 
001: '2' type:0
                 (type_check_stack_print) 
002: '3' type:0
                 (type_check_stack_print) 
003: '4' type:0
                 (type_check_stack_print) 
004: '5' type:0
                 (type_check_stack_print) 
005: '6' type:0
                 (type_check_stack_print) 
006: '7' type:0
                 (type_check_stack_print) 
007: '8' type:0
                 (type_check_stack_print) 
------------------


Type Check Stack (8)

000: '1' type:i (0)
001: '2' type:i (0)
002: '3' type:i (0)
003: '4' type:i (0)
004: '5' type:i (0)
005: '6' type:i (0)
006: '7' type:i (0)
007: '8' type:i (0)
 BE:

Type Check Stack (8)

000: '1' type:i (0)
001: '2' type:i (0)
002: '3' type:i (0)
003: '4' type:i (0)
004: '5' type:i (0)
005: '6' type:i (0)
006: '7' type:i (0)
007: '8' type:i (0)
 BE:9
type_check_stack_push: '9'
                 (type_check_stack_print) 
------------------
                 (type_check_stack_print) 
Type Check Stack     (9)

                 (type_check_stack_print) 
000: '1' type:0
                 (type_check_stack_print) 
001: '2' type:0
                 (type_check_stack_print) 
002: '3' type:0
                 (type_check_stack_print) 
003: '4' type:0
                 (type_check_stack_print) 
004: '5' type:0
                 (type_check_stack_print) 
005: '6' type:0
                 (type_check_stack_print) 
006: '7' type:0
                 (type_check_stack_print) 
007: '8' type:0
                 (type_check_stack_print) 
008: '9' type:0
                 (type_check_stack_print) 
------------------


Type Check Stack (9)

000: '1' type:i (0)
001: '2' type:i (0)
002: '3' type:i (0)
003: '4' type:i (0)
004: '5' type:i (0)
005: '6' type:i (0)
006: '7' type:i (0)
007: '8' type:i (0)
008: '9' type:i (0)
 BE:

Type Check Stack (9)

000: '1' type:i (0)
001: '2' type:i (0)
002: '3' type:i (0)
003: '4' type:i (0)
004: '5' type:i (0)
005: '6' type:i (0)
006: '7' type:i (0)
007: '8' type:i (0)
008: '9' type:i (0)
 BE:UDG
FN: 9 args
                 (function_return_type) 
function_return_type: 'UDG' =>v
                 (function_return_type) 
function_return_type: 'UDG' =>17
ret_type;17 v
typecheck_expression:Ret type of UDG : v
type_check_stack_pop: '9'
                 (type_check_stack_print) 
------------------
                 (type_check_stack_print) 
Type Check Stack     (8)

                 (type_check_stack_print) 
000: '1' type:0
                 (type_check_stack_print) 
001: '2' type:0
                 (type_check_stack_print) 
002: '3' type:0
                 (type_check_stack_print) 
003: '4' type:0
                 (type_check_stack_print) 
004: '5' type:0
                 (type_check_stack_print) 
005: '6' type:0
                 (type_check_stack_print) 
006: '7' type:0
                 (type_check_stack_print) 
007: '8' type:0
                 (type_check_stack_print) 
------------------

FN ARG 8 ri 9 0(i)  Arg ok
type_check_stack_pop: '8'
                 (type_check_stack_print) 
------------------
                 (type_check_stack_print) 
Type Check Stack     (7)

                 (type_check_stack_print) 
000: '1' type:0
                 (type_check_stack_print) 
001: '2' type:0
                 (type_check_stack_print) 
002: '3' type:0
                 (type_check_stack_print) 
003: '4' type:0
                 (type_check_stack_print) 
004: '5' type:0
                 (type_check_stack_print) 
005: '6' type:0
                 (type_check_stack_print) 
006: '7' type:0
                 (type_check_stack_print) 
------------------

FN ARG 7 ri 8 0(i)  Arg ok
type_check_stack_pop: '7'
                 (type_check_stack_print) 
------------------
                 (type_check_stack_print) 
Type Check Stack     (6)

                 (type_check_stack_print) 
000: '1' type:0
                 (type_check_stack_print) 
001: '2' type:0
                 (type_check_stack_print) 
002: '3' type:0
                 (type_check_stack_print) 
003: '4' type:0
                 (type_check_stack_print) 
004: '5' type:0
                 (type_check_stack_print) 
005: '6' type:0
                 (type_check_stack_print) 
------------------

FN ARG 6 ri 7 0(i)  Arg ok
type_check_stack_pop: '6'
                 (type_check_stack_print) 
------------------
                 (type_check_stack_print) 
Type Check Stack     (5)

                 (type_check_stack_print) 
000: '1' type:0
                 (type_check_stack_print) 
001: '2' type:0
                 (type_check_stack_print) 
002: '3' type:0
                 (type_check_stack_print) 
003: '4' type:0
                 (type_check_stack_print) 
004: '5' type:0
                 (type_check_stack_print) 
------------------

FN ARG 5 ri 6 0(i)  Arg ok
type_check_stack_pop: '5'
                 (type_check_stack_print) 
------------------
                 (type_check_stack_print) 
Type Check Stack     (4)

                 (type_check_stack_print) 
000: '1' type:0
                 (type_check_stack_print) 
001: '2' type:0
                 (type_check_stack_print) 
002: '3' type:0
                 (type_check_stack_print) 
003: '4' type:0
                 (type_check_stack_print) 
------------------

FN ARG 4 ri 5 0(i)  Arg ok
type_check_stack_pop: '4'
                 (type_check_stack_print) 
------------------
                 (type_check_stack_print) 
Type Check Stack     (3)

                 (type_check_stack_print) 
000: '1' type:0
                 (type_check_stack_print) 
001: '2' type:0
                 (type_check_stack_print) 
002: '3' type:0
                 (type_check_stack_print) 
------------------

FN ARG 3 ri 4 0(i)  Arg ok
type_check_stack_pop: '3'
                 (type_check_stack_print) 
------------------
                 (type_check_stack_print) 
Type Check Stack     (2)

                 (type_check_stack_print) 
000: '1' type:0
                 (type_check_stack_print) 
001: '2' type:0
                 (type_check_stack_print) 
------------------

FN ARG 2 ri 3 0(i)  Arg ok
type_check_stack_pop: '2'
                 (type_check_stack_print) 
------------------
                 (type_check_stack_print) 
Type Check Stack     (1)

                 (type_check_stack_print) 
000: '1' type:0
                 (type_check_stack_print) 
------------------

FN ARG 1 ri 2 0(i)  Arg ok
type_check_stack_pop: '1'
                 (type_check_stack_print) 
------------------
                 (type_check_stack_print) 
Type Check Stack     (0)

                 (type_check_stack_print) 
------------------

FN ARG 0 ri 1 0(i)  Arg ok
type_check_stack_push: '000'
                 (type_check_stack_print) 
------------------
                 (type_check_stack_print) 
Type Check Stack     (1)

                 (type_check_stack_print) 
000: '000' type:17
                 (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '1'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '4'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '5'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '6'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '7'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '8'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '9'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'UDG'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i '1'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_INTEGER      i rq:i '4'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_INTEGER      i rq:i '5'  0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N12 EXP_BUFF_ID_INTEGER      i rq:i '6'  0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_INTEGER      i rq:i '7'  0:
(dump_exp_buffer2) N15 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N16 EXP_BUFF_ID_INTEGER      i rq:i '8'  0:
(dump_exp_buffer2) N17 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N18 EXP_BUFF_ID_INTEGER      i rq:i '9'  0:
(dump_exp_buffer2) N19 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N20 EXP_BUFF_ID_FUNCTION     v rq:v 'UDG'  0:
(dump_exp_buffer2) N21 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
                 (process_expression_types) 
==INFIX==

infix_stack_push: '1'
infix_stack_push: '2'
infix_stack_push: '3'
infix_stack_push: '4'
infix_stack_push: '5'
infix_stack_push: '6'
infix_stack_push: '7'
infix_stack_push: '8'
infix_stack_push: '9'
infix_stack_pop: '9'
infix_stack_pop: '8'
infix_stack_pop: '7'
infix_stack_pop: '6'
infix_stack_pop: '5'
infix_stack_pop: '4'
infix_stack_pop: '3'
infix_stack_pop: '2'
infix_stack_pop: '1'
infix_stack_push: 'UDG(1 2 3 4 5 6 7 8 9 )'
infix_stack_pop: 'UDG(1 2 3 4 5 6 7 8 9 )'
                 (process_expression_types) ==UDG(1 2 3 4 5 6 7 8 9 )==
                 (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_INTEGER      i rq:i 1  0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N4 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(    output_qcode) N7 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N8 EXP_BUFF_ID_INTEGER      i rq:i 4  0:
(    output_qcode) N9 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N10 EXP_BUFF_ID_INTEGER      i rq:i 5  0:
(    output_qcode) N11 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N12 EXP_BUFF_ID_INTEGER      i rq:i 6  0:
(    output_qcode) N13 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N14 EXP_BUFF_ID_INTEGER      i rq:i 7  0:
(    output_qcode) N15 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N16 EXP_BUFF_ID_INTEGER      i rq:i 8  0:
(    output_qcode) N17 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N18 EXP_BUFF_ID_INTEGER      i rq:i 9  0:
(    output_qcode) N19 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N20 EXP_BUFF_ID_FUNCTION     v rq:v UDG  0:
(    output_qcode) N21 EXP_BUFF_ID_SUB_END      U rq:i   0:

                  (check_literal) check_literal:lit=':' idx=22 ''
                  (check_literal) check_literal:After drop space:':' idx=22 ''
                  (check_literal) check_literal  ret0 Empty test string
                 (translate_file) 
cline scanned OK
**************************
**UDG 1,2,3,4,5,6,7,8,9 **
**************************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'UDG 1,2,3,4,5,6,7,8,9 ':
     (check_vname) check_vname ret1 ' 1,2,3,4,5,6,7,8,9 ':
    (check_variable) check_variable: ' 1,2,3,4,5,6,7,8,9 '
    (check_variable) check_variable: Ary test ' 1,2,3,4,5,6,7,8,9 '

     (check_literal) check_literal:lit='(' idx=3 ' 1,2,3,4,5,6,7,8,9 '
     (check_literal) check_literal:After drop space:'(' idx=3 ' 1,2,3,4,5,6,7,8,9 '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=3 ' 1,2,3,4,5,6,7,8,9 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=4 '1,2,3,4,5,6,7,8,9 '
   (check_literal)   '=' != '1'
   (check_literal) check_literal: ret0
  (check_assignment) check_assignment:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) check_textlabel: 'UDG 1,2,3,4,5,6,7,8,9 '
   (check_textlabel) check_textlabel:ret0
  (check_proc_call) check_proc_call:ret0

  (check_command) check_command:
  (check_command) check_command: ret1 found=> 'UDG'
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=19, ' 1,2,3,4,5,6,7,8,9 '
========================================================
UDG 1,2,3,4,5,6,7,8,9 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'UDG 1,2,3,4,5,6,7,8,9 ':
    (check_vname) check_vname ret1 ' 1,2,3,4,5,6,7,8,9 ':
   (check_variable) check_variable: ' 1,2,3,4,5,6,7,8,9 '
   (check_variable) check_variable: Ary test ' 1,2,3,4,5,6,7,8,9 '

    (check_literal) check_literal:lit='(' idx=3 ' 1,2,3,4,5,6,7,8,9 '
    (check_literal) check_literal:After drop space:'(' idx=3 ' 1,2,3,4,5,6,7,8,9 '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=3 ' 1,2,3,4,5,6,7,8,9 '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=4 '1,2,3,4,5,6,7,8,9 '
  (check_literal)   '=' != '1'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'UDG 1,2,3,4,5,6,7,8,9 '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'UDG'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'UDG' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) UDG is function
 (function_return_type) 
function_return_type: 'UDG' =>v
 (function_return_type) 
function_return_type: 'UDG' =>17
process_token: 'UDG' t=>v
 Push:'UDG'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: UDG type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: UDG type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' 1,2,3,4,5,6,7,8,9 '

   (check_eitem) check_eitem: '1,2,3,4,5,6,7,8,9 '

    (check_operator) check_operator: 1,2,3,4,5,6,7,8,9 

     (check_literal) check_literal:lit=',' idx=4 '1,2,3,4,5,6,7,8,9 '
     (check_literal) check_literal:After drop space:',' idx=4 '1,2,3,4,5,6,7,8,9 '
     (check_literal)   ',' != '1'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: '1,2,3,4,5,6,7,8,9 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=4 '1,2,3,4,5,6,7,8,9 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=4 '1,2,3,4,5,6,7,8,9 '
     (check_literal)   '%' != '1'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=4 '1,2,3,4,5,6,7,8,9 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=4 '1,2,3,4,5,6,7,8,9 '
     (check_literal)   '"' != '1'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '1,2,3,4,5,6,7,8,9 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (scan_eitem) scan_eitem:

    (check_operator) check_operator: 1,2,3,4,5,6,7,8,9 

     (check_literal) check_literal:lit=',' idx=4 '1,2,3,4,5,6,7,8,9 '
     (check_literal) check_literal:After drop space:',' idx=4 '1,2,3,4,5,6,7,8,9 '
     (check_literal)   ',' != '1'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: '1,2,3,4,5,6,7,8,9 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=4 '1,2,3,4,5,6,7,8,9 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=4 '1,2,3,4,5,6,7,8,9 '
     (check_literal)   '%' != '1'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=4 '1,2,3,4,5,6,7,8,9 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=4 '1,2,3,4,5,6,7,8,9 '
     (check_literal)   '"' != '1'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '1,2,3,4,5,6,7,8,9 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1

    (scan_atom) scan_atom:

     (check_literal) check_literal:lit=' %' idx=4 '1,2,3,4,5,6,7,8,9 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=4 '1,2,3,4,5,6,7,8,9 '
     (check_literal)   '%' != '1'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=4 '1,2,3,4,5,6,7,8,9 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=4 '1,2,3,4,5,6,7,8,9 '
     (check_literal)   '"' != '1'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '1,2,3,4,5,6,7,8,9 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1

     (scan_number) scan_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '1,2,3,4,5,6,7,8,9 '
      (check_integer) check_integer:ret1

      (scan_integer) scan_integer:
      (scan_integer) scan_integer:ret1
   Frst:0 T:'1' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U )] i i 1
     (scan_integer) scan_integer:ret1  1
    (scan_atom) scan_atom:ret1

    (check_eitem) check_eitem: ',2,3,4,5,6,7,8,9 '

     (check_operator) check_operator: ,2,3,4,5,6,7,8,9 

      (check_literal) check_literal:lit=',' idx=5 ',2,3,4,5,6,7,8,9 '
      (check_literal) check_literal:After drop space:',' idx=5 ',2,3,4,5,6,7,8,9 '
      (check_literal) check_literal:After while():2,3,4,5,6,7,8,9 
      (check_literal) check_literal:ret1 

      (scan_literal) scan_literal:lit=',' ',2,3,4,5,6,7,8,9 '
      (scan_literal) scan_literal:After drop space:,2,3,4,5,6,7,8,9 
      (scan_literal) scan_literal:while loop:,2,3,4,5,6,7,8,9 
   Frst:0 T:',' exptype:i
(output_sub_start)
      (scan_literal) scan_literal:ret1
     (check_eitem) check_eitem:ret1

     (scan_eitem) scan_eitem:

      (check_operator) check_operator: 2,3,4,5,6,7,8,9 

       (check_literal) check_literal:lit=',' idx=6 '2,3,4,5,6,7,8,9 '
       (check_literal) check_literal:After drop space:',' idx=6 '2,3,4,5,6,7,8,9 '
       (check_literal)   ',' != '2'
       (check_literal) check_literal: ret0
      (check_operator) check_operator:ret0

      (check_function) check_function: '2,3,4,5,6,7,8,9 '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=6 '2,3,4,5,6,7,8,9 '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=6 '2,3,4,5,6,7,8,9 '
       (check_literal)   '%' != '2'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=6 '2,3,4,5,6,7,8,9 '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=6 '2,3,4,5,6,7,8,9 '
       (check_literal)   '"' != '2'
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '2,3,4,5,6,7,8,9 '
        (check_integer) check_integer:ret1
       (check_number) check_number: ret1
      (check_atom) check_atom:ret1

      (scan_atom) scan_atom:

       (check_literal) check_literal:lit=' %' idx=6 '2,3,4,5,6,7,8,9 '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=6 '2,3,4,5,6,7,8,9 '
       (check_literal)   '%' != '2'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=6 '2,3,4,5,6,7,8,9 '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=6 '2,3,4,5,6,7,8,9 '
       (check_literal)   '"' != '2'
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '2,3,4,5,6,7,8,9 '
        (check_integer) check_integer:ret1
       (check_number) check_number: ret1

       (scan_number) scan_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '2,3,4,5,6,7,8,9 '
        (check_integer) check_integer:ret1

        (scan_integer) scan_integer:
        (scan_integer) scan_integer:ret1
   Frst:0 T:'2' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U )] i i 2
       (scan_integer) scan_integer:ret1  2
      (scan_atom) scan_atom:ret1

      (check_eitem) check_eitem: ',3,4,5,6,7,8,9 '

       (check_operator) check_operator: ,3,4,5,6,7,8,9 

        (check_literal) check_literal:lit=',' idx=7 ',3,4,5,6,7,8,9 '
        (check_literal) check_literal:After drop space:',' idx=7 ',3,4,5,6,7,8,9 '
        (check_literal) check_literal:After while():3,4,5,6,7,8,9 
        (check_literal) check_literal:ret1 

        (scan_literal) scan_literal:lit=',' ',3,4,5,6,7,8,9 '
        (scan_literal) scan_literal:After drop space:,3,4,5,6,7,8,9 
        (scan_literal) scan_literal:while loop:,3,4,5,6,7,8,9 
   Frst:0 T:',' exptype:i
(output_sub_start)
        (scan_literal) scan_literal:ret1
       (check_eitem) check_eitem:ret1

       (scan_eitem) scan_eitem:

        (check_operator) check_operator: 3,4,5,6,7,8,9 

         (check_literal) check_literal:lit=',' idx=8 '3,4,5,6,7,8,9 '
         (check_literal) check_literal:After drop space:',' idx=8 '3,4,5,6,7,8,9 '
         (check_literal)   ',' != '3'
         (check_literal) check_literal: ret0
        (check_operator) check_operator:ret0

        (check_function) check_function: '3,4,5,6,7,8,9 '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=8 '3,4,5,6,7,8,9 '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=8 '3,4,5,6,7,8,9 '
         (check_literal)   '%' != '3'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=8 '3,4,5,6,7,8,9 '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=8 '3,4,5,6,7,8,9 '
         (check_literal)   '"' != '3'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: '3,4,5,6,7,8,9 '
          (check_integer) check_integer:ret1
         (check_number) check_number: ret1
        (check_atom) check_atom:ret1

        (scan_atom) scan_atom:

         (check_literal) check_literal:lit=' %' idx=8 '3,4,5,6,7,8,9 '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=8 '3,4,5,6,7,8,9 '
         (check_literal)   '%' != '3'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=8 '3,4,5,6,7,8,9 '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=8 '3,4,5,6,7,8,9 '
         (check_literal)   '"' != '3'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: '3,4,5,6,7,8,9 '
          (check_integer) check_integer:ret1
         (check_number) check_number: ret1

         (scan_number) scan_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: '3,4,5,6,7,8,9 '
          (check_integer) check_integer:ret1

          (scan_integer) scan_integer:
          (scan_integer) scan_integer:ret1
   Frst:0 T:'3' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U )] i i 3
         (scan_integer) scan_integer:ret1  3
        (scan_atom) scan_atom:ret1

        (check_eitem) check_eitem: ',4,5,6,7,8,9 '

         (check_operator) check_operator: ,4,5,6,7,8,9 

          (check_literal) check_literal:lit=',' idx=9 ',4,5,6,7,8,9 '
          (check_literal) check_literal:After drop space:',' idx=9 ',4,5,6,7,8,9 '
          (check_literal) check_literal:After while():4,5,6,7,8,9 
          (check_literal) check_literal:ret1 

          (scan_literal) scan_literal:lit=',' ',4,5,6,7,8,9 '
          (scan_literal) scan_literal:After drop space:,4,5,6,7,8,9 
          (scan_literal) scan_literal:while loop:,4,5,6,7,8,9 
   Frst:0 T:',' exptype:i
(output_sub_start)
          (scan_literal) scan_literal:ret1
         (check_eitem) check_eitem:ret1

         (scan_eitem) scan_eitem:

          (check_operator) check_operator: 4,5,6,7,8,9 

           (check_literal) check_literal:lit=',' idx=10 '4,5,6,7,8,9 '
           (check_literal) check_literal:After drop space:',' idx=10 '4,5,6,7,8,9 '
           (check_literal)   ',' != '4'
           (check_literal) check_literal: ret0
          (check_operator) check_operator:ret0

          (check_function) check_function: '4,5,6,7,8,9 '
          (check_function) check_function: ret0

          (check_atom) check_atom:

           (check_literal) check_literal:lit=' %' idx=10 '4,5,6,7,8,9 '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'%' idx=10 '4,5,6,7,8,9 '
           (check_literal)   '%' != '4'
           (check_literal) check_literal: ret0

           (check_literal) check_literal:lit=' "' idx=10 '4,5,6,7,8,9 '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'"' idx=10 '4,5,6,7,8,9 '
           (check_literal)   '"' != '4'
           (check_literal) check_literal: ret0

           (check_number) check_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret0

            (check_integer) check_integer: '4,5,6,7,8,9 '
            (check_integer) check_integer:ret1
           (check_number) check_number: ret1
          (check_atom) check_atom:ret1

          (scan_atom) scan_atom:

           (check_literal) check_literal:lit=' %' idx=10 '4,5,6,7,8,9 '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'%' idx=10 '4,5,6,7,8,9 '
           (check_literal)   '%' != '4'
           (check_literal) check_literal: ret0

           (check_literal) check_literal:lit=' "' idx=10 '4,5,6,7,8,9 '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'"' idx=10 '4,5,6,7,8,9 '
           (check_literal)   '"' != '4'
           (check_literal) check_literal: ret0

           (check_number) check_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret0

            (check_integer) check_integer: '4,5,6,7,8,9 '
            (check_integer) check_integer:ret1
           (check_number) check_number: ret1

           (scan_number) scan_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret0

            (check_integer) check_integer: '4,5,6,7,8,9 '
            (check_integer) check_integer:ret1

            (scan_integer) scan_integer:
            (scan_integer) scan_integer:ret1
   Frst:0 T:'4' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U )] i i 4
           (scan_integer) scan_integer:ret1  4
          (scan_atom) scan_atom:ret1

          (check_eitem) check_eitem: ',5,6,7,8,9 '

           (check_operator) check_operator: ,5,6,7,8,9 

            (check_literal) check_literal:lit=',' idx=11 ',5,6,7,8,9 '
            (check_literal) check_literal:After drop space:',' idx=11 ',5,6,7,8,9 '
            (check_literal) check_literal:After while():5,6,7,8,9 
            (check_literal) check_literal:ret1 

            (scan_literal) scan_literal:lit=',' ',5,6,7,8,9 '
            (scan_literal) scan_literal:After drop space:,5,6,7,8,9 
            (scan_literal) scan_literal:while loop:,5,6,7,8,9 
   Frst:0 T:',' exptype:i
(output_sub_start)
            (scan_literal) scan_literal:ret1
           (check_eitem) check_eitem:ret1

           (scan_eitem) scan_eitem:

            (check_operator) check_operator: 5,6,7,8,9 

             (check_literal) check_literal:lit=',' idx=12 '5,6,7,8,9 '
             (check_literal) check_literal:After drop space:',' idx=12 '5,6,7,8,9 '
             (check_literal)   ',' != '5'
             (check_literal) check_literal: ret0
            (check_operator) check_operator:ret0

            (check_function) check_function: '5,6,7,8,9 '
            (check_function) check_function: ret0

            (check_atom) check_atom:

             (check_literal) check_literal:lit=' %' idx=12 '5,6,7,8,9 '
             (check_literal) dropping space
             (check_literal) check_literal:After drop space:'%' idx=12 '5,6,7,8,9 '
             (check_literal)   '%' != '5'
             (check_literal) check_literal: ret0

             (check_literal) check_literal:lit=' "' idx=12 '5,6,7,8,9 '
             (check_literal) dropping space
             (check_literal) check_literal:After drop space:'"' idx=12 '5,6,7,8,9 '
             (check_literal)   '"' != '5'
             (check_literal) check_literal: ret0

             (check_number) check_number:

              (check_float) check_float:
              (isfloatdigit) isfloatdigit:
              (isfloatdigit) isfloatdigit:
              (check_float) check_float: ret0

              (check_integer) check_integer: '5,6,7,8,9 '
              (check_integer) check_integer:ret1
             (check_number) check_number: ret1
            (check_atom) check_atom:ret1

            (scan_atom) scan_atom:

             (check_literal) check_literal:lit=' %' idx=12 '5,6,7,8,9 '
             (check_literal) dropping space
             (check_literal) check_literal:After drop space:'%' idx=12 '5,6,7,8,9 '
             (check_literal)   '%' != '5'
             (check_literal) check_literal: ret0

             (check_literal) check_literal:lit=' "' idx=12 '5,6,7,8,9 '
             (check_literal) dropping space
             (check_literal) check_literal:After drop space:'"' idx=12 '5,6,7,8,9 '
             (check_literal)   '"' != '5'
             (check_literal) check_literal: ret0

             (check_number) check_number:

              (check_float) check_float:
              (isfloatdigit) isfloatdigit:
              (isfloatdigit) isfloatdigit:
              (check_float) check_float: ret0

              (check_integer) check_integer: '5,6,7,8,9 '
              (check_integer) check_integer:ret1
             (check_number) check_number: ret1

             (scan_number) scan_number:

              (check_float) check_float:
              (isfloatdigit) isfloatdigit:
              (isfloatdigit) isfloatdigit:
              (check_float) check_float: ret0

              (check_integer) check_integer: '5,6,7,8,9 '
              (check_integer) check_integer:ret1

              (scan_integer) scan_integer:
              (scan_integer) scan_integer:ret1
   Frst:0 T:'5' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U )] i i 5
             (scan_integer) scan_integer:ret1  5
            (scan_atom) scan_atom:ret1

            (check_eitem) check_eitem: ',6,7,8,9 '

             (check_operator) check_operator: ,6,7,8,9 

              (check_literal) check_literal:lit=',' idx=13 ',6,7,8,9 '
              (check_literal) check_literal:After drop space:',' idx=13 ',6,7,8,9 '
              (check_literal) check_literal:After while():6,7,8,9 
              (check_literal) check_literal:ret1 

              (scan_literal) scan_literal:lit=',' ',6,7,8,9 '
              (scan_literal) scan_literal:After drop space:,6,7,8,9 
              (scan_literal) scan_literal:while loop:,6,7,8,9 
   Frst:0 T:',' exptype:i
(output_sub_start)
              (scan_literal) scan_literal:ret1
             (check_eitem) check_eitem:ret1

             (scan_eitem) scan_eitem:

              (check_operator) check_operator: 6,7,8,9 

               (check_literal) check_literal:lit=',' idx=14 '6,7,8,9 '
               (check_literal) check_literal:After drop space:',' idx=14 '6,7,8,9 '
               (check_literal)   ',' != '6'
               (check_literal) check_literal: ret0
              (check_operator) check_operator:ret0

              (check_function) check_function: '6,7,8,9 '
              (check_function) check_function: ret0

              (check_atom) check_atom:

               (check_literal) check_literal:lit=' %' idx=14 '6,7,8,9 '
               (check_literal) dropping space
               (check_literal) check_literal:After drop space:'%' idx=14 '6,7,8,9 '
               (check_literal)   '%' != '6'
               (check_literal) check_literal: ret0

               (check_literal) check_literal:lit=' "' idx=14 '6,7,8,9 '
               (check_literal) dropping space
               (check_literal) check_literal:After drop space:'"' idx=14 '6,7,8,9 '
               (check_literal)   '"' != '6'
               (check_literal) check_literal: ret0

               (check_number) check_number:

                (check_float) check_float:
                (isfloatdigit) isfloatdigit:
                (isfloatdigit) isfloatdigit:
                (check_float) check_float: ret0

                (check_integer) check_integer: '6,7,8,9 '
                (check_integer) check_integer:ret1
               (check_number) check_number: ret1
              (check_atom) check_atom:ret1

              (scan_atom) scan_atom:

               (check_literal) check_literal:lit=' %' idx=14 '6,7,8,9 '
               (check_literal) dropping space
               (check_literal) check_literal:After drop space:'%' idx=14 '6,7,8,9 '
               (check_literal)   '%' != '6'
               (check_literal) check_literal: ret0

               (check_literal) check_literal:lit=' "' idx=14 '6,7,8,9 '
               (check_literal) dropping space
               (check_literal) check_literal:After drop space:'"' idx=14 '6,7,8,9 '
               (check_literal)   '"' != '6'
               (check_literal) check_literal: ret0

               (check_number) check_number:

                (check_float) check_float:
                (isfloatdigit) isfloatdigit:
                (isfloatdigit) isfloatdigit:
                (check_float) check_float: ret0

                (check_integer) check_integer: '6,7,8,9 '
                (check_integer) check_integer:ret1
               (check_number) check_number: ret1

               (scan_number) scan_number:

                (check_float) check_float:
                (isfloatdigit) isfloatdigit:
                (isfloatdigit) isfloatdigit:
                (check_float) check_float: ret0

                (check_integer) check_integer: '6,7,8,9 '
                (check_integer) check_integer:ret1

                (scan_integer) scan_integer:
                (scan_integer) scan_integer:ret1
   Frst:0 T:'6' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U )] i i 6
               (scan_integer) scan_integer:ret1  6
              (scan_atom) scan_atom:ret1

              (check_eitem) check_eitem: ',7,8,9 '

               (check_operator) check_operator: ,7,8,9 

                (check_literal) check_literal:lit=',' idx=15 ',7,8,9 '
                (check_literal) check_literal:After drop space:',' idx=15 ',7,8,9 '
                (check_literal) check_literal:After while():7,8,9 
                (check_literal) check_literal:ret1 

                (scan_literal) scan_literal:lit=',' ',7,8,9 '
                (scan_literal) scan_literal:After drop space:,7,8,9 
                (scan_literal) scan_literal:while loop:,7,8,9 
   Frst:0 T:',' exptype:i
(output_sub_start)
                (scan_literal) scan_literal:ret1
               (check_eitem) check_eitem:ret1

               (scan_eitem) scan_eitem:

                (check_operator) check_operator: 7,8,9 

                 (check_literal) check_literal:lit=',' idx=16 '7,8,9 '
                 (check_literal) check_literal:After drop space:',' idx=16 '7,8,9 '
                 (check_literal)   ',' != '7'
                 (check_literal) check_literal: ret0
                (check_operator) check_operator:ret0

                (check_function) check_function: '7,8,9 '
                (check_function) check_function: ret0

                (check_atom) check_atom:

                 (check_literal) check_literal:lit=' %' idx=16 '7,8,9 '
                 (check_literal) dropping space
                 (check_literal) check_literal:After drop space:'%' idx=16 '7,8,9 '
                 (check_literal)   '%' != '7'
                 (check_literal) check_literal: ret0

                 (check_literal) check_literal:lit=' "' idx=16 '7,8,9 '
                 (check_literal) dropping space
                 (check_literal) check_literal:After drop space:'"' idx=16 '7,8,9 '
                 (check_literal)   '"' != '7'
                 (check_literal) check_literal: ret0

                 (check_number) check_number:

                  (check_float) check_float:
                  (isfloatdigit) isfloatdigit:
                  (isfloatdigit) isfloatdigit:
                  (check_float) check_float: ret0

                  (check_integer) check_integer: '7,8,9 '
                  (check_integer) check_integer:ret1
                 (check_number) check_number: ret1
                (check_atom) check_atom:ret1

                (scan_atom) scan_atom:

                 (check_literal) check_literal:lit=' %' idx=16 '7,8,9 '
                 (check_literal) dropping space
                 (check_literal) check_literal:After drop space:'%' idx=16 '7,8,9 '
                 (check_literal)   '%' != '7'
                 (check_literal) check_literal: ret0

                 (check_literal) check_literal:lit=' "' idx=16 '7,8,9 '
                 (check_literal) dropping space
                 (check_literal) check_literal:After drop space:'"' idx=16 '7,8,9 '
                 (check_literal)   '"' != '7'
                 (check_literal) check_literal: ret0

                 (check_number) check_number:

                  (check_float) check_float:
                  (isfloatdigit) isfloatdigit:
                  (isfloatdigit) isfloatdigit:
                  (check_float) check_float: ret0

                  (check_integer) check_integer: '7,8,9 '
                  (check_integer) check_integer:ret1
                 (check_number) check_number: ret1

                 (scan_number) scan_number:

                  (check_float) check_float:
                  (isfloatdigit) isfloatdigit:
                  (isfloatdigit) isfloatdigit:
                  (check_float) check_float: ret0

                  (check_integer) check_integer: '7,8,9 '
                  (check_integer) check_integer:ret1

                  (scan_integer) scan_integer:
                  (scan_integer) scan_integer:ret1
   Frst:0 T:'7' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U )] i i 7
                 (scan_integer) scan_integer:ret1  7
                (scan_atom) scan_atom:ret1

                (check_eitem) check_eitem: ',8,9 '

                 (check_operator) check_operator: ,8,9 

                  (check_literal) check_literal:lit=',' idx=17 ',8,9 '
                  (check_literal) check_literal:After drop space:',' idx=17 ',8,9 '
                  (check_literal) check_literal:After while():8,9 
                  (check_literal) check_literal:ret1 

                  (scan_literal) scan_literal:lit=',' ',8,9 '
                  (scan_literal) scan_literal:After drop space:,8,9 
                  (scan_literal) scan_literal:while loop:,8,9 
   Frst:0 T:',' exptype:i
(output_sub_start)
                  (scan_literal) scan_literal:ret1
                 (check_eitem) check_eitem:ret1

                 (scan_eitem) scan_eitem:

                  (check_operator) check_operator: 8,9 

                   (check_literal) check_literal:lit=',' idx=18 '8,9 '
                   (check_literal) check_literal:After drop space:',' idx=18 '8,9 '
                   (check_literal)   ',' != '8'
                   (check_literal) check_literal: ret0
                  (check_operator) check_operator:ret0

                  (check_function) check_function: '8,9 '
                  (check_function) check_function: ret0

                  (check_atom) check_atom:

                   (check_literal) check_literal:lit=' %' idx=18 '8,9 '
                   (check_literal) dropping space
                   (check_literal) check_literal:After drop space:'%' idx=18 '8,9 '
                   (check_literal)   '%' != '8'
                   (check_literal) check_literal: ret0

                   (check_literal) check_literal:lit=' "' idx=18 '8,9 '
                   (check_literal) dropping space
                   (check_literal) check_literal:After drop space:'"' idx=18 '8,9 '
                   (check_literal)   '"' != '8'
                   (check_literal) check_literal: ret0

                   (check_number) check_number:

                    (check_float) check_float:
                    (isfloatdigit) isfloatdigit:
                    (isfloatdigit) isfloatdigit:
                    (check_float) check_float: ret0

                    (check_integer) check_integer: '8,9 '
                    (check_integer) check_integer:ret1
                   (check_number) check_number: ret1
                  (check_atom) check_atom:ret1

                  (scan_atom) scan_atom:

                   (check_literal) check_literal:lit=' %' idx=18 '8,9 '
                   (check_literal) dropping space
                   (check_literal) check_literal:After drop space:'%' idx=18 '8,9 '
                   (check_literal)   '%' != '8'
                   (check_literal) check_literal: ret0

                   (check_literal) check_literal:lit=' "' idx=18 '8,9 '
                   (check_literal) dropping space
                   (check_literal) check_literal:After drop space:'"' idx=18 '8,9 '
                   (check_literal)   '"' != '8'
                   (check_literal) check_literal: ret0

                   (check_number) check_number:

                    (check_float) check_float:
                    (isfloatdigit) isfloatdigit:
                    (isfloatdigit) isfloatdigit:
                    (check_float) check_float: ret0

                    (check_integer) check_integer: '8,9 '
                    (check_integer) check_integer:ret1
                   (check_number) check_number: ret1

                   (scan_number) scan_number:

                    (check_float) check_float:
                    (isfloatdigit) isfloatdigit:
                    (isfloatdigit) isfloatdigit:
                    (check_float) check_float: ret0

                    (check_integer) check_integer: '8,9 '
                    (check_integer) check_integer:ret1

                    (scan_integer) scan_integer:
                    (scan_integer) scan_integer:ret1
   Frst:0 T:'8' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U )] i i 8
                   (scan_integer) scan_integer:ret1  8
                  (scan_atom) scan_atom:ret1

                  (check_eitem) check_eitem: ',9 '

                   (check_operator) check_operator: ,9 

                    (check_literal) check_literal:lit=',' idx=19 ',9 '
                    (check_literal) check_literal:After drop space:',' idx=19 ',9 '
                    (check_literal) check_literal:After while():9 
                    (check_literal) check_literal:ret1 

                    (scan_literal) scan_literal:lit=',' ',9 '
                    (scan_literal) scan_literal:After drop space:,9 
                    (scan_literal) scan_literal:while loop:,9 
   Frst:0 T:',' exptype:i
(output_sub_start)
                    (scan_literal) scan_literal:ret1
                   (check_eitem) check_eitem:ret1

                   (scan_eitem) scan_eitem:

                    (check_operator) check_operator: 9 

                     (check_literal) check_literal:lit=',' idx=20 '9 '
                     (check_literal) check_literal:After drop space:',' idx=20 '9 '
                     (check_literal)   ',' != '9'
                     (check_literal) check_literal: ret0
                    (check_operator) check_operator:ret0

                    (check_function) check_function: '9 '
                    (check_function) check_function: ret0

                    (check_atom) check_atom:

                     (check_literal) check_literal:lit=' %' idx=20 '9 '
                     (check_literal) dropping space
                     (check_literal) check_literal:After drop space:'%' idx=20 '9 '
                     (check_literal)   '%' != '9'
                     (check_literal) check_literal: ret0

                     (check_literal) check_literal:lit=' "' idx=20 '9 '
                     (check_literal) dropping space
                     (check_literal) check_literal:After drop space:'"' idx=20 '9 '
                     (check_literal)   '"' != '9'
                     (check_literal) check_literal: ret0

                     (check_number) check_number:

                      (check_float) check_float:
                      (isfloatdigit) isfloatdigit:
                      (isfloatdigit) isfloatdigit:
                      (check_float) check_float: ret0

                      (check_integer) check_integer: '9 '
                      (check_integer) check_integer:ret1
                     (check_number) check_number: ret1
                    (check_atom) check_atom:ret1

                    (scan_atom) scan_atom:

                     (check_literal) check_literal:lit=' %' idx=20 '9 '
                     (check_literal) dropping space
                     (check_literal) check_literal:After drop space:'%' idx=20 '9 '
                     (check_literal)   '%' != '9'
                     (check_literal) check_literal: ret0

                     (check_literal) check_literal:lit=' "' idx=20 '9 '
                     (check_literal) dropping space
                     (check_literal) check_literal:After drop space:'"' idx=20 '9 '
                     (check_literal)   '"' != '9'
                     (check_literal) check_literal: ret0

                     (check_number) check_number:

                      (check_float) check_float:
                      (isfloatdigit) isfloatdigit:
                      (isfloatdigit) isfloatdigit:
                      (check_float) check_float: ret0

                      (check_integer) check_integer: '9 '
                      (check_integer) check_integer:ret1
                     (check_number) check_number: ret1

                     (scan_number) scan_number:

                      (check_float) check_float:
                      (isfloatdigit) isfloatdigit:
                      (isfloatdigit) isfloatdigit:
                      (check_float) check_float: ret0

                      (check_integer) check_integer: '9 '
                      (check_integer) check_integer:ret1

                      (scan_integer) scan_integer:
                      (scan_integer) scan_integer:ret1
   Frst:0 T:'9' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U )] i i 9
                     (scan_integer) scan_integer:ret1  9
                    (scan_atom) scan_atom:ret1

                    (check_eitem) check_eitem: ' '

                     (check_operator) check_operator:  

                      (check_literal) check_literal:lit=',' idx=22 ''
                      (check_literal) check_literal:After drop space:',' idx=22 ''
                      (check_literal) check_literal  ret0 Empty test string
                     (check_operator) check_operator:ret0

                     (check_function) check_function: ''
                     (check_function) check_function: ret0

                     (check_atom) check_atom:

                      (check_literal) check_literal:lit=' %' idx=21 ' '
                      (check_literal) dropping space
                      (check_literal) check_literal:After drop space:'%' idx=22 ''
                      (check_literal) check_literal  ret0 Empty test string

                      (check_literal) check_literal:lit=' "' idx=21 ' '
                      (check_literal) dropping space
                      (check_literal) check_literal:After drop space:'"' idx=22 ''
                      (check_literal) check_literal  ret0 Empty test string

                      (check_number) check_number:

                       (check_float) check_float:
                       (isfloatdigit) isfloatdigit:
                       (check_float) check_float: ret0

                       (check_integer) check_integer: ''
                       (check_integer) check_integer:ret0
                      (check_number) check_number: ret0

                      (check_variable) check_variable:

                       (check_vname) check_vname '':
                       (check_vname) check_vname ret0 '':
                      (check_variable) check_variable:ret0 
                     (check_atom) check_atom:ret1

                     (check_sub_expr) check_sub_expr:

                      (check_literal) check_literal:lit=' (' idx=21 ' '
                      (check_literal) dropping space
                      (check_literal) check_literal:After drop space:'(' idx=22 ''
                      (check_literal) check_literal  ret0 Empty test string
                     (check_sub_expr) check_sub_expr: ret0
                    (check_eitem) check_eitem:ret0
                   (scan_expression) scan_expression: ret1 ' '
                  (scan_command) scan_command: ret1 =>'UDG'
                 (scan_command) 
ENDEXP
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
                 (op_stack_print) 
------------------
                 (op_stack_print) 
Operator Stack     (1)

                 (op_stack_print) 
000: UDG type:17
                 (op_stack_print) 
------------------

(  output_sub_end)
                 (token_is_function) 
token_is_function:
                 (token_is_function) UDG is function
Pop 5
Pop 'UDG'
                 (op_stack_print) 
------------------
                 (op_stack_print) 
Operator Stack     (0)

                 (op_stack_print) 
------------------

( output_function) [i,(U )] v v UDG
(  output_sub_end)
Finalise stack
                 (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '1'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '4'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '5'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '6'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '7'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '8'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '9'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'UDG'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
 BE:

Type Check Stack (0)

 BE:1
type_check_stack_push: '1'
                 (type_check_stack_print) 
------------------
                 (type_check_stack_print) 
Type Check Stack     (1)

                 (type_check_stack_print) 
000: '1' type:0
                 (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '1' type:i (0)
 BE:

Type Check Stack (1)

000: '1' type:i (0)
 BE:2
type_check_stack_push: '2'
                 (type_check_stack_print) 
------------------
                 (type_check_stack_print) 
Type Check Stack     (2)

                 (type_check_stack_print) 
000: '1' type:0
                 (type_check_stack_print) 
001: '2' type:0
                 (type_check_stack_print) 
------------------


Type Check Stack (2)

000: '1' type:i (0)
001: '2' type:i (0)
 BE:

Type Check Stack (2)

000: '1' type:i (0)
001: '2' type:i (0)
 BE:3
type_check_stack_push: '3'
                 (type_check_stack_print) 
------------------
                 (type_check_stack_print) 
Type Check Stack     (3)

                 (type_check_stack_print) 
000: '1' type:0
                 (type_check_stack_print) 
001: '2' type:0
                 (type_check_stack_print) 
002: '3' type:0
                 (type_check_stack_print) 
------------------


Type Check Stack (3)

000: '1' type:i (0)
001: '2' type:i (0)
002: '3' type:i (0)
 BE:

Type Check Stack (3)

000: '1' type:i (0)
001: '2' type:i (0)
002: '3' type:i (0)
 BE:4
type_check_stack_push: '4'
                 (type_check_stack_print) 
------------------
                 (type_check_stack_print) 
Type Check Stack     (4)

                 (type_check_stack_print) 
000: '1' type:0
                 (type_check_stack_print) 
001: '2' type:0
                 (type_check_stack_print) 
002: '3' type:0
                 (type_check_stack_print) 
003: '4' type:0
                 (type_check_stack_print) 
------------------


Type Check Stack (4)

000: '1' type:i (0)
001: '2' type:i (0)
002: '3' type:i (0)
003: '4' type:i (0)
 BE:

Type Check Stack (4)

000: '1' type:i (0)
001: '2' type:i (0)
002: '3' type:i (0)
003: '4' type:i (0)
 BE:5
type_check_stack_push: '5'
                 (type_check_stack_print) 
------------------
                 (type_check_stack_print) 
Type Check Stack     (5)

                 (type_check_stack_print) 
000: '1' type:0
                 (type_check_stack_print) 
001: '2' type:0
                 (type_check_stack_print) 
002: '3' type:0
                 (type_check_stack_print) 
003: '4' type:0
                 (type_check_stack_print) 
004: '5' type:0
                 (type_check_stack_print) 
------------------


Type Check Stack (5)

000: '1' type:i (0)
001: '2' type:i (0)
002: '3' type:i (0)
003: '4' type:i (0)
004: '5' type:i (0)
 BE:

Type Check Stack (5)

000: '1' type:i (0)
001: '2' type:i (0)
002: '3' type:i (0)
003: '4' type:i (0)
004: '5' type:i (0)
 BE:6
type_check_stack_push: '6'
                 (type_check_stack_print) 
------------------
                 (type_check_stack_print) 
Type Check Stack     (6)

                 (type_check_stack_print) 
000: '1' type:0
                 (type_check_stack_print) 
001: '2' type:0
                 (type_check_stack_print) 
002: '3' type:0
                 (type_check_stack_print) 
003: '4' type:0
                 (type_check_stack_print) 
004: '5' type:0
                 (type_check_stack_print) 
005: '6' type:0
                 (type_check_stack_print) 
------------------


Type Check Stack (6)

000: '1' type:i (0)
001: '2' type:i (0)
002: '3' type:i (0)
003: '4' type:i (0)
004: '5' type:i (0)
005: '6' type:i (0)
 BE:

Type Check Stack (6)

000: '1' type:i (0)
001: '2' type:i (0)
002: '3' type:i (0)
003: '4' type:i (0)
004: '5' type:i (0)
005: '6' type:i (0)
 BE:7
type_check_stack_push: '7'
                 (type_check_stack_print) 
------------------
                 (type_check_stack_print) 
Type Check Stack     (7)

                 (type_check_stack_print) 
000: '1' type:0
                 (type_check_stack_print) 
001: '2' type:0
                 (type_check_stack_print) 
002: '3' type:0
                 (type_check_stack_print) 
003: '4' type:0
                 (type_check_stack_print) 
004: '5' type:0
                 (type_check_stack_print) 
005: '6' type:0
                 (type_check_stack_print) 
006: '7' type:0
                 (type_check_stack_print) 
------------------


Type Check Stack (7)

000: '1' type:i (0)
001: '2' type:i (0)
002: '3' type:i (0)
003: '4' type:i (0)
004: '5' type:i (0)
005: '6' type:i (0)
006: '7' type:i (0)
 BE:

Type Check Stack (7)

000: '1' type:i (0)
001: '2' type:i (0)
002: '3' type:i (0)
003: '4' type:i (0)
004: '5' type:i (0)
005: '6' type:i (0)
006: '7' type:i (0)
 BE:8
type_check_stack_push: '8'
                 (type_check_stack_print) 
------------------
                 (type_check_stack_print) 
Type Check Stack     (8)

                 (type_check_stack_print) 
000: '1' type:0
                 (type_check_stack_print) 
001: '2' type:0
                 (type_check_stack_print) 
002: '3' type:0
                 (type_check_stack_print) 
003: '4' type:0
                 (type_check_stack_print) 
004: '5' type:0
                 (type_check_stack_print) 
005: '6' type:0
                 (type_check_stack_print) 
006: '7' type:0
                 (type_check_stack_print) 
007: '8' type:0
                 (type_check_stack_print) 
------------------


Type Check Stack (8)

000: '1' type:i (0)
001: '2' type:i (0)
002: '3' type:i (0)
003: '4' type:i (0)
004: '5' type:i (0)
005: '6' type:i (0)
006: '7' type:i (0)
007: '8' type:i (0)
 BE:

Type Check Stack (8)

000: '1' type:i (0)
001: '2' type:i (0)
002: '3' type:i (0)
003: '4' type:i (0)
004: '5' type:i (0)
005: '6' type:i (0)
006: '7' type:i (0)
007: '8' type:i (0)
 BE:9
type_check_stack_push: '9'
                 (type_check_stack_print) 
------------------
                 (type_check_stack_print) 
Type Check Stack     (9)

                 (type_check_stack_print) 
000: '1' type:0
                 (type_check_stack_print) 
001: '2' type:0
                 (type_check_stack_print) 
002: '3' type:0
                 (type_check_stack_print) 
003: '4' type:0
                 (type_check_stack_print) 
004: '5' type:0
                 (type_check_stack_print) 
005: '6' type:0
                 (type_check_stack_print) 
006: '7' type:0
                 (type_check_stack_print) 
007: '8' type:0
                 (type_check_stack_print) 
008: '9' type:0
                 (type_check_stack_print) 
------------------


Type Check Stack (9)

000: '1' type:i (0)
001: '2' type:i (0)
002: '3' type:i (0)
003: '4' type:i (0)
004: '5' type:i (0)
005: '6' type:i (0)
006: '7' type:i (0)
007: '8' type:i (0)
008: '9' type:i (0)
 BE:

Type Check Stack (9)

000: '1' type:i (0)
001: '2' type:i (0)
002: '3' type:i (0)
003: '4' type:i (0)
004: '5' type:i (0)
005: '6' type:i (0)
006: '7' type:i (0)
007: '8' type:i (0)
008: '9' type:i (0)
 BE:UDG
FN: 9 args
                 (function_return_type) 
function_return_type: 'UDG' =>v
                 (function_return_type) 
function_return_type: 'UDG' =>17
ret_type;17 v
typecheck_expression:Ret type of UDG : v
type_check_stack_pop: '9'
                 (type_check_stack_print) 
------------------
                 (type_check_stack_print) 
Type Check Stack     (8)

                 (type_check_stack_print) 
000: '1' type:0
                 (type_check_stack_print) 
001: '2' type:0
                 (type_check_stack_print) 
002: '3' type:0
                 (type_check_stack_print) 
003: '4' type:0
                 (type_check_stack_print) 
004: '5' type:0
                 (type_check_stack_print) 
005: '6' type:0
                 (type_check_stack_print) 
006: '7' type:0
                 (type_check_stack_print) 
007: '8' type:0
                 (type_check_stack_print) 
------------------

FN ARG 8 ri 9 0(i)  Arg ok
type_check_stack_pop: '8'
                 (type_check_stack_print) 
------------------
                 (type_check_stack_print) 
Type Check Stack     (7)

                 (type_check_stack_print) 
000: '1' type:0
                 (type_check_stack_print) 
001: '2' type:0
                 (type_check_stack_print) 
002: '3' type:0
                 (type_check_stack_print) 
003: '4' type:0
                 (type_check_stack_print) 
004: '5' type:0
                 (type_check_stack_print) 
005: '6' type:0
                 (type_check_stack_print) 
006: '7' type:0
                 (type_check_stack_print) 
------------------

FN ARG 7 ri 8 0(i)  Arg ok
type_check_stack_pop: '7'
                 (type_check_stack_print) 
------------------
                 (type_check_stack_print) 
Type Check Stack     (6)

                 (type_check_stack_print) 
000: '1' type:0
                 (type_check_stack_print) 
001: '2' type:0
                 (type_check_stack_print) 
002: '3' type:0
                 (type_check_stack_print) 
003: '4' type:0
                 (type_check_stack_print) 
004: '5' type:0
                 (type_check_stack_print) 
005: '6' type:0
                 (type_check_stack_print) 
------------------

FN ARG 6 ri 7 0(i)  Arg ok
type_check_stack_pop: '6'
                 (type_check_stack_print) 
------------------
                 (type_check_stack_print) 
Type Check Stack     (5)

                 (type_check_stack_print) 
000: '1' type:0
                 (type_check_stack_print) 
001: '2' type:0
                 (type_check_stack_print) 
002: '3' type:0
                 (type_check_stack_print) 
003: '4' type:0
                 (type_check_stack_print) 
004: '5' type:0
                 (type_check_stack_print) 
------------------

FN ARG 5 ri 6 0(i)  Arg ok
type_check_stack_pop: '5'
                 (type_check_stack_print) 
------------------
                 (type_check_stack_print) 
Type Check Stack     (4)

                 (type_check_stack_print) 
000: '1' type:0
                 (type_check_stack_print) 
001: '2' type:0
                 (type_check_stack_print) 
002: '3' type:0
                 (type_check_stack_print) 
003: '4' type:0
                 (type_check_stack_print) 
------------------

FN ARG 4 ri 5 0(i)  Arg ok
type_check_stack_pop: '4'
                 (type_check_stack_print) 
------------------
                 (type_check_stack_print) 
Type Check Stack     (3)

                 (type_check_stack_print) 
000: '1' type:0
                 (type_check_stack_print) 
001: '2' type:0
                 (type_check_stack_print) 
002: '3' type:0
                 (type_check_stack_print) 
------------------

FN ARG 3 ri 4 0(i)  Arg ok
type_check_stack_pop: '3'
                 (type_check_stack_print) 
------------------
                 (type_check_stack_print) 
Type Check Stack     (2)

                 (type_check_stack_print) 
000: '1' type:0
                 (type_check_stack_print) 
001: '2' type:0
                 (type_check_stack_print) 
------------------

FN ARG 2 ri 3 0(i)  Arg ok
type_check_stack_pop: '2'
                 (type_check_stack_print) 
------------------
                 (type_check_stack_print) 
Type Check Stack     (1)

                 (type_check_stack_print) 
000: '1' type:0
                 (type_check_stack_print) 
------------------

FN ARG 1 ri 2 0(i)  Arg ok
type_check_stack_pop: '1'
                 (type_check_stack_print) 
------------------
                 (type_check_stack_print) 
Type Check Stack     (0)

                 (type_check_stack_print) 
------------------

FN ARG 0 ri 1 0(i)  Arg ok
type_check_stack_push: '000'
                 (type_check_stack_print) 
------------------
                 (type_check_stack_print) 
Type Check Stack     (1)

                 (type_check_stack_print) 
000: '000' type:17
                 (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '1'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '4'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '5'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '6'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '7'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '8'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '9'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'UDG'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i '1'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_INTEGER      i rq:i '4'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_INTEGER      i rq:i '5'  0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N12 EXP_BUFF_ID_INTEGER      i rq:i '6'  0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_INTEGER      i rq:i '7'  0:
(dump_exp_buffer2) N15 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N16 EXP_BUFF_ID_INTEGER      i rq:i '8'  0:
(dump_exp_buffer2) N17 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N18 EXP_BUFF_ID_INTEGER      i rq:i '9'  0:
(dump_exp_buffer2) N19 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N20 EXP_BUFF_ID_FUNCTION     v rq:v 'UDG'  0:
(dump_exp_buffer2) N21 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
                 (process_expression_types) 
==INFIX==

infix_stack_push: '1'
infix_stack_push: '2'
infix_stack_push: '3'
infix_stack_push: '4'
infix_stack_push: '5'
infix_stack_push: '6'
infix_stack_push: '7'
infix_stack_push: '8'
infix_stack_push: '9'
infix_stack_pop: '9'
infix_stack_pop: '8'
infix_stack_pop: '7'
infix_stack_pop: '6'
infix_stack_pop: '5'
infix_stack_pop: '4'
infix_stack_pop: '3'
infix_stack_pop: '2'
infix_stack_pop: '1'
infix_stack_push: 'UDG(1 2 3 4 5 6 7 8 9 )'
infix_stack_pop: 'UDG(1 2 3 4 5 6 7 8 9 )'
                 (process_expression_types) ==UDG(1 2 3 4 5 6 7 8 9 )==
                 (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_INTEGER      i rq:i 1  0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N4 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(    output_qcode) N7 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N8 EXP_BUFF_ID_INTEGER      i rq:i 4  0:
(    output_qcode) N9 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N10 EXP_BUFF_ID_INTEGER      i rq:i 5  0:
(    output_qcode) N11 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N12 EXP_BUFF_ID_INTEGER      i rq:i 6  0:
(    output_qcode) N13 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N14 EXP_BUFF_ID_INTEGER      i rq:i 7  0:
(    output_qcode) N15 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N16 EXP_BUFF_ID_INTEGER      i rq:i 8  0:
(    output_qcode) N17 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N18 EXP_BUFF_ID_INTEGER      i rq:i 9  0:
(    output_qcode) N19 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N20 EXP_BUFF_ID_FUNCTION     v rq:v UDG  0:
(    output_qcode) N21 EXP_BUFF_ID_SUB_END      U rq:i   0:

                  (check_literal) check_literal:lit=':' idx=22 ''
                  (check_literal) check_literal:After drop space:':' idx=22 ''
                  (check_literal) check_literal  ret0 Empty test string
                 (translate_file) 
cline scanned OK
*****************************************
**UDG 1,2.3, 3.4, 5.6, 7, 8, 9, 10, 11 **
*****************************************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'UDG 1,2.3, 3.4, 5.6, 7, 8, 9, 10, 11 ':
     (check_vname) check_vname ret1 ' 1,2.3, 3.4, 5.6, 7, 8, 9, 10, 11 ':
    (check_variable) check_variable: ' 1,2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
    (check_variable) check_variable: Ary test ' 1,2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '

     (check_literal) check_literal:lit='(' idx=3 ' 1,2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
     (check_literal) check_literal:After drop space:'(' idx=3 ' 1,2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=3 ' 1,2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=4 '1,2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
   (check_literal)   '=' != '1'
   (check_literal) check_literal: ret0
  (check_assignment) check_assignment:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) check_textlabel: 'UDG 1,2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
   (check_textlabel) check_textlabel:ret0
  (check_proc_call) check_proc_call:ret0

  (check_command) check_command:
  (check_command) check_command: ret1 found=> 'UDG'
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=34, ' 1,2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
========================================================
UDG 1,2.3, 3.4, 5.6, 7, 8, 9, 10, 11 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'UDG 1,2.3, 3.4, 5.6, 7, 8, 9, 10, 11 ':
    (check_vname) check_vname ret1 ' 1,2.3, 3.4, 5.6, 7, 8, 9, 10, 11 ':
   (check_variable) check_variable: ' 1,2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
   (check_variable) check_variable: Ary test ' 1,2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '

    (check_literal) check_literal:lit='(' idx=3 ' 1,2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
    (check_literal) check_literal:After drop space:'(' idx=3 ' 1,2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=3 ' 1,2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=4 '1,2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
  (check_literal)   '=' != '1'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'UDG 1,2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'UDG'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'UDG' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) UDG is function
 (function_return_type) 
function_return_type: 'UDG' =>v
 (function_return_type) 
function_return_type: 'UDG' =>17
process_token: 'UDG' t=>v
 Push:'UDG'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: UDG type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: UDG type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' 1,2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '

   (check_eitem) check_eitem: '1,2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '

    (check_operator) check_operator: 1,2.3, 3.4, 5.6, 7, 8, 9, 10, 11 

     (check_literal) check_literal:lit=',' idx=4 '1,2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
     (check_literal) check_literal:After drop space:',' idx=4 '1,2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
     (check_literal)   ',' != '1'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: '1,2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=4 '1,2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=4 '1,2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
     (check_literal)   '%' != '1'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=4 '1,2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=4 '1,2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
     (check_literal)   '"' != '1'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '1,2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (scan_eitem) scan_eitem:

    (check_operator) check_operator: 1,2.3, 3.4, 5.6, 7, 8, 9, 10, 11 

     (check_literal) check_literal:lit=',' idx=4 '1,2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
     (check_literal) check_literal:After drop space:',' idx=4 '1,2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
     (check_literal)   ',' != '1'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: '1,2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=4 '1,2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=4 '1,2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
     (check_literal)   '%' != '1'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=4 '1,2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=4 '1,2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
     (check_literal)   '"' != '1'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '1,2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1

    (scan_atom) scan_atom:

     (check_literal) check_literal:lit=' %' idx=4 '1,2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=4 '1,2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
     (check_literal)   '%' != '1'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=4 '1,2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=4 '1,2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
     (check_literal)   '"' != '1'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '1,2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1

     (scan_number) scan_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '1,2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
      (check_integer) check_integer:ret1

      (scan_integer) scan_integer:
      (scan_integer) scan_integer:ret1
   Frst:0 T:'1' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U )] i i 1
     (scan_integer) scan_integer:ret1  1
    (scan_atom) scan_atom:ret1

    (check_eitem) check_eitem: ',2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '

     (check_operator) check_operator: ,2.3, 3.4, 5.6, 7, 8, 9, 10, 11 

      (check_literal) check_literal:lit=',' idx=5 ',2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
      (check_literal) check_literal:After drop space:',' idx=5 ',2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
      (check_literal) check_literal:After while():2.3, 3.4, 5.6, 7, 8, 9, 10, 11 
      (check_literal) check_literal:ret1 

      (scan_literal) scan_literal:lit=',' ',2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
      (scan_literal) scan_literal:After drop space:,2.3, 3.4, 5.6, 7, 8, 9, 10, 11 
      (scan_literal) scan_literal:while loop:,2.3, 3.4, 5.6, 7, 8, 9, 10, 11 
   Frst:0 T:',' exptype:i
(output_sub_start)
      (scan_literal) scan_literal:ret1
     (check_eitem) check_eitem:ret1

     (scan_eitem) scan_eitem:

      (check_operator) check_operator: 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 

       (check_literal) check_literal:lit=',' idx=6 '2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
       (check_literal) check_literal:After drop space:',' idx=6 '2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
       (check_literal)   ',' != '2'
       (check_literal) check_literal: ret0
      (check_operator) check_operator:ret0

      (check_function) check_function: '2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=6 '2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=6 '2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
       (check_literal)   '%' != '2'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=6 '2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=6 '2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
       (check_literal)   '"' != '2'
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret1
       (check_number) check_number: ret1
      (check_atom) check_atom:ret1

      (scan_atom) scan_atom:

       (check_literal) check_literal:lit=' %' idx=6 '2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=6 '2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
       (check_literal)   '%' != '2'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=6 '2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=6 '2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
       (check_literal)   '"' != '2'
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret1
       (check_number) check_number: ret1

       (scan_number) scan_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret1

        (scan_float) scan_float:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (scan_float) scan_float: ret1
   Frst:0 T:'2.3' exptype:U
modify_expression_type:Inittype:U Intype:f Outtype:f
(    output_float) [f,(U )] f f 2.3
       (scan_atom) scan_atom:ret1

       (check_eitem) check_eitem: ', 3.4, 5.6, 7, 8, 9, 10, 11 '

        (check_operator) check_operator: , 3.4, 5.6, 7, 8, 9, 10, 11 

         (check_literal) check_literal:lit=',' idx=9 ', 3.4, 5.6, 7, 8, 9, 10, 11 '
         (check_literal) check_literal:After drop space:',' idx=9 ', 3.4, 5.6, 7, 8, 9, 10, 11 '
         (check_literal) check_literal:After while(): 3.4, 5.6, 7, 8, 9, 10, 11 
         (check_literal) check_literal:ret1 

         (scan_literal) scan_literal:lit=',' ', 3.4, 5.6, 7, 8, 9, 10, 11 '
         (scan_literal) scan_literal:After drop space:, 3.4, 5.6, 7, 8, 9, 10, 11 
         (scan_literal) scan_literal:while loop:, 3.4, 5.6, 7, 8, 9, 10, 11 
   Frst:0 T:',' exptype:f
(output_sub_start)
         (scan_literal) scan_literal:ret1
        (check_eitem) check_eitem:ret1

        (scan_eitem) scan_eitem:

         (check_operator) check_operator:  3.4, 5.6, 7, 8, 9, 10, 11 

          (check_literal) check_literal:lit=',' idx=11 '3.4, 5.6, 7, 8, 9, 10, 11 '
          (check_literal) check_literal:After drop space:',' idx=11 '3.4, 5.6, 7, 8, 9, 10, 11 '
          (check_literal)   ',' != '3'
          (check_literal) check_literal: ret0
         (check_operator) check_operator:ret0

         (check_function) check_function: '3.4, 5.6, 7, 8, 9, 10, 11 '
         (check_function) check_function: ret0

         (check_atom) check_atom:

          (check_literal) check_literal:lit=' %' idx=10 ' 3.4, 5.6, 7, 8, 9, 10, 11 '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=11 '3.4, 5.6, 7, 8, 9, 10, 11 '
          (check_literal)   '%' != '3'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=10 ' 3.4, 5.6, 7, 8, 9, 10, 11 '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=11 '3.4, 5.6, 7, 8, 9, 10, 11 '
          (check_literal)   '"' != '3'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret1
          (check_number) check_number: ret1
         (check_atom) check_atom:ret1

         (scan_atom) scan_atom:

          (check_literal) check_literal:lit=' %' idx=10 ' 3.4, 5.6, 7, 8, 9, 10, 11 '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=11 '3.4, 5.6, 7, 8, 9, 10, 11 '
          (check_literal)   '%' != '3'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=10 ' 3.4, 5.6, 7, 8, 9, 10, 11 '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=11 '3.4, 5.6, 7, 8, 9, 10, 11 '
          (check_literal)   '"' != '3'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret1
          (check_number) check_number: ret1

          (scan_number) scan_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret1

           (scan_float) scan_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (scan_float) scan_float: ret1
   Frst:0 T:'3.4' exptype:U
modify_expression_type:Inittype:U Intype:f Outtype:f
(    output_float) [f,(U )] f f 3.4
          (scan_atom) scan_atom:ret1

          (check_eitem) check_eitem: ', 5.6, 7, 8, 9, 10, 11 '

           (check_operator) check_operator: , 5.6, 7, 8, 9, 10, 11 

            (check_literal) check_literal:lit=',' idx=14 ', 5.6, 7, 8, 9, 10, 11 '
            (check_literal) check_literal:After drop space:',' idx=14 ', 5.6, 7, 8, 9, 10, 11 '
            (check_literal) check_literal:After while(): 5.6, 7, 8, 9, 10, 11 
            (check_literal) check_literal:ret1 

            (scan_literal) scan_literal:lit=',' ', 5.6, 7, 8, 9, 10, 11 '
            (scan_literal) scan_literal:After drop space:, 5.6, 7, 8, 9, 10, 11 
            (scan_literal) scan_literal:while loop:, 5.6, 7, 8, 9, 10, 11 
   Frst:0 T:',' exptype:f
(output_sub_start)
            (scan_literal) scan_literal:ret1
           (check_eitem) check_eitem:ret1

           (scan_eitem) scan_eitem:

            (check_operator) check_operator:  5.6, 7, 8, 9, 10, 11 

             (check_literal) check_literal:lit=',' idx=16 '5.6, 7, 8, 9, 10, 11 '
             (check_literal) check_literal:After drop space:',' idx=16 '5.6, 7, 8, 9, 10, 11 '
             (check_literal)   ',' != '5'
             (check_literal) check_literal: ret0
            (check_operator) check_operator:ret0

            (check_function) check_function: '5.6, 7, 8, 9, 10, 11 '
            (check_function) check_function: ret0

            (check_atom) check_atom:

             (check_literal) check_literal:lit=' %' idx=15 ' 5.6, 7, 8, 9, 10, 11 '
             (check_literal) dropping space
             (check_literal) check_literal:After drop space:'%' idx=16 '5.6, 7, 8, 9, 10, 11 '
             (check_literal)   '%' != '5'
             (check_literal) check_literal: ret0

             (check_literal) check_literal:lit=' "' idx=15 ' 5.6, 7, 8, 9, 10, 11 '
             (check_literal) dropping space
             (check_literal) check_literal:After drop space:'"' idx=16 '5.6, 7, 8, 9, 10, 11 '
             (check_literal)   '"' != '5'
             (check_literal) check_literal: ret0

             (check_number) check_number:

              (check_float) check_float:
              (isfloatdigit) isfloatdigit:
              (isfloatdigit) isfloatdigit:
              (isfloatdigit) isfloatdigit:
              (isfloatdigit) isfloatdigit:
              (check_float) check_float: ret1
             (check_number) check_number: ret1
            (check_atom) check_atom:ret1

            (scan_atom) scan_atom:

             (check_literal) check_literal:lit=' %' idx=15 ' 5.6, 7, 8, 9, 10, 11 '
             (check_literal) dropping space
             (check_literal) check_literal:After drop space:'%' idx=16 '5.6, 7, 8, 9, 10, 11 '
             (check_literal)   '%' != '5'
             (check_literal) check_literal: ret0

             (check_literal) check_literal:lit=' "' idx=15 ' 5.6, 7, 8, 9, 10, 11 '
             (check_literal) dropping space
             (check_literal) check_literal:After drop space:'"' idx=16 '5.6, 7, 8, 9, 10, 11 '
             (check_literal)   '"' != '5'
             (check_literal) check_literal: ret0

             (check_number) check_number:

              (check_float) check_float:
              (isfloatdigit) isfloatdigit:
              (isfloatdigit) isfloatdigit:
              (isfloatdigit) isfloatdigit:
              (isfloatdigit) isfloatdigit:
              (check_float) check_float: ret1
             (check_number) check_number: ret1

             (scan_number) scan_number:

              (check_float) check_float:
              (isfloatdigit) isfloatdigit:
              (isfloatdigit) isfloatdigit:
              (isfloatdigit) isfloatdigit:
              (isfloatdigit) isfloatdigit:
              (check_float) check_float: ret1

              (scan_float) scan_float:
              (isfloatdigit) isfloatdigit:
              (isfloatdigit) isfloatdigit:
              (isfloatdigit) isfloatdigit:
              (isfloatdigit) isfloatdigit:
              (scan_float) scan_float: ret1
   Frst:0 T:'5.6' exptype:U
modify_expression_type:Inittype:U Intype:f Outtype:f
(    output_float) [f,(U )] f f 5.6
             (scan_atom) scan_atom:ret1

             (check_eitem) check_eitem: ', 7, 8, 9, 10, 11 '

              (check_operator) check_operator: , 7, 8, 9, 10, 11 

               (check_literal) check_literal:lit=',' idx=19 ', 7, 8, 9, 10, 11 '
               (check_literal) check_literal:After drop space:',' idx=19 ', 7, 8, 9, 10, 11 '
               (check_literal) check_literal:After while(): 7, 8, 9, 10, 11 
               (check_literal) check_literal:ret1 

               (scan_literal) scan_literal:lit=',' ', 7, 8, 9, 10, 11 '
               (scan_literal) scan_literal:After drop space:, 7, 8, 9, 10, 11 
               (scan_literal) scan_literal:while loop:, 7, 8, 9, 10, 11 
   Frst:0 T:',' exptype:f
(output_sub_start)
               (scan_literal) scan_literal:ret1
              (check_eitem) check_eitem:ret1

              (scan_eitem) scan_eitem:

               (check_operator) check_operator:  7, 8, 9, 10, 11 

                (check_literal) check_literal:lit=',' idx=21 '7, 8, 9, 10, 11 '
                (check_literal) check_literal:After drop space:',' idx=21 '7, 8, 9, 10, 11 '
                (check_literal)   ',' != '7'
                (check_literal) check_literal: ret0
               (check_operator) check_operator:ret0

               (check_function) check_function: '7, 8, 9, 10, 11 '
               (check_function) check_function: ret0

               (check_atom) check_atom:

                (check_literal) check_literal:lit=' %' idx=20 ' 7, 8, 9, 10, 11 '
                (check_literal) dropping space
                (check_literal) check_literal:After drop space:'%' idx=21 '7, 8, 9, 10, 11 '
                (check_literal)   '%' != '7'
                (check_literal) check_literal: ret0

                (check_literal) check_literal:lit=' "' idx=20 ' 7, 8, 9, 10, 11 '
                (check_literal) dropping space
                (check_literal) check_literal:After drop space:'"' idx=21 '7, 8, 9, 10, 11 '
                (check_literal)   '"' != '7'
                (check_literal) check_literal: ret0

                (check_number) check_number:

                 (check_float) check_float:
                 (isfloatdigit) isfloatdigit:
                 (isfloatdigit) isfloatdigit:
                 (check_float) check_float: ret0

                 (check_integer) check_integer: '7, 8, 9, 10, 11 '
                 (check_integer) check_integer:ret1
                (check_number) check_number: ret1
               (check_atom) check_atom:ret1

               (scan_atom) scan_atom:

                (check_literal) check_literal:lit=' %' idx=20 ' 7, 8, 9, 10, 11 '
                (check_literal) dropping space
                (check_literal) check_literal:After drop space:'%' idx=21 '7, 8, 9, 10, 11 '
                (check_literal)   '%' != '7'
                (check_literal) check_literal: ret0

                (check_literal) check_literal:lit=' "' idx=20 ' 7, 8, 9, 10, 11 '
                (check_literal) dropping space
                (check_literal) check_literal:After drop space:'"' idx=21 '7, 8, 9, 10, 11 '
                (check_literal)   '"' != '7'
                (check_literal) check_literal: ret0

                (check_number) check_number:

                 (check_float) check_float:
                 (isfloatdigit) isfloatdigit:
                 (isfloatdigit) isfloatdigit:
                 (check_float) check_float: ret0

                 (check_integer) check_integer: '7, 8, 9, 10, 11 '
                 (check_integer) check_integer:ret1
                (check_number) check_number: ret1

                (scan_number) scan_number:

                 (check_float) check_float:
                 (isfloatdigit) isfloatdigit:
                 (isfloatdigit) isfloatdigit:
                 (check_float) check_float: ret0

                 (check_integer) check_integer: '7, 8, 9, 10, 11 '
                 (check_integer) check_integer:ret1

                 (scan_integer) scan_integer:
                 (scan_integer) scan_integer:ret1
   Frst:0 T:'7' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U )] i i 7
                (scan_integer) scan_integer:ret1  7
               (scan_atom) scan_atom:ret1

               (check_eitem) check_eitem: ', 8, 9, 10, 11 '

                (check_operator) check_operator: , 8, 9, 10, 11 

                 (check_literal) check_literal:lit=',' idx=22 ', 8, 9, 10, 11 '
                 (check_literal) check_literal:After drop space:',' idx=22 ', 8, 9, 10, 11 '
                 (check_literal) check_literal:After while(): 8, 9, 10, 11 
                 (check_literal) check_literal:ret1 

                 (scan_literal) scan_literal:lit=',' ', 8, 9, 10, 11 '
                 (scan_literal) scan_literal:After drop space:, 8, 9, 10, 11 
                 (scan_literal) scan_literal:while loop:, 8, 9, 10, 11 
   Frst:0 T:',' exptype:i
(output_sub_start)
                 (scan_literal) scan_literal:ret1
                (check_eitem) check_eitem:ret1

                (scan_eitem) scan_eitem:

                 (check_operator) check_operator:  8, 9, 10, 11 

                  (check_literal) check_literal:lit=',' idx=24 '8, 9, 10, 11 '
                  (check_literal) check_literal:After drop space:',' idx=24 '8, 9, 10, 11 '
                  (check_literal)   ',' != '8'
                  (check_literal) check_literal: ret0
                 (check_operator) check_operator:ret0

                 (check_function) check_function: '8, 9, 10, 11 '
                 (check_function) check_function: ret0

                 (check_atom) check_atom:

                  (check_literal) check_literal:lit=' %' idx=23 ' 8, 9, 10, 11 '
                  (check_literal) dropping space
                  (check_literal) check_literal:After drop space:'%' idx=24 '8, 9, 10, 11 '
                  (check_literal)   '%' != '8'
                  (check_literal) check_literal: ret0

                  (check_literal) check_literal:lit=' "' idx=23 ' 8, 9, 10, 11 '
                  (check_literal) dropping space
                  (check_literal) check_literal:After drop space:'"' idx=24 '8, 9, 10, 11 '
                  (check_literal)   '"' != '8'
                  (check_literal) check_literal: ret0

                  (check_number) check_number:

                   (check_float) check_float:
                   (isfloatdigit) isfloatdigit:
                   (isfloatdigit) isfloatdigit:
                   (check_float) check_float: ret0

                   (check_integer) check_integer: '8, 9, 10, 11 '
                   (check_integer) check_integer:ret1
                  (check_number) check_number: ret1
                 (check_atom) check_atom:ret1

                 (scan_atom) scan_atom:

                  (check_literal) check_literal:lit=' %' idx=23 ' 8, 9, 10, 11 '
                  (check_literal) dropping space
                  (check_literal) check_literal:After drop space:'%' idx=24 '8, 9, 10, 11 '
                  (check_literal)   '%' != '8'
                  (check_literal) check_literal: ret0

                  (check_literal) check_literal:lit=' "' idx=23 ' 8, 9, 10, 11 '
                  (check_literal) dropping space
                  (check_literal) check_literal:After drop space:'"' idx=24 '8, 9, 10, 11 '
                  (check_literal)   '"' != '8'
                  (check_literal) check_literal: ret0

                  (check_number) check_number:

                   (check_float) check_float:
                   (isfloatdigit) isfloatdigit:
                   (isfloatdigit) isfloatdigit:
                   (check_float) check_float: ret0

                   (check_integer) check_integer: '8, 9, 10, 11 '
                   (check_integer) check_integer:ret1
                  (check_number) check_number: ret1

                  (scan_number) scan_number:

                   (check_float) check_float:
                   (isfloatdigit) isfloatdigit:
                   (isfloatdigit) isfloatdigit:
                   (check_float) check_float: ret0

                   (check_integer) check_integer: '8, 9, 10, 11 '
                   (check_integer) check_integer:ret1

                   (scan_integer) scan_integer:
                   (scan_integer) scan_integer:ret1
   Frst:0 T:'8' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U )] i i 8
                  (scan_integer) scan_integer:ret1  8
                 (scan_atom) scan_atom:ret1

                 (check_eitem) check_eitem: ', 9, 10, 11 '

                  (check_operator) check_operator: , 9, 10, 11 

                   (check_literal) check_literal:lit=',' idx=25 ', 9, 10, 11 '
                   (check_literal) check_literal:After drop space:',' idx=25 ', 9, 10, 11 '
                   (check_literal) check_literal:After while(): 9, 10, 11 
                   (check_literal) check_literal:ret1 

                   (scan_literal) scan_literal:lit=',' ', 9, 10, 11 '
                   (scan_literal) scan_literal:After drop space:, 9, 10, 11 
                   (scan_literal) scan_literal:while loop:, 9, 10, 11 
   Frst:0 T:',' exptype:i
(output_sub_start)
                   (scan_literal) scan_literal:ret1
                  (check_eitem) check_eitem:ret1

                  (scan_eitem) scan_eitem:

                   (check_operator) check_operator:  9, 10, 11 

                    (check_literal) check_literal:lit=',' idx=27 '9, 10, 11 '
                    (check_literal) check_literal:After drop space:',' idx=27 '9, 10, 11 '
                    (check_literal)   ',' != '9'
                    (check_literal) check_literal: ret0
                   (check_operator) check_operator:ret0

                   (check_function) check_function: '9, 10, 11 '
                   (check_function) check_function: ret0

                   (check_atom) check_atom:

                    (check_literal) check_literal:lit=' %' idx=26 ' 9, 10, 11 '
                    (check_literal) dropping space
                    (check_literal) check_literal:After drop space:'%' idx=27 '9, 10, 11 '
                    (check_literal)   '%' != '9'
                    (check_literal) check_literal: ret0

                    (check_literal) check_literal:lit=' "' idx=26 ' 9, 10, 11 '
                    (check_literal) dropping space
                    (check_literal) check_literal:After drop space:'"' idx=27 '9, 10, 11 '
                    (check_literal)   '"' != '9'
                    (check_literal) check_literal: ret0

                    (check_number) check_number:

                     (check_float) check_float:
                     (isfloatdigit) isfloatdigit:
                     (isfloatdigit) isfloatdigit:
                     (check_float) check_float: ret0

                     (check_integer) check_integer: '9, 10, 11 '
                     (check_integer) check_integer:ret1
                    (check_number) check_number: ret1
                   (check_atom) check_atom:ret1

                   (scan_atom) scan_atom:

                    (check_literal) check_literal:lit=' %' idx=26 ' 9, 10, 11 '
                    (check_literal) dropping space
                    (check_literal) check_literal:After drop space:'%' idx=27 '9, 10, 11 '
                    (check_literal)   '%' != '9'
                    (check_literal) check_literal: ret0

                    (check_literal) check_literal:lit=' "' idx=26 ' 9, 10, 11 '
                    (check_literal) dropping space
                    (check_literal) check_literal:After drop space:'"' idx=27 '9, 10, 11 '
                    (check_literal)   '"' != '9'
                    (check_literal) check_literal: ret0

                    (check_number) check_number:

                     (check_float) check_float:
                     (isfloatdigit) isfloatdigit:
                     (isfloatdigit) isfloatdigit:
                     (check_float) check_float: ret0

                     (check_integer) check_integer: '9, 10, 11 '
                     (check_integer) check_integer:ret1
                    (check_number) check_number: ret1

                    (scan_number) scan_number:

                     (check_float) check_float:
                     (isfloatdigit) isfloatdigit:
                     (isfloatdigit) isfloatdigit:
                     (check_float) check_float: ret0

                     (check_integer) check_integer: '9, 10, 11 '
                     (check_integer) check_integer:ret1

                     (scan_integer) scan_integer:
                     (scan_integer) scan_integer:ret1
   Frst:0 T:'9' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U )] i i 9
                    (scan_integer) scan_integer:ret1  9
                   (scan_atom) scan_atom:ret1

                   (check_eitem) check_eitem: ', 10, 11 '

                    (check_operator) check_operator: , 10, 11 

                     (check_literal) check_literal:lit=',' idx=28 ', 10, 11 '
                     (check_literal) check_literal:After drop space:',' idx=28 ', 10, 11 '
                     (check_literal) check_literal:After while(): 10, 11 
                     (check_literal) check_literal:ret1 

                     (scan_literal) scan_literal:lit=',' ', 10, 11 '
                     (scan_literal) scan_literal:After drop space:, 10, 11 
                     (scan_literal) scan_literal:while loop:, 10, 11 
   Frst:0 T:',' exptype:i
(output_sub_start)
                     (scan_literal) scan_literal:ret1
                    (check_eitem) check_eitem:ret1

                    (scan_eitem) scan_eitem:

                     (check_operator) check_operator:  10, 11 

                      (check_literal) check_literal:lit=',' idx=30 '10, 11 '
                      (check_literal) check_literal:After drop space:',' idx=30 '10, 11 '
                      (check_literal)   ',' != '1'
                      (check_literal) check_literal: ret0
                     (check_operator) check_operator:ret0

                     (check_function) check_function: '10, 11 '
                     (check_function) check_function: ret0

                     (check_atom) check_atom:

                      (check_literal) check_literal:lit=' %' idx=29 ' 10, 11 '
                      (check_literal) dropping space
                      (check_literal) check_literal:After drop space:'%' idx=30 '10, 11 '
                      (check_literal)   '%' != '1'
                      (check_literal) check_literal: ret0

                      (check_literal) check_literal:lit=' "' idx=29 ' 10, 11 '
                      (check_literal) dropping space
                      (check_literal) check_literal:After drop space:'"' idx=30 '10, 11 '
                      (check_literal)   '"' != '1'
                      (check_literal) check_literal: ret0

                      (check_number) check_number:

                       (check_float) check_float:
                       (isfloatdigit) isfloatdigit:
                       (isfloatdigit) isfloatdigit:
                       (isfloatdigit) isfloatdigit:
                       (check_float) check_float: ret0

                       (check_integer) check_integer: '10, 11 '
                       (check_integer) check_integer:ret1
                      (check_number) check_number: ret1
                     (check_atom) check_atom:ret1

                     (scan_atom) scan_atom:

                      (check_literal) check_literal:lit=' %' idx=29 ' 10, 11 '
                      (check_literal) dropping space
                      (check_literal) check_literal:After drop space:'%' idx=30 '10, 11 '
                      (check_literal)   '%' != '1'
                      (check_literal) check_literal: ret0

                      (check_literal) check_literal:lit=' "' idx=29 ' 10, 11 '
                      (check_literal) dropping space
                      (check_literal) check_literal:After drop space:'"' idx=30 '10, 11 '
                      (check_literal)   '"' != '1'
                      (check_literal) check_literal: ret0

                      (check_number) check_number:

                       (check_float) check_float:
                       (isfloatdigit) isfloatdigit:
                       (isfloatdigit) isfloatdigit:
                       (isfloatdigit) isfloatdigit:
                       (check_float) check_float: ret0

                       (check_integer) check_integer: '10, 11 '
                       (check_integer) check_integer:ret1
                      (check_number) check_number: ret1

                      (scan_number) scan_number:

                       (check_float) check_float:
                       (isfloatdigit) isfloatdigit:
                       (isfloatdigit) isfloatdigit:
                       (isfloatdigit) isfloatdigit:
                       (check_float) check_float: ret0

                       (check_integer) check_integer: '10, 11 '
                       (check_integer) check_integer:ret1

                       (scan_integer) scan_integer:
                       (scan_integer) scan_integer:ret1
   Frst:0 T:'10' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U )] i i 10
                      (scan_integer) scan_integer:ret1  10
                     (scan_atom) scan_atom:ret1

                     (check_eitem) check_eitem: ', 11 '

                      (check_operator) check_operator: , 11 

                       (check_literal) check_literal:lit=',' idx=32 ', 11 '
                       (check_literal) check_literal:After drop space:',' idx=32 ', 11 '
                       (check_literal) check_literal:After while(): 11 
                       (check_literal) check_literal:ret1 

                       (scan_literal) scan_literal:lit=',' ', 11 '
                       (scan_literal) scan_literal:After drop space:, 11 
                       (scan_literal) scan_literal:while loop:, 11 
   Frst:0 T:',' exptype:i
(output_sub_start)
                       (scan_literal) scan_literal:ret1
                      (check_eitem) check_eitem:ret1

                      (scan_eitem) scan_eitem:

                       (check_operator) check_operator:  11 

                        (check_literal) check_literal:lit=',' idx=34 '11 '
                        (check_literal) check_literal:After drop space:',' idx=34 '11 '
                        (check_literal)   ',' != '1'
                        (check_literal) check_literal: ret0
                       (check_operator) check_operator:ret0

                       (check_function) check_function: '11 '
                       (check_function) check_function: ret0

                       (check_atom) check_atom:

                        (check_literal) check_literal:lit=' %' idx=33 ' 11 '
                        (check_literal) dropping space
                        (check_literal) check_literal:After drop space:'%' idx=34 '11 '
                        (check_literal)   '%' != '1'
                        (check_literal) check_literal: ret0

                        (check_literal) check_literal:lit=' "' idx=33 ' 11 '
                        (check_literal) dropping space
                        (check_literal) check_literal:After drop space:'"' idx=34 '11 '
                        (check_literal)   '"' != '1'
                        (check_literal) check_literal: ret0

                        (check_number) check_number:

                         (check_float) check_float:
                         (isfloatdigit) isfloatdigit:
                         (isfloatdigit) isfloatdigit:
                         (isfloatdigit) isfloatdigit:
                         (check_float) check_float: ret0

                         (check_integer) check_integer: '11 '
                         (check_integer) check_integer:ret1
                        (check_number) check_number: ret1
                       (check_atom) check_atom:ret1

                       (scan_atom) scan_atom:

                        (check_literal) check_literal:lit=' %' idx=33 ' 11 '
                        (check_literal) dropping space
                        (check_literal) check_literal:After drop space:'%' idx=34 '11 '
                        (check_literal)   '%' != '1'
                        (check_literal) check_literal: ret0

                        (check_literal) check_literal:lit=' "' idx=33 ' 11 '
                        (check_literal) dropping space
                        (check_literal) check_literal:After drop space:'"' idx=34 '11 '
                        (check_literal)   '"' != '1'
                        (check_literal) check_literal: ret0

                        (check_number) check_number:

                         (check_float) check_float:
                         (isfloatdigit) isfloatdigit:
                         (isfloatdigit) isfloatdigit:
                         (isfloatdigit) isfloatdigit:
                         (check_float) check_float: ret0

                         (check_integer) check_integer: '11 '
                         (check_integer) check_integer:ret1
                        (check_number) check_number: ret1

                        (scan_number) scan_number:

                         (check_float) check_float:
                         (isfloatdigit) isfloatdigit:
                         (isfloatdigit) isfloatdigit:
                         (isfloatdigit) isfloatdigit:
                         (check_float) check_float: ret0

                         (check_integer) check_integer: '11 '
                         (check_integer) check_integer:ret1

                         (scan_integer) scan_integer:
                         (scan_integer) scan_integer:ret1
   Frst:0 T:'11' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U )] i i 11
                        (scan_integer) scan_integer:ret1  11
                       (scan_atom) scan_atom:ret1

                       (check_eitem) check_eitem: ' '

                        (check_operator) check_operator:  

                         (check_literal) check_literal:lit=',' idx=37 ''
                         (check_literal) check_literal:After drop space:',' idx=37 ''
                         (check_literal) check_literal  ret0 Empty test string
                        (check_operator) check_operator:ret0

                        (check_function) check_function: ''
                        (check_function) check_function: ret0

                        (check_atom) check_atom:

                         (check_literal) check_literal:lit=' %' idx=36 ' '
                         (check_literal) dropping space
                         (check_literal) check_literal:After drop space:'%' idx=37 ''
                         (check_literal) check_literal  ret0 Empty test string

                         (check_literal) check_literal:lit=' "' idx=36 ' '
                         (check_literal) dropping space
                         (check_literal) check_literal:After drop space:'"' idx=37 ''
                         (check_literal) check_literal  ret0 Empty test string

                         (check_number) check_number:

                          (check_float) check_float:
                          (isfloatdigit) isfloatdigit:
                          (check_float) check_float: ret0

                          (check_integer) check_integer: ''
                          (check_integer) check_integer:ret0
                         (check_number) check_number: ret0

                         (check_variable) check_variable:

                          (check_vname) check_vname '':
                          (check_vname) check_vname ret0 '':
                         (check_variable) check_variable:ret0 
                        (check_atom) check_atom:ret1

                        (check_sub_expr) check_sub_expr:

                         (check_literal) check_literal:lit=' (' idx=36 ' '
                         (check_literal) dropping space
                         (check_literal) check_literal:After drop space:'(' idx=37 ''
                         (check_literal) check_literal  ret0 Empty test string
                        (check_sub_expr) check_sub_expr: ret0
                       (check_eitem) check_eitem:ret0
                      (scan_expression) scan_expression: ret1 ' '
                     (scan_command) scan_command: ret1 =>'UDG'
                    (scan_command) 
ENDEXP
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
                    (op_stack_print) 
------------------
                    (op_stack_print) 
Operator Stack     (1)

                    (op_stack_print) 
000: UDG type:17
                    (op_stack_print) 
------------------

(  output_sub_end)
                    (token_is_function) 
token_is_function:
                    (token_is_function) UDG is function
Pop 5
Pop 'UDG'
                    (op_stack_print) 
------------------
                    (op_stack_print) 
Operator Stack     (0)

                    (op_stack_print) 
------------------

( output_function) [i,(U )] v v UDG
(  output_sub_end)
Finalise stack
                    (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '1'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FLT          f rq:f '2.3'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FLT          f rq:f '3.4'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FLT          f rq:f '5.6'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '7'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '8'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '9'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '10'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '11'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'UDG'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
 BE:

Type Check Stack (0)

 BE:1
type_check_stack_push: '1'
                    (type_check_stack_print) 
------------------
                    (type_check_stack_print) 
Type Check Stack     (1)

                    (type_check_stack_print) 
000: '1' type:0
                    (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '1' type:i (0)
 BE:

Type Check Stack (1)

000: '1' type:i (0)
 BE:2.3
type_check_stack_push: '2.3'
                    (type_check_stack_print) 
------------------
                    (type_check_stack_print) 
Type Check Stack     (2)

                    (type_check_stack_print) 
000: '1' type:0
                    (type_check_stack_print) 
001: '2.3' type:1
                    (type_check_stack_print) 
------------------


Type Check Stack (2)

000: '1' type:i (0)
001: '2.3' type:f (1)
 BE:

Type Check Stack (2)

000: '1' type:i (0)
001: '2.3' type:f (1)
 BE:3.4
type_check_stack_push: '3.4'
                    (type_check_stack_print) 
------------------
                    (type_check_stack_print) 
Type Check Stack     (3)

                    (type_check_stack_print) 
000: '1' type:0
                    (type_check_stack_print) 
001: '2.3' type:1
                    (type_check_stack_print) 
002: '3.4' type:1
                    (type_check_stack_print) 
------------------


Type Check Stack (3)

000: '1' type:i (0)
001: '2.3' type:f (1)
002: '3.4' type:f (1)
 BE:

Type Check Stack (3)

000: '1' type:i (0)
001: '2.3' type:f (1)
002: '3.4' type:f (1)
 BE:5.6
type_check_stack_push: '5.6'
                    (type_check_stack_print) 
------------------
                    (type_check_stack_print) 
Type Check Stack     (4)

                    (type_check_stack_print) 
000: '1' type:0
                    (type_check_stack_print) 
001: '2.3' type:1
                    (type_check_stack_print) 
002: '3.4' type:1
                    (type_check_stack_print) 
003: '5.6' type:1
                    (type_check_stack_print) 
------------------


Type Check Stack (4)

000: '1' type:i (0)
001: '2.3' type:f (1)
002: '3.4' type:f (1)
003: '5.6' type:f (1)
 BE:

Type Check Stack (4)

000: '1' type:i (0)
001: '2.3' type:f (1)
002: '3.4' type:f (1)
003: '5.6' type:f (1)
 BE:7
type_check_stack_push: '7'
                    (type_check_stack_print) 
------------------
                    (type_check_stack_print) 
Type Check Stack     (5)

                    (type_check_stack_print) 
000: '1' type:0
                    (type_check_stack_print) 
001: '2.3' type:1
                    (type_check_stack_print) 
002: '3.4' type:1
                    (type_check_stack_print) 
003: '5.6' type:1
                    (type_check_stack_print) 
004: '7' type:0
                    (type_check_stack_print) 
------------------


Type Check Stack (5)

000: '1' type:i (0)
001: '2.3' type:f (1)
002: '3.4' type:f (1)
003: '5.6' type:f (1)
004: '7' type:i (0)
 BE:

Type Check Stack (5)

000: '1' type:i (0)
001: '2.3' type:f (1)
002: '3.4' type:f (1)
003: '5.6' type:f (1)
004: '7' type:i (0)
 BE:8
type_check_stack_push: '8'
                    (type_check_stack_print) 
------------------
                    (type_check_stack_print) 
Type Check Stack     (6)

                    (type_check_stack_print) 
000: '1' type:0
                    (type_check_stack_print) 
001: '2.3' type:1
                    (type_check_stack_print) 
002: '3.4' type:1
                    (type_check_stack_print) 
003: '5.6' type:1
                    (type_check_stack_print) 
004: '7' type:0
                    (type_check_stack_print) 
005: '8' type:0
                    (type_check_stack_print) 
------------------


Type Check Stack (6)

000: '1' type:i (0)
001: '2.3' type:f (1)
002: '3.4' type:f (1)
003: '5.6' type:f (1)
004: '7' type:i (0)
005: '8' type:i (0)
 BE:

Type Check Stack (6)

000: '1' type:i (0)
001: '2.3' type:f (1)
002: '3.4' type:f (1)
003: '5.6' type:f (1)
004: '7' type:i (0)
005: '8' type:i (0)
 BE:9
type_check_stack_push: '9'
                    (type_check_stack_print) 
------------------
                    (type_check_stack_print) 
Type Check Stack     (7)

                    (type_check_stack_print) 
000: '1' type:0
                    (type_check_stack_print) 
001: '2.3' type:1
                    (type_check_stack_print) 
002: '3.4' type:1
                    (type_check_stack_print) 
003: '5.6' type:1
                    (type_check_stack_print) 
004: '7' type:0
                    (type_check_stack_print) 
005: '8' type:0
                    (type_check_stack_print) 
006: '9' type:0
                    (type_check_stack_print) 
------------------


Type Check Stack (7)

000: '1' type:i (0)
001: '2.3' type:f (1)
002: '3.4' type:f (1)
003: '5.6' type:f (1)
004: '7' type:i (0)
005: '8' type:i (0)
006: '9' type:i (0)
 BE:

Type Check Stack (7)

000: '1' type:i (0)
001: '2.3' type:f (1)
002: '3.4' type:f (1)
003: '5.6' type:f (1)
004: '7' type:i (0)
005: '8' type:i (0)
006: '9' type:i (0)
 BE:10
type_check_stack_push: '10'
                    (type_check_stack_print) 
------------------
                    (type_check_stack_print) 
Type Check Stack     (8)

                    (type_check_stack_print) 
000: '1' type:0
                    (type_check_stack_print) 
001: '2.3' type:1
                    (type_check_stack_print) 
002: '3.4' type:1
                    (type_check_stack_print) 
003: '5.6' type:1
                    (type_check_stack_print) 
004: '7' type:0
                    (type_check_stack_print) 
005: '8' type:0
                    (type_check_stack_print) 
006: '9' type:0
                    (type_check_stack_print) 
007: '10' type:0
                    (type_check_stack_print) 
------------------


Type Check Stack (8)

000: '1' type:i (0)
001: '2.3' type:f (1)
002: '3.4' type:f (1)
003: '5.6' type:f (1)
004: '7' type:i (0)
005: '8' type:i (0)
006: '9' type:i (0)
007: '10' type:i (0)
 BE:

Type Check Stack (8)

000: '1' type:i (0)
001: '2.3' type:f (1)
002: '3.4' type:f (1)
003: '5.6' type:f (1)
004: '7' type:i (0)
005: '8' type:i (0)
006: '9' type:i (0)
007: '10' type:i (0)
 BE:11
type_check_stack_push: '11'
                    (type_check_stack_print) 
------------------
                    (type_check_stack_print) 
Type Check Stack     (9)

                    (type_check_stack_print) 
000: '1' type:0
                    (type_check_stack_print) 
001: '2.3' type:1
                    (type_check_stack_print) 
002: '3.4' type:1
                    (type_check_stack_print) 
003: '5.6' type:1
                    (type_check_stack_print) 
004: '7' type:0
                    (type_check_stack_print) 
005: '8' type:0
                    (type_check_stack_print) 
006: '9' type:0
                    (type_check_stack_print) 
007: '10' type:0
                    (type_check_stack_print) 
008: '11' type:0
                    (type_check_stack_print) 
------------------


Type Check Stack (9)

000: '1' type:i (0)
001: '2.3' type:f (1)
002: '3.4' type:f (1)
003: '5.6' type:f (1)
004: '7' type:i (0)
005: '8' type:i (0)
006: '9' type:i (0)
007: '10' type:i (0)
008: '11' type:i (0)
 BE:

Type Check Stack (9)

000: '1' type:i (0)
001: '2.3' type:f (1)
002: '3.4' type:f (1)
003: '5.6' type:f (1)
004: '7' type:i (0)
005: '8' type:i (0)
006: '9' type:i (0)
007: '10' type:i (0)
008: '11' type:i (0)
 BE:UDG
FN: 9 args
                    (function_return_type) 
function_return_type: 'UDG' =>v
                    (function_return_type) 
function_return_type: 'UDG' =>17
ret_type;17 v
typecheck_expression:Ret type of UDG : v
type_check_stack_pop: '11'
                    (type_check_stack_print) 
------------------
                    (type_check_stack_print) 
Type Check Stack     (8)

                    (type_check_stack_print) 
000: '1' type:0
                    (type_check_stack_print) 
001: '2.3' type:1
                    (type_check_stack_print) 
002: '3.4' type:1
                    (type_check_stack_print) 
003: '5.6' type:1
                    (type_check_stack_print) 
004: '7' type:0
                    (type_check_stack_print) 
005: '8' type:0
                    (type_check_stack_print) 
006: '9' type:0
                    (type_check_stack_print) 
007: '10' type:0
                    (type_check_stack_print) 
------------------

FN ARG 8 ri 11 0(i)  Arg ok
type_check_stack_pop: '10'
                    (type_check_stack_print) 
------------------
                    (type_check_stack_print) 
Type Check Stack     (7)

                    (type_check_stack_print) 
000: '1' type:0
                    (type_check_stack_print) 
001: '2.3' type:1
                    (type_check_stack_print) 
002: '3.4' type:1
                    (type_check_stack_print) 
003: '5.6' type:1
                    (type_check_stack_print) 
004: '7' type:0
                    (type_check_stack_print) 
005: '8' type:0
                    (type_check_stack_print) 
006: '9' type:0
                    (type_check_stack_print) 
------------------

FN ARG 7 ri 10 0(i)  Arg ok
type_check_stack_pop: '9'
                    (type_check_stack_print) 
------------------
                    (type_check_stack_print) 
Type Check Stack     (6)

                    (type_check_stack_print) 
000: '1' type:0
                    (type_check_stack_print) 
001: '2.3' type:1
                    (type_check_stack_print) 
002: '3.4' type:1
                    (type_check_stack_print) 
003: '5.6' type:1
                    (type_check_stack_print) 
004: '7' type:0
                    (type_check_stack_print) 
005: '8' type:0
                    (type_check_stack_print) 
------------------

FN ARG 6 ri 9 0(i)  Arg ok
type_check_stack_pop: '8'
                    (type_check_stack_print) 
------------------
                    (type_check_stack_print) 
Type Check Stack     (5)

                    (type_check_stack_print) 
000: '1' type:0
                    (type_check_stack_print) 
001: '2.3' type:1
                    (type_check_stack_print) 
002: '3.4' type:1
                    (type_check_stack_print) 
003: '5.6' type:1
                    (type_check_stack_print) 
004: '7' type:0
                    (type_check_stack_print) 
------------------

FN ARG 5 ri 8 0(i)  Arg ok
type_check_stack_pop: '7'
                    (type_check_stack_print) 
------------------
                    (type_check_stack_print) 
Type Check Stack     (4)

                    (type_check_stack_print) 
000: '1' type:0
                    (type_check_stack_print) 
001: '2.3' type:1
                    (type_check_stack_print) 
002: '3.4' type:1
                    (type_check_stack_print) 
003: '5.6' type:1
                    (type_check_stack_print) 
------------------

FN ARG 4 ri 7 0(i)  Arg ok
type_check_stack_pop: '5.6'
                    (type_check_stack_print) 
------------------
                    (type_check_stack_print) 
Type Check Stack     (3)

                    (type_check_stack_print) 
000: '1' type:0
                    (type_check_stack_print) 
001: '2.3' type:1
                    (type_check_stack_print) 
002: '3.4' type:1
                    (type_check_stack_print) 
------------------

FN ARG 3 ri 5.6 1(f)  Arg not OK
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i '1'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_FLT          f rq:f '2.3'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_FLT          f rq:f '3.4'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_FLT          f rq:f '5.6'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_INTEGER      i rq:i '7'  0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N12 EXP_BUFF_ID_INTEGER      i rq:i '8'  0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_INTEGER      i rq:i '9'  0:
(dump_exp_buffer2) N15 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N16 EXP_BUFF_ID_INTEGER      i rq:i '10'  0:
(dump_exp_buffer2) N17 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N18 EXP_BUFF_ID_INTEGER      i rq:i '11'  0:
(dump_exp_buffer2) N19 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
 Insert after 8 exp_buffer2_i:19
   Found at i:7
   Copied 18 to 19:
   Copied 17 to 18:
   Copied 16 to 17:
   Copied 15 to 16:
   Copied 14 to 15:
   Copied 13 to 14:
   Copied 12 to 13:
   Copied 11 to 12:
   Copied 10 to 11:
   Copied 9 to 10:
   Copied 8 to 9:
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i '1'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_FLT          f rq:f '2.3'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_FLT          f rq:f '3.4'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_FLT          f rq:f '5.6'  0:
(dump_exp_buffer2) N21 EXP_BUFF_ID_AUTOCON      v rq:v 'autocon f->i'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_INTEGER      i rq:i '7'  0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N12 EXP_BUFF_ID_INTEGER      i rq:i '8'  0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_INTEGER      i rq:i '9'  0:
(dump_exp_buffer2) N15 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N16 EXP_BUFF_ID_INTEGER      i rq:i '10'  0:
(dump_exp_buffer2) N17 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N18 EXP_BUFF_ID_INTEGER      i rq:i '11'  0:
(dump_exp_buffer2) N19 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
type_check_stack_pop: '3.4'
                    (type_check_stack_print) 
------------------
                    (type_check_stack_print) 
Type Check Stack     (2)

                    (type_check_stack_print) 
000: '1' type:0
                    (type_check_stack_print) 
001: '2.3' type:1
                    (type_check_stack_print) 
------------------

FN ARG 2 ri 3.4 1(f)  Arg not OK
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i '1'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_FLT          f rq:f '2.3'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_FLT          f rq:f '3.4'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_FLT          f rq:f '5.6'  0:
(dump_exp_buffer2) N21 EXP_BUFF_ID_AUTOCON      v rq:v 'autocon f->i'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_INTEGER      i rq:i '7'  0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N12 EXP_BUFF_ID_INTEGER      i rq:i '8'  0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_INTEGER      i rq:i '9'  0:
(dump_exp_buffer2) N15 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N16 EXP_BUFF_ID_INTEGER      i rq:i '10'  0:
(dump_exp_buffer2) N17 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N18 EXP_BUFF_ID_INTEGER      i rq:i '11'  0:
(dump_exp_buffer2) N19 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
 Insert after 6 exp_buffer2_i:20
   Found at i:5
   Copied 19 to 20:
   Copied 18 to 19:
   Copied 17 to 18:
   Copied 16 to 17:
   Copied 15 to 16:
   Copied 14 to 15:
   Copied 13 to 14:
   Copied 12 to 13:
   Copied 11 to 12:
   Copied 10 to 11:
   Copied 9 to 10:
   Copied 8 to 9:
   Copied 7 to 8:
   Copied 6 to 7:
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i '1'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_FLT          f rq:f '2.3'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_FLT          f rq:f '3.4'  0:
(dump_exp_buffer2) N22 EXP_BUFF_ID_AUTOCON      v rq:v 'autocon f->i'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_FLT          f rq:f '5.6'  0:
(dump_exp_buffer2) N21 EXP_BUFF_ID_AUTOCON      v rq:v 'autocon f->i'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_INTEGER      i rq:i '7'  0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N12 EXP_BUFF_ID_INTEGER      i rq:i '8'  0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_INTEGER      i rq:i '9'  0:
(dump_exp_buffer2) N15 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N16 EXP_BUFF_ID_INTEGER      i rq:i '10'  0:
(dump_exp_buffer2) N17 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N18 EXP_BUFF_ID_INTEGER      i rq:i '11'  0:
(dump_exp_buffer2) N19 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
type_check_stack_pop: '2.3'
                    (type_check_stack_print) 
------------------
                    (type_check_stack_print) 
Type Check Stack     (1)

                    (type_check_stack_print) 
000: '1' type:0
                    (type_check_stack_print) 
------------------

FN ARG 1 ri 2.3 1(f)  Arg not OK
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i '1'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_FLT          f rq:f '2.3'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_FLT          f rq:f '3.4'  0:
(dump_exp_buffer2) N22 EXP_BUFF_ID_AUTOCON      v rq:v 'autocon f->i'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_FLT          f rq:f '5.6'  0:
(dump_exp_buffer2) N21 EXP_BUFF_ID_AUTOCON      v rq:v 'autocon f->i'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_INTEGER      i rq:i '7'  0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N12 EXP_BUFF_ID_INTEGER      i rq:i '8'  0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_INTEGER      i rq:i '9'  0:
(dump_exp_buffer2) N15 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N16 EXP_BUFF_ID_INTEGER      i rq:i '10'  0:
(dump_exp_buffer2) N17 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N18 EXP_BUFF_ID_INTEGER      i rq:i '11'  0:
(dump_exp_buffer2) N19 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
 Insert after 4 exp_buffer2_i:21
   Found at i:3
   Copied 20 to 21:
   Copied 19 to 20:
   Copied 18 to 19:
   Copied 17 to 18:
   Copied 16 to 17:
   Copied 15 to 16:
   Copied 14 to 15:
   Copied 13 to 14:
   Copied 12 to 13:
   Copied 11 to 12:
   Copied 10 to 11:
   Copied 9 to 10:
   Copied 8 to 9:
   Copied 7 to 8:
   Copied 6 to 7:
   Copied 5 to 6:
   Copied 4 to 5:
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i '1'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_FLT          f rq:f '2.3'  0:
(dump_exp_buffer2) N23 EXP_BUFF_ID_AUTOCON      v rq:v 'autocon f->i'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_FLT          f rq:f '3.4'  0:
(dump_exp_buffer2) N22 EXP_BUFF_ID_AUTOCON      v rq:v 'autocon f->i'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_FLT          f rq:f '5.6'  0:
(dump_exp_buffer2) N21 EXP_BUFF_ID_AUTOCON      v rq:v 'autocon f->i'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_INTEGER      i rq:i '7'  0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N12 EXP_BUFF_ID_INTEGER      i rq:i '8'  0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_INTEGER      i rq:i '9'  0:
(dump_exp_buffer2) N15 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N16 EXP_BUFF_ID_INTEGER      i rq:i '10'  0:
(dump_exp_buffer2) N17 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N18 EXP_BUFF_ID_INTEGER      i rq:i '11'  0:
(dump_exp_buffer2) N19 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
type_check_stack_pop: '1'
                    (type_check_stack_print) 
------------------
                    (type_check_stack_print) 
Type Check Stack     (0)

                    (type_check_stack_print) 
------------------

FN ARG 0 ri 1 0(i)  Arg ok
type_check_stack_push: '000'
                    (type_check_stack_print) 
------------------
                    (type_check_stack_print) 
Type Check Stack     (1)

                    (type_check_stack_print) 
000: '000' type:17
                    (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '1'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FLT          f rq:f '2.3'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FLT          f rq:f '3.4'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FLT          f rq:f '5.6'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '7'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '8'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '9'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '10'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '11'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'UDG'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i '1'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_FLT          f rq:f '2.3'  0:
(dump_exp_buffer2) N23 EXP_BUFF_ID_AUTOCON      v rq:v 'autocon f->i'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_FLT          f rq:f '3.4'  0:
(dump_exp_buffer2) N22 EXP_BUFF_ID_AUTOCON      v rq:v 'autocon f->i'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_FLT          f rq:f '5.6'  0:
(dump_exp_buffer2) N21 EXP_BUFF_ID_AUTOCON      v rq:v 'autocon f->i'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_INTEGER      i rq:i '7'  0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N12 EXP_BUFF_ID_INTEGER      i rq:i '8'  0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_INTEGER      i rq:i '9'  0:
(dump_exp_buffer2) N15 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N16 EXP_BUFF_ID_INTEGER      i rq:i '10'  0:
(dump_exp_buffer2) N17 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N18 EXP_BUFF_ID_INTEGER      i rq:i '11'  0:
(dump_exp_buffer2) N19 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N20 EXP_BUFF_ID_FUNCTION     v rq:v 'UDG'  0:
(dump_exp_buffer2) N24 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
                    (process_expression_types) 
==INFIX==

infix_stack_push: '1'
infix_stack_push: '2.3'
infix_stack_push: '3.4'
infix_stack_push: '5.6'
infix_stack_push: '7'
infix_stack_push: '8'
infix_stack_push: '9'
infix_stack_push: '10'
infix_stack_push: '11'
infix_stack_pop: '11'
infix_stack_pop: '10'
infix_stack_pop: '9'
infix_stack_pop: '8'
infix_stack_pop: '7'
infix_stack_pop: '5.6'
infix_stack_pop: '3.4'
infix_stack_pop: '2.3'
infix_stack_pop: '1'
infix_stack_push: 'UDG(1 2.3 3.4 5.6 7 8 9 10 11 )'
infix_stack_pop: 'UDG(1 2.3 3.4 5.6 7 8 9 10 11 )'
                    (process_expression_types) ==UDG(1 2.3 3.4 5.6 7 8 9 10 11 )==
                    (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_INTEGER      i rq:i 1  0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N4 EXP_BUFF_ID_FLT          f rq:f 2.3  0:
(    output_qcode) N23 EXP_BUFF_ID_AUTOCON      v rq:v autocon f->i  0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_FLT          f rq:f 3.4  0:
(    output_qcode) N22 EXP_BUFF_ID_AUTOCON      v rq:v autocon f->i  0:
(    output_qcode) N7 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N8 EXP_BUFF_ID_FLT          f rq:f 5.6  0:
(    output_qcode) N21 EXP_BUFF_ID_AUTOCON      v rq:v autocon f->i  0:
(    output_qcode) N9 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N10 EXP_BUFF_ID_INTEGER      i rq:i 7  0:
(    output_qcode) N11 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N12 EXP_BUFF_ID_INTEGER      i rq:i 8  0:
(    output_qcode) N13 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N14 EXP_BUFF_ID_INTEGER      i rq:i 9  0:
(    output_qcode) N15 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N16 EXP_BUFF_ID_INTEGER      i rq:i 10  0:
(    output_qcode) N17 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N18 EXP_BUFF_ID_INTEGER      i rq:i 11  0:
(    output_qcode) N19 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N20 EXP_BUFF_ID_FUNCTION     v rq:v UDG  0:
(    output_qcode) N24 EXP_BUFF_ID_SUB_END      U rq:i   0:

                     (check_literal) check_literal:lit=':' idx=37 ''
                     (check_literal) check_literal:After drop space:':' idx=37 ''
                     (check_literal) check_literal  ret0 Empty test string
                    (translate_file) 
cline scanned OK
************************************************
**     UDG 1 , 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 **
************************************************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'UDG 1 , 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 ':
     (check_vname) check_vname ret1 ' 1 , 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 ':
    (check_variable) check_variable: ' 1 , 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
    (check_variable) check_variable: Ary test ' 1 , 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '

     (check_literal) check_literal:lit='(' idx=8 ' 1 , 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
     (check_literal) check_literal:After drop space:'(' idx=8 ' 1 , 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=8 ' 1 , 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=9 '1 , 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
   (check_literal)   '=' != '1'
   (check_literal) check_literal: ret0
  (check_assignment) check_assignment:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) check_textlabel: 'UDG 1 , 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
   (check_textlabel) check_textlabel:ret0
  (check_proc_call) check_proc_call:ret0

  (check_command) check_command:
  (check_command) check_command: ret1 found=> 'UDG'
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=36, ' 1 , 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
========================================================
     UDG 1 , 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'UDG 1 , 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 ':
    (check_vname) check_vname ret1 ' 1 , 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 ':
   (check_variable) check_variable: ' 1 , 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
   (check_variable) check_variable: Ary test ' 1 , 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '

    (check_literal) check_literal:lit='(' idx=8 ' 1 , 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
    (check_literal) check_literal:After drop space:'(' idx=8 ' 1 , 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=8 ' 1 , 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=9 '1 , 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
  (check_literal)   '=' != '1'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'UDG 1 , 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'UDG'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'UDG' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) UDG is function
 (function_return_type) 
function_return_type: 'UDG' =>v
 (function_return_type) 
function_return_type: 'UDG' =>17
process_token: 'UDG' t=>v
 Push:'UDG'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: UDG type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: UDG type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' 1 , 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '

   (check_eitem) check_eitem: '1 , 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '

    (check_operator) check_operator: 1 , 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 

     (check_literal) check_literal:lit=',' idx=9 '1 , 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
     (check_literal) check_literal:After drop space:',' idx=9 '1 , 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
     (check_literal)   ',' != '1'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: '1 , 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=9 '1 , 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=9 '1 , 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
     (check_literal)   '%' != '1'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=9 '1 , 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=9 '1 , 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
     (check_literal)   '"' != '1'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '1 , 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (scan_eitem) scan_eitem:

    (check_operator) check_operator: 1 , 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 

     (check_literal) check_literal:lit=',' idx=9 '1 , 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
     (check_literal) check_literal:After drop space:',' idx=9 '1 , 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
     (check_literal)   ',' != '1'
     (check_literal) check_literal: ret0
    (check_operator) check_operator:ret0

    (check_function) check_function: '1 , 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=9 '1 , 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=9 '1 , 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
     (check_literal)   '%' != '1'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=9 '1 , 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=9 '1 , 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
     (check_literal)   '"' != '1'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '1 , 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1

    (scan_atom) scan_atom:

     (check_literal) check_literal:lit=' %' idx=9 '1 , 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=9 '1 , 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
     (check_literal)   '%' != '1'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=9 '1 , 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=9 '1 , 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
     (check_literal)   '"' != '1'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '1 , 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1

     (scan_number) scan_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '1 , 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
      (check_integer) check_integer:ret1

      (scan_integer) scan_integer:
      (scan_integer) scan_integer:ret1
   Frst:0 T:'1' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U )] i i 1
     (scan_integer) scan_integer:ret1  1
    (scan_atom) scan_atom:ret1

    (check_eitem) check_eitem: ' , 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '

     (check_operator) check_operator:  , 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 

      (check_literal) check_literal:lit=',' idx=11 ', 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
      (check_literal) check_literal:After drop space:',' idx=11 ', 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
      (check_literal) check_literal:After while(): 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 
      (check_literal) check_literal:ret1 

      (scan_literal) scan_literal:lit=',' ' , 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
      (scan_literal) scan_literal:After drop space: , 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 
      (scan_literal) scan_literal:while loop: , 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 
      (scan_literal) scan_literal:ret1

      (check_function) check_function: ', 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=10 ' , 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=11 ', 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
       (check_literal)   '%' != ','
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=10 ' , 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=11 ', 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
       (check_literal)   '"' != ','
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: ', 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname ', 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 ':
        (check_vname) check_vname ret0 ', 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 ':
       (check_variable) check_variable:ret0 
      (check_atom) check_atom:ret1

      (check_sub_expr) check_sub_expr:

       (check_literal) check_literal:lit=' (' idx=10 ' , 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'(' idx=11 ', 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
       (check_literal)   '(' != ','
       (check_literal) check_literal: ret0
      (check_sub_expr) check_sub_expr: ret0
     (check_eitem) check_eitem:ret0
    (scan_expression) scan_expression: ret1 ' , 2.3, 3.4, 5.6, 7, 8, 9, 10, 11 '
   (scan_command) scan_command: ret1 =>'UDG'
  (scan_command) 
ENDEXP
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (1)

  (op_stack_print) 
000: UDG type:17
  (op_stack_print) 
------------------

(  output_sub_end)
  (token_is_function) 
token_is_function:
  (token_is_function) UDG is function
Pop 5
Pop 'UDG'
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (0)

  (op_stack_print) 
------------------

( output_function) [i,(U )] v v UDG
(  output_sub_end)
Finalise stack
  (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '1'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'UDG'  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
 BE:

Type Check Stack (0)

 BE:1
type_check_stack_push: '1'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (1)

  (type_check_stack_print) 
000: '1' type:0
  (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '1' type:i (0)
 BE:

Type Check Stack (1)

000: '1' type:i (0)
 BE:UDG
FN: 9 args
  (function_return_type) 
function_return_type: 'UDG' =>v
  (function_return_type) 
function_return_type: 'UDG' =>17
ret_type;17 v
typecheck_expression:Ret type of UDG : v
type_check_stack_pop: '1'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (0)

  (type_check_stack_print) 
------------------

FN ARG 8 ri 1 0(i)  Arg ok
type_check_stack_pop: Operator stack empty