
NUM_BUFF_ID    :15
EXP_BUFF_ID_MAX:14

(translate_file) 
=======================cline==========================
(translate_file) 
==TEST1:
==
scan_procdef:
check_textlabel: 'TEST1:
'
check_textlabel:ret1
scan_literal:lit=':' ':
'
scan_literal:After drop space::

scan_literal:while loop::

   Frst:1 T:':' exptype:U
token_is_function:
token_is_function:: is not function
token_is_variable: tok:':'
token_is_function:
token_is_function:: is not function
scan_procdef:ret1
(translate_file) 
cline scanned OK
(translate_file) 
=======================cline==========================
(translate_file) 
==LOCAL A, B,C,D , E  ,  F   ,    G
==
check_declare:
check_literal:lit=' LOCAL' idx=0 'LOCAL A, B,C,D , E  ,  F   ,    G
'
    dropping space
check_literal:After drop space:'LOCAL' idx=0 'LOCAL A, B,C,D , E  ,  F   ,    G
'
check_literal:After while(): A, B,C,D , E  ,  F   ,    G

check_literal:ret1 
check_declare:ret 1
scan_declare:
check_literal:lit=' LOCAL' idx=0 'LOCAL A, B,C,D , E  ,  F   ,    G
'
    dropping space
check_literal:After drop space:'LOCAL' idx=0 'LOCAL A, B,C,D , E  ,  F   ,    G
'
check_literal:After while(): A, B,C,D , E  ,  F   ,    G

check_literal:ret1 
scan_localglobal:
scan_literal:lit=' LOCAL' 'LOCAL A, B,C,D , E  ,  F   ,    G
'
scan_literal:After drop space:LOCAL A, B,C,D , E  ,  F   ,    G

scan_literal:while loop:LOCAL A, B,C,D , E  ,  F   ,    G

scan_literal:while loop:OCAL A, B,C,D , E  ,  F   ,    G

scan_literal:while loop:CAL A, B,C,D , E  ,  F   ,    G

scan_literal:while loop:AL A, B,C,D , E  ,  F   ,    G

scan_literal:while loop:L A, B,C,D , E  ,  F   ,    G

   Frst:0 T:'LOCAL' exptype:U
token_is_function:
token_is_function:LOCAL is not function
token_is_variable: tok:'LOCAL'
token_is_function:
token_is_function:LOCAL is not function
(init_get_name) 
init_get_name:'LOCAL'
(init_get_name) 
init_get_name:'LOCAL'
(get_name) 
get_name:gn:'LOCAL'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:f Outtype:f
   Frst:0 T:'@' exptype:f
(operator_precedence) 
@ is operator
'@' is operator
(process_token) 
Token is operator o1 name:@ o2 name:
(process_token) 
opr1:9 opr2:0
Push 1
 Push:'@'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: @ type:1
(op_stack_print) 
------------------

( output_variable) [f,()] f f LOCAL
check_variable:
check_vname 'A, B,C,D , E  ,  F   ,    G
':
check_vname ret1 ', B,C,D , E  ,  F   ,    G
':
check_variable: ', B,C,D , E  ,  F   ,    G
'
check_variable: Ary test ', B,C,D , E  ,  F   ,    G
'
check_literal:lit='(' idx=7 ', B,C,D , E  ,  F   ,    G
'
check_literal:After drop space:'(' idx=7 ', B,C,D , E  ,  F   ,    G
'
  '(' != ','
check_literal: ret0
check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
check_variable:ret1 
scan_variable:
scan_vname: ' A, B,C,D , E  ,  F   ,    G
'
scan_vname: ret1 'A'
scan_variable: ', B,C,D , E  ,  F   ,    G
' vname='A'
scan_variable: Ary test ', B,C,D , E  ,  F   ,    G
'
check_literal:lit='(' idx=7 ', B,C,D , E  ,  F   ,    G
'
check_literal:After drop space:'(' idx=7 ', B,C,D , E  ,  F   ,    G
'
  '(' != ','
check_literal: ret0
scan_variable:ret1 vname='A' is str:0 int:0 flt:1 ary:0
   Frst:0 T:'A' exptype:f
(operator_precedence) 
@ is operator
token_is_function:
token_is_function:A is not function
token_is_variable: tok:'A'
token_is_function:
token_is_function:A is not function
(init_get_name) 
init_get_name:'A'
(init_get_name) 
init_get_name:'A'
(get_name) 
get_name:gn:'A'
process_token:type:f req_type:i
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f f A
scan_localglobal: LOCAL variable:'S–Gþ'
VAR INFO: '                 A' gbl:0 ref:0 int:0 flt:1 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
check_literal:lit=' ,' idx=7 ', B,C,D , E  ,  F   ,    G
'
    dropping space
check_literal:After drop space:',' idx=7 ', B,C,D , E  ,  F   ,    G
'
check_literal:After while(): B,C,D , E  ,  F   ,    G

check_literal:ret1 
scan_literal:lit=' ,' ', B,C,D , E  ,  F   ,    G
'
scan_literal:After drop space:, B,C,D , E  ,  F   ,    G

scan_literal:while loop:, B,C,D , E  ,  F   ,    G

   Frst:0 T:',' exptype:f
(operator_precedence) 
@ is operator
(process_token) 
Pop 2
Pop '@'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_operator) [f,()] f f @
token_is_function:
token_is_function:@ is not function
(output_sub_start)
check_variable:
check_vname 'B,C,D , E  ,  F   ,    G
':
check_vname ret1 ',C,D , E  ,  F   ,    G
':
check_variable: ',C,D , E  ,  F   ,    G
'
check_variable: Ary test ',C,D , E  ,  F   ,    G
'
check_literal:lit='(' idx=10 ',C,D , E  ,  F   ,    G
'
check_literal:After drop space:'(' idx=10 ',C,D , E  ,  F   ,    G
'
  '(' != ','
check_literal: ret0
check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
check_variable:ret1 
scan_variable:
scan_vname: ' B,C,D , E  ,  F   ,    G
'
scan_vname: ret1 'B'
scan_variable: ',C,D , E  ,  F   ,    G
' vname='B'
scan_variable: Ary test ',C,D , E  ,  F   ,    G
'
check_literal:lit='(' idx=10 ',C,D , E  ,  F   ,    G
'
check_literal:After drop space:'(' idx=10 ',C,D , E  ,  F   ,    G
'
  '(' != ','
check_literal: ret0
scan_variable:ret1 vname='B' is str:0 int:0 flt:1 ary:0
   Frst:0 T:'B' exptype:U
token_is_function:
token_is_function:B is not function
token_is_variable: tok:'B'
token_is_function:
token_is_function:B is not function
(init_get_name) 
init_get_name:'B'
(init_get_name) 
init_get_name:'B'
(get_name) 
get_name:gn:'B'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:f Outtype:f
( output_variable) [f,()] f f B
scan_localglobal: LOCAL variable:'S–Gþ'
VAR INFO: '                 B' gbl:0 ref:0 int:0 flt:1 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
check_literal:lit=' ,' idx=10 ',C,D , E  ,  F   ,    G
'
    dropping space
check_literal:After drop space:',' idx=10 ',C,D , E  ,  F   ,    G
'
check_literal:After while():C,D , E  ,  F   ,    G

check_literal:ret1 
scan_literal:lit=' ,' ',C,D , E  ,  F   ,    G
'
scan_literal:After drop space:,C,D , E  ,  F   ,    G

scan_literal:while loop:,C,D , E  ,  F   ,    G

   Frst:0 T:',' exptype:f
(output_sub_start)
check_variable:
check_vname 'C,D , E  ,  F   ,    G
':
check_vname ret1 ',D , E  ,  F   ,    G
':
check_variable: ',D , E  ,  F   ,    G
'
check_variable: Ary test ',D , E  ,  F   ,    G
'
check_literal:lit='(' idx=12 ',D , E  ,  F   ,    G
'
check_literal:After drop space:'(' idx=12 ',D , E  ,  F   ,    G
'
  '(' != ','
check_literal: ret0
check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
check_variable:ret1 
scan_variable:
scan_vname: 'C,D , E  ,  F   ,    G
'
scan_vname: ret1 'C'
scan_variable: ',D , E  ,  F   ,    G
' vname='C'
scan_variable: Ary test ',D , E  ,  F   ,    G
'
check_literal:lit='(' idx=12 ',D , E  ,  F   ,    G
'
check_literal:After drop space:'(' idx=12 ',D , E  ,  F   ,    G
'
  '(' != ','
check_literal: ret0
scan_variable:ret1 vname='C' is str:0 int:0 flt:1 ary:0
   Frst:0 T:'C' exptype:U
token_is_function:
token_is_function:C is not function
token_is_variable: tok:'C'
token_is_function:
token_is_function:C is not function
(init_get_name) 
init_get_name:'C'
(init_get_name) 
init_get_name:'C'
(get_name) 
get_name:gn:'C'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:f Outtype:f
( output_variable) [f,()] f f C
scan_localglobal: LOCAL variable:'S–Gþ'
VAR INFO: '                 C' gbl:0 ref:0 int:0 flt:1 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
check_literal:lit=' ,' idx=12 ',D , E  ,  F   ,    G
'
    dropping space
check_literal:After drop space:',' idx=12 ',D , E  ,  F   ,    G
'
check_literal:After while():D , E  ,  F   ,    G

check_literal:ret1 
scan_literal:lit=' ,' ',D , E  ,  F   ,    G
'
scan_literal:After drop space:,D , E  ,  F   ,    G

scan_literal:while loop:,D , E  ,  F   ,    G

   Frst:0 T:',' exptype:f
(output_sub_start)
check_variable:
check_vname 'D , E  ,  F   ,    G
':
check_vname ret1 ' , E  ,  F   ,    G
':
check_variable: ' , E  ,  F   ,    G
'
check_variable: Ary test ' , E  ,  F   ,    G
'
check_literal:lit='(' idx=14 ' , E  ,  F   ,    G
'
check_literal:After drop space:'(' idx=14 ' , E  ,  F   ,    G
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
check_variable:ret1 
scan_variable:
scan_vname: 'D , E  ,  F   ,    G
'
scan_vname: ret1 'D'
scan_variable: ' , E  ,  F   ,    G
' vname='D'
scan_variable: Ary test ' , E  ,  F   ,    G
'
check_literal:lit='(' idx=14 ' , E  ,  F   ,    G
'
check_literal:After drop space:'(' idx=14 ' , E  ,  F   ,    G
'
  '(' != ' '
check_literal: ret0
scan_variable:ret1 vname='D' is str:0 int:0 flt:1 ary:0
   Frst:0 T:'D' exptype:U
token_is_function:
token_is_function:D is not function
token_is_variable: tok:'D'
token_is_function:
token_is_function:D is not function
(init_get_name) 
init_get_name:'D'
(init_get_name) 
init_get_name:'D'
(get_name) 
get_name:gn:'D'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:f Outtype:f
( output_variable) [f,()] f f D
scan_localglobal: LOCAL variable:'S–Gþ'
VAR INFO: '                 D' gbl:0 ref:0 int:0 flt:1 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
check_literal:lit=' ,' idx=14 ' , E  ,  F   ,    G
'
    dropping space
check_literal:After drop space:',' idx=15 ', E  ,  F   ,    G
'
check_literal:After while(): E  ,  F   ,    G

check_literal:ret1 
scan_literal:lit=' ,' ' , E  ,  F   ,    G
'
scan_literal:After drop space:, E  ,  F   ,    G

scan_literal:while loop:, E  ,  F   ,    G

   Frst:0 T:',' exptype:f
(output_sub_start)
check_variable:
check_vname 'E  ,  F   ,    G
':
check_vname ret1 '  ,  F   ,    G
':
check_variable: '  ,  F   ,    G
'
check_variable: Ary test '  ,  F   ,    G
'
check_literal:lit='(' idx=18 '  ,  F   ,    G
'
check_literal:After drop space:'(' idx=18 '  ,  F   ,    G
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
check_variable:ret1 
scan_variable:
scan_vname: ' E  ,  F   ,    G
'
scan_vname: ret1 'E'
scan_variable: '  ,  F   ,    G
' vname='E'
scan_variable: Ary test '  ,  F   ,    G
'
check_literal:lit='(' idx=18 '  ,  F   ,    G
'
check_literal:After drop space:'(' idx=18 '  ,  F   ,    G
'
  '(' != ' '
check_literal: ret0
scan_variable:ret1 vname='E' is str:0 int:0 flt:1 ary:0
   Frst:0 T:'E' exptype:U
token_is_function:
token_is_function:E is not function
token_is_variable: tok:'E'
token_is_function:
token_is_function:E is not function
(init_get_name) 
init_get_name:'E'
(init_get_name) 
init_get_name:'E'
(get_name) 
get_name:gn:'E'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:f Outtype:f
( output_variable) [f,()] f f E
scan_localglobal: LOCAL variable:'S–Gþ'
VAR INFO: '                 E' gbl:0 ref:0 int:0 flt:1 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
check_literal:lit=' ,' idx=18 '  ,  F   ,    G
'
    dropping space
check_literal:After drop space:',' idx=20 ',  F   ,    G
'
check_literal:After while():  F   ,    G

check_literal:ret1 
scan_literal:lit=' ,' '  ,  F   ,    G
'
scan_literal:After drop space:,  F   ,    G

scan_literal:while loop:,  F   ,    G

   Frst:0 T:',' exptype:f
(output_sub_start)
check_variable:
check_vname 'F   ,    G
':
check_vname ret1 '   ,    G
':
check_variable: '   ,    G
'
check_variable: Ary test '   ,    G
'
check_literal:lit='(' idx=24 '   ,    G
'
check_literal:After drop space:'(' idx=24 '   ,    G
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
check_variable:ret1 
scan_variable:
scan_vname: '  F   ,    G
'
scan_vname: ret1 'F'
scan_variable: '   ,    G
' vname='F'
scan_variable: Ary test '   ,    G
'
check_literal:lit='(' idx=24 '   ,    G
'
check_literal:After drop space:'(' idx=24 '   ,    G
'
  '(' != ' '
check_literal: ret0
scan_variable:ret1 vname='F' is str:0 int:0 flt:1 ary:0
   Frst:0 T:'F' exptype:U
token_is_function:
token_is_function:F is not function
token_is_variable: tok:'F'
token_is_function:
token_is_function:F is not function
(init_get_name) 
init_get_name:'F'
(init_get_name) 
init_get_name:'F'
(get_name) 
get_name:gn:'F'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:f Outtype:f
( output_variable) [f,()] f f F
scan_localglobal: LOCAL variable:'S–Gþ'
VAR INFO: '                 F' gbl:0 ref:0 int:0 flt:1 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
check_literal:lit=' ,' idx=24 '   ,    G
'
    dropping space
check_literal:After drop space:',' idx=27 ',    G
'
check_literal:After while():    G

check_literal:ret1 
scan_literal:lit=' ,' '   ,    G
'
scan_literal:After drop space:,    G

scan_literal:while loop:,    G

   Frst:0 T:',' exptype:f
(output_sub_start)
check_variable:
check_vname 'G
':
check_vname ret1 '
':
check_variable: '
'
check_variable: Ary test '
'
check_literal:lit='(' idx=33 '
'
check_literal:After drop space:'(' idx=33 '
'
  '(' != '
'
check_literal: ret0
check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
check_variable:ret1 
scan_variable:
scan_vname: '    G
'
scan_vname: ret1 'G'
scan_variable: '
' vname='G'
scan_variable: Ary test '
'
check_literal:lit='(' idx=33 '
'
check_literal:After drop space:'(' idx=33 '
'
  '(' != '
'
check_literal: ret0
scan_variable:ret1 vname='G' is str:0 int:0 flt:1 ary:0
   Frst:0 T:'G' exptype:U
token_is_function:
token_is_function:G is not function
token_is_variable: tok:'G'
token_is_function:
token_is_function:G is not function
(init_get_name) 
init_get_name:'G'
(init_get_name) 
init_get_name:'G'
(get_name) 
get_name:gn:'G'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:f Outtype:f
( output_variable) [f,()] f f G
scan_localglobal: LOCAL variable:'S–Gþ'
VAR INFO: '                 G' gbl:0 ref:0 int:0 flt:1 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
check_literal:lit=' ,' idx=33 '
'
    dropping space
check_literal:After drop space:',' idx=34 ''
check_literal  ret0 Empty test string
check_variable:
check_vname '':
check_vname ret0 '':
check_variable:ret0 
scan_localglobal:ret1
scan_declare:ret 1
(translate_file) 
=======================cline==========================
(translate_file) 
==LOCAL A%
==
check_declare:
check_literal:lit=' LOCAL' idx=0 'LOCAL A%
'
    dropping space
check_literal:After drop space:'LOCAL' idx=0 'LOCAL A%
'
check_literal:After while(): A%

check_literal:ret1 
check_declare:ret 1
scan_declare:
check_literal:lit=' LOCAL' idx=0 'LOCAL A%
'
    dropping space
check_literal:After drop space:'LOCAL' idx=0 'LOCAL A%
'
check_literal:After while(): A%

check_literal:ret1 
scan_localglobal:
scan_literal:lit=' LOCAL' 'LOCAL A%
'
scan_literal:After drop space:LOCAL A%

scan_literal:while loop:LOCAL A%

scan_literal:while loop:OCAL A%

scan_literal:while loop:CAL A%

scan_literal:while loop:AL A%

scan_literal:while loop:L A%

   Frst:0 T:'LOCAL' exptype:f
token_is_function:
token_is_function:LOCAL is not function
token_is_variable: tok:'LOCAL'
token_is_function:
token_is_function:LOCAL is not function
(init_get_name) 
init_get_name:'LOCAL'
(init_get_name) 
init_get_name:'LOCAL'
(get_name) 
get_name:gn:'LOCAL'
process_token:type:f req_type:i
modify_expression_type:Inittype:f Intype:f Outtype:f
   Frst:0 T:'@' exptype:f
(operator_precedence) 
@ is operator
'@' is operator
(process_token) 
Token is operator o1 name:@ o2 name:
(process_token) 
opr1:9 opr2:0
Push 1
 Push:'@'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: @ type:1
(op_stack_print) 
------------------

( output_variable) [f,()] f f LOCAL
check_variable:
check_vname 'A%
':
check_vname ret1 '%
':
check_variable: '%
'
check_variable: Ary test '
'
check_literal:lit='(' idx=8 '
'
check_literal:After drop space:'(' idx=8 '
'
  '(' != '
'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
scan_variable:
scan_vname: ' A%
'
scan_vname: ret1 'A'
scan_variable: '%
' vname='A'
scan_variable: Ary test '
'
check_literal:lit='(' idx=8 '
'
check_literal:After drop space:'(' idx=8 '
'
  '(' != '
'
check_literal: ret0
scan_variable:ret1 vname='A%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'A%' exptype:f
(operator_precedence) 
@ is operator
token_is_function:
token_is_function:A% is not function
token_is_variable: tok:'A%'
token_is_function:
token_is_function:A% is not function
(init_get_name) 
init_get_name:'A%'
(init_get_name) 
init_get_name:'A%'
(get_name) 
get_name:gn:'A%'
process_token:type:f req_type:i
modify_expression_type:Inittype:f Intype:i Outtype:f
( output_variable) [f,()] f f A%
scan_localglobal: LOCAL variable:'S–Gþ'
VAR INFO: '                A%' gbl:0 ref:0 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
check_literal:lit=' ,' idx=8 '
'
    dropping space
check_literal:After drop space:',' idx=9 ''
check_literal  ret0 Empty test string
check_variable:
check_vname '':
check_vname ret0 '':
check_variable:ret0 
scan_localglobal:ret1
scan_declare:ret 1
(translate_file) 
=======================cline==========================
(translate_file) 
==LOCAL A%(10)
==
check_declare:
check_literal:lit=' LOCAL' idx=0 'LOCAL A%(10)
'
    dropping space
check_literal:After drop space:'LOCAL' idx=0 'LOCAL A%(10)
'
check_literal:After while(): A%(10)

check_literal:ret1 
check_declare:ret 1
scan_declare:
check_literal:lit=' LOCAL' idx=0 'LOCAL A%(10)
'
    dropping space
check_literal:After drop space:'LOCAL' idx=0 'LOCAL A%(10)
'
check_literal:After while(): A%(10)

check_literal:ret1 
scan_localglobal:
scan_literal:lit=' LOCAL' 'LOCAL A%(10)
'
scan_literal:After drop space:LOCAL A%(10)

scan_literal:while loop:LOCAL A%(10)

scan_literal:while loop:OCAL A%(10)

scan_literal:while loop:CAL A%(10)

scan_literal:while loop:AL A%(10)

scan_literal:while loop:L A%(10)

   Frst:0 T:'LOCAL' exptype:f
(operator_precedence) 
@ is operator
token_is_function:
token_is_function:LOCAL is not function
token_is_variable: tok:'LOCAL'
token_is_function:
token_is_function:LOCAL is not function
(init_get_name) 
init_get_name:'LOCAL'
(init_get_name) 
init_get_name:'LOCAL'
(get_name) 
get_name:gn:'LOCAL'
process_token:type:f req_type:i
modify_expression_type:Inittype:f Intype:f Outtype:f
   Frst:0 T:'@' exptype:f
(operator_precedence) 
@ is operator
(operator_precedence) 
@ is operator
'@' is operator
(process_token) 
Token is operator o1 name:@ o2 name:@
(process_token) 
opr1:9 opr2:9
(operator_precedence) 
@ is operator
(operator_precedence) 
@ is operator
(operator_left_assoc) 
@ is operator
Push 1
 Push:'@'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (2)

(op_stack_print) 
000: @ type:1
(op_stack_print) 
001: @ type:1
(op_stack_print) 
------------------

( output_variable) [f,()] f f LOCAL
check_variable:
check_vname 'A%(10)
':
check_vname ret1 '%(10)
':
check_variable: '%(10)
'
check_variable: Ary test '(10)
'
check_literal:lit='(' idx=8 '(10)
'
check_literal:After drop space:'(' idx=8 '(10)
'
check_literal:After while():10)

check_literal:ret1 
check_variable: is array
check_expression: '10)
'
check_eitem: '10)
'
check_operator: 10)

check_literal:lit=',' idx=9 '10)
'
check_literal:After drop space:',' idx=9 '10)
'
  ',' != '1'
check_literal: ret0
check_operator:ret0
check_function: '10)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=9 '10)
'
    dropping space
check_literal:After drop space:'%' idx=9 '10)
'
  '%' != '1'
check_literal: ret0
check_literal:lit=' "' idx=9 '10)
'
    dropping space
check_literal:After drop space:'"' idx=9 '10)
'
  '"' != '1'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '10)
'
check_integer:ret1
check_number: ret1
check_eitem:ret1
check_eitem: ')
'
check_operator: )

check_literal:lit=',' idx=11 ')
'
check_literal:After drop space:',' idx=11 ')
'
  ',' != ')'
check_literal: ret0
check_operator:ret0
check_function: ')
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=11 ')
'
    dropping space
check_literal:After drop space:'%' idx=11 ')
'
  '%' != ')'
check_literal: ret0
check_literal:lit=' "' idx=11 ')
'
    dropping space
check_literal:After drop space:'"' idx=11 ')
'
  '"' != ')'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: ')
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname ')
':
check_vname ret0 ')
':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=11 ')
'
    dropping space
check_literal:After drop space:'(' idx=11 ')
'
  '(' != ')'
check_literal: ret0
check_sub_expr: ret0
check_eitem:ret0
check_expression:ret1 ')
'
check_literal:lit=' ,' idx=11 ')
'
    dropping space
check_literal:After drop space:',' idx=11 ')
'
  ',' != ')'
check_literal: ret0
check_literal:lit=' )' idx=11 ')
'
    dropping space
check_literal:After drop space:')' idx=11 ')
'
check_literal:After while():

check_literal:ret1 
check_variable:ret1 
scan_variable:
scan_vname: ' A%(10)
'
scan_vname: ret1 'A'
scan_variable: '%(10)
' vname='A'
scan_variable: Ary test '(10)
'
check_literal:lit='(' idx=8 '(10)
'
check_literal:After drop space:'(' idx=8 '(10)
'
check_literal:After while():10)

check_literal:ret1 
scan_literal:lit='(' '(10)
'
scan_literal:After drop space:(10)

scan_literal:while loop:(10)

   Frst:0 T:'(' exptype:f
(operator_precedence) 
@ is operator
(output_sub_start)
 Push:'('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (3)

(op_stack_print) 
000: @ type:1
(op_stack_print) 
001: @ type:1
(op_stack_print) 
002: ( type:16
(op_stack_print) 
------------------

scan_variable: is array
scan_integer:
scan_integer:ret1
   Frst:0 T:'10' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(f )] i i 10
scan_integer:ret1  10
check_literal:lit=' ,' idx=11 ')
'
    dropping space
check_literal:After drop space:',' idx=11 ')
'
  ',' != ')'
check_literal: ret0
scan_literal:lit=' )' ')
'
scan_literal:After drop space:)

scan_literal:while loop:)

   Frst:0 T:')' exptype:i
Pop 4
Pop '('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (2)

(op_stack_print) 
000: @ type:1
(op_stack_print) 
001: @ type:1
(op_stack_print) 
------------------

(  output_sub_end)
token_is_function:
token_is_function:@ is not function
(  output_sub_end)
scan_variable:ret1 vname='A%' is str:0 int:1 flt:0 ary:1
   Frst:0 T:'A%' exptype:f
(operator_precedence) 
@ is operator
token_is_function:
token_is_function:A% is not function
token_is_variable: tok:'A%'
token_is_function:
token_is_function:A% is not function
(init_get_name) 
init_get_name:'A%'
(init_get_name) 
init_get_name:'A%'
(get_name) 
get_name:gn:'A%'
process_token:type:f req_type:i
modify_expression_type:Inittype:f Intype:i Outtype:f
   Frst:0 T:'@' exptype:f
(operator_precedence) 
@ is operator
(operator_precedence) 
@ is operator
'@' is operator
(process_token) 
Token is operator o1 name:@ o2 name:@
(process_token) 
opr1:9 opr2:9
(operator_precedence) 
@ is operator
(operator_precedence) 
@ is operator
(operator_left_assoc) 
@ is operator
Push 1
 Push:'@'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (3)

(op_stack_print) 
000: @ type:1
(op_stack_print) 
001: @ type:1
(op_stack_print) 
002: @ type:1
(op_stack_print) 
------------------

( output_variable) [f,()] f f A%
scan_localglobal: LOCAL variable:'S–Gþ'
VAR INFO: '                A%' gbl:0 ref:0 int:1 flt:0 str:0 ary:1 max_str:0 max_ary:10 num_ind:1
check_literal:lit=' ,' idx=12 '
'
    dropping space
check_literal:After drop space:',' idx=13 ''
check_literal  ret0 Empty test string
check_variable:
check_vname '':
check_vname ret0 '':
check_variable:ret0 
scan_localglobal:ret1
scan_declare:ret 1
(translate_file) 
=======================cline==========================
(translate_file) 
==LOCAL A%,B%
==
check_declare:
check_literal:lit=' LOCAL' idx=0 'LOCAL A%,B%
'
    dropping space
check_literal:After drop space:'LOCAL' idx=0 'LOCAL A%,B%
'
check_literal:After while(): A%,B%

check_literal:ret1 
check_declare:ret 1
scan_declare:
check_literal:lit=' LOCAL' idx=0 'LOCAL A%,B%
'
    dropping space
check_literal:After drop space:'LOCAL' idx=0 'LOCAL A%,B%
'
check_literal:After while(): A%,B%

check_literal:ret1 
scan_localglobal:
scan_literal:lit=' LOCAL' 'LOCAL A%,B%
'
scan_literal:After drop space:LOCAL A%,B%

scan_literal:while loop:LOCAL A%,B%

scan_literal:while loop:OCAL A%,B%

scan_literal:while loop:CAL A%,B%

scan_literal:while loop:AL A%,B%

scan_literal:while loop:L A%,B%

   Frst:0 T:'LOCAL' exptype:f
(operator_precedence) 
@ is operator
token_is_function:
token_is_function:LOCAL is not function
token_is_variable: tok:'LOCAL'
token_is_function:
token_is_function:LOCAL is not function
(init_get_name) 
init_get_name:'LOCAL'
(init_get_name) 
init_get_name:'LOCAL'
(get_name) 
get_name:gn:'LOCAL'
process_token:type:f req_type:i
modify_expression_type:Inittype:f Intype:f Outtype:f
   Frst:0 T:'@' exptype:f
(operator_precedence) 
@ is operator
(operator_precedence) 
@ is operator
'@' is operator
(process_token) 
Token is operator o1 name:@ o2 name:@
(process_token) 
opr1:9 opr2:9
(operator_precedence) 
@ is operator
(operator_precedence) 
@ is operator
(operator_left_assoc) 
@ is operator
Push 1
 Push:'@'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (4)

(op_stack_print) 
000: @ type:1
(op_stack_print) 
001: @ type:1
(op_stack_print) 
002: @ type:1
(op_stack_print) 
003: @ type:1
(op_stack_print) 
------------------

( output_variable) [f,()] f f LOCAL
check_variable:
check_vname 'A%,B%
':
check_vname ret1 '%,B%
':
check_variable: '%,B%
'
check_variable: Ary test ',B%
'
check_literal:lit='(' idx=8 ',B%
'
check_literal:After drop space:'(' idx=8 ',B%
'
  '(' != ','
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
scan_variable:
scan_vname: ' A%,B%
'
scan_vname: ret1 'A'
scan_variable: '%,B%
' vname='A'
scan_variable: Ary test ',B%
'
check_literal:lit='(' idx=8 ',B%
'
check_literal:After drop space:'(' idx=8 ',B%
'
  '(' != ','
check_literal: ret0
scan_variable:ret1 vname='A%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'A%' exptype:f
(operator_precedence) 
@ is operator
token_is_function:
token_is_function:A% is not function
token_is_variable: tok:'A%'
token_is_function:
token_is_function:A% is not function
(init_get_name) 
init_get_name:'A%'
(init_get_name) 
init_get_name:'A%'
(get_name) 
get_name:gn:'A%'
process_token:type:f req_type:i
modify_expression_type:Inittype:f Intype:i Outtype:f
( output_variable) [f,()] f f A%
scan_localglobal: LOCAL variable:'S–Gþ'
VAR INFO: '                A%' gbl:0 ref:0 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
check_literal:lit=' ,' idx=8 ',B%
'
    dropping space
check_literal:After drop space:',' idx=8 ',B%
'
check_literal:After while():B%

check_literal:ret1 
scan_literal:lit=' ,' ',B%
'
scan_literal:After drop space:,B%

scan_literal:while loop:,B%

   Frst:0 T:',' exptype:f
(operator_precedence) 
@ is operator
(process_token) 
Pop 2
Pop '@'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (3)

(op_stack_print) 
000: @ type:1
(op_stack_print) 
001: @ type:1
(op_stack_print) 
002: @ type:1
(op_stack_print) 
------------------

( output_operator) [f,()] f f @
token_is_function:
token_is_function:@ is not function
(process_token) 
Pop 2
Pop '@'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (2)

(op_stack_print) 
000: @ type:1
(op_stack_print) 
001: @ type:1
(op_stack_print) 
------------------

( output_operator) [f,()] f f @
token_is_function:
token_is_function:@ is not function
(process_token) 
Pop 2
Pop '@'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: @ type:1
(op_stack_print) 
------------------

( output_operator) [f,()] f f @
token_is_function:
token_is_function:@ is not function
(process_token) 
Pop 2
Pop '@'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_operator) [f,()] f f @
token_is_function:
token_is_function:@ is not function
(output_sub_start)
check_variable:
check_vname 'B%
':
check_vname ret1 '%
':
check_variable: '%
'
check_variable: Ary test '
'
check_literal:lit='(' idx=11 '
'
check_literal:After drop space:'(' idx=11 '
'
  '(' != '
'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
scan_variable:
scan_vname: 'B%
'
scan_vname: ret1 'B'
scan_variable: '%
' vname='B'
scan_variable: Ary test '
'
check_literal:lit='(' idx=11 '
'
check_literal:After drop space:'(' idx=11 '
'
  '(' != '
'
check_literal: ret0
scan_variable:ret1 vname='B%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'B%' exptype:U
token_is_function:
token_is_function:B% is not function
token_is_variable: tok:'B%'
token_is_function:
token_is_function:B% is not function
(init_get_name) 
init_get_name:'B%'
(init_get_name) 
init_get_name:'B%'
(get_name) 
get_name:gn:'B%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] i i B%
scan_localglobal: LOCAL variable:'S–Gþ'
VAR INFO: '                B%' gbl:0 ref:0 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
check_literal:lit=' ,' idx=11 '
'
    dropping space
check_literal:After drop space:',' idx=12 ''
check_literal  ret0 Empty test string
check_variable:
check_vname '':
check_vname ret0 '':
check_variable:ret0 
scan_localglobal:ret1
scan_declare:ret 1
(translate_file) 
=======================cline==========================
(translate_file) 
==LOCAL A%(1),B%(2),  A%(1000),    B%(2000)
==
check_declare:
check_literal:lit=' LOCAL' idx=0 'LOCAL A%(1),B%(2),  A%(1000),    B%(2000)
'
    dropping space
check_literal:After drop space:'LOCAL' idx=0 'LOCAL A%(1),B%(2),  A%(1000),    B%(2000)
'
check_literal:After while(): A%(1),B%(2),  A%(1000),    B%(2000)

check_literal:ret1 
check_declare:ret 1
scan_declare:
check_literal:lit=' LOCAL' idx=0 'LOCAL A%(1),B%(2),  A%(1000),    B%(2000)
'
    dropping space
check_literal:After drop space:'LOCAL' idx=0 'LOCAL A%(1),B%(2),  A%(1000),    B%(2000)
'
check_literal:After while(): A%(1),B%(2),  A%(1000),    B%(2000)

check_literal:ret1 
scan_localglobal:
scan_literal:lit=' LOCAL' 'LOCAL A%(1),B%(2),  A%(1000),    B%(2000)
'
scan_literal:After drop space:LOCAL A%(1),B%(2),  A%(1000),    B%(2000)

scan_literal:while loop:LOCAL A%(1),B%(2),  A%(1000),    B%(2000)

scan_literal:while loop:OCAL A%(1),B%(2),  A%(1000),    B%(2000)

scan_literal:while loop:CAL A%(1),B%(2),  A%(1000),    B%(2000)

scan_literal:while loop:AL A%(1),B%(2),  A%(1000),    B%(2000)

scan_literal:while loop:L A%(1),B%(2),  A%(1000),    B%(2000)

   Frst:0 T:'LOCAL' exptype:i
token_is_function:
token_is_function:LOCAL is not function
token_is_variable: tok:'LOCAL'
token_is_function:
token_is_function:LOCAL is not function
(init_get_name) 
init_get_name:'LOCAL'
(init_get_name) 
init_get_name:'LOCAL'
(get_name) 
get_name:gn:'LOCAL'
process_token:type:i req_type:i
modify_expression_type:Inittype:i Intype:f Outtype:f
   Frst:0 T:'@' exptype:f
(operator_precedence) 
@ is operator
'@' is operator
(process_token) 
Token is operator o1 name:@ o2 name:
(process_token) 
opr1:9 opr2:0
Push 1
 Push:'@'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: @ type:1
(op_stack_print) 
------------------

( output_variable) [f,()] f f LOCAL
check_variable:
check_vname 'A%(1),B%(2),  A%(1000),    B%(2000)
':
check_vname ret1 '%(1),B%(2),  A%(1000),    B%(2000)
':
check_variable: '%(1),B%(2),  A%(1000),    B%(2000)
'
check_variable: Ary test '(1),B%(2),  A%(1000),    B%(2000)
'
check_literal:lit='(' idx=8 '(1),B%(2),  A%(1000),    B%(2000)
'
check_literal:After drop space:'(' idx=8 '(1),B%(2),  A%(1000),    B%(2000)
'
check_literal:After while():1),B%(2),  A%(1000),    B%(2000)

check_literal:ret1 
check_variable: is array
check_expression: '1),B%(2),  A%(1000),    B%(2000)
'
check_eitem: '1),B%(2),  A%(1000),    B%(2000)
'
check_operator: 1),B%(2),  A%(1000),    B%(2000)

check_literal:lit=',' idx=9 '1),B%(2),  A%(1000),    B%(2000)
'
check_literal:After drop space:',' idx=9 '1),B%(2),  A%(1000),    B%(2000)
'
  ',' != '1'
check_literal: ret0
check_operator:ret0
check_function: '1),B%(2),  A%(1000),    B%(2000)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=9 '1),B%(2),  A%(1000),    B%(2000)
'
    dropping space
check_literal:After drop space:'%' idx=9 '1),B%(2),  A%(1000),    B%(2000)
'
  '%' != '1'
check_literal: ret0
check_literal:lit=' "' idx=9 '1),B%(2),  A%(1000),    B%(2000)
'
    dropping space
check_literal:After drop space:'"' idx=9 '1),B%(2),  A%(1000),    B%(2000)
'
  '"' != '1'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '1),B%(2),  A%(1000),    B%(2000)
'
check_integer:ret1
check_number: ret1
check_eitem:ret1
check_eitem: '),B%(2),  A%(1000),    B%(2000)
'
check_operator: ),B%(2),  A%(1000),    B%(2000)

check_literal:lit=',' idx=10 '),B%(2),  A%(1000),    B%(2000)
'
check_literal:After drop space:',' idx=10 '),B%(2),  A%(1000),    B%(2000)
'
  ',' != ')'
check_literal: ret0
check_operator:ret0
check_function: '),B%(2),  A%(1000),    B%(2000)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=10 '),B%(2),  A%(1000),    B%(2000)
'
    dropping space
check_literal:After drop space:'%' idx=10 '),B%(2),  A%(1000),    B%(2000)
'
  '%' != ')'
check_literal: ret0
check_literal:lit=' "' idx=10 '),B%(2),  A%(1000),    B%(2000)
'
    dropping space
check_literal:After drop space:'"' idx=10 '),B%(2),  A%(1000),    B%(2000)
'
  '"' != ')'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: '),B%(2),  A%(1000),    B%(2000)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname '),B%(2),  A%(1000),    B%(2000)
':
check_vname ret0 '),B%(2),  A%(1000),    B%(2000)
':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=10 '),B%(2),  A%(1000),    B%(2000)
'
    dropping space
check_literal:After drop space:'(' idx=10 '),B%(2),  A%(1000),    B%(2000)
'
  '(' != ')'
check_literal: ret0
check_sub_expr: ret0
check_eitem:ret0
check_expression:ret1 '),B%(2),  A%(1000),    B%(2000)
'
check_literal:lit=' ,' idx=10 '),B%(2),  A%(1000),    B%(2000)
'
    dropping space
check_literal:After drop space:',' idx=10 '),B%(2),  A%(1000),    B%(2000)
'
  ',' != ')'
check_literal: ret0
check_literal:lit=' )' idx=10 '),B%(2),  A%(1000),    B%(2000)
'
    dropping space
check_literal:After drop space:')' idx=10 '),B%(2),  A%(1000),    B%(2000)
'
check_literal:After while():,B%(2),  A%(1000),    B%(2000)

check_literal:ret1 
check_variable:ret1 
scan_variable:
scan_vname: ' A%(1),B%(2),  A%(1000),    B%(2000)
'
scan_vname: ret1 'A'
scan_variable: '%(1),B%(2),  A%(1000),    B%(2000)
' vname='A'
scan_variable: Ary test '(1),B%(2),  A%(1000),    B%(2000)
'
check_literal:lit='(' idx=8 '(1),B%(2),  A%(1000),    B%(2000)
'
check_literal:After drop space:'(' idx=8 '(1),B%(2),  A%(1000),    B%(2000)
'
check_literal:After while():1),B%(2),  A%(1000),    B%(2000)

check_literal:ret1 
scan_literal:lit='(' '(1),B%(2),  A%(1000),    B%(2000)
'
scan_literal:After drop space:(1),B%(2),  A%(1000),    B%(2000)

scan_literal:while loop:(1),B%(2),  A%(1000),    B%(2000)

   Frst:0 T:'(' exptype:f
(operator_precedence) 
@ is operator
(output_sub_start)
 Push:'('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (2)

(op_stack_print) 
000: @ type:1
(op_stack_print) 
001: ( type:16
(op_stack_print) 
------------------

scan_variable: is array
scan_integer:
scan_integer:ret1
   Frst:0 T:'1' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(f )] i i 1
scan_integer:ret1  1
check_literal:lit=' ,' idx=10 '),B%(2),  A%(1000),    B%(2000)
'
    dropping space
check_literal:After drop space:',' idx=10 '),B%(2),  A%(1000),    B%(2000)
'
  ',' != ')'
check_literal: ret0
scan_literal:lit=' )' '),B%(2),  A%(1000),    B%(2000)
'
scan_literal:After drop space:),B%(2),  A%(1000),    B%(2000)

scan_literal:while loop:),B%(2),  A%(1000),    B%(2000)

   Frst:0 T:')' exptype:i
Pop 4
Pop '('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: @ type:1
(op_stack_print) 
------------------

(  output_sub_end)
token_is_function:
token_is_function:@ is not function
(  output_sub_end)
scan_variable:ret1 vname='A%' is str:0 int:1 flt:0 ary:1
   Frst:0 T:'A%' exptype:f
(operator_precedence) 
@ is operator
token_is_function:
token_is_function:A% is not function
token_is_variable: tok:'A%'
token_is_function:
token_is_function:A% is not function
(init_get_name) 
init_get_name:'A%'
(init_get_name) 
init_get_name:'A%'
(get_name) 
get_name:gn:'A%'
process_token:type:f req_type:i
modify_expression_type:Inittype:f Intype:i Outtype:f
   Frst:0 T:'@' exptype:f
(operator_precedence) 
@ is operator
(operator_precedence) 
@ is operator
'@' is operator
(process_token) 
Token is operator o1 name:@ o2 name:@
(process_token) 
opr1:9 opr2:9
(operator_precedence) 
@ is operator
(operator_precedence) 
@ is operator
(operator_left_assoc) 
@ is operator
Push 1
 Push:'@'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (2)

(op_stack_print) 
000: @ type:1
(op_stack_print) 
001: @ type:1
(op_stack_print) 
------------------

( output_variable) [f,()] f f A%
scan_localglobal: LOCAL variable:'S–Gþ'
VAR INFO: '                A%' gbl:0 ref:0 int:1 flt:0 str:0 ary:1 max_str:0 max_ary:1 num_ind:1
check_literal:lit=' ,' idx=11 ',B%(2),  A%(1000),    B%(2000)
'
    dropping space
check_literal:After drop space:',' idx=11 ',B%(2),  A%(1000),    B%(2000)
'
check_literal:After while():B%(2),  A%(1000),    B%(2000)

check_literal:ret1 
scan_literal:lit=' ,' ',B%(2),  A%(1000),    B%(2000)
'
scan_literal:After drop space:,B%(2),  A%(1000),    B%(2000)

scan_literal:while loop:,B%(2),  A%(1000),    B%(2000)

   Frst:0 T:',' exptype:f
(operator_precedence) 
@ is operator
(process_token) 
Pop 2
Pop '@'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: @ type:1
(op_stack_print) 
------------------

( output_operator) [f,()] f f @
token_is_function:
token_is_function:@ is not function
(process_token) 
Pop 2
Pop '@'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_operator) [f,()] f f @
token_is_function:
token_is_function:@ is not function
(output_sub_start)
check_variable:
check_vname 'B%(2),  A%(1000),    B%(2000)
':
check_vname ret1 '%(2),  A%(1000),    B%(2000)
':
check_variable: '%(2),  A%(1000),    B%(2000)
'
check_variable: Ary test '(2),  A%(1000),    B%(2000)
'
check_literal:lit='(' idx=14 '(2),  A%(1000),    B%(2000)
'
check_literal:After drop space:'(' idx=14 '(2),  A%(1000),    B%(2000)
'
check_literal:After while():2),  A%(1000),    B%(2000)

check_literal:ret1 
check_variable: is array
check_expression: '2),  A%(1000),    B%(2000)
'
check_eitem: '2),  A%(1000),    B%(2000)
'
check_operator: 2),  A%(1000),    B%(2000)

check_literal:lit=',' idx=15 '2),  A%(1000),    B%(2000)
'
check_literal:After drop space:',' idx=15 '2),  A%(1000),    B%(2000)
'
  ',' != '2'
check_literal: ret0
check_operator:ret0
check_function: '2),  A%(1000),    B%(2000)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=15 '2),  A%(1000),    B%(2000)
'
    dropping space
check_literal:After drop space:'%' idx=15 '2),  A%(1000),    B%(2000)
'
  '%' != '2'
check_literal: ret0
check_literal:lit=' "' idx=15 '2),  A%(1000),    B%(2000)
'
    dropping space
check_literal:After drop space:'"' idx=15 '2),  A%(1000),    B%(2000)
'
  '"' != '2'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '2),  A%(1000),    B%(2000)
'
check_integer:ret1
check_number: ret1
check_eitem:ret1
check_eitem: '),  A%(1000),    B%(2000)
'
check_operator: ),  A%(1000),    B%(2000)

check_literal:lit=',' idx=16 '),  A%(1000),    B%(2000)
'
check_literal:After drop space:',' idx=16 '),  A%(1000),    B%(2000)
'
  ',' != ')'
check_literal: ret0
check_operator:ret0
check_function: '),  A%(1000),    B%(2000)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=16 '),  A%(1000),    B%(2000)
'
    dropping space
check_literal:After drop space:'%' idx=16 '),  A%(1000),    B%(2000)
'
  '%' != ')'
check_literal: ret0
check_literal:lit=' "' idx=16 '),  A%(1000),    B%(2000)
'
    dropping space
check_literal:After drop space:'"' idx=16 '),  A%(1000),    B%(2000)
'
  '"' != ')'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: '),  A%(1000),    B%(2000)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname '),  A%(1000),    B%(2000)
':
check_vname ret0 '),  A%(1000),    B%(2000)
':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=16 '),  A%(1000),    B%(2000)
'
    dropping space
check_literal:After drop space:'(' idx=16 '),  A%(1000),    B%(2000)
'
  '(' != ')'
check_literal: ret0
check_sub_expr: ret0
check_eitem:ret0
check_expression:ret1 '),  A%(1000),    B%(2000)
'
check_literal:lit=' ,' idx=16 '),  A%(1000),    B%(2000)
'
    dropping space
check_literal:After drop space:',' idx=16 '),  A%(1000),    B%(2000)
'
  ',' != ')'
check_literal: ret0
check_literal:lit=' )' idx=16 '),  A%(1000),    B%(2000)
'
    dropping space
check_literal:After drop space:')' idx=16 '),  A%(1000),    B%(2000)
'
check_literal:After while():,  A%(1000),    B%(2000)

check_literal:ret1 
check_variable:ret1 
scan_variable:
scan_vname: 'B%(2),  A%(1000),    B%(2000)
'
scan_vname: ret1 'B'
scan_variable: '%(2),  A%(1000),    B%(2000)
' vname='B'
scan_variable: Ary test '(2),  A%(1000),    B%(2000)
'
check_literal:lit='(' idx=14 '(2),  A%(1000),    B%(2000)
'
check_literal:After drop space:'(' idx=14 '(2),  A%(1000),    B%(2000)
'
check_literal:After while():2),  A%(1000),    B%(2000)

check_literal:ret1 
scan_literal:lit='(' '(2),  A%(1000),    B%(2000)
'
scan_literal:After drop space:(2),  A%(1000),    B%(2000)

scan_literal:while loop:(2),  A%(1000),    B%(2000)

   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: ( type:16
(op_stack_print) 
------------------

scan_variable: is array
scan_integer:
scan_integer:ret1
   Frst:0 T:'2' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U )] i i 2
scan_integer:ret1  2
check_literal:lit=' ,' idx=16 '),  A%(1000),    B%(2000)
'
    dropping space
check_literal:After drop space:',' idx=16 '),  A%(1000),    B%(2000)
'
  ',' != ')'
check_literal: ret0
scan_literal:lit=' )' '),  A%(1000),    B%(2000)
'
scan_literal:After drop space:),  A%(1000),    B%(2000)

scan_literal:while loop:),  A%(1000),    B%(2000)

   Frst:0 T:')' exptype:i
Pop 4
Pop '('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

(  output_sub_end)
token_is_function:
token_is_function: is not function
(  output_sub_end)
scan_variable:ret1 vname='B%' is str:0 int:1 flt:0 ary:1
   Frst:0 T:'B%' exptype:U
token_is_function:
token_is_function:B% is not function
token_is_variable: tok:'B%'
token_is_function:
token_is_function:B% is not function
(init_get_name) 
init_get_name:'B%'
(init_get_name) 
init_get_name:'B%'
(get_name) 
get_name:gn:'B%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
   Frst:0 T:'@' exptype:i
(operator_precedence) 
@ is operator
'@' is operator
(process_token) 
Token is operator o1 name:@ o2 name:
(process_token) 
opr1:9 opr2:0
Push 1
 Push:'@'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: @ type:0
(op_stack_print) 
------------------

( output_variable) [i,()] i i B%
scan_localglobal: LOCAL variable:'S–Gþ'
VAR INFO: '                B%' gbl:0 ref:0 int:1 flt:0 str:0 ary:1 max_str:0 max_ary:2 num_ind:1
check_literal:lit=' ,' idx=17 ',  A%(1000),    B%(2000)
'
    dropping space
check_literal:After drop space:',' idx=17 ',  A%(1000),    B%(2000)
'
check_literal:After while():  A%(1000),    B%(2000)

check_literal:ret1 
scan_literal:lit=' ,' ',  A%(1000),    B%(2000)
'
scan_literal:After drop space:,  A%(1000),    B%(2000)

scan_literal:while loop:,  A%(1000),    B%(2000)

   Frst:0 T:',' exptype:i
(operator_precedence) 
@ is operator
(process_token) 
Pop 2
Pop '@'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_operator) [i,()] i i @
token_is_function:
token_is_function:@ is not function
(output_sub_start)
check_variable:
check_vname 'A%(1000),    B%(2000)
':
check_vname ret1 '%(1000),    B%(2000)
':
check_variable: '%(1000),    B%(2000)
'
check_variable: Ary test '(1000),    B%(2000)
'
check_literal:lit='(' idx=22 '(1000),    B%(2000)
'
check_literal:After drop space:'(' idx=22 '(1000),    B%(2000)
'
check_literal:After while():1000),    B%(2000)

check_literal:ret1 
check_variable: is array
check_expression: '1000),    B%(2000)
'
check_eitem: '1000),    B%(2000)
'
check_operator: 1000),    B%(2000)

check_literal:lit=',' idx=23 '1000),    B%(2000)
'
check_literal:After drop space:',' idx=23 '1000),    B%(2000)
'
  ',' != '1'
check_literal: ret0
check_operator:ret0
check_function: '1000),    B%(2000)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=23 '1000),    B%(2000)
'
    dropping space
check_literal:After drop space:'%' idx=23 '1000),    B%(2000)
'
  '%' != '1'
check_literal: ret0
check_literal:lit=' "' idx=23 '1000),    B%(2000)
'
    dropping space
check_literal:After drop space:'"' idx=23 '1000),    B%(2000)
'
  '"' != '1'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
isfloatdigit:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '1000),    B%(2000)
'
check_integer:ret1
check_number: ret1
check_eitem:ret1
check_eitem: '),    B%(2000)
'
check_operator: ),    B%(2000)

check_literal:lit=',' idx=27 '),    B%(2000)
'
check_literal:After drop space:',' idx=27 '),    B%(2000)
'
  ',' != ')'
check_literal: ret0
check_operator:ret0
check_function: '),    B%(2000)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=27 '),    B%(2000)
'
    dropping space
check_literal:After drop space:'%' idx=27 '),    B%(2000)
'
  '%' != ')'
check_literal: ret0
check_literal:lit=' "' idx=27 '),    B%(2000)
'
    dropping space
check_literal:After drop space:'"' idx=27 '),    B%(2000)
'
  '"' != ')'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: '),    B%(2000)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname '),    B%(2000)
':
check_vname ret0 '),    B%(2000)
':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=27 '),    B%(2000)
'
    dropping space
check_literal:After drop space:'(' idx=27 '),    B%(2000)
'
  '(' != ')'
check_literal: ret0
check_sub_expr: ret0
check_eitem:ret0
check_expression:ret1 '),    B%(2000)
'
check_literal:lit=' ,' idx=27 '),    B%(2000)
'
    dropping space
check_literal:After drop space:',' idx=27 '),    B%(2000)
'
  ',' != ')'
check_literal: ret0
check_literal:lit=' )' idx=27 '),    B%(2000)
'
    dropping space
check_literal:After drop space:')' idx=27 '),    B%(2000)
'
check_literal:After while():,    B%(2000)

check_literal:ret1 
check_variable:ret1 
scan_variable:
scan_vname: '  A%(1000),    B%(2000)
'
scan_vname: ret1 'A'
scan_variable: '%(1000),    B%(2000)
' vname='A'
scan_variable: Ary test '(1000),    B%(2000)
'
check_literal:lit='(' idx=22 '(1000),    B%(2000)
'
check_literal:After drop space:'(' idx=22 '(1000),    B%(2000)
'
check_literal:After while():1000),    B%(2000)

check_literal:ret1 
scan_literal:lit='(' '(1000),    B%(2000)
'
scan_literal:After drop space:(1000),    B%(2000)

scan_literal:while loop:(1000),    B%(2000)

   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: ( type:16
(op_stack_print) 
------------------

scan_variable: is array
scan_integer:
scan_integer:ret1
   Frst:0 T:'1000' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U )] i i 1000
scan_integer:ret1  1000
check_literal:lit=' ,' idx=27 '),    B%(2000)
'
    dropping space
check_literal:After drop space:',' idx=27 '),    B%(2000)
'
  ',' != ')'
check_literal: ret0
scan_literal:lit=' )' '),    B%(2000)
'
scan_literal:After drop space:),    B%(2000)

scan_literal:while loop:),    B%(2000)

   Frst:0 T:')' exptype:i
Pop 4
Pop '('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

(  output_sub_end)
token_is_function:
token_is_function: is not function
(  output_sub_end)
scan_variable:ret1 vname='A%' is str:0 int:1 flt:0 ary:1
   Frst:0 T:'A%' exptype:U
token_is_function:
token_is_function:A% is not function
token_is_variable: tok:'A%'
token_is_function:
token_is_function:A% is not function
(init_get_name) 
init_get_name:'A%'
(init_get_name) 
init_get_name:'A%'
(get_name) 
get_name:gn:'A%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
   Frst:0 T:'@' exptype:i
(operator_precedence) 
@ is operator
'@' is operator
(process_token) 
Token is operator o1 name:@ o2 name:
(process_token) 
opr1:9 opr2:0
Push 1
 Push:'@'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: @ type:0
(op_stack_print) 
------------------

( output_variable) [i,()] i i A%
scan_localglobal: LOCAL variable:'S–Gþ'
VAR INFO: '                A%' gbl:0 ref:0 int:1 flt:0 str:0 ary:1 max_str:0 max_ary:1000 num_ind:1
check_literal:lit=' ,' idx=28 ',    B%(2000)
'
    dropping space
check_literal:After drop space:',' idx=28 ',    B%(2000)
'
check_literal:After while():    B%(2000)

check_literal:ret1 
scan_literal:lit=' ,' ',    B%(2000)
'
scan_literal:After drop space:,    B%(2000)

scan_literal:while loop:,    B%(2000)

   Frst:0 T:',' exptype:i
(operator_precedence) 
@ is operator
(process_token) 
Pop 2
Pop '@'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_operator) [i,()] i i @
token_is_function:
token_is_function:@ is not function
(output_sub_start)
check_variable:
check_vname 'B%(2000)
':
check_vname ret1 '%(2000)
':
check_variable: '%(2000)
'
check_variable: Ary test '(2000)
'
check_literal:lit='(' idx=35 '(2000)
'
check_literal:After drop space:'(' idx=35 '(2000)
'
check_literal:After while():2000)

check_literal:ret1 
check_variable: is array
check_expression: '2000)
'
check_eitem: '2000)
'
check_operator: 2000)

check_literal:lit=',' idx=36 '2000)
'
check_literal:After drop space:',' idx=36 '2000)
'
  ',' != '2'
check_literal: ret0
check_operator:ret0
check_function: '2000)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=36 '2000)
'
    dropping space
check_literal:After drop space:'%' idx=36 '2000)
'
  '%' != '2'
check_literal: ret0
check_literal:lit=' "' idx=36 '2000)
'
    dropping space
check_literal:After drop space:'"' idx=36 '2000)
'
  '"' != '2'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
isfloatdigit:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '2000)
'
check_integer:ret1
check_number: ret1
check_eitem:ret1
check_eitem: ')
'
check_operator: )

check_literal:lit=',' idx=40 ')
'
check_literal:After drop space:',' idx=40 ')
'
  ',' != ')'
check_literal: ret0
check_operator:ret0
check_function: ')
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=40 ')
'
    dropping space
check_literal:After drop space:'%' idx=40 ')
'
  '%' != ')'
check_literal: ret0
check_literal:lit=' "' idx=40 ')
'
    dropping space
check_literal:After drop space:'"' idx=40 ')
'
  '"' != ')'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: ')
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname ')
':
check_vname ret0 ')
':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=40 ')
'
    dropping space
check_literal:After drop space:'(' idx=40 ')
'
  '(' != ')'
check_literal: ret0
check_sub_expr: ret0
check_eitem:ret0
check_expression:ret1 ')
'
check_literal:lit=' ,' idx=40 ')
'
    dropping space
check_literal:After drop space:',' idx=40 ')
'
  ',' != ')'
check_literal: ret0
check_literal:lit=' )' idx=40 ')
'
    dropping space
check_literal:After drop space:')' idx=40 ')
'
check_literal:After while():

check_literal:ret1 
check_variable:ret1 
scan_variable:
scan_vname: '    B%(2000)
'
scan_vname: ret1 'B'
scan_variable: '%(2000)
' vname='B'
scan_variable: Ary test '(2000)
'
check_literal:lit='(' idx=35 '(2000)
'
check_literal:After drop space:'(' idx=35 '(2000)
'
check_literal:After while():2000)

check_literal:ret1 
scan_literal:lit='(' '(2000)
'
scan_literal:After drop space:(2000)

scan_literal:while loop:(2000)

   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: ( type:16
(op_stack_print) 
------------------

scan_variable: is array
scan_integer:
scan_integer:ret1
   Frst:0 T:'2000' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U )] i i 2000
scan_integer:ret1  2000
check_literal:lit=' ,' idx=40 ')
'
    dropping space
check_literal:After drop space:',' idx=40 ')
'
  ',' != ')'
check_literal: ret0
scan_literal:lit=' )' ')
'
scan_literal:After drop space:)

scan_literal:while loop:)

   Frst:0 T:')' exptype:i
Pop 4
Pop '('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

(  output_sub_end)
token_is_function:
token_is_function: is not function
(  output_sub_end)
scan_variable:ret1 vname='B%' is str:0 int:1 flt:0 ary:1
   Frst:0 T:'B%' exptype:U
token_is_function:
token_is_function:B% is not function
token_is_variable: tok:'B%'
token_is_function:
token_is_function:B% is not function
(init_get_name) 
init_get_name:'B%'
(init_get_name) 
init_get_name:'B%'
(get_name) 
get_name:gn:'B%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
   Frst:0 T:'@' exptype:i
(operator_precedence) 
@ is operator
'@' is operator
(process_token) 
Token is operator o1 name:@ o2 name:
(process_token) 
opr1:9 opr2:0
Push 1
 Push:'@'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: @ type:0
(op_stack_print) 
------------------

( output_variable) [i,()] i i B%
scan_localglobal: LOCAL variable:'S–Gþ'
VAR INFO: '                B%' gbl:0 ref:0 int:1 flt:0 str:0 ary:1 max_str:0 max_ary:2000 num_ind:1
check_literal:lit=' ,' idx=41 '
'
    dropping space
check_literal:After drop space:',' idx=42 ''
check_literal  ret0 Empty test string
check_variable:
check_vname '':
check_vname ret0 '':
check_variable:ret0 
scan_localglobal:ret1
scan_declare:ret 1
(translate_file) 
=======================cline==========================
(translate_file) 
==LOCAL A$(10),B$(1,2)
==
check_declare:
check_literal:lit=' LOCAL' idx=0 'LOCAL A$(10),B$(1,2)
'
    dropping space
check_literal:After drop space:'LOCAL' idx=0 'LOCAL A$(10),B$(1,2)
'
check_literal:After while(): A$(10),B$(1,2)

check_literal:ret1 
check_declare:ret 1
scan_declare:
check_literal:lit=' LOCAL' idx=0 'LOCAL A$(10),B$(1,2)
'
    dropping space
check_literal:After drop space:'LOCAL' idx=0 'LOCAL A$(10),B$(1,2)
'
check_literal:After while(): A$(10),B$(1,2)

check_literal:ret1 
scan_localglobal:
scan_literal:lit=' LOCAL' 'LOCAL A$(10),B$(1,2)
'
scan_literal:After drop space:LOCAL A$(10),B$(1,2)

scan_literal:while loop:LOCAL A$(10),B$(1,2)

scan_literal:while loop:OCAL A$(10),B$(1,2)

scan_literal:while loop:CAL A$(10),B$(1,2)

scan_literal:while loop:AL A$(10),B$(1,2)

scan_literal:while loop:L A$(10),B$(1,2)

   Frst:0 T:'LOCAL' exptype:i
(operator_precedence) 
@ is operator
token_is_function:
token_is_function:LOCAL is not function
token_is_variable: tok:'LOCAL'
token_is_function:
token_is_function:LOCAL is not function
(init_get_name) 
init_get_name:'LOCAL'
(init_get_name) 
init_get_name:'LOCAL'
(get_name) 
get_name:gn:'LOCAL'
process_token:type:i req_type:i
modify_expression_type:Inittype:i Intype:f Outtype:f
   Frst:0 T:'@' exptype:f
(operator_precedence) 
@ is operator
(operator_precedence) 
@ is operator
'@' is operator
(process_token) 
Token is operator o1 name:@ o2 name:@
(process_token) 
opr1:9 opr2:9
(operator_precedence) 
@ is operator
(operator_precedence) 
@ is operator
(operator_left_assoc) 
@ is operator
Push 1
 Push:'@'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (2)

(op_stack_print) 
000: @ type:0
(op_stack_print) 
001: @ type:1
(op_stack_print) 
------------------

( output_variable) [f,()] f f LOCAL
check_variable:
check_vname 'A$(10),B$(1,2)
':
check_vname ret1 '$(10),B$(1,2)
':
check_variable: '$(10),B$(1,2)
'
check_variable: Ary test '(10),B$(1,2)
'
check_literal:lit='(' idx=8 '(10),B$(1,2)
'
check_literal:After drop space:'(' idx=8 '(10),B$(1,2)
'
check_literal:After while():10),B$(1,2)

check_literal:ret1 
check_variable: is array
check_expression: '10),B$(1,2)
'
check_eitem: '10),B$(1,2)
'
check_operator: 10),B$(1,2)

check_literal:lit=',' idx=9 '10),B$(1,2)
'
check_literal:After drop space:',' idx=9 '10),B$(1,2)
'
  ',' != '1'
check_literal: ret0
check_operator:ret0
check_function: '10),B$(1,2)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=9 '10),B$(1,2)
'
    dropping space
check_literal:After drop space:'%' idx=9 '10),B$(1,2)
'
  '%' != '1'
check_literal: ret0
check_literal:lit=' "' idx=9 '10),B$(1,2)
'
    dropping space
check_literal:After drop space:'"' idx=9 '10),B$(1,2)
'
  '"' != '1'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '10),B$(1,2)
'
check_integer:ret1
check_number: ret1
check_eitem:ret1
check_eitem: '),B$(1,2)
'
check_operator: ),B$(1,2)

check_literal:lit=',' idx=11 '),B$(1,2)
'
check_literal:After drop space:',' idx=11 '),B$(1,2)
'
  ',' != ')'
check_literal: ret0
check_operator:ret0
check_function: '),B$(1,2)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=11 '),B$(1,2)
'
    dropping space
check_literal:After drop space:'%' idx=11 '),B$(1,2)
'
  '%' != ')'
check_literal: ret0
check_literal:lit=' "' idx=11 '),B$(1,2)
'
    dropping space
check_literal:After drop space:'"' idx=11 '),B$(1,2)
'
  '"' != ')'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: '),B$(1,2)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname '),B$(1,2)
':
check_vname ret0 '),B$(1,2)
':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=11 '),B$(1,2)
'
    dropping space
check_literal:After drop space:'(' idx=11 '),B$(1,2)
'
  '(' != ')'
check_literal: ret0
check_sub_expr: ret0
check_eitem:ret0
check_expression:ret1 '),B$(1,2)
'
check_literal:lit=' ,' idx=11 '),B$(1,2)
'
    dropping space
check_literal:After drop space:',' idx=11 '),B$(1,2)
'
  ',' != ')'
check_literal: ret0
check_literal:lit=' )' idx=11 '),B$(1,2)
'
    dropping space
check_literal:After drop space:')' idx=11 '),B$(1,2)
'
check_literal:After while():,B$(1,2)

check_literal:ret1 
check_variable:ret1 
scan_variable:
scan_vname: ' A$(10),B$(1,2)
'
scan_vname: ret1 'A'
scan_variable: '$(10),B$(1,2)
' vname='A'
scan_variable: Ary test '(10),B$(1,2)
'
check_literal:lit='(' idx=8 '(10),B$(1,2)
'
check_literal:After drop space:'(' idx=8 '(10),B$(1,2)
'
check_literal:After while():10),B$(1,2)

check_literal:ret1 
scan_literal:lit='(' '(10),B$(1,2)
'
scan_literal:After drop space:(10),B$(1,2)

scan_literal:while loop:(10),B$(1,2)

   Frst:0 T:'(' exptype:f
(operator_precedence) 
@ is operator
(output_sub_start)
 Push:'('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (3)

(op_stack_print) 
000: @ type:0
(op_stack_print) 
001: @ type:1
(op_stack_print) 
002: ( type:16
(op_stack_print) 
------------------

scan_variable: is array
scan_integer:
scan_integer:ret1
   Frst:0 T:'10' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(f )] i i 10
scan_integer:ret1  10
check_literal:lit=' ,' idx=11 '),B$(1,2)
'
    dropping space
check_literal:After drop space:',' idx=11 '),B$(1,2)
'
  ',' != ')'
check_literal: ret0
scan_literal:lit=' )' '),B$(1,2)
'
scan_literal:After drop space:),B$(1,2)

scan_literal:while loop:),B$(1,2)

   Frst:0 T:')' exptype:i
Pop 4
Pop '('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (2)

(op_stack_print) 
000: @ type:0
(op_stack_print) 
001: @ type:1
(op_stack_print) 
------------------

(  output_sub_end)
token_is_function:
token_is_function:@ is not function
(  output_sub_end)
scan_variable:ret1 vname='A$' is str:1 int:0 flt:0 ary:0
   Frst:0 T:'A$' exptype:f
(operator_precedence) 
@ is operator
token_is_function:
token_is_function:A$ is not function
token_is_variable: tok:'A$'
token_is_function:
token_is_function:A$ is not function
(init_get_name) 
init_get_name:'A$'
(init_get_name) 
init_get_name:'A$'
(get_name) 
get_name:gn:'A$'
process_token:type:f req_type:i
modify_expression_type:Inittype:f Intype:s Outtype:f
( output_variable) [f,()] f f A$
scan_localglobal: LOCAL variable:'S–Gþ'
VAR INFO: '                A$' gbl:0 ref:0 int:0 flt:0 str:1 ary:0 max_str:10 max_ary:0 num_ind:1
check_literal:lit=' ,' idx=12 ',B$(1,2)
'
    dropping space
check_literal:After drop space:',' idx=12 ',B$(1,2)
'
check_literal:After while():B$(1,2)

check_literal:ret1 
scan_literal:lit=' ,' ',B$(1,2)
'
scan_literal:After drop space:,B$(1,2)

scan_literal:while loop:,B$(1,2)

   Frst:0 T:',' exptype:f
(operator_precedence) 
@ is operator
(process_token) 
Pop 2
Pop '@'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: @ type:0
(op_stack_print) 
------------------

( output_operator) [f,()] f f @
token_is_function:
token_is_function:@ is not function
(process_token) 
Pop 2
Pop '@'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_operator) [f,()] i i @
token_is_function:
token_is_function:@ is not function
(output_sub_start)
check_variable:
check_vname 'B$(1,2)
':
check_vname ret1 '$(1,2)
':
check_variable: '$(1,2)
'
check_variable: Ary test '(1,2)
'
check_literal:lit='(' idx=15 '(1,2)
'
check_literal:After drop space:'(' idx=15 '(1,2)
'
check_literal:After while():1,2)

check_literal:ret1 
check_variable: is array
check_expression: '1,2)
'
check_eitem: '1,2)
'
check_operator: 1,2)

check_literal:lit=',' idx=16 '1,2)
'
check_literal:After drop space:',' idx=16 '1,2)
'
  ',' != '1'
check_literal: ret0
check_operator:ret0
check_function: '1,2)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=16 '1,2)
'
    dropping space
check_literal:After drop space:'%' idx=16 '1,2)
'
  '%' != '1'
check_literal: ret0
check_literal:lit=' "' idx=16 '1,2)
'
    dropping space
check_literal:After drop space:'"' idx=16 '1,2)
'
  '"' != '1'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '1,2)
'
check_integer:ret1
check_number: ret1
check_eitem:ret1
check_eitem: ',2)
'
check_operator: ,2)

check_literal:lit=',' idx=17 ',2)
'
check_literal:After drop space:',' idx=17 ',2)
'
check_literal:After while():2)

check_literal:ret1 
scan_literal:lit=',' 'B$(1,2)
'
scan_literal:After drop space:B$(1,2)

scan_literal:while loop:B$(1,2)

check_function: ',2)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=17 ',2)
'
    dropping space
check_literal:After drop space:'%' idx=17 ',2)
'
  '%' != ','
check_literal: ret0
check_literal:lit=' "' idx=17 ',2)
'
    dropping space
check_literal:After drop space:'"' idx=17 ',2)
'
  '"' != ','
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: ',2)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname ',2)
':
check_vname ret0 ',2)
':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=17 ',2)
'
    dropping space
check_literal:After drop space:'(' idx=17 ',2)
'
  '(' != ','
check_literal: ret0
check_sub_expr: ret0
check_eitem:ret0
check_expression:ret1 ',2)
'
check_literal:lit=' ,' idx=17 ',2)
'
    dropping space
check_literal:After drop space:',' idx=17 ',2)
'
check_literal:After while():2)

check_literal:ret1 
check_expression: '2)
'
check_eitem: '2)
'
check_operator: 2)

check_literal:lit=',' idx=18 '2)
'
check_literal:After drop space:',' idx=18 '2)
'
  ',' != '2'
check_literal: ret0
check_operator:ret0
check_function: '2)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=18 '2)
'
    dropping space
check_literal:After drop space:'%' idx=18 '2)
'
  '%' != '2'
check_literal: ret0
check_literal:lit=' "' idx=18 '2)
'
    dropping space
check_literal:After drop space:'"' idx=18 '2)
'
  '"' != '2'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '2)
'
check_integer:ret1
check_number: ret1
check_eitem:ret1
check_eitem: ')
'
check_operator: )

check_literal:lit=',' idx=19 ')
'
check_literal:After drop space:',' idx=19 ')
'
  ',' != ')'
check_literal: ret0
check_operator:ret0
check_function: ')
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=19 ')
'
    dropping space
check_literal:After drop space:'%' idx=19 ')
'
  '%' != ')'
check_literal: ret0
check_literal:lit=' "' idx=19 ')
'
    dropping space
check_literal:After drop space:'"' idx=19 ')
'
  '"' != ')'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: ')
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname ')
':
check_vname ret0 ')
':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=19 ')
'
    dropping space
check_literal:After drop space:'(' idx=19 ')
'
  '(' != ')'
check_literal: ret0
check_sub_expr: ret0
check_eitem:ret0
check_expression:ret1 ')
'
check_literal:lit=' )' idx=19 ')
'
    dropping space
check_literal:After drop space:')' idx=19 ')
'
check_literal:After while():

check_literal:ret1 
check_variable:ret1 
scan_variable:
scan_vname: 'B$(1,2)
'
scan_vname: ret1 'B'
scan_variable: '$(1,2)
' vname='B'
scan_variable: Ary test '(1,2)
'
check_literal:lit='(' idx=15 '(1,2)
'
check_literal:After drop space:'(' idx=15 '(1,2)
'
check_literal:After while():1,2)

check_literal:ret1 
scan_literal:lit='(' '(1,2)
'
scan_literal:After drop space:(1,2)

scan_literal:while loop:(1,2)

   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: ( type:16
(op_stack_print) 
------------------

scan_variable: is array
scan_integer:
scan_integer:ret1
   Frst:0 T:'1' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U )] i i 1
scan_integer:ret1  1
check_literal:lit=' ,' idx=17 ',2)
'
    dropping space
check_literal:After drop space:',' idx=17 ',2)
'
check_literal:After while():2)

check_literal:ret1 
scan_literal:lit=' ,' ',2)
'
scan_literal:After drop space:,2)

scan_literal:while loop:,2)

   Frst:0 T:',' exptype:i
(output_sub_start)
scan_integer:
scan_integer:ret1
   Frst:0 T:'2' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U )] i i 2
scan_integer:ret1  2
scan_literal:lit=' )' ')
'
scan_literal:After drop space:)

scan_literal:while loop:)

   Frst:0 T:')' exptype:i
Pop 4
Pop '('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

(  output_sub_end)
token_is_function:
token_is_function: is not function
(  output_sub_end)
scan_variable:ret1 vname='B$' is str:1 int:0 flt:0 ary:1
   Frst:0 T:'B$' exptype:U
token_is_function:
token_is_function:B$ is not function
token_is_variable: tok:'B$'
token_is_function:
token_is_function:B$ is not function
(init_get_name) 
init_get_name:'B$'
(init_get_name) 
init_get_name:'B$'
(get_name) 
get_name:gn:'B$'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:s Outtype:s
   Frst:0 T:'@' exptype:s
(operator_precedence) 
@ is operator
'@' is operator
(process_token) 
Token is operator o1 name:@ o2 name:
(process_token) 
opr1:9 opr2:0
Push 1
 Push:'@'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: @ type:2
(op_stack_print) 
------------------

( output_variable) [s,()] s s B$
scan_localglobal: LOCAL variable:'S–Gþ'
VAR INFO: '                B$' gbl:0 ref:0 int:0 flt:0 str:1 ary:1 max_str:2 max_ary:1 num_ind:2
check_literal:lit=' ,' idx=20 '
'
    dropping space
check_literal:After drop space:',' idx=21 ''
check_literal  ret0 Empty test string
check_variable:
check_vname '':
check_vname ret0 '':
check_variable:ret0 
scan_localglobal:ret1
scan_declare:ret 1
(translate_file) 
=======================cline==========================
(translate_file) 
==LOCAL STR$(12 , 34)
==
check_declare:
check_literal:lit=' LOCAL' idx=0 'LOCAL STR$(12 , 34)
'
    dropping space
check_literal:After drop space:'LOCAL' idx=0 'LOCAL STR$(12 , 34)
'
check_literal:After while(): STR$(12 , 34)

check_literal:ret1 
check_declare:ret 1
scan_declare:
check_literal:lit=' LOCAL' idx=0 'LOCAL STR$(12 , 34)
'
    dropping space
check_literal:After drop space:'LOCAL' idx=0 'LOCAL STR$(12 , 34)
'
check_literal:After while(): STR$(12 , 34)

check_literal:ret1 
scan_localglobal:
scan_literal:lit=' LOCAL' 'LOCAL STR$(12 , 34)
'
scan_literal:After drop space:LOCAL STR$(12 , 34)

scan_literal:while loop:LOCAL STR$(12 , 34)

scan_literal:while loop:OCAL STR$(12 , 34)

scan_literal:while loop:CAL STR$(12 , 34)

scan_literal:while loop:AL STR$(12 , 34)

scan_literal:while loop:L STR$(12 , 34)

   Frst:0 T:'LOCAL' exptype:s
(operator_precedence) 
@ is operator
token_is_function:
token_is_function:LOCAL is not function
token_is_variable: tok:'LOCAL'
token_is_function:
token_is_function:LOCAL is not function
(init_get_name) 
init_get_name:'LOCAL'
(init_get_name) 
init_get_name:'LOCAL'
(get_name) 
get_name:gn:'LOCAL'
process_token:type:s req_type:i
modify_expression_type:Inittype:s Intype:f Outtype:s
   Frst:0 T:'@' exptype:s
(operator_precedence) 
@ is operator
(operator_precedence) 
@ is operator
'@' is operator
(process_token) 
Token is operator o1 name:@ o2 name:@
(process_token) 
opr1:9 opr2:9
(operator_precedence) 
@ is operator
(operator_precedence) 
@ is operator
(operator_left_assoc) 
@ is operator
Push 1
 Push:'@'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (2)

(op_stack_print) 
000: @ type:2
(op_stack_print) 
001: @ type:2
(op_stack_print) 
------------------

( output_variable) [s,()] s s LOCAL
check_variable:
check_vname 'STR$(12 , 34)
':
check_vname ret1 '$(12 , 34)
':
check_variable: '$(12 , 34)
'
check_variable: Ary test '(12 , 34)
'
check_literal:lit='(' idx=10 '(12 , 34)
'
check_literal:After drop space:'(' idx=10 '(12 , 34)
'
check_literal:After while():12 , 34)

check_literal:ret1 
check_variable: is array
check_expression: '12 , 34)
'
check_eitem: '12 , 34)
'
check_operator: 12 , 34)

check_literal:lit=',' idx=11 '12 , 34)
'
check_literal:After drop space:',' idx=11 '12 , 34)
'
  ',' != '1'
check_literal: ret0
check_operator:ret0
check_function: '12 , 34)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=11 '12 , 34)
'
    dropping space
check_literal:After drop space:'%' idx=11 '12 , 34)
'
  '%' != '1'
check_literal: ret0
check_literal:lit=' "' idx=11 '12 , 34)
'
    dropping space
check_literal:After drop space:'"' idx=11 '12 , 34)
'
  '"' != '1'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '12 , 34)
'
check_integer:ret1
check_number: ret1
check_eitem:ret1
check_eitem: ' , 34)
'
check_operator:  , 34)

check_literal:lit=',' idx=14 ', 34)
'
check_literal:After drop space:',' idx=14 ', 34)
'
check_literal:After while(): 34)

check_literal:ret1 
scan_literal:lit=',' ' STR$(12 , 34)
'
scan_literal:After drop space: STR$(12 , 34)

scan_literal:while loop: STR$(12 , 34)

check_function: ', 34)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=13 ' , 34)
'
    dropping space
check_literal:After drop space:'%' idx=14 ', 34)
'
  '%' != ','
check_literal: ret0
check_literal:lit=' "' idx=13 ' , 34)
'
    dropping space
check_literal:After drop space:'"' idx=14 ', 34)
'
  '"' != ','
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: ', 34)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname ', 34)
':
check_vname ret0 ', 34)
':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=13 ' , 34)
'
    dropping space
check_literal:After drop space:'(' idx=14 ', 34)
'
  '(' != ','
check_literal: ret0
check_sub_expr: ret0
check_eitem:ret0
check_expression:ret1 ' , 34)
'
check_literal:lit=' ,' idx=13 ' , 34)
'
    dropping space
check_literal:After drop space:',' idx=14 ', 34)
'
check_literal:After while(): 34)

check_literal:ret1 
check_expression: '34)
'
check_eitem: '34)
'
check_operator: 34)

check_literal:lit=',' idx=16 '34)
'
check_literal:After drop space:',' idx=16 '34)
'
  ',' != '3'
check_literal: ret0
check_operator:ret0
check_function: '34)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=16 '34)
'
    dropping space
check_literal:After drop space:'%' idx=16 '34)
'
  '%' != '3'
check_literal: ret0
check_literal:lit=' "' idx=16 '34)
'
    dropping space
check_literal:After drop space:'"' idx=16 '34)
'
  '"' != '3'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '34)
'
check_integer:ret1
check_number: ret1
check_eitem:ret1
check_eitem: ')
'
check_operator: )

check_literal:lit=',' idx=18 ')
'
check_literal:After drop space:',' idx=18 ')
'
  ',' != ')'
check_literal: ret0
check_operator:ret0
check_function: ')
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=18 ')
'
    dropping space
check_literal:After drop space:'%' idx=18 ')
'
  '%' != ')'
check_literal: ret0
check_literal:lit=' "' idx=18 ')
'
    dropping space
check_literal:After drop space:'"' idx=18 ')
'
  '"' != ')'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: ')
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname ')
':
check_vname ret0 ')
':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=18 ')
'
    dropping space
check_literal:After drop space:'(' idx=18 ')
'
  '(' != ')'
check_literal: ret0
check_sub_expr: ret0
check_eitem:ret0
check_expression:ret1 ')
'
check_literal:lit=' )' idx=18 ')
'
    dropping space
check_literal:After drop space:')' idx=18 ')
'
check_literal:After while():

check_literal:ret1 
check_variable:ret1 
scan_variable:
scan_vname: ' STR$(12 , 34)
'
scan_vname: ret1 'STR'
scan_variable: '$(12 , 34)
' vname='STR'
scan_variable: Ary test '(12 , 34)
'
check_literal:lit='(' idx=10 '(12 , 34)
'
check_literal:After drop space:'(' idx=10 '(12 , 34)
'
check_literal:After while():12 , 34)

check_literal:ret1 
scan_literal:lit='(' '(12 , 34)
'
scan_literal:After drop space:(12 , 34)

scan_literal:while loop:(12 , 34)

   Frst:0 T:'(' exptype:s
(operator_precedence) 
@ is operator
(output_sub_start)
 Push:'('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (3)

(op_stack_print) 
000: @ type:2
(op_stack_print) 
001: @ type:2
(op_stack_print) 
002: ( type:16
(op_stack_print) 
------------------

scan_variable: is array
scan_integer:
scan_integer:ret1
   Frst:0 T:'12' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(s )] i i 12
scan_integer:ret1  12
check_literal:lit=' ,' idx=13 ' , 34)
'
    dropping space
check_literal:After drop space:',' idx=14 ', 34)
'
check_literal:After while(): 34)

check_literal:ret1 
scan_literal:lit=' ,' ' , 34)
'
scan_literal:After drop space:, 34)

scan_literal:while loop:, 34)

   Frst:0 T:',' exptype:i
(output_sub_start)
scan_integer:
scan_integer:ret1
   Frst:0 T:'34' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(s )] i i 34
scan_integer:ret1  34
scan_literal:lit=' )' ')
'
scan_literal:After drop space:)

scan_literal:while loop:)

   Frst:0 T:')' exptype:i
Pop 4
Pop '('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (2)

(op_stack_print) 
000: @ type:2
(op_stack_print) 
001: @ type:2
(op_stack_print) 
------------------

(  output_sub_end)
token_is_function:
token_is_function:@ is not function
(  output_sub_end)
scan_variable:ret1 vname='STR$' is str:1 int:0 flt:0 ary:1
   Frst:0 T:'STR$' exptype:s
(operator_precedence) 
@ is operator
token_is_function:
token_is_function:STR$ is not function
token_is_variable: tok:'STR$'
token_is_function:
token_is_function:STR$ is not function
(init_get_name) 
init_get_name:'STR$'
(init_get_name) 
init_get_name:'STR$'
(get_name) 
get_name:gn:'STR$'
process_token:type:s req_type:i
modify_expression_type:Inittype:s Intype:s Outtype:s
   Frst:0 T:'@' exptype:s
(operator_precedence) 
@ is operator
(operator_precedence) 
@ is operator
'@' is operator
(process_token) 
Token is operator o1 name:@ o2 name:@
(process_token) 
opr1:9 opr2:9
(operator_precedence) 
@ is operator
(operator_precedence) 
@ is operator
(operator_left_assoc) 
@ is operator
Push 1
 Push:'@'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (3)

(op_stack_print) 
000: @ type:2
(op_stack_print) 
001: @ type:2
(op_stack_print) 
002: @ type:2
(op_stack_print) 
------------------

( output_variable) [s,()] s s STR$
scan_localglobal: LOCAL variable:'S–Gþ'
VAR INFO: '              STR$' gbl:0 ref:0 int:0 flt:0 str:1 ary:1 max_str:34 max_ary:12 num_ind:2
check_literal:lit=' ,' idx=19 '
'
    dropping space
check_literal:After drop space:',' idx=20 ''
check_literal  ret0 Empty test string
check_variable:
check_vname '':
check_vname ret0 '':
check_variable:ret0 
scan_localglobal:ret1
scan_declare:ret 1
(translate_file) 
=======================cline==========================
(translate_file) 
==GLOBAL A%,B,C$(5),D$(20,40)
==
check_declare:
check_literal:lit=' LOCAL' idx=0 'GLOBAL A%,B,C$(5),D$(20,40)
'
    dropping space
check_literal:After drop space:'LOCAL' idx=0 'GLOBAL A%,B,C$(5),D$(20,40)
'
  'L' != 'G'
check_literal: ret0
check_literal:lit=' GLOBAL' idx=0 'GLOBAL A%,B,C$(5),D$(20,40)
'
    dropping space
check_literal:After drop space:'GLOBAL' idx=0 'GLOBAL A%,B,C$(5),D$(20,40)
'
check_literal:After while(): A%,B,C$(5),D$(20,40)

check_literal:ret1 
check_declare:ret 1
scan_declare:
check_literal:lit=' LOCAL' idx=0 'GLOBAL A%,B,C$(5),D$(20,40)
'
    dropping space
check_literal:After drop space:'LOCAL' idx=0 'GLOBAL A%,B,C$(5),D$(20,40)
'
  'L' != 'G'
check_literal: ret0
check_literal:lit=' GLOBAL' idx=0 'GLOBAL A%,B,C$(5),D$(20,40)
'
    dropping space
check_literal:After drop space:'GLOBAL' idx=0 'GLOBAL A%,B,C$(5),D$(20,40)
'
check_literal:After while(): A%,B,C$(5),D$(20,40)

check_literal:ret1 
scan_localglobal:
scan_literal:lit=' GLOBAL' 'GLOBAL A%,B,C$(5),D$(20,40)
'
scan_literal:After drop space:GLOBAL A%,B,C$(5),D$(20,40)

scan_literal:while loop:GLOBAL A%,B,C$(5),D$(20,40)

scan_literal:while loop:LOBAL A%,B,C$(5),D$(20,40)

scan_literal:while loop:OBAL A%,B,C$(5),D$(20,40)

scan_literal:while loop:BAL A%,B,C$(5),D$(20,40)

scan_literal:while loop:AL A%,B,C$(5),D$(20,40)

scan_literal:while loop:L A%,B,C$(5),D$(20,40)

   Frst:0 T:'GLOBAL' exptype:s
(operator_precedence) 
@ is operator
token_is_function:
token_is_function:GLOBAL is not function
token_is_variable: tok:'GLOBAL'
token_is_function:
token_is_function:GLOBAL is not function
(init_get_name) 
init_get_name:'GLOBAL'
(init_get_name) 
init_get_name:'GLOBAL'
(get_name) 
get_name:gn:'GLOBAL'
process_token:type:s req_type:i
modify_expression_type:Inittype:s Intype:f Outtype:s
   Frst:0 T:'@' exptype:s
(operator_precedence) 
@ is operator
(operator_precedence) 
@ is operator
'@' is operator
(process_token) 
Token is operator o1 name:@ o2 name:@
(process_token) 
opr1:9 opr2:9
(operator_precedence) 
@ is operator
(operator_precedence) 
@ is operator
(operator_left_assoc) 
@ is operator
Push 1
 Push:'@'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (4)

(op_stack_print) 
000: @ type:2
(op_stack_print) 
001: @ type:2
(op_stack_print) 
002: @ type:2
(op_stack_print) 
003: @ type:2
(op_stack_print) 
------------------

( output_variable) [s,()] s s GLOBAL
check_variable:
check_vname 'A%,B,C$(5),D$(20,40)
':
check_vname ret1 '%,B,C$(5),D$(20,40)
':
check_variable: '%,B,C$(5),D$(20,40)
'
check_variable: Ary test ',B,C$(5),D$(20,40)
'
check_literal:lit='(' idx=9 ',B,C$(5),D$(20,40)
'
check_literal:After drop space:'(' idx=9 ',B,C$(5),D$(20,40)
'
  '(' != ','
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
scan_variable:
scan_vname: ' A%,B,C$(5),D$(20,40)
'
scan_vname: ret1 'A'
scan_variable: '%,B,C$(5),D$(20,40)
' vname='A'
scan_variable: Ary test ',B,C$(5),D$(20,40)
'
check_literal:lit='(' idx=9 ',B,C$(5),D$(20,40)
'
check_literal:After drop space:'(' idx=9 ',B,C$(5),D$(20,40)
'
  '(' != ','
check_literal: ret0
scan_variable:ret1 vname='A%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'A%' exptype:s
(operator_precedence) 
@ is operator
token_is_function:
token_is_function:A% is not function
token_is_variable: tok:'A%'
token_is_function:
token_is_function:A% is not function
(init_get_name) 
init_get_name:'A%'
(init_get_name) 
init_get_name:'A%'
(get_name) 
get_name:gn:'A%'
process_token:type:s req_type:i
modify_expression_type:Inittype:s Intype:i Outtype:s
( output_variable) [s,()] s s A%
scan_localglobal: GLOBAL variable:'S–Gþ'
VAR INFO: '                A%' gbl:1 ref:0 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
check_literal:lit=' ,' idx=9 ',B,C$(5),D$(20,40)
'
    dropping space
check_literal:After drop space:',' idx=9 ',B,C$(5),D$(20,40)
'
check_literal:After while():B,C$(5),D$(20,40)

check_literal:ret1 
scan_literal:lit=' ,' ',B,C$(5),D$(20,40)
'
scan_literal:After drop space:,B,C$(5),D$(20,40)

scan_literal:while loop:,B,C$(5),D$(20,40)

   Frst:0 T:',' exptype:s
(operator_precedence) 
@ is operator
(process_token) 
Pop 2
Pop '@'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (3)

(op_stack_print) 
000: @ type:2
(op_stack_print) 
001: @ type:2
(op_stack_print) 
002: @ type:2
(op_stack_print) 
------------------

( output_operator) [s,()] s s @
token_is_function:
token_is_function:@ is not function
(process_token) 
Pop 2
Pop '@'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (2)

(op_stack_print) 
000: @ type:2
(op_stack_print) 
001: @ type:2
(op_stack_print) 
------------------

( output_operator) [s,()] s s @
token_is_function:
token_is_function:@ is not function
(process_token) 
Pop 2
Pop '@'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: @ type:2
(op_stack_print) 
------------------

( output_operator) [s,()] s s @
token_is_function:
token_is_function:@ is not function
(process_token) 
Pop 2
Pop '@'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_operator) [s,()] s s @
token_is_function:
token_is_function:@ is not function
(output_sub_start)
check_variable:
check_vname 'B,C$(5),D$(20,40)
':
check_vname ret1 ',C$(5),D$(20,40)
':
check_variable: ',C$(5),D$(20,40)
'
check_variable: Ary test ',C$(5),D$(20,40)
'
check_literal:lit='(' idx=11 ',C$(5),D$(20,40)
'
check_literal:After drop space:'(' idx=11 ',C$(5),D$(20,40)
'
  '(' != ','
check_literal: ret0
check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
check_variable:ret1 
scan_variable:
scan_vname: 'B,C$(5),D$(20,40)
'
scan_vname: ret1 'B'
scan_variable: ',C$(5),D$(20,40)
' vname='B'
scan_variable: Ary test ',C$(5),D$(20,40)
'
check_literal:lit='(' idx=11 ',C$(5),D$(20,40)
'
check_literal:After drop space:'(' idx=11 ',C$(5),D$(20,40)
'
  '(' != ','
check_literal: ret0
scan_variable:ret1 vname='B' is str:0 int:0 flt:1 ary:0
   Frst:0 T:'B' exptype:U
token_is_function:
token_is_function:B is not function
token_is_variable: tok:'B'
token_is_function:
token_is_function:B is not function
(init_get_name) 
init_get_name:'B'
(init_get_name) 
init_get_name:'B'
(get_name) 
get_name:gn:'B'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:f Outtype:f
( output_variable) [f,()] f f B
scan_localglobal: GLOBAL variable:'S–Gþ'
VAR INFO: '                 B' gbl:1 ref:0 int:0 flt:1 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
check_literal:lit=' ,' idx=11 ',C$(5),D$(20,40)
'
    dropping space
check_literal:After drop space:',' idx=11 ',C$(5),D$(20,40)
'
check_literal:After while():C$(5),D$(20,40)

check_literal:ret1 
scan_literal:lit=' ,' ',C$(5),D$(20,40)
'
scan_literal:After drop space:,C$(5),D$(20,40)

scan_literal:while loop:,C$(5),D$(20,40)

   Frst:0 T:',' exptype:f
(output_sub_start)
check_variable:
check_vname 'C$(5),D$(20,40)
':
check_vname ret1 '$(5),D$(20,40)
':
check_variable: '$(5),D$(20,40)
'
check_variable: Ary test '(5),D$(20,40)
'
check_literal:lit='(' idx=14 '(5),D$(20,40)
'
check_literal:After drop space:'(' idx=14 '(5),D$(20,40)
'
check_literal:After while():5),D$(20,40)

check_literal:ret1 
check_variable: is array
check_expression: '5),D$(20,40)
'
check_eitem: '5),D$(20,40)
'
check_operator: 5),D$(20,40)

check_literal:lit=',' idx=15 '5),D$(20,40)
'
check_literal:After drop space:',' idx=15 '5),D$(20,40)
'
  ',' != '5'
check_literal: ret0
check_operator:ret0
check_function: '5),D$(20,40)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=15 '5),D$(20,40)
'
    dropping space
check_literal:After drop space:'%' idx=15 '5),D$(20,40)
'
  '%' != '5'
check_literal: ret0
check_literal:lit=' "' idx=15 '5),D$(20,40)
'
    dropping space
check_literal:After drop space:'"' idx=15 '5),D$(20,40)
'
  '"' != '5'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '5),D$(20,40)
'
check_integer:ret1
check_number: ret1
check_eitem:ret1
check_eitem: '),D$(20,40)
'
check_operator: ),D$(20,40)

check_literal:lit=',' idx=16 '),D$(20,40)
'
check_literal:After drop space:',' idx=16 '),D$(20,40)
'
  ',' != ')'
check_literal: ret0
check_operator:ret0
check_function: '),D$(20,40)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=16 '),D$(20,40)
'
    dropping space
check_literal:After drop space:'%' idx=16 '),D$(20,40)
'
  '%' != ')'
check_literal: ret0
check_literal:lit=' "' idx=16 '),D$(20,40)
'
    dropping space
check_literal:After drop space:'"' idx=16 '),D$(20,40)
'
  '"' != ')'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: '),D$(20,40)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname '),D$(20,40)
':
check_vname ret0 '),D$(20,40)
':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=16 '),D$(20,40)
'
    dropping space
check_literal:After drop space:'(' idx=16 '),D$(20,40)
'
  '(' != ')'
check_literal: ret0
check_sub_expr: ret0
check_eitem:ret0
check_expression:ret1 '),D$(20,40)
'
check_literal:lit=' ,' idx=16 '),D$(20,40)
'
    dropping space
check_literal:After drop space:',' idx=16 '),D$(20,40)
'
  ',' != ')'
check_literal: ret0
check_literal:lit=' )' idx=16 '),D$(20,40)
'
    dropping space
check_literal:After drop space:')' idx=16 '),D$(20,40)
'
check_literal:After while():,D$(20,40)

check_literal:ret1 
check_variable:ret1 
scan_variable:
scan_vname: 'C$(5),D$(20,40)
'
scan_vname: ret1 'C'
scan_variable: '$(5),D$(20,40)
' vname='C'
scan_variable: Ary test '(5),D$(20,40)
'
check_literal:lit='(' idx=14 '(5),D$(20,40)
'
check_literal:After drop space:'(' idx=14 '(5),D$(20,40)
'
check_literal:After while():5),D$(20,40)

check_literal:ret1 
scan_literal:lit='(' '(5),D$(20,40)
'
scan_literal:After drop space:(5),D$(20,40)

scan_literal:while loop:(5),D$(20,40)

   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: ( type:16
(op_stack_print) 
------------------

scan_variable: is array
scan_integer:
scan_integer:ret1
   Frst:0 T:'5' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U )] i i 5
scan_integer:ret1  5
check_literal:lit=' ,' idx=16 '),D$(20,40)
'
    dropping space
check_literal:After drop space:',' idx=16 '),D$(20,40)
'
  ',' != ')'
check_literal: ret0
scan_literal:lit=' )' '),D$(20,40)
'
scan_literal:After drop space:),D$(20,40)

scan_literal:while loop:),D$(20,40)

   Frst:0 T:')' exptype:i
Pop 4
Pop '('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

(  output_sub_end)
token_is_function:
token_is_function: is not function
(  output_sub_end)
scan_variable:ret1 vname='C$' is str:1 int:0 flt:0 ary:0
   Frst:0 T:'C$' exptype:U
token_is_function:
token_is_function:C$ is not function
token_is_variable: tok:'C$'
token_is_function:
token_is_function:C$ is not function
(init_get_name) 
init_get_name:'C$'
(init_get_name) 
init_get_name:'C$'
(get_name) 
get_name:gn:'C$'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:s Outtype:s
( output_variable) [s,()] s s C$
scan_localglobal: GLOBAL variable:'S–Gþ'
VAR INFO: '                C$' gbl:1 ref:0 int:0 flt:0 str:1 ary:0 max_str:5 max_ary:0 num_ind:1
check_literal:lit=' ,' idx=17 ',D$(20,40)
'
    dropping space
check_literal:After drop space:',' idx=17 ',D$(20,40)
'
check_literal:After while():D$(20,40)

check_literal:ret1 
scan_literal:lit=' ,' ',D$(20,40)
'
scan_literal:After drop space:,D$(20,40)

scan_literal:while loop:,D$(20,40)

   Frst:0 T:',' exptype:s
(output_sub_start)
check_variable:
check_vname 'D$(20,40)
':
check_vname ret1 '$(20,40)
':
check_variable: '$(20,40)
'
check_variable: Ary test '(20,40)
'
check_literal:lit='(' idx=20 '(20,40)
'
check_literal:After drop space:'(' idx=20 '(20,40)
'
check_literal:After while():20,40)

check_literal:ret1 
check_variable: is array
check_expression: '20,40)
'
check_eitem: '20,40)
'
check_operator: 20,40)

check_literal:lit=',' idx=21 '20,40)
'
check_literal:After drop space:',' idx=21 '20,40)
'
  ',' != '2'
check_literal: ret0
check_operator:ret0
check_function: '20,40)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=21 '20,40)
'
    dropping space
check_literal:After drop space:'%' idx=21 '20,40)
'
  '%' != '2'
check_literal: ret0
check_literal:lit=' "' idx=21 '20,40)
'
    dropping space
check_literal:After drop space:'"' idx=21 '20,40)
'
  '"' != '2'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '20,40)
'
check_integer:ret1
check_number: ret1
check_eitem:ret1
check_eitem: ',40)
'
check_operator: ,40)

check_literal:lit=',' idx=23 ',40)
'
check_literal:After drop space:',' idx=23 ',40)
'
check_literal:After while():40)

check_literal:ret1 
scan_literal:lit=',' 'D$(20,40)
'
scan_literal:After drop space:D$(20,40)

scan_literal:while loop:D$(20,40)

check_function: ',40)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=23 ',40)
'
    dropping space
check_literal:After drop space:'%' idx=23 ',40)
'
  '%' != ','
check_literal: ret0
check_literal:lit=' "' idx=23 ',40)
'
    dropping space
check_literal:After drop space:'"' idx=23 ',40)
'
  '"' != ','
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: ',40)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname ',40)
':
check_vname ret0 ',40)
':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=23 ',40)
'
    dropping space
check_literal:After drop space:'(' idx=23 ',40)
'
  '(' != ','
check_literal: ret0
check_sub_expr: ret0
check_eitem:ret0
check_expression:ret1 ',40)
'
check_literal:lit=' ,' idx=23 ',40)
'
    dropping space
check_literal:After drop space:',' idx=23 ',40)
'
check_literal:After while():40)

check_literal:ret1 
check_expression: '40)
'
check_eitem: '40)
'
check_operator: 40)

check_literal:lit=',' idx=24 '40)
'
check_literal:After drop space:',' idx=24 '40)
'
  ',' != '4'
check_literal: ret0
check_operator:ret0
check_function: '40)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=24 '40)
'
    dropping space
check_literal:After drop space:'%' idx=24 '40)
'
  '%' != '4'
check_literal: ret0
check_literal:lit=' "' idx=24 '40)
'
    dropping space
check_literal:After drop space:'"' idx=24 '40)
'
  '"' != '4'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '40)
'
check_integer:ret1
check_number: ret1
check_eitem:ret1
check_eitem: ')
'
check_operator: )

check_literal:lit=',' idx=26 ')
'
check_literal:After drop space:',' idx=26 ')
'
  ',' != ')'
check_literal: ret0
check_operator:ret0
check_function: ')
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=26 ')
'
    dropping space
check_literal:After drop space:'%' idx=26 ')
'
  '%' != ')'
check_literal: ret0
check_literal:lit=' "' idx=26 ')
'
    dropping space
check_literal:After drop space:'"' idx=26 ')
'
  '"' != ')'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: ')
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname ')
':
check_vname ret0 ')
':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=26 ')
'
    dropping space
check_literal:After drop space:'(' idx=26 ')
'
  '(' != ')'
check_literal: ret0
check_sub_expr: ret0
check_eitem:ret0
check_expression:ret1 ')
'
check_literal:lit=' )' idx=26 ')
'
    dropping space
check_literal:After drop space:')' idx=26 ')
'
check_literal:After while():

check_literal:ret1 
check_variable:ret1 
scan_variable:
scan_vname: 'D$(20,40)
'
scan_vname: ret1 'D'
scan_variable: '$(20,40)
' vname='D'
scan_variable: Ary test '(20,40)
'
check_literal:lit='(' idx=20 '(20,40)
'
check_literal:After drop space:'(' idx=20 '(20,40)
'
check_literal:After while():20,40)

check_literal:ret1 
scan_literal:lit='(' '(20,40)
'
scan_literal:After drop space:(20,40)

scan_literal:while loop:(20,40)

   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: ( type:16
(op_stack_print) 
------------------

scan_variable: is array
scan_integer:
scan_integer:ret1
   Frst:0 T:'20' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U )] i i 20
scan_integer:ret1  20
check_literal:lit=' ,' idx=23 ',40)
'
    dropping space
check_literal:After drop space:',' idx=23 ',40)
'
check_literal:After while():40)

check_literal:ret1 
scan_literal:lit=' ,' ',40)
'
scan_literal:After drop space:,40)

scan_literal:while loop:,40)

   Frst:0 T:',' exptype:i
(output_sub_start)
scan_integer:
scan_integer:ret1
   Frst:0 T:'40' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U )] i i 40
scan_integer:ret1  40
scan_literal:lit=' )' ')
'
scan_literal:After drop space:)

scan_literal:while loop:)

   Frst:0 T:')' exptype:i
Pop 4
Pop '('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

(  output_sub_end)
token_is_function:
token_is_function: is not function
(  output_sub_end)
scan_variable:ret1 vname='D$' is str:1 int:0 flt:0 ary:1
   Frst:0 T:'D$' exptype:U
token_is_function:
token_is_function:D$ is not function
token_is_variable: tok:'D$'
token_is_function:
token_is_function:D$ is not function
(init_get_name) 
init_get_name:'D$'
(init_get_name) 
init_get_name:'D$'
(get_name) 
get_name:gn:'D$'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:s Outtype:s
   Frst:0 T:'@' exptype:s
(operator_precedence) 
@ is operator
'@' is operator
(process_token) 
Token is operator o1 name:@ o2 name:
(process_token) 
opr1:9 opr2:0
Push 1
 Push:'@'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: @ type:2
(op_stack_print) 
------------------

( output_variable) [s,()] s s D$
scan_localglobal: GLOBAL variable:'S–Gþ'
VAR INFO: '                D$' gbl:1 ref:0 int:0 flt:0 str:1 ary:1 max_str:40 max_ary:20 num_ind:2
check_literal:lit=' ,' idx=27 '
'
    dropping space
check_literal:After drop space:',' idx=28 ''
check_literal  ret0 Empty test string
check_variable:
check_vname '':
check_vname ret0 '':
check_variable:ret0 
scan_localglobal:ret1
scan_declare:ret 1
(translate_file) 
=======================cline==========================
(translate_file) 
==A= A + (2*3+3*Z%-   ABC%*1.1)
==
check_declare:
check_literal:lit=' LOCAL' idx=0 'A= A + (2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'LOCAL' idx=0 'A= A + (2*3+3*Z%-   ABC%*1.1)
'
  'L' != 'A'
check_literal: ret0
check_literal:lit=' GLOBAL' idx=0 'A= A + (2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'GLOBAL' idx=0 'A= A + (2*3+3*Z%-   ABC%*1.1)
'
  'G' != 'A'
check_literal: ret0
check_declare:ret 0
scan_cline:
check_line:
check_assignment:
check_variable:
check_vname 'A= A + (2*3+3*Z%-   ABC%*1.1)
':
check_vname ret1 '= A + (2*3+3*Z%-   ABC%*1.1)
':
check_variable: '= A + (2*3+3*Z%-   ABC%*1.1)
'
check_variable: Ary test '= A + (2*3+3*Z%-   ABC%*1.1)
'
check_literal:lit='(' idx=1 '= A + (2*3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:'(' idx=1 '= A + (2*3+3*Z%-   ABC%*1.1)
'
  '(' != '='
check_literal: ret0
check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
check_variable:ret1 
check_literal:lit=' =' idx=1 '= A + (2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'=' idx=1 '= A + (2*3+3*Z%-   ABC%*1.1)
'
check_literal:After while(): A + (2*3+3*Z%-   ABC%*1.1)

check_literal:ret1 
check_expression: 'A + (2*3+3*Z%-   ABC%*1.1)
'
check_eitem: 'A + (2*3+3*Z%-   ABC%*1.1)
'
check_operator: A + (2*3+3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=3 'A + (2*3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=3 'A + (2*3+3*Z%-   ABC%*1.1)
'
  ',' != 'A'
check_literal: ret0
check_operator:ret0
check_function: 'A + (2*3+3*Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=3 'A + (2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=3 'A + (2*3+3*Z%-   ABC%*1.1)
'
  '%' != 'A'
check_literal: ret0
check_literal:lit=' "' idx=3 'A + (2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=3 'A + (2*3+3*Z%-   ABC%*1.1)
'
  '"' != 'A'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'A + (2*3+3*Z%-   ABC%*1.1)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'A + (2*3+3*Z%-   ABC%*1.1)
':
check_vname ret1 ' + (2*3+3*Z%-   ABC%*1.1)
':
check_variable: ' + (2*3+3*Z%-   ABC%*1.1)
'
check_variable: Ary test ' + (2*3+3*Z%-   ABC%*1.1)
'
check_literal:lit='(' idx=4 ' + (2*3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:'(' idx=4 ' + (2*3+3*Z%-   ABC%*1.1)
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
check_variable:ret1 
check_eitem:ret1
check_eitem: ' + (2*3+3*Z%-   ABC%*1.1)
'
check_operator:  + (2*3+3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=5 '+ (2*3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=5 '+ (2*3+3*Z%-   ABC%*1.1)
'
  ',' != '+'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
check_eitem: ' (2*3+3*Z%-   ABC%*1.1)
'
check_operator:  (2*3+3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=7 '(2*3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=7 '(2*3+3*Z%-   ABC%*1.1)
'
  ',' != '('
check_literal: ret0
check_operator:ret0
check_function: '(2*3+3*Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=6 ' (2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=7 '(2*3+3*Z%-   ABC%*1.1)
'
  '%' != '('
check_literal: ret0
check_literal:lit=' "' idx=6 ' (2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=7 '(2*3+3*Z%-   ABC%*1.1)
'
  '"' != '('
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: '(2*3+3*Z%-   ABC%*1.1)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname '(2*3+3*Z%-   ABC%*1.1)
':
check_vname ret0 '(2*3+3*Z%-   ABC%*1.1)
':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=6 ' (2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'(' idx=7 '(2*3+3*Z%-   ABC%*1.1)
'
check_literal:After while():2*3+3*Z%-   ABC%*1.1)

check_literal:ret1 
check_sub_expr: ret1
check_eitem:ret1
check_eitem: '2*3+3*Z%-   ABC%*1.1)
'
check_operator: 2*3+3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=8 '2*3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=8 '2*3+3*Z%-   ABC%*1.1)
'
  ',' != '2'
check_literal: ret0
check_operator:ret0
check_function: '2*3+3*Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=8 '2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=8 '2*3+3*Z%-   ABC%*1.1)
'
  '%' != '2'
check_literal: ret0
check_literal:lit=' "' idx=8 '2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=8 '2*3+3*Z%-   ABC%*1.1)
'
  '"' != '2'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '2*3+3*Z%-   ABC%*1.1)
'
check_integer:ret1
check_number: ret1
check_eitem:ret1
check_eitem: '*3+3*Z%-   ABC%*1.1)
'
check_operator: *3+3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=9 '*3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=9 '*3+3*Z%-   ABC%*1.1)
'
  ',' != '*'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
check_eitem: '3+3*Z%-   ABC%*1.1)
'
check_operator: 3+3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=10 '3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=10 '3+3*Z%-   ABC%*1.1)
'
  ',' != '3'
check_literal: ret0
check_operator:ret0
check_function: '3+3*Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=10 '3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=10 '3+3*Z%-   ABC%*1.1)
'
  '%' != '3'
check_literal: ret0
check_literal:lit=' "' idx=10 '3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=10 '3+3*Z%-   ABC%*1.1)
'
  '"' != '3'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '3+3*Z%-   ABC%*1.1)
'
check_integer:ret1
check_number: ret1
check_eitem:ret1
check_eitem: '+3*Z%-   ABC%*1.1)
'
check_operator: +3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=11 '+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=11 '+3*Z%-   ABC%*1.1)
'
  ',' != '+'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
check_eitem: '3*Z%-   ABC%*1.1)
'
check_operator: 3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=12 '3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=12 '3*Z%-   ABC%*1.1)
'
  ',' != '3'
check_literal: ret0
check_operator:ret0
check_function: '3*Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=12 '3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=12 '3*Z%-   ABC%*1.1)
'
  '%' != '3'
check_literal: ret0
check_literal:lit=' "' idx=12 '3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=12 '3*Z%-   ABC%*1.1)
'
  '"' != '3'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '3*Z%-   ABC%*1.1)
'
check_integer:ret1
check_number: ret1
check_eitem:ret1
check_eitem: '*Z%-   ABC%*1.1)
'
check_operator: *Z%-   ABC%*1.1)

check_literal:lit=',' idx=13 '*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=13 '*Z%-   ABC%*1.1)
'
  ',' != '*'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
check_eitem: 'Z%-   ABC%*1.1)
'
check_operator: Z%-   ABC%*1.1)

check_literal:lit=',' idx=14 'Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=14 'Z%-   ABC%*1.1)
'
  ',' != 'Z'
check_literal: ret0
check_operator:ret0
check_function: 'Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=14 'Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=14 'Z%-   ABC%*1.1)
'
  '%' != 'Z'
check_literal: ret0
check_literal:lit=' "' idx=14 'Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=14 'Z%-   ABC%*1.1)
'
  '"' != 'Z'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'Z%-   ABC%*1.1)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'Z%-   ABC%*1.1)
':
check_vname ret1 '%-   ABC%*1.1)
':
check_variable: '%-   ABC%*1.1)
'
check_variable: Ary test '-   ABC%*1.1)
'
check_literal:lit='(' idx=16 '-   ABC%*1.1)
'
check_literal:After drop space:'(' idx=16 '-   ABC%*1.1)
'
  '(' != '-'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
check_eitem:ret1
check_eitem: '-   ABC%*1.1)
'
check_operator: -   ABC%*1.1)

check_literal:lit=',' idx=16 '-   ABC%*1.1)
'
check_literal:After drop space:',' idx=16 '-   ABC%*1.1)
'
  ',' != '-'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
check_eitem: '   ABC%*1.1)
'
check_operator:    ABC%*1.1)

check_literal:lit=',' idx=20 'ABC%*1.1)
'
check_literal:After drop space:',' idx=20 'ABC%*1.1)
'
  ',' != 'A'
check_literal: ret0
check_operator:ret0
check_function: 'ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=17 '   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=20 'ABC%*1.1)
'
  '%' != 'A'
check_literal: ret0
check_literal:lit=' "' idx=17 '   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=20 'ABC%*1.1)
'
  '"' != 'A'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'ABC%*1.1)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'ABC%*1.1)
':
check_vname ret1 '%*1.1)
':
check_variable: '%*1.1)
'
check_variable: Ary test '*1.1)
'
check_literal:lit='(' idx=24 '*1.1)
'
check_literal:After drop space:'(' idx=24 '*1.1)
'
  '(' != '*'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
check_eitem:ret1
check_eitem: '*1.1)
'
check_operator: *1.1)

check_literal:lit=',' idx=24 '*1.1)
'
check_literal:After drop space:',' idx=24 '*1.1)
'
  ',' != '*'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
check_eitem: '1.1)
'
check_operator: 1.1)

check_literal:lit=',' idx=25 '1.1)
'
check_literal:After drop space:',' idx=25 '1.1)
'
  ',' != '1'
check_literal: ret0
check_operator:ret0
check_function: '1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=25 '1.1)
'
    dropping space
check_literal:After drop space:'%' idx=25 '1.1)
'
  '%' != '1'
check_literal: ret0
check_literal:lit=' "' idx=25 '1.1)
'
    dropping space
check_literal:After drop space:'"' idx=25 '1.1)
'
  '"' != '1'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
isfloatdigit:
isfloatdigit:
check_float: ret1
check_number: ret1
check_eitem:ret1
check_eitem: ')
'
check_operator: )

check_literal:lit=',' idx=28 ')
'
check_literal:After drop space:',' idx=28 ')
'
  ',' != ')'
check_literal: ret0
check_operator:ret0
check_function: ')
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=28 ')
'
    dropping space
check_literal:After drop space:'%' idx=28 ')
'
  '%' != ')'
check_literal: ret0
check_literal:lit=' "' idx=28 ')
'
    dropping space
check_literal:After drop space:'"' idx=28 ')
'
  '"' != ')'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: ')
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname ')
':
check_vname ret0 ')
':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=28 ')
'
    dropping space
check_literal:After drop space:'(' idx=28 ')
'
  '(' != ')'
check_literal: ret0
check_sub_expr: ret0
check_eitem:ret0
check_expression:ret1 ')
'
check_assignment:ret1
check_line:ret1
scan_cline: Checked len=2, ')
'
========================================================
A= A + (2*3+3*Z%-   ABC%*1.1)

========================================================
(output_expression_start)
scan_line:
check_assignment:
check_variable:
check_vname 'A= A + (2*3+3*Z%-   ABC%*1.1)
':
check_vname ret1 '= A + (2*3+3*Z%-   ABC%*1.1)
':
check_variable: '= A + (2*3+3*Z%-   ABC%*1.1)
'
check_variable: Ary test '= A + (2*3+3*Z%-   ABC%*1.1)
'
check_literal:lit='(' idx=1 '= A + (2*3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:'(' idx=1 '= A + (2*3+3*Z%-   ABC%*1.1)
'
  '(' != '='
check_literal: ret0
check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
check_variable:ret1 
check_literal:lit=' =' idx=1 '= A + (2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'=' idx=1 '= A + (2*3+3*Z%-   ABC%*1.1)
'
check_literal:After while(): A + (2*3+3*Z%-   ABC%*1.1)

check_literal:ret1 
check_expression: 'A + (2*3+3*Z%-   ABC%*1.1)
'
check_eitem: 'A + (2*3+3*Z%-   ABC%*1.1)
'
check_operator: A + (2*3+3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=3 'A + (2*3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=3 'A + (2*3+3*Z%-   ABC%*1.1)
'
  ',' != 'A'
check_literal: ret0
check_operator:ret0
check_function: 'A + (2*3+3*Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=3 'A + (2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=3 'A + (2*3+3*Z%-   ABC%*1.1)
'
  '%' != 'A'
check_literal: ret0
check_literal:lit=' "' idx=3 'A + (2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=3 'A + (2*3+3*Z%-   ABC%*1.1)
'
  '"' != 'A'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'A + (2*3+3*Z%-   ABC%*1.1)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'A + (2*3+3*Z%-   ABC%*1.1)
':
check_vname ret1 ' + (2*3+3*Z%-   ABC%*1.1)
':
check_variable: ' + (2*3+3*Z%-   ABC%*1.1)
'
check_variable: Ary test ' + (2*3+3*Z%-   ABC%*1.1)
'
check_literal:lit='(' idx=4 ' + (2*3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:'(' idx=4 ' + (2*3+3*Z%-   ABC%*1.1)
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
check_variable:ret1 
check_eitem:ret1
check_eitem: ' + (2*3+3*Z%-   ABC%*1.1)
'
check_operator:  + (2*3+3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=5 '+ (2*3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=5 '+ (2*3+3*Z%-   ABC%*1.1)
'
  ',' != '+'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
check_eitem: ' (2*3+3*Z%-   ABC%*1.1)
'
check_operator:  (2*3+3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=7 '(2*3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=7 '(2*3+3*Z%-   ABC%*1.1)
'
  ',' != '('
check_literal: ret0
check_operator:ret0
check_function: '(2*3+3*Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=6 ' (2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=7 '(2*3+3*Z%-   ABC%*1.1)
'
  '%' != '('
check_literal: ret0
check_literal:lit=' "' idx=6 ' (2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=7 '(2*3+3*Z%-   ABC%*1.1)
'
  '"' != '('
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: '(2*3+3*Z%-   ABC%*1.1)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname '(2*3+3*Z%-   ABC%*1.1)
':
check_vname ret0 '(2*3+3*Z%-   ABC%*1.1)
':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=6 ' (2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'(' idx=7 '(2*3+3*Z%-   ABC%*1.1)
'
check_literal:After while():2*3+3*Z%-   ABC%*1.1)

check_literal:ret1 
check_sub_expr: ret1
check_eitem:ret1
check_eitem: '2*3+3*Z%-   ABC%*1.1)
'
check_operator: 2*3+3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=8 '2*3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=8 '2*3+3*Z%-   ABC%*1.1)
'
  ',' != '2'
check_literal: ret0
check_operator:ret0
check_function: '2*3+3*Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=8 '2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=8 '2*3+3*Z%-   ABC%*1.1)
'
  '%' != '2'
check_literal: ret0
check_literal:lit=' "' idx=8 '2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=8 '2*3+3*Z%-   ABC%*1.1)
'
  '"' != '2'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '2*3+3*Z%-   ABC%*1.1)
'
check_integer:ret1
check_number: ret1
check_eitem:ret1
check_eitem: '*3+3*Z%-   ABC%*1.1)
'
check_operator: *3+3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=9 '*3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=9 '*3+3*Z%-   ABC%*1.1)
'
  ',' != '*'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
check_eitem: '3+3*Z%-   ABC%*1.1)
'
check_operator: 3+3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=10 '3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=10 '3+3*Z%-   ABC%*1.1)
'
  ',' != '3'
check_literal: ret0
check_operator:ret0
check_function: '3+3*Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=10 '3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=10 '3+3*Z%-   ABC%*1.1)
'
  '%' != '3'
check_literal: ret0
check_literal:lit=' "' idx=10 '3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=10 '3+3*Z%-   ABC%*1.1)
'
  '"' != '3'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '3+3*Z%-   ABC%*1.1)
'
check_integer:ret1
check_number: ret1
check_eitem:ret1
check_eitem: '+3*Z%-   ABC%*1.1)
'
check_operator: +3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=11 '+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=11 '+3*Z%-   ABC%*1.1)
'
  ',' != '+'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
check_eitem: '3*Z%-   ABC%*1.1)
'
check_operator: 3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=12 '3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=12 '3*Z%-   ABC%*1.1)
'
  ',' != '3'
check_literal: ret0
check_operator:ret0
check_function: '3*Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=12 '3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=12 '3*Z%-   ABC%*1.1)
'
  '%' != '3'
check_literal: ret0
check_literal:lit=' "' idx=12 '3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=12 '3*Z%-   ABC%*1.1)
'
  '"' != '3'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '3*Z%-   ABC%*1.1)
'
check_integer:ret1
check_number: ret1
check_eitem:ret1
check_eitem: '*Z%-   ABC%*1.1)
'
check_operator: *Z%-   ABC%*1.1)

check_literal:lit=',' idx=13 '*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=13 '*Z%-   ABC%*1.1)
'
  ',' != '*'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
check_eitem: 'Z%-   ABC%*1.1)
'
check_operator: Z%-   ABC%*1.1)

check_literal:lit=',' idx=14 'Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=14 'Z%-   ABC%*1.1)
'
  ',' != 'Z'
check_literal: ret0
check_operator:ret0
check_function: 'Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=14 'Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=14 'Z%-   ABC%*1.1)
'
  '%' != 'Z'
check_literal: ret0
check_literal:lit=' "' idx=14 'Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=14 'Z%-   ABC%*1.1)
'
  '"' != 'Z'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'Z%-   ABC%*1.1)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'Z%-   ABC%*1.1)
':
check_vname ret1 '%-   ABC%*1.1)
':
check_variable: '%-   ABC%*1.1)
'
check_variable: Ary test '-   ABC%*1.1)
'
check_literal:lit='(' idx=16 '-   ABC%*1.1)
'
check_literal:After drop space:'(' idx=16 '-   ABC%*1.1)
'
  '(' != '-'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
check_eitem:ret1
check_eitem: '-   ABC%*1.1)
'
check_operator: -   ABC%*1.1)

check_literal:lit=',' idx=16 '-   ABC%*1.1)
'
check_literal:After drop space:',' idx=16 '-   ABC%*1.1)
'
  ',' != '-'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
check_eitem: '   ABC%*1.1)
'
check_operator:    ABC%*1.1)

check_literal:lit=',' idx=20 'ABC%*1.1)
'
check_literal:After drop space:',' idx=20 'ABC%*1.1)
'
  ',' != 'A'
check_literal: ret0
check_operator:ret0
check_function: 'ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=17 '   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=20 'ABC%*1.1)
'
  '%' != 'A'
check_literal: ret0
check_literal:lit=' "' idx=17 '   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=20 'ABC%*1.1)
'
  '"' != 'A'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'ABC%*1.1)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'ABC%*1.1)
':
check_vname ret1 '%*1.1)
':
check_variable: '%*1.1)
'
check_variable: Ary test '*1.1)
'
check_literal:lit='(' idx=24 '*1.1)
'
check_literal:After drop space:'(' idx=24 '*1.1)
'
  '(' != '*'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
check_eitem:ret1
check_eitem: '*1.1)
'
check_operator: *1.1)

check_literal:lit=',' idx=24 '*1.1)
'
check_literal:After drop space:',' idx=24 '*1.1)
'
  ',' != '*'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
check_eitem: '1.1)
'
check_operator: 1.1)

check_literal:lit=',' idx=25 '1.1)
'
check_literal:After drop space:',' idx=25 '1.1)
'
  ',' != '1'
check_literal: ret0
check_operator:ret0
check_function: '1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=25 '1.1)
'
    dropping space
check_literal:After drop space:'%' idx=25 '1.1)
'
  '%' != '1'
check_literal: ret0
check_literal:lit=' "' idx=25 '1.1)
'
    dropping space
check_literal:After drop space:'"' idx=25 '1.1)
'
  '"' != '1'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
isfloatdigit:
isfloatdigit:
check_float: ret1
check_number: ret1
check_eitem:ret1
check_eitem: ')
'
check_operator: )

check_literal:lit=',' idx=28 ')
'
check_literal:After drop space:',' idx=28 ')
'
  ',' != ')'
check_literal: ret0
check_operator:ret0
check_function: ')
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=28 ')
'
    dropping space
check_literal:After drop space:'%' idx=28 ')
'
  '%' != ')'
check_literal: ret0
check_literal:lit=' "' idx=28 ')
'
    dropping space
check_literal:After drop space:'"' idx=28 ')
'
  '"' != ')'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: ')
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname ')
':
check_vname ret0 ')
':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=28 ')
'
    dropping space
check_literal:After drop space:'(' idx=28 ')
'
  '(' != ')'
check_literal: ret0
check_sub_expr: ret0
check_eitem:ret0
check_expression:ret1 ')
'
check_assignment:ret1
scan_assignment:
scan_variable:
scan_vname: 'A= A + (2*3+3*Z%-   ABC%*1.1)
'
scan_vname: ret1 'A'
scan_variable: '= A + (2*3+3*Z%-   ABC%*1.1)
' vname='A'
scan_variable: Ary test '= A + (2*3+3*Z%-   ABC%*1.1)
'
check_literal:lit='(' idx=1 '= A + (2*3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:'(' idx=1 '= A + (2*3+3*Z%-   ABC%*1.1)
'
  '(' != '='
check_literal: ret0
scan_variable:ret1 vname='A' is str:0 int:0 flt:1 ary:0
   Frst:1 T:'A' exptype:U
token_is_function:
token_is_function:A is not function
token_is_variable: tok:'A'
token_is_function:
token_is_function:A is not function
(init_get_name) 
init_get_name:'A'
(init_get_name) 
init_get_name:'A'
(get_name) 
get_name:gn:'A'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] f f A
VAR INFO: '                 A' gbl:0 ref:1 int:0 flt:1 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
scan_literal:lit=' =' '= A + (2*3+3*Z%-   ABC%*1.1)
'
scan_literal:After drop space:= A + (2*3+3*Z%-   ABC%*1.1)

scan_literal:while loop:= A + (2*3+3*Z%-   ABC%*1.1)

   Frst:0 T:'=' exptype:i
(operator_precedence) 
= is operator
'=' is operator
(process_token) 
Token is operator o1 name:= o2 name:
(process_token) 
opr1:1 opr2:0
Push 1
 Push:'='
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: = type:0
(op_stack_print) 
------------------

scan_expression: ' A + (2*3+3*Z%-   ABC%*1.1)
'
check_eitem: 'A + (2*3+3*Z%-   ABC%*1.1)
'
check_operator: A + (2*3+3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=3 'A + (2*3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=3 'A + (2*3+3*Z%-   ABC%*1.1)
'
  ',' != 'A'
check_literal: ret0
check_operator:ret0
check_function: 'A + (2*3+3*Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=3 'A + (2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=3 'A + (2*3+3*Z%-   ABC%*1.1)
'
  '%' != 'A'
check_literal: ret0
check_literal:lit=' "' idx=3 'A + (2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=3 'A + (2*3+3*Z%-   ABC%*1.1)
'
  '"' != 'A'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'A + (2*3+3*Z%-   ABC%*1.1)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'A + (2*3+3*Z%-   ABC%*1.1)
':
check_vname ret1 ' + (2*3+3*Z%-   ABC%*1.1)
':
check_variable: ' + (2*3+3*Z%-   ABC%*1.1)
'
check_variable: Ary test ' + (2*3+3*Z%-   ABC%*1.1)
'
check_literal:lit='(' idx=4 ' + (2*3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:'(' idx=4 ' + (2*3+3*Z%-   ABC%*1.1)
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
check_variable:ret1 
check_eitem:ret1
scan_eitem:
check_operator: A + (2*3+3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=3 'A + (2*3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=3 'A + (2*3+3*Z%-   ABC%*1.1)
'
  ',' != 'A'
check_literal: ret0
check_operator:ret0
check_function: 'A + (2*3+3*Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=3 'A + (2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=3 'A + (2*3+3*Z%-   ABC%*1.1)
'
  '%' != 'A'
check_literal: ret0
check_literal:lit=' "' idx=3 'A + (2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=3 'A + (2*3+3*Z%-   ABC%*1.1)
'
  '"' != 'A'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'A + (2*3+3*Z%-   ABC%*1.1)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'A + (2*3+3*Z%-   ABC%*1.1)
':
check_vname ret1 ' + (2*3+3*Z%-   ABC%*1.1)
':
check_variable: ' + (2*3+3*Z%-   ABC%*1.1)
'
check_variable: Ary test ' + (2*3+3*Z%-   ABC%*1.1)
'
check_literal:lit='(' idx=4 ' + (2*3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:'(' idx=4 ' + (2*3+3*Z%-   ABC%*1.1)
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
check_variable:ret1 
scan_atom:
check_literal:lit=' %' idx=3 'A + (2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=3 'A + (2*3+3*Z%-   ABC%*1.1)
'
  '%' != 'A'
check_literal: ret0
check_literal:lit=' "' idx=3 'A + (2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=3 'A + (2*3+3*Z%-   ABC%*1.1)
'
  '"' != 'A'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'A + (2*3+3*Z%-   ABC%*1.1)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'A + (2*3+3*Z%-   ABC%*1.1)
':
check_vname ret1 ' + (2*3+3*Z%-   ABC%*1.1)
':
check_variable: ' + (2*3+3*Z%-   ABC%*1.1)
'
check_variable: Ary test ' + (2*3+3*Z%-   ABC%*1.1)
'
check_literal:lit='(' idx=4 ' + (2*3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:'(' idx=4 ' + (2*3+3*Z%-   ABC%*1.1)
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
check_variable:ret1 
scan_variable:
scan_vname: 'A + (2*3+3*Z%-   ABC%*1.1)
'
scan_vname: ret1 'A'
scan_variable: ' + (2*3+3*Z%-   ABC%*1.1)
' vname='A'
scan_variable: Ary test ' + (2*3+3*Z%-   ABC%*1.1)
'
check_literal:lit='(' idx=4 ' + (2*3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:'(' idx=4 ' + (2*3+3*Z%-   ABC%*1.1)
'
  '(' != ' '
check_literal: ret0
scan_variable:ret1 vname='A' is str:0 int:0 flt:1 ary:0
   Frst:0 T:'A' exptype:i
(operator_precedence) 
= is operator
token_is_function:
token_is_function:A is not function
token_is_variable: tok:'A'
token_is_function:
token_is_function:A is not function
(init_get_name) 
init_get_name:'A'
(init_get_name) 
init_get_name:'A'
(get_name) 
get_name:gn:'A'
process_token:type:i req_type:i
modify_expression_type:Inittype:i Intype:f Outtype:f
( output_variable) [f,()] f f A
VAR INFO: '                 A' gbl:0 ref:1 int:0 flt:1 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
check_eitem: ' + (2*3+3*Z%-   ABC%*1.1)
'
check_operator:  + (2*3+3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=5 '+ (2*3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=5 '+ (2*3+3*Z%-   ABC%*1.1)
'
  ',' != '+'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
scan_eitem:
check_operator:  + (2*3+3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=5 '+ (2*3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=5 '+ (2*3+3*Z%-   ABC%*1.1)
'
  ',' != '+'
check_literal: ret0
check_operator: ret1
scan_operator: ' + (2*3+3*Z%-   ABC%*1.1)
'
check_literal:lit=',' idx=5 '+ (2*3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=5 '+ (2*3+3*Z%-   ABC%*1.1)
'
  ',' != '+'
check_literal: ret0
scan_operator: ret1 ' (2*3+3*Z%-   ABC%*1.1)
'
   Frst:0 T:'+' exptype:f
(operator_precedence) 
+ is operator
(operator_precedence) 
= is operator
'+' is operator
(process_token) 
Token is operator o1 name:+ o2 name:=
(process_token) 
opr1:3 opr2:1
(operator_precedence) 
= is operator
(operator_precedence) 
= is operator
Push 1
 Push:'+'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (2)

(op_stack_print) 
000: = type:0
(op_stack_print) 
001: + type:1
(op_stack_print) 
------------------

check_eitem: ' (2*3+3*Z%-   ABC%*1.1)
'
check_operator:  (2*3+3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=7 '(2*3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=7 '(2*3+3*Z%-   ABC%*1.1)
'
  ',' != '('
check_literal: ret0
check_operator:ret0
check_function: '(2*3+3*Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=6 ' (2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=7 '(2*3+3*Z%-   ABC%*1.1)
'
  '%' != '('
check_literal: ret0
check_literal:lit=' "' idx=6 ' (2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=7 '(2*3+3*Z%-   ABC%*1.1)
'
  '"' != '('
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: '(2*3+3*Z%-   ABC%*1.1)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname '(2*3+3*Z%-   ABC%*1.1)
':
check_vname ret0 '(2*3+3*Z%-   ABC%*1.1)
':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=6 ' (2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'(' idx=7 '(2*3+3*Z%-   ABC%*1.1)
'
check_literal:After while():2*3+3*Z%-   ABC%*1.1)

check_literal:ret1 
check_sub_expr: ret1
check_eitem:ret1
scan_eitem:
check_operator:  (2*3+3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=7 '(2*3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=7 '(2*3+3*Z%-   ABC%*1.1)
'
  ',' != '('
check_literal: ret0
check_operator:ret0
check_function: '(2*3+3*Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=6 ' (2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=7 '(2*3+3*Z%-   ABC%*1.1)
'
  '%' != '('
check_literal: ret0
check_literal:lit=' "' idx=6 ' (2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=7 '(2*3+3*Z%-   ABC%*1.1)
'
  '"' != '('
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: '(2*3+3*Z%-   ABC%*1.1)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname '(2*3+3*Z%-   ABC%*1.1)
':
check_vname ret0 '(2*3+3*Z%-   ABC%*1.1)
':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=6 ' (2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'(' idx=7 '(2*3+3*Z%-   ABC%*1.1)
'
check_literal:After while():2*3+3*Z%-   ABC%*1.1)

check_literal:ret1 
check_sub_expr: ret1
scan_sub_expr:
scan_literal:lit=' (' ' (2*3+3*Z%-   ABC%*1.1)
'
scan_literal:After drop space:(2*3+3*Z%-   ABC%*1.1)

scan_literal:while loop:(2*3+3*Z%-   ABC%*1.1)

   Frst:0 T:'(' exptype:f
(operator_precedence) 
+ is operator
(output_sub_start)
 Push:'('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (3)

(op_stack_print) 
000: = type:0
(op_stack_print) 
001: + type:1
(op_stack_print) 
002: ( type:16
(op_stack_print) 
------------------

   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (4)

(op_stack_print) 
000: = type:0
(op_stack_print) 
001: + type:1
(op_stack_print) 
002: ( type:16
(op_stack_print) 
003: ( type:16
(op_stack_print) 
------------------

scan_expression: '2*3+3*Z%-   ABC%*1.1)
'
check_eitem: '2*3+3*Z%-   ABC%*1.1)
'
check_operator: 2*3+3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=8 '2*3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=8 '2*3+3*Z%-   ABC%*1.1)
'
  ',' != '2'
check_literal: ret0
check_operator:ret0
check_function: '2*3+3*Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=8 '2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=8 '2*3+3*Z%-   ABC%*1.1)
'
  '%' != '2'
check_literal: ret0
check_literal:lit=' "' idx=8 '2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=8 '2*3+3*Z%-   ABC%*1.1)
'
  '"' != '2'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '2*3+3*Z%-   ABC%*1.1)
'
check_integer:ret1
check_number: ret1
check_eitem:ret1
scan_eitem:
check_operator: 2*3+3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=8 '2*3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=8 '2*3+3*Z%-   ABC%*1.1)
'
  ',' != '2'
check_literal: ret0
check_operator:ret0
check_function: '2*3+3*Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=8 '2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=8 '2*3+3*Z%-   ABC%*1.1)
'
  '%' != '2'
check_literal: ret0
check_literal:lit=' "' idx=8 '2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=8 '2*3+3*Z%-   ABC%*1.1)
'
  '"' != '2'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '2*3+3*Z%-   ABC%*1.1)
'
check_integer:ret1
check_number: ret1
scan_atom:
check_literal:lit=' %' idx=8 '2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=8 '2*3+3*Z%-   ABC%*1.1)
'
  '%' != '2'
check_literal: ret0
check_literal:lit=' "' idx=8 '2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=8 '2*3+3*Z%-   ABC%*1.1)
'
  '"' != '2'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '2*3+3*Z%-   ABC%*1.1)
'
check_integer:ret1
check_number: ret1
scan_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '2*3+3*Z%-   ABC%*1.1)
'
check_integer:ret1
scan_integer:
scan_integer:ret1
   Frst:0 T:'2' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(f U )] i i 2
scan_integer:ret1  2
check_eitem: '*3+3*Z%-   ABC%*1.1)
'
check_operator: *3+3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=9 '*3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=9 '*3+3*Z%-   ABC%*1.1)
'
  ',' != '*'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
scan_eitem:
check_operator: *3+3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=9 '*3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=9 '*3+3*Z%-   ABC%*1.1)
'
  ',' != '*'
check_literal: ret0
check_operator: ret1
scan_operator: '*3+3*Z%-   ABC%*1.1)
'
check_literal:lit=',' idx=9 '*3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=9 '*3+3*Z%-   ABC%*1.1)
'
  ',' != '*'
check_literal: ret0
scan_operator: ret1 '3+3*Z%-   ABC%*1.1)
'
   Frst:0 T:'*' exptype:i
(operator_precedence) 
* is operator
'*' is operator
(process_token) 
Token is operator o1 name:* o2 name:(
(process_token) 
opr1:5 opr2:0
Push 1
 Push:'*'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (5)

(op_stack_print) 
000: = type:0
(op_stack_print) 
001: + type:1
(op_stack_print) 
002: ( type:16
(op_stack_print) 
003: ( type:16
(op_stack_print) 
004: * type:0
(op_stack_print) 
------------------

check_eitem: '3+3*Z%-   ABC%*1.1)
'
check_operator: 3+3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=10 '3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=10 '3+3*Z%-   ABC%*1.1)
'
  ',' != '3'
check_literal: ret0
check_operator:ret0
check_function: '3+3*Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=10 '3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=10 '3+3*Z%-   ABC%*1.1)
'
  '%' != '3'
check_literal: ret0
check_literal:lit=' "' idx=10 '3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=10 '3+3*Z%-   ABC%*1.1)
'
  '"' != '3'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '3+3*Z%-   ABC%*1.1)
'
check_integer:ret1
check_number: ret1
check_eitem:ret1
scan_eitem:
check_operator: 3+3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=10 '3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=10 '3+3*Z%-   ABC%*1.1)
'
  ',' != '3'
check_literal: ret0
check_operator:ret0
check_function: '3+3*Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=10 '3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=10 '3+3*Z%-   ABC%*1.1)
'
  '%' != '3'
check_literal: ret0
check_literal:lit=' "' idx=10 '3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=10 '3+3*Z%-   ABC%*1.1)
'
  '"' != '3'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '3+3*Z%-   ABC%*1.1)
'
check_integer:ret1
check_number: ret1
scan_atom:
check_literal:lit=' %' idx=10 '3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=10 '3+3*Z%-   ABC%*1.1)
'
  '%' != '3'
check_literal: ret0
check_literal:lit=' "' idx=10 '3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=10 '3+3*Z%-   ABC%*1.1)
'
  '"' != '3'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '3+3*Z%-   ABC%*1.1)
'
check_integer:ret1
check_number: ret1
scan_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '3+3*Z%-   ABC%*1.1)
'
check_integer:ret1
scan_integer:
scan_integer:ret1
   Frst:0 T:'3' exptype:i
(operator_precedence) 
* is operator
modify_expression_type:Inittype:i Intype:i Outtype:i
(  output_integer) [i,(f U )] i i 3
scan_integer:ret1  3
check_eitem: '+3*Z%-   ABC%*1.1)
'
check_operator: +3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=11 '+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=11 '+3*Z%-   ABC%*1.1)
'
  ',' != '+'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
scan_eitem:
check_operator: +3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=11 '+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=11 '+3*Z%-   ABC%*1.1)
'
  ',' != '+'
check_literal: ret0
check_operator: ret1
scan_operator: '+3*Z%-   ABC%*1.1)
'
check_literal:lit=',' idx=11 '+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=11 '+3*Z%-   ABC%*1.1)
'
  ',' != '+'
check_literal: ret0
scan_operator: ret1 '3*Z%-   ABC%*1.1)
'
   Frst:0 T:'+' exptype:i
(operator_precedence) 
+ is operator
(operator_precedence) 
* is operator
'+' is operator
(process_token) 
Token is operator o1 name:+ o2 name:*
(process_token) 
opr1:3 opr2:5
(operator_precedence) 
* is operator
Pop 1
Pop '*'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (4)

(op_stack_print) 
000: = type:0
(op_stack_print) 
001: + type:1
(op_stack_print) 
002: ( type:16
(op_stack_print) 
003: ( type:16
(op_stack_print) 
------------------

(operator_precedence) 
+ is operator
(operator_precedence) 
* is operator
( output_operator) [i,(f U )] i i *
token_is_function:
token_is_function:* is not function
Push 1
 Push:'+'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (5)

(op_stack_print) 
000: = type:0
(op_stack_print) 
001: + type:1
(op_stack_print) 
002: ( type:16
(op_stack_print) 
003: ( type:16
(op_stack_print) 
004: + type:0
(op_stack_print) 
------------------

check_eitem: '3*Z%-   ABC%*1.1)
'
check_operator: 3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=12 '3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=12 '3*Z%-   ABC%*1.1)
'
  ',' != '3'
check_literal: ret0
check_operator:ret0
check_function: '3*Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=12 '3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=12 '3*Z%-   ABC%*1.1)
'
  '%' != '3'
check_literal: ret0
check_literal:lit=' "' idx=12 '3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=12 '3*Z%-   ABC%*1.1)
'
  '"' != '3'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '3*Z%-   ABC%*1.1)
'
check_integer:ret1
check_number: ret1
check_eitem:ret1
scan_eitem:
check_operator: 3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=12 '3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=12 '3*Z%-   ABC%*1.1)
'
  ',' != '3'
check_literal: ret0
check_operator:ret0
check_function: '3*Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=12 '3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=12 '3*Z%-   ABC%*1.1)
'
  '%' != '3'
check_literal: ret0
check_literal:lit=' "' idx=12 '3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=12 '3*Z%-   ABC%*1.1)
'
  '"' != '3'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '3*Z%-   ABC%*1.1)
'
check_integer:ret1
check_number: ret1
scan_atom:
check_literal:lit=' %' idx=12 '3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=12 '3*Z%-   ABC%*1.1)
'
  '%' != '3'
check_literal: ret0
check_literal:lit=' "' idx=12 '3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=12 '3*Z%-   ABC%*1.1)
'
  '"' != '3'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '3*Z%-   ABC%*1.1)
'
check_integer:ret1
check_number: ret1
scan_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '3*Z%-   ABC%*1.1)
'
check_integer:ret1
scan_integer:
scan_integer:ret1
   Frst:0 T:'3' exptype:i
(operator_precedence) 
+ is operator
modify_expression_type:Inittype:i Intype:i Outtype:i
(  output_integer) [i,(f U )] i i 3
scan_integer:ret1  3
check_eitem: '*Z%-   ABC%*1.1)
'
check_operator: *Z%-   ABC%*1.1)

check_literal:lit=',' idx=13 '*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=13 '*Z%-   ABC%*1.1)
'
  ',' != '*'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
scan_eitem:
check_operator: *Z%-   ABC%*1.1)

check_literal:lit=',' idx=13 '*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=13 '*Z%-   ABC%*1.1)
'
  ',' != '*'
check_literal: ret0
check_operator: ret1
scan_operator: '*Z%-   ABC%*1.1)
'
check_literal:lit=',' idx=13 '*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=13 '*Z%-   ABC%*1.1)
'
  ',' != '*'
check_literal: ret0
scan_operator: ret1 'Z%-   ABC%*1.1)
'
   Frst:0 T:'*' exptype:i
(operator_precedence) 
* is operator
(operator_precedence) 
+ is operator
'*' is operator
(process_token) 
Token is operator o1 name:* o2 name:+
(process_token) 
opr1:5 opr2:3
(operator_precedence) 
+ is operator
(operator_precedence) 
+ is operator
Push 1
 Push:'*'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (6)

(op_stack_print) 
000: = type:0
(op_stack_print) 
001: + type:1
(op_stack_print) 
002: ( type:16
(op_stack_print) 
003: ( type:16
(op_stack_print) 
004: + type:0
(op_stack_print) 
005: * type:0
(op_stack_print) 
------------------

check_eitem: 'Z%-   ABC%*1.1)
'
check_operator: Z%-   ABC%*1.1)

check_literal:lit=',' idx=14 'Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=14 'Z%-   ABC%*1.1)
'
  ',' != 'Z'
check_literal: ret0
check_operator:ret0
check_function: 'Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=14 'Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=14 'Z%-   ABC%*1.1)
'
  '%' != 'Z'
check_literal: ret0
check_literal:lit=' "' idx=14 'Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=14 'Z%-   ABC%*1.1)
'
  '"' != 'Z'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'Z%-   ABC%*1.1)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'Z%-   ABC%*1.1)
':
check_vname ret1 '%-   ABC%*1.1)
':
check_variable: '%-   ABC%*1.1)
'
check_variable: Ary test '-   ABC%*1.1)
'
check_literal:lit='(' idx=16 '-   ABC%*1.1)
'
check_literal:After drop space:'(' idx=16 '-   ABC%*1.1)
'
  '(' != '-'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
check_eitem:ret1
scan_eitem:
check_operator: Z%-   ABC%*1.1)

check_literal:lit=',' idx=14 'Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=14 'Z%-   ABC%*1.1)
'
  ',' != 'Z'
check_literal: ret0
check_operator:ret0
check_function: 'Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=14 'Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=14 'Z%-   ABC%*1.1)
'
  '%' != 'Z'
check_literal: ret0
check_literal:lit=' "' idx=14 'Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=14 'Z%-   ABC%*1.1)
'
  '"' != 'Z'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'Z%-   ABC%*1.1)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'Z%-   ABC%*1.1)
':
check_vname ret1 '%-   ABC%*1.1)
':
check_variable: '%-   ABC%*1.1)
'
check_variable: Ary test '-   ABC%*1.1)
'
check_literal:lit='(' idx=16 '-   ABC%*1.1)
'
check_literal:After drop space:'(' idx=16 '-   ABC%*1.1)
'
  '(' != '-'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
scan_atom:
check_literal:lit=' %' idx=14 'Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=14 'Z%-   ABC%*1.1)
'
  '%' != 'Z'
check_literal: ret0
check_literal:lit=' "' idx=14 'Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=14 'Z%-   ABC%*1.1)
'
  '"' != 'Z'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'Z%-   ABC%*1.1)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'Z%-   ABC%*1.1)
':
check_vname ret1 '%-   ABC%*1.1)
':
check_variable: '%-   ABC%*1.1)
'
check_variable: Ary test '-   ABC%*1.1)
'
check_literal:lit='(' idx=16 '-   ABC%*1.1)
'
check_literal:After drop space:'(' idx=16 '-   ABC%*1.1)
'
  '(' != '-'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
scan_variable:
scan_vname: 'Z%-   ABC%*1.1)
'
scan_vname: ret1 'Z'
scan_variable: '%-   ABC%*1.1)
' vname='Z'
scan_variable: Ary test '-   ABC%*1.1)
'
check_literal:lit='(' idx=16 '-   ABC%*1.1)
'
check_literal:After drop space:'(' idx=16 '-   ABC%*1.1)
'
  '(' != '-'
check_literal: ret0
scan_variable:ret1 vname='Z%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'Z%' exptype:i
(operator_precedence) 
* is operator
token_is_function:
token_is_function:Z% is not function
token_is_variable: tok:'Z%'
token_is_function:
token_is_function:Z% is not function
(init_get_name) 
init_get_name:'Z%'
(init_get_name) 
init_get_name:'Z%'
(get_name) 
get_name:gn:'Z%'
process_token:type:i req_type:i
modify_expression_type:Inittype:i Intype:i Outtype:i
( output_variable) [i,(f U )] i i Z%
VAR INFO: '                Z%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
check_eitem: '-   ABC%*1.1)
'
check_operator: -   ABC%*1.1)

check_literal:lit=',' idx=16 '-   ABC%*1.1)
'
check_literal:After drop space:',' idx=16 '-   ABC%*1.1)
'
  ',' != '-'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
scan_eitem:
check_operator: -   ABC%*1.1)

check_literal:lit=',' idx=16 '-   ABC%*1.1)
'
check_literal:After drop space:',' idx=16 '-   ABC%*1.1)
'
  ',' != '-'
check_literal: ret0
check_operator: ret1
scan_operator: '-   ABC%*1.1)
'
check_literal:lit=',' idx=16 '-   ABC%*1.1)
'
check_literal:After drop space:',' idx=16 '-   ABC%*1.1)
'
  ',' != '-'
check_literal: ret0
scan_operator: ret1 '   ABC%*1.1)
'
   Frst:0 T:'-' exptype:i
(operator_precedence) 
- is operator
(operator_precedence) 
* is operator
'-' is operator
(process_token) 
Token is operator o1 name:- o2 name:*
(process_token) 
opr1:3 opr2:5
(operator_precedence) 
* is operator
Pop 1
Pop '*'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (5)

(op_stack_print) 
000: = type:0
(op_stack_print) 
001: + type:1
(op_stack_print) 
002: ( type:16
(op_stack_print) 
003: ( type:16
(op_stack_print) 
004: + type:0
(op_stack_print) 
------------------

(operator_precedence) 
- is operator
(operator_precedence) 
* is operator
( output_operator) [i,(f U )] i i *
token_is_function:
token_is_function:* is not function
(operator_precedence) 
+ is operator
(operator_precedence) 
+ is operator
(operator_left_assoc) 
- is operator
Push 1
 Push:'-'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (6)

(op_stack_print) 
000: = type:0
(op_stack_print) 
001: + type:1
(op_stack_print) 
002: ( type:16
(op_stack_print) 
003: ( type:16
(op_stack_print) 
004: + type:0
(op_stack_print) 
005: - type:0
(op_stack_print) 
------------------

check_eitem: '   ABC%*1.1)
'
check_operator:    ABC%*1.1)

check_literal:lit=',' idx=20 'ABC%*1.1)
'
check_literal:After drop space:',' idx=20 'ABC%*1.1)
'
  ',' != 'A'
check_literal: ret0
check_operator:ret0
check_function: 'ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=17 '   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=20 'ABC%*1.1)
'
  '%' != 'A'
check_literal: ret0
check_literal:lit=' "' idx=17 '   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=20 'ABC%*1.1)
'
  '"' != 'A'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'ABC%*1.1)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'ABC%*1.1)
':
check_vname ret1 '%*1.1)
':
check_variable: '%*1.1)
'
check_variable: Ary test '*1.1)
'
check_literal:lit='(' idx=24 '*1.1)
'
check_literal:After drop space:'(' idx=24 '*1.1)
'
  '(' != '*'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
check_eitem:ret1
scan_eitem:
check_operator:    ABC%*1.1)

check_literal:lit=',' idx=20 'ABC%*1.1)
'
check_literal:After drop space:',' idx=20 'ABC%*1.1)
'
  ',' != 'A'
check_literal: ret0
check_operator:ret0
check_function: 'ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=17 '   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=20 'ABC%*1.1)
'
  '%' != 'A'
check_literal: ret0
check_literal:lit=' "' idx=17 '   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=20 'ABC%*1.1)
'
  '"' != 'A'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'ABC%*1.1)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'ABC%*1.1)
':
check_vname ret1 '%*1.1)
':
check_variable: '%*1.1)
'
check_variable: Ary test '*1.1)
'
check_literal:lit='(' idx=24 '*1.1)
'
check_literal:After drop space:'(' idx=24 '*1.1)
'
  '(' != '*'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
scan_atom:
check_literal:lit=' %' idx=17 '   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=20 'ABC%*1.1)
'
  '%' != 'A'
check_literal: ret0
check_literal:lit=' "' idx=17 '   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=20 'ABC%*1.1)
'
  '"' != 'A'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'ABC%*1.1)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'ABC%*1.1)
':
check_vname ret1 '%*1.1)
':
check_variable: '%*1.1)
'
check_variable: Ary test '*1.1)
'
check_literal:lit='(' idx=24 '*1.1)
'
check_literal:After drop space:'(' idx=24 '*1.1)
'
  '(' != '*'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
scan_variable:
scan_vname: '   ABC%*1.1)
'
scan_vname: ret1 'ABC'
scan_variable: '%*1.1)
' vname='ABC'
scan_variable: Ary test '*1.1)
'
check_literal:lit='(' idx=24 '*1.1)
'
check_literal:After drop space:'(' idx=24 '*1.1)
'
  '(' != '*'
check_literal: ret0
scan_variable:ret1 vname='ABC%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'ABC%' exptype:i
(operator_precedence) 
- is operator
token_is_function:
token_is_function:ABC% is not function
token_is_variable: tok:'ABC%'
token_is_function:
token_is_function:ABC% is not function
(init_get_name) 
init_get_name:'ABC%'
(init_get_name) 
init_get_name:'ABC%'
(get_name) 
get_name:gn:'ABC%'
process_token:type:i req_type:i
modify_expression_type:Inittype:i Intype:i Outtype:i
( output_variable) [i,(f U )] i i ABC%
VAR INFO: '              ABC%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
check_eitem: '*1.1)
'
check_operator: *1.1)

check_literal:lit=',' idx=24 '*1.1)
'
check_literal:After drop space:',' idx=24 '*1.1)
'
  ',' != '*'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
scan_eitem:
check_operator: *1.1)

check_literal:lit=',' idx=24 '*1.1)
'
check_literal:After drop space:',' idx=24 '*1.1)
'
  ',' != '*'
check_literal: ret0
check_operator: ret1
scan_operator: '*1.1)
'
check_literal:lit=',' idx=24 '*1.1)
'
check_literal:After drop space:',' idx=24 '*1.1)
'
  ',' != '*'
check_literal: ret0
scan_operator: ret1 '1.1)
'
   Frst:0 T:'*' exptype:i
(operator_precedence) 
* is operator
(operator_precedence) 
- is operator
'*' is operator
(process_token) 
Token is operator o1 name:* o2 name:-
(process_token) 
opr1:5 opr2:3
(operator_precedence) 
- is operator
(operator_precedence) 
- is operator
Push 1
 Push:'*'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (7)

(op_stack_print) 
000: = type:0
(op_stack_print) 
001: + type:1
(op_stack_print) 
002: ( type:16
(op_stack_print) 
003: ( type:16
(op_stack_print) 
004: + type:0
(op_stack_print) 
005: - type:0
(op_stack_print) 
006: * type:0
(op_stack_print) 
------------------

check_eitem: '1.1)
'
check_operator: 1.1)

check_literal:lit=',' idx=25 '1.1)
'
check_literal:After drop space:',' idx=25 '1.1)
'
  ',' != '1'
check_literal: ret0
check_operator:ret0
check_function: '1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=25 '1.1)
'
    dropping space
check_literal:After drop space:'%' idx=25 '1.1)
'
  '%' != '1'
check_literal: ret0
check_literal:lit=' "' idx=25 '1.1)
'
    dropping space
check_literal:After drop space:'"' idx=25 '1.1)
'
  '"' != '1'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
isfloatdigit:
isfloatdigit:
check_float: ret1
check_number: ret1
check_eitem:ret1
scan_eitem:
check_operator: 1.1)

check_literal:lit=',' idx=25 '1.1)
'
check_literal:After drop space:',' idx=25 '1.1)
'
  ',' != '1'
check_literal: ret0
check_operator:ret0
check_function: '1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=25 '1.1)
'
    dropping space
check_literal:After drop space:'%' idx=25 '1.1)
'
  '%' != '1'
check_literal: ret0
check_literal:lit=' "' idx=25 '1.1)
'
    dropping space
check_literal:After drop space:'"' idx=25 '1.1)
'
  '"' != '1'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
isfloatdigit:
isfloatdigit:
check_float: ret1
check_number: ret1
scan_atom:
check_literal:lit=' %' idx=25 '1.1)
'
    dropping space
check_literal:After drop space:'%' idx=25 '1.1)
'
  '%' != '1'
check_literal: ret0
check_literal:lit=' "' idx=25 '1.1)
'
    dropping space
check_literal:After drop space:'"' idx=25 '1.1)
'
  '"' != '1'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
isfloatdigit:
isfloatdigit:
check_float: ret1
check_number: ret1
scan_number:
check_float:
isfloatdigit:
isfloatdigit:
isfloatdigit:
isfloatdigit:
check_float: ret1
scan_float:
isfloatdigit:
isfloatdigit:
isfloatdigit:
isfloatdigit:
scan_float: ret1
   Frst:0 T:'1.1' exptype:i
(operator_precedence) 
* is operator
modify_expression_type:Inittype:i Intype:f Outtype:f
(    output_float) [f,(f U )] f f 1.1
check_eitem: ')
'
check_operator: )

check_literal:lit=',' idx=28 ')
'
check_literal:After drop space:',' idx=28 ')
'
  ',' != ')'
check_literal: ret0
check_operator:ret0
check_function: ')
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=28 ')
'
    dropping space
check_literal:After drop space:'%' idx=28 ')
'
  '%' != ')'
check_literal: ret0
check_literal:lit=' "' idx=28 ')
'
    dropping space
check_literal:After drop space:'"' idx=28 ')
'
  '"' != ')'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: ')
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname ')
':
check_vname ret0 ')
':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=28 ')
'
    dropping space
check_literal:After drop space:'(' idx=28 ')
'
  '(' != ')'
check_literal: ret0
check_sub_expr: ret0
check_eitem:ret0
scan_expression: ret1 ')
'
scan_literal:lit=' )' ')
'
scan_literal:After drop space:)

scan_literal:while loop:)

   Frst:0 T:')' exptype:f
(operator_precedence) 
* is operator
(process_token) 
Pop 3
Pop '*'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (6)

(op_stack_print) 
000: = type:0
(op_stack_print) 
001: + type:1
(op_stack_print) 
002: ( type:16
(op_stack_print) 
003: ( type:16
(op_stack_print) 
004: + type:0
(op_stack_print) 
005: - type:0
(op_stack_print) 
------------------

( output_operator) [f,(f U )] i i *
token_is_function:
token_is_function:* is not function
(process_token) 
Pop 3
Pop '-'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (5)

(op_stack_print) 
000: = type:0
(op_stack_print) 
001: + type:1
(op_stack_print) 
002: ( type:16
(op_stack_print) 
003: ( type:16
(op_stack_print) 
004: + type:0
(op_stack_print) 
------------------

( output_operator) [f,(f U )] i i -
token_is_function:
token_is_function:- is not function
(process_token) 
Pop 3
Pop '+'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (4)

(op_stack_print) 
000: = type:0
(op_stack_print) 
001: + type:1
(op_stack_print) 
002: ( type:16
(op_stack_print) 
003: ( type:16
(op_stack_print) 
------------------

( output_operator) [f,(f U )] i i +
token_is_function:
token_is_function:+ is not function
Pop 4
Pop '('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (3)

(op_stack_print) 
000: = type:0
(op_stack_print) 
001: + type:1
(op_stack_print) 
002: ( type:16
(op_stack_print) 
------------------

(  output_sub_end)
token_is_function:
token_is_function:( is not function
(  output_sub_end)
   Frst:0 T:')' exptype:U
Pop 4
Pop '('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (2)

(op_stack_print) 
000: = type:0
(op_stack_print) 
001: + type:1
(op_stack_print) 
------------------

(  output_sub_end)
token_is_function:
token_is_function:+ is not function
(  output_sub_end)
scan_sub_expr:ret1
check_eitem: '
'
check_operator: 

check_literal:lit=',' idx=30 ''
check_literal:After drop space:',' idx=30 ''
check_literal  ret0 Empty test string
check_operator:ret0
check_function: ''
check_function: ret0
check_atom:
check_literal:lit=' %' idx=29 '
'
    dropping space
check_literal:After drop space:'%' idx=30 ''
check_literal  ret0 Empty test string
check_literal:lit=' "' idx=29 '
'
    dropping space
check_literal:After drop space:'"' idx=30 ''
check_literal  ret0 Empty test string
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: ''
check_integer:ret0
check_number: ret0
check_variable:
check_vname '':
check_vname ret0 '':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=29 '
'
    dropping space
check_literal:After drop space:'(' idx=30 ''
check_literal  ret0 Empty test string
check_sub_expr: ret0
check_eitem:ret0
scan_expression: ret1 '
'
scan_assignment: ret1
Finalise stack
Pop '+'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: = type:0
(op_stack_print) 
------------------

( output_operator) [f,()] f f +
token_is_function:
token_is_function:+ is not function
Pop '='
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_operator) [f,()] f f =
token_is_function:
token_is_function:= is not function
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i *  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i Z%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i *  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i ABC%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FLT          f rq:f 1.1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i *  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i -  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i +  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f +  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f =  0:
=================
 BE:A
type_check_stack_push: 'A'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'A' type:f (1)
 BE:A
type_check_stack_push: 'A'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A' type:1
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'A' type:f (1)
001: 'A' type:f (1)
 BE:

Type Check Stack (2)

000: 'A' type:f (1)
001: 'A' type:f (1)
 BE:

Type Check Stack (2)

000: 'A' type:f (1)
001: 'A' type:f (1)
 BE:2
type_check_stack_push: '2'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (3)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A' type:1
(type_check_stack_print) 
002: '2' type:0
(type_check_stack_print) 
------------------


Type Check Stack (3)

000: 'A' type:f (1)
001: 'A' type:f (1)
002: '2' type:i (0)
 BE:3
type_check_stack_push: '3'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (4)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A' type:1
(type_check_stack_print) 
002: '2' type:0
(type_check_stack_print) 
003: '3' type:0
(type_check_stack_print) 
------------------


Type Check Stack (4)

000: 'A' type:f (1)
001: 'A' type:f (1)
002: '2' type:i (0)
003: '3' type:i (0)
 BE:*
BUFF_ID_OPERATOR
Found operator *
type_check_stack_pop: '3'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (3)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A' type:1
(type_check_stack_print) 
002: '2' type:0
(type_check_stack_print) 
------------------

type_check_stack_pop: '2'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A' type:1
(type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (3)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A' type:1
(type_check_stack_print) 
002: '000' type:0
(type_check_stack_print) 
------------------


Type Check Stack (3)

000: 'A' type:f (1)
001: 'A' type:f (1)
002: '000' type:i (0)
 BE:3
type_check_stack_push: '3'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (4)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A' type:1
(type_check_stack_print) 
002: '000' type:0
(type_check_stack_print) 
003: '3' type:0
(type_check_stack_print) 
------------------


Type Check Stack (4)

000: 'A' type:f (1)
001: 'A' type:f (1)
002: '000' type:i (0)
003: '3' type:i (0)
 BE:Z%
type_check_stack_push: 'Z%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (5)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A' type:1
(type_check_stack_print) 
002: '000' type:0
(type_check_stack_print) 
003: '3' type:0
(type_check_stack_print) 
004: 'Z%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (5)

000: 'A' type:f (1)
001: 'A' type:f (1)
002: '000' type:i (0)
003: '3' type:i (0)
004: 'Z%' type:i (0)
 BE:*
BUFF_ID_OPERATOR
Found operator *
type_check_stack_pop: 'Z%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (4)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A' type:1
(type_check_stack_print) 
002: '000' type:0
(type_check_stack_print) 
003: '3' type:0
(type_check_stack_print) 
------------------

type_check_stack_pop: '3'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (3)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A' type:1
(type_check_stack_print) 
002: '000' type:0
(type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (4)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A' type:1
(type_check_stack_print) 
002: '000' type:0
(type_check_stack_print) 
003: '000' type:0
(type_check_stack_print) 
------------------


Type Check Stack (4)

000: 'A' type:f (1)
001: 'A' type:f (1)
002: '000' type:i (0)
003: '000' type:i (0)
 BE:ABC%
type_check_stack_push: 'ABC%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (5)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A' type:1
(type_check_stack_print) 
002: '000' type:0
(type_check_stack_print) 
003: '000' type:0
(type_check_stack_print) 
004: 'ABC%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (5)

000: 'A' type:f (1)
001: 'A' type:f (1)
002: '000' type:i (0)
003: '000' type:i (0)
004: 'ABC%' type:i (0)
 BE:1.1
type_check_stack_push: '1.1'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (6)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A' type:1
(type_check_stack_print) 
002: '000' type:0
(type_check_stack_print) 
003: '000' type:0
(type_check_stack_print) 
004: 'ABC%' type:0
(type_check_stack_print) 
005: '1.1' type:1
(type_check_stack_print) 
------------------


Type Check Stack (6)

000: 'A' type:f (1)
001: 'A' type:f (1)
002: '000' type:i (0)
003: '000' type:i (0)
004: 'ABC%' type:i (0)
005: '1.1' type:f (1)
 BE:*
BUFF_ID_OPERATOR
Found operator *
type_check_stack_pop: '1.1'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (5)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A' type:1
(type_check_stack_print) 
002: '000' type:0
(type_check_stack_print) 
003: '000' type:0
(type_check_stack_print) 
004: 'ABC%' type:0
(type_check_stack_print) 
------------------

type_check_stack_pop: 'ABC%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (4)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A' type:1
(type_check_stack_print) 
002: '000' type:0
(type_check_stack_print) 
003: '000' type:0
(type_check_stack_print) 
------------------

 Mutable type 1 0
type_with_least_conversion_from: f i => f
type_with_least_conversion_from: f i => f
 Autoconversion
 --------------
 Op1: type:1 req type:1
 Op2: type:0 req type:0
 BE:  type:1 req type:1
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 6 5
(dump_exp_buffer2) N8 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_VARIABLE     i rq:i Z%  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 9 8
(dump_exp_buffer2) N11 EXP_BUFF_ID_VARIABLE     i rq:i ABC%  0:
(dump_exp_buffer2) N12 EXP_BUFF_ID_FLT          f rq:f 1.1  0:
=================
 Insert after 11 exp_buffer2_i:12
   Found at i:10
   Copied 11 to 12:
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 6 5
(dump_exp_buffer2) N8 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_VARIABLE     i rq:i Z%  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 9 8
(dump_exp_buffer2) N11 EXP_BUFF_ID_VARIABLE     i rq:i ABC%  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 12 11
(dump_exp_buffer2) N12 EXP_BUFF_ID_FLT          f rq:f 1.1  0:
=================
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (5)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A' type:1
(type_check_stack_print) 
002: '000' type:0
(type_check_stack_print) 
003: '000' type:0
(type_check_stack_print) 
004: '000' type:1
(type_check_stack_print) 
------------------


Type Check Stack (5)

000: 'A' type:f (1)
001: 'A' type:f (1)
002: '000' type:i (0)
003: '000' type:i (0)
004: '000' type:f (1)
 BE:-
BUFF_ID_OPERATOR
Found operator -
type_check_stack_pop: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (4)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A' type:1
(type_check_stack_print) 
002: '000' type:0
(type_check_stack_print) 
003: '000' type:0
(type_check_stack_print) 
------------------

type_check_stack_pop: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (3)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A' type:1
(type_check_stack_print) 
002: '000' type:0
(type_check_stack_print) 
------------------

 Mutable type 1 0
type_with_least_conversion_from: f i => f
type_with_least_conversion_from: f i => f
 Autoconversion
 --------------
 Op1: type:1 req type:1
 Op2: type:0 req type:0
 BE:  type:1 req type:1
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 6 5
(dump_exp_buffer2) N8 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_VARIABLE     i rq:i Z%  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 9 8
(dump_exp_buffer2) N11 EXP_BUFF_ID_VARIABLE     i rq:i ABC%  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 12 11
(dump_exp_buffer2) N12 EXP_BUFF_ID_FLT          f rq:f 1.1  0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_OPERATOR     f rq:f *  2: 12 11
=================
 Insert after 10 exp_buffer2_i:14
   Found at i:9
   Copied 13 to 14:
   Copied 12 to 13:
   Copied 11 to 12:
   Copied 10 to 11:
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 6 5
(dump_exp_buffer2) N8 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_VARIABLE     i rq:i Z%  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 9 8
(dump_exp_buffer2) N16 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 13 10
(dump_exp_buffer2) N11 EXP_BUFF_ID_VARIABLE     i rq:i ABC%  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 12 11
(dump_exp_buffer2) N12 EXP_BUFF_ID_FLT          f rq:f 1.1  0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_OPERATOR     f rq:f *  2: 12 11
=================
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (4)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A' type:1
(type_check_stack_print) 
002: '000' type:0
(type_check_stack_print) 
003: '000' type:1
(type_check_stack_print) 
------------------


Type Check Stack (4)

000: 'A' type:f (1)
001: 'A' type:f (1)
002: '000' type:i (0)
003: '000' type:f (1)
 BE:+
BUFF_ID_OPERATOR
Found operator +
type_check_stack_pop: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (3)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A' type:1
(type_check_stack_print) 
002: '000' type:0
(type_check_stack_print) 
------------------

type_check_stack_pop: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A' type:1
(type_check_stack_print) 
------------------

 Mutable type 1 0
type_with_least_conversion_from: f i => f
type_with_least_conversion_from: f i => f
 Autoconversion
 --------------
 Op1: type:1 req type:1
 Op2: type:0 req type:0
 BE:  type:1 req type:1
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 6 5
(dump_exp_buffer2) N8 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_VARIABLE     i rq:i Z%  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 9 8
(dump_exp_buffer2) N16 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 13 10
(dump_exp_buffer2) N11 EXP_BUFF_ID_VARIABLE     i rq:i ABC%  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 12 11
(dump_exp_buffer2) N12 EXP_BUFF_ID_FLT          f rq:f 1.1  0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_OPERATOR     f rq:f *  2: 12 11
(dump_exp_buffer2) N15 EXP_BUFF_ID_OPERATOR     f rq:f -  2: 13 10
=================
 Insert after 7 exp_buffer2_i:16
   Found at i:6
   Copied 15 to 16:
   Copied 14 to 15:
   Copied 13 to 14:
   Copied 12 to 13:
   Copied 11 to 12:
   Copied 10 to 11:
   Copied 9 to 10:
   Copied 8 to 9:
   Copied 7 to 8:
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 6 5
(dump_exp_buffer2) N18 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 15 7
(dump_exp_buffer2) N8 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_VARIABLE     i rq:i Z%  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 9 8
(dump_exp_buffer2) N16 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 13 10
(dump_exp_buffer2) N11 EXP_BUFF_ID_VARIABLE     i rq:i ABC%  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 12 11
(dump_exp_buffer2) N12 EXP_BUFF_ID_FLT          f rq:f 1.1  0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_OPERATOR     f rq:f *  2: 12 11
(dump_exp_buffer2) N15 EXP_BUFF_ID_OPERATOR     f rq:f -  2: 13 10
=================
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (3)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A' type:1
(type_check_stack_print) 
002: '000' type:1
(type_check_stack_print) 
------------------


Type Check Stack (3)

000: 'A' type:f (1)
001: 'A' type:f (1)
002: '000' type:f (1)
 BE:

Type Check Stack (3)

000: 'A' type:f (1)
001: 'A' type:f (1)
002: '000' type:f (1)
 BE:

Type Check Stack (3)

000: 'A' type:f (1)
001: 'A' type:f (1)
002: '000' type:f (1)
 BE:

Type Check Stack (3)

000: 'A' type:f (1)
001: 'A' type:f (1)
002: '000' type:f (1)
 BE:

Type Check Stack (3)

000: 'A' type:f (1)
001: 'A' type:f (1)
002: '000' type:f (1)
 BE:+
BUFF_ID_OPERATOR
Found operator +
type_check_stack_pop: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A' type:1
(type_check_stack_print) 
------------------

type_check_stack_pop: 'A'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
------------------

 Mutable type 1 1
 Same type
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: '000' type:1
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'A' type:f (1)
001: '000' type:f (1)
 BE::=
BUFF_ID_OPERATOR
Found operator :=
type_check_stack_pop: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
------------------

type_check_stack_pop: 'A'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (0)

(type_check_stack_print) 
------------------

 Mutable type 1 1
 Same type
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:1
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:f (1)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i *  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i Z%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i *  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i ABC%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FLT          f rq:f 1.1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i *  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i -  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i +  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f +  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f :=  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 6 5
(dump_exp_buffer2) N18 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 15 7
(dump_exp_buffer2) N8 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_VARIABLE     i rq:i Z%  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 9 8
(dump_exp_buffer2) N16 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 13 10
(dump_exp_buffer2) N11 EXP_BUFF_ID_VARIABLE     i rq:i ABC%  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 12 11
(dump_exp_buffer2) N12 EXP_BUFF_ID_FLT          f rq:f 1.1  0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_OPERATOR     f rq:f *  2: 12 11
(dump_exp_buffer2) N15 EXP_BUFF_ID_OPERATOR     f rq:f -  2: 13 10
(dump_exp_buffer2) N17 EXP_BUFF_ID_OPERATOR     f rq:f +  2: 15 7
(dump_exp_buffer2) N19 EXP_BUFF_ID_SUB_END      U rq:i   0:
(dump_exp_buffer2) N20 EXP_BUFF_ID_SUB_END      U rq:i   0:
(dump_exp_buffer2) N21 EXP_BUFF_ID_SUB_END      U rq:i   0:
(dump_exp_buffer2) N22 EXP_BUFF_ID_SUB_END      U rq:i   0:
(dump_exp_buffer2) N23 EXP_BUFF_ID_OPERATOR     f rq:f +  2: 17 2
(dump_exp_buffer2) N24 EXP_BUFF_ID_OPERATOR     f rq:f :=  2: 23 1
=================
(process_expression_types) 
==INFIX==

infix_stack_push: 'A'
infix_stack_push: 'A'
infix_stack_push: '2'
infix_stack_push: '3'
infix_stack_pop: '3'
infix_stack_pop: '2'
infix_stack_push: '(2 * 3)'
infix_stack_push: '3'
infix_stack_push: 'Z%'
infix_stack_pop: 'Z%'
infix_stack_pop: '3'
infix_stack_push: '(3 * Z%)'
infix_stack_push: 'ABC%'
infix_stack_push: '1.1'
infix_stack_pop: '1.1'
infix_stack_pop: 'ABC%'
infix_stack_push: '(ABC% * 1.1)'
infix_stack_pop: '(ABC% * 1.1)'
infix_stack_pop: '(3 * Z%)'
infix_stack_push: '((3 * Z%) - (ABC% * 1.1))'
infix_stack_pop: '((3 * Z%) - (ABC% * 1.1))'
infix_stack_pop: '(2 * 3)'
infix_stack_push: '((2 * 3) + ((3 * Z%) - (ABC% * 1.1)))'
infix_stack_pop: '((2 * 3) + ((3 * Z%) - (ABC% * 1.1)))'
infix_stack_pop: 'A'
infix_stack_push: '(A + ((2 * 3) + ((3 * Z%) - (ABC% * 1.1))))'
infix_stack_pop: '(A + ((2 * 3) + ((3 * Z%) - (ABC% * 1.1))))'
infix_stack_pop: 'A'
infix_stack_push: '(A := (A + ((2 * 3) + ((3 * Z%) - (ABC% * 1.1)))))'
infix_stack_pop: '(A := (A + ((2 * 3) + ((3 * Z%) - (ABC% * 1.1)))))'
(process_expression_types) ==(A := (A + ((2 * 3) + ((3 * Z%) - (ABC% * 1.1)))))==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N4 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N5 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
(    output_qcode) N6 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(    output_qcode) N7 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 6 5
(    output_qcode) N18 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 15 7
(    output_qcode) N8 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(    output_qcode) N9 EXP_BUFF_ID_VARIABLE     i rq:i Z%  0:
(    output_qcode) N10 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 9 8
(    output_qcode) N16 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 13 10
(    output_qcode) N11 EXP_BUFF_ID_VARIABLE     i rq:i ABC%  0:
(    output_qcode) N14 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 12 11
(    output_qcode) N12 EXP_BUFF_ID_FLT          f rq:f 1.1  0:
(    output_qcode) N13 EXP_BUFF_ID_OPERATOR     f rq:f *  2: 12 11
(    output_qcode) N15 EXP_BUFF_ID_OPERATOR     f rq:f -  2: 13 10
(    output_qcode) N17 EXP_BUFF_ID_OPERATOR     f rq:f +  2: 15 7
(    output_qcode) N19 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N20 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N21 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N22 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N23 EXP_BUFF_ID_OPERATOR     f rq:f +  2: 17 2
(    output_qcode) N24 EXP_BUFF_ID_OPERATOR     f rq:f :=  2: 23 1
check_literal:lit=':' idx=30 ''
check_literal:After drop space:':' idx=30 ''
check_literal  ret0 Empty test string
(translate_file) 
cline scanned OK
(translate_file) 
=======================cline==========================
(translate_file) 
==X%=2
==
scan_cline:
check_line:
check_assignment:
check_variable:
check_vname 'X%=2
':
check_vname ret1 '%=2
':
check_variable: '%=2
'
check_variable: Ary test '=2
'
check_literal:lit='(' idx=2 '=2
'
check_literal:After drop space:'(' idx=2 '=2
'
  '(' != '='
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
check_literal:lit=' =' idx=2 '=2
'
    dropping space
check_literal:After drop space:'=' idx=2 '=2
'
check_literal:After while():2

check_literal:ret1 
check_expression: '2
'
check_eitem: '2
'
check_operator: 2

check_literal:lit=',' idx=3 '2
'
check_literal:After drop space:',' idx=3 '2
'
  ',' != '2'
check_literal: ret0
check_operator:ret0
check_function: '2
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=3 '2
'
    dropping space
check_literal:After drop space:'%' idx=3 '2
'
  '%' != '2'
check_literal: ret0
check_literal:lit=' "' idx=3 '2
'
    dropping space
check_literal:After drop space:'"' idx=3 '2
'
  '"' != '2'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '2
'
check_integer:ret1
check_number: ret1
check_eitem:ret1
check_eitem: '
'
check_operator: 

check_literal:lit=',' idx=5 ''
check_literal:After drop space:',' idx=5 ''
check_literal  ret0 Empty test string
check_operator:ret0
check_function: ''
check_function: ret0
check_atom:
check_literal:lit=' %' idx=4 '
'
    dropping space
check_literal:After drop space:'%' idx=5 ''
check_literal  ret0 Empty test string
check_literal:lit=' "' idx=4 '
'
    dropping space
check_literal:After drop space:'"' idx=5 ''
check_literal  ret0 Empty test string
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: ''
check_integer:ret0
check_number: ret0
check_variable:
check_vname '':
check_vname ret0 '':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=4 '
'
    dropping space
check_literal:After drop space:'(' idx=5 ''
check_literal  ret0 Empty test string
check_sub_expr: ret0
check_eitem:ret0
check_expression:ret1 '
'
check_assignment:ret1
check_line:ret1
scan_cline: Checked len=1, '
'
========================================================
X%=2

========================================================
(output_expression_start)
scan_line:
check_assignment:
check_variable:
check_vname 'X%=2
':
check_vname ret1 '%=2
':
check_variable: '%=2
'
check_variable: Ary test '=2
'
check_literal:lit='(' idx=2 '=2
'
check_literal:After drop space:'(' idx=2 '=2
'
  '(' != '='
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
check_literal:lit=' =' idx=2 '=2
'
    dropping space
check_literal:After drop space:'=' idx=2 '=2
'
check_literal:After while():2

check_literal:ret1 
check_expression: '2
'
check_eitem: '2
'
check_operator: 2

check_literal:lit=',' idx=3 '2
'
check_literal:After drop space:',' idx=3 '2
'
  ',' != '2'
check_literal: ret0
check_operator:ret0
check_function: '2
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=3 '2
'
    dropping space
check_literal:After drop space:'%' idx=3 '2
'
  '%' != '2'
check_literal: ret0
check_literal:lit=' "' idx=3 '2
'
    dropping space
check_literal:After drop space:'"' idx=3 '2
'
  '"' != '2'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '2
'
check_integer:ret1
check_number: ret1
check_eitem:ret1
check_eitem: '
'
check_operator: 

check_literal:lit=',' idx=5 ''
check_literal:After drop space:',' idx=5 ''
check_literal  ret0 Empty test string
check_operator:ret0
check_function: ''
check_function: ret0
check_atom:
check_literal:lit=' %' idx=4 '
'
    dropping space
check_literal:After drop space:'%' idx=5 ''
check_literal  ret0 Empty test string
check_literal:lit=' "' idx=4 '
'
    dropping space
check_literal:After drop space:'"' idx=5 ''
check_literal  ret0 Empty test string
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: ''
check_integer:ret0
check_number: ret0
check_variable:
check_vname '':
check_vname ret0 '':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=4 '
'
    dropping space
check_literal:After drop space:'(' idx=5 ''
check_literal  ret0 Empty test string
check_sub_expr: ret0
check_eitem:ret0
check_expression:ret1 '
'
check_assignment:ret1
scan_assignment:
scan_variable:
scan_vname: 'X%=2
'
scan_vname: ret1 'X'
scan_variable: '%=2
' vname='X'
scan_variable: Ary test '=2
'
check_literal:lit='(' idx=2 '=2
'
check_literal:After drop space:'(' idx=2 '=2
'
  '(' != '='
check_literal: ret0
scan_variable:ret1 vname='X%' is str:0 int:1 flt:0 ary:0
   Frst:1 T:'X%' exptype:U
token_is_function:
token_is_function:X% is not function
token_is_variable: tok:'X%'
token_is_function:
token_is_function:X% is not function
(init_get_name) 
init_get_name:'X%'
(init_get_name) 
init_get_name:'X%'
(get_name) 
get_name:gn:'X%'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] i i X%
VAR INFO: '                X%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
scan_literal:lit=' =' '=2
'
scan_literal:After drop space:=2

scan_literal:while loop:=2

   Frst:0 T:'=' exptype:i
(operator_precedence) 
= is operator
'=' is operator
(process_token) 
Token is operator o1 name:= o2 name:
(process_token) 
opr1:1 opr2:0
Push 1
 Push:'='
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: = type:0
(op_stack_print) 
------------------

scan_expression: '2
'
check_eitem: '2
'
check_operator: 2

check_literal:lit=',' idx=3 '2
'
check_literal:After drop space:',' idx=3 '2
'
  ',' != '2'
check_literal: ret0
check_operator:ret0
check_function: '2
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=3 '2
'
    dropping space
check_literal:After drop space:'%' idx=3 '2
'
  '%' != '2'
check_literal: ret0
check_literal:lit=' "' idx=3 '2
'
    dropping space
check_literal:After drop space:'"' idx=3 '2
'
  '"' != '2'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '2
'
check_integer:ret1
check_number: ret1
check_eitem:ret1
scan_eitem:
check_operator: 2

check_literal:lit=',' idx=3 '2
'
check_literal:After drop space:',' idx=3 '2
'
  ',' != '2'
check_literal: ret0
check_operator:ret0
check_function: '2
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=3 '2
'
    dropping space
check_literal:After drop space:'%' idx=3 '2
'
  '%' != '2'
check_literal: ret0
check_literal:lit=' "' idx=3 '2
'
    dropping space
check_literal:After drop space:'"' idx=3 '2
'
  '"' != '2'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '2
'
check_integer:ret1
check_number: ret1
scan_atom:
check_literal:lit=' %' idx=3 '2
'
    dropping space
check_literal:After drop space:'%' idx=3 '2
'
  '%' != '2'
check_literal: ret0
check_literal:lit=' "' idx=3 '2
'
    dropping space
check_literal:After drop space:'"' idx=3 '2
'
  '"' != '2'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '2
'
check_integer:ret1
check_number: ret1
scan_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '2
'
check_integer:ret1
scan_integer:
scan_integer:ret1
   Frst:0 T:'2' exptype:i
(operator_precedence) 
= is operator
modify_expression_type:Inittype:i Intype:i Outtype:i
(  output_integer) [i,()] i i 2
scan_integer:ret1  2
check_eitem: '
'
check_operator: 

check_literal:lit=',' idx=5 ''
check_literal:After drop space:',' idx=5 ''
check_literal  ret0 Empty test string
check_operator:ret0
check_function: ''
check_function: ret0
check_atom:
check_literal:lit=' %' idx=4 '
'
    dropping space
check_literal:After drop space:'%' idx=5 ''
check_literal  ret0 Empty test string
check_literal:lit=' "' idx=4 '
'
    dropping space
check_literal:After drop space:'"' idx=5 ''
check_literal  ret0 Empty test string
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: ''
check_integer:ret0
check_number: ret0
check_variable:
check_vname '':
check_vname ret0 '':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=4 '
'
    dropping space
check_literal:After drop space:'(' idx=5 ''
check_literal  ret0 Empty test string
check_sub_expr: ret0
check_eitem:ret0
scan_expression: ret1 '
'
scan_assignment: ret1
Finalise stack
Pop '='
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_operator) [i,()] i i =
token_is_function:
token_is_function:= is not function
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i X%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i =  0:
=================
 BE:X%
type_check_stack_push: 'X%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'X%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'X%' type:i (0)
 BE:2
type_check_stack_push: '2'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'X%' type:0
(type_check_stack_print) 
001: '2' type:0
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'X%' type:i (0)
001: '2' type:i (0)
 BE::=
BUFF_ID_OPERATOR
Found operator :=
type_check_stack_pop: '2'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'X%' type:0
(type_check_stack_print) 
------------------

type_check_stack_pop: 'X%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (0)

(type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i X%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i :=  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i X%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_OPERATOR     i rq:i :=  2: 2 1
=================
(process_expression_types) 
==INFIX==

infix_stack_push: 'X%'
infix_stack_push: '2'
infix_stack_pop: '2'
infix_stack_pop: 'X%'
infix_stack_push: '(X% := 2)'
infix_stack_pop: '(X% := 2)'
(process_expression_types) ==(X% := 2)==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i X%  0:
(    output_qcode) N2 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
(    output_qcode) N3 EXP_BUFF_ID_OPERATOR     i rq:i :=  2: 2 1
check_literal:lit=':' idx=5 ''
check_literal:After drop space:':' idx=5 ''
check_literal  ret0 Empty test string
(translate_file) 
cline scanned OK
(translate_file) 
=======================cline==========================
(translate_file) 
==  A   = A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
==
scan_cline:
check_line:
check_assignment:
check_variable:
check_vname 'A   = A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
':
check_vname ret1 '   = A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
':
check_variable: '   = A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_variable: Ary test '   = A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_literal:lit='(' idx=3 '   = A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_literal:After drop space:'(' idx=3 '   = A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
check_variable:ret1 
check_literal:lit=' =' idx=3 '   = A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'=' idx=6 '= A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_literal:After while(): A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)

check_literal:ret1 
check_expression: 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_eitem: 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_operator: A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)

check_literal:lit=',' idx=8 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=8 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
  ',' != 'A'
check_literal: ret0
check_operator:ret0
check_function: 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=8 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=8 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
  '%' != 'A'
check_literal: ret0
check_literal:lit=' "' idx=8 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=8 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
  '"' != 'A'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
':
check_vname ret1 ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
':
check_variable: ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_variable: Ary test ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_literal:lit='(' idx=9 ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_literal:After drop space:'(' idx=9 ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
check_variable:ret1 
check_eitem:ret1
check_eitem: ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_operator:  + ( 2 * 3 + 3 * Z%-   ABC%*1.1)

check_literal:lit=',' idx=10 '+ ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=10 '+ ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
  ',' != '+'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
check_eitem: ' ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_operator:  ( 2 * 3 + 3 * Z%-   ABC%*1.1)

check_literal:lit=',' idx=12 '( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=12 '( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
  ',' != '('
check_literal: ret0
check_operator:ret0
check_function: '( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=11 ' ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=12 '( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
  '%' != '('
check_literal: ret0
check_literal:lit=' "' idx=11 ' ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=12 '( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
  '"' != '('
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: '( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname '( 2 * 3 + 3 * Z%-   ABC%*1.1)
':
check_vname ret0 '( 2 * 3 + 3 * Z%-   ABC%*1.1)
':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=11 ' ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'(' idx=12 '( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_literal:After while(): 2 * 3 + 3 * Z%-   ABC%*1.1)

check_literal:ret1 
check_sub_expr: ret1
check_eitem:ret1
check_eitem: ' 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_operator:  2 * 3 + 3 * Z%-   ABC%*1.1)

check_literal:lit=',' idx=14 '2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=14 '2 * 3 + 3 * Z%-   ABC%*1.1)
'
  ',' != '2'
check_literal: ret0
check_operator:ret0
check_function: '2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=13 ' 2 * 3 + 3 * Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=14 '2 * 3 + 3 * Z%-   ABC%*1.1)
'
  '%' != '2'
check_literal: ret0
check_literal:lit=' "' idx=13 ' 2 * 3 + 3 * Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=14 '2 * 3 + 3 * Z%-   ABC%*1.1)
'
  '"' != '2'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_integer:ret1
check_number: ret1
check_eitem:ret1
check_eitem: ' * 3 + 3 * Z%-   ABC%*1.1)
'
check_operator:  * 3 + 3 * Z%-   ABC%*1.1)

check_literal:lit=',' idx=16 '* 3 + 3 * Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=16 '* 3 + 3 * Z%-   ABC%*1.1)
'
  ',' != '*'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
check_eitem: ' 3 + 3 * Z%-   ABC%*1.1)
'
check_operator:  3 + 3 * Z%-   ABC%*1.1)

check_literal:lit=',' idx=18 '3 + 3 * Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=18 '3 + 3 * Z%-   ABC%*1.1)
'
  ',' != '3'
check_literal: ret0
check_operator:ret0
check_function: '3 + 3 * Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=17 ' 3 + 3 * Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=18 '3 + 3 * Z%-   ABC%*1.1)
'
  '%' != '3'
check_literal: ret0
check_literal:lit=' "' idx=17 ' 3 + 3 * Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=18 '3 + 3 * Z%-   ABC%*1.1)
'
  '"' != '3'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '3 + 3 * Z%-   ABC%*1.1)
'
check_integer:ret1
check_number: ret1
check_eitem:ret1
check_eitem: ' + 3 * Z%-   ABC%*1.1)
'
check_operator:  + 3 * Z%-   ABC%*1.1)

check_literal:lit=',' idx=20 '+ 3 * Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=20 '+ 3 * Z%-   ABC%*1.1)
'
  ',' != '+'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
check_eitem: ' 3 * Z%-   ABC%*1.1)
'
check_operator:  3 * Z%-   ABC%*1.1)

check_literal:lit=',' idx=22 '3 * Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=22 '3 * Z%-   ABC%*1.1)
'
  ',' != '3'
check_literal: ret0
check_operator:ret0
check_function: '3 * Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=21 ' 3 * Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=22 '3 * Z%-   ABC%*1.1)
'
  '%' != '3'
check_literal: ret0
check_literal:lit=' "' idx=21 ' 3 * Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=22 '3 * Z%-   ABC%*1.1)
'
  '"' != '3'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '3 * Z%-   ABC%*1.1)
'
check_integer:ret1
check_number: ret1
check_eitem:ret1
check_eitem: ' * Z%-   ABC%*1.1)
'
check_operator:  * Z%-   ABC%*1.1)

check_literal:lit=',' idx=24 '* Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=24 '* Z%-   ABC%*1.1)
'
  ',' != '*'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
check_eitem: ' Z%-   ABC%*1.1)
'
check_operator:  Z%-   ABC%*1.1)

check_literal:lit=',' idx=26 'Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=26 'Z%-   ABC%*1.1)
'
  ',' != 'Z'
check_literal: ret0
check_operator:ret0
check_function: 'Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=25 ' Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=26 'Z%-   ABC%*1.1)
'
  '%' != 'Z'
check_literal: ret0
check_literal:lit=' "' idx=25 ' Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=26 'Z%-   ABC%*1.1)
'
  '"' != 'Z'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'Z%-   ABC%*1.1)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'Z%-   ABC%*1.1)
':
check_vname ret1 '%-   ABC%*1.1)
':
check_variable: '%-   ABC%*1.1)
'
check_variable: Ary test '-   ABC%*1.1)
'
check_literal:lit='(' idx=28 '-   ABC%*1.1)
'
check_literal:After drop space:'(' idx=28 '-   ABC%*1.1)
'
  '(' != '-'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
check_eitem:ret1
check_eitem: '-   ABC%*1.1)
'
check_operator: -   ABC%*1.1)

check_literal:lit=',' idx=28 '-   ABC%*1.1)
'
check_literal:After drop space:',' idx=28 '-   ABC%*1.1)
'
  ',' != '-'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
check_eitem: '   ABC%*1.1)
'
check_operator:    ABC%*1.1)

check_literal:lit=',' idx=32 'ABC%*1.1)
'
check_literal:After drop space:',' idx=32 'ABC%*1.1)
'
  ',' != 'A'
check_literal: ret0
check_operator:ret0
check_function: 'ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=29 '   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=32 'ABC%*1.1)
'
  '%' != 'A'
check_literal: ret0
check_literal:lit=' "' idx=29 '   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=32 'ABC%*1.1)
'
  '"' != 'A'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'ABC%*1.1)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'ABC%*1.1)
':
check_vname ret1 '%*1.1)
':
check_variable: '%*1.1)
'
check_variable: Ary test '*1.1)
'
check_literal:lit='(' idx=36 '*1.1)
'
check_literal:After drop space:'(' idx=36 '*1.1)
'
  '(' != '*'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
check_eitem:ret1
check_eitem: '*1.1)
'
check_operator: *1.1)

check_literal:lit=',' idx=36 '*1.1)
'
check_literal:After drop space:',' idx=36 '*1.1)
'
  ',' != '*'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
check_eitem: '1.1)
'
check_operator: 1.1)

check_literal:lit=',' idx=37 '1.1)
'
check_literal:After drop space:',' idx=37 '1.1)
'
  ',' != '1'
check_literal: ret0
check_operator:ret0
check_function: '1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=37 '1.1)
'
    dropping space
check_literal:After drop space:'%' idx=37 '1.1)
'
  '%' != '1'
check_literal: ret0
check_literal:lit=' "' idx=37 '1.1)
'
    dropping space
check_literal:After drop space:'"' idx=37 '1.1)
'
  '"' != '1'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
isfloatdigit:
isfloatdigit:
check_float: ret1
check_number: ret1
check_eitem:ret1
check_eitem: ')
'
check_operator: )

check_literal:lit=',' idx=40 ')
'
check_literal:After drop space:',' idx=40 ')
'
  ',' != ')'
check_literal: ret0
check_operator:ret0
check_function: ')
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=40 ')
'
    dropping space
check_literal:After drop space:'%' idx=40 ')
'
  '%' != ')'
check_literal: ret0
check_literal:lit=' "' idx=40 ')
'
    dropping space
check_literal:After drop space:'"' idx=40 ')
'
  '"' != ')'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: ')
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname ')
':
check_vname ret0 ')
':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=40 ')
'
    dropping space
check_literal:After drop space:'(' idx=40 ')
'
  '(' != ')'
check_literal: ret0
check_sub_expr: ret0
check_eitem:ret0
check_expression:ret1 ')
'
check_assignment:ret1
check_line:ret1
scan_cline: Checked len=2, ')
'
========================================================
  A   = A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)

========================================================
(output_expression_start)
scan_line:
check_assignment:
check_variable:
check_vname 'A   = A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
':
check_vname ret1 '   = A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
':
check_variable: '   = A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_variable: Ary test '   = A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_literal:lit='(' idx=3 '   = A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_literal:After drop space:'(' idx=3 '   = A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
check_variable:ret1 
check_literal:lit=' =' idx=3 '   = A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'=' idx=6 '= A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_literal:After while(): A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)

check_literal:ret1 
check_expression: 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_eitem: 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_operator: A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)

check_literal:lit=',' idx=8 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=8 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
  ',' != 'A'
check_literal: ret0
check_operator:ret0
check_function: 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=8 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=8 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
  '%' != 'A'
check_literal: ret0
check_literal:lit=' "' idx=8 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=8 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
  '"' != 'A'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
':
check_vname ret1 ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
':
check_variable: ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_variable: Ary test ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_literal:lit='(' idx=9 ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_literal:After drop space:'(' idx=9 ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
check_variable:ret1 
check_eitem:ret1
check_eitem: ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_operator:  + ( 2 * 3 + 3 * Z%-   ABC%*1.1)

check_literal:lit=',' idx=10 '+ ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=10 '+ ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
  ',' != '+'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
check_eitem: ' ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_operator:  ( 2 * 3 + 3 * Z%-   ABC%*1.1)

check_literal:lit=',' idx=12 '( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=12 '( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
  ',' != '('
check_literal: ret0
check_operator:ret0
check_function: '( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=11 ' ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=12 '( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
  '%' != '('
check_literal: ret0
check_literal:lit=' "' idx=11 ' ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=12 '( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
  '"' != '('
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: '( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname '( 2 * 3 + 3 * Z%-   ABC%*1.1)
':
check_vname ret0 '( 2 * 3 + 3 * Z%-   ABC%*1.1)
':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=11 ' ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'(' idx=12 '( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_literal:After while(): 2 * 3 + 3 * Z%-   ABC%*1.1)

check_literal:ret1 
check_sub_expr: ret1
check_eitem:ret1
check_eitem: ' 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_operator:  2 * 3 + 3 * Z%-   ABC%*1.1)

check_literal:lit=',' idx=14 '2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=14 '2 * 3 + 3 * Z%-   ABC%*1.1)
'
  ',' != '2'
check_literal: ret0
check_operator:ret0
check_function: '2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=13 ' 2 * 3 + 3 * Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=14 '2 * 3 + 3 * Z%-   ABC%*1.1)
'
  '%' != '2'
check_literal: ret0
check_literal:lit=' "' idx=13 ' 2 * 3 + 3 * Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=14 '2 * 3 + 3 * Z%-   ABC%*1.1)
'
  '"' != '2'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_integer:ret1
check_number: ret1
check_eitem:ret1
check_eitem: ' * 3 + 3 * Z%-   ABC%*1.1)
'
check_operator:  * 3 + 3 * Z%-   ABC%*1.1)

check_literal:lit=',' idx=16 '* 3 + 3 * Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=16 '* 3 + 3 * Z%-   ABC%*1.1)
'
  ',' != '*'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
check_eitem: ' 3 + 3 * Z%-   ABC%*1.1)
'
check_operator:  3 + 3 * Z%-   ABC%*1.1)

check_literal:lit=',' idx=18 '3 + 3 * Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=18 '3 + 3 * Z%-   ABC%*1.1)
'
  ',' != '3'
check_literal: ret0
check_operator:ret0
check_function: '3 + 3 * Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=17 ' 3 + 3 * Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=18 '3 + 3 * Z%-   ABC%*1.1)
'
  '%' != '3'
check_literal: ret0
check_literal:lit=' "' idx=17 ' 3 + 3 * Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=18 '3 + 3 * Z%-   ABC%*1.1)
'
  '"' != '3'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '3 + 3 * Z%-   ABC%*1.1)
'
check_integer:ret1
check_number: ret1
check_eitem:ret1
check_eitem: ' + 3 * Z%-   ABC%*1.1)
'
check_operator:  + 3 * Z%-   ABC%*1.1)

check_literal:lit=',' idx=20 '+ 3 * Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=20 '+ 3 * Z%-   ABC%*1.1)
'
  ',' != '+'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
check_eitem: ' 3 * Z%-   ABC%*1.1)
'
check_operator:  3 * Z%-   ABC%*1.1)

check_literal:lit=',' idx=22 '3 * Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=22 '3 * Z%-   ABC%*1.1)
'
  ',' != '3'
check_literal: ret0
check_operator:ret0
check_function: '3 * Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=21 ' 3 * Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=22 '3 * Z%-   ABC%*1.1)
'
  '%' != '3'
check_literal: ret0
check_literal:lit=' "' idx=21 ' 3 * Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=22 '3 * Z%-   ABC%*1.1)
'
  '"' != '3'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '3 * Z%-   ABC%*1.1)
'
check_integer:ret1
check_number: ret1
check_eitem:ret1
check_eitem: ' * Z%-   ABC%*1.1)
'
check_operator:  * Z%-   ABC%*1.1)

check_literal:lit=',' idx=24 '* Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=24 '* Z%-   ABC%*1.1)
'
  ',' != '*'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
check_eitem: ' Z%-   ABC%*1.1)
'
check_operator:  Z%-   ABC%*1.1)

check_literal:lit=',' idx=26 'Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=26 'Z%-   ABC%*1.1)
'
  ',' != 'Z'
check_literal: ret0
check_operator:ret0
check_function: 'Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=25 ' Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=26 'Z%-   ABC%*1.1)
'
  '%' != 'Z'
check_literal: ret0
check_literal:lit=' "' idx=25 ' Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=26 'Z%-   ABC%*1.1)
'
  '"' != 'Z'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'Z%-   ABC%*1.1)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'Z%-   ABC%*1.1)
':
check_vname ret1 '%-   ABC%*1.1)
':
check_variable: '%-   ABC%*1.1)
'
check_variable: Ary test '-   ABC%*1.1)
'
check_literal:lit='(' idx=28 '-   ABC%*1.1)
'
check_literal:After drop space:'(' idx=28 '-   ABC%*1.1)
'
  '(' != '-'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
check_eitem:ret1
check_eitem: '-   ABC%*1.1)
'
check_operator: -   ABC%*1.1)

check_literal:lit=',' idx=28 '-   ABC%*1.1)
'
check_literal:After drop space:',' idx=28 '-   ABC%*1.1)
'
  ',' != '-'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
check_eitem: '   ABC%*1.1)
'
check_operator:    ABC%*1.1)

check_literal:lit=',' idx=32 'ABC%*1.1)
'
check_literal:After drop space:',' idx=32 'ABC%*1.1)
'
  ',' != 'A'
check_literal: ret0
check_operator:ret0
check_function: 'ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=29 '   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=32 'ABC%*1.1)
'
  '%' != 'A'
check_literal: ret0
check_literal:lit=' "' idx=29 '   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=32 'ABC%*1.1)
'
  '"' != 'A'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'ABC%*1.1)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'ABC%*1.1)
':
check_vname ret1 '%*1.1)
':
check_variable: '%*1.1)
'
check_variable: Ary test '*1.1)
'
check_literal:lit='(' idx=36 '*1.1)
'
check_literal:After drop space:'(' idx=36 '*1.1)
'
  '(' != '*'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
check_eitem:ret1
check_eitem: '*1.1)
'
check_operator: *1.1)

check_literal:lit=',' idx=36 '*1.1)
'
check_literal:After drop space:',' idx=36 '*1.1)
'
  ',' != '*'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
check_eitem: '1.1)
'
check_operator: 1.1)

check_literal:lit=',' idx=37 '1.1)
'
check_literal:After drop space:',' idx=37 '1.1)
'
  ',' != '1'
check_literal: ret0
check_operator:ret0
check_function: '1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=37 '1.1)
'
    dropping space
check_literal:After drop space:'%' idx=37 '1.1)
'
  '%' != '1'
check_literal: ret0
check_literal:lit=' "' idx=37 '1.1)
'
    dropping space
check_literal:After drop space:'"' idx=37 '1.1)
'
  '"' != '1'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
isfloatdigit:
isfloatdigit:
check_float: ret1
check_number: ret1
check_eitem:ret1
check_eitem: ')
'
check_operator: )

check_literal:lit=',' idx=40 ')
'
check_literal:After drop space:',' idx=40 ')
'
  ',' != ')'
check_literal: ret0
check_operator:ret0
check_function: ')
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=40 ')
'
    dropping space
check_literal:After drop space:'%' idx=40 ')
'
  '%' != ')'
check_literal: ret0
check_literal:lit=' "' idx=40 ')
'
    dropping space
check_literal:After drop space:'"' idx=40 ')
'
  '"' != ')'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: ')
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname ')
':
check_vname ret0 ')
':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=40 ')
'
    dropping space
check_literal:After drop space:'(' idx=40 ')
'
  '(' != ')'
check_literal: ret0
check_sub_expr: ret0
check_eitem:ret0
check_expression:ret1 ')
'
check_assignment:ret1
scan_assignment:
scan_variable:
scan_vname: 'A   = A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
scan_vname: ret1 'A'
scan_variable: '   = A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
' vname='A'
scan_variable: Ary test '   = A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_literal:lit='(' idx=3 '   = A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_literal:After drop space:'(' idx=3 '   = A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
  '(' != ' '
check_literal: ret0
scan_variable:ret1 vname='A' is str:0 int:0 flt:1 ary:0
   Frst:1 T:'A' exptype:U
token_is_function:
token_is_function:A is not function
token_is_variable: tok:'A'
token_is_function:
token_is_function:A is not function
(init_get_name) 
init_get_name:'A'
(init_get_name) 
init_get_name:'A'
(get_name) 
get_name:gn:'A'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] f f A
VAR INFO: '                 A' gbl:0 ref:1 int:0 flt:1 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
scan_literal:lit=' =' '   = A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
scan_literal:After drop space:= A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)

scan_literal:while loop:= A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)

   Frst:0 T:'=' exptype:i
(operator_precedence) 
= is operator
'=' is operator
(process_token) 
Token is operator o1 name:= o2 name:
(process_token) 
opr1:1 opr2:0
Push 1
 Push:'='
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: = type:0
(op_stack_print) 
------------------

scan_expression: ' A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_eitem: 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_operator: A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)

check_literal:lit=',' idx=8 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=8 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
  ',' != 'A'
check_literal: ret0
check_operator:ret0
check_function: 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=8 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=8 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
  '%' != 'A'
check_literal: ret0
check_literal:lit=' "' idx=8 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=8 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
  '"' != 'A'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
':
check_vname ret1 ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
':
check_variable: ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_variable: Ary test ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_literal:lit='(' idx=9 ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_literal:After drop space:'(' idx=9 ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
check_variable:ret1 
check_eitem:ret1
scan_eitem:
check_operator: A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)

check_literal:lit=',' idx=8 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=8 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
  ',' != 'A'
check_literal: ret0
check_operator:ret0
check_function: 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=8 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=8 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
  '%' != 'A'
check_literal: ret0
check_literal:lit=' "' idx=8 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=8 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
  '"' != 'A'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
':
check_vname ret1 ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
':
check_variable: ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_variable: Ary test ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_literal:lit='(' idx=9 ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_literal:After drop space:'(' idx=9 ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
check_variable:ret1 
scan_atom:
check_literal:lit=' %' idx=8 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=8 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
  '%' != 'A'
check_literal: ret0
check_literal:lit=' "' idx=8 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=8 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
  '"' != 'A'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
':
check_vname ret1 ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
':
check_variable: ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_variable: Ary test ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_literal:lit='(' idx=9 ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_literal:After drop space:'(' idx=9 ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
check_variable:ret1 
scan_variable:
scan_vname: 'A + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
scan_vname: ret1 'A'
scan_variable: ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
' vname='A'
scan_variable: Ary test ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_literal:lit='(' idx=9 ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_literal:After drop space:'(' idx=9 ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
  '(' != ' '
check_literal: ret0
scan_variable:ret1 vname='A' is str:0 int:0 flt:1 ary:0
   Frst:0 T:'A' exptype:i
(operator_precedence) 
= is operator
token_is_function:
token_is_function:A is not function
token_is_variable: tok:'A'
token_is_function:
token_is_function:A is not function
(init_get_name) 
init_get_name:'A'
(init_get_name) 
init_get_name:'A'
(get_name) 
get_name:gn:'A'
process_token:type:i req_type:i
modify_expression_type:Inittype:i Intype:f Outtype:f
( output_variable) [f,()] f f A
VAR INFO: '                 A' gbl:0 ref:1 int:0 flt:1 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
check_eitem: ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_operator:  + ( 2 * 3 + 3 * Z%-   ABC%*1.1)

check_literal:lit=',' idx=10 '+ ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=10 '+ ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
  ',' != '+'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
scan_eitem:
check_operator:  + ( 2 * 3 + 3 * Z%-   ABC%*1.1)

check_literal:lit=',' idx=10 '+ ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=10 '+ ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
  ',' != '+'
check_literal: ret0
check_operator: ret1
scan_operator: ' + ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_literal:lit=',' idx=10 '+ ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=10 '+ ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
  ',' != '+'
check_literal: ret0
scan_operator: ret1 ' ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
   Frst:0 T:'+' exptype:f
(operator_precedence) 
+ is operator
(operator_precedence) 
= is operator
'+' is operator
(process_token) 
Token is operator o1 name:+ o2 name:=
(process_token) 
opr1:3 opr2:1
(operator_precedence) 
= is operator
(operator_precedence) 
= is operator
Push 1
 Push:'+'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (2)

(op_stack_print) 
000: = type:0
(op_stack_print) 
001: + type:1
(op_stack_print) 
------------------

check_eitem: ' ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_operator:  ( 2 * 3 + 3 * Z%-   ABC%*1.1)

check_literal:lit=',' idx=12 '( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=12 '( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
  ',' != '('
check_literal: ret0
check_operator:ret0
check_function: '( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=11 ' ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=12 '( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
  '%' != '('
check_literal: ret0
check_literal:lit=' "' idx=11 ' ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=12 '( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
  '"' != '('
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: '( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname '( 2 * 3 + 3 * Z%-   ABC%*1.1)
':
check_vname ret0 '( 2 * 3 + 3 * Z%-   ABC%*1.1)
':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=11 ' ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'(' idx=12 '( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_literal:After while(): 2 * 3 + 3 * Z%-   ABC%*1.1)

check_literal:ret1 
check_sub_expr: ret1
check_eitem:ret1
scan_eitem:
check_operator:  ( 2 * 3 + 3 * Z%-   ABC%*1.1)

check_literal:lit=',' idx=12 '( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=12 '( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
  ',' != '('
check_literal: ret0
check_operator:ret0
check_function: '( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=11 ' ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=12 '( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
  '%' != '('
check_literal: ret0
check_literal:lit=' "' idx=11 ' ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=12 '( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
  '"' != '('
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: '( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname '( 2 * 3 + 3 * Z%-   ABC%*1.1)
':
check_vname ret0 '( 2 * 3 + 3 * Z%-   ABC%*1.1)
':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=11 ' ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'(' idx=12 '( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_literal:After while(): 2 * 3 + 3 * Z%-   ABC%*1.1)

check_literal:ret1 
check_sub_expr: ret1
scan_sub_expr:
scan_literal:lit=' (' ' ( 2 * 3 + 3 * Z%-   ABC%*1.1)
'
scan_literal:After drop space:( 2 * 3 + 3 * Z%-   ABC%*1.1)

scan_literal:while loop:( 2 * 3 + 3 * Z%-   ABC%*1.1)

   Frst:0 T:'(' exptype:f
(operator_precedence) 
+ is operator
(output_sub_start)
 Push:'('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (3)

(op_stack_print) 
000: = type:0
(op_stack_print) 
001: + type:1
(op_stack_print) 
002: ( type:16
(op_stack_print) 
------------------

   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (4)

(op_stack_print) 
000: = type:0
(op_stack_print) 
001: + type:1
(op_stack_print) 
002: ( type:16
(op_stack_print) 
003: ( type:16
(op_stack_print) 
------------------

scan_expression: ' 2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_eitem: '2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_operator: 2 * 3 + 3 * Z%-   ABC%*1.1)

check_literal:lit=',' idx=14 '2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=14 '2 * 3 + 3 * Z%-   ABC%*1.1)
'
  ',' != '2'
check_literal: ret0
check_operator:ret0
check_function: '2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=14 '2 * 3 + 3 * Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=14 '2 * 3 + 3 * Z%-   ABC%*1.1)
'
  '%' != '2'
check_literal: ret0
check_literal:lit=' "' idx=14 '2 * 3 + 3 * Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=14 '2 * 3 + 3 * Z%-   ABC%*1.1)
'
  '"' != '2'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_integer:ret1
check_number: ret1
check_eitem:ret1
scan_eitem:
check_operator: 2 * 3 + 3 * Z%-   ABC%*1.1)

check_literal:lit=',' idx=14 '2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=14 '2 * 3 + 3 * Z%-   ABC%*1.1)
'
  ',' != '2'
check_literal: ret0
check_operator:ret0
check_function: '2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=14 '2 * 3 + 3 * Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=14 '2 * 3 + 3 * Z%-   ABC%*1.1)
'
  '%' != '2'
check_literal: ret0
check_literal:lit=' "' idx=14 '2 * 3 + 3 * Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=14 '2 * 3 + 3 * Z%-   ABC%*1.1)
'
  '"' != '2'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_integer:ret1
check_number: ret1
scan_atom:
check_literal:lit=' %' idx=14 '2 * 3 + 3 * Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=14 '2 * 3 + 3 * Z%-   ABC%*1.1)
'
  '%' != '2'
check_literal: ret0
check_literal:lit=' "' idx=14 '2 * 3 + 3 * Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=14 '2 * 3 + 3 * Z%-   ABC%*1.1)
'
  '"' != '2'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_integer:ret1
check_number: ret1
scan_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '2 * 3 + 3 * Z%-   ABC%*1.1)
'
check_integer:ret1
scan_integer:
scan_integer:ret1
   Frst:0 T:'2' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(f U )] i i 2
scan_integer:ret1  2
check_eitem: ' * 3 + 3 * Z%-   ABC%*1.1)
'
check_operator:  * 3 + 3 * Z%-   ABC%*1.1)

check_literal:lit=',' idx=16 '* 3 + 3 * Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=16 '* 3 + 3 * Z%-   ABC%*1.1)
'
  ',' != '*'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
scan_eitem:
check_operator:  * 3 + 3 * Z%-   ABC%*1.1)

check_literal:lit=',' idx=16 '* 3 + 3 * Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=16 '* 3 + 3 * Z%-   ABC%*1.1)
'
  ',' != '*'
check_literal: ret0
check_operator: ret1
scan_operator: ' * 3 + 3 * Z%-   ABC%*1.1)
'
check_literal:lit=',' idx=16 '* 3 + 3 * Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=16 '* 3 + 3 * Z%-   ABC%*1.1)
'
  ',' != '*'
check_literal: ret0
scan_operator: ret1 ' 3 + 3 * Z%-   ABC%*1.1)
'
   Frst:0 T:'*' exptype:i
(operator_precedence) 
* is operator
'*' is operator
(process_token) 
Token is operator o1 name:* o2 name:(
(process_token) 
opr1:5 opr2:0
Push 1
 Push:'*'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (5)

(op_stack_print) 
000: = type:0
(op_stack_print) 
001: + type:1
(op_stack_print) 
002: ( type:16
(op_stack_print) 
003: ( type:16
(op_stack_print) 
004: * type:0
(op_stack_print) 
------------------

check_eitem: ' 3 + 3 * Z%-   ABC%*1.1)
'
check_operator:  3 + 3 * Z%-   ABC%*1.1)

check_literal:lit=',' idx=18 '3 + 3 * Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=18 '3 + 3 * Z%-   ABC%*1.1)
'
  ',' != '3'
check_literal: ret0
check_operator:ret0
check_function: '3 + 3 * Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=17 ' 3 + 3 * Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=18 '3 + 3 * Z%-   ABC%*1.1)
'
  '%' != '3'
check_literal: ret0
check_literal:lit=' "' idx=17 ' 3 + 3 * Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=18 '3 + 3 * Z%-   ABC%*1.1)
'
  '"' != '3'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '3 + 3 * Z%-   ABC%*1.1)
'
check_integer:ret1
check_number: ret1
check_eitem:ret1
scan_eitem:
check_operator:  3 + 3 * Z%-   ABC%*1.1)

check_literal:lit=',' idx=18 '3 + 3 * Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=18 '3 + 3 * Z%-   ABC%*1.1)
'
  ',' != '3'
check_literal: ret0
check_operator:ret0
check_function: '3 + 3 * Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=17 ' 3 + 3 * Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=18 '3 + 3 * Z%-   ABC%*1.1)
'
  '%' != '3'
check_literal: ret0
check_literal:lit=' "' idx=17 ' 3 + 3 * Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=18 '3 + 3 * Z%-   ABC%*1.1)
'
  '"' != '3'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '3 + 3 * Z%-   ABC%*1.1)
'
check_integer:ret1
check_number: ret1
scan_atom:
check_literal:lit=' %' idx=17 ' 3 + 3 * Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=18 '3 + 3 * Z%-   ABC%*1.1)
'
  '%' != '3'
check_literal: ret0
check_literal:lit=' "' idx=17 ' 3 + 3 * Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=18 '3 + 3 * Z%-   ABC%*1.1)
'
  '"' != '3'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '3 + 3 * Z%-   ABC%*1.1)
'
check_integer:ret1
check_number: ret1
scan_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '3 + 3 * Z%-   ABC%*1.1)
'
check_integer:ret1
scan_integer:
scan_integer:ret1
   Frst:0 T:'3' exptype:i
(operator_precedence) 
* is operator
modify_expression_type:Inittype:i Intype:i Outtype:i
(  output_integer) [i,(f U )] i i 3
scan_integer:ret1  3
check_eitem: ' + 3 * Z%-   ABC%*1.1)
'
check_operator:  + 3 * Z%-   ABC%*1.1)

check_literal:lit=',' idx=20 '+ 3 * Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=20 '+ 3 * Z%-   ABC%*1.1)
'
  ',' != '+'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
scan_eitem:
check_operator:  + 3 * Z%-   ABC%*1.1)

check_literal:lit=',' idx=20 '+ 3 * Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=20 '+ 3 * Z%-   ABC%*1.1)
'
  ',' != '+'
check_literal: ret0
check_operator: ret1
scan_operator: ' + 3 * Z%-   ABC%*1.1)
'
check_literal:lit=',' idx=20 '+ 3 * Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=20 '+ 3 * Z%-   ABC%*1.1)
'
  ',' != '+'
check_literal: ret0
scan_operator: ret1 ' 3 * Z%-   ABC%*1.1)
'
   Frst:0 T:'+' exptype:i
(operator_precedence) 
+ is operator
(operator_precedence) 
* is operator
'+' is operator
(process_token) 
Token is operator o1 name:+ o2 name:*
(process_token) 
opr1:3 opr2:5
(operator_precedence) 
* is operator
Pop 1
Pop '*'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (4)

(op_stack_print) 
000: = type:0
(op_stack_print) 
001: + type:1
(op_stack_print) 
002: ( type:16
(op_stack_print) 
003: ( type:16
(op_stack_print) 
------------------

(operator_precedence) 
+ is operator
(operator_precedence) 
* is operator
( output_operator) [i,(f U )] i i *
token_is_function:
token_is_function:* is not function
Push 1
 Push:'+'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (5)

(op_stack_print) 
000: = type:0
(op_stack_print) 
001: + type:1
(op_stack_print) 
002: ( type:16
(op_stack_print) 
003: ( type:16
(op_stack_print) 
004: + type:0
(op_stack_print) 
------------------

check_eitem: ' 3 * Z%-   ABC%*1.1)
'
check_operator:  3 * Z%-   ABC%*1.1)

check_literal:lit=',' idx=22 '3 * Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=22 '3 * Z%-   ABC%*1.1)
'
  ',' != '3'
check_literal: ret0
check_operator:ret0
check_function: '3 * Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=21 ' 3 * Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=22 '3 * Z%-   ABC%*1.1)
'
  '%' != '3'
check_literal: ret0
check_literal:lit=' "' idx=21 ' 3 * Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=22 '3 * Z%-   ABC%*1.1)
'
  '"' != '3'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '3 * Z%-   ABC%*1.1)
'
check_integer:ret1
check_number: ret1
check_eitem:ret1
scan_eitem:
check_operator:  3 * Z%-   ABC%*1.1)

check_literal:lit=',' idx=22 '3 * Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=22 '3 * Z%-   ABC%*1.1)
'
  ',' != '3'
check_literal: ret0
check_operator:ret0
check_function: '3 * Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=21 ' 3 * Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=22 '3 * Z%-   ABC%*1.1)
'
  '%' != '3'
check_literal: ret0
check_literal:lit=' "' idx=21 ' 3 * Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=22 '3 * Z%-   ABC%*1.1)
'
  '"' != '3'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '3 * Z%-   ABC%*1.1)
'
check_integer:ret1
check_number: ret1
scan_atom:
check_literal:lit=' %' idx=21 ' 3 * Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=22 '3 * Z%-   ABC%*1.1)
'
  '%' != '3'
check_literal: ret0
check_literal:lit=' "' idx=21 ' 3 * Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=22 '3 * Z%-   ABC%*1.1)
'
  '"' != '3'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '3 * Z%-   ABC%*1.1)
'
check_integer:ret1
check_number: ret1
scan_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '3 * Z%-   ABC%*1.1)
'
check_integer:ret1
scan_integer:
scan_integer:ret1
   Frst:0 T:'3' exptype:i
(operator_precedence) 
+ is operator
modify_expression_type:Inittype:i Intype:i Outtype:i
(  output_integer) [i,(f U )] i i 3
scan_integer:ret1  3
check_eitem: ' * Z%-   ABC%*1.1)
'
check_operator:  * Z%-   ABC%*1.1)

check_literal:lit=',' idx=24 '* Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=24 '* Z%-   ABC%*1.1)
'
  ',' != '*'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
scan_eitem:
check_operator:  * Z%-   ABC%*1.1)

check_literal:lit=',' idx=24 '* Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=24 '* Z%-   ABC%*1.1)
'
  ',' != '*'
check_literal: ret0
check_operator: ret1
scan_operator: ' * Z%-   ABC%*1.1)
'
check_literal:lit=',' idx=24 '* Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=24 '* Z%-   ABC%*1.1)
'
  ',' != '*'
check_literal: ret0
scan_operator: ret1 ' Z%-   ABC%*1.1)
'
   Frst:0 T:'*' exptype:i
(operator_precedence) 
* is operator
(operator_precedence) 
+ is operator
'*' is operator
(process_token) 
Token is operator o1 name:* o2 name:+
(process_token) 
opr1:5 opr2:3
(operator_precedence) 
+ is operator
(operator_precedence) 
+ is operator
Push 1
 Push:'*'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (6)

(op_stack_print) 
000: = type:0
(op_stack_print) 
001: + type:1
(op_stack_print) 
002: ( type:16
(op_stack_print) 
003: ( type:16
(op_stack_print) 
004: + type:0
(op_stack_print) 
005: * type:0
(op_stack_print) 
------------------

check_eitem: ' Z%-   ABC%*1.1)
'
check_operator:  Z%-   ABC%*1.1)

check_literal:lit=',' idx=26 'Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=26 'Z%-   ABC%*1.1)
'
  ',' != 'Z'
check_literal: ret0
check_operator:ret0
check_function: 'Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=25 ' Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=26 'Z%-   ABC%*1.1)
'
  '%' != 'Z'
check_literal: ret0
check_literal:lit=' "' idx=25 ' Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=26 'Z%-   ABC%*1.1)
'
  '"' != 'Z'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'Z%-   ABC%*1.1)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'Z%-   ABC%*1.1)
':
check_vname ret1 '%-   ABC%*1.1)
':
check_variable: '%-   ABC%*1.1)
'
check_variable: Ary test '-   ABC%*1.1)
'
check_literal:lit='(' idx=28 '-   ABC%*1.1)
'
check_literal:After drop space:'(' idx=28 '-   ABC%*1.1)
'
  '(' != '-'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
check_eitem:ret1
scan_eitem:
check_operator:  Z%-   ABC%*1.1)

check_literal:lit=',' idx=26 'Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=26 'Z%-   ABC%*1.1)
'
  ',' != 'Z'
check_literal: ret0
check_operator:ret0
check_function: 'Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=25 ' Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=26 'Z%-   ABC%*1.1)
'
  '%' != 'Z'
check_literal: ret0
check_literal:lit=' "' idx=25 ' Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=26 'Z%-   ABC%*1.1)
'
  '"' != 'Z'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'Z%-   ABC%*1.1)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'Z%-   ABC%*1.1)
':
check_vname ret1 '%-   ABC%*1.1)
':
check_variable: '%-   ABC%*1.1)
'
check_variable: Ary test '-   ABC%*1.1)
'
check_literal:lit='(' idx=28 '-   ABC%*1.1)
'
check_literal:After drop space:'(' idx=28 '-   ABC%*1.1)
'
  '(' != '-'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
scan_atom:
check_literal:lit=' %' idx=25 ' Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=26 'Z%-   ABC%*1.1)
'
  '%' != 'Z'
check_literal: ret0
check_literal:lit=' "' idx=25 ' Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=26 'Z%-   ABC%*1.1)
'
  '"' != 'Z'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'Z%-   ABC%*1.1)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'Z%-   ABC%*1.1)
':
check_vname ret1 '%-   ABC%*1.1)
':
check_variable: '%-   ABC%*1.1)
'
check_variable: Ary test '-   ABC%*1.1)
'
check_literal:lit='(' idx=28 '-   ABC%*1.1)
'
check_literal:After drop space:'(' idx=28 '-   ABC%*1.1)
'
  '(' != '-'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
scan_variable:
scan_vname: ' Z%-   ABC%*1.1)
'
scan_vname: ret1 'Z'
scan_variable: '%-   ABC%*1.1)
' vname='Z'
scan_variable: Ary test '-   ABC%*1.1)
'
check_literal:lit='(' idx=28 '-   ABC%*1.1)
'
check_literal:After drop space:'(' idx=28 '-   ABC%*1.1)
'
  '(' != '-'
check_literal: ret0
scan_variable:ret1 vname='Z%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'Z%' exptype:i
(operator_precedence) 
* is operator
token_is_function:
token_is_function:Z% is not function
token_is_variable: tok:'Z%'
token_is_function:
token_is_function:Z% is not function
(init_get_name) 
init_get_name:'Z%'
(init_get_name) 
init_get_name:'Z%'
(get_name) 
get_name:gn:'Z%'
process_token:type:i req_type:i
modify_expression_type:Inittype:i Intype:i Outtype:i
( output_variable) [i,(f U )] i i Z%
VAR INFO: '                Z%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
check_eitem: '-   ABC%*1.1)
'
check_operator: -   ABC%*1.1)

check_literal:lit=',' idx=28 '-   ABC%*1.1)
'
check_literal:After drop space:',' idx=28 '-   ABC%*1.1)
'
  ',' != '-'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
scan_eitem:
check_operator: -   ABC%*1.1)

check_literal:lit=',' idx=28 '-   ABC%*1.1)
'
check_literal:After drop space:',' idx=28 '-   ABC%*1.1)
'
  ',' != '-'
check_literal: ret0
check_operator: ret1
scan_operator: '-   ABC%*1.1)
'
check_literal:lit=',' idx=28 '-   ABC%*1.1)
'
check_literal:After drop space:',' idx=28 '-   ABC%*1.1)
'
  ',' != '-'
check_literal: ret0
scan_operator: ret1 '   ABC%*1.1)
'
   Frst:0 T:'-' exptype:i
(operator_precedence) 
- is operator
(operator_precedence) 
* is operator
'-' is operator
(process_token) 
Token is operator o1 name:- o2 name:*
(process_token) 
opr1:3 opr2:5
(operator_precedence) 
* is operator
Pop 1
Pop '*'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (5)

(op_stack_print) 
000: = type:0
(op_stack_print) 
001: + type:1
(op_stack_print) 
002: ( type:16
(op_stack_print) 
003: ( type:16
(op_stack_print) 
004: + type:0
(op_stack_print) 
------------------

(operator_precedence) 
- is operator
(operator_precedence) 
* is operator
( output_operator) [i,(f U )] i i *
token_is_function:
token_is_function:* is not function
(operator_precedence) 
+ is operator
(operator_precedence) 
+ is operator
(operator_left_assoc) 
- is operator
Push 1
 Push:'-'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (6)

(op_stack_print) 
000: = type:0
(op_stack_print) 
001: + type:1
(op_stack_print) 
002: ( type:16
(op_stack_print) 
003: ( type:16
(op_stack_print) 
004: + type:0
(op_stack_print) 
005: - type:0
(op_stack_print) 
------------------

check_eitem: '   ABC%*1.1)
'
check_operator:    ABC%*1.1)

check_literal:lit=',' idx=32 'ABC%*1.1)
'
check_literal:After drop space:',' idx=32 'ABC%*1.1)
'
  ',' != 'A'
check_literal: ret0
check_operator:ret0
check_function: 'ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=29 '   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=32 'ABC%*1.1)
'
  '%' != 'A'
check_literal: ret0
check_literal:lit=' "' idx=29 '   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=32 'ABC%*1.1)
'
  '"' != 'A'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'ABC%*1.1)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'ABC%*1.1)
':
check_vname ret1 '%*1.1)
':
check_variable: '%*1.1)
'
check_variable: Ary test '*1.1)
'
check_literal:lit='(' idx=36 '*1.1)
'
check_literal:After drop space:'(' idx=36 '*1.1)
'
  '(' != '*'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
check_eitem:ret1
scan_eitem:
check_operator:    ABC%*1.1)

check_literal:lit=',' idx=32 'ABC%*1.1)
'
check_literal:After drop space:',' idx=32 'ABC%*1.1)
'
  ',' != 'A'
check_literal: ret0
check_operator:ret0
check_function: 'ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=29 '   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=32 'ABC%*1.1)
'
  '%' != 'A'
check_literal: ret0
check_literal:lit=' "' idx=29 '   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=32 'ABC%*1.1)
'
  '"' != 'A'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'ABC%*1.1)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'ABC%*1.1)
':
check_vname ret1 '%*1.1)
':
check_variable: '%*1.1)
'
check_variable: Ary test '*1.1)
'
check_literal:lit='(' idx=36 '*1.1)
'
check_literal:After drop space:'(' idx=36 '*1.1)
'
  '(' != '*'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
scan_atom:
check_literal:lit=' %' idx=29 '   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=32 'ABC%*1.1)
'
  '%' != 'A'
check_literal: ret0
check_literal:lit=' "' idx=29 '   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=32 'ABC%*1.1)
'
  '"' != 'A'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'ABC%*1.1)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'ABC%*1.1)
':
check_vname ret1 '%*1.1)
':
check_variable: '%*1.1)
'
check_variable: Ary test '*1.1)
'
check_literal:lit='(' idx=36 '*1.1)
'
check_literal:After drop space:'(' idx=36 '*1.1)
'
  '(' != '*'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
scan_variable:
scan_vname: '   ABC%*1.1)
'
scan_vname: ret1 'ABC'
scan_variable: '%*1.1)
' vname='ABC'
scan_variable: Ary test '*1.1)
'
check_literal:lit='(' idx=36 '*1.1)
'
check_literal:After drop space:'(' idx=36 '*1.1)
'
  '(' != '*'
check_literal: ret0
scan_variable:ret1 vname='ABC%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'ABC%' exptype:i
(operator_precedence) 
- is operator
token_is_function:
token_is_function:ABC% is not function
token_is_variable: tok:'ABC%'
token_is_function:
token_is_function:ABC% is not function
(init_get_name) 
init_get_name:'ABC%'
(init_get_name) 
init_get_name:'ABC%'
(get_name) 
get_name:gn:'ABC%'
process_token:type:i req_type:i
modify_expression_type:Inittype:i Intype:i Outtype:i
( output_variable) [i,(f U )] i i ABC%
VAR INFO: '              ABC%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
check_eitem: '*1.1)
'
check_operator: *1.1)

check_literal:lit=',' idx=36 '*1.1)
'
check_literal:After drop space:',' idx=36 '*1.1)
'
  ',' != '*'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
scan_eitem:
check_operator: *1.1)

check_literal:lit=',' idx=36 '*1.1)
'
check_literal:After drop space:',' idx=36 '*1.1)
'
  ',' != '*'
check_literal: ret0
check_operator: ret1
scan_operator: '*1.1)
'
check_literal:lit=',' idx=36 '*1.1)
'
check_literal:After drop space:',' idx=36 '*1.1)
'
  ',' != '*'
check_literal: ret0
scan_operator: ret1 '1.1)
'
   Frst:0 T:'*' exptype:i
(operator_precedence) 
* is operator
(operator_precedence) 
- is operator
'*' is operator
(process_token) 
Token is operator o1 name:* o2 name:-
(process_token) 
opr1:5 opr2:3
(operator_precedence) 
- is operator
(operator_precedence) 
- is operator
Push 1
 Push:'*'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (7)

(op_stack_print) 
000: = type:0
(op_stack_print) 
001: + type:1
(op_stack_print) 
002: ( type:16
(op_stack_print) 
003: ( type:16
(op_stack_print) 
004: + type:0
(op_stack_print) 
005: - type:0
(op_stack_print) 
006: * type:0
(op_stack_print) 
------------------

check_eitem: '1.1)
'
check_operator: 1.1)

check_literal:lit=',' idx=37 '1.1)
'
check_literal:After drop space:',' idx=37 '1.1)
'
  ',' != '1'
check_literal: ret0
check_operator:ret0
check_function: '1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=37 '1.1)
'
    dropping space
check_literal:After drop space:'%' idx=37 '1.1)
'
  '%' != '1'
check_literal: ret0
check_literal:lit=' "' idx=37 '1.1)
'
    dropping space
check_literal:After drop space:'"' idx=37 '1.1)
'
  '"' != '1'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
isfloatdigit:
isfloatdigit:
check_float: ret1
check_number: ret1
check_eitem:ret1
scan_eitem:
check_operator: 1.1)

check_literal:lit=',' idx=37 '1.1)
'
check_literal:After drop space:',' idx=37 '1.1)
'
  ',' != '1'
check_literal: ret0
check_operator:ret0
check_function: '1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=37 '1.1)
'
    dropping space
check_literal:After drop space:'%' idx=37 '1.1)
'
  '%' != '1'
check_literal: ret0
check_literal:lit=' "' idx=37 '1.1)
'
    dropping space
check_literal:After drop space:'"' idx=37 '1.1)
'
  '"' != '1'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
isfloatdigit:
isfloatdigit:
check_float: ret1
check_number: ret1
scan_atom:
check_literal:lit=' %' idx=37 '1.1)
'
    dropping space
check_literal:After drop space:'%' idx=37 '1.1)
'
  '%' != '1'
check_literal: ret0
check_literal:lit=' "' idx=37 '1.1)
'
    dropping space
check_literal:After drop space:'"' idx=37 '1.1)
'
  '"' != '1'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
isfloatdigit:
isfloatdigit:
check_float: ret1
check_number: ret1
scan_number:
check_float:
isfloatdigit:
isfloatdigit:
isfloatdigit:
isfloatdigit:
check_float: ret1
scan_float:
isfloatdigit:
isfloatdigit:
isfloatdigit:
isfloatdigit:
scan_float: ret1
   Frst:0 T:'1.1' exptype:i
(operator_precedence) 
* is operator
modify_expression_type:Inittype:i Intype:f Outtype:f
(    output_float) [f,(f U )] f f 1.1
check_eitem: ')
'
check_operator: )

check_literal:lit=',' idx=40 ')
'
check_literal:After drop space:',' idx=40 ')
'
  ',' != ')'
check_literal: ret0
check_operator:ret0
check_function: ')
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=40 ')
'
    dropping space
check_literal:After drop space:'%' idx=40 ')
'
  '%' != ')'
check_literal: ret0
check_literal:lit=' "' idx=40 ')
'
    dropping space
check_literal:After drop space:'"' idx=40 ')
'
  '"' != ')'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: ')
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname ')
':
check_vname ret0 ')
':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=40 ')
'
    dropping space
check_literal:After drop space:'(' idx=40 ')
'
  '(' != ')'
check_literal: ret0
check_sub_expr: ret0
check_eitem:ret0
scan_expression: ret1 ')
'
scan_literal:lit=' )' ')
'
scan_literal:After drop space:)

scan_literal:while loop:)

   Frst:0 T:')' exptype:f
(operator_precedence) 
* is operator
(process_token) 
Pop 3
Pop '*'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (6)

(op_stack_print) 
000: = type:0
(op_stack_print) 
001: + type:1
(op_stack_print) 
002: ( type:16
(op_stack_print) 
003: ( type:16
(op_stack_print) 
004: + type:0
(op_stack_print) 
005: - type:0
(op_stack_print) 
------------------

( output_operator) [f,(f U )] i i *
token_is_function:
token_is_function:* is not function
(process_token) 
Pop 3
Pop '-'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (5)

(op_stack_print) 
000: = type:0
(op_stack_print) 
001: + type:1
(op_stack_print) 
002: ( type:16
(op_stack_print) 
003: ( type:16
(op_stack_print) 
004: + type:0
(op_stack_print) 
------------------

( output_operator) [f,(f U )] i i -
token_is_function:
token_is_function:- is not function
(process_token) 
Pop 3
Pop '+'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (4)

(op_stack_print) 
000: = type:0
(op_stack_print) 
001: + type:1
(op_stack_print) 
002: ( type:16
(op_stack_print) 
003: ( type:16
(op_stack_print) 
------------------

( output_operator) [f,(f U )] i i +
token_is_function:
token_is_function:+ is not function
Pop 4
Pop '('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (3)

(op_stack_print) 
000: = type:0
(op_stack_print) 
001: + type:1
(op_stack_print) 
002: ( type:16
(op_stack_print) 
------------------

(  output_sub_end)
token_is_function:
token_is_function:( is not function
(  output_sub_end)
   Frst:0 T:')' exptype:U
Pop 4
Pop '('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (2)

(op_stack_print) 
000: = type:0
(op_stack_print) 
001: + type:1
(op_stack_print) 
------------------

(  output_sub_end)
token_is_function:
token_is_function:+ is not function
(  output_sub_end)
scan_sub_expr:ret1
check_eitem: '
'
check_operator: 

check_literal:lit=',' idx=42 ''
check_literal:After drop space:',' idx=42 ''
check_literal  ret0 Empty test string
check_operator:ret0
check_function: ''
check_function: ret0
check_atom:
check_literal:lit=' %' idx=41 '
'
    dropping space
check_literal:After drop space:'%' idx=42 ''
check_literal  ret0 Empty test string
check_literal:lit=' "' idx=41 '
'
    dropping space
check_literal:After drop space:'"' idx=42 ''
check_literal  ret0 Empty test string
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: ''
check_integer:ret0
check_number: ret0
check_variable:
check_vname '':
check_vname ret0 '':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=41 '
'
    dropping space
check_literal:After drop space:'(' idx=42 ''
check_literal  ret0 Empty test string
check_sub_expr: ret0
check_eitem:ret0
scan_expression: ret1 '
'
scan_assignment: ret1
Finalise stack
Pop '+'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: = type:0
(op_stack_print) 
------------------

( output_operator) [f,()] f f +
token_is_function:
token_is_function:+ is not function
Pop '='
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_operator) [f,()] f f =
token_is_function:
token_is_function:= is not function
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i *  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i Z%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i *  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i ABC%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FLT          f rq:f 1.1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i *  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i -  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i +  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f +  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f =  0:
=================
 BE:A
type_check_stack_push: 'A'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'A' type:f (1)
 BE:A
type_check_stack_push: 'A'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A' type:1
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'A' type:f (1)
001: 'A' type:f (1)
 BE:

Type Check Stack (2)

000: 'A' type:f (1)
001: 'A' type:f (1)
 BE:

Type Check Stack (2)

000: 'A' type:f (1)
001: 'A' type:f (1)
 BE:2
type_check_stack_push: '2'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (3)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A' type:1
(type_check_stack_print) 
002: '2' type:0
(type_check_stack_print) 
------------------


Type Check Stack (3)

000: 'A' type:f (1)
001: 'A' type:f (1)
002: '2' type:i (0)
 BE:3
type_check_stack_push: '3'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (4)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A' type:1
(type_check_stack_print) 
002: '2' type:0
(type_check_stack_print) 
003: '3' type:0
(type_check_stack_print) 
------------------


Type Check Stack (4)

000: 'A' type:f (1)
001: 'A' type:f (1)
002: '2' type:i (0)
003: '3' type:i (0)
 BE:*
BUFF_ID_OPERATOR
Found operator *
type_check_stack_pop: '3'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (3)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A' type:1
(type_check_stack_print) 
002: '2' type:0
(type_check_stack_print) 
------------------

type_check_stack_pop: '2'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A' type:1
(type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (3)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A' type:1
(type_check_stack_print) 
002: '000' type:0
(type_check_stack_print) 
------------------


Type Check Stack (3)

000: 'A' type:f (1)
001: 'A' type:f (1)
002: '000' type:i (0)
 BE:3
type_check_stack_push: '3'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (4)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A' type:1
(type_check_stack_print) 
002: '000' type:0
(type_check_stack_print) 
003: '3' type:0
(type_check_stack_print) 
------------------


Type Check Stack (4)

000: 'A' type:f (1)
001: 'A' type:f (1)
002: '000' type:i (0)
003: '3' type:i (0)
 BE:Z%
type_check_stack_push: 'Z%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (5)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A' type:1
(type_check_stack_print) 
002: '000' type:0
(type_check_stack_print) 
003: '3' type:0
(type_check_stack_print) 
004: 'Z%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (5)

000: 'A' type:f (1)
001: 'A' type:f (1)
002: '000' type:i (0)
003: '3' type:i (0)
004: 'Z%' type:i (0)
 BE:*
BUFF_ID_OPERATOR
Found operator *
type_check_stack_pop: 'Z%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (4)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A' type:1
(type_check_stack_print) 
002: '000' type:0
(type_check_stack_print) 
003: '3' type:0
(type_check_stack_print) 
------------------

type_check_stack_pop: '3'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (3)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A' type:1
(type_check_stack_print) 
002: '000' type:0
(type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (4)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A' type:1
(type_check_stack_print) 
002: '000' type:0
(type_check_stack_print) 
003: '000' type:0
(type_check_stack_print) 
------------------


Type Check Stack (4)

000: 'A' type:f (1)
001: 'A' type:f (1)
002: '000' type:i (0)
003: '000' type:i (0)
 BE:ABC%
type_check_stack_push: 'ABC%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (5)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A' type:1
(type_check_stack_print) 
002: '000' type:0
(type_check_stack_print) 
003: '000' type:0
(type_check_stack_print) 
004: 'ABC%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (5)

000: 'A' type:f (1)
001: 'A' type:f (1)
002: '000' type:i (0)
003: '000' type:i (0)
004: 'ABC%' type:i (0)
 BE:1.1
type_check_stack_push: '1.1'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (6)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A' type:1
(type_check_stack_print) 
002: '000' type:0
(type_check_stack_print) 
003: '000' type:0
(type_check_stack_print) 
004: 'ABC%' type:0
(type_check_stack_print) 
005: '1.1' type:1
(type_check_stack_print) 
------------------


Type Check Stack (6)

000: 'A' type:f (1)
001: 'A' type:f (1)
002: '000' type:i (0)
003: '000' type:i (0)
004: 'ABC%' type:i (0)
005: '1.1' type:f (1)
 BE:*
BUFF_ID_OPERATOR
Found operator *
type_check_stack_pop: '1.1'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (5)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A' type:1
(type_check_stack_print) 
002: '000' type:0
(type_check_stack_print) 
003: '000' type:0
(type_check_stack_print) 
004: 'ABC%' type:0
(type_check_stack_print) 
------------------

type_check_stack_pop: 'ABC%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (4)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A' type:1
(type_check_stack_print) 
002: '000' type:0
(type_check_stack_print) 
003: '000' type:0
(type_check_stack_print) 
------------------

 Mutable type 1 0
type_with_least_conversion_from: f i => f
type_with_least_conversion_from: f i => f
 Autoconversion
 --------------
 Op1: type:1 req type:1
 Op2: type:0 req type:0
 BE:  type:1 req type:1
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 6 5
(dump_exp_buffer2) N8 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_VARIABLE     i rq:i Z%  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 9 8
(dump_exp_buffer2) N11 EXP_BUFF_ID_VARIABLE     i rq:i ABC%  0:
(dump_exp_buffer2) N12 EXP_BUFF_ID_FLT          f rq:f 1.1  0:
=================
 Insert after 11 exp_buffer2_i:12
   Found at i:10
   Copied 11 to 12:
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 6 5
(dump_exp_buffer2) N8 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_VARIABLE     i rq:i Z%  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 9 8
(dump_exp_buffer2) N11 EXP_BUFF_ID_VARIABLE     i rq:i ABC%  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 12 11
(dump_exp_buffer2) N12 EXP_BUFF_ID_FLT          f rq:f 1.1  0:
=================
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (5)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A' type:1
(type_check_stack_print) 
002: '000' type:0
(type_check_stack_print) 
003: '000' type:0
(type_check_stack_print) 
004: '000' type:1
(type_check_stack_print) 
------------------


Type Check Stack (5)

000: 'A' type:f (1)
001: 'A' type:f (1)
002: '000' type:i (0)
003: '000' type:i (0)
004: '000' type:f (1)
 BE:-
BUFF_ID_OPERATOR
Found operator -
type_check_stack_pop: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (4)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A' type:1
(type_check_stack_print) 
002: '000' type:0
(type_check_stack_print) 
003: '000' type:0
(type_check_stack_print) 
------------------

type_check_stack_pop: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (3)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A' type:1
(type_check_stack_print) 
002: '000' type:0
(type_check_stack_print) 
------------------

 Mutable type 1 0
type_with_least_conversion_from: f i => f
type_with_least_conversion_from: f i => f
 Autoconversion
 --------------
 Op1: type:1 req type:1
 Op2: type:0 req type:0
 BE:  type:1 req type:1
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 6 5
(dump_exp_buffer2) N8 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_VARIABLE     i rq:i Z%  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 9 8
(dump_exp_buffer2) N11 EXP_BUFF_ID_VARIABLE     i rq:i ABC%  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 12 11
(dump_exp_buffer2) N12 EXP_BUFF_ID_FLT          f rq:f 1.1  0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_OPERATOR     f rq:f *  2: 12 11
=================
 Insert after 10 exp_buffer2_i:14
   Found at i:9
   Copied 13 to 14:
   Copied 12 to 13:
   Copied 11 to 12:
   Copied 10 to 11:
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 6 5
(dump_exp_buffer2) N8 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_VARIABLE     i rq:i Z%  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 9 8
(dump_exp_buffer2) N16 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 13 10
(dump_exp_buffer2) N11 EXP_BUFF_ID_VARIABLE     i rq:i ABC%  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 12 11
(dump_exp_buffer2) N12 EXP_BUFF_ID_FLT          f rq:f 1.1  0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_OPERATOR     f rq:f *  2: 12 11
=================
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (4)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A' type:1
(type_check_stack_print) 
002: '000' type:0
(type_check_stack_print) 
003: '000' type:1
(type_check_stack_print) 
------------------


Type Check Stack (4)

000: 'A' type:f (1)
001: 'A' type:f (1)
002: '000' type:i (0)
003: '000' type:f (1)
 BE:+
BUFF_ID_OPERATOR
Found operator +
type_check_stack_pop: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (3)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A' type:1
(type_check_stack_print) 
002: '000' type:0
(type_check_stack_print) 
------------------

type_check_stack_pop: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A' type:1
(type_check_stack_print) 
------------------

 Mutable type 1 0
type_with_least_conversion_from: f i => f
type_with_least_conversion_from: f i => f
 Autoconversion
 --------------
 Op1: type:1 req type:1
 Op2: type:0 req type:0
 BE:  type:1 req type:1
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 6 5
(dump_exp_buffer2) N8 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_VARIABLE     i rq:i Z%  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 9 8
(dump_exp_buffer2) N16 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 13 10
(dump_exp_buffer2) N11 EXP_BUFF_ID_VARIABLE     i rq:i ABC%  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 12 11
(dump_exp_buffer2) N12 EXP_BUFF_ID_FLT          f rq:f 1.1  0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_OPERATOR     f rq:f *  2: 12 11
(dump_exp_buffer2) N15 EXP_BUFF_ID_OPERATOR     f rq:f -  2: 13 10
=================
 Insert after 7 exp_buffer2_i:16
   Found at i:6
   Copied 15 to 16:
   Copied 14 to 15:
   Copied 13 to 14:
   Copied 12 to 13:
   Copied 11 to 12:
   Copied 10 to 11:
   Copied 9 to 10:
   Copied 8 to 9:
   Copied 7 to 8:
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 6 5
(dump_exp_buffer2) N18 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 15 7
(dump_exp_buffer2) N8 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_VARIABLE     i rq:i Z%  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 9 8
(dump_exp_buffer2) N16 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 13 10
(dump_exp_buffer2) N11 EXP_BUFF_ID_VARIABLE     i rq:i ABC%  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 12 11
(dump_exp_buffer2) N12 EXP_BUFF_ID_FLT          f rq:f 1.1  0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_OPERATOR     f rq:f *  2: 12 11
(dump_exp_buffer2) N15 EXP_BUFF_ID_OPERATOR     f rq:f -  2: 13 10
=================
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (3)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A' type:1
(type_check_stack_print) 
002: '000' type:1
(type_check_stack_print) 
------------------


Type Check Stack (3)

000: 'A' type:f (1)
001: 'A' type:f (1)
002: '000' type:f (1)
 BE:

Type Check Stack (3)

000: 'A' type:f (1)
001: 'A' type:f (1)
002: '000' type:f (1)
 BE:

Type Check Stack (3)

000: 'A' type:f (1)
001: 'A' type:f (1)
002: '000' type:f (1)
 BE:

Type Check Stack (3)

000: 'A' type:f (1)
001: 'A' type:f (1)
002: '000' type:f (1)
 BE:

Type Check Stack (3)

000: 'A' type:f (1)
001: 'A' type:f (1)
002: '000' type:f (1)
 BE:+
BUFF_ID_OPERATOR
Found operator +
type_check_stack_pop: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A' type:1
(type_check_stack_print) 
------------------

type_check_stack_pop: 'A'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
------------------

 Mutable type 1 1
 Same type
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: '000' type:1
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'A' type:f (1)
001: '000' type:f (1)
 BE::=
BUFF_ID_OPERATOR
Found operator :=
type_check_stack_pop: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
------------------

type_check_stack_pop: 'A'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (0)

(type_check_stack_print) 
------------------

 Mutable type 1 1
 Same type
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:1
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:f (1)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i *  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i Z%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i *  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i ABC%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FLT          f rq:f 1.1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i *  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i -  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i +  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f +  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f :=  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 6 5
(dump_exp_buffer2) N18 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 15 7
(dump_exp_buffer2) N8 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_VARIABLE     i rq:i Z%  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 9 8
(dump_exp_buffer2) N16 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 13 10
(dump_exp_buffer2) N11 EXP_BUFF_ID_VARIABLE     i rq:i ABC%  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 12 11
(dump_exp_buffer2) N12 EXP_BUFF_ID_FLT          f rq:f 1.1  0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_OPERATOR     f rq:f *  2: 12 11
(dump_exp_buffer2) N15 EXP_BUFF_ID_OPERATOR     f rq:f -  2: 13 10
(dump_exp_buffer2) N17 EXP_BUFF_ID_OPERATOR     f rq:f +  2: 15 7
(dump_exp_buffer2) N19 EXP_BUFF_ID_SUB_END      U rq:i   0:
(dump_exp_buffer2) N20 EXP_BUFF_ID_SUB_END      U rq:i   0:
(dump_exp_buffer2) N21 EXP_BUFF_ID_SUB_END      U rq:i   0:
(dump_exp_buffer2) N22 EXP_BUFF_ID_SUB_END      U rq:i   0:
(dump_exp_buffer2) N23 EXP_BUFF_ID_OPERATOR     f rq:f +  2: 17 2
(dump_exp_buffer2) N24 EXP_BUFF_ID_OPERATOR     f rq:f :=  2: 23 1
=================
(process_expression_types) 
==INFIX==

infix_stack_push: 'A'
infix_stack_push: 'A'
infix_stack_push: '2'
infix_stack_push: '3'
infix_stack_pop: '3'
infix_stack_pop: '2'
infix_stack_push: '(2 * 3)'
infix_stack_push: '3'
infix_stack_push: 'Z%'
infix_stack_pop: 'Z%'
infix_stack_pop: '3'
infix_stack_push: '(3 * Z%)'
infix_stack_push: 'ABC%'
infix_stack_push: '1.1'
infix_stack_pop: '1.1'
infix_stack_pop: 'ABC%'
infix_stack_push: '(ABC% * 1.1)'
infix_stack_pop: '(ABC% * 1.1)'
infix_stack_pop: '(3 * Z%)'
infix_stack_push: '((3 * Z%) - (ABC% * 1.1))'
infix_stack_pop: '((3 * Z%) - (ABC% * 1.1))'
infix_stack_pop: '(2 * 3)'
infix_stack_push: '((2 * 3) + ((3 * Z%) - (ABC% * 1.1)))'
infix_stack_pop: '((2 * 3) + ((3 * Z%) - (ABC% * 1.1)))'
infix_stack_pop: 'A'
infix_stack_push: '(A + ((2 * 3) + ((3 * Z%) - (ABC% * 1.1))))'
infix_stack_pop: '(A + ((2 * 3) + ((3 * Z%) - (ABC% * 1.1))))'
infix_stack_pop: 'A'
infix_stack_push: '(A := (A + ((2 * 3) + ((3 * Z%) - (ABC% * 1.1)))))'
infix_stack_pop: '(A := (A + ((2 * 3) + ((3 * Z%) - (ABC% * 1.1)))))'
(process_expression_types) ==(A := (A + ((2 * 3) + ((3 * Z%) - (ABC% * 1.1)))))==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N4 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N5 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
(    output_qcode) N6 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(    output_qcode) N7 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 6 5
(    output_qcode) N18 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 15 7
(    output_qcode) N8 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(    output_qcode) N9 EXP_BUFF_ID_VARIABLE     i rq:i Z%  0:
(    output_qcode) N10 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 9 8
(    output_qcode) N16 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 13 10
(    output_qcode) N11 EXP_BUFF_ID_VARIABLE     i rq:i ABC%  0:
(    output_qcode) N14 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 12 11
(    output_qcode) N12 EXP_BUFF_ID_FLT          f rq:f 1.1  0:
(    output_qcode) N13 EXP_BUFF_ID_OPERATOR     f rq:f *  2: 12 11
(    output_qcode) N15 EXP_BUFF_ID_OPERATOR     f rq:f -  2: 13 10
(    output_qcode) N17 EXP_BUFF_ID_OPERATOR     f rq:f +  2: 15 7
(    output_qcode) N19 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N20 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N21 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N22 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N23 EXP_BUFF_ID_OPERATOR     f rq:f +  2: 17 2
(    output_qcode) N24 EXP_BUFF_ID_OPERATOR     f rq:f :=  2: 23 1
check_literal:lit=':' idx=42 ''
check_literal:After drop space:':' idx=42 ''
check_literal  ret0 Empty test string
(translate_file) 
cline scanned OK
(translate_file) 
=======================cline==========================
(translate_file) 
==  X%  =  2
==
scan_cline:
check_line:
check_assignment:
check_variable:
check_vname 'X%  =  2
':
check_vname ret1 '%  =  2
':
check_variable: '%  =  2
'
check_variable: Ary test '  =  2
'
check_literal:lit='(' idx=4 '  =  2
'
check_literal:After drop space:'(' idx=4 '  =  2
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
check_literal:lit=' =' idx=4 '  =  2
'
    dropping space
check_literal:After drop space:'=' idx=6 '=  2
'
check_literal:After while():  2

check_literal:ret1 
check_expression: '2
'
check_eitem: '2
'
check_operator: 2

check_literal:lit=',' idx=9 '2
'
check_literal:After drop space:',' idx=9 '2
'
  ',' != '2'
check_literal: ret0
check_operator:ret0
check_function: '2
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=9 '2
'
    dropping space
check_literal:After drop space:'%' idx=9 '2
'
  '%' != '2'
check_literal: ret0
check_literal:lit=' "' idx=9 '2
'
    dropping space
check_literal:After drop space:'"' idx=9 '2
'
  '"' != '2'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '2
'
check_integer:ret1
check_number: ret1
check_eitem:ret1
check_eitem: '
'
check_operator: 

check_literal:lit=',' idx=11 ''
check_literal:After drop space:',' idx=11 ''
check_literal  ret0 Empty test string
check_operator:ret0
check_function: ''
check_function: ret0
check_atom:
check_literal:lit=' %' idx=10 '
'
    dropping space
check_literal:After drop space:'%' idx=11 ''
check_literal  ret0 Empty test string
check_literal:lit=' "' idx=10 '
'
    dropping space
check_literal:After drop space:'"' idx=11 ''
check_literal  ret0 Empty test string
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: ''
check_integer:ret0
check_number: ret0
check_variable:
check_vname '':
check_vname ret0 '':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=10 '
'
    dropping space
check_literal:After drop space:'(' idx=11 ''
check_literal  ret0 Empty test string
check_sub_expr: ret0
check_eitem:ret0
check_expression:ret1 '
'
check_assignment:ret1
check_line:ret1
scan_cline: Checked len=1, '
'
========================================================
  X%  =  2

========================================================
(output_expression_start)
scan_line:
check_assignment:
check_variable:
check_vname 'X%  =  2
':
check_vname ret1 '%  =  2
':
check_variable: '%  =  2
'
check_variable: Ary test '  =  2
'
check_literal:lit='(' idx=4 '  =  2
'
check_literal:After drop space:'(' idx=4 '  =  2
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
check_literal:lit=' =' idx=4 '  =  2
'
    dropping space
check_literal:After drop space:'=' idx=6 '=  2
'
check_literal:After while():  2

check_literal:ret1 
check_expression: '2
'
check_eitem: '2
'
check_operator: 2

check_literal:lit=',' idx=9 '2
'
check_literal:After drop space:',' idx=9 '2
'
  ',' != '2'
check_literal: ret0
check_operator:ret0
check_function: '2
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=9 '2
'
    dropping space
check_literal:After drop space:'%' idx=9 '2
'
  '%' != '2'
check_literal: ret0
check_literal:lit=' "' idx=9 '2
'
    dropping space
check_literal:After drop space:'"' idx=9 '2
'
  '"' != '2'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '2
'
check_integer:ret1
check_number: ret1
check_eitem:ret1
check_eitem: '
'
check_operator: 

check_literal:lit=',' idx=11 ''
check_literal:After drop space:',' idx=11 ''
check_literal  ret0 Empty test string
check_operator:ret0
check_function: ''
check_function: ret0
check_atom:
check_literal:lit=' %' idx=10 '
'
    dropping space
check_literal:After drop space:'%' idx=11 ''
check_literal  ret0 Empty test string
check_literal:lit=' "' idx=10 '
'
    dropping space
check_literal:After drop space:'"' idx=11 ''
check_literal  ret0 Empty test string
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: ''
check_integer:ret0
check_number: ret0
check_variable:
check_vname '':
check_vname ret0 '':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=10 '
'
    dropping space
check_literal:After drop space:'(' idx=11 ''
check_literal  ret0 Empty test string
check_sub_expr: ret0
check_eitem:ret0
check_expression:ret1 '
'
check_assignment:ret1
scan_assignment:
scan_variable:
scan_vname: 'X%  =  2
'
scan_vname: ret1 'X'
scan_variable: '%  =  2
' vname='X'
scan_variable: Ary test '  =  2
'
check_literal:lit='(' idx=4 '  =  2
'
check_literal:After drop space:'(' idx=4 '  =  2
'
  '(' != ' '
check_literal: ret0
scan_variable:ret1 vname='X%' is str:0 int:1 flt:0 ary:0
   Frst:1 T:'X%' exptype:U
token_is_function:
token_is_function:X% is not function
token_is_variable: tok:'X%'
token_is_function:
token_is_function:X% is not function
(init_get_name) 
init_get_name:'X%'
(init_get_name) 
init_get_name:'X%'
(get_name) 
get_name:gn:'X%'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] i i X%
VAR INFO: '                X%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
scan_literal:lit=' =' '  =  2
'
scan_literal:After drop space:=  2

scan_literal:while loop:=  2

   Frst:0 T:'=' exptype:i
(operator_precedence) 
= is operator
'=' is operator
(process_token) 
Token is operator o1 name:= o2 name:
(process_token) 
opr1:1 opr2:0
Push 1
 Push:'='
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: = type:0
(op_stack_print) 
------------------

scan_expression: '  2
'
check_eitem: '2
'
check_operator: 2

check_literal:lit=',' idx=9 '2
'
check_literal:After drop space:',' idx=9 '2
'
  ',' != '2'
check_literal: ret0
check_operator:ret0
check_function: '2
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=9 '2
'
    dropping space
check_literal:After drop space:'%' idx=9 '2
'
  '%' != '2'
check_literal: ret0
check_literal:lit=' "' idx=9 '2
'
    dropping space
check_literal:After drop space:'"' idx=9 '2
'
  '"' != '2'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '2
'
check_integer:ret1
check_number: ret1
check_eitem:ret1
scan_eitem:
check_operator: 2

check_literal:lit=',' idx=9 '2
'
check_literal:After drop space:',' idx=9 '2
'
  ',' != '2'
check_literal: ret0
check_operator:ret0
check_function: '2
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=9 '2
'
    dropping space
check_literal:After drop space:'%' idx=9 '2
'
  '%' != '2'
check_literal: ret0
check_literal:lit=' "' idx=9 '2
'
    dropping space
check_literal:After drop space:'"' idx=9 '2
'
  '"' != '2'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '2
'
check_integer:ret1
check_number: ret1
scan_atom:
check_literal:lit=' %' idx=9 '2
'
    dropping space
check_literal:After drop space:'%' idx=9 '2
'
  '%' != '2'
check_literal: ret0
check_literal:lit=' "' idx=9 '2
'
    dropping space
check_literal:After drop space:'"' idx=9 '2
'
  '"' != '2'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '2
'
check_integer:ret1
check_number: ret1
scan_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '2
'
check_integer:ret1
scan_integer:
scan_integer:ret1
   Frst:0 T:'2' exptype:i
(operator_precedence) 
= is operator
modify_expression_type:Inittype:i Intype:i Outtype:i
(  output_integer) [i,()] i i 2
scan_integer:ret1  2
check_eitem: '
'
check_operator: 

check_literal:lit=',' idx=11 ''
check_literal:After drop space:',' idx=11 ''
check_literal  ret0 Empty test string
check_operator:ret0
check_function: ''
check_function: ret0
check_atom:
check_literal:lit=' %' idx=10 '
'
    dropping space
check_literal:After drop space:'%' idx=11 ''
check_literal  ret0 Empty test string
check_literal:lit=' "' idx=10 '
'
    dropping space
check_literal:After drop space:'"' idx=11 ''
check_literal  ret0 Empty test string
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: ''
check_integer:ret0
check_number: ret0
check_variable:
check_vname '':
check_vname ret0 '':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=10 '
'
    dropping space
check_literal:After drop space:'(' idx=11 ''
check_literal  ret0 Empty test string
check_sub_expr: ret0
check_eitem:ret0
scan_expression: ret1 '
'
scan_assignment: ret1
Finalise stack
Pop '='
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_operator) [i,()] i i =
token_is_function:
token_is_function:= is not function
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i X%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i =  0:
=================
 BE:X%
type_check_stack_push: 'X%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'X%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'X%' type:i (0)
 BE:2
type_check_stack_push: '2'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'X%' type:0
(type_check_stack_print) 
001: '2' type:0
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'X%' type:i (0)
001: '2' type:i (0)
 BE::=
BUFF_ID_OPERATOR
Found operator :=
type_check_stack_pop: '2'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'X%' type:0
(type_check_stack_print) 
------------------

type_check_stack_pop: 'X%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (0)

(type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i X%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i :=  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i X%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_OPERATOR     i rq:i :=  2: 2 1
=================
(process_expression_types) 
==INFIX==

infix_stack_push: 'X%'
infix_stack_push: '2'
infix_stack_pop: '2'
infix_stack_pop: 'X%'
infix_stack_push: '(X% := 2)'
infix_stack_pop: '(X% := 2)'
(process_expression_types) ==(X% := 2)==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i X%  0:
(    output_qcode) N2 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
(    output_qcode) N3 EXP_BUFF_ID_OPERATOR     i rq:i :=  2: 2 1
check_literal:lit=':' idx=11 ''
check_literal:After drop space:':' idx=11 ''
check_literal  ret0 Empty test string
(translate_file) 
cline scanned OK
(translate_file) 
=======================cline==========================
(translate_file) 
==X%=Y%
==
scan_cline:
check_line:
check_assignment:
check_variable:
check_vname 'X%=Y%
':
check_vname ret1 '%=Y%
':
check_variable: '%=Y%
'
check_variable: Ary test '=Y%
'
check_literal:lit='(' idx=2 '=Y%
'
check_literal:After drop space:'(' idx=2 '=Y%
'
  '(' != '='
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
check_literal:lit=' =' idx=2 '=Y%
'
    dropping space
check_literal:After drop space:'=' idx=2 '=Y%
'
check_literal:After while():Y%

check_literal:ret1 
check_expression: 'Y%
'
check_eitem: 'Y%
'
check_operator: Y%

check_literal:lit=',' idx=3 'Y%
'
check_literal:After drop space:',' idx=3 'Y%
'
  ',' != 'Y'
check_literal: ret0
check_operator:ret0
check_function: 'Y%
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=3 'Y%
'
    dropping space
check_literal:After drop space:'%' idx=3 'Y%
'
  '%' != 'Y'
check_literal: ret0
check_literal:lit=' "' idx=3 'Y%
'
    dropping space
check_literal:After drop space:'"' idx=3 'Y%
'
  '"' != 'Y'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'Y%
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'Y%
':
check_vname ret1 '%
':
check_variable: '%
'
check_variable: Ary test '
'
check_literal:lit='(' idx=5 '
'
check_literal:After drop space:'(' idx=5 '
'
  '(' != '
'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
check_eitem:ret1
check_eitem: '
'
check_operator: 

check_literal:lit=',' idx=6 ''
check_literal:After drop space:',' idx=6 ''
check_literal  ret0 Empty test string
check_operator:ret0
check_function: ''
check_function: ret0
check_atom:
check_literal:lit=' %' idx=5 '
'
    dropping space
check_literal:After drop space:'%' idx=6 ''
check_literal  ret0 Empty test string
check_literal:lit=' "' idx=5 '
'
    dropping space
check_literal:After drop space:'"' idx=6 ''
check_literal  ret0 Empty test string
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: ''
check_integer:ret0
check_number: ret0
check_variable:
check_vname '':
check_vname ret0 '':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=5 '
'
    dropping space
check_literal:After drop space:'(' idx=6 ''
check_literal  ret0 Empty test string
check_sub_expr: ret0
check_eitem:ret0
check_expression:ret1 '
'
check_assignment:ret1
check_line:ret1
scan_cline: Checked len=1, '
'
========================================================
X%=Y%

========================================================
(output_expression_start)
scan_line:
check_assignment:
check_variable:
check_vname 'X%=Y%
':
check_vname ret1 '%=Y%
':
check_variable: '%=Y%
'
check_variable: Ary test '=Y%
'
check_literal:lit='(' idx=2 '=Y%
'
check_literal:After drop space:'(' idx=2 '=Y%
'
  '(' != '='
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
check_literal:lit=' =' idx=2 '=Y%
'
    dropping space
check_literal:After drop space:'=' idx=2 '=Y%
'
check_literal:After while():Y%

check_literal:ret1 
check_expression: 'Y%
'
check_eitem: 'Y%
'
check_operator: Y%

check_literal:lit=',' idx=3 'Y%
'
check_literal:After drop space:',' idx=3 'Y%
'
  ',' != 'Y'
check_literal: ret0
check_operator:ret0
check_function: 'Y%
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=3 'Y%
'
    dropping space
check_literal:After drop space:'%' idx=3 'Y%
'
  '%' != 'Y'
check_literal: ret0
check_literal:lit=' "' idx=3 'Y%
'
    dropping space
check_literal:After drop space:'"' idx=3 'Y%
'
  '"' != 'Y'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'Y%
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'Y%
':
check_vname ret1 '%
':
check_variable: '%
'
check_variable: Ary test '
'
check_literal:lit='(' idx=5 '
'
check_literal:After drop space:'(' idx=5 '
'
  '(' != '
'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
check_eitem:ret1
check_eitem: '
'
check_operator: 

check_literal:lit=',' idx=6 ''
check_literal:After drop space:',' idx=6 ''
check_literal  ret0 Empty test string
check_operator:ret0
check_function: ''
check_function: ret0
check_atom:
check_literal:lit=' %' idx=5 '
'
    dropping space
check_literal:After drop space:'%' idx=6 ''
check_literal  ret0 Empty test string
check_literal:lit=' "' idx=5 '
'
    dropping space
check_literal:After drop space:'"' idx=6 ''
check_literal  ret0 Empty test string
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: ''
check_integer:ret0
check_number: ret0
check_variable:
check_vname '':
check_vname ret0 '':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=5 '
'
    dropping space
check_literal:After drop space:'(' idx=6 ''
check_literal  ret0 Empty test string
check_sub_expr: ret0
check_eitem:ret0
check_expression:ret1 '
'
check_assignment:ret1
scan_assignment:
scan_variable:
scan_vname: 'X%=Y%
'
scan_vname: ret1 'X'
scan_variable: '%=Y%
' vname='X'
scan_variable: Ary test '=Y%
'
check_literal:lit='(' idx=2 '=Y%
'
check_literal:After drop space:'(' idx=2 '=Y%
'
  '(' != '='
check_literal: ret0
scan_variable:ret1 vname='X%' is str:0 int:1 flt:0 ary:0
   Frst:1 T:'X%' exptype:U
token_is_function:
token_is_function:X% is not function
token_is_variable: tok:'X%'
token_is_function:
token_is_function:X% is not function
(init_get_name) 
init_get_name:'X%'
(init_get_name) 
init_get_name:'X%'
(get_name) 
get_name:gn:'X%'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] i i X%
VAR INFO: '                X%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
scan_literal:lit=' =' '=Y%
'
scan_literal:After drop space:=Y%

scan_literal:while loop:=Y%

   Frst:0 T:'=' exptype:i
(operator_precedence) 
= is operator
'=' is operator
(process_token) 
Token is operator o1 name:= o2 name:
(process_token) 
opr1:1 opr2:0
Push 1
 Push:'='
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: = type:0
(op_stack_print) 
------------------

scan_expression: 'Y%
'
check_eitem: 'Y%
'
check_operator: Y%

check_literal:lit=',' idx=3 'Y%
'
check_literal:After drop space:',' idx=3 'Y%
'
  ',' != 'Y'
check_literal: ret0
check_operator:ret0
check_function: 'Y%
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=3 'Y%
'
    dropping space
check_literal:After drop space:'%' idx=3 'Y%
'
  '%' != 'Y'
check_literal: ret0
check_literal:lit=' "' idx=3 'Y%
'
    dropping space
check_literal:After drop space:'"' idx=3 'Y%
'
  '"' != 'Y'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'Y%
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'Y%
':
check_vname ret1 '%
':
check_variable: '%
'
check_variable: Ary test '
'
check_literal:lit='(' idx=5 '
'
check_literal:After drop space:'(' idx=5 '
'
  '(' != '
'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
check_eitem:ret1
scan_eitem:
check_operator: Y%

check_literal:lit=',' idx=3 'Y%
'
check_literal:After drop space:',' idx=3 'Y%
'
  ',' != 'Y'
check_literal: ret0
check_operator:ret0
check_function: 'Y%
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=3 'Y%
'
    dropping space
check_literal:After drop space:'%' idx=3 'Y%
'
  '%' != 'Y'
check_literal: ret0
check_literal:lit=' "' idx=3 'Y%
'
    dropping space
check_literal:After drop space:'"' idx=3 'Y%
'
  '"' != 'Y'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'Y%
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'Y%
':
check_vname ret1 '%
':
check_variable: '%
'
check_variable: Ary test '
'
check_literal:lit='(' idx=5 '
'
check_literal:After drop space:'(' idx=5 '
'
  '(' != '
'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
scan_atom:
check_literal:lit=' %' idx=3 'Y%
'
    dropping space
check_literal:After drop space:'%' idx=3 'Y%
'
  '%' != 'Y'
check_literal: ret0
check_literal:lit=' "' idx=3 'Y%
'
    dropping space
check_literal:After drop space:'"' idx=3 'Y%
'
  '"' != 'Y'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'Y%
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'Y%
':
check_vname ret1 '%
':
check_variable: '%
'
check_variable: Ary test '
'
check_literal:lit='(' idx=5 '
'
check_literal:After drop space:'(' idx=5 '
'
  '(' != '
'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
scan_variable:
scan_vname: 'Y%
'
scan_vname: ret1 'Y'
scan_variable: '%
' vname='Y'
scan_variable: Ary test '
'
check_literal:lit='(' idx=5 '
'
check_literal:After drop space:'(' idx=5 '
'
  '(' != '
'
check_literal: ret0
scan_variable:ret1 vname='Y%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'Y%' exptype:i
(operator_precedence) 
= is operator
token_is_function:
token_is_function:Y% is not function
token_is_variable: tok:'Y%'
token_is_function:
token_is_function:Y% is not function
(init_get_name) 
init_get_name:'Y%'
(init_get_name) 
init_get_name:'Y%'
(get_name) 
get_name:gn:'Y%'
process_token:type:i req_type:i
modify_expression_type:Inittype:i Intype:i Outtype:i
( output_variable) [i,()] i i Y%
VAR INFO: '                Y%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
check_eitem: '
'
check_operator: 

check_literal:lit=',' idx=6 ''
check_literal:After drop space:',' idx=6 ''
check_literal  ret0 Empty test string
check_operator:ret0
check_function: ''
check_function: ret0
check_atom:
check_literal:lit=' %' idx=5 '
'
    dropping space
check_literal:After drop space:'%' idx=6 ''
check_literal  ret0 Empty test string
check_literal:lit=' "' idx=5 '
'
    dropping space
check_literal:After drop space:'"' idx=6 ''
check_literal  ret0 Empty test string
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: ''
check_integer:ret0
check_number: ret0
check_variable:
check_vname '':
check_vname ret0 '':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=5 '
'
    dropping space
check_literal:After drop space:'(' idx=6 ''
check_literal  ret0 Empty test string
check_sub_expr: ret0
check_eitem:ret0
scan_expression: ret1 '
'
scan_assignment: ret1
Finalise stack
Pop '='
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_operator) [i,()] i i =
token_is_function:
token_is_function:= is not function
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i X%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i Y%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i =  0:
=================
 BE:X%
type_check_stack_push: 'X%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'X%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'X%' type:i (0)
 BE:Y%
type_check_stack_push: 'Y%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'X%' type:0
(type_check_stack_print) 
001: 'Y%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'X%' type:i (0)
001: 'Y%' type:i (0)
 BE::=
BUFF_ID_OPERATOR
Found operator :=
type_check_stack_pop: 'Y%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'X%' type:0
(type_check_stack_print) 
------------------

type_check_stack_pop: 'X%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (0)

(type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i X%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i Y%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i :=  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i X%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i Y%  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_OPERATOR     i rq:i :=  2: 2 1
=================
(process_expression_types) 
==INFIX==

infix_stack_push: 'X%'
infix_stack_push: 'Y%'
infix_stack_pop: 'Y%'
infix_stack_pop: 'X%'
infix_stack_push: '(X% := Y%)'
infix_stack_pop: '(X% := Y%)'
(process_expression_types) ==(X% := Y%)==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i X%  0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     i rq:i Y%  0:
(    output_qcode) N3 EXP_BUFF_ID_OPERATOR     i rq:i :=  2: 2 1
check_literal:lit=':' idx=6 ''
check_literal:After drop space:':' idx=6 ''
check_literal  ret0 Empty test string
(translate_file) 
cline scanned OK
(translate_file) 
=======================cline==========================
(translate_file) 
==X%= Z%
==
scan_cline:
check_line:
check_assignment:
check_variable:
check_vname 'X%= Z%
':
check_vname ret1 '%= Z%
':
check_variable: '%= Z%
'
check_variable: Ary test '= Z%
'
check_literal:lit='(' idx=2 '= Z%
'
check_literal:After drop space:'(' idx=2 '= Z%
'
  '(' != '='
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
check_literal:lit=' =' idx=2 '= Z%
'
    dropping space
check_literal:After drop space:'=' idx=2 '= Z%
'
check_literal:After while(): Z%

check_literal:ret1 
check_expression: 'Z%
'
check_eitem: 'Z%
'
check_operator: Z%

check_literal:lit=',' idx=4 'Z%
'
check_literal:After drop space:',' idx=4 'Z%
'
  ',' != 'Z'
check_literal: ret0
check_operator:ret0
check_function: 'Z%
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=4 'Z%
'
    dropping space
check_literal:After drop space:'%' idx=4 'Z%
'
  '%' != 'Z'
check_literal: ret0
check_literal:lit=' "' idx=4 'Z%
'
    dropping space
check_literal:After drop space:'"' idx=4 'Z%
'
  '"' != 'Z'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'Z%
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'Z%
':
check_vname ret1 '%
':
check_variable: '%
'
check_variable: Ary test '
'
check_literal:lit='(' idx=6 '
'
check_literal:After drop space:'(' idx=6 '
'
  '(' != '
'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
check_eitem:ret1
check_eitem: '
'
check_operator: 

check_literal:lit=',' idx=7 ''
check_literal:After drop space:',' idx=7 ''
check_literal  ret0 Empty test string
check_operator:ret0
check_function: ''
check_function: ret0
check_atom:
check_literal:lit=' %' idx=6 '
'
    dropping space
check_literal:After drop space:'%' idx=7 ''
check_literal  ret0 Empty test string
check_literal:lit=' "' idx=6 '
'
    dropping space
check_literal:After drop space:'"' idx=7 ''
check_literal  ret0 Empty test string
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: ''
check_integer:ret0
check_number: ret0
check_variable:
check_vname '':
check_vname ret0 '':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=6 '
'
    dropping space
check_literal:After drop space:'(' idx=7 ''
check_literal  ret0 Empty test string
check_sub_expr: ret0
check_eitem:ret0
check_expression:ret1 '
'
check_assignment:ret1
check_line:ret1
scan_cline: Checked len=1, '
'
========================================================
X%= Z%

========================================================
(output_expression_start)
scan_line:
check_assignment:
check_variable:
check_vname 'X%= Z%
':
check_vname ret1 '%= Z%
':
check_variable: '%= Z%
'
check_variable: Ary test '= Z%
'
check_literal:lit='(' idx=2 '= Z%
'
check_literal:After drop space:'(' idx=2 '= Z%
'
  '(' != '='
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
check_literal:lit=' =' idx=2 '= Z%
'
    dropping space
check_literal:After drop space:'=' idx=2 '= Z%
'
check_literal:After while(): Z%

check_literal:ret1 
check_expression: 'Z%
'
check_eitem: 'Z%
'
check_operator: Z%

check_literal:lit=',' idx=4 'Z%
'
check_literal:After drop space:',' idx=4 'Z%
'
  ',' != 'Z'
check_literal: ret0
check_operator:ret0
check_function: 'Z%
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=4 'Z%
'
    dropping space
check_literal:After drop space:'%' idx=4 'Z%
'
  '%' != 'Z'
check_literal: ret0
check_literal:lit=' "' idx=4 'Z%
'
    dropping space
check_literal:After drop space:'"' idx=4 'Z%
'
  '"' != 'Z'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'Z%
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'Z%
':
check_vname ret1 '%
':
check_variable: '%
'
check_variable: Ary test '
'
check_literal:lit='(' idx=6 '
'
check_literal:After drop space:'(' idx=6 '
'
  '(' != '
'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
check_eitem:ret1
check_eitem: '
'
check_operator: 

check_literal:lit=',' idx=7 ''
check_literal:After drop space:',' idx=7 ''
check_literal  ret0 Empty test string
check_operator:ret0
check_function: ''
check_function: ret0
check_atom:
check_literal:lit=' %' idx=6 '
'
    dropping space
check_literal:After drop space:'%' idx=7 ''
check_literal  ret0 Empty test string
check_literal:lit=' "' idx=6 '
'
    dropping space
check_literal:After drop space:'"' idx=7 ''
check_literal  ret0 Empty test string
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: ''
check_integer:ret0
check_number: ret0
check_variable:
check_vname '':
check_vname ret0 '':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=6 '
'
    dropping space
check_literal:After drop space:'(' idx=7 ''
check_literal  ret0 Empty test string
check_sub_expr: ret0
check_eitem:ret0
check_expression:ret1 '
'
check_assignment:ret1
scan_assignment:
scan_variable:
scan_vname: 'X%= Z%
'
scan_vname: ret1 'X'
scan_variable: '%= Z%
' vname='X'
scan_variable: Ary test '= Z%
'
check_literal:lit='(' idx=2 '= Z%
'
check_literal:After drop space:'(' idx=2 '= Z%
'
  '(' != '='
check_literal: ret0
scan_variable:ret1 vname='X%' is str:0 int:1 flt:0 ary:0
   Frst:1 T:'X%' exptype:U
token_is_function:
token_is_function:X% is not function
token_is_variable: tok:'X%'
token_is_function:
token_is_function:X% is not function
(init_get_name) 
init_get_name:'X%'
(init_get_name) 
init_get_name:'X%'
(get_name) 
get_name:gn:'X%'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] i i X%
VAR INFO: '                X%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
scan_literal:lit=' =' '= Z%
'
scan_literal:After drop space:= Z%

scan_literal:while loop:= Z%

   Frst:0 T:'=' exptype:i
(operator_precedence) 
= is operator
'=' is operator
(process_token) 
Token is operator o1 name:= o2 name:
(process_token) 
opr1:1 opr2:0
Push 1
 Push:'='
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: = type:0
(op_stack_print) 
------------------

scan_expression: ' Z%
'
check_eitem: 'Z%
'
check_operator: Z%

check_literal:lit=',' idx=4 'Z%
'
check_literal:After drop space:',' idx=4 'Z%
'
  ',' != 'Z'
check_literal: ret0
check_operator:ret0
check_function: 'Z%
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=4 'Z%
'
    dropping space
check_literal:After drop space:'%' idx=4 'Z%
'
  '%' != 'Z'
check_literal: ret0
check_literal:lit=' "' idx=4 'Z%
'
    dropping space
check_literal:After drop space:'"' idx=4 'Z%
'
  '"' != 'Z'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'Z%
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'Z%
':
check_vname ret1 '%
':
check_variable: '%
'
check_variable: Ary test '
'
check_literal:lit='(' idx=6 '
'
check_literal:After drop space:'(' idx=6 '
'
  '(' != '
'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
check_eitem:ret1
scan_eitem:
check_operator: Z%

check_literal:lit=',' idx=4 'Z%
'
check_literal:After drop space:',' idx=4 'Z%
'
  ',' != 'Z'
check_literal: ret0
check_operator:ret0
check_function: 'Z%
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=4 'Z%
'
    dropping space
check_literal:After drop space:'%' idx=4 'Z%
'
  '%' != 'Z'
check_literal: ret0
check_literal:lit=' "' idx=4 'Z%
'
    dropping space
check_literal:After drop space:'"' idx=4 'Z%
'
  '"' != 'Z'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'Z%
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'Z%
':
check_vname ret1 '%
':
check_variable: '%
'
check_variable: Ary test '
'
check_literal:lit='(' idx=6 '
'
check_literal:After drop space:'(' idx=6 '
'
  '(' != '
'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
scan_atom:
check_literal:lit=' %' idx=4 'Z%
'
    dropping space
check_literal:After drop space:'%' idx=4 'Z%
'
  '%' != 'Z'
check_literal: ret0
check_literal:lit=' "' idx=4 'Z%
'
    dropping space
check_literal:After drop space:'"' idx=4 'Z%
'
  '"' != 'Z'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'Z%
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'Z%
':
check_vname ret1 '%
':
check_variable: '%
'
check_variable: Ary test '
'
check_literal:lit='(' idx=6 '
'
check_literal:After drop space:'(' idx=6 '
'
  '(' != '
'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
scan_variable:
scan_vname: 'Z%
'
scan_vname: ret1 'Z'
scan_variable: '%
' vname='Z'
scan_variable: Ary test '
'
check_literal:lit='(' idx=6 '
'
check_literal:After drop space:'(' idx=6 '
'
  '(' != '
'
check_literal: ret0
scan_variable:ret1 vname='Z%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'Z%' exptype:i
(operator_precedence) 
= is operator
token_is_function:
token_is_function:Z% is not function
token_is_variable: tok:'Z%'
token_is_function:
token_is_function:Z% is not function
(init_get_name) 
init_get_name:'Z%'
(init_get_name) 
init_get_name:'Z%'
(get_name) 
get_name:gn:'Z%'
process_token:type:i req_type:i
modify_expression_type:Inittype:i Intype:i Outtype:i
( output_variable) [i,()] i i Z%
VAR INFO: '                Z%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
check_eitem: '
'
check_operator: 

check_literal:lit=',' idx=7 ''
check_literal:After drop space:',' idx=7 ''
check_literal  ret0 Empty test string
check_operator:ret0
check_function: ''
check_function: ret0
check_atom:
check_literal:lit=' %' idx=6 '
'
    dropping space
check_literal:After drop space:'%' idx=7 ''
check_literal  ret0 Empty test string
check_literal:lit=' "' idx=6 '
'
    dropping space
check_literal:After drop space:'"' idx=7 ''
check_literal  ret0 Empty test string
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: ''
check_integer:ret0
check_number: ret0
check_variable:
check_vname '':
check_vname ret0 '':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=6 '
'
    dropping space
check_literal:After drop space:'(' idx=7 ''
check_literal  ret0 Empty test string
check_sub_expr: ret0
check_eitem:ret0
scan_expression: ret1 '
'
scan_assignment: ret1
Finalise stack
Pop '='
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_operator) [i,()] i i =
token_is_function:
token_is_function:= is not function
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i X%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i Z%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i =  0:
=================
 BE:X%
type_check_stack_push: 'X%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'X%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'X%' type:i (0)
 BE:Z%
type_check_stack_push: 'Z%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'X%' type:0
(type_check_stack_print) 
001: 'Z%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'X%' type:i (0)
001: 'Z%' type:i (0)
 BE::=
BUFF_ID_OPERATOR
Found operator :=
type_check_stack_pop: 'Z%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'X%' type:0
(type_check_stack_print) 
------------------

type_check_stack_pop: 'X%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (0)

(type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i X%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i Z%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i :=  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i X%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i Z%  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_OPERATOR     i rq:i :=  2: 2 1
=================
(process_expression_types) 
==INFIX==

infix_stack_push: 'X%'
infix_stack_push: 'Z%'
infix_stack_pop: 'Z%'
infix_stack_pop: 'X%'
infix_stack_push: '(X% := Z%)'
infix_stack_pop: '(X% := Z%)'
(process_expression_types) ==(X% := Z%)==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i X%  0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     i rq:i Z%  0:
(    output_qcode) N3 EXP_BUFF_ID_OPERATOR     i rq:i :=  2: 2 1
check_literal:lit=':' idx=7 ''
check_literal:After drop space:':' idx=7 ''
check_literal  ret0 Empty test string
(translate_file) 
cline scanned OK
(translate_file) 
=======================cline==========================
(translate_file) 
==A% = 1+2
==
scan_cline:
check_line:
check_assignment:
check_variable:
check_vname 'A% = 1+2
':
check_vname ret1 '% = 1+2
':
check_variable: '% = 1+2
'
check_variable: Ary test ' = 1+2
'
check_literal:lit='(' idx=2 ' = 1+2
'
check_literal:After drop space:'(' idx=2 ' = 1+2
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
check_literal:lit=' =' idx=2 ' = 1+2
'
    dropping space
check_literal:After drop space:'=' idx=3 '= 1+2
'
check_literal:After while(): 1+2

check_literal:ret1 
check_expression: '1+2
'
check_eitem: '1+2
'
check_operator: 1+2

check_literal:lit=',' idx=5 '1+2
'
check_literal:After drop space:',' idx=5 '1+2
'
  ',' != '1'
check_literal: ret0
check_operator:ret0
check_function: '1+2
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=5 '1+2
'
    dropping space
check_literal:After drop space:'%' idx=5 '1+2
'
  '%' != '1'
check_literal: ret0
check_literal:lit=' "' idx=5 '1+2
'
    dropping space
check_literal:After drop space:'"' idx=5 '1+2
'
  '"' != '1'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '1+2
'
check_integer:ret1
check_number: ret1
check_eitem:ret1
check_eitem: '+2
'
check_operator: +2

check_literal:lit=',' idx=6 '+2
'
check_literal:After drop space:',' idx=6 '+2
'
  ',' != '+'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
check_eitem: '2
'
check_operator: 2

check_literal:lit=',' idx=7 '2
'
check_literal:After drop space:',' idx=7 '2
'
  ',' != '2'
check_literal: ret0
check_operator:ret0
check_function: '2
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=7 '2
'
    dropping space
check_literal:After drop space:'%' idx=7 '2
'
  '%' != '2'
check_literal: ret0
check_literal:lit=' "' idx=7 '2
'
    dropping space
check_literal:After drop space:'"' idx=7 '2
'
  '"' != '2'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '2
'
check_integer:ret1
check_number: ret1
check_eitem:ret1
check_eitem: '
'
check_operator: 

check_literal:lit=',' idx=9 ''
check_literal:After drop space:',' idx=9 ''
check_literal  ret0 Empty test string
check_operator:ret0
check_function: ''
check_function: ret0
check_atom:
check_literal:lit=' %' idx=8 '
'
    dropping space
check_literal:After drop space:'%' idx=9 ''
check_literal  ret0 Empty test string
check_literal:lit=' "' idx=8 '
'
    dropping space
check_literal:After drop space:'"' idx=9 ''
check_literal  ret0 Empty test string
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: ''
check_integer:ret0
check_number: ret0
check_variable:
check_vname '':
check_vname ret0 '':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=8 '
'
    dropping space
check_literal:After drop space:'(' idx=9 ''
check_literal  ret0 Empty test string
check_sub_expr: ret0
check_eitem:ret0
check_expression:ret1 '
'
check_assignment:ret1
check_line:ret1
scan_cline: Checked len=1, '
'
========================================================
A% = 1+2

========================================================
(output_expression_start)
scan_line:
check_assignment:
check_variable:
check_vname 'A% = 1+2
':
check_vname ret1 '% = 1+2
':
check_variable: '% = 1+2
'
check_variable: Ary test ' = 1+2
'
check_literal:lit='(' idx=2 ' = 1+2
'
check_literal:After drop space:'(' idx=2 ' = 1+2
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
check_literal:lit=' =' idx=2 ' = 1+2
'
    dropping space
check_literal:After drop space:'=' idx=3 '= 1+2
'
check_literal:After while(): 1+2

check_literal:ret1 
check_expression: '1+2
'
check_eitem: '1+2
'
check_operator: 1+2

check_literal:lit=',' idx=5 '1+2
'
check_literal:After drop space:',' idx=5 '1+2
'
  ',' != '1'
check_literal: ret0
check_operator:ret0
check_function: '1+2
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=5 '1+2
'
    dropping space
check_literal:After drop space:'%' idx=5 '1+2
'
  '%' != '1'
check_literal: ret0
check_literal:lit=' "' idx=5 '1+2
'
    dropping space
check_literal:After drop space:'"' idx=5 '1+2
'
  '"' != '1'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '1+2
'
check_integer:ret1
check_number: ret1
check_eitem:ret1
check_eitem: '+2
'
check_operator: +2

check_literal:lit=',' idx=6 '+2
'
check_literal:After drop space:',' idx=6 '+2
'
  ',' != '+'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
check_eitem: '2
'
check_operator: 2

check_literal:lit=',' idx=7 '2
'
check_literal:After drop space:',' idx=7 '2
'
  ',' != '2'
check_literal: ret0
check_operator:ret0
check_function: '2
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=7 '2
'
    dropping space
check_literal:After drop space:'%' idx=7 '2
'
  '%' != '2'
check_literal: ret0
check_literal:lit=' "' idx=7 '2
'
    dropping space
check_literal:After drop space:'"' idx=7 '2
'
  '"' != '2'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '2
'
check_integer:ret1
check_number: ret1
check_eitem:ret1
check_eitem: '
'
check_operator: 

check_literal:lit=',' idx=9 ''
check_literal:After drop space:',' idx=9 ''
check_literal  ret0 Empty test string
check_operator:ret0
check_function: ''
check_function: ret0
check_atom:
check_literal:lit=' %' idx=8 '
'
    dropping space
check_literal:After drop space:'%' idx=9 ''
check_literal  ret0 Empty test string
check_literal:lit=' "' idx=8 '
'
    dropping space
check_literal:After drop space:'"' idx=9 ''
check_literal  ret0 Empty test string
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: ''
check_integer:ret0
check_number: ret0
check_variable:
check_vname '':
check_vname ret0 '':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=8 '
'
    dropping space
check_literal:After drop space:'(' idx=9 ''
check_literal  ret0 Empty test string
check_sub_expr: ret0
check_eitem:ret0
check_expression:ret1 '
'
check_assignment:ret1
scan_assignment:
scan_variable:
scan_vname: 'A% = 1+2
'
scan_vname: ret1 'A'
scan_variable: '% = 1+2
' vname='A'
scan_variable: Ary test ' = 1+2
'
check_literal:lit='(' idx=2 ' = 1+2
'
check_literal:After drop space:'(' idx=2 ' = 1+2
'
  '(' != ' '
check_literal: ret0
scan_variable:ret1 vname='A%' is str:0 int:1 flt:0 ary:0
   Frst:1 T:'A%' exptype:U
token_is_function:
token_is_function:A% is not function
token_is_variable: tok:'A%'
token_is_function:
token_is_function:A% is not function
(init_get_name) 
init_get_name:'A%'
(init_get_name) 
init_get_name:'A%'
(get_name) 
get_name:gn:'A%'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] i i A%
VAR INFO: '                A%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
scan_literal:lit=' =' ' = 1+2
'
scan_literal:After drop space:= 1+2

scan_literal:while loop:= 1+2

   Frst:0 T:'=' exptype:i
(operator_precedence) 
= is operator
'=' is operator
(process_token) 
Token is operator o1 name:= o2 name:
(process_token) 
opr1:1 opr2:0
Push 1
 Push:'='
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: = type:0
(op_stack_print) 
------------------

scan_expression: ' 1+2
'
check_eitem: '1+2
'
check_operator: 1+2

check_literal:lit=',' idx=5 '1+2
'
check_literal:After drop space:',' idx=5 '1+2
'
  ',' != '1'
check_literal: ret0
check_operator:ret0
check_function: '1+2
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=5 '1+2
'
    dropping space
check_literal:After drop space:'%' idx=5 '1+2
'
  '%' != '1'
check_literal: ret0
check_literal:lit=' "' idx=5 '1+2
'
    dropping space
check_literal:After drop space:'"' idx=5 '1+2
'
  '"' != '1'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '1+2
'
check_integer:ret1
check_number: ret1
check_eitem:ret1
scan_eitem:
check_operator: 1+2

check_literal:lit=',' idx=5 '1+2
'
check_literal:After drop space:',' idx=5 '1+2
'
  ',' != '1'
check_literal: ret0
check_operator:ret0
check_function: '1+2
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=5 '1+2
'
    dropping space
check_literal:After drop space:'%' idx=5 '1+2
'
  '%' != '1'
check_literal: ret0
check_literal:lit=' "' idx=5 '1+2
'
    dropping space
check_literal:After drop space:'"' idx=5 '1+2
'
  '"' != '1'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '1+2
'
check_integer:ret1
check_number: ret1
scan_atom:
check_literal:lit=' %' idx=5 '1+2
'
    dropping space
check_literal:After drop space:'%' idx=5 '1+2
'
  '%' != '1'
check_literal: ret0
check_literal:lit=' "' idx=5 '1+2
'
    dropping space
check_literal:After drop space:'"' idx=5 '1+2
'
  '"' != '1'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '1+2
'
check_integer:ret1
check_number: ret1
scan_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '1+2
'
check_integer:ret1
scan_integer:
scan_integer:ret1
   Frst:0 T:'1' exptype:i
(operator_precedence) 
= is operator
modify_expression_type:Inittype:i Intype:i Outtype:i
(  output_integer) [i,()] i i 1
scan_integer:ret1  1
check_eitem: '+2
'
check_operator: +2

check_literal:lit=',' idx=6 '+2
'
check_literal:After drop space:',' idx=6 '+2
'
  ',' != '+'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
scan_eitem:
check_operator: +2

check_literal:lit=',' idx=6 '+2
'
check_literal:After drop space:',' idx=6 '+2
'
  ',' != '+'
check_literal: ret0
check_operator: ret1
scan_operator: '+2
'
check_literal:lit=',' idx=6 '+2
'
check_literal:After drop space:',' idx=6 '+2
'
  ',' != '+'
check_literal: ret0
scan_operator: ret1 '2
'
   Frst:0 T:'+' exptype:i
(operator_precedence) 
+ is operator
(operator_precedence) 
= is operator
'+' is operator
(process_token) 
Token is operator o1 name:+ o2 name:=
(process_token) 
opr1:3 opr2:1
(operator_precedence) 
= is operator
(operator_precedence) 
= is operator
Push 1
 Push:'+'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (2)

(op_stack_print) 
000: = type:0
(op_stack_print) 
001: + type:0
(op_stack_print) 
------------------

check_eitem: '2
'
check_operator: 2

check_literal:lit=',' idx=7 '2
'
check_literal:After drop space:',' idx=7 '2
'
  ',' != '2'
check_literal: ret0
check_operator:ret0
check_function: '2
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=7 '2
'
    dropping space
check_literal:After drop space:'%' idx=7 '2
'
  '%' != '2'
check_literal: ret0
check_literal:lit=' "' idx=7 '2
'
    dropping space
check_literal:After drop space:'"' idx=7 '2
'
  '"' != '2'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '2
'
check_integer:ret1
check_number: ret1
check_eitem:ret1
scan_eitem:
check_operator: 2

check_literal:lit=',' idx=7 '2
'
check_literal:After drop space:',' idx=7 '2
'
  ',' != '2'
check_literal: ret0
check_operator:ret0
check_function: '2
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=7 '2
'
    dropping space
check_literal:After drop space:'%' idx=7 '2
'
  '%' != '2'
check_literal: ret0
check_literal:lit=' "' idx=7 '2
'
    dropping space
check_literal:After drop space:'"' idx=7 '2
'
  '"' != '2'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '2
'
check_integer:ret1
check_number: ret1
scan_atom:
check_literal:lit=' %' idx=7 '2
'
    dropping space
check_literal:After drop space:'%' idx=7 '2
'
  '%' != '2'
check_literal: ret0
check_literal:lit=' "' idx=7 '2
'
    dropping space
check_literal:After drop space:'"' idx=7 '2
'
  '"' != '2'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '2
'
check_integer:ret1
check_number: ret1
scan_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '2
'
check_integer:ret1
scan_integer:
scan_integer:ret1
   Frst:0 T:'2' exptype:i
(operator_precedence) 
+ is operator
modify_expression_type:Inittype:i Intype:i Outtype:i
(  output_integer) [i,()] i i 2
scan_integer:ret1  2
check_eitem: '
'
check_operator: 

check_literal:lit=',' idx=9 ''
check_literal:After drop space:',' idx=9 ''
check_literal  ret0 Empty test string
check_operator:ret0
check_function: ''
check_function: ret0
check_atom:
check_literal:lit=' %' idx=8 '
'
    dropping space
check_literal:After drop space:'%' idx=9 ''
check_literal  ret0 Empty test string
check_literal:lit=' "' idx=8 '
'
    dropping space
check_literal:After drop space:'"' idx=9 ''
check_literal  ret0 Empty test string
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: ''
check_integer:ret0
check_number: ret0
check_variable:
check_vname '':
check_vname ret0 '':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=8 '
'
    dropping space
check_literal:After drop space:'(' idx=9 ''
check_literal  ret0 Empty test string
check_sub_expr: ret0
check_eitem:ret0
scan_expression: ret1 '
'
scan_assignment: ret1
Finalise stack
Pop '+'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: = type:0
(op_stack_print) 
------------------

( output_operator) [i,()] i i +
token_is_function:
token_is_function:+ is not function
Pop '='
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_operator) [i,()] i i =
token_is_function:
token_is_function:= is not function
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i A%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i +  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i =  0:
=================
 BE:A%
type_check_stack_push: 'A%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'A%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'A%' type:i (0)
 BE:1
type_check_stack_push: '1'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'A%' type:0
(type_check_stack_print) 
001: '1' type:0
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'A%' type:i (0)
001: '1' type:i (0)
 BE:2
type_check_stack_push: '2'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (3)

(type_check_stack_print) 
000: 'A%' type:0
(type_check_stack_print) 
001: '1' type:0
(type_check_stack_print) 
002: '2' type:0
(type_check_stack_print) 
------------------


Type Check Stack (3)

000: 'A%' type:i (0)
001: '1' type:i (0)
002: '2' type:i (0)
 BE:+
BUFF_ID_OPERATOR
Found operator +
type_check_stack_pop: '2'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'A%' type:0
(type_check_stack_print) 
001: '1' type:0
(type_check_stack_print) 
------------------

type_check_stack_pop: '1'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'A%' type:0
(type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'A%' type:0
(type_check_stack_print) 
001: '000' type:0
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'A%' type:i (0)
001: '000' type:i (0)
 BE::=
BUFF_ID_OPERATOR
Found operator :=
type_check_stack_pop: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'A%' type:0
(type_check_stack_print) 
------------------

type_check_stack_pop: 'A%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (0)

(type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i A%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i +  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i :=  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i A%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i 1  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_OPERATOR     i rq:i +  2: 3 2
(dump_exp_buffer2) N5 EXP_BUFF_ID_OPERATOR     i rq:i :=  2: 4 1
=================
(process_expression_types) 
==INFIX==

infix_stack_push: 'A%'
infix_stack_push: '1'
infix_stack_push: '2'
infix_stack_pop: '2'
infix_stack_pop: '1'
infix_stack_push: '(1 + 2)'
infix_stack_pop: '(1 + 2)'
infix_stack_pop: 'A%'
infix_stack_push: '(A% := (1 + 2))'
infix_stack_pop: '(A% := (1 + 2))'
(process_expression_types) ==(A% := (1 + 2))==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i A%  0:
(    output_qcode) N2 EXP_BUFF_ID_INTEGER      i rq:i 1  0:
(    output_qcode) N3 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
(    output_qcode) N4 EXP_BUFF_ID_OPERATOR     i rq:i +  2: 3 2
(    output_qcode) N5 EXP_BUFF_ID_OPERATOR     i rq:i :=  2: 4 1
check_literal:lit=':' idx=9 ''
check_literal:After drop space:':' idx=9 ''
check_literal  ret0 Empty test string
(translate_file) 
cline scanned OK
(translate_file) 
=======================cline==========================
(translate_file) 
==A% = B%
==
scan_cline:
check_line:
check_assignment:
check_variable:
check_vname 'A% = B%
':
check_vname ret1 '% = B%
':
check_variable: '% = B%
'
check_variable: Ary test ' = B%
'
check_literal:lit='(' idx=2 ' = B%
'
check_literal:After drop space:'(' idx=2 ' = B%
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
check_literal:lit=' =' idx=2 ' = B%
'
    dropping space
check_literal:After drop space:'=' idx=3 '= B%
'
check_literal:After while(): B%

check_literal:ret1 
check_expression: 'B%
'
check_eitem: 'B%
'
check_operator: B%

check_literal:lit=',' idx=5 'B%
'
check_literal:After drop space:',' idx=5 'B%
'
  ',' != 'B'
check_literal: ret0
check_operator:ret0
check_function: 'B%
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=5 'B%
'
    dropping space
check_literal:After drop space:'%' idx=5 'B%
'
  '%' != 'B'
check_literal: ret0
check_literal:lit=' "' idx=5 'B%
'
    dropping space
check_literal:After drop space:'"' idx=5 'B%
'
  '"' != 'B'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'B%
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'B%
':
check_vname ret1 '%
':
check_variable: '%
'
check_variable: Ary test '
'
check_literal:lit='(' idx=7 '
'
check_literal:After drop space:'(' idx=7 '
'
  '(' != '
'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
check_eitem:ret1
check_eitem: '
'
check_operator: 

check_literal:lit=',' idx=8 ''
check_literal:After drop space:',' idx=8 ''
check_literal  ret0 Empty test string
check_operator:ret0
check_function: ''
check_function: ret0
check_atom:
check_literal:lit=' %' idx=7 '
'
    dropping space
check_literal:After drop space:'%' idx=8 ''
check_literal  ret0 Empty test string
check_literal:lit=' "' idx=7 '
'
    dropping space
check_literal:After drop space:'"' idx=8 ''
check_literal  ret0 Empty test string
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: ''
check_integer:ret0
check_number: ret0
check_variable:
check_vname '':
check_vname ret0 '':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=7 '
'
    dropping space
check_literal:After drop space:'(' idx=8 ''
check_literal  ret0 Empty test string
check_sub_expr: ret0
check_eitem:ret0
check_expression:ret1 '
'
check_assignment:ret1
check_line:ret1
scan_cline: Checked len=1, '
'
========================================================
A% = B%

========================================================
(output_expression_start)
scan_line:
check_assignment:
check_variable:
check_vname 'A% = B%
':
check_vname ret1 '% = B%
':
check_variable: '% = B%
'
check_variable: Ary test ' = B%
'
check_literal:lit='(' idx=2 ' = B%
'
check_literal:After drop space:'(' idx=2 ' = B%
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
check_literal:lit=' =' idx=2 ' = B%
'
    dropping space
check_literal:After drop space:'=' idx=3 '= B%
'
check_literal:After while(): B%

check_literal:ret1 
check_expression: 'B%
'
check_eitem: 'B%
'
check_operator: B%

check_literal:lit=',' idx=5 'B%
'
check_literal:After drop space:',' idx=5 'B%
'
  ',' != 'B'
check_literal: ret0
check_operator:ret0
check_function: 'B%
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=5 'B%
'
    dropping space
check_literal:After drop space:'%' idx=5 'B%
'
  '%' != 'B'
check_literal: ret0
check_literal:lit=' "' idx=5 'B%
'
    dropping space
check_literal:After drop space:'"' idx=5 'B%
'
  '"' != 'B'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'B%
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'B%
':
check_vname ret1 '%
':
check_variable: '%
'
check_variable: Ary test '
'
check_literal:lit='(' idx=7 '
'
check_literal:After drop space:'(' idx=7 '
'
  '(' != '
'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
check_eitem:ret1
check_eitem: '
'
check_operator: 

check_literal:lit=',' idx=8 ''
check_literal:After drop space:',' idx=8 ''
check_literal  ret0 Empty test string
check_operator:ret0
check_function: ''
check_function: ret0
check_atom:
check_literal:lit=' %' idx=7 '
'
    dropping space
check_literal:After drop space:'%' idx=8 ''
check_literal  ret0 Empty test string
check_literal:lit=' "' idx=7 '
'
    dropping space
check_literal:After drop space:'"' idx=8 ''
check_literal  ret0 Empty test string
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: ''
check_integer:ret0
check_number: ret0
check_variable:
check_vname '':
check_vname ret0 '':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=7 '
'
    dropping space
check_literal:After drop space:'(' idx=8 ''
check_literal  ret0 Empty test string
check_sub_expr: ret0
check_eitem:ret0
check_expression:ret1 '
'
check_assignment:ret1
scan_assignment:
scan_variable:
scan_vname: 'A% = B%
'
scan_vname: ret1 'A'
scan_variable: '% = B%
' vname='A'
scan_variable: Ary test ' = B%
'
check_literal:lit='(' idx=2 ' = B%
'
check_literal:After drop space:'(' idx=2 ' = B%
'
  '(' != ' '
check_literal: ret0
scan_variable:ret1 vname='A%' is str:0 int:1 flt:0 ary:0
   Frst:1 T:'A%' exptype:U
token_is_function:
token_is_function:A% is not function
token_is_variable: tok:'A%'
token_is_function:
token_is_function:A% is not function
(init_get_name) 
init_get_name:'A%'
(init_get_name) 
init_get_name:'A%'
(get_name) 
get_name:gn:'A%'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] i i A%
VAR INFO: '                A%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
scan_literal:lit=' =' ' = B%
'
scan_literal:After drop space:= B%

scan_literal:while loop:= B%

   Frst:0 T:'=' exptype:i
(operator_precedence) 
= is operator
'=' is operator
(process_token) 
Token is operator o1 name:= o2 name:
(process_token) 
opr1:1 opr2:0
Push 1
 Push:'='
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: = type:0
(op_stack_print) 
------------------

scan_expression: ' B%
'
check_eitem: 'B%
'
check_operator: B%

check_literal:lit=',' idx=5 'B%
'
check_literal:After drop space:',' idx=5 'B%
'
  ',' != 'B'
check_literal: ret0
check_operator:ret0
check_function: 'B%
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=5 'B%
'
    dropping space
check_literal:After drop space:'%' idx=5 'B%
'
  '%' != 'B'
check_literal: ret0
check_literal:lit=' "' idx=5 'B%
'
    dropping space
check_literal:After drop space:'"' idx=5 'B%
'
  '"' != 'B'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'B%
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'B%
':
check_vname ret1 '%
':
check_variable: '%
'
check_variable: Ary test '
'
check_literal:lit='(' idx=7 '
'
check_literal:After drop space:'(' idx=7 '
'
  '(' != '
'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
check_eitem:ret1
scan_eitem:
check_operator: B%

check_literal:lit=',' idx=5 'B%
'
check_literal:After drop space:',' idx=5 'B%
'
  ',' != 'B'
check_literal: ret0
check_operator:ret0
check_function: 'B%
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=5 'B%
'
    dropping space
check_literal:After drop space:'%' idx=5 'B%
'
  '%' != 'B'
check_literal: ret0
check_literal:lit=' "' idx=5 'B%
'
    dropping space
check_literal:After drop space:'"' idx=5 'B%
'
  '"' != 'B'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'B%
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'B%
':
check_vname ret1 '%
':
check_variable: '%
'
check_variable: Ary test '
'
check_literal:lit='(' idx=7 '
'
check_literal:After drop space:'(' idx=7 '
'
  '(' != '
'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
scan_atom:
check_literal:lit=' %' idx=5 'B%
'
    dropping space
check_literal:After drop space:'%' idx=5 'B%
'
  '%' != 'B'
check_literal: ret0
check_literal:lit=' "' idx=5 'B%
'
    dropping space
check_literal:After drop space:'"' idx=5 'B%
'
  '"' != 'B'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'B%
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'B%
':
check_vname ret1 '%
':
check_variable: '%
'
check_variable: Ary test '
'
check_literal:lit='(' idx=7 '
'
check_literal:After drop space:'(' idx=7 '
'
  '(' != '
'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
scan_variable:
scan_vname: 'B%
'
scan_vname: ret1 'B'
scan_variable: '%
' vname='B'
scan_variable: Ary test '
'
check_literal:lit='(' idx=7 '
'
check_literal:After drop space:'(' idx=7 '
'
  '(' != '
'
check_literal: ret0
scan_variable:ret1 vname='B%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'B%' exptype:i
(operator_precedence) 
= is operator
token_is_function:
token_is_function:B% is not function
token_is_variable: tok:'B%'
token_is_function:
token_is_function:B% is not function
(init_get_name) 
init_get_name:'B%'
(init_get_name) 
init_get_name:'B%'
(get_name) 
get_name:gn:'B%'
process_token:type:i req_type:i
modify_expression_type:Inittype:i Intype:i Outtype:i
( output_variable) [i,()] i i B%
VAR INFO: '                B%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
check_eitem: '
'
check_operator: 

check_literal:lit=',' idx=8 ''
check_literal:After drop space:',' idx=8 ''
check_literal  ret0 Empty test string
check_operator:ret0
check_function: ''
check_function: ret0
check_atom:
check_literal:lit=' %' idx=7 '
'
    dropping space
check_literal:After drop space:'%' idx=8 ''
check_literal  ret0 Empty test string
check_literal:lit=' "' idx=7 '
'
    dropping space
check_literal:After drop space:'"' idx=8 ''
check_literal  ret0 Empty test string
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: ''
check_integer:ret0
check_number: ret0
check_variable:
check_vname '':
check_vname ret0 '':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=7 '
'
    dropping space
check_literal:After drop space:'(' idx=8 ''
check_literal  ret0 Empty test string
check_sub_expr: ret0
check_eitem:ret0
scan_expression: ret1 '
'
scan_assignment: ret1
Finalise stack
Pop '='
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_operator) [i,()] i i =
token_is_function:
token_is_function:= is not function
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i A%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i B%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i =  0:
=================
 BE:A%
type_check_stack_push: 'A%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'A%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'A%' type:i (0)
 BE:B%
type_check_stack_push: 'B%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'A%' type:0
(type_check_stack_print) 
001: 'B%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'A%' type:i (0)
001: 'B%' type:i (0)
 BE::=
BUFF_ID_OPERATOR
Found operator :=
type_check_stack_pop: 'B%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'A%' type:0
(type_check_stack_print) 
------------------

type_check_stack_pop: 'A%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (0)

(type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i A%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i B%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i :=  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i A%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i B%  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_OPERATOR     i rq:i :=  2: 2 1
=================
(process_expression_types) 
==INFIX==

infix_stack_push: 'A%'
infix_stack_push: 'B%'
infix_stack_pop: 'B%'
infix_stack_pop: 'A%'
infix_stack_push: '(A% := B%)'
infix_stack_pop: '(A% := B%)'
(process_expression_types) ==(A% := B%)==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i A%  0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     i rq:i B%  0:
(    output_qcode) N3 EXP_BUFF_ID_OPERATOR     i rq:i :=  2: 2 1
check_literal:lit=':' idx=8 ''
check_literal:After drop space:':' idx=8 ''
check_literal  ret0 Empty test string
(translate_file) 
cline scanned OK
(translate_file) 
=======================cline==========================
(translate_file) 
==A% = A% + B%
==
scan_cline:
check_line:
check_assignment:
check_variable:
check_vname 'A% = A% + B%
':
check_vname ret1 '% = A% + B%
':
check_variable: '% = A% + B%
'
check_variable: Ary test ' = A% + B%
'
check_literal:lit='(' idx=2 ' = A% + B%
'
check_literal:After drop space:'(' idx=2 ' = A% + B%
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
check_literal:lit=' =' idx=2 ' = A% + B%
'
    dropping space
check_literal:After drop space:'=' idx=3 '= A% + B%
'
check_literal:After while(): A% + B%

check_literal:ret1 
check_expression: 'A% + B%
'
check_eitem: 'A% + B%
'
check_operator: A% + B%

check_literal:lit=',' idx=5 'A% + B%
'
check_literal:After drop space:',' idx=5 'A% + B%
'
  ',' != 'A'
check_literal: ret0
check_operator:ret0
check_function: 'A% + B%
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=5 'A% + B%
'
    dropping space
check_literal:After drop space:'%' idx=5 'A% + B%
'
  '%' != 'A'
check_literal: ret0
check_literal:lit=' "' idx=5 'A% + B%
'
    dropping space
check_literal:After drop space:'"' idx=5 'A% + B%
'
  '"' != 'A'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'A% + B%
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'A% + B%
':
check_vname ret1 '% + B%
':
check_variable: '% + B%
'
check_variable: Ary test ' + B%
'
check_literal:lit='(' idx=7 ' + B%
'
check_literal:After drop space:'(' idx=7 ' + B%
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
check_eitem:ret1
check_eitem: ' + B%
'
check_operator:  + B%

check_literal:lit=',' idx=8 '+ B%
'
check_literal:After drop space:',' idx=8 '+ B%
'
  ',' != '+'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
check_eitem: ' B%
'
check_operator:  B%

check_literal:lit=',' idx=10 'B%
'
check_literal:After drop space:',' idx=10 'B%
'
  ',' != 'B'
check_literal: ret0
check_operator:ret0
check_function: 'B%
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=9 ' B%
'
    dropping space
check_literal:After drop space:'%' idx=10 'B%
'
  '%' != 'B'
check_literal: ret0
check_literal:lit=' "' idx=9 ' B%
'
    dropping space
check_literal:After drop space:'"' idx=10 'B%
'
  '"' != 'B'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'B%
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'B%
':
check_vname ret1 '%
':
check_variable: '%
'
check_variable: Ary test '
'
check_literal:lit='(' idx=12 '
'
check_literal:After drop space:'(' idx=12 '
'
  '(' != '
'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
check_eitem:ret1
check_eitem: '
'
check_operator: 

check_literal:lit=',' idx=13 ''
check_literal:After drop space:',' idx=13 ''
check_literal  ret0 Empty test string
check_operator:ret0
check_function: ''
check_function: ret0
check_atom:
check_literal:lit=' %' idx=12 '
'
    dropping space
check_literal:After drop space:'%' idx=13 ''
check_literal  ret0 Empty test string
check_literal:lit=' "' idx=12 '
'
    dropping space
check_literal:After drop space:'"' idx=13 ''
check_literal  ret0 Empty test string
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: ''
check_integer:ret0
check_number: ret0
check_variable:
check_vname '':
check_vname ret0 '':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=12 '
'
    dropping space
check_literal:After drop space:'(' idx=13 ''
check_literal  ret0 Empty test string
check_sub_expr: ret0
check_eitem:ret0
check_expression:ret1 '
'
check_assignment:ret1
check_line:ret1
scan_cline: Checked len=1, '
'
========================================================
A% = A% + B%

========================================================
(output_expression_start)
scan_line:
check_assignment:
check_variable:
check_vname 'A% = A% + B%
':
check_vname ret1 '% = A% + B%
':
check_variable: '% = A% + B%
'
check_variable: Ary test ' = A% + B%
'
check_literal:lit='(' idx=2 ' = A% + B%
'
check_literal:After drop space:'(' idx=2 ' = A% + B%
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
check_literal:lit=' =' idx=2 ' = A% + B%
'
    dropping space
check_literal:After drop space:'=' idx=3 '= A% + B%
'
check_literal:After while(): A% + B%

check_literal:ret1 
check_expression: 'A% + B%
'
check_eitem: 'A% + B%
'
check_operator: A% + B%

check_literal:lit=',' idx=5 'A% + B%
'
check_literal:After drop space:',' idx=5 'A% + B%
'
  ',' != 'A'
check_literal: ret0
check_operator:ret0
check_function: 'A% + B%
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=5 'A% + B%
'
    dropping space
check_literal:After drop space:'%' idx=5 'A% + B%
'
  '%' != 'A'
check_literal: ret0
check_literal:lit=' "' idx=5 'A% + B%
'
    dropping space
check_literal:After drop space:'"' idx=5 'A% + B%
'
  '"' != 'A'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'A% + B%
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'A% + B%
':
check_vname ret1 '% + B%
':
check_variable: '% + B%
'
check_variable: Ary test ' + B%
'
check_literal:lit='(' idx=7 ' + B%
'
check_literal:After drop space:'(' idx=7 ' + B%
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
check_eitem:ret1
check_eitem: ' + B%
'
check_operator:  + B%

check_literal:lit=',' idx=8 '+ B%
'
check_literal:After drop space:',' idx=8 '+ B%
'
  ',' != '+'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
check_eitem: ' B%
'
check_operator:  B%

check_literal:lit=',' idx=10 'B%
'
check_literal:After drop space:',' idx=10 'B%
'
  ',' != 'B'
check_literal: ret0
check_operator:ret0
check_function: 'B%
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=9 ' B%
'
    dropping space
check_literal:After drop space:'%' idx=10 'B%
'
  '%' != 'B'
check_literal: ret0
check_literal:lit=' "' idx=9 ' B%
'
    dropping space
check_literal:After drop space:'"' idx=10 'B%
'
  '"' != 'B'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'B%
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'B%
':
check_vname ret1 '%
':
check_variable: '%
'
check_variable: Ary test '
'
check_literal:lit='(' idx=12 '
'
check_literal:After drop space:'(' idx=12 '
'
  '(' != '
'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
check_eitem:ret1
check_eitem: '
'
check_operator: 

check_literal:lit=',' idx=13 ''
check_literal:After drop space:',' idx=13 ''
check_literal  ret0 Empty test string
check_operator:ret0
check_function: ''
check_function: ret0
check_atom:
check_literal:lit=' %' idx=12 '
'
    dropping space
check_literal:After drop space:'%' idx=13 ''
check_literal  ret0 Empty test string
check_literal:lit=' "' idx=12 '
'
    dropping space
check_literal:After drop space:'"' idx=13 ''
check_literal  ret0 Empty test string
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: ''
check_integer:ret0
check_number: ret0
check_variable:
check_vname '':
check_vname ret0 '':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=12 '
'
    dropping space
check_literal:After drop space:'(' idx=13 ''
check_literal  ret0 Empty test string
check_sub_expr: ret0
check_eitem:ret0
check_expression:ret1 '
'
check_assignment:ret1
scan_assignment:
scan_variable:
scan_vname: 'A% = A% + B%
'
scan_vname: ret1 'A'
scan_variable: '% = A% + B%
' vname='A'
scan_variable: Ary test ' = A% + B%
'
check_literal:lit='(' idx=2 ' = A% + B%
'
check_literal:After drop space:'(' idx=2 ' = A% + B%
'
  '(' != ' '
check_literal: ret0
scan_variable:ret1 vname='A%' is str:0 int:1 flt:0 ary:0
   Frst:1 T:'A%' exptype:U
token_is_function:
token_is_function:A% is not function
token_is_variable: tok:'A%'
token_is_function:
token_is_function:A% is not function
(init_get_name) 
init_get_name:'A%'
(init_get_name) 
init_get_name:'A%'
(get_name) 
get_name:gn:'A%'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] i i A%
VAR INFO: '                A%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
scan_literal:lit=' =' ' = A% + B%
'
scan_literal:After drop space:= A% + B%

scan_literal:while loop:= A% + B%

   Frst:0 T:'=' exptype:i
(operator_precedence) 
= is operator
'=' is operator
(process_token) 
Token is operator o1 name:= o2 name:
(process_token) 
opr1:1 opr2:0
Push 1
 Push:'='
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: = type:0
(op_stack_print) 
------------------

scan_expression: ' A% + B%
'
check_eitem: 'A% + B%
'
check_operator: A% + B%

check_literal:lit=',' idx=5 'A% + B%
'
check_literal:After drop space:',' idx=5 'A% + B%
'
  ',' != 'A'
check_literal: ret0
check_operator:ret0
check_function: 'A% + B%
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=5 'A% + B%
'
    dropping space
check_literal:After drop space:'%' idx=5 'A% + B%
'
  '%' != 'A'
check_literal: ret0
check_literal:lit=' "' idx=5 'A% + B%
'
    dropping space
check_literal:After drop space:'"' idx=5 'A% + B%
'
  '"' != 'A'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'A% + B%
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'A% + B%
':
check_vname ret1 '% + B%
':
check_variable: '% + B%
'
check_variable: Ary test ' + B%
'
check_literal:lit='(' idx=7 ' + B%
'
check_literal:After drop space:'(' idx=7 ' + B%
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
check_eitem:ret1
scan_eitem:
check_operator: A% + B%

check_literal:lit=',' idx=5 'A% + B%
'
check_literal:After drop space:',' idx=5 'A% + B%
'
  ',' != 'A'
check_literal: ret0
check_operator:ret0
check_function: 'A% + B%
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=5 'A% + B%
'
    dropping space
check_literal:After drop space:'%' idx=5 'A% + B%
'
  '%' != 'A'
check_literal: ret0
check_literal:lit=' "' idx=5 'A% + B%
'
    dropping space
check_literal:After drop space:'"' idx=5 'A% + B%
'
  '"' != 'A'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'A% + B%
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'A% + B%
':
check_vname ret1 '% + B%
':
check_variable: '% + B%
'
check_variable: Ary test ' + B%
'
check_literal:lit='(' idx=7 ' + B%
'
check_literal:After drop space:'(' idx=7 ' + B%
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
scan_atom:
check_literal:lit=' %' idx=5 'A% + B%
'
    dropping space
check_literal:After drop space:'%' idx=5 'A% + B%
'
  '%' != 'A'
check_literal: ret0
check_literal:lit=' "' idx=5 'A% + B%
'
    dropping space
check_literal:After drop space:'"' idx=5 'A% + B%
'
  '"' != 'A'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'A% + B%
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'A% + B%
':
check_vname ret1 '% + B%
':
check_variable: '% + B%
'
check_variable: Ary test ' + B%
'
check_literal:lit='(' idx=7 ' + B%
'
check_literal:After drop space:'(' idx=7 ' + B%
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
scan_variable:
scan_vname: 'A% + B%
'
scan_vname: ret1 'A'
scan_variable: '% + B%
' vname='A'
scan_variable: Ary test ' + B%
'
check_literal:lit='(' idx=7 ' + B%
'
check_literal:After drop space:'(' idx=7 ' + B%
'
  '(' != ' '
check_literal: ret0
scan_variable:ret1 vname='A%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'A%' exptype:i
(operator_precedence) 
= is operator
token_is_function:
token_is_function:A% is not function
token_is_variable: tok:'A%'
token_is_function:
token_is_function:A% is not function
(init_get_name) 
init_get_name:'A%'
(init_get_name) 
init_get_name:'A%'
(get_name) 
get_name:gn:'A%'
process_token:type:i req_type:i
modify_expression_type:Inittype:i Intype:i Outtype:i
( output_variable) [i,()] i i A%
VAR INFO: '                A%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
check_eitem: ' + B%
'
check_operator:  + B%

check_literal:lit=',' idx=8 '+ B%
'
check_literal:After drop space:',' idx=8 '+ B%
'
  ',' != '+'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
scan_eitem:
check_operator:  + B%

check_literal:lit=',' idx=8 '+ B%
'
check_literal:After drop space:',' idx=8 '+ B%
'
  ',' != '+'
check_literal: ret0
check_operator: ret1
scan_operator: ' + B%
'
check_literal:lit=',' idx=8 '+ B%
'
check_literal:After drop space:',' idx=8 '+ B%
'
  ',' != '+'
check_literal: ret0
scan_operator: ret1 ' B%
'
   Frst:0 T:'+' exptype:i
(operator_precedence) 
+ is operator
(operator_precedence) 
= is operator
'+' is operator
(process_token) 
Token is operator o1 name:+ o2 name:=
(process_token) 
opr1:3 opr2:1
(operator_precedence) 
= is operator
(operator_precedence) 
= is operator
Push 1
 Push:'+'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (2)

(op_stack_print) 
000: = type:0
(op_stack_print) 
001: + type:0
(op_stack_print) 
------------------

check_eitem: ' B%
'
check_operator:  B%

check_literal:lit=',' idx=10 'B%
'
check_literal:After drop space:',' idx=10 'B%
'
  ',' != 'B'
check_literal: ret0
check_operator:ret0
check_function: 'B%
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=9 ' B%
'
    dropping space
check_literal:After drop space:'%' idx=10 'B%
'
  '%' != 'B'
check_literal: ret0
check_literal:lit=' "' idx=9 ' B%
'
    dropping space
check_literal:After drop space:'"' idx=10 'B%
'
  '"' != 'B'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'B%
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'B%
':
check_vname ret1 '%
':
check_variable: '%
'
check_variable: Ary test '
'
check_literal:lit='(' idx=12 '
'
check_literal:After drop space:'(' idx=12 '
'
  '(' != '
'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
check_eitem:ret1
scan_eitem:
check_operator:  B%

check_literal:lit=',' idx=10 'B%
'
check_literal:After drop space:',' idx=10 'B%
'
  ',' != 'B'
check_literal: ret0
check_operator:ret0
check_function: 'B%
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=9 ' B%
'
    dropping space
check_literal:After drop space:'%' idx=10 'B%
'
  '%' != 'B'
check_literal: ret0
check_literal:lit=' "' idx=9 ' B%
'
    dropping space
check_literal:After drop space:'"' idx=10 'B%
'
  '"' != 'B'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'B%
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'B%
':
check_vname ret1 '%
':
check_variable: '%
'
check_variable: Ary test '
'
check_literal:lit='(' idx=12 '
'
check_literal:After drop space:'(' idx=12 '
'
  '(' != '
'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
scan_atom:
check_literal:lit=' %' idx=9 ' B%
'
    dropping space
check_literal:After drop space:'%' idx=10 'B%
'
  '%' != 'B'
check_literal: ret0
check_literal:lit=' "' idx=9 ' B%
'
    dropping space
check_literal:After drop space:'"' idx=10 'B%
'
  '"' != 'B'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'B%
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'B%
':
check_vname ret1 '%
':
check_variable: '%
'
check_variable: Ary test '
'
check_literal:lit='(' idx=12 '
'
check_literal:After drop space:'(' idx=12 '
'
  '(' != '
'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
scan_variable:
scan_vname: ' B%
'
scan_vname: ret1 'B'
scan_variable: '%
' vname='B'
scan_variable: Ary test '
'
check_literal:lit='(' idx=12 '
'
check_literal:After drop space:'(' idx=12 '
'
  '(' != '
'
check_literal: ret0
scan_variable:ret1 vname='B%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'B%' exptype:i
(operator_precedence) 
+ is operator
token_is_function:
token_is_function:B% is not function
token_is_variable: tok:'B%'
token_is_function:
token_is_function:B% is not function
(init_get_name) 
init_get_name:'B%'
(init_get_name) 
init_get_name:'B%'
(get_name) 
get_name:gn:'B%'
process_token:type:i req_type:i
modify_expression_type:Inittype:i Intype:i Outtype:i
( output_variable) [i,()] i i B%
VAR INFO: '                B%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
check_eitem: '
'
check_operator: 

check_literal:lit=',' idx=13 ''
check_literal:After drop space:',' idx=13 ''
check_literal  ret0 Empty test string
check_operator:ret0
check_function: ''
check_function: ret0
check_atom:
check_literal:lit=' %' idx=12 '
'
    dropping space
check_literal:After drop space:'%' idx=13 ''
check_literal  ret0 Empty test string
check_literal:lit=' "' idx=12 '
'
    dropping space
check_literal:After drop space:'"' idx=13 ''
check_literal  ret0 Empty test string
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: ''
check_integer:ret0
check_number: ret0
check_variable:
check_vname '':
check_vname ret0 '':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=12 '
'
    dropping space
check_literal:After drop space:'(' idx=13 ''
check_literal  ret0 Empty test string
check_sub_expr: ret0
check_eitem:ret0
scan_expression: ret1 '
'
scan_assignment: ret1
Finalise stack
Pop '+'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: = type:0
(op_stack_print) 
------------------

( output_operator) [i,()] i i +
token_is_function:
token_is_function:+ is not function
Pop '='
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_operator) [i,()] i i =
token_is_function:
token_is_function:= is not function
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i A%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i A%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i B%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i +  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i =  0:
=================
 BE:A%
type_check_stack_push: 'A%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'A%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'A%' type:i (0)
 BE:A%
type_check_stack_push: 'A%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'A%' type:0
(type_check_stack_print) 
001: 'A%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'A%' type:i (0)
001: 'A%' type:i (0)
 BE:B%
type_check_stack_push: 'B%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (3)

(type_check_stack_print) 
000: 'A%' type:0
(type_check_stack_print) 
001: 'A%' type:0
(type_check_stack_print) 
002: 'B%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (3)

000: 'A%' type:i (0)
001: 'A%' type:i (0)
002: 'B%' type:i (0)
 BE:+
BUFF_ID_OPERATOR
Found operator +
type_check_stack_pop: 'B%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'A%' type:0
(type_check_stack_print) 
001: 'A%' type:0
(type_check_stack_print) 
------------------

type_check_stack_pop: 'A%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'A%' type:0
(type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'A%' type:0
(type_check_stack_print) 
001: '000' type:0
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'A%' type:i (0)
001: '000' type:i (0)
 BE::=
BUFF_ID_OPERATOR
Found operator :=
type_check_stack_pop: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'A%' type:0
(type_check_stack_print) 
------------------

type_check_stack_pop: 'A%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (0)

(type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i A%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i A%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i B%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i +  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i :=  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i A%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i A%  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     i rq:i B%  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_OPERATOR     i rq:i +  2: 3 2
(dump_exp_buffer2) N5 EXP_BUFF_ID_OPERATOR     i rq:i :=  2: 4 1
=================
(process_expression_types) 
==INFIX==

infix_stack_push: 'A%'
infix_stack_push: 'A%'
infix_stack_push: 'B%'
infix_stack_pop: 'B%'
infix_stack_pop: 'A%'
infix_stack_push: '(A% + B%)'
infix_stack_pop: '(A% + B%)'
infix_stack_pop: 'A%'
infix_stack_push: '(A% := (A% + B%))'
infix_stack_pop: '(A% := (A% + B%))'
(process_expression_types) ==(A% := (A% + B%))==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i A%  0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     i rq:i A%  0:
(    output_qcode) N3 EXP_BUFF_ID_VARIABLE     i rq:i B%  0:
(    output_qcode) N4 EXP_BUFF_ID_OPERATOR     i rq:i +  2: 3 2
(    output_qcode) N5 EXP_BUFF_ID_OPERATOR     i rq:i :=  2: 4 1
check_literal:lit=':' idx=13 ''
check_literal:After drop space:':' idx=13 ''
check_literal  ret0 Empty test string
(translate_file) 
cline scanned OK
(translate_file) 
=======================cline==========================
(translate_file) 
==A% = 2 + (A% * B%)
==
scan_cline:
check_line:
check_assignment:
check_variable:
check_vname 'A% = 2 + (A% * B%)
':
check_vname ret1 '% = 2 + (A% * B%)
':
check_variable: '% = 2 + (A% * B%)
'
check_variable: Ary test ' = 2 + (A% * B%)
'
check_literal:lit='(' idx=2 ' = 2 + (A% * B%)
'
check_literal:After drop space:'(' idx=2 ' = 2 + (A% * B%)
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
check_literal:lit=' =' idx=2 ' = 2 + (A% * B%)
'
    dropping space
check_literal:After drop space:'=' idx=3 '= 2 + (A% * B%)
'
check_literal:After while(): 2 + (A% * B%)

check_literal:ret1 
check_expression: '2 + (A% * B%)
'
check_eitem: '2 + (A% * B%)
'
check_operator: 2 + (A% * B%)

check_literal:lit=',' idx=5 '2 + (A% * B%)
'
check_literal:After drop space:',' idx=5 '2 + (A% * B%)
'
  ',' != '2'
check_literal: ret0
check_operator:ret0
check_function: '2 + (A% * B%)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=5 '2 + (A% * B%)
'
    dropping space
check_literal:After drop space:'%' idx=5 '2 + (A% * B%)
'
  '%' != '2'
check_literal: ret0
check_literal:lit=' "' idx=5 '2 + (A% * B%)
'
    dropping space
check_literal:After drop space:'"' idx=5 '2 + (A% * B%)
'
  '"' != '2'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '2 + (A% * B%)
'
check_integer:ret1
check_number: ret1
check_eitem:ret1
check_eitem: ' + (A% * B%)
'
check_operator:  + (A% * B%)

check_literal:lit=',' idx=7 '+ (A% * B%)
'
check_literal:After drop space:',' idx=7 '+ (A% * B%)
'
  ',' != '+'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
check_eitem: ' (A% * B%)
'
check_operator:  (A% * B%)

check_literal:lit=',' idx=9 '(A% * B%)
'
check_literal:After drop space:',' idx=9 '(A% * B%)
'
  ',' != '('
check_literal: ret0
check_operator:ret0
check_function: '(A% * B%)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=8 ' (A% * B%)
'
    dropping space
check_literal:After drop space:'%' idx=9 '(A% * B%)
'
  '%' != '('
check_literal: ret0
check_literal:lit=' "' idx=8 ' (A% * B%)
'
    dropping space
check_literal:After drop space:'"' idx=9 '(A% * B%)
'
  '"' != '('
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: '(A% * B%)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname '(A% * B%)
':
check_vname ret0 '(A% * B%)
':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=8 ' (A% * B%)
'
    dropping space
check_literal:After drop space:'(' idx=9 '(A% * B%)
'
check_literal:After while():A% * B%)

check_literal:ret1 
check_sub_expr: ret1
check_eitem:ret1
check_eitem: 'A% * B%)
'
check_operator: A% * B%)

check_literal:lit=',' idx=10 'A% * B%)
'
check_literal:After drop space:',' idx=10 'A% * B%)
'
  ',' != 'A'
check_literal: ret0
check_operator:ret0
check_function: 'A% * B%)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=10 'A% * B%)
'
    dropping space
check_literal:After drop space:'%' idx=10 'A% * B%)
'
  '%' != 'A'
check_literal: ret0
check_literal:lit=' "' idx=10 'A% * B%)
'
    dropping space
check_literal:After drop space:'"' idx=10 'A% * B%)
'
  '"' != 'A'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'A% * B%)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'A% * B%)
':
check_vname ret1 '% * B%)
':
check_variable: '% * B%)
'
check_variable: Ary test ' * B%)
'
check_literal:lit='(' idx=12 ' * B%)
'
check_literal:After drop space:'(' idx=12 ' * B%)
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
check_eitem:ret1
check_eitem: ' * B%)
'
check_operator:  * B%)

check_literal:lit=',' idx=13 '* B%)
'
check_literal:After drop space:',' idx=13 '* B%)
'
  ',' != '*'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
check_eitem: ' B%)
'
check_operator:  B%)

check_literal:lit=',' idx=15 'B%)
'
check_literal:After drop space:',' idx=15 'B%)
'
  ',' != 'B'
check_literal: ret0
check_operator:ret0
check_function: 'B%)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=14 ' B%)
'
    dropping space
check_literal:After drop space:'%' idx=15 'B%)
'
  '%' != 'B'
check_literal: ret0
check_literal:lit=' "' idx=14 ' B%)
'
    dropping space
check_literal:After drop space:'"' idx=15 'B%)
'
  '"' != 'B'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'B%)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'B%)
':
check_vname ret1 '%)
':
check_variable: '%)
'
check_variable: Ary test ')
'
check_literal:lit='(' idx=17 ')
'
check_literal:After drop space:'(' idx=17 ')
'
  '(' != ')'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
check_eitem:ret1
check_eitem: ')
'
check_operator: )

check_literal:lit=',' idx=17 ')
'
check_literal:After drop space:',' idx=17 ')
'
  ',' != ')'
check_literal: ret0
check_operator:ret0
check_function: ')
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=17 ')
'
    dropping space
check_literal:After drop space:'%' idx=17 ')
'
  '%' != ')'
check_literal: ret0
check_literal:lit=' "' idx=17 ')
'
    dropping space
check_literal:After drop space:'"' idx=17 ')
'
  '"' != ')'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: ')
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname ')
':
check_vname ret0 ')
':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=17 ')
'
    dropping space
check_literal:After drop space:'(' idx=17 ')
'
  '(' != ')'
check_literal: ret0
check_sub_expr: ret0
check_eitem:ret0
check_expression:ret1 ')
'
check_assignment:ret1
check_line:ret1
scan_cline: Checked len=2, ')
'
========================================================
A% = 2 + (A% * B%)

========================================================
(output_expression_start)
scan_line:
check_assignment:
check_variable:
check_vname 'A% = 2 + (A% * B%)
':
check_vname ret1 '% = 2 + (A% * B%)
':
check_variable: '% = 2 + (A% * B%)
'
check_variable: Ary test ' = 2 + (A% * B%)
'
check_literal:lit='(' idx=2 ' = 2 + (A% * B%)
'
check_literal:After drop space:'(' idx=2 ' = 2 + (A% * B%)
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
check_literal:lit=' =' idx=2 ' = 2 + (A% * B%)
'
    dropping space
check_literal:After drop space:'=' idx=3 '= 2 + (A% * B%)
'
check_literal:After while(): 2 + (A% * B%)

check_literal:ret1 
check_expression: '2 + (A% * B%)
'
check_eitem: '2 + (A% * B%)
'
check_operator: 2 + (A% * B%)

check_literal:lit=',' idx=5 '2 + (A% * B%)
'
check_literal:After drop space:',' idx=5 '2 + (A% * B%)
'
  ',' != '2'
check_literal: ret0
check_operator:ret0
check_function: '2 + (A% * B%)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=5 '2 + (A% * B%)
'
    dropping space
check_literal:After drop space:'%' idx=5 '2 + (A% * B%)
'
  '%' != '2'
check_literal: ret0
check_literal:lit=' "' idx=5 '2 + (A% * B%)
'
    dropping space
check_literal:After drop space:'"' idx=5 '2 + (A% * B%)
'
  '"' != '2'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '2 + (A% * B%)
'
check_integer:ret1
check_number: ret1
check_eitem:ret1
check_eitem: ' + (A% * B%)
'
check_operator:  + (A% * B%)

check_literal:lit=',' idx=7 '+ (A% * B%)
'
check_literal:After drop space:',' idx=7 '+ (A% * B%)
'
  ',' != '+'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
check_eitem: ' (A% * B%)
'
check_operator:  (A% * B%)

check_literal:lit=',' idx=9 '(A% * B%)
'
check_literal:After drop space:',' idx=9 '(A% * B%)
'
  ',' != '('
check_literal: ret0
check_operator:ret0
check_function: '(A% * B%)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=8 ' (A% * B%)
'
    dropping space
check_literal:After drop space:'%' idx=9 '(A% * B%)
'
  '%' != '('
check_literal: ret0
check_literal:lit=' "' idx=8 ' (A% * B%)
'
    dropping space
check_literal:After drop space:'"' idx=9 '(A% * B%)
'
  '"' != '('
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: '(A% * B%)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname '(A% * B%)
':
check_vname ret0 '(A% * B%)
':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=8 ' (A% * B%)
'
    dropping space
check_literal:After drop space:'(' idx=9 '(A% * B%)
'
check_literal:After while():A% * B%)

check_literal:ret1 
check_sub_expr: ret1
check_eitem:ret1
check_eitem: 'A% * B%)
'
check_operator: A% * B%)

check_literal:lit=',' idx=10 'A% * B%)
'
check_literal:After drop space:',' idx=10 'A% * B%)
'
  ',' != 'A'
check_literal: ret0
check_operator:ret0
check_function: 'A% * B%)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=10 'A% * B%)
'
    dropping space
check_literal:After drop space:'%' idx=10 'A% * B%)
'
  '%' != 'A'
check_literal: ret0
check_literal:lit=' "' idx=10 'A% * B%)
'
    dropping space
check_literal:After drop space:'"' idx=10 'A% * B%)
'
  '"' != 'A'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'A% * B%)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'A% * B%)
':
check_vname ret1 '% * B%)
':
check_variable: '% * B%)
'
check_variable: Ary test ' * B%)
'
check_literal:lit='(' idx=12 ' * B%)
'
check_literal:After drop space:'(' idx=12 ' * B%)
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
check_eitem:ret1
check_eitem: ' * B%)
'
check_operator:  * B%)

check_literal:lit=',' idx=13 '* B%)
'
check_literal:After drop space:',' idx=13 '* B%)
'
  ',' != '*'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
check_eitem: ' B%)
'
check_operator:  B%)

check_literal:lit=',' idx=15 'B%)
'
check_literal:After drop space:',' idx=15 'B%)
'
  ',' != 'B'
check_literal: ret0
check_operator:ret0
check_function: 'B%)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=14 ' B%)
'
    dropping space
check_literal:After drop space:'%' idx=15 'B%)
'
  '%' != 'B'
check_literal: ret0
check_literal:lit=' "' idx=14 ' B%)
'
    dropping space
check_literal:After drop space:'"' idx=15 'B%)
'
  '"' != 'B'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'B%)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'B%)
':
check_vname ret1 '%)
':
check_variable: '%)
'
check_variable: Ary test ')
'
check_literal:lit='(' idx=17 ')
'
check_literal:After drop space:'(' idx=17 ')
'
  '(' != ')'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
check_eitem:ret1
check_eitem: ')
'
check_operator: )

check_literal:lit=',' idx=17 ')
'
check_literal:After drop space:',' idx=17 ')
'
  ',' != ')'
check_literal: ret0
check_operator:ret0
check_function: ')
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=17 ')
'
    dropping space
check_literal:After drop space:'%' idx=17 ')
'
  '%' != ')'
check_literal: ret0
check_literal:lit=' "' idx=17 ')
'
    dropping space
check_literal:After drop space:'"' idx=17 ')
'
  '"' != ')'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: ')
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname ')
':
check_vname ret0 ')
':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=17 ')
'
    dropping space
check_literal:After drop space:'(' idx=17 ')
'
  '(' != ')'
check_literal: ret0
check_sub_expr: ret0
check_eitem:ret0
check_expression:ret1 ')
'
check_assignment:ret1
scan_assignment:
scan_variable:
scan_vname: 'A% = 2 + (A% * B%)
'
scan_vname: ret1 'A'
scan_variable: '% = 2 + (A% * B%)
' vname='A'
scan_variable: Ary test ' = 2 + (A% * B%)
'
check_literal:lit='(' idx=2 ' = 2 + (A% * B%)
'
check_literal:After drop space:'(' idx=2 ' = 2 + (A% * B%)
'
  '(' != ' '
check_literal: ret0
scan_variable:ret1 vname='A%' is str:0 int:1 flt:0 ary:0
   Frst:1 T:'A%' exptype:U
token_is_function:
token_is_function:A% is not function
token_is_variable: tok:'A%'
token_is_function:
token_is_function:A% is not function
(init_get_name) 
init_get_name:'A%'
(init_get_name) 
init_get_name:'A%'
(get_name) 
get_name:gn:'A%'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] i i A%
VAR INFO: '                A%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
scan_literal:lit=' =' ' = 2 + (A% * B%)
'
scan_literal:After drop space:= 2 + (A% * B%)

scan_literal:while loop:= 2 + (A% * B%)

   Frst:0 T:'=' exptype:i
(operator_precedence) 
= is operator
'=' is operator
(process_token) 
Token is operator o1 name:= o2 name:
(process_token) 
opr1:1 opr2:0
Push 1
 Push:'='
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: = type:0
(op_stack_print) 
------------------

scan_expression: ' 2 + (A% * B%)
'
check_eitem: '2 + (A% * B%)
'
check_operator: 2 + (A% * B%)

check_literal:lit=',' idx=5 '2 + (A% * B%)
'
check_literal:After drop space:',' idx=5 '2 + (A% * B%)
'
  ',' != '2'
check_literal: ret0
check_operator:ret0
check_function: '2 + (A% * B%)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=5 '2 + (A% * B%)
'
    dropping space
check_literal:After drop space:'%' idx=5 '2 + (A% * B%)
'
  '%' != '2'
check_literal: ret0
check_literal:lit=' "' idx=5 '2 + (A% * B%)
'
    dropping space
check_literal:After drop space:'"' idx=5 '2 + (A% * B%)
'
  '"' != '2'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '2 + (A% * B%)
'
check_integer:ret1
check_number: ret1
check_eitem:ret1
scan_eitem:
check_operator: 2 + (A% * B%)

check_literal:lit=',' idx=5 '2 + (A% * B%)
'
check_literal:After drop space:',' idx=5 '2 + (A% * B%)
'
  ',' != '2'
check_literal: ret0
check_operator:ret0
check_function: '2 + (A% * B%)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=5 '2 + (A% * B%)
'
    dropping space
check_literal:After drop space:'%' idx=5 '2 + (A% * B%)
'
  '%' != '2'
check_literal: ret0
check_literal:lit=' "' idx=5 '2 + (A% * B%)
'
    dropping space
check_literal:After drop space:'"' idx=5 '2 + (A% * B%)
'
  '"' != '2'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '2 + (A% * B%)
'
check_integer:ret1
check_number: ret1
scan_atom:
check_literal:lit=' %' idx=5 '2 + (A% * B%)
'
    dropping space
check_literal:After drop space:'%' idx=5 '2 + (A% * B%)
'
  '%' != '2'
check_literal: ret0
check_literal:lit=' "' idx=5 '2 + (A% * B%)
'
    dropping space
check_literal:After drop space:'"' idx=5 '2 + (A% * B%)
'
  '"' != '2'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '2 + (A% * B%)
'
check_integer:ret1
check_number: ret1
scan_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '2 + (A% * B%)
'
check_integer:ret1
scan_integer:
scan_integer:ret1
   Frst:0 T:'2' exptype:i
(operator_precedence) 
= is operator
modify_expression_type:Inittype:i Intype:i Outtype:i
(  output_integer) [i,()] i i 2
scan_integer:ret1  2
check_eitem: ' + (A% * B%)
'
check_operator:  + (A% * B%)

check_literal:lit=',' idx=7 '+ (A% * B%)
'
check_literal:After drop space:',' idx=7 '+ (A% * B%)
'
  ',' != '+'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
scan_eitem:
check_operator:  + (A% * B%)

check_literal:lit=',' idx=7 '+ (A% * B%)
'
check_literal:After drop space:',' idx=7 '+ (A% * B%)
'
  ',' != '+'
check_literal: ret0
check_operator: ret1
scan_operator: ' + (A% * B%)
'
check_literal:lit=',' idx=7 '+ (A% * B%)
'
check_literal:After drop space:',' idx=7 '+ (A% * B%)
'
  ',' != '+'
check_literal: ret0
scan_operator: ret1 ' (A% * B%)
'
   Frst:0 T:'+' exptype:i
(operator_precedence) 
+ is operator
(operator_precedence) 
= is operator
'+' is operator
(process_token) 
Token is operator o1 name:+ o2 name:=
(process_token) 
opr1:3 opr2:1
(operator_precedence) 
= is operator
(operator_precedence) 
= is operator
Push 1
 Push:'+'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (2)

(op_stack_print) 
000: = type:0
(op_stack_print) 
001: + type:0
(op_stack_print) 
------------------

check_eitem: ' (A% * B%)
'
check_operator:  (A% * B%)

check_literal:lit=',' idx=9 '(A% * B%)
'
check_literal:After drop space:',' idx=9 '(A% * B%)
'
  ',' != '('
check_literal: ret0
check_operator:ret0
check_function: '(A% * B%)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=8 ' (A% * B%)
'
    dropping space
check_literal:After drop space:'%' idx=9 '(A% * B%)
'
  '%' != '('
check_literal: ret0
check_literal:lit=' "' idx=8 ' (A% * B%)
'
    dropping space
check_literal:After drop space:'"' idx=9 '(A% * B%)
'
  '"' != '('
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: '(A% * B%)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname '(A% * B%)
':
check_vname ret0 '(A% * B%)
':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=8 ' (A% * B%)
'
    dropping space
check_literal:After drop space:'(' idx=9 '(A% * B%)
'
check_literal:After while():A% * B%)

check_literal:ret1 
check_sub_expr: ret1
check_eitem:ret1
scan_eitem:
check_operator:  (A% * B%)

check_literal:lit=',' idx=9 '(A% * B%)
'
check_literal:After drop space:',' idx=9 '(A% * B%)
'
  ',' != '('
check_literal: ret0
check_operator:ret0
check_function: '(A% * B%)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=8 ' (A% * B%)
'
    dropping space
check_literal:After drop space:'%' idx=9 '(A% * B%)
'
  '%' != '('
check_literal: ret0
check_literal:lit=' "' idx=8 ' (A% * B%)
'
    dropping space
check_literal:After drop space:'"' idx=9 '(A% * B%)
'
  '"' != '('
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: '(A% * B%)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname '(A% * B%)
':
check_vname ret0 '(A% * B%)
':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=8 ' (A% * B%)
'
    dropping space
check_literal:After drop space:'(' idx=9 '(A% * B%)
'
check_literal:After while():A% * B%)

check_literal:ret1 
check_sub_expr: ret1
scan_sub_expr:
scan_literal:lit=' (' ' (A% * B%)
'
scan_literal:After drop space:(A% * B%)

scan_literal:while loop:(A% * B%)

   Frst:0 T:'(' exptype:i
(operator_precedence) 
+ is operator
(output_sub_start)
 Push:'('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (3)

(op_stack_print) 
000: = type:0
(op_stack_print) 
001: + type:0
(op_stack_print) 
002: ( type:16
(op_stack_print) 
------------------

   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (4)

(op_stack_print) 
000: = type:0
(op_stack_print) 
001: + type:0
(op_stack_print) 
002: ( type:16
(op_stack_print) 
003: ( type:16
(op_stack_print) 
------------------

scan_expression: 'A% * B%)
'
check_eitem: 'A% * B%)
'
check_operator: A% * B%)

check_literal:lit=',' idx=10 'A% * B%)
'
check_literal:After drop space:',' idx=10 'A% * B%)
'
  ',' != 'A'
check_literal: ret0
check_operator:ret0
check_function: 'A% * B%)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=10 'A% * B%)
'
    dropping space
check_literal:After drop space:'%' idx=10 'A% * B%)
'
  '%' != 'A'
check_literal: ret0
check_literal:lit=' "' idx=10 'A% * B%)
'
    dropping space
check_literal:After drop space:'"' idx=10 'A% * B%)
'
  '"' != 'A'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'A% * B%)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'A% * B%)
':
check_vname ret1 '% * B%)
':
check_variable: '% * B%)
'
check_variable: Ary test ' * B%)
'
check_literal:lit='(' idx=12 ' * B%)
'
check_literal:After drop space:'(' idx=12 ' * B%)
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
check_eitem:ret1
scan_eitem:
check_operator: A% * B%)

check_literal:lit=',' idx=10 'A% * B%)
'
check_literal:After drop space:',' idx=10 'A% * B%)
'
  ',' != 'A'
check_literal: ret0
check_operator:ret0
check_function: 'A% * B%)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=10 'A% * B%)
'
    dropping space
check_literal:After drop space:'%' idx=10 'A% * B%)
'
  '%' != 'A'
check_literal: ret0
check_literal:lit=' "' idx=10 'A% * B%)
'
    dropping space
check_literal:After drop space:'"' idx=10 'A% * B%)
'
  '"' != 'A'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'A% * B%)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'A% * B%)
':
check_vname ret1 '% * B%)
':
check_variable: '% * B%)
'
check_variable: Ary test ' * B%)
'
check_literal:lit='(' idx=12 ' * B%)
'
check_literal:After drop space:'(' idx=12 ' * B%)
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
scan_atom:
check_literal:lit=' %' idx=10 'A% * B%)
'
    dropping space
check_literal:After drop space:'%' idx=10 'A% * B%)
'
  '%' != 'A'
check_literal: ret0
check_literal:lit=' "' idx=10 'A% * B%)
'
    dropping space
check_literal:After drop space:'"' idx=10 'A% * B%)
'
  '"' != 'A'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'A% * B%)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'A% * B%)
':
check_vname ret1 '% * B%)
':
check_variable: '% * B%)
'
check_variable: Ary test ' * B%)
'
check_literal:lit='(' idx=12 ' * B%)
'
check_literal:After drop space:'(' idx=12 ' * B%)
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
scan_variable:
scan_vname: 'A% * B%)
'
scan_vname: ret1 'A'
scan_variable: '% * B%)
' vname='A'
scan_variable: Ary test ' * B%)
'
check_literal:lit='(' idx=12 ' * B%)
'
check_literal:After drop space:'(' idx=12 ' * B%)
'
  '(' != ' '
check_literal: ret0
scan_variable:ret1 vname='A%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'A%' exptype:U
token_is_function:
token_is_function:A% is not function
token_is_variable: tok:'A%'
token_is_function:
token_is_function:A% is not function
(init_get_name) 
init_get_name:'A%'
(init_get_name) 
init_get_name:'A%'
(get_name) 
get_name:gn:'A%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,(i U )] i i A%
VAR INFO: '                A%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
check_eitem: ' * B%)
'
check_operator:  * B%)

check_literal:lit=',' idx=13 '* B%)
'
check_literal:After drop space:',' idx=13 '* B%)
'
  ',' != '*'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
scan_eitem:
check_operator:  * B%)

check_literal:lit=',' idx=13 '* B%)
'
check_literal:After drop space:',' idx=13 '* B%)
'
  ',' != '*'
check_literal: ret0
check_operator: ret1
scan_operator: ' * B%)
'
check_literal:lit=',' idx=13 '* B%)
'
check_literal:After drop space:',' idx=13 '* B%)
'
  ',' != '*'
check_literal: ret0
scan_operator: ret1 ' B%)
'
   Frst:0 T:'*' exptype:i
(operator_precedence) 
* is operator
'*' is operator
(process_token) 
Token is operator o1 name:* o2 name:(
(process_token) 
opr1:5 opr2:0
Push 1
 Push:'*'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (5)

(op_stack_print) 
000: = type:0
(op_stack_print) 
001: + type:0
(op_stack_print) 
002: ( type:16
(op_stack_print) 
003: ( type:16
(op_stack_print) 
004: * type:0
(op_stack_print) 
------------------

check_eitem: ' B%)
'
check_operator:  B%)

check_literal:lit=',' idx=15 'B%)
'
check_literal:After drop space:',' idx=15 'B%)
'
  ',' != 'B'
check_literal: ret0
check_operator:ret0
check_function: 'B%)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=14 ' B%)
'
    dropping space
check_literal:After drop space:'%' idx=15 'B%)
'
  '%' != 'B'
check_literal: ret0
check_literal:lit=' "' idx=14 ' B%)
'
    dropping space
check_literal:After drop space:'"' idx=15 'B%)
'
  '"' != 'B'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'B%)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'B%)
':
check_vname ret1 '%)
':
check_variable: '%)
'
check_variable: Ary test ')
'
check_literal:lit='(' idx=17 ')
'
check_literal:After drop space:'(' idx=17 ')
'
  '(' != ')'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
check_eitem:ret1
scan_eitem:
check_operator:  B%)

check_literal:lit=',' idx=15 'B%)
'
check_literal:After drop space:',' idx=15 'B%)
'
  ',' != 'B'
check_literal: ret0
check_operator:ret0
check_function: 'B%)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=14 ' B%)
'
    dropping space
check_literal:After drop space:'%' idx=15 'B%)
'
  '%' != 'B'
check_literal: ret0
check_literal:lit=' "' idx=14 ' B%)
'
    dropping space
check_literal:After drop space:'"' idx=15 'B%)
'
  '"' != 'B'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'B%)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'B%)
':
check_vname ret1 '%)
':
check_variable: '%)
'
check_variable: Ary test ')
'
check_literal:lit='(' idx=17 ')
'
check_literal:After drop space:'(' idx=17 ')
'
  '(' != ')'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
scan_atom:
check_literal:lit=' %' idx=14 ' B%)
'
    dropping space
check_literal:After drop space:'%' idx=15 'B%)
'
  '%' != 'B'
check_literal: ret0
check_literal:lit=' "' idx=14 ' B%)
'
    dropping space
check_literal:After drop space:'"' idx=15 'B%)
'
  '"' != 'B'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'B%)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'B%)
':
check_vname ret1 '%)
':
check_variable: '%)
'
check_variable: Ary test ')
'
check_literal:lit='(' idx=17 ')
'
check_literal:After drop space:'(' idx=17 ')
'
  '(' != ')'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
scan_variable:
scan_vname: ' B%)
'
scan_vname: ret1 'B'
scan_variable: '%)
' vname='B'
scan_variable: Ary test ')
'
check_literal:lit='(' idx=17 ')
'
check_literal:After drop space:'(' idx=17 ')
'
  '(' != ')'
check_literal: ret0
scan_variable:ret1 vname='B%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'B%' exptype:i
(operator_precedence) 
* is operator
token_is_function:
token_is_function:B% is not function
token_is_variable: tok:'B%'
token_is_function:
token_is_function:B% is not function
(init_get_name) 
init_get_name:'B%'
(init_get_name) 
init_get_name:'B%'
(get_name) 
get_name:gn:'B%'
process_token:type:i req_type:i
modify_expression_type:Inittype:i Intype:i Outtype:i
( output_variable) [i,(i U )] i i B%
VAR INFO: '                B%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
check_eitem: ')
'
check_operator: )

check_literal:lit=',' idx=17 ')
'
check_literal:After drop space:',' idx=17 ')
'
  ',' != ')'
check_literal: ret0
check_operator:ret0
check_function: ')
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=17 ')
'
    dropping space
check_literal:After drop space:'%' idx=17 ')
'
  '%' != ')'
check_literal: ret0
check_literal:lit=' "' idx=17 ')
'
    dropping space
check_literal:After drop space:'"' idx=17 ')
'
  '"' != ')'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: ')
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname ')
':
check_vname ret0 ')
':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=17 ')
'
    dropping space
check_literal:After drop space:'(' idx=17 ')
'
  '(' != ')'
check_literal: ret0
check_sub_expr: ret0
check_eitem:ret0
scan_expression: ret1 ')
'
scan_literal:lit=' )' ')
'
scan_literal:After drop space:)

scan_literal:while loop:)

   Frst:0 T:')' exptype:i
(operator_precedence) 
* is operator
(process_token) 
Pop 3
Pop '*'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (4)

(op_stack_print) 
000: = type:0
(op_stack_print) 
001: + type:0
(op_stack_print) 
002: ( type:16
(op_stack_print) 
003: ( type:16
(op_stack_print) 
------------------

( output_operator) [i,(i U )] i i *
token_is_function:
token_is_function:* is not function
Pop 4
Pop '('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (3)

(op_stack_print) 
000: = type:0
(op_stack_print) 
001: + type:0
(op_stack_print) 
002: ( type:16
(op_stack_print) 
------------------

(  output_sub_end)
token_is_function:
token_is_function:( is not function
(  output_sub_end)
   Frst:0 T:')' exptype:U
Pop 4
Pop '('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (2)

(op_stack_print) 
000: = type:0
(op_stack_print) 
001: + type:0
(op_stack_print) 
------------------

(  output_sub_end)
token_is_function:
token_is_function:+ is not function
(  output_sub_end)
scan_sub_expr:ret1
check_eitem: '
'
check_operator: 

check_literal:lit=',' idx=19 ''
check_literal:After drop space:',' idx=19 ''
check_literal  ret0 Empty test string
check_operator:ret0
check_function: ''
check_function: ret0
check_atom:
check_literal:lit=' %' idx=18 '
'
    dropping space
check_literal:After drop space:'%' idx=19 ''
check_literal  ret0 Empty test string
check_literal:lit=' "' idx=18 '
'
    dropping space
check_literal:After drop space:'"' idx=19 ''
check_literal  ret0 Empty test string
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: ''
check_integer:ret0
check_number: ret0
check_variable:
check_vname '':
check_vname ret0 '':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=18 '
'
    dropping space
check_literal:After drop space:'(' idx=19 ''
check_literal  ret0 Empty test string
check_sub_expr: ret0
check_eitem:ret0
scan_expression: ret1 '
'
scan_assignment: ret1
Finalise stack
Pop '+'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: = type:0
(op_stack_print) 
------------------

( output_operator) [i,()] i i +
token_is_function:
token_is_function:+ is not function
Pop '='
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_operator) [i,()] i i =
token_is_function:
token_is_function:= is not function
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i A%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i A%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i B%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i *  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i +  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i =  0:
=================
 BE:A%
type_check_stack_push: 'A%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'A%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'A%' type:i (0)
 BE:2
type_check_stack_push: '2'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'A%' type:0
(type_check_stack_print) 
001: '2' type:0
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'A%' type:i (0)
001: '2' type:i (0)
 BE:

Type Check Stack (2)

000: 'A%' type:i (0)
001: '2' type:i (0)
 BE:

Type Check Stack (2)

000: 'A%' type:i (0)
001: '2' type:i (0)
 BE:A%
type_check_stack_push: 'A%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (3)

(type_check_stack_print) 
000: 'A%' type:0
(type_check_stack_print) 
001: '2' type:0
(type_check_stack_print) 
002: 'A%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (3)

000: 'A%' type:i (0)
001: '2' type:i (0)
002: 'A%' type:i (0)
 BE:B%
type_check_stack_push: 'B%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (4)

(type_check_stack_print) 
000: 'A%' type:0
(type_check_stack_print) 
001: '2' type:0
(type_check_stack_print) 
002: 'A%' type:0
(type_check_stack_print) 
003: 'B%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (4)

000: 'A%' type:i (0)
001: '2' type:i (0)
002: 'A%' type:i (0)
003: 'B%' type:i (0)
 BE:*
BUFF_ID_OPERATOR
Found operator *
type_check_stack_pop: 'B%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (3)

(type_check_stack_print) 
000: 'A%' type:0
(type_check_stack_print) 
001: '2' type:0
(type_check_stack_print) 
002: 'A%' type:0
(type_check_stack_print) 
------------------

type_check_stack_pop: 'A%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'A%' type:0
(type_check_stack_print) 
001: '2' type:0
(type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (3)

(type_check_stack_print) 
000: 'A%' type:0
(type_check_stack_print) 
001: '2' type:0
(type_check_stack_print) 
002: '000' type:0
(type_check_stack_print) 
------------------


Type Check Stack (3)

000: 'A%' type:i (0)
001: '2' type:i (0)
002: '000' type:i (0)
 BE:

Type Check Stack (3)

000: 'A%' type:i (0)
001: '2' type:i (0)
002: '000' type:i (0)
 BE:

Type Check Stack (3)

000: 'A%' type:i (0)
001: '2' type:i (0)
002: '000' type:i (0)
 BE:

Type Check Stack (3)

000: 'A%' type:i (0)
001: '2' type:i (0)
002: '000' type:i (0)
 BE:

Type Check Stack (3)

000: 'A%' type:i (0)
001: '2' type:i (0)
002: '000' type:i (0)
 BE:+
BUFF_ID_OPERATOR
Found operator +
type_check_stack_pop: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'A%' type:0
(type_check_stack_print) 
001: '2' type:0
(type_check_stack_print) 
------------------

type_check_stack_pop: '2'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'A%' type:0
(type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'A%' type:0
(type_check_stack_print) 
001: '000' type:0
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'A%' type:i (0)
001: '000' type:i (0)
 BE::=
BUFF_ID_OPERATOR
Found operator :=
type_check_stack_pop: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'A%' type:0
(type_check_stack_print) 
------------------

type_check_stack_pop: 'A%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (0)

(type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i A%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i A%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i B%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i *  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i +  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i :=  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i A%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_VARIABLE     i rq:i A%  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_VARIABLE     i rq:i B%  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 6 5
(dump_exp_buffer2) N8 EXP_BUFF_ID_SUB_END      U rq:i   0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_END      U rq:i   0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_SUB_END      U rq:i   0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_SUB_END      U rq:i   0:
(dump_exp_buffer2) N12 EXP_BUFF_ID_OPERATOR     i rq:i +  2: 7 2
(dump_exp_buffer2) N13 EXP_BUFF_ID_OPERATOR     i rq:i :=  2: 12 1
=================
(process_expression_types) 
==INFIX==

infix_stack_push: 'A%'
infix_stack_push: '2'
infix_stack_push: 'A%'
infix_stack_push: 'B%'
infix_stack_pop: 'B%'
infix_stack_pop: 'A%'
infix_stack_push: '(A% * B%)'
infix_stack_pop: '(A% * B%)'
infix_stack_pop: '2'
infix_stack_push: '(2 + (A% * B%))'
infix_stack_pop: '(2 + (A% * B%))'
infix_stack_pop: 'A%'
infix_stack_push: '(A% := (2 + (A% * B%)))'
infix_stack_pop: '(A% := (2 + (A% * B%)))'
(process_expression_types) ==(A% := (2 + (A% * B%)))==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i A%  0:
(    output_qcode) N2 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N4 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N5 EXP_BUFF_ID_VARIABLE     i rq:i A%  0:
(    output_qcode) N6 EXP_BUFF_ID_VARIABLE     i rq:i B%  0:
(    output_qcode) N7 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 6 5
(    output_qcode) N8 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N9 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N10 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N11 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N12 EXP_BUFF_ID_OPERATOR     i rq:i +  2: 7 2
(    output_qcode) N13 EXP_BUFF_ID_OPERATOR     i rq:i :=  2: 12 1
check_literal:lit=':' idx=19 ''
check_literal:After drop space:':' idx=19 ''
check_literal  ret0 Empty test string
(translate_file) 
cline scanned OK
(translate_file) 
=======================cline==========================
(translate_file) 
==A = A% + (2*3+3*Z%-   ABC%*1.1)
==
scan_cline:
check_line:
check_assignment:
check_variable:
check_vname 'A = A% + (2*3+3*Z%-   ABC%*1.1)
':
check_vname ret1 ' = A% + (2*3+3*Z%-   ABC%*1.1)
':
check_variable: ' = A% + (2*3+3*Z%-   ABC%*1.1)
'
check_variable: Ary test ' = A% + (2*3+3*Z%-   ABC%*1.1)
'
check_literal:lit='(' idx=1 ' = A% + (2*3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:'(' idx=1 ' = A% + (2*3+3*Z%-   ABC%*1.1)
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
check_variable:ret1 
check_literal:lit=' =' idx=1 ' = A% + (2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'=' idx=2 '= A% + (2*3+3*Z%-   ABC%*1.1)
'
check_literal:After while(): A% + (2*3+3*Z%-   ABC%*1.1)

check_literal:ret1 
check_expression: 'A% + (2*3+3*Z%-   ABC%*1.1)
'
check_eitem: 'A% + (2*3+3*Z%-   ABC%*1.1)
'
check_operator: A% + (2*3+3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=4 'A% + (2*3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=4 'A% + (2*3+3*Z%-   ABC%*1.1)
'
  ',' != 'A'
check_literal: ret0
check_operator:ret0
check_function: 'A% + (2*3+3*Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=4 'A% + (2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=4 'A% + (2*3+3*Z%-   ABC%*1.1)
'
  '%' != 'A'
check_literal: ret0
check_literal:lit=' "' idx=4 'A% + (2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=4 'A% + (2*3+3*Z%-   ABC%*1.1)
'
  '"' != 'A'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'A% + (2*3+3*Z%-   ABC%*1.1)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'A% + (2*3+3*Z%-   ABC%*1.1)
':
check_vname ret1 '% + (2*3+3*Z%-   ABC%*1.1)
':
check_variable: '% + (2*3+3*Z%-   ABC%*1.1)
'
check_variable: Ary test ' + (2*3+3*Z%-   ABC%*1.1)
'
check_literal:lit='(' idx=6 ' + (2*3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:'(' idx=6 ' + (2*3+3*Z%-   ABC%*1.1)
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
check_eitem:ret1
check_eitem: ' + (2*3+3*Z%-   ABC%*1.1)
'
check_operator:  + (2*3+3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=7 '+ (2*3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=7 '+ (2*3+3*Z%-   ABC%*1.1)
'
  ',' != '+'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
check_eitem: ' (2*3+3*Z%-   ABC%*1.1)
'
check_operator:  (2*3+3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=9 '(2*3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=9 '(2*3+3*Z%-   ABC%*1.1)
'
  ',' != '('
check_literal: ret0
check_operator:ret0
check_function: '(2*3+3*Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=8 ' (2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=9 '(2*3+3*Z%-   ABC%*1.1)
'
  '%' != '('
check_literal: ret0
check_literal:lit=' "' idx=8 ' (2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=9 '(2*3+3*Z%-   ABC%*1.1)
'
  '"' != '('
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: '(2*3+3*Z%-   ABC%*1.1)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname '(2*3+3*Z%-   ABC%*1.1)
':
check_vname ret0 '(2*3+3*Z%-   ABC%*1.1)
':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=8 ' (2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'(' idx=9 '(2*3+3*Z%-   ABC%*1.1)
'
check_literal:After while():2*3+3*Z%-   ABC%*1.1)

check_literal:ret1 
check_sub_expr: ret1
check_eitem:ret1
check_eitem: '2*3+3*Z%-   ABC%*1.1)
'
check_operator: 2*3+3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=10 '2*3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=10 '2*3+3*Z%-   ABC%*1.1)
'
  ',' != '2'
check_literal: ret0
check_operator:ret0
check_function: '2*3+3*Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=10 '2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=10 '2*3+3*Z%-   ABC%*1.1)
'
  '%' != '2'
check_literal: ret0
check_literal:lit=' "' idx=10 '2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=10 '2*3+3*Z%-   ABC%*1.1)
'
  '"' != '2'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '2*3+3*Z%-   ABC%*1.1)
'
check_integer:ret1
check_number: ret1
check_eitem:ret1
check_eitem: '*3+3*Z%-   ABC%*1.1)
'
check_operator: *3+3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=11 '*3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=11 '*3+3*Z%-   ABC%*1.1)
'
  ',' != '*'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
check_eitem: '3+3*Z%-   ABC%*1.1)
'
check_operator: 3+3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=12 '3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=12 '3+3*Z%-   ABC%*1.1)
'
  ',' != '3'
check_literal: ret0
check_operator:ret0
check_function: '3+3*Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=12 '3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=12 '3+3*Z%-   ABC%*1.1)
'
  '%' != '3'
check_literal: ret0
check_literal:lit=' "' idx=12 '3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=12 '3+3*Z%-   ABC%*1.1)
'
  '"' != '3'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '3+3*Z%-   ABC%*1.1)
'
check_integer:ret1
check_number: ret1
check_eitem:ret1
check_eitem: '+3*Z%-   ABC%*1.1)
'
check_operator: +3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=13 '+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=13 '+3*Z%-   ABC%*1.1)
'
  ',' != '+'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
check_eitem: '3*Z%-   ABC%*1.1)
'
check_operator: 3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=14 '3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=14 '3*Z%-   ABC%*1.1)
'
  ',' != '3'
check_literal: ret0
check_operator:ret0
check_function: '3*Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=14 '3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=14 '3*Z%-   ABC%*1.1)
'
  '%' != '3'
check_literal: ret0
check_literal:lit=' "' idx=14 '3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=14 '3*Z%-   ABC%*1.1)
'
  '"' != '3'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '3*Z%-   ABC%*1.1)
'
check_integer:ret1
check_number: ret1
check_eitem:ret1
check_eitem: '*Z%-   ABC%*1.1)
'
check_operator: *Z%-   ABC%*1.1)

check_literal:lit=',' idx=15 '*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=15 '*Z%-   ABC%*1.1)
'
  ',' != '*'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
check_eitem: 'Z%-   ABC%*1.1)
'
check_operator: Z%-   ABC%*1.1)

check_literal:lit=',' idx=16 'Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=16 'Z%-   ABC%*1.1)
'
  ',' != 'Z'
check_literal: ret0
check_operator:ret0
check_function: 'Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=16 'Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=16 'Z%-   ABC%*1.1)
'
  '%' != 'Z'
check_literal: ret0
check_literal:lit=' "' idx=16 'Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=16 'Z%-   ABC%*1.1)
'
  '"' != 'Z'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'Z%-   ABC%*1.1)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'Z%-   ABC%*1.1)
':
check_vname ret1 '%-   ABC%*1.1)
':
check_variable: '%-   ABC%*1.1)
'
check_variable: Ary test '-   ABC%*1.1)
'
check_literal:lit='(' idx=18 '-   ABC%*1.1)
'
check_literal:After drop space:'(' idx=18 '-   ABC%*1.1)
'
  '(' != '-'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
check_eitem:ret1
check_eitem: '-   ABC%*1.1)
'
check_operator: -   ABC%*1.1)

check_literal:lit=',' idx=18 '-   ABC%*1.1)
'
check_literal:After drop space:',' idx=18 '-   ABC%*1.1)
'
  ',' != '-'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
check_eitem: '   ABC%*1.1)
'
check_operator:    ABC%*1.1)

check_literal:lit=',' idx=22 'ABC%*1.1)
'
check_literal:After drop space:',' idx=22 'ABC%*1.1)
'
  ',' != 'A'
check_literal: ret0
check_operator:ret0
check_function: 'ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=19 '   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=22 'ABC%*1.1)
'
  '%' != 'A'
check_literal: ret0
check_literal:lit=' "' idx=19 '   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=22 'ABC%*1.1)
'
  '"' != 'A'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'ABC%*1.1)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'ABC%*1.1)
':
check_vname ret1 '%*1.1)
':
check_variable: '%*1.1)
'
check_variable: Ary test '*1.1)
'
check_literal:lit='(' idx=26 '*1.1)
'
check_literal:After drop space:'(' idx=26 '*1.1)
'
  '(' != '*'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
check_eitem:ret1
check_eitem: '*1.1)
'
check_operator: *1.1)

check_literal:lit=',' idx=26 '*1.1)
'
check_literal:After drop space:',' idx=26 '*1.1)
'
  ',' != '*'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
check_eitem: '1.1)
'
check_operator: 1.1)

check_literal:lit=',' idx=27 '1.1)
'
check_literal:After drop space:',' idx=27 '1.1)
'
  ',' != '1'
check_literal: ret0
check_operator:ret0
check_function: '1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=27 '1.1)
'
    dropping space
check_literal:After drop space:'%' idx=27 '1.1)
'
  '%' != '1'
check_literal: ret0
check_literal:lit=' "' idx=27 '1.1)
'
    dropping space
check_literal:After drop space:'"' idx=27 '1.1)
'
  '"' != '1'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
isfloatdigit:
isfloatdigit:
check_float: ret1
check_number: ret1
check_eitem:ret1
check_eitem: ')
'
check_operator: )

check_literal:lit=',' idx=30 ')
'
check_literal:After drop space:',' idx=30 ')
'
  ',' != ')'
check_literal: ret0
check_operator:ret0
check_function: ')
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=30 ')
'
    dropping space
check_literal:After drop space:'%' idx=30 ')
'
  '%' != ')'
check_literal: ret0
check_literal:lit=' "' idx=30 ')
'
    dropping space
check_literal:After drop space:'"' idx=30 ')
'
  '"' != ')'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: ')
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname ')
':
check_vname ret0 ')
':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=30 ')
'
    dropping space
check_literal:After drop space:'(' idx=30 ')
'
  '(' != ')'
check_literal: ret0
check_sub_expr: ret0
check_eitem:ret0
check_expression:ret1 ')
'
check_assignment:ret1
check_line:ret1
scan_cline: Checked len=2, ')
'
========================================================
A = A% + (2*3+3*Z%-   ABC%*1.1)

========================================================
(output_expression_start)
scan_line:
check_assignment:
check_variable:
check_vname 'A = A% + (2*3+3*Z%-   ABC%*1.1)
':
check_vname ret1 ' = A% + (2*3+3*Z%-   ABC%*1.1)
':
check_variable: ' = A% + (2*3+3*Z%-   ABC%*1.1)
'
check_variable: Ary test ' = A% + (2*3+3*Z%-   ABC%*1.1)
'
check_literal:lit='(' idx=1 ' = A% + (2*3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:'(' idx=1 ' = A% + (2*3+3*Z%-   ABC%*1.1)
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
check_variable:ret1 
check_literal:lit=' =' idx=1 ' = A% + (2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'=' idx=2 '= A% + (2*3+3*Z%-   ABC%*1.1)
'
check_literal:After while(): A% + (2*3+3*Z%-   ABC%*1.1)

check_literal:ret1 
check_expression: 'A% + (2*3+3*Z%-   ABC%*1.1)
'
check_eitem: 'A% + (2*3+3*Z%-   ABC%*1.1)
'
check_operator: A% + (2*3+3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=4 'A% + (2*3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=4 'A% + (2*3+3*Z%-   ABC%*1.1)
'
  ',' != 'A'
check_literal: ret0
check_operator:ret0
check_function: 'A% + (2*3+3*Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=4 'A% + (2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=4 'A% + (2*3+3*Z%-   ABC%*1.1)
'
  '%' != 'A'
check_literal: ret0
check_literal:lit=' "' idx=4 'A% + (2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=4 'A% + (2*3+3*Z%-   ABC%*1.1)
'
  '"' != 'A'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'A% + (2*3+3*Z%-   ABC%*1.1)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'A% + (2*3+3*Z%-   ABC%*1.1)
':
check_vname ret1 '% + (2*3+3*Z%-   ABC%*1.1)
':
check_variable: '% + (2*3+3*Z%-   ABC%*1.1)
'
check_variable: Ary test ' + (2*3+3*Z%-   ABC%*1.1)
'
check_literal:lit='(' idx=6 ' + (2*3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:'(' idx=6 ' + (2*3+3*Z%-   ABC%*1.1)
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
check_eitem:ret1
check_eitem: ' + (2*3+3*Z%-   ABC%*1.1)
'
check_operator:  + (2*3+3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=7 '+ (2*3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=7 '+ (2*3+3*Z%-   ABC%*1.1)
'
  ',' != '+'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
check_eitem: ' (2*3+3*Z%-   ABC%*1.1)
'
check_operator:  (2*3+3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=9 '(2*3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=9 '(2*3+3*Z%-   ABC%*1.1)
'
  ',' != '('
check_literal: ret0
check_operator:ret0
check_function: '(2*3+3*Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=8 ' (2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=9 '(2*3+3*Z%-   ABC%*1.1)
'
  '%' != '('
check_literal: ret0
check_literal:lit=' "' idx=8 ' (2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=9 '(2*3+3*Z%-   ABC%*1.1)
'
  '"' != '('
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: '(2*3+3*Z%-   ABC%*1.1)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname '(2*3+3*Z%-   ABC%*1.1)
':
check_vname ret0 '(2*3+3*Z%-   ABC%*1.1)
':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=8 ' (2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'(' idx=9 '(2*3+3*Z%-   ABC%*1.1)
'
check_literal:After while():2*3+3*Z%-   ABC%*1.1)

check_literal:ret1 
check_sub_expr: ret1
check_eitem:ret1
check_eitem: '2*3+3*Z%-   ABC%*1.1)
'
check_operator: 2*3+3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=10 '2*3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=10 '2*3+3*Z%-   ABC%*1.1)
'
  ',' != '2'
check_literal: ret0
check_operator:ret0
check_function: '2*3+3*Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=10 '2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=10 '2*3+3*Z%-   ABC%*1.1)
'
  '%' != '2'
check_literal: ret0
check_literal:lit=' "' idx=10 '2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=10 '2*3+3*Z%-   ABC%*1.1)
'
  '"' != '2'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '2*3+3*Z%-   ABC%*1.1)
'
check_integer:ret1
check_number: ret1
check_eitem:ret1
check_eitem: '*3+3*Z%-   ABC%*1.1)
'
check_operator: *3+3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=11 '*3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=11 '*3+3*Z%-   ABC%*1.1)
'
  ',' != '*'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
check_eitem: '3+3*Z%-   ABC%*1.1)
'
check_operator: 3+3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=12 '3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=12 '3+3*Z%-   ABC%*1.1)
'
  ',' != '3'
check_literal: ret0
check_operator:ret0
check_function: '3+3*Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=12 '3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=12 '3+3*Z%-   ABC%*1.1)
'
  '%' != '3'
check_literal: ret0
check_literal:lit=' "' idx=12 '3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=12 '3+3*Z%-   ABC%*1.1)
'
  '"' != '3'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '3+3*Z%-   ABC%*1.1)
'
check_integer:ret1
check_number: ret1
check_eitem:ret1
check_eitem: '+3*Z%-   ABC%*1.1)
'
check_operator: +3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=13 '+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=13 '+3*Z%-   ABC%*1.1)
'
  ',' != '+'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
check_eitem: '3*Z%-   ABC%*1.1)
'
check_operator: 3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=14 '3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=14 '3*Z%-   ABC%*1.1)
'
  ',' != '3'
check_literal: ret0
check_operator:ret0
check_function: '3*Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=14 '3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=14 '3*Z%-   ABC%*1.1)
'
  '%' != '3'
check_literal: ret0
check_literal:lit=' "' idx=14 '3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=14 '3*Z%-   ABC%*1.1)
'
  '"' != '3'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '3*Z%-   ABC%*1.1)
'
check_integer:ret1
check_number: ret1
check_eitem:ret1
check_eitem: '*Z%-   ABC%*1.1)
'
check_operator: *Z%-   ABC%*1.1)

check_literal:lit=',' idx=15 '*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=15 '*Z%-   ABC%*1.1)
'
  ',' != '*'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
check_eitem: 'Z%-   ABC%*1.1)
'
check_operator: Z%-   ABC%*1.1)

check_literal:lit=',' idx=16 'Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=16 'Z%-   ABC%*1.1)
'
  ',' != 'Z'
check_literal: ret0
check_operator:ret0
check_function: 'Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=16 'Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=16 'Z%-   ABC%*1.1)
'
  '%' != 'Z'
check_literal: ret0
check_literal:lit=' "' idx=16 'Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=16 'Z%-   ABC%*1.1)
'
  '"' != 'Z'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'Z%-   ABC%*1.1)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'Z%-   ABC%*1.1)
':
check_vname ret1 '%-   ABC%*1.1)
':
check_variable: '%-   ABC%*1.1)
'
check_variable: Ary test '-   ABC%*1.1)
'
check_literal:lit='(' idx=18 '-   ABC%*1.1)
'
check_literal:After drop space:'(' idx=18 '-   ABC%*1.1)
'
  '(' != '-'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
check_eitem:ret1
check_eitem: '-   ABC%*1.1)
'
check_operator: -   ABC%*1.1)

check_literal:lit=',' idx=18 '-   ABC%*1.1)
'
check_literal:After drop space:',' idx=18 '-   ABC%*1.1)
'
  ',' != '-'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
check_eitem: '   ABC%*1.1)
'
check_operator:    ABC%*1.1)

check_literal:lit=',' idx=22 'ABC%*1.1)
'
check_literal:After drop space:',' idx=22 'ABC%*1.1)
'
  ',' != 'A'
check_literal: ret0
check_operator:ret0
check_function: 'ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=19 '   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=22 'ABC%*1.1)
'
  '%' != 'A'
check_literal: ret0
check_literal:lit=' "' idx=19 '   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=22 'ABC%*1.1)
'
  '"' != 'A'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'ABC%*1.1)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'ABC%*1.1)
':
check_vname ret1 '%*1.1)
':
check_variable: '%*1.1)
'
check_variable: Ary test '*1.1)
'
check_literal:lit='(' idx=26 '*1.1)
'
check_literal:After drop space:'(' idx=26 '*1.1)
'
  '(' != '*'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
check_eitem:ret1
check_eitem: '*1.1)
'
check_operator: *1.1)

check_literal:lit=',' idx=26 '*1.1)
'
check_literal:After drop space:',' idx=26 '*1.1)
'
  ',' != '*'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
check_eitem: '1.1)
'
check_operator: 1.1)

check_literal:lit=',' idx=27 '1.1)
'
check_literal:After drop space:',' idx=27 '1.1)
'
  ',' != '1'
check_literal: ret0
check_operator:ret0
check_function: '1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=27 '1.1)
'
    dropping space
check_literal:After drop space:'%' idx=27 '1.1)
'
  '%' != '1'
check_literal: ret0
check_literal:lit=' "' idx=27 '1.1)
'
    dropping space
check_literal:After drop space:'"' idx=27 '1.1)
'
  '"' != '1'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
isfloatdigit:
isfloatdigit:
check_float: ret1
check_number: ret1
check_eitem:ret1
check_eitem: ')
'
check_operator: )

check_literal:lit=',' idx=30 ')
'
check_literal:After drop space:',' idx=30 ')
'
  ',' != ')'
check_literal: ret0
check_operator:ret0
check_function: ')
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=30 ')
'
    dropping space
check_literal:After drop space:'%' idx=30 ')
'
  '%' != ')'
check_literal: ret0
check_literal:lit=' "' idx=30 ')
'
    dropping space
check_literal:After drop space:'"' idx=30 ')
'
  '"' != ')'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: ')
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname ')
':
check_vname ret0 ')
':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=30 ')
'
    dropping space
check_literal:After drop space:'(' idx=30 ')
'
  '(' != ')'
check_literal: ret0
check_sub_expr: ret0
check_eitem:ret0
check_expression:ret1 ')
'
check_assignment:ret1
scan_assignment:
scan_variable:
scan_vname: 'A = A% + (2*3+3*Z%-   ABC%*1.1)
'
scan_vname: ret1 'A'
scan_variable: ' = A% + (2*3+3*Z%-   ABC%*1.1)
' vname='A'
scan_variable: Ary test ' = A% + (2*3+3*Z%-   ABC%*1.1)
'
check_literal:lit='(' idx=1 ' = A% + (2*3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:'(' idx=1 ' = A% + (2*3+3*Z%-   ABC%*1.1)
'
  '(' != ' '
check_literal: ret0
scan_variable:ret1 vname='A' is str:0 int:0 flt:1 ary:0
   Frst:1 T:'A' exptype:U
token_is_function:
token_is_function:A is not function
token_is_variable: tok:'A'
token_is_function:
token_is_function:A is not function
(init_get_name) 
init_get_name:'A'
(init_get_name) 
init_get_name:'A'
(get_name) 
get_name:gn:'A'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] f f A
VAR INFO: '                 A' gbl:0 ref:1 int:0 flt:1 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
scan_literal:lit=' =' ' = A% + (2*3+3*Z%-   ABC%*1.1)
'
scan_literal:After drop space:= A% + (2*3+3*Z%-   ABC%*1.1)

scan_literal:while loop:= A% + (2*3+3*Z%-   ABC%*1.1)

   Frst:0 T:'=' exptype:i
(operator_precedence) 
= is operator
'=' is operator
(process_token) 
Token is operator o1 name:= o2 name:
(process_token) 
opr1:1 opr2:0
Push 1
 Push:'='
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: = type:0
(op_stack_print) 
------------------

scan_expression: ' A% + (2*3+3*Z%-   ABC%*1.1)
'
check_eitem: 'A% + (2*3+3*Z%-   ABC%*1.1)
'
check_operator: A% + (2*3+3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=4 'A% + (2*3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=4 'A% + (2*3+3*Z%-   ABC%*1.1)
'
  ',' != 'A'
check_literal: ret0
check_operator:ret0
check_function: 'A% + (2*3+3*Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=4 'A% + (2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=4 'A% + (2*3+3*Z%-   ABC%*1.1)
'
  '%' != 'A'
check_literal: ret0
check_literal:lit=' "' idx=4 'A% + (2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=4 'A% + (2*3+3*Z%-   ABC%*1.1)
'
  '"' != 'A'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'A% + (2*3+3*Z%-   ABC%*1.1)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'A% + (2*3+3*Z%-   ABC%*1.1)
':
check_vname ret1 '% + (2*3+3*Z%-   ABC%*1.1)
':
check_variable: '% + (2*3+3*Z%-   ABC%*1.1)
'
check_variable: Ary test ' + (2*3+3*Z%-   ABC%*1.1)
'
check_literal:lit='(' idx=6 ' + (2*3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:'(' idx=6 ' + (2*3+3*Z%-   ABC%*1.1)
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
check_eitem:ret1
scan_eitem:
check_operator: A% + (2*3+3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=4 'A% + (2*3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=4 'A% + (2*3+3*Z%-   ABC%*1.1)
'
  ',' != 'A'
check_literal: ret0
check_operator:ret0
check_function: 'A% + (2*3+3*Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=4 'A% + (2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=4 'A% + (2*3+3*Z%-   ABC%*1.1)
'
  '%' != 'A'
check_literal: ret0
check_literal:lit=' "' idx=4 'A% + (2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=4 'A% + (2*3+3*Z%-   ABC%*1.1)
'
  '"' != 'A'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'A% + (2*3+3*Z%-   ABC%*1.1)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'A% + (2*3+3*Z%-   ABC%*1.1)
':
check_vname ret1 '% + (2*3+3*Z%-   ABC%*1.1)
':
check_variable: '% + (2*3+3*Z%-   ABC%*1.1)
'
check_variable: Ary test ' + (2*3+3*Z%-   ABC%*1.1)
'
check_literal:lit='(' idx=6 ' + (2*3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:'(' idx=6 ' + (2*3+3*Z%-   ABC%*1.1)
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
scan_atom:
check_literal:lit=' %' idx=4 'A% + (2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=4 'A% + (2*3+3*Z%-   ABC%*1.1)
'
  '%' != 'A'
check_literal: ret0
check_literal:lit=' "' idx=4 'A% + (2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=4 'A% + (2*3+3*Z%-   ABC%*1.1)
'
  '"' != 'A'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'A% + (2*3+3*Z%-   ABC%*1.1)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'A% + (2*3+3*Z%-   ABC%*1.1)
':
check_vname ret1 '% + (2*3+3*Z%-   ABC%*1.1)
':
check_variable: '% + (2*3+3*Z%-   ABC%*1.1)
'
check_variable: Ary test ' + (2*3+3*Z%-   ABC%*1.1)
'
check_literal:lit='(' idx=6 ' + (2*3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:'(' idx=6 ' + (2*3+3*Z%-   ABC%*1.1)
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
scan_variable:
scan_vname: 'A% + (2*3+3*Z%-   ABC%*1.1)
'
scan_vname: ret1 'A'
scan_variable: '% + (2*3+3*Z%-   ABC%*1.1)
' vname='A'
scan_variable: Ary test ' + (2*3+3*Z%-   ABC%*1.1)
'
check_literal:lit='(' idx=6 ' + (2*3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:'(' idx=6 ' + (2*3+3*Z%-   ABC%*1.1)
'
  '(' != ' '
check_literal: ret0
scan_variable:ret1 vname='A%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'A%' exptype:i
(operator_precedence) 
= is operator
token_is_function:
token_is_function:A% is not function
token_is_variable: tok:'A%'
token_is_function:
token_is_function:A% is not function
(init_get_name) 
init_get_name:'A%'
(init_get_name) 
init_get_name:'A%'
(get_name) 
get_name:gn:'A%'
process_token:type:i req_type:i
modify_expression_type:Inittype:i Intype:i Outtype:i
( output_variable) [i,()] i i A%
VAR INFO: '                A%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
check_eitem: ' + (2*3+3*Z%-   ABC%*1.1)
'
check_operator:  + (2*3+3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=7 '+ (2*3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=7 '+ (2*3+3*Z%-   ABC%*1.1)
'
  ',' != '+'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
scan_eitem:
check_operator:  + (2*3+3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=7 '+ (2*3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=7 '+ (2*3+3*Z%-   ABC%*1.1)
'
  ',' != '+'
check_literal: ret0
check_operator: ret1
scan_operator: ' + (2*3+3*Z%-   ABC%*1.1)
'
check_literal:lit=',' idx=7 '+ (2*3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=7 '+ (2*3+3*Z%-   ABC%*1.1)
'
  ',' != '+'
check_literal: ret0
scan_operator: ret1 ' (2*3+3*Z%-   ABC%*1.1)
'
   Frst:0 T:'+' exptype:i
(operator_precedence) 
+ is operator
(operator_precedence) 
= is operator
'+' is operator
(process_token) 
Token is operator o1 name:+ o2 name:=
(process_token) 
opr1:3 opr2:1
(operator_precedence) 
= is operator
(operator_precedence) 
= is operator
Push 1
 Push:'+'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (2)

(op_stack_print) 
000: = type:0
(op_stack_print) 
001: + type:0
(op_stack_print) 
------------------

check_eitem: ' (2*3+3*Z%-   ABC%*1.1)
'
check_operator:  (2*3+3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=9 '(2*3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=9 '(2*3+3*Z%-   ABC%*1.1)
'
  ',' != '('
check_literal: ret0
check_operator:ret0
check_function: '(2*3+3*Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=8 ' (2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=9 '(2*3+3*Z%-   ABC%*1.1)
'
  '%' != '('
check_literal: ret0
check_literal:lit=' "' idx=8 ' (2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=9 '(2*3+3*Z%-   ABC%*1.1)
'
  '"' != '('
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: '(2*3+3*Z%-   ABC%*1.1)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname '(2*3+3*Z%-   ABC%*1.1)
':
check_vname ret0 '(2*3+3*Z%-   ABC%*1.1)
':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=8 ' (2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'(' idx=9 '(2*3+3*Z%-   ABC%*1.1)
'
check_literal:After while():2*3+3*Z%-   ABC%*1.1)

check_literal:ret1 
check_sub_expr: ret1
check_eitem:ret1
scan_eitem:
check_operator:  (2*3+3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=9 '(2*3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=9 '(2*3+3*Z%-   ABC%*1.1)
'
  ',' != '('
check_literal: ret0
check_operator:ret0
check_function: '(2*3+3*Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=8 ' (2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=9 '(2*3+3*Z%-   ABC%*1.1)
'
  '%' != '('
check_literal: ret0
check_literal:lit=' "' idx=8 ' (2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=9 '(2*3+3*Z%-   ABC%*1.1)
'
  '"' != '('
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: '(2*3+3*Z%-   ABC%*1.1)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname '(2*3+3*Z%-   ABC%*1.1)
':
check_vname ret0 '(2*3+3*Z%-   ABC%*1.1)
':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=8 ' (2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'(' idx=9 '(2*3+3*Z%-   ABC%*1.1)
'
check_literal:After while():2*3+3*Z%-   ABC%*1.1)

check_literal:ret1 
check_sub_expr: ret1
scan_sub_expr:
scan_literal:lit=' (' ' (2*3+3*Z%-   ABC%*1.1)
'
scan_literal:After drop space:(2*3+3*Z%-   ABC%*1.1)

scan_literal:while loop:(2*3+3*Z%-   ABC%*1.1)

   Frst:0 T:'(' exptype:i
(operator_precedence) 
+ is operator
(output_sub_start)
 Push:'('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (3)

(op_stack_print) 
000: = type:0
(op_stack_print) 
001: + type:0
(op_stack_print) 
002: ( type:16
(op_stack_print) 
------------------

   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (4)

(op_stack_print) 
000: = type:0
(op_stack_print) 
001: + type:0
(op_stack_print) 
002: ( type:16
(op_stack_print) 
003: ( type:16
(op_stack_print) 
------------------

scan_expression: '2*3+3*Z%-   ABC%*1.1)
'
check_eitem: '2*3+3*Z%-   ABC%*1.1)
'
check_operator: 2*3+3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=10 '2*3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=10 '2*3+3*Z%-   ABC%*1.1)
'
  ',' != '2'
check_literal: ret0
check_operator:ret0
check_function: '2*3+3*Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=10 '2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=10 '2*3+3*Z%-   ABC%*1.1)
'
  '%' != '2'
check_literal: ret0
check_literal:lit=' "' idx=10 '2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=10 '2*3+3*Z%-   ABC%*1.1)
'
  '"' != '2'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '2*3+3*Z%-   ABC%*1.1)
'
check_integer:ret1
check_number: ret1
check_eitem:ret1
scan_eitem:
check_operator: 2*3+3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=10 '2*3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=10 '2*3+3*Z%-   ABC%*1.1)
'
  ',' != '2'
check_literal: ret0
check_operator:ret0
check_function: '2*3+3*Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=10 '2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=10 '2*3+3*Z%-   ABC%*1.1)
'
  '%' != '2'
check_literal: ret0
check_literal:lit=' "' idx=10 '2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=10 '2*3+3*Z%-   ABC%*1.1)
'
  '"' != '2'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '2*3+3*Z%-   ABC%*1.1)
'
check_integer:ret1
check_number: ret1
scan_atom:
check_literal:lit=' %' idx=10 '2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=10 '2*3+3*Z%-   ABC%*1.1)
'
  '%' != '2'
check_literal: ret0
check_literal:lit=' "' idx=10 '2*3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=10 '2*3+3*Z%-   ABC%*1.1)
'
  '"' != '2'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '2*3+3*Z%-   ABC%*1.1)
'
check_integer:ret1
check_number: ret1
scan_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '2*3+3*Z%-   ABC%*1.1)
'
check_integer:ret1
scan_integer:
scan_integer:ret1
   Frst:0 T:'2' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(i U )] i i 2
scan_integer:ret1  2
check_eitem: '*3+3*Z%-   ABC%*1.1)
'
check_operator: *3+3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=11 '*3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=11 '*3+3*Z%-   ABC%*1.1)
'
  ',' != '*'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
scan_eitem:
check_operator: *3+3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=11 '*3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=11 '*3+3*Z%-   ABC%*1.1)
'
  ',' != '*'
check_literal: ret0
check_operator: ret1
scan_operator: '*3+3*Z%-   ABC%*1.1)
'
check_literal:lit=',' idx=11 '*3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=11 '*3+3*Z%-   ABC%*1.1)
'
  ',' != '*'
check_literal: ret0
scan_operator: ret1 '3+3*Z%-   ABC%*1.1)
'
   Frst:0 T:'*' exptype:i
(operator_precedence) 
* is operator
'*' is operator
(process_token) 
Token is operator o1 name:* o2 name:(
(process_token) 
opr1:5 opr2:0
Push 1
 Push:'*'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (5)

(op_stack_print) 
000: = type:0
(op_stack_print) 
001: + type:0
(op_stack_print) 
002: ( type:16
(op_stack_print) 
003: ( type:16
(op_stack_print) 
004: * type:0
(op_stack_print) 
------------------

check_eitem: '3+3*Z%-   ABC%*1.1)
'
check_operator: 3+3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=12 '3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=12 '3+3*Z%-   ABC%*1.1)
'
  ',' != '3'
check_literal: ret0
check_operator:ret0
check_function: '3+3*Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=12 '3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=12 '3+3*Z%-   ABC%*1.1)
'
  '%' != '3'
check_literal: ret0
check_literal:lit=' "' idx=12 '3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=12 '3+3*Z%-   ABC%*1.1)
'
  '"' != '3'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '3+3*Z%-   ABC%*1.1)
'
check_integer:ret1
check_number: ret1
check_eitem:ret1
scan_eitem:
check_operator: 3+3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=12 '3+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=12 '3+3*Z%-   ABC%*1.1)
'
  ',' != '3'
check_literal: ret0
check_operator:ret0
check_function: '3+3*Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=12 '3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=12 '3+3*Z%-   ABC%*1.1)
'
  '%' != '3'
check_literal: ret0
check_literal:lit=' "' idx=12 '3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=12 '3+3*Z%-   ABC%*1.1)
'
  '"' != '3'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '3+3*Z%-   ABC%*1.1)
'
check_integer:ret1
check_number: ret1
scan_atom:
check_literal:lit=' %' idx=12 '3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=12 '3+3*Z%-   ABC%*1.1)
'
  '%' != '3'
check_literal: ret0
check_literal:lit=' "' idx=12 '3+3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=12 '3+3*Z%-   ABC%*1.1)
'
  '"' != '3'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '3+3*Z%-   ABC%*1.1)
'
check_integer:ret1
check_number: ret1
scan_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '3+3*Z%-   ABC%*1.1)
'
check_integer:ret1
scan_integer:
scan_integer:ret1
   Frst:0 T:'3' exptype:i
(operator_precedence) 
* is operator
modify_expression_type:Inittype:i Intype:i Outtype:i
(  output_integer) [i,(i U )] i i 3
scan_integer:ret1  3
check_eitem: '+3*Z%-   ABC%*1.1)
'
check_operator: +3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=13 '+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=13 '+3*Z%-   ABC%*1.1)
'
  ',' != '+'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
scan_eitem:
check_operator: +3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=13 '+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=13 '+3*Z%-   ABC%*1.1)
'
  ',' != '+'
check_literal: ret0
check_operator: ret1
scan_operator: '+3*Z%-   ABC%*1.1)
'
check_literal:lit=',' idx=13 '+3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=13 '+3*Z%-   ABC%*1.1)
'
  ',' != '+'
check_literal: ret0
scan_operator: ret1 '3*Z%-   ABC%*1.1)
'
   Frst:0 T:'+' exptype:i
(operator_precedence) 
+ is operator
(operator_precedence) 
* is operator
'+' is operator
(process_token) 
Token is operator o1 name:+ o2 name:*
(process_token) 
opr1:3 opr2:5
(operator_precedence) 
* is operator
Pop 1
Pop '*'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (4)

(op_stack_print) 
000: = type:0
(op_stack_print) 
001: + type:0
(op_stack_print) 
002: ( type:16
(op_stack_print) 
003: ( type:16
(op_stack_print) 
------------------

(operator_precedence) 
+ is operator
(operator_precedence) 
* is operator
( output_operator) [i,(i U )] i i *
token_is_function:
token_is_function:* is not function
Push 1
 Push:'+'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (5)

(op_stack_print) 
000: = type:0
(op_stack_print) 
001: + type:0
(op_stack_print) 
002: ( type:16
(op_stack_print) 
003: ( type:16
(op_stack_print) 
004: + type:0
(op_stack_print) 
------------------

check_eitem: '3*Z%-   ABC%*1.1)
'
check_operator: 3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=14 '3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=14 '3*Z%-   ABC%*1.1)
'
  ',' != '3'
check_literal: ret0
check_operator:ret0
check_function: '3*Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=14 '3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=14 '3*Z%-   ABC%*1.1)
'
  '%' != '3'
check_literal: ret0
check_literal:lit=' "' idx=14 '3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=14 '3*Z%-   ABC%*1.1)
'
  '"' != '3'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '3*Z%-   ABC%*1.1)
'
check_integer:ret1
check_number: ret1
check_eitem:ret1
scan_eitem:
check_operator: 3*Z%-   ABC%*1.1)

check_literal:lit=',' idx=14 '3*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=14 '3*Z%-   ABC%*1.1)
'
  ',' != '3'
check_literal: ret0
check_operator:ret0
check_function: '3*Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=14 '3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=14 '3*Z%-   ABC%*1.1)
'
  '%' != '3'
check_literal: ret0
check_literal:lit=' "' idx=14 '3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=14 '3*Z%-   ABC%*1.1)
'
  '"' != '3'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '3*Z%-   ABC%*1.1)
'
check_integer:ret1
check_number: ret1
scan_atom:
check_literal:lit=' %' idx=14 '3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=14 '3*Z%-   ABC%*1.1)
'
  '%' != '3'
check_literal: ret0
check_literal:lit=' "' idx=14 '3*Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=14 '3*Z%-   ABC%*1.1)
'
  '"' != '3'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '3*Z%-   ABC%*1.1)
'
check_integer:ret1
check_number: ret1
scan_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '3*Z%-   ABC%*1.1)
'
check_integer:ret1
scan_integer:
scan_integer:ret1
   Frst:0 T:'3' exptype:i
(operator_precedence) 
+ is operator
modify_expression_type:Inittype:i Intype:i Outtype:i
(  output_integer) [i,(i U )] i i 3
scan_integer:ret1  3
check_eitem: '*Z%-   ABC%*1.1)
'
check_operator: *Z%-   ABC%*1.1)

check_literal:lit=',' idx=15 '*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=15 '*Z%-   ABC%*1.1)
'
  ',' != '*'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
scan_eitem:
check_operator: *Z%-   ABC%*1.1)

check_literal:lit=',' idx=15 '*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=15 '*Z%-   ABC%*1.1)
'
  ',' != '*'
check_literal: ret0
check_operator: ret1
scan_operator: '*Z%-   ABC%*1.1)
'
check_literal:lit=',' idx=15 '*Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=15 '*Z%-   ABC%*1.1)
'
  ',' != '*'
check_literal: ret0
scan_operator: ret1 'Z%-   ABC%*1.1)
'
   Frst:0 T:'*' exptype:i
(operator_precedence) 
* is operator
(operator_precedence) 
+ is operator
'*' is operator
(process_token) 
Token is operator o1 name:* o2 name:+
(process_token) 
opr1:5 opr2:3
(operator_precedence) 
+ is operator
(operator_precedence) 
+ is operator
Push 1
 Push:'*'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (6)

(op_stack_print) 
000: = type:0
(op_stack_print) 
001: + type:0
(op_stack_print) 
002: ( type:16
(op_stack_print) 
003: ( type:16
(op_stack_print) 
004: + type:0
(op_stack_print) 
005: * type:0
(op_stack_print) 
------------------

check_eitem: 'Z%-   ABC%*1.1)
'
check_operator: Z%-   ABC%*1.1)

check_literal:lit=',' idx=16 'Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=16 'Z%-   ABC%*1.1)
'
  ',' != 'Z'
check_literal: ret0
check_operator:ret0
check_function: 'Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=16 'Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=16 'Z%-   ABC%*1.1)
'
  '%' != 'Z'
check_literal: ret0
check_literal:lit=' "' idx=16 'Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=16 'Z%-   ABC%*1.1)
'
  '"' != 'Z'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'Z%-   ABC%*1.1)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'Z%-   ABC%*1.1)
':
check_vname ret1 '%-   ABC%*1.1)
':
check_variable: '%-   ABC%*1.1)
'
check_variable: Ary test '-   ABC%*1.1)
'
check_literal:lit='(' idx=18 '-   ABC%*1.1)
'
check_literal:After drop space:'(' idx=18 '-   ABC%*1.1)
'
  '(' != '-'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
check_eitem:ret1
scan_eitem:
check_operator: Z%-   ABC%*1.1)

check_literal:lit=',' idx=16 'Z%-   ABC%*1.1)
'
check_literal:After drop space:',' idx=16 'Z%-   ABC%*1.1)
'
  ',' != 'Z'
check_literal: ret0
check_operator:ret0
check_function: 'Z%-   ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=16 'Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=16 'Z%-   ABC%*1.1)
'
  '%' != 'Z'
check_literal: ret0
check_literal:lit=' "' idx=16 'Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=16 'Z%-   ABC%*1.1)
'
  '"' != 'Z'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'Z%-   ABC%*1.1)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'Z%-   ABC%*1.1)
':
check_vname ret1 '%-   ABC%*1.1)
':
check_variable: '%-   ABC%*1.1)
'
check_variable: Ary test '-   ABC%*1.1)
'
check_literal:lit='(' idx=18 '-   ABC%*1.1)
'
check_literal:After drop space:'(' idx=18 '-   ABC%*1.1)
'
  '(' != '-'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
scan_atom:
check_literal:lit=' %' idx=16 'Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=16 'Z%-   ABC%*1.1)
'
  '%' != 'Z'
check_literal: ret0
check_literal:lit=' "' idx=16 'Z%-   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=16 'Z%-   ABC%*1.1)
'
  '"' != 'Z'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'Z%-   ABC%*1.1)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'Z%-   ABC%*1.1)
':
check_vname ret1 '%-   ABC%*1.1)
':
check_variable: '%-   ABC%*1.1)
'
check_variable: Ary test '-   ABC%*1.1)
'
check_literal:lit='(' idx=18 '-   ABC%*1.1)
'
check_literal:After drop space:'(' idx=18 '-   ABC%*1.1)
'
  '(' != '-'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
scan_variable:
scan_vname: 'Z%-   ABC%*1.1)
'
scan_vname: ret1 'Z'
scan_variable: '%-   ABC%*1.1)
' vname='Z'
scan_variable: Ary test '-   ABC%*1.1)
'
check_literal:lit='(' idx=18 '-   ABC%*1.1)
'
check_literal:After drop space:'(' idx=18 '-   ABC%*1.1)
'
  '(' != '-'
check_literal: ret0
scan_variable:ret1 vname='Z%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'Z%' exptype:i
(operator_precedence) 
* is operator
token_is_function:
token_is_function:Z% is not function
token_is_variable: tok:'Z%'
token_is_function:
token_is_function:Z% is not function
(init_get_name) 
init_get_name:'Z%'
(init_get_name) 
init_get_name:'Z%'
(get_name) 
get_name:gn:'Z%'
process_token:type:i req_type:i
modify_expression_type:Inittype:i Intype:i Outtype:i
( output_variable) [i,(i U )] i i Z%
VAR INFO: '                Z%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
check_eitem: '-   ABC%*1.1)
'
check_operator: -   ABC%*1.1)

check_literal:lit=',' idx=18 '-   ABC%*1.1)
'
check_literal:After drop space:',' idx=18 '-   ABC%*1.1)
'
  ',' != '-'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
scan_eitem:
check_operator: -   ABC%*1.1)

check_literal:lit=',' idx=18 '-   ABC%*1.1)
'
check_literal:After drop space:',' idx=18 '-   ABC%*1.1)
'
  ',' != '-'
check_literal: ret0
check_operator: ret1
scan_operator: '-   ABC%*1.1)
'
check_literal:lit=',' idx=18 '-   ABC%*1.1)
'
check_literal:After drop space:',' idx=18 '-   ABC%*1.1)
'
  ',' != '-'
check_literal: ret0
scan_operator: ret1 '   ABC%*1.1)
'
   Frst:0 T:'-' exptype:i
(operator_precedence) 
- is operator
(operator_precedence) 
* is operator
'-' is operator
(process_token) 
Token is operator o1 name:- o2 name:*
(process_token) 
opr1:3 opr2:5
(operator_precedence) 
* is operator
Pop 1
Pop '*'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (5)

(op_stack_print) 
000: = type:0
(op_stack_print) 
001: + type:0
(op_stack_print) 
002: ( type:16
(op_stack_print) 
003: ( type:16
(op_stack_print) 
004: + type:0
(op_stack_print) 
------------------

(operator_precedence) 
- is operator
(operator_precedence) 
* is operator
( output_operator) [i,(i U )] i i *
token_is_function:
token_is_function:* is not function
(operator_precedence) 
+ is operator
(operator_precedence) 
+ is operator
(operator_left_assoc) 
- is operator
Push 1
 Push:'-'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (6)

(op_stack_print) 
000: = type:0
(op_stack_print) 
001: + type:0
(op_stack_print) 
002: ( type:16
(op_stack_print) 
003: ( type:16
(op_stack_print) 
004: + type:0
(op_stack_print) 
005: - type:0
(op_stack_print) 
------------------

check_eitem: '   ABC%*1.1)
'
check_operator:    ABC%*1.1)

check_literal:lit=',' idx=22 'ABC%*1.1)
'
check_literal:After drop space:',' idx=22 'ABC%*1.1)
'
  ',' != 'A'
check_literal: ret0
check_operator:ret0
check_function: 'ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=19 '   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=22 'ABC%*1.1)
'
  '%' != 'A'
check_literal: ret0
check_literal:lit=' "' idx=19 '   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=22 'ABC%*1.1)
'
  '"' != 'A'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'ABC%*1.1)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'ABC%*1.1)
':
check_vname ret1 '%*1.1)
':
check_variable: '%*1.1)
'
check_variable: Ary test '*1.1)
'
check_literal:lit='(' idx=26 '*1.1)
'
check_literal:After drop space:'(' idx=26 '*1.1)
'
  '(' != '*'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
check_eitem:ret1
scan_eitem:
check_operator:    ABC%*1.1)

check_literal:lit=',' idx=22 'ABC%*1.1)
'
check_literal:After drop space:',' idx=22 'ABC%*1.1)
'
  ',' != 'A'
check_literal: ret0
check_operator:ret0
check_function: 'ABC%*1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=19 '   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=22 'ABC%*1.1)
'
  '%' != 'A'
check_literal: ret0
check_literal:lit=' "' idx=19 '   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=22 'ABC%*1.1)
'
  '"' != 'A'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'ABC%*1.1)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'ABC%*1.1)
':
check_vname ret1 '%*1.1)
':
check_variable: '%*1.1)
'
check_variable: Ary test '*1.1)
'
check_literal:lit='(' idx=26 '*1.1)
'
check_literal:After drop space:'(' idx=26 '*1.1)
'
  '(' != '*'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
scan_atom:
check_literal:lit=' %' idx=19 '   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'%' idx=22 'ABC%*1.1)
'
  '%' != 'A'
check_literal: ret0
check_literal:lit=' "' idx=19 '   ABC%*1.1)
'
    dropping space
check_literal:After drop space:'"' idx=22 'ABC%*1.1)
'
  '"' != 'A'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'ABC%*1.1)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'ABC%*1.1)
':
check_vname ret1 '%*1.1)
':
check_variable: '%*1.1)
'
check_variable: Ary test '*1.1)
'
check_literal:lit='(' idx=26 '*1.1)
'
check_literal:After drop space:'(' idx=26 '*1.1)
'
  '(' != '*'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
scan_variable:
scan_vname: '   ABC%*1.1)
'
scan_vname: ret1 'ABC'
scan_variable: '%*1.1)
' vname='ABC'
scan_variable: Ary test '*1.1)
'
check_literal:lit='(' idx=26 '*1.1)
'
check_literal:After drop space:'(' idx=26 '*1.1)
'
  '(' != '*'
check_literal: ret0
scan_variable:ret1 vname='ABC%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'ABC%' exptype:i
(operator_precedence) 
- is operator
token_is_function:
token_is_function:ABC% is not function
token_is_variable: tok:'ABC%'
token_is_function:
token_is_function:ABC% is not function
(init_get_name) 
init_get_name:'ABC%'
(init_get_name) 
init_get_name:'ABC%'
(get_name) 
get_name:gn:'ABC%'
process_token:type:i req_type:i
modify_expression_type:Inittype:i Intype:i Outtype:i
( output_variable) [i,(i U )] i i ABC%
VAR INFO: '              ABC%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
check_eitem: '*1.1)
'
check_operator: *1.1)

check_literal:lit=',' idx=26 '*1.1)
'
check_literal:After drop space:',' idx=26 '*1.1)
'
  ',' != '*'
check_literal: ret0
check_operator: ret1
check_eitem:ret1
scan_eitem:
check_operator: *1.1)

check_literal:lit=',' idx=26 '*1.1)
'
check_literal:After drop space:',' idx=26 '*1.1)
'
  ',' != '*'
check_literal: ret0
check_operator: ret1
scan_operator: '*1.1)
'
check_literal:lit=',' idx=26 '*1.1)
'
check_literal:After drop space:',' idx=26 '*1.1)
'
  ',' != '*'
check_literal: ret0
scan_operator: ret1 '1.1)
'
   Frst:0 T:'*' exptype:i
(operator_precedence) 
* is operator
(operator_precedence) 
- is operator
'*' is operator
(process_token) 
Token is operator o1 name:* o2 name:-
(process_token) 
opr1:5 opr2:3
(operator_precedence) 
- is operator
(operator_precedence) 
- is operator
Push 1
 Push:'*'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (7)

(op_stack_print) 
000: = type:0
(op_stack_print) 
001: + type:0
(op_stack_print) 
002: ( type:16
(op_stack_print) 
003: ( type:16
(op_stack_print) 
004: + type:0
(op_stack_print) 
005: - type:0
(op_stack_print) 
006: * type:0
(op_stack_print) 
------------------

check_eitem: '1.1)
'
check_operator: 1.1)

check_literal:lit=',' idx=27 '1.1)
'
check_literal:After drop space:',' idx=27 '1.1)
'
  ',' != '1'
check_literal: ret0
check_operator:ret0
check_function: '1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=27 '1.1)
'
    dropping space
check_literal:After drop space:'%' idx=27 '1.1)
'
  '%' != '1'
check_literal: ret0
check_literal:lit=' "' idx=27 '1.1)
'
    dropping space
check_literal:After drop space:'"' idx=27 '1.1)
'
  '"' != '1'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
isfloatdigit:
isfloatdigit:
check_float: ret1
check_number: ret1
check_eitem:ret1
scan_eitem:
check_operator: 1.1)

check_literal:lit=',' idx=27 '1.1)
'
check_literal:After drop space:',' idx=27 '1.1)
'
  ',' != '1'
check_literal: ret0
check_operator:ret0
check_function: '1.1)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=27 '1.1)
'
    dropping space
check_literal:After drop space:'%' idx=27 '1.1)
'
  '%' != '1'
check_literal: ret0
check_literal:lit=' "' idx=27 '1.1)
'
    dropping space
check_literal:After drop space:'"' idx=27 '1.1)
'
  '"' != '1'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
isfloatdigit:
isfloatdigit:
check_float: ret1
check_number: ret1
scan_atom:
check_literal:lit=' %' idx=27 '1.1)
'
    dropping space
check_literal:After drop space:'%' idx=27 '1.1)
'
  '%' != '1'
check_literal: ret0
check_literal:lit=' "' idx=27 '1.1)
'
    dropping space
check_literal:After drop space:'"' idx=27 '1.1)
'
  '"' != '1'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
isfloatdigit:
isfloatdigit:
check_float: ret1
check_number: ret1
scan_number:
check_float:
isfloatdigit:
isfloatdigit:
isfloatdigit:
isfloatdigit:
check_float: ret1
scan_float:
isfloatdigit:
isfloatdigit:
isfloatdigit:
isfloatdigit:
scan_float: ret1
   Frst:0 T:'1.1' exptype:i
(operator_precedence) 
* is operator
modify_expression_type:Inittype:i Intype:f Outtype:f
(    output_float) [f,(i U )] f f 1.1
check_eitem: ')
'
check_operator: )

check_literal:lit=',' idx=30 ')
'
check_literal:After drop space:',' idx=30 ')
'
  ',' != ')'
check_literal: ret0
check_operator:ret0
check_function: ')
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=30 ')
'
    dropping space
check_literal:After drop space:'%' idx=30 ')
'
  '%' != ')'
check_literal: ret0
check_literal:lit=' "' idx=30 ')
'
    dropping space
check_literal:After drop space:'"' idx=30 ')
'
  '"' != ')'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: ')
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname ')
':
check_vname ret0 ')
':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=30 ')
'
    dropping space
check_literal:After drop space:'(' idx=30 ')
'
  '(' != ')'
check_literal: ret0
check_sub_expr: ret0
check_eitem:ret0
scan_expression: ret1 ')
'
scan_literal:lit=' )' ')
'
scan_literal:After drop space:)

scan_literal:while loop:)

   Frst:0 T:')' exptype:f
(operator_precedence) 
* is operator
(process_token) 
Pop 3
Pop '*'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (6)

(op_stack_print) 
000: = type:0
(op_stack_print) 
001: + type:0
(op_stack_print) 
002: ( type:16
(op_stack_print) 
003: ( type:16
(op_stack_print) 
004: + type:0
(op_stack_print) 
005: - type:0
(op_stack_print) 
------------------

( output_operator) [f,(i U )] i i *
token_is_function:
token_is_function:* is not function
(process_token) 
Pop 3
Pop '-'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (5)

(op_stack_print) 
000: = type:0
(op_stack_print) 
001: + type:0
(op_stack_print) 
002: ( type:16
(op_stack_print) 
003: ( type:16
(op_stack_print) 
004: + type:0
(op_stack_print) 
------------------

( output_operator) [f,(i U )] i i -
token_is_function:
token_is_function:- is not function
(process_token) 
Pop 3
Pop '+'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (4)

(op_stack_print) 
000: = type:0
(op_stack_print) 
001: + type:0
(op_stack_print) 
002: ( type:16
(op_stack_print) 
003: ( type:16
(op_stack_print) 
------------------

( output_operator) [f,(i U )] i i +
token_is_function:
token_is_function:+ is not function
Pop 4
Pop '('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (3)

(op_stack_print) 
000: = type:0
(op_stack_print) 
001: + type:0
(op_stack_print) 
002: ( type:16
(op_stack_print) 
------------------

(  output_sub_end)
token_is_function:
token_is_function:( is not function
(  output_sub_end)
   Frst:0 T:')' exptype:U
Pop 4
Pop '('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (2)

(op_stack_print) 
000: = type:0
(op_stack_print) 
001: + type:0
(op_stack_print) 
------------------

(  output_sub_end)
token_is_function:
token_is_function:+ is not function
(  output_sub_end)
scan_sub_expr:ret1
check_eitem: '
'
check_operator: 

check_literal:lit=',' idx=32 ''
check_literal:After drop space:',' idx=32 ''
check_literal  ret0 Empty test string
check_operator:ret0
check_function: ''
check_function: ret0
check_atom:
check_literal:lit=' %' idx=31 '
'
    dropping space
check_literal:After drop space:'%' idx=32 ''
check_literal  ret0 Empty test string
check_literal:lit=' "' idx=31 '
'
    dropping space
check_literal:After drop space:'"' idx=32 ''
check_literal  ret0 Empty test string
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: ''
check_integer:ret0
check_number: ret0
check_variable:
check_vname '':
check_vname ret0 '':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=31 '
'
    dropping space
check_literal:After drop space:'(' idx=32 ''
check_literal  ret0 Empty test string
check_sub_expr: ret0
check_eitem:ret0
scan_expression: ret1 '
'
scan_assignment: ret1
Finalise stack
Pop '+'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: = type:0
(op_stack_print) 
------------------

( output_operator) [i,()] i i +
token_is_function:
token_is_function:+ is not function
Pop '='
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_operator) [i,()] i i =
token_is_function:
token_is_function:= is not function
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i A%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i *  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i Z%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i *  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i ABC%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FLT          f rq:f 1.1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i *  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i -  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i +  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i +  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i =  0:
=================
 BE:A
type_check_stack_push: 'A'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'A' type:f (1)
 BE:A%
type_check_stack_push: 'A%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'A' type:f (1)
001: 'A%' type:i (0)
 BE:

Type Check Stack (2)

000: 'A' type:f (1)
001: 'A%' type:i (0)
 BE:

Type Check Stack (2)

000: 'A' type:f (1)
001: 'A%' type:i (0)
 BE:2
type_check_stack_push: '2'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (3)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A%' type:0
(type_check_stack_print) 
002: '2' type:0
(type_check_stack_print) 
------------------


Type Check Stack (3)

000: 'A' type:f (1)
001: 'A%' type:i (0)
002: '2' type:i (0)
 BE:3
type_check_stack_push: '3'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (4)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A%' type:0
(type_check_stack_print) 
002: '2' type:0
(type_check_stack_print) 
003: '3' type:0
(type_check_stack_print) 
------------------


Type Check Stack (4)

000: 'A' type:f (1)
001: 'A%' type:i (0)
002: '2' type:i (0)
003: '3' type:i (0)
 BE:*
BUFF_ID_OPERATOR
Found operator *
type_check_stack_pop: '3'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (3)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A%' type:0
(type_check_stack_print) 
002: '2' type:0
(type_check_stack_print) 
------------------

type_check_stack_pop: '2'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A%' type:0
(type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (3)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A%' type:0
(type_check_stack_print) 
002: '000' type:0
(type_check_stack_print) 
------------------


Type Check Stack (3)

000: 'A' type:f (1)
001: 'A%' type:i (0)
002: '000' type:i (0)
 BE:3
type_check_stack_push: '3'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (4)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A%' type:0
(type_check_stack_print) 
002: '000' type:0
(type_check_stack_print) 
003: '3' type:0
(type_check_stack_print) 
------------------


Type Check Stack (4)

000: 'A' type:f (1)
001: 'A%' type:i (0)
002: '000' type:i (0)
003: '3' type:i (0)
 BE:Z%
type_check_stack_push: 'Z%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (5)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A%' type:0
(type_check_stack_print) 
002: '000' type:0
(type_check_stack_print) 
003: '3' type:0
(type_check_stack_print) 
004: 'Z%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (5)

000: 'A' type:f (1)
001: 'A%' type:i (0)
002: '000' type:i (0)
003: '3' type:i (0)
004: 'Z%' type:i (0)
 BE:*
BUFF_ID_OPERATOR
Found operator *
type_check_stack_pop: 'Z%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (4)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A%' type:0
(type_check_stack_print) 
002: '000' type:0
(type_check_stack_print) 
003: '3' type:0
(type_check_stack_print) 
------------------

type_check_stack_pop: '3'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (3)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A%' type:0
(type_check_stack_print) 
002: '000' type:0
(type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (4)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A%' type:0
(type_check_stack_print) 
002: '000' type:0
(type_check_stack_print) 
003: '000' type:0
(type_check_stack_print) 
------------------


Type Check Stack (4)

000: 'A' type:f (1)
001: 'A%' type:i (0)
002: '000' type:i (0)
003: '000' type:i (0)
 BE:ABC%
type_check_stack_push: 'ABC%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (5)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A%' type:0
(type_check_stack_print) 
002: '000' type:0
(type_check_stack_print) 
003: '000' type:0
(type_check_stack_print) 
004: 'ABC%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (5)

000: 'A' type:f (1)
001: 'A%' type:i (0)
002: '000' type:i (0)
003: '000' type:i (0)
004: 'ABC%' type:i (0)
 BE:1.1
type_check_stack_push: '1.1'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (6)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A%' type:0
(type_check_stack_print) 
002: '000' type:0
(type_check_stack_print) 
003: '000' type:0
(type_check_stack_print) 
004: 'ABC%' type:0
(type_check_stack_print) 
005: '1.1' type:1
(type_check_stack_print) 
------------------


Type Check Stack (6)

000: 'A' type:f (1)
001: 'A%' type:i (0)
002: '000' type:i (0)
003: '000' type:i (0)
004: 'ABC%' type:i (0)
005: '1.1' type:f (1)
 BE:*
BUFF_ID_OPERATOR
Found operator *
type_check_stack_pop: '1.1'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (5)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A%' type:0
(type_check_stack_print) 
002: '000' type:0
(type_check_stack_print) 
003: '000' type:0
(type_check_stack_print) 
004: 'ABC%' type:0
(type_check_stack_print) 
------------------

type_check_stack_pop: 'ABC%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (4)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A%' type:0
(type_check_stack_print) 
002: '000' type:0
(type_check_stack_print) 
003: '000' type:0
(type_check_stack_print) 
------------------

 Mutable type 1 0
type_with_least_conversion_from: f i => f
type_with_least_conversion_from: f i => f
 Autoconversion
 --------------
 Op1: type:1 req type:1
 Op2: type:0 req type:0
 BE:  type:1 req type:1
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i A%  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 6 5
(dump_exp_buffer2) N8 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_VARIABLE     i rq:i Z%  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 9 8
(dump_exp_buffer2) N11 EXP_BUFF_ID_VARIABLE     i rq:i ABC%  0:
(dump_exp_buffer2) N12 EXP_BUFF_ID_FLT          f rq:f 1.1  0:
=================
 Insert after 11 exp_buffer2_i:12
   Found at i:10
   Copied 11 to 12:
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i A%  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 6 5
(dump_exp_buffer2) N8 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_VARIABLE     i rq:i Z%  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 9 8
(dump_exp_buffer2) N11 EXP_BUFF_ID_VARIABLE     i rq:i ABC%  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 12 11
(dump_exp_buffer2) N12 EXP_BUFF_ID_FLT          f rq:f 1.1  0:
=================
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (5)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A%' type:0
(type_check_stack_print) 
002: '000' type:0
(type_check_stack_print) 
003: '000' type:0
(type_check_stack_print) 
004: '000' type:1
(type_check_stack_print) 
------------------


Type Check Stack (5)

000: 'A' type:f (1)
001: 'A%' type:i (0)
002: '000' type:i (0)
003: '000' type:i (0)
004: '000' type:f (1)
 BE:-
BUFF_ID_OPERATOR
Found operator -
type_check_stack_pop: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (4)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A%' type:0
(type_check_stack_print) 
002: '000' type:0
(type_check_stack_print) 
003: '000' type:0
(type_check_stack_print) 
------------------

type_check_stack_pop: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (3)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A%' type:0
(type_check_stack_print) 
002: '000' type:0
(type_check_stack_print) 
------------------

 Mutable type 1 0
type_with_least_conversion_from: f i => f
type_with_least_conversion_from: f i => f
 Autoconversion
 --------------
 Op1: type:1 req type:1
 Op2: type:0 req type:0
 BE:  type:1 req type:1
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i A%  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 6 5
(dump_exp_buffer2) N8 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_VARIABLE     i rq:i Z%  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 9 8
(dump_exp_buffer2) N11 EXP_BUFF_ID_VARIABLE     i rq:i ABC%  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 12 11
(dump_exp_buffer2) N12 EXP_BUFF_ID_FLT          f rq:f 1.1  0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_OPERATOR     f rq:f *  2: 12 11
=================
 Insert after 10 exp_buffer2_i:14
   Found at i:9
   Copied 13 to 14:
   Copied 12 to 13:
   Copied 11 to 12:
   Copied 10 to 11:
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i A%  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 6 5
(dump_exp_buffer2) N8 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_VARIABLE     i rq:i Z%  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 9 8
(dump_exp_buffer2) N16 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 13 10
(dump_exp_buffer2) N11 EXP_BUFF_ID_VARIABLE     i rq:i ABC%  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 12 11
(dump_exp_buffer2) N12 EXP_BUFF_ID_FLT          f rq:f 1.1  0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_OPERATOR     f rq:f *  2: 12 11
=================
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (4)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A%' type:0
(type_check_stack_print) 
002: '000' type:0
(type_check_stack_print) 
003: '000' type:1
(type_check_stack_print) 
------------------


Type Check Stack (4)

000: 'A' type:f (1)
001: 'A%' type:i (0)
002: '000' type:i (0)
003: '000' type:f (1)
 BE:+
BUFF_ID_OPERATOR
Found operator +
type_check_stack_pop: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (3)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A%' type:0
(type_check_stack_print) 
002: '000' type:0
(type_check_stack_print) 
------------------

type_check_stack_pop: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A%' type:0
(type_check_stack_print) 
------------------

 Mutable type 1 0
type_with_least_conversion_from: f i => f
type_with_least_conversion_from: f i => f
 Autoconversion
 --------------
 Op1: type:1 req type:1
 Op2: type:0 req type:0
 BE:  type:1 req type:1
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i A%  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 6 5
(dump_exp_buffer2) N8 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_VARIABLE     i rq:i Z%  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 9 8
(dump_exp_buffer2) N16 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 13 10
(dump_exp_buffer2) N11 EXP_BUFF_ID_VARIABLE     i rq:i ABC%  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 12 11
(dump_exp_buffer2) N12 EXP_BUFF_ID_FLT          f rq:f 1.1  0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_OPERATOR     f rq:f *  2: 12 11
(dump_exp_buffer2) N15 EXP_BUFF_ID_OPERATOR     f rq:f -  2: 13 10
=================
 Insert after 7 exp_buffer2_i:16
   Found at i:6
   Copied 15 to 16:
   Copied 14 to 15:
   Copied 13 to 14:
   Copied 12 to 13:
   Copied 11 to 12:
   Copied 10 to 11:
   Copied 9 to 10:
   Copied 8 to 9:
   Copied 7 to 8:
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i A%  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 6 5
(dump_exp_buffer2) N18 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 15 7
(dump_exp_buffer2) N8 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_VARIABLE     i rq:i Z%  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 9 8
(dump_exp_buffer2) N16 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 13 10
(dump_exp_buffer2) N11 EXP_BUFF_ID_VARIABLE     i rq:i ABC%  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 12 11
(dump_exp_buffer2) N12 EXP_BUFF_ID_FLT          f rq:f 1.1  0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_OPERATOR     f rq:f *  2: 12 11
(dump_exp_buffer2) N15 EXP_BUFF_ID_OPERATOR     f rq:f -  2: 13 10
=================
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (3)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A%' type:0
(type_check_stack_print) 
002: '000' type:1
(type_check_stack_print) 
------------------


Type Check Stack (3)

000: 'A' type:f (1)
001: 'A%' type:i (0)
002: '000' type:f (1)
 BE:

Type Check Stack (3)

000: 'A' type:f (1)
001: 'A%' type:i (0)
002: '000' type:f (1)
 BE:

Type Check Stack (3)

000: 'A' type:f (1)
001: 'A%' type:i (0)
002: '000' type:f (1)
 BE:

Type Check Stack (3)

000: 'A' type:f (1)
001: 'A%' type:i (0)
002: '000' type:f (1)
 BE:

Type Check Stack (3)

000: 'A' type:f (1)
001: 'A%' type:i (0)
002: '000' type:f (1)
 BE:+
BUFF_ID_OPERATOR
Found operator +
type_check_stack_pop: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: 'A%' type:0
(type_check_stack_print) 
------------------

type_check_stack_pop: 'A%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
------------------

 Mutable type 1 0
type_with_least_conversion_from: f i => f
type_with_least_conversion_from: f i => f
 Autoconversion
 --------------
 Op1: type:1 req type:1
 Op2: type:0 req type:0
 BE:  type:1 req type:1
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i A%  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 6 5
(dump_exp_buffer2) N18 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 15 7
(dump_exp_buffer2) N8 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_VARIABLE     i rq:i Z%  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 9 8
(dump_exp_buffer2) N16 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 13 10
(dump_exp_buffer2) N11 EXP_BUFF_ID_VARIABLE     i rq:i ABC%  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 12 11
(dump_exp_buffer2) N12 EXP_BUFF_ID_FLT          f rq:f 1.1  0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_OPERATOR     f rq:f *  2: 12 11
(dump_exp_buffer2) N15 EXP_BUFF_ID_OPERATOR     f rq:f -  2: 13 10
(dump_exp_buffer2) N17 EXP_BUFF_ID_OPERATOR     f rq:f +  2: 15 7
(dump_exp_buffer2) N19 EXP_BUFF_ID_SUB_END      U rq:i   0:
(dump_exp_buffer2) N20 EXP_BUFF_ID_SUB_END      U rq:i   0:
(dump_exp_buffer2) N21 EXP_BUFF_ID_SUB_END      U rq:i   0:
(dump_exp_buffer2) N22 EXP_BUFF_ID_SUB_END      U rq:i   0:
=================
 Insert after 2 exp_buffer2_i:22
   Found at i:1
   Copied 21 to 22:
   Copied 20 to 21:
   Copied 19 to 20:
   Copied 18 to 19:
   Copied 17 to 18:
   Copied 16 to 17:
   Copied 15 to 16:
   Copied 14 to 15:
   Copied 13 to 14:
   Copied 12 to 13:
   Copied 11 to 12:
   Copied 10 to 11:
   Copied 9 to 10:
   Copied 8 to 9:
   Copied 7 to 8:
   Copied 6 to 7:
   Copied 5 to 6:
   Copied 4 to 5:
   Copied 3 to 4:
   Copied 2 to 3:
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i A%  0:
(dump_exp_buffer2) N24 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 17 2
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 6 5
(dump_exp_buffer2) N18 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 15 7
(dump_exp_buffer2) N8 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_VARIABLE     i rq:i Z%  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 9 8
(dump_exp_buffer2) N16 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 13 10
(dump_exp_buffer2) N11 EXP_BUFF_ID_VARIABLE     i rq:i ABC%  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 12 11
(dump_exp_buffer2) N12 EXP_BUFF_ID_FLT          f rq:f 1.1  0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_OPERATOR     f rq:f *  2: 12 11
(dump_exp_buffer2) N15 EXP_BUFF_ID_OPERATOR     f rq:f -  2: 13 10
(dump_exp_buffer2) N17 EXP_BUFF_ID_OPERATOR     f rq:f +  2: 15 7
(dump_exp_buffer2) N19 EXP_BUFF_ID_SUB_END      U rq:i   0:
(dump_exp_buffer2) N20 EXP_BUFF_ID_SUB_END      U rq:i   0:
(dump_exp_buffer2) N21 EXP_BUFF_ID_SUB_END      U rq:i   0:
(dump_exp_buffer2) N22 EXP_BUFF_ID_SUB_END      U rq:i   0:
=================
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
001: '000' type:1
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'A' type:f (1)
001: '000' type:f (1)
 BE::=
BUFF_ID_OPERATOR
Found operator :=
type_check_stack_pop: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'A' type:1
(type_check_stack_print) 
------------------

type_check_stack_pop: 'A'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (0)

(type_check_stack_print) 
------------------

 Mutable type 1 1
type_with_least_conversion_from: f f => f
type_with_least_conversion_from: f f => f
 Same type
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:1
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:f (1)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i A%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i *  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i Z%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i *  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i ABC%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FLT          f rq:f 1.1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i *  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i -  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i +  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i +  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i :=  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i A%  0:
(dump_exp_buffer2) N24 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 17 2
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 6 5
(dump_exp_buffer2) N18 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 15 7
(dump_exp_buffer2) N8 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_VARIABLE     i rq:i Z%  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 9 8
(dump_exp_buffer2) N16 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 13 10
(dump_exp_buffer2) N11 EXP_BUFF_ID_VARIABLE     i rq:i ABC%  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 12 11
(dump_exp_buffer2) N12 EXP_BUFF_ID_FLT          f rq:f 1.1  0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_OPERATOR     f rq:f *  2: 12 11
(dump_exp_buffer2) N15 EXP_BUFF_ID_OPERATOR     f rq:f -  2: 13 10
(dump_exp_buffer2) N17 EXP_BUFF_ID_OPERATOR     f rq:f +  2: 15 7
(dump_exp_buffer2) N19 EXP_BUFF_ID_SUB_END      U rq:i   0:
(dump_exp_buffer2) N20 EXP_BUFF_ID_SUB_END      U rq:i   0:
(dump_exp_buffer2) N21 EXP_BUFF_ID_SUB_END      U rq:i   0:
(dump_exp_buffer2) N22 EXP_BUFF_ID_SUB_END      U rq:i   0:
(dump_exp_buffer2) N23 EXP_BUFF_ID_OPERATOR     f rq:f +  2: 17 2
(dump_exp_buffer2) N25 EXP_BUFF_ID_OPERATOR     f rq:f :=  2: 23 1
=================
(process_expression_types) 
==INFIX==

infix_stack_push: 'A'
infix_stack_push: 'A%'
infix_stack_push: '2'
infix_stack_push: '3'
infix_stack_pop: '3'
infix_stack_pop: '2'
infix_stack_push: '(2 * 3)'
infix_stack_push: '3'
infix_stack_push: 'Z%'
infix_stack_pop: 'Z%'
infix_stack_pop: '3'
infix_stack_push: '(3 * Z%)'
infix_stack_push: 'ABC%'
infix_stack_push: '1.1'
infix_stack_pop: '1.1'
infix_stack_pop: 'ABC%'
infix_stack_push: '(ABC% * 1.1)'
infix_stack_pop: '(ABC% * 1.1)'
infix_stack_pop: '(3 * Z%)'
infix_stack_push: '((3 * Z%) - (ABC% * 1.1))'
infix_stack_pop: '((3 * Z%) - (ABC% * 1.1))'
infix_stack_pop: '(2 * 3)'
infix_stack_push: '((2 * 3) + ((3 * Z%) - (ABC% * 1.1)))'
infix_stack_pop: '((2 * 3) + ((3 * Z%) - (ABC% * 1.1)))'
infix_stack_pop: 'A%'
infix_stack_push: '(A% + ((2 * 3) + ((3 * Z%) - (ABC% * 1.1))))'
infix_stack_pop: '(A% + ((2 * 3) + ((3 * Z%) - (ABC% * 1.1))))'
infix_stack_pop: 'A'
infix_stack_push: '(A := (A% + ((2 * 3) + ((3 * Z%) - (ABC% * 1.1)))))'
infix_stack_pop: '(A := (A% + ((2 * 3) + ((3 * Z%) - (ABC% * 1.1)))))'
(process_expression_types) ==(A := (A% + ((2 * 3) + ((3 * Z%) - (ABC% * 1.1)))))==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     i rq:i A%  0:
(    output_qcode) N24 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 17 2
(    output_qcode) N3 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N4 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N5 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
(    output_qcode) N6 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(    output_qcode) N7 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 6 5
(    output_qcode) N18 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 15 7
(    output_qcode) N8 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(    output_qcode) N9 EXP_BUFF_ID_VARIABLE     i rq:i Z%  0:
(    output_qcode) N10 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 9 8
(    output_qcode) N16 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 13 10
(    output_qcode) N11 EXP_BUFF_ID_VARIABLE     i rq:i ABC%  0:
(    output_qcode) N14 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 12 11
(    output_qcode) N12 EXP_BUFF_ID_FLT          f rq:f 1.1  0:
(    output_qcode) N13 EXP_BUFF_ID_OPERATOR     f rq:f *  2: 12 11
(    output_qcode) N15 EXP_BUFF_ID_OPERATOR     f rq:f -  2: 13 10
(    output_qcode) N17 EXP_BUFF_ID_OPERATOR     f rq:f +  2: 15 7
(    output_qcode) N19 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N20 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N21 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N22 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N23 EXP_BUFF_ID_OPERATOR     f rq:f +  2: 17 2
(    output_qcode) N25 EXP_BUFF_ID_OPERATOR     f rq:f :=  2: 23 1
check_literal:lit=':' idx=32 ''
check_literal:After drop space:':' idx=32 ''
check_literal  ret0 Empty test string
(translate_file) 
cline scanned OK
(translate_file) 
=======================cline==========================
(translate_file) 
==A% = 20
==
scan_cline:
check_line:
check_assignment:
check_variable:
check_vname 'A% = 20
':
check_vname ret1 '% = 20
':
check_variable: '% = 20
'
check_variable: Ary test ' = 20
'
check_literal:lit='(' idx=2 ' = 20
'
check_literal:After drop space:'(' idx=2 ' = 20
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
check_literal:lit=' =' idx=2 ' = 20
'
    dropping space
check_literal:After drop space:'=' idx=3 '= 20
'
check_literal:After while(): 20

check_literal:ret1 
check_expression: '20
'
check_eitem: '20
'
check_operator: 20

check_literal:lit=',' idx=5 '20
'
check_literal:After drop space:',' idx=5 '20
'
  ',' != '2'
check_literal: ret0
check_operator:ret0
check_function: '20
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=5 '20
'
    dropping space
check_literal:After drop space:'%' idx=5 '20
'
  '%' != '2'
check_literal: ret0
check_literal:lit=' "' idx=5 '20
'
    dropping space
check_literal:After drop space:'"' idx=5 '20
'
  '"' != '2'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '20
'
check_integer:ret1
check_number: ret1
check_eitem:ret1
check_eitem: '
'
check_operator: 

check_literal:lit=',' idx=8 ''
check_literal:After drop space:',' idx=8 ''
check_literal  ret0 Empty test string
check_operator:ret0
check_function: ''
check_function: ret0
check_atom:
check_literal:lit=' %' idx=7 '
'
    dropping space
check_literal:After drop space:'%' idx=8 ''
check_literal  ret0 Empty test string
check_literal:lit=' "' idx=7 '
'
    dropping space
check_literal:After drop space:'"' idx=8 ''
check_literal  ret0 Empty test string
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: ''
check_integer:ret0
check_number: ret0
check_variable:
check_vname '':
check_vname ret0 '':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=7 '
'
    dropping space
check_literal:After drop space:'(' idx=8 ''
check_literal  ret0 Empty test string
check_sub_expr: ret0
check_eitem:ret0
check_expression:ret1 '
'
check_assignment:ret1
check_line:ret1
scan_cline: Checked len=1, '
'
========================================================
A% = 20

========================================================
(output_expression_start)
scan_line:
check_assignment:
check_variable:
check_vname 'A% = 20
':
check_vname ret1 '% = 20
':
check_variable: '% = 20
'
check_variable: Ary test ' = 20
'
check_literal:lit='(' idx=2 ' = 20
'
check_literal:After drop space:'(' idx=2 ' = 20
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
check_literal:lit=' =' idx=2 ' = 20
'
    dropping space
check_literal:After drop space:'=' idx=3 '= 20
'
check_literal:After while(): 20

check_literal:ret1 
check_expression: '20
'
check_eitem: '20
'
check_operator: 20

check_literal:lit=',' idx=5 '20
'
check_literal:After drop space:',' idx=5 '20
'
  ',' != '2'
check_literal: ret0
check_operator:ret0
check_function: '20
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=5 '20
'
    dropping space
check_literal:After drop space:'%' idx=5 '20
'
  '%' != '2'
check_literal: ret0
check_literal:lit=' "' idx=5 '20
'
    dropping space
check_literal:After drop space:'"' idx=5 '20
'
  '"' != '2'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '20
'
check_integer:ret1
check_number: ret1
check_eitem:ret1
check_eitem: '
'
check_operator: 

check_literal:lit=',' idx=8 ''
check_literal:After drop space:',' idx=8 ''
check_literal  ret0 Empty test string
check_operator:ret0
check_function: ''
check_function: ret0
check_atom:
check_literal:lit=' %' idx=7 '
'
    dropping space
check_literal:After drop space:'%' idx=8 ''
check_literal  ret0 Empty test string
check_literal:lit=' "' idx=7 '
'
    dropping space
check_literal:After drop space:'"' idx=8 ''
check_literal  ret0 Empty test string
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: ''
check_integer:ret0
check_number: ret0
check_variable:
check_vname '':
check_vname ret0 '':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=7 '
'
    dropping space
check_literal:After drop space:'(' idx=8 ''
check_literal  ret0 Empty test string
check_sub_expr: ret0
check_eitem:ret0
check_expression:ret1 '
'
check_assignment:ret1
scan_assignment:
scan_variable:
scan_vname: 'A% = 20
'
scan_vname: ret1 'A'
scan_variable: '% = 20
' vname='A'
scan_variable: Ary test ' = 20
'
check_literal:lit='(' idx=2 ' = 20
'
check_literal:After drop space:'(' idx=2 ' = 20
'
  '(' != ' '
check_literal: ret0
scan_variable:ret1 vname='A%' is str:0 int:1 flt:0 ary:0
   Frst:1 T:'A%' exptype:U
token_is_function:
token_is_function:A% is not function
token_is_variable: tok:'A%'
token_is_function:
token_is_function:A% is not function
(init_get_name) 
init_get_name:'A%'
(init_get_name) 
init_get_name:'A%'
(get_name) 
get_name:gn:'A%'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] i i A%
VAR INFO: '                A%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
scan_literal:lit=' =' ' = 20
'
scan_literal:After drop space:= 20

scan_literal:while loop:= 20

   Frst:0 T:'=' exptype:i
(operator_precedence) 
= is operator
'=' is operator
(process_token) 
Token is operator o1 name:= o2 name:
(process_token) 
opr1:1 opr2:0
Push 1
 Push:'='
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: = type:0
(op_stack_print) 
------------------

scan_expression: ' 20
'
check_eitem: '20
'
check_operator: 20

check_literal:lit=',' idx=5 '20
'
check_literal:After drop space:',' idx=5 '20
'
  ',' != '2'
check_literal: ret0
check_operator:ret0
check_function: '20
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=5 '20
'
    dropping space
check_literal:After drop space:'%' idx=5 '20
'
  '%' != '2'
check_literal: ret0
check_literal:lit=' "' idx=5 '20
'
    dropping space
check_literal:After drop space:'"' idx=5 '20
'
  '"' != '2'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '20
'
check_integer:ret1
check_number: ret1
check_eitem:ret1
scan_eitem:
check_operator: 20

check_literal:lit=',' idx=5 '20
'
check_literal:After drop space:',' idx=5 '20
'
  ',' != '2'
check_literal: ret0
check_operator:ret0
check_function: '20
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=5 '20
'
    dropping space
check_literal:After drop space:'%' idx=5 '20
'
  '%' != '2'
check_literal: ret0
check_literal:lit=' "' idx=5 '20
'
    dropping space
check_literal:After drop space:'"' idx=5 '20
'
  '"' != '2'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '20
'
check_integer:ret1
check_number: ret1
scan_atom:
check_literal:lit=' %' idx=5 '20
'
    dropping space
check_literal:After drop space:'%' idx=5 '20
'
  '%' != '2'
check_literal: ret0
check_literal:lit=' "' idx=5 '20
'
    dropping space
check_literal:After drop space:'"' idx=5 '20
'
  '"' != '2'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '20
'
check_integer:ret1
check_number: ret1
scan_number:
check_float:
isfloatdigit:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '20
'
check_integer:ret1
scan_integer:
scan_integer:ret1
   Frst:0 T:'20' exptype:i
(operator_precedence) 
= is operator
modify_expression_type:Inittype:i Intype:i Outtype:i
(  output_integer) [i,()] i i 20
scan_integer:ret1  20
check_eitem: '
'
check_operator: 

check_literal:lit=',' idx=8 ''
check_literal:After drop space:',' idx=8 ''
check_literal  ret0 Empty test string
check_operator:ret0
check_function: ''
check_function: ret0
check_atom:
check_literal:lit=' %' idx=7 '
'
    dropping space
check_literal:After drop space:'%' idx=8 ''
check_literal  ret0 Empty test string
check_literal:lit=' "' idx=7 '
'
    dropping space
check_literal:After drop space:'"' idx=8 ''
check_literal  ret0 Empty test string
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: ''
check_integer:ret0
check_number: ret0
check_variable:
check_vname '':
check_vname ret0 '':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=7 '
'
    dropping space
check_literal:After drop space:'(' idx=8 ''
check_literal  ret0 Empty test string
check_sub_expr: ret0
check_eitem:ret0
scan_expression: ret1 '
'
scan_assignment: ret1
Finalise stack
Pop '='
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_operator) [i,()] i i =
token_is_function:
token_is_function:= is not function
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i A%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 20  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i =  0:
=================
 BE:A%
type_check_stack_push: 'A%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'A%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'A%' type:i (0)
 BE:20
type_check_stack_push: '20'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'A%' type:0
(type_check_stack_print) 
001: '20' type:0
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'A%' type:i (0)
001: '20' type:i (0)
 BE::=
BUFF_ID_OPERATOR
Found operator :=
type_check_stack_pop: '20'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'A%' type:0
(type_check_stack_print) 
------------------

type_check_stack_pop: 'A%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (0)

(type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i A%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 20  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i :=  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i A%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i 20  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_OPERATOR     i rq:i :=  2: 2 1
=================
(process_expression_types) 
==INFIX==

infix_stack_push: 'A%'
infix_stack_push: '20'
infix_stack_pop: '20'
infix_stack_pop: 'A%'
infix_stack_push: '(A% := 20)'
infix_stack_pop: '(A% := 20)'
(process_expression_types) ==(A% := 20)==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i A%  0:
(    output_qcode) N2 EXP_BUFF_ID_INTEGER      i rq:i 20  0:
(    output_qcode) N3 EXP_BUFF_ID_OPERATOR     i rq:i :=  2: 2 1
check_literal:lit=':' idx=8 ''
check_literal:After drop space:':' idx=8 ''
check_literal  ret0 Empty test string
(translate_file) 
cline scanned OK
(translate_file) 
=======================cline==========================
(translate_file) 
==PRINT "abc"
==
scan_cline:
check_line:
check_assignment:
check_variable:
check_vname 'PRINT "abc"
':
check_vname ret1 ' "abc"
':
check_variable: ' "abc"
'
check_variable: Ary test ' "abc"
'
check_literal:lit='(' idx=5 ' "abc"
'
check_literal:After drop space:'(' idx=5 ' "abc"
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
check_variable:ret1 
check_literal:lit=' =' idx=5 ' "abc"
'
    dropping space
check_literal:After drop space:'=' idx=6 '"abc"
'
  '=' != '"'
check_literal: ret0
check_assignment:ret0
check_proc_call:
check_textlabel: 'PRINT "abc"
'
check_textlabel:ret0
check_proc_call:ret0
check_command:
check_command: ret1 found=> 'PRINT'
check_line:ret1
scan_cline: Checked len=7, ' "abc"
'
========================================================
PRINT "abc"

========================================================
(output_expression_start)
scan_line:
check_assignment:
check_variable:
check_vname 'PRINT "abc"
':
check_vname ret1 ' "abc"
':
check_variable: ' "abc"
'
check_variable: Ary test ' "abc"
'
check_literal:lit='(' idx=5 ' "abc"
'
check_literal:After drop space:'(' idx=5 ' "abc"
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
check_variable:ret1 
check_literal:lit=' =' idx=5 ' "abc"
'
    dropping space
check_literal:After drop space:'=' idx=6 '"abc"
'
  '=' != '"'
check_literal: ret0
check_assignment:ret0
check_proc_call:
check_textlabel: 'PRINT "abc"
'
check_textlabel:ret0
check_proc_call:ret0
check_command:
check_command: ret1 found=> 'PRINT'
scan_line:check_command: 
scan_command:
   Frst:1 T:'PRINT' exptype:U
token_is_function:
PRINT is function
function_return_type: 'PRINT' =>v
function_return_type: 'PRINT' =>17
process_token: 'PRINT' t=>v
 Push:'PRINT'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: PRINT type:17
(op_stack_print) 
------------------

scan_expression: ' "abc"
'
check_eitem: '"abc"
'
check_operator: "abc"

check_literal:lit=',' idx=6 '"abc"
'
check_literal:After drop space:',' idx=6 '"abc"
'
  ',' != '"'
check_literal: ret0
check_operator:ret0
check_function: '"abc"
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=6 '"abc"
'
    dropping space
check_literal:After drop space:'%' idx=6 '"abc"
'
  '%' != '"'
check_literal: ret0
check_literal:lit=' "' idx=6 '"abc"
'
    dropping space
check_literal:After drop space:'"' idx=6 '"abc"
'
check_literal:After while():abc"

check_literal:ret1 
check_eitem:ret1
scan_eitem:
check_operator: "abc"

check_literal:lit=',' idx=6 '"abc"
'
check_literal:After drop space:',' idx=6 '"abc"
'
  ',' != '"'
check_literal: ret0
check_operator:ret0
check_function: '"abc"
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=6 '"abc"
'
    dropping space
check_literal:After drop space:'%' idx=6 '"abc"
'
  '%' != '"'
check_literal: ret0
check_literal:lit=' "' idx=6 '"abc"
'
    dropping space
check_literal:After drop space:'"' idx=6 '"abc"
'
check_literal:After while():abc"

check_literal:ret1 
scan_atom:
check_literal:lit=' %' idx=6 '"abc"
'
    dropping space
check_literal:After drop space:'%' idx=6 '"abc"
'
  '%' != '"'
check_literal: ret0
check_literal:lit=' "' idx=6 '"abc"
'
    dropping space
check_literal:After drop space:'"' idx=6 '"abc"
'
check_literal:After while():abc"

check_literal:ret1 
scan_string:
scan_literal:lit=' "' '"abc"
'
scan_literal:After drop space:"abc"

scan_literal:while loop:"abc"

   Frst:0 T:'"' exptype:U
token_is_function:
token_is_function:" is not function
token_is_variable: tok:'"'
token_is_function:
token_is_function:" is not function
(   output_string) [U,()] s v "
modify_expression_type:Inittype:U Intype:s Outtype:s
  (in if) 'abc"
'
  (in wh) 'abc"
'
  (in wh) 'bc"
'
  (in wh) 'bc"
'
  (in wh) 'c"
'
  (in wh) 'c"
'
  (in wh) '"
'
scan_string: ret1
   Frst:0 T:'abc' exptype:s
token_is_function:
token_is_function:abc is not function
token_is_variable: tok:'abc'
token_is_function:
token_is_function:abc is not function
(init_get_name) 
init_get_name:'abc'
(init_get_name) 
init_get_name:'abc'
(get_name) 
get_name:gn:'abc'
process_token:type:s req_type:i
modify_expression_type:Inittype:s Intype:f Outtype:s
( output_variable) [s,()] s s abc
check_eitem: '
'
check_operator: 

check_literal:lit=',' idx=12 ''
check_literal:After drop space:',' idx=12 ''
check_literal  ret0 Empty test string
check_operator:ret0
check_function: ''
check_function: ret0
check_atom:
check_literal:lit=' %' idx=11 '
'
    dropping space
check_literal:After drop space:'%' idx=12 ''
check_literal  ret0 Empty test string
check_literal:lit=' "' idx=11 '
'
    dropping space
check_literal:After drop space:'"' idx=12 ''
check_literal  ret0 Empty test string
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: ''
check_integer:ret0
check_number: ret0
check_variable:
check_vname '':
check_vname ret0 '':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=11 '
'
    dropping space
check_literal:After drop space:'(' idx=12 ''
check_literal  ret0 Empty test string
check_sub_expr: ret0
check_eitem:ret0
scan_expression: ret1 '
'
scan_command: ret1 =>'PRINT'
Finalise stack
Pop 'PRINT'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_operator) [s,()] s s PRINT
token_is_function:
PRINT is function
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_STR          s rq:v "  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     s rq:s abc  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     s rq:s PRINT  0:
=================
 BE:"
type_check_stack_push: '"'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '"' type:2
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '"' type:s (2)
 BE:abc
type_check_stack_push: 'abc'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: '"' type:2
(type_check_stack_print) 
001: 'abc' type:2
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: '"' type:s (2)
001: 'abc' type:s (2)
 BE:PRINT
FN: 1 args
function_return_type: 'PRINT' =>v
function_return_type: 'PRINT' =>17
ret_type;17 v
typecheck_expression:Ret type of PRINT : v
type_check_stack_pop: 'abc'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '"' type:2
(type_check_stack_print) 
------------------

FN ARG 0 ri abc 2(s)  Arg not OK
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: '"' type:2
(type_check_stack_print) 
001: '000' type:17
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: '"' type:s (2)
001: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_STR          s rq:v "  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     s rq:s abc  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     s rq:s PRINT  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_STR          s rq:v "  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     s rq:s abc  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_FUNCTION     v rq:v PRINT  0:
=================
(process_expression_types) 
==INFIX==

infix_stack_push: '"'
infix_stack_push: 'abc'
infix_stack_pop: 'abc'
infix_stack_push: 'PRINT(abc )'
infix_stack_pop: 'PRINT(abc )'
(process_expression_types) ==PRINT(abc )==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_STR          s rq:v "  0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     s rq:s abc  0:
(    output_qcode) N3 EXP_BUFF_ID_FUNCTION     v rq:v PRINT  0:
check_literal:lit=':' idx=12 ''
check_literal:After drop space:':' idx=12 ''
check_literal  ret0 Empty test string
(translate_file) 
cline scanned OK
(translate_file) 
=======================cline==========================
(translate_file) 
==PRINT "asdfgh"
==
scan_cline:
check_line:
check_assignment:
check_variable:
check_vname 'PRINT "asdfgh"
':
check_vname ret1 ' "asdfgh"
':
check_variable: ' "asdfgh"
'
check_variable: Ary test ' "asdfgh"
'
check_literal:lit='(' idx=5 ' "asdfgh"
'
check_literal:After drop space:'(' idx=5 ' "asdfgh"
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
check_variable:ret1 
check_literal:lit=' =' idx=5 ' "asdfgh"
'
    dropping space
check_literal:After drop space:'=' idx=6 '"asdfgh"
'
  '=' != '"'
check_literal: ret0
check_assignment:ret0
check_proc_call:
check_textlabel: 'PRINT "asdfgh"
'
check_textlabel:ret0
check_proc_call:ret0
check_command:
check_command: ret1 found=> 'PRINT'
check_line:ret1
scan_cline: Checked len=10, ' "asdfgh"
'
========================================================
PRINT "asdfgh"

========================================================
(output_expression_start)
scan_line:
check_assignment:
check_variable:
check_vname 'PRINT "asdfgh"
':
check_vname ret1 ' "asdfgh"
':
check_variable: ' "asdfgh"
'
check_variable: Ary test ' "asdfgh"
'
check_literal:lit='(' idx=5 ' "asdfgh"
'
check_literal:After drop space:'(' idx=5 ' "asdfgh"
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
check_variable:ret1 
check_literal:lit=' =' idx=5 ' "asdfgh"
'
    dropping space
check_literal:After drop space:'=' idx=6 '"asdfgh"
'
  '=' != '"'
check_literal: ret0
check_assignment:ret0
check_proc_call:
check_textlabel: 'PRINT "asdfgh"
'
check_textlabel:ret0
check_proc_call:ret0
check_command:
check_command: ret1 found=> 'PRINT'
scan_line:check_command: 
scan_command:
   Frst:1 T:'PRINT' exptype:U
token_is_function:
PRINT is function
function_return_type: 'PRINT' =>v
function_return_type: 'PRINT' =>17
process_token: 'PRINT' t=>v
 Push:'PRINT'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: PRINT type:17
(op_stack_print) 
------------------

scan_expression: ' "asdfgh"
'
check_eitem: '"asdfgh"
'
check_operator: "asdfgh"

check_literal:lit=',' idx=6 '"asdfgh"
'
check_literal:After drop space:',' idx=6 '"asdfgh"
'
  ',' != '"'
check_literal: ret0
check_operator:ret0
check_function: '"asdfgh"
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=6 '"asdfgh"
'
    dropping space
check_literal:After drop space:'%' idx=6 '"asdfgh"
'
  '%' != '"'
check_literal: ret0
check_literal:lit=' "' idx=6 '"asdfgh"
'
    dropping space
check_literal:After drop space:'"' idx=6 '"asdfgh"
'
check_literal:After while():asdfgh"

check_literal:ret1 
check_eitem:ret1
scan_eitem:
check_operator: "asdfgh"

check_literal:lit=',' idx=6 '"asdfgh"
'
check_literal:After drop space:',' idx=6 '"asdfgh"
'
  ',' != '"'
check_literal: ret0
check_operator:ret0
check_function: '"asdfgh"
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=6 '"asdfgh"
'
    dropping space
check_literal:After drop space:'%' idx=6 '"asdfgh"
'
  '%' != '"'
check_literal: ret0
check_literal:lit=' "' idx=6 '"asdfgh"
'
    dropping space
check_literal:After drop space:'"' idx=6 '"asdfgh"
'
check_literal:After while():asdfgh"

check_literal:ret1 
scan_atom:
check_literal:lit=' %' idx=6 '"asdfgh"
'
    dropping space
check_literal:After drop space:'%' idx=6 '"asdfgh"
'
  '%' != '"'
check_literal: ret0
check_literal:lit=' "' idx=6 '"asdfgh"
'
    dropping space
check_literal:After drop space:'"' idx=6 '"asdfgh"
'
check_literal:After while():asdfgh"

check_literal:ret1 
scan_string:
scan_literal:lit=' "' '"asdfgh"
'
scan_literal:After drop space:"asdfgh"

scan_literal:while loop:"asdfgh"

   Frst:0 T:'"' exptype:U
token_is_function:
token_is_function:" is not function
token_is_variable: tok:'"'
token_is_function:
token_is_function:" is not function
(   output_string) [U,()] s v "
modify_expression_type:Inittype:U Intype:s Outtype:s
  (in if) 'asdfgh"
'
  (in wh) 'asdfgh"
'
  (in wh) 'sdfgh"
'
  (in wh) 'sdfgh"
'
  (in wh) 'dfgh"
'
  (in wh) 'dfgh"
'
  (in wh) 'fgh"
'
  (in wh) 'fgh"
'
  (in wh) 'gh"
'
  (in wh) 'gh"
'
  (in wh) 'h"
'
  (in wh) 'h"
'
  (in wh) '"
'
scan_string: ret1
   Frst:0 T:'asdfgh' exptype:s
token_is_function:
token_is_function:asdfgh is not function
token_is_variable: tok:'asdfgh'
token_is_function:
token_is_function:asdfgh is not function
(init_get_name) 
init_get_name:'asdfgh'
(init_get_name) 
init_get_name:'asdfgh'
(get_name) 
get_name:gn:'asdfgh'
process_token:type:s req_type:i
modify_expression_type:Inittype:s Intype:f Outtype:s
( output_variable) [s,()] s s asdfgh
check_eitem: '
'
check_operator: 

check_literal:lit=',' idx=15 ''
check_literal:After drop space:',' idx=15 ''
check_literal  ret0 Empty test string
check_operator:ret0
check_function: ''
check_function: ret0
check_atom:
check_literal:lit=' %' idx=14 '
'
    dropping space
check_literal:After drop space:'%' idx=15 ''
check_literal  ret0 Empty test string
check_literal:lit=' "' idx=14 '
'
    dropping space
check_literal:After drop space:'"' idx=15 ''
check_literal  ret0 Empty test string
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: ''
check_integer:ret0
check_number: ret0
check_variable:
check_vname '':
check_vname ret0 '':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=14 '
'
    dropping space
check_literal:After drop space:'(' idx=15 ''
check_literal  ret0 Empty test string
check_sub_expr: ret0
check_eitem:ret0
scan_expression: ret1 '
'
scan_command: ret1 =>'PRINT'
Finalise stack
Pop 'PRINT'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_operator) [s,()] s s PRINT
token_is_function:
PRINT is function
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_STR          s rq:v "  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     s rq:s asdfgh  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     s rq:s PRINT  0:
=================
 BE:"
type_check_stack_push: '"'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '"' type:2
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '"' type:s (2)
 BE:asdfgh
type_check_stack_push: 'asdfgh'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: '"' type:2
(type_check_stack_print) 
001: 'asdfgh' type:2
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: '"' type:s (2)
001: 'asdfgh' type:s (2)
 BE:PRINT
FN: 1 args
function_return_type: 'PRINT' =>v
function_return_type: 'PRINT' =>17
ret_type;17 v
typecheck_expression:Ret type of PRINT : v
type_check_stack_pop: 'asdfgh'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '"' type:2
(type_check_stack_print) 
------------------

FN ARG 0 ri asdfgh 2(s)  Arg not OK
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: '"' type:2
(type_check_stack_print) 
001: '000' type:17
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: '"' type:s (2)
001: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_STR          s rq:v "  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     s rq:s asdfgh  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     s rq:s PRINT  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_STR          s rq:v "  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     s rq:s asdfgh  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_FUNCTION     v rq:v PRINT  0:
=================
(process_expression_types) 
==INFIX==

infix_stack_push: '"'
infix_stack_push: 'asdfgh'
infix_stack_pop: 'asdfgh'
infix_stack_push: 'PRINT(asdfgh )'
infix_stack_pop: 'PRINT(asdfgh )'
(process_expression_types) ==PRINT(asdfgh )==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_STR          s rq:v "  0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     s rq:s asdfgh  0:
(    output_qcode) N3 EXP_BUFF_ID_FUNCTION     v rq:v PRINT  0:
check_literal:lit=':' idx=15 ''
check_literal:After drop space:':' idx=15 ''
check_literal  ret0 Empty test string
(translate_file) 
cline scanned OK
(translate_file) 
=======================cline==========================
(translate_file) 
==PRINT   "    abc    "
==
scan_cline:
check_line:
check_assignment:
check_variable:
check_vname 'PRINT   "    abc    "
':
check_vname ret1 '   "    abc    "
':
check_variable: '   "    abc    "
'
check_variable: Ary test '   "    abc    "
'
check_literal:lit='(' idx=5 '   "    abc    "
'
check_literal:After drop space:'(' idx=5 '   "    abc    "
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
check_variable:ret1 
check_literal:lit=' =' idx=5 '   "    abc    "
'
    dropping space
check_literal:After drop space:'=' idx=8 '"    abc    "
'
  '=' != '"'
check_literal: ret0
check_assignment:ret0
check_proc_call:
check_textlabel: 'PRINT   "    abc    "
'
check_textlabel:ret0
check_proc_call:ret0
check_command:
check_command: ret1 found=> 'PRINT'
check_line:ret1
scan_cline: Checked len=17, '   "    abc    "
'
========================================================
PRINT   "    abc    "

========================================================
(output_expression_start)
scan_line:
check_assignment:
check_variable:
check_vname 'PRINT   "    abc    "
':
check_vname ret1 '   "    abc    "
':
check_variable: '   "    abc    "
'
check_variable: Ary test '   "    abc    "
'
check_literal:lit='(' idx=5 '   "    abc    "
'
check_literal:After drop space:'(' idx=5 '   "    abc    "
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
check_variable:ret1 
check_literal:lit=' =' idx=5 '   "    abc    "
'
    dropping space
check_literal:After drop space:'=' idx=8 '"    abc    "
'
  '=' != '"'
check_literal: ret0
check_assignment:ret0
check_proc_call:
check_textlabel: 'PRINT   "    abc    "
'
check_textlabel:ret0
check_proc_call:ret0
check_command:
check_command: ret1 found=> 'PRINT'
scan_line:check_command: 
scan_command:
   Frst:1 T:'PRINT' exptype:U
token_is_function:
PRINT is function
function_return_type: 'PRINT' =>v
function_return_type: 'PRINT' =>17
process_token: 'PRINT' t=>v
 Push:'PRINT'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: PRINT type:17
(op_stack_print) 
------------------

scan_expression: '   "    abc    "
'
check_eitem: '"    abc    "
'
check_operator: "    abc    "

check_literal:lit=',' idx=8 '"    abc    "
'
check_literal:After drop space:',' idx=8 '"    abc    "
'
  ',' != '"'
check_literal: ret0
check_operator:ret0
check_function: '"    abc    "
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=8 '"    abc    "
'
    dropping space
check_literal:After drop space:'%' idx=8 '"    abc    "
'
  '%' != '"'
check_literal: ret0
check_literal:lit=' "' idx=8 '"    abc    "
'
    dropping space
check_literal:After drop space:'"' idx=8 '"    abc    "
'
check_literal:After while():    abc    "

check_literal:ret1 
check_eitem:ret1
scan_eitem:
check_operator: "    abc    "

check_literal:lit=',' idx=8 '"    abc    "
'
check_literal:After drop space:',' idx=8 '"    abc    "
'
  ',' != '"'
check_literal: ret0
check_operator:ret0
check_function: '"    abc    "
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=8 '"    abc    "
'
    dropping space
check_literal:After drop space:'%' idx=8 '"    abc    "
'
  '%' != '"'
check_literal: ret0
check_literal:lit=' "' idx=8 '"    abc    "
'
    dropping space
check_literal:After drop space:'"' idx=8 '"    abc    "
'
check_literal:After while():    abc    "

check_literal:ret1 
scan_atom:
check_literal:lit=' %' idx=8 '"    abc    "
'
    dropping space
check_literal:After drop space:'%' idx=8 '"    abc    "
'
  '%' != '"'
check_literal: ret0
check_literal:lit=' "' idx=8 '"    abc    "
'
    dropping space
check_literal:After drop space:'"' idx=8 '"    abc    "
'
check_literal:After while():    abc    "

check_literal:ret1 
scan_string:
scan_literal:lit=' "' '"    abc    "
'
scan_literal:After drop space:"    abc    "

scan_literal:while loop:"    abc    "

   Frst:0 T:'"' exptype:U
token_is_function:
token_is_function:" is not function
token_is_variable: tok:'"'
token_is_function:
token_is_function:" is not function
(   output_string) [U,()] s v "
modify_expression_type:Inittype:U Intype:s Outtype:s
  (in if) '    abc    "
'
  (in wh) '    abc    "
'
  (in wh) '   abc    "
'
  (in wh) '   abc    "
'
  (in wh) '  abc    "
'
  (in wh) '  abc    "
'
  (in wh) ' abc    "
'
  (in wh) ' abc    "
'
  (in wh) 'abc    "
'
  (in wh) 'abc    "
'
  (in wh) 'bc    "
'
  (in wh) 'bc    "
'
  (in wh) 'c    "
'
  (in wh) 'c    "
'
  (in wh) '    "
'
  (in wh) '    "
'
  (in wh) '   "
'
  (in wh) '   "
'
  (in wh) '  "
'
  (in wh) '  "
'
  (in wh) ' "
'
  (in wh) ' "
'
  (in wh) '"
'
scan_string: ret1
   Frst:0 T:'    abc    ' exptype:s
token_is_function:
token_is_function:    abc     is not function
token_is_variable: tok:'    abc    '
token_is_function:
token_is_function:    abc     is not function
check_eitem: '
'
check_operator: 

check_literal:lit=',' idx=22 ''
check_literal:After drop space:',' idx=22 ''
check_literal  ret0 Empty test string
check_operator:ret0
check_function: ''
check_function: ret0
check_atom:
check_literal:lit=' %' idx=21 '
'
    dropping space
check_literal:After drop space:'%' idx=22 ''
check_literal  ret0 Empty test string
check_literal:lit=' "' idx=21 '
'
    dropping space
check_literal:After drop space:'"' idx=22 ''
check_literal  ret0 Empty test string
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: ''
check_integer:ret0
check_number: ret0
check_variable:
check_vname '':
check_vname ret0 '':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=21 '
'
    dropping space
check_literal:After drop space:'(' idx=22 ''
check_literal  ret0 Empty test string
check_sub_expr: ret0
check_eitem:ret0
scan_expression: ret1 '
'
scan_command: ret1 =>'PRINT'
Finalise stack
Pop 'PRINT'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_operator) [s,()] s s PRINT
token_is_function:
PRINT is function
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_STR          s rq:v "  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     s rq:s PRINT  0:
=================
 BE:"
type_check_stack_push: '"'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '"' type:2
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '"' type:s (2)
 BE:PRINT
FN: 1 args
function_return_type: 'PRINT' =>v
function_return_type: 'PRINT' =>17
ret_type;17 v
typecheck_expression:Ret type of PRINT : v
type_check_stack_pop: '"'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (0)

(type_check_stack_print) 
------------------

FN ARG 0 ri " 2(s)  Arg not OK
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:17
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_STR          s rq:v "  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     s rq:s PRINT  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_STR          s rq:v "  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_FUNCTION     v rq:v PRINT  0:
=================
(process_expression_types) 
==INFIX==

infix_stack_push: '"'
infix_stack_pop: '"'
infix_stack_push: 'PRINT(" )'
infix_stack_pop: 'PRINT(" )'
(process_expression_types) ==PRINT(" )==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_STR          s rq:v "  0:
(    output_qcode) N2 EXP_BUFF_ID_FUNCTION     v rq:v PRINT  0:
check_literal:lit=':' idx=22 ''
check_literal:After drop space:':' idx=22 ''
check_literal  ret0 Empty test string
(translate_file) 
cline scanned OK
(translate_file) 
=======================cline==========================
(translate_file) 
==PRINT A%
==
scan_cline:
check_line:
check_assignment:
check_variable:
check_vname 'PRINT A%
':
check_vname ret1 ' A%
':
check_variable: ' A%
'
check_variable: Ary test ' A%
'
check_literal:lit='(' idx=5 ' A%
'
check_literal:After drop space:'(' idx=5 ' A%
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
check_variable:ret1 
check_literal:lit=' =' idx=5 ' A%
'
    dropping space
check_literal:After drop space:'=' idx=6 'A%
'
  '=' != 'A'
check_literal: ret0
check_assignment:ret0
check_proc_call:
check_textlabel: 'PRINT A%
'
check_textlabel:ret0
check_proc_call:ret0
check_command:
check_command: ret1 found=> 'PRINT'
check_line:ret1
scan_cline: Checked len=4, ' A%
'
========================================================
PRINT A%

========================================================
(output_expression_start)
scan_line:
check_assignment:
check_variable:
check_vname 'PRINT A%
':
check_vname ret1 ' A%
':
check_variable: ' A%
'
check_variable: Ary test ' A%
'
check_literal:lit='(' idx=5 ' A%
'
check_literal:After drop space:'(' idx=5 ' A%
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
check_variable:ret1 
check_literal:lit=' =' idx=5 ' A%
'
    dropping space
check_literal:After drop space:'=' idx=6 'A%
'
  '=' != 'A'
check_literal: ret0
check_assignment:ret0
check_proc_call:
check_textlabel: 'PRINT A%
'
check_textlabel:ret0
check_proc_call:ret0
check_command:
check_command: ret1 found=> 'PRINT'
scan_line:check_command: 
scan_command:
   Frst:1 T:'PRINT' exptype:U
token_is_function:
PRINT is function
function_return_type: 'PRINT' =>v
function_return_type: 'PRINT' =>17
process_token: 'PRINT' t=>v
 Push:'PRINT'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: PRINT type:17
(op_stack_print) 
------------------

scan_expression: ' A%
'
check_eitem: 'A%
'
check_operator: A%

check_literal:lit=',' idx=6 'A%
'
check_literal:After drop space:',' idx=6 'A%
'
  ',' != 'A'
check_literal: ret0
check_operator:ret0
check_function: 'A%
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=6 'A%
'
    dropping space
check_literal:After drop space:'%' idx=6 'A%
'
  '%' != 'A'
check_literal: ret0
check_literal:lit=' "' idx=6 'A%
'
    dropping space
check_literal:After drop space:'"' idx=6 'A%
'
  '"' != 'A'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'A%
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'A%
':
check_vname ret1 '%
':
check_variable: '%
'
check_variable: Ary test '
'
check_literal:lit='(' idx=8 '
'
check_literal:After drop space:'(' idx=8 '
'
  '(' != '
'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
check_eitem:ret1
scan_eitem:
check_operator: A%

check_literal:lit=',' idx=6 'A%
'
check_literal:After drop space:',' idx=6 'A%
'
  ',' != 'A'
check_literal: ret0
check_operator:ret0
check_function: 'A%
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=6 'A%
'
    dropping space
check_literal:After drop space:'%' idx=6 'A%
'
  '%' != 'A'
check_literal: ret0
check_literal:lit=' "' idx=6 'A%
'
    dropping space
check_literal:After drop space:'"' idx=6 'A%
'
  '"' != 'A'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'A%
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'A%
':
check_vname ret1 '%
':
check_variable: '%
'
check_variable: Ary test '
'
check_literal:lit='(' idx=8 '
'
check_literal:After drop space:'(' idx=8 '
'
  '(' != '
'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
scan_atom:
check_literal:lit=' %' idx=6 'A%
'
    dropping space
check_literal:After drop space:'%' idx=6 'A%
'
  '%' != 'A'
check_literal: ret0
check_literal:lit=' "' idx=6 'A%
'
    dropping space
check_literal:After drop space:'"' idx=6 'A%
'
  '"' != 'A'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'A%
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'A%
':
check_vname ret1 '%
':
check_variable: '%
'
check_variable: Ary test '
'
check_literal:lit='(' idx=8 '
'
check_literal:After drop space:'(' idx=8 '
'
  '(' != '
'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
scan_variable:
scan_vname: 'A%
'
scan_vname: ret1 'A'
scan_variable: '%
' vname='A'
scan_variable: Ary test '
'
check_literal:lit='(' idx=8 '
'
check_literal:After drop space:'(' idx=8 '
'
  '(' != '
'
check_literal: ret0
scan_variable:ret1 vname='A%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'A%' exptype:U
token_is_function:
token_is_function:A% is not function
token_is_variable: tok:'A%'
token_is_function:
token_is_function:A% is not function
(init_get_name) 
init_get_name:'A%'
(init_get_name) 
init_get_name:'A%'
(get_name) 
get_name:gn:'A%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] i i A%
VAR INFO: '                A%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
check_eitem: '
'
check_operator: 

check_literal:lit=',' idx=9 ''
check_literal:After drop space:',' idx=9 ''
check_literal  ret0 Empty test string
check_operator:ret0
check_function: ''
check_function: ret0
check_atom:
check_literal:lit=' %' idx=8 '
'
    dropping space
check_literal:After drop space:'%' idx=9 ''
check_literal  ret0 Empty test string
check_literal:lit=' "' idx=8 '
'
    dropping space
check_literal:After drop space:'"' idx=9 ''
check_literal  ret0 Empty test string
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: ''
check_integer:ret0
check_number: ret0
check_variable:
check_vname '':
check_vname ret0 '':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=8 '
'
    dropping space
check_literal:After drop space:'(' idx=9 ''
check_literal  ret0 Empty test string
check_sub_expr: ret0
check_eitem:ret0
scan_expression: ret1 '
'
scan_command: ret1 =>'PRINT'
Finalise stack
Pop 'PRINT'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_operator) [i,()] i i PRINT
token_is_function:
PRINT is function
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i A%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     i rq:i PRINT  0:
=================
 BE:A%
type_check_stack_push: 'A%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'A%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'A%' type:i (0)
 BE:PRINT
FN: 1 args
function_return_type: 'PRINT' =>v
function_return_type: 'PRINT' =>17
ret_type;17 v
typecheck_expression:Ret type of PRINT : v
type_check_stack_pop: 'A%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (0)

(type_check_stack_print) 
------------------

FN ARG 0 ri A% 0(i)  Arg ok
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:17
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i A%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     i rq:i PRINT  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i A%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_FUNCTION     v rq:v PRINT  0:
=================
(process_expression_types) 
==INFIX==

infix_stack_push: 'A%'
infix_stack_pop: 'A%'
infix_stack_push: 'PRINT(A% )'
infix_stack_pop: 'PRINT(A% )'
(process_expression_types) ==PRINT(A% )==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i A%  0:
(    output_qcode) N2 EXP_BUFF_ID_FUNCTION     v rq:v PRINT  0:
check_literal:lit=':' idx=9 ''
check_literal:After drop space:':' idx=9 ''
check_literal  ret0 Empty test string
(translate_file) 
cline scanned OK
(translate_file) 
=======================cline==========================
(translate_file) 
==PRINT B
==
scan_cline:
check_line:
check_assignment:
check_variable:
check_vname 'PRINT B
':
check_vname ret1 ' B
':
check_variable: ' B
'
check_variable: Ary test ' B
'
check_literal:lit='(' idx=5 ' B
'
check_literal:After drop space:'(' idx=5 ' B
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
check_variable:ret1 
check_literal:lit=' =' idx=5 ' B
'
    dropping space
check_literal:After drop space:'=' idx=6 'B
'
  '=' != 'B'
check_literal: ret0
check_assignment:ret0
check_proc_call:
check_textlabel: 'PRINT B
'
check_textlabel:ret0
check_proc_call:ret0
check_command:
check_command: ret1 found=> 'PRINT'
check_line:ret1
scan_cline: Checked len=3, ' B
'
========================================================
PRINT B

========================================================
(output_expression_start)
scan_line:
check_assignment:
check_variable:
check_vname 'PRINT B
':
check_vname ret1 ' B
':
check_variable: ' B
'
check_variable: Ary test ' B
'
check_literal:lit='(' idx=5 ' B
'
check_literal:After drop space:'(' idx=5 ' B
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
check_variable:ret1 
check_literal:lit=' =' idx=5 ' B
'
    dropping space
check_literal:After drop space:'=' idx=6 'B
'
  '=' != 'B'
check_literal: ret0
check_assignment:ret0
check_proc_call:
check_textlabel: 'PRINT B
'
check_textlabel:ret0
check_proc_call:ret0
check_command:
check_command: ret1 found=> 'PRINT'
scan_line:check_command: 
scan_command:
   Frst:1 T:'PRINT' exptype:U
token_is_function:
PRINT is function
function_return_type: 'PRINT' =>v
function_return_type: 'PRINT' =>17
process_token: 'PRINT' t=>v
 Push:'PRINT'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: PRINT type:17
(op_stack_print) 
------------------

scan_expression: ' B
'
check_eitem: 'B
'
check_operator: B

check_literal:lit=',' idx=6 'B
'
check_literal:After drop space:',' idx=6 'B
'
  ',' != 'B'
check_literal: ret0
check_operator:ret0
check_function: 'B
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=6 'B
'
    dropping space
check_literal:After drop space:'%' idx=6 'B
'
  '%' != 'B'
check_literal: ret0
check_literal:lit=' "' idx=6 'B
'
    dropping space
check_literal:After drop space:'"' idx=6 'B
'
  '"' != 'B'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'B
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'B
':
check_vname ret1 '
':
check_variable: '
'
check_variable: Ary test '
'
check_literal:lit='(' idx=7 '
'
check_literal:After drop space:'(' idx=7 '
'
  '(' != '
'
check_literal: ret0
check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
check_variable:ret1 
check_eitem:ret1
scan_eitem:
check_operator: B

check_literal:lit=',' idx=6 'B
'
check_literal:After drop space:',' idx=6 'B
'
  ',' != 'B'
check_literal: ret0
check_operator:ret0
check_function: 'B
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=6 'B
'
    dropping space
check_literal:After drop space:'%' idx=6 'B
'
  '%' != 'B'
check_literal: ret0
check_literal:lit=' "' idx=6 'B
'
    dropping space
check_literal:After drop space:'"' idx=6 'B
'
  '"' != 'B'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'B
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'B
':
check_vname ret1 '
':
check_variable: '
'
check_variable: Ary test '
'
check_literal:lit='(' idx=7 '
'
check_literal:After drop space:'(' idx=7 '
'
  '(' != '
'
check_literal: ret0
check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
check_variable:ret1 
scan_atom:
check_literal:lit=' %' idx=6 'B
'
    dropping space
check_literal:After drop space:'%' idx=6 'B
'
  '%' != 'B'
check_literal: ret0
check_literal:lit=' "' idx=6 'B
'
    dropping space
check_literal:After drop space:'"' idx=6 'B
'
  '"' != 'B'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'B
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'B
':
check_vname ret1 '
':
check_variable: '
'
check_variable: Ary test '
'
check_literal:lit='(' idx=7 '
'
check_literal:After drop space:'(' idx=7 '
'
  '(' != '
'
check_literal: ret0
check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
check_variable:ret1 
scan_variable:
scan_vname: 'B
'
scan_vname: ret1 'B'
scan_variable: '
' vname='B'
scan_variable: Ary test '
'
check_literal:lit='(' idx=7 '
'
check_literal:After drop space:'(' idx=7 '
'
  '(' != '
'
check_literal: ret0
scan_variable:ret1 vname='B' is str:0 int:0 flt:1 ary:0
   Frst:0 T:'B' exptype:U
token_is_function:
token_is_function:B is not function
token_is_variable: tok:'B'
token_is_function:
token_is_function:B is not function
(init_get_name) 
init_get_name:'B'
(init_get_name) 
init_get_name:'B'
(get_name) 
get_name:gn:'B'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:f Outtype:f
( output_variable) [f,()] f f B
VAR INFO: '                 B' gbl:0 ref:1 int:0 flt:1 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
check_eitem: '
'
check_operator: 

check_literal:lit=',' idx=8 ''
check_literal:After drop space:',' idx=8 ''
check_literal  ret0 Empty test string
check_operator:ret0
check_function: ''
check_function: ret0
check_atom:
check_literal:lit=' %' idx=7 '
'
    dropping space
check_literal:After drop space:'%' idx=8 ''
check_literal  ret0 Empty test string
check_literal:lit=' "' idx=7 '
'
    dropping space
check_literal:After drop space:'"' idx=8 ''
check_literal  ret0 Empty test string
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: ''
check_integer:ret0
check_number: ret0
check_variable:
check_vname '':
check_vname ret0 '':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=7 '
'
    dropping space
check_literal:After drop space:'(' idx=8 ''
check_literal  ret0 Empty test string
check_sub_expr: ret0
check_eitem:ret0
scan_expression: ret1 '
'
scan_command: ret1 =>'PRINT'
Finalise stack
Pop 'PRINT'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_operator) [f,()] f f PRINT
token_is_function:
PRINT is function
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f B  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     f rq:f PRINT  0:
=================
 BE:B
type_check_stack_push: 'B'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'B' type:1
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'B' type:f (1)
 BE:PRINT
FN: 1 args
function_return_type: 'PRINT' =>v
function_return_type: 'PRINT' =>17
ret_type;17 v
typecheck_expression:Ret type of PRINT : v
type_check_stack_pop: 'B'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (0)

(type_check_stack_print) 
------------------

FN ARG 0 ri B 1(f)  Arg not OK
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f B  0:
=================
 Insert after 1 exp_buffer2_i:1
   Found at i:0
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f B  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_AUTOCON      v rq:v autocon f->i  0:
=================
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:17
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f B  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     f rq:f PRINT  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f B  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_AUTOCON      v rq:v autocon f->i  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_FUNCTION     v rq:v PRINT  0:
=================
(process_expression_types) 
==INFIX==

infix_stack_push: 'B'
infix_stack_pop: 'B'
infix_stack_push: 'PRINT(B )'
infix_stack_pop: 'PRINT(B )'
(process_expression_types) ==PRINT(B )==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     f rq:f B  0:
(    output_qcode) N3 EXP_BUFF_ID_AUTOCON      v rq:v autocon f->i  0:
(    output_qcode) N2 EXP_BUFF_ID_FUNCTION     v rq:v PRINT  0:
check_literal:lit=':' idx=8 ''
check_literal:After drop space:':' idx=8 ''
check_literal  ret0 Empty test string
(translate_file) 
cline scanned OK
(translate_file) 
=======================cline==========================
(translate_file) 
==PRINT ABC
==
scan_cline:
check_line:
check_assignment:
check_variable:
check_vname 'PRINT ABC
':
check_vname ret1 ' ABC
':
check_variable: ' ABC
'
check_variable: Ary test ' ABC
'
check_literal:lit='(' idx=5 ' ABC
'
check_literal:After drop space:'(' idx=5 ' ABC
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
check_variable:ret1 
check_literal:lit=' =' idx=5 ' ABC
'
    dropping space
check_literal:After drop space:'=' idx=6 'ABC
'
  '=' != 'A'
check_literal: ret0
check_assignment:ret0
check_proc_call:
check_textlabel: 'PRINT ABC
'
check_textlabel:ret0
check_proc_call:ret0
check_command:
check_command: ret1 found=> 'PRINT'
check_line:ret1
scan_cline: Checked len=5, ' ABC
'
========================================================
PRINT ABC

========================================================
(output_expression_start)
scan_line:
check_assignment:
check_variable:
check_vname 'PRINT ABC
':
check_vname ret1 ' ABC
':
check_variable: ' ABC
'
check_variable: Ary test ' ABC
'
check_literal:lit='(' idx=5 ' ABC
'
check_literal:After drop space:'(' idx=5 ' ABC
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
check_variable:ret1 
check_literal:lit=' =' idx=5 ' ABC
'
    dropping space
check_literal:After drop space:'=' idx=6 'ABC
'
  '=' != 'A'
check_literal: ret0
check_assignment:ret0
check_proc_call:
check_textlabel: 'PRINT ABC
'
check_textlabel:ret0
check_proc_call:ret0
check_command:
check_command: ret1 found=> 'PRINT'
scan_line:check_command: 
scan_command:
   Frst:1 T:'PRINT' exptype:U
token_is_function:
PRINT is function
function_return_type: 'PRINT' =>v
function_return_type: 'PRINT' =>17
process_token: 'PRINT' t=>v
 Push:'PRINT'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: PRINT type:17
(op_stack_print) 
------------------

scan_expression: ' ABC
'
check_eitem: 'ABC
'
check_operator: ABC

check_literal:lit=',' idx=6 'ABC
'
check_literal:After drop space:',' idx=6 'ABC
'
  ',' != 'A'
check_literal: ret0
check_operator:ret0
check_function: 'ABC
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=6 'ABC
'
    dropping space
check_literal:After drop space:'%' idx=6 'ABC
'
  '%' != 'A'
check_literal: ret0
check_literal:lit=' "' idx=6 'ABC
'
    dropping space
check_literal:After drop space:'"' idx=6 'ABC
'
  '"' != 'A'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'ABC
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'ABC
':
check_vname ret1 '
':
check_variable: '
'
check_variable: Ary test '
'
check_literal:lit='(' idx=9 '
'
check_literal:After drop space:'(' idx=9 '
'
  '(' != '
'
check_literal: ret0
check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
check_variable:ret1 
check_eitem:ret1
scan_eitem:
check_operator: ABC

check_literal:lit=',' idx=6 'ABC
'
check_literal:After drop space:',' idx=6 'ABC
'
  ',' != 'A'
check_literal: ret0
check_operator:ret0
check_function: 'ABC
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=6 'ABC
'
    dropping space
check_literal:After drop space:'%' idx=6 'ABC
'
  '%' != 'A'
check_literal: ret0
check_literal:lit=' "' idx=6 'ABC
'
    dropping space
check_literal:After drop space:'"' idx=6 'ABC
'
  '"' != 'A'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'ABC
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'ABC
':
check_vname ret1 '
':
check_variable: '
'
check_variable: Ary test '
'
check_literal:lit='(' idx=9 '
'
check_literal:After drop space:'(' idx=9 '
'
  '(' != '
'
check_literal: ret0
check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
check_variable:ret1 
scan_atom:
check_literal:lit=' %' idx=6 'ABC
'
    dropping space
check_literal:After drop space:'%' idx=6 'ABC
'
  '%' != 'A'
check_literal: ret0
check_literal:lit=' "' idx=6 'ABC
'
    dropping space
check_literal:After drop space:'"' idx=6 'ABC
'
  '"' != 'A'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'ABC
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'ABC
':
check_vname ret1 '
':
check_variable: '
'
check_variable: Ary test '
'
check_literal:lit='(' idx=9 '
'
check_literal:After drop space:'(' idx=9 '
'
  '(' != '
'
check_literal: ret0
check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
check_variable:ret1 
scan_variable:
scan_vname: 'ABC
'
scan_vname: ret1 'ABC'
scan_variable: '
' vname='ABC'
scan_variable: Ary test '
'
check_literal:lit='(' idx=9 '
'
check_literal:After drop space:'(' idx=9 '
'
  '(' != '
'
check_literal: ret0
scan_variable:ret1 vname='ABC' is str:0 int:0 flt:1 ary:0
   Frst:0 T:'ABC' exptype:U
token_is_function:
token_is_function:ABC is not function
token_is_variable: tok:'ABC'
token_is_function:
token_is_function:ABC is not function
(init_get_name) 
init_get_name:'ABC'
(init_get_name) 
init_get_name:'ABC'
(get_name) 
get_name:gn:'ABC'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:f Outtype:f
( output_variable) [f,()] f f ABC
VAR INFO: '               ABC' gbl:0 ref:1 int:0 flt:1 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
check_eitem: '
'
check_operator: 

check_literal:lit=',' idx=10 ''
check_literal:After drop space:',' idx=10 ''
check_literal  ret0 Empty test string
check_operator:ret0
check_function: ''
check_function: ret0
check_atom:
check_literal:lit=' %' idx=9 '
'
    dropping space
check_literal:After drop space:'%' idx=10 ''
check_literal  ret0 Empty test string
check_literal:lit=' "' idx=9 '
'
    dropping space
check_literal:After drop space:'"' idx=10 ''
check_literal  ret0 Empty test string
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: ''
check_integer:ret0
check_number: ret0
check_variable:
check_vname '':
check_vname ret0 '':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=9 '
'
    dropping space
check_literal:After drop space:'(' idx=10 ''
check_literal  ret0 Empty test string
check_sub_expr: ret0
check_eitem:ret0
scan_expression: ret1 '
'
scan_command: ret1 =>'PRINT'
Finalise stack
Pop 'PRINT'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_operator) [f,()] f f PRINT
token_is_function:
PRINT is function
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f ABC  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     f rq:f PRINT  0:
=================
 BE:ABC
type_check_stack_push: 'ABC'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'ABC' type:1
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'ABC' type:f (1)
 BE:PRINT
FN: 1 args
function_return_type: 'PRINT' =>v
function_return_type: 'PRINT' =>17
ret_type;17 v
typecheck_expression:Ret type of PRINT : v
type_check_stack_pop: 'ABC'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (0)

(type_check_stack_print) 
------------------

FN ARG 0 ri ABC 1(f)  Arg not OK
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f ABC  0:
=================
 Insert after 1 exp_buffer2_i:1
   Found at i:0
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f ABC  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_AUTOCON      v rq:v autocon f->i  0:
=================
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:17
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f ABC  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     f rq:f PRINT  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f ABC  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_AUTOCON      v rq:v autocon f->i  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_FUNCTION     v rq:v PRINT  0:
=================
(process_expression_types) 
==INFIX==

infix_stack_push: 'ABC'
infix_stack_pop: 'ABC'
infix_stack_push: 'PRINT(ABC )'
infix_stack_pop: 'PRINT(ABC )'
(process_expression_types) ==PRINT(ABC )==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     f rq:f ABC  0:
(    output_qcode) N3 EXP_BUFF_ID_AUTOCON      v rq:v autocon f->i  0:
(    output_qcode) N2 EXP_BUFF_ID_FUNCTION     v rq:v PRINT  0:
check_literal:lit=':' idx=10 ''
check_literal:After drop space:':' idx=10 ''
check_literal  ret0 Empty test string
(translate_file) 
cline scanned OK
(translate_file) 
=======================cline==========================
(translate_file) 
==PRINT ABC%
==
scan_cline:
check_line:
check_assignment:
check_variable:
check_vname 'PRINT ABC%
':
check_vname ret1 ' ABC%
':
check_variable: ' ABC%
'
check_variable: Ary test ' ABC%
'
check_literal:lit='(' idx=5 ' ABC%
'
check_literal:After drop space:'(' idx=5 ' ABC%
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
check_variable:ret1 
check_literal:lit=' =' idx=5 ' ABC%
'
    dropping space
check_literal:After drop space:'=' idx=6 'ABC%
'
  '=' != 'A'
check_literal: ret0
check_assignment:ret0
check_proc_call:
check_textlabel: 'PRINT ABC%
'
check_textlabel:ret0
check_proc_call:ret0
check_command:
check_command: ret1 found=> 'PRINT'
check_line:ret1
scan_cline: Checked len=6, ' ABC%
'
========================================================
PRINT ABC%

========================================================
(output_expression_start)
scan_line:
check_assignment:
check_variable:
check_vname 'PRINT ABC%
':
check_vname ret1 ' ABC%
':
check_variable: ' ABC%
'
check_variable: Ary test ' ABC%
'
check_literal:lit='(' idx=5 ' ABC%
'
check_literal:After drop space:'(' idx=5 ' ABC%
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
check_variable:ret1 
check_literal:lit=' =' idx=5 ' ABC%
'
    dropping space
check_literal:After drop space:'=' idx=6 'ABC%
'
  '=' != 'A'
check_literal: ret0
check_assignment:ret0
check_proc_call:
check_textlabel: 'PRINT ABC%
'
check_textlabel:ret0
check_proc_call:ret0
check_command:
check_command: ret1 found=> 'PRINT'
scan_line:check_command: 
scan_command:
   Frst:1 T:'PRINT' exptype:U
token_is_function:
PRINT is function
function_return_type: 'PRINT' =>v
function_return_type: 'PRINT' =>17
process_token: 'PRINT' t=>v
 Push:'PRINT'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: PRINT type:17
(op_stack_print) 
------------------

scan_expression: ' ABC%
'
check_eitem: 'ABC%
'
check_operator: ABC%

check_literal:lit=',' idx=6 'ABC%
'
check_literal:After drop space:',' idx=6 'ABC%
'
  ',' != 'A'
check_literal: ret0
check_operator:ret0
check_function: 'ABC%
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=6 'ABC%
'
    dropping space
check_literal:After drop space:'%' idx=6 'ABC%
'
  '%' != 'A'
check_literal: ret0
check_literal:lit=' "' idx=6 'ABC%
'
    dropping space
check_literal:After drop space:'"' idx=6 'ABC%
'
  '"' != 'A'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'ABC%
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'ABC%
':
check_vname ret1 '%
':
check_variable: '%
'
check_variable: Ary test '
'
check_literal:lit='(' idx=10 '
'
check_literal:After drop space:'(' idx=10 '
'
  '(' != '
'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
check_eitem:ret1
scan_eitem:
check_operator: ABC%

check_literal:lit=',' idx=6 'ABC%
'
check_literal:After drop space:',' idx=6 'ABC%
'
  ',' != 'A'
check_literal: ret0
check_operator:ret0
check_function: 'ABC%
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=6 'ABC%
'
    dropping space
check_literal:After drop space:'%' idx=6 'ABC%
'
  '%' != 'A'
check_literal: ret0
check_literal:lit=' "' idx=6 'ABC%
'
    dropping space
check_literal:After drop space:'"' idx=6 'ABC%
'
  '"' != 'A'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'ABC%
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'ABC%
':
check_vname ret1 '%
':
check_variable: '%
'
check_variable: Ary test '
'
check_literal:lit='(' idx=10 '
'
check_literal:After drop space:'(' idx=10 '
'
  '(' != '
'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
scan_atom:
check_literal:lit=' %' idx=6 'ABC%
'
    dropping space
check_literal:After drop space:'%' idx=6 'ABC%
'
  '%' != 'A'
check_literal: ret0
check_literal:lit=' "' idx=6 'ABC%
'
    dropping space
check_literal:After drop space:'"' idx=6 'ABC%
'
  '"' != 'A'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'ABC%
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'ABC%
':
check_vname ret1 '%
':
check_variable: '%
'
check_variable: Ary test '
'
check_literal:lit='(' idx=10 '
'
check_literal:After drop space:'(' idx=10 '
'
  '(' != '
'
check_literal: ret0
check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
check_variable:ret1 
scan_variable:
scan_vname: 'ABC%
'
scan_vname: ret1 'ABC'
scan_variable: '%
' vname='ABC'
scan_variable: Ary test '
'
check_literal:lit='(' idx=10 '
'
check_literal:After drop space:'(' idx=10 '
'
  '(' != '
'
check_literal: ret0
scan_variable:ret1 vname='ABC%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'ABC%' exptype:U
token_is_function:
token_is_function:ABC% is not function
token_is_variable: tok:'ABC%'
token_is_function:
token_is_function:ABC% is not function
(init_get_name) 
init_get_name:'ABC%'
(init_get_name) 
init_get_name:'ABC%'
(get_name) 
get_name:gn:'ABC%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] i i ABC%
VAR INFO: '              ABC%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
check_eitem: '
'
check_operator: 

check_literal:lit=',' idx=11 ''
check_literal:After drop space:',' idx=11 ''
check_literal  ret0 Empty test string
check_operator:ret0
check_function: ''
check_function: ret0
check_atom:
check_literal:lit=' %' idx=10 '
'
    dropping space
check_literal:After drop space:'%' idx=11 ''
check_literal  ret0 Empty test string
check_literal:lit=' "' idx=10 '
'
    dropping space
check_literal:After drop space:'"' idx=11 ''
check_literal  ret0 Empty test string
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: ''
check_integer:ret0
check_number: ret0
check_variable:
check_vname '':
check_vname ret0 '':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=10 '
'
    dropping space
check_literal:After drop space:'(' idx=11 ''
check_literal  ret0 Empty test string
check_sub_expr: ret0
check_eitem:ret0
scan_expression: ret1 '
'
scan_command: ret1 =>'PRINT'
Finalise stack
Pop 'PRINT'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_operator) [i,()] i i PRINT
token_is_function:
PRINT is function
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i ABC%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     i rq:i PRINT  0:
=================
 BE:ABC%
type_check_stack_push: 'ABC%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'ABC%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'ABC%' type:i (0)
 BE:PRINT
FN: 1 args
function_return_type: 'PRINT' =>v
function_return_type: 'PRINT' =>17
ret_type;17 v
typecheck_expression:Ret type of PRINT : v
type_check_stack_pop: 'ABC%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (0)

(type_check_stack_print) 
------------------

FN ARG 0 ri ABC% 0(i)  Arg ok
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:17
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i ABC%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     i rq:i PRINT  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i ABC%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_FUNCTION     v rq:v PRINT  0:
=================
(process_expression_types) 
==INFIX==

infix_stack_push: 'ABC%'
infix_stack_pop: 'ABC%'
infix_stack_push: 'PRINT(ABC% )'
infix_stack_pop: 'PRINT(ABC% )'
(process_expression_types) ==PRINT(ABC% )==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i ABC%  0:
(    output_qcode) N2 EXP_BUFF_ID_FUNCTION     v rq:v PRINT  0:
check_literal:lit=':' idx=11 ''
check_literal:After drop space:':' idx=11 ''
check_literal  ret0 Empty test string
(translate_file) 
cline scanned OK
(translate_file) 
=======================cline==========================
(translate_file) 
==PRINT A$
==
scan_cline:
check_line:
check_assignment:
check_variable:
check_vname 'PRINT A$
':
check_vname ret1 ' A$
':
check_variable: ' A$
'
check_variable: Ary test ' A$
'
check_literal:lit='(' idx=5 ' A$
'
check_literal:After drop space:'(' idx=5 ' A$
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
check_variable:ret1 
check_literal:lit=' =' idx=5 ' A$
'
    dropping space
check_literal:After drop space:'=' idx=6 'A$
'
  '=' != 'A'
check_literal: ret0
check_assignment:ret0
check_proc_call:
check_textlabel: 'PRINT A$
'
check_textlabel:ret0
check_proc_call:ret0
check_command:
check_command: ret1 found=> 'PRINT'
check_line:ret1
scan_cline: Checked len=4, ' A$
'
========================================================
PRINT A$

========================================================
(output_expression_start)
scan_line:
check_assignment:
check_variable:
check_vname 'PRINT A$
':
check_vname ret1 ' A$
':
check_variable: ' A$
'
check_variable: Ary test ' A$
'
check_literal:lit='(' idx=5 ' A$
'
check_literal:After drop space:'(' idx=5 ' A$
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
check_variable:ret1 
check_literal:lit=' =' idx=5 ' A$
'
    dropping space
check_literal:After drop space:'=' idx=6 'A$
'
  '=' != 'A'
check_literal: ret0
check_assignment:ret0
check_proc_call:
check_textlabel: 'PRINT A$
'
check_textlabel:ret0
check_proc_call:ret0
check_command:
check_command: ret1 found=> 'PRINT'
scan_line:check_command: 
scan_command:
   Frst:1 T:'PRINT' exptype:U
token_is_function:
PRINT is function
function_return_type: 'PRINT' =>v
function_return_type: 'PRINT' =>17
process_token: 'PRINT' t=>v
 Push:'PRINT'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: PRINT type:17
(op_stack_print) 
------------------

scan_expression: ' A$
'
check_eitem: 'A$
'
check_operator: A$

check_literal:lit=',' idx=6 'A$
'
check_literal:After drop space:',' idx=6 'A$
'
  ',' != 'A'
check_literal: ret0
check_operator:ret0
check_function: 'A$
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=6 'A$
'
    dropping space
check_literal:After drop space:'%' idx=6 'A$
'
  '%' != 'A'
check_literal: ret0
check_literal:lit=' "' idx=6 'A$
'
    dropping space
check_literal:After drop space:'"' idx=6 'A$
'
  '"' != 'A'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'A$
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'A$
':
check_vname ret1 '$
':
check_variable: '$
'
check_variable: Ary test '
'
check_literal:lit='(' idx=8 '
'
check_literal:After drop space:'(' idx=8 '
'
  '(' != '
'
check_literal: ret0
check_variable:ret1 vname='$' is str:1 int:0 flt:0 ary:0
check_variable:ret1 
check_eitem:ret1
scan_eitem:
check_operator: A$

check_literal:lit=',' idx=6 'A$
'
check_literal:After drop space:',' idx=6 'A$
'
  ',' != 'A'
check_literal: ret0
check_operator:ret0
check_function: 'A$
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=6 'A$
'
    dropping space
check_literal:After drop space:'%' idx=6 'A$
'
  '%' != 'A'
check_literal: ret0
check_literal:lit=' "' idx=6 'A$
'
    dropping space
check_literal:After drop space:'"' idx=6 'A$
'
  '"' != 'A'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'A$
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'A$
':
check_vname ret1 '$
':
check_variable: '$
'
check_variable: Ary test '
'
check_literal:lit='(' idx=8 '
'
check_literal:After drop space:'(' idx=8 '
'
  '(' != '
'
check_literal: ret0
check_variable:ret1 vname='$' is str:1 int:0 flt:0 ary:0
check_variable:ret1 
scan_atom:
check_literal:lit=' %' idx=6 'A$
'
    dropping space
check_literal:After drop space:'%' idx=6 'A$
'
  '%' != 'A'
check_literal: ret0
check_literal:lit=' "' idx=6 'A$
'
    dropping space
check_literal:After drop space:'"' idx=6 'A$
'
  '"' != 'A'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'A$
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'A$
':
check_vname ret1 '$
':
check_variable: '$
'
check_variable: Ary test '
'
check_literal:lit='(' idx=8 '
'
check_literal:After drop space:'(' idx=8 '
'
  '(' != '
'
check_literal: ret0
check_variable:ret1 vname='$' is str:1 int:0 flt:0 ary:0
check_variable:ret1 
scan_variable:
scan_vname: 'A$
'
scan_vname: ret1 'A'
scan_variable: '$
' vname='A'
scan_variable: Ary test '
'
check_literal:lit='(' idx=8 '
'
check_literal:After drop space:'(' idx=8 '
'
  '(' != '
'
check_literal: ret0
scan_variable:ret1 vname='A$' is str:1 int:0 flt:0 ary:0
   Frst:0 T:'A$' exptype:U
token_is_function:
token_is_function:A$ is not function
token_is_variable: tok:'A$'
token_is_function:
token_is_function:A$ is not function
(init_get_name) 
init_get_name:'A$'
(init_get_name) 
init_get_name:'A$'
(get_name) 
get_name:gn:'A$'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:s Outtype:s
( output_variable) [s,()] s s A$
VAR INFO: '                A$' gbl:0 ref:1 int:0 flt:0 str:1 ary:0 max_str:0 max_ary:0 num_ind:0
check_eitem: '
'
check_operator: 

check_literal:lit=',' idx=9 ''
check_literal:After drop space:',' idx=9 ''
check_literal  ret0 Empty test string
check_operator:ret0
check_function: ''
check_function: ret0
check_atom:
check_literal:lit=' %' idx=8 '
'
    dropping space
check_literal:After drop space:'%' idx=9 ''
check_literal  ret0 Empty test string
check_literal:lit=' "' idx=8 '
'
    dropping space
check_literal:After drop space:'"' idx=9 ''
check_literal  ret0 Empty test string
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: ''
check_integer:ret0
check_number: ret0
check_variable:
check_vname '':
check_vname ret0 '':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=8 '
'
    dropping space
check_literal:After drop space:'(' idx=9 ''
check_literal  ret0 Empty test string
check_sub_expr: ret0
check_eitem:ret0
scan_expression: ret1 '
'
scan_command: ret1 =>'PRINT'
Finalise stack
Pop 'PRINT'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_operator) [s,()] s s PRINT
token_is_function:
PRINT is function
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     s rq:s A$  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     s rq:s PRINT  0:
=================
 BE:A$
type_check_stack_push: 'A$'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'A$' type:2
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'A$' type:s (2)
 BE:PRINT
FN: 1 args
function_return_type: 'PRINT' =>v
function_return_type: 'PRINT' =>17
ret_type;17 v
typecheck_expression:Ret type of PRINT : v
type_check_stack_pop: 'A$'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (0)

(type_check_stack_print) 
------------------

FN ARG 0 ri A$ 2(s)  Arg not OK
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:17
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     s rq:s A$  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     s rq:s PRINT  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     s rq:s A$  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_FUNCTION     v rq:v PRINT  0:
=================
(process_expression_types) 
==INFIX==

infix_stack_push: 'A$'
infix_stack_pop: 'A$'
infix_stack_push: 'PRINT(A$ )'
infix_stack_pop: 'PRINT(A$ )'
(process_expression_types) ==PRINT(A$ )==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     s rq:s A$  0:
(    output_qcode) N2 EXP_BUFF_ID_FUNCTION     v rq:v PRINT  0:
check_literal:lit=':' idx=9 ''
check_literal:After drop space:':' idx=9 ''
check_literal  ret0 Empty test string
(translate_file) 
cline scanned OK
(translate_file) 
=======================cline==========================
(translate_file) 
==PRINT DEF$
==
scan_cline:
check_line:
check_assignment:
check_variable:
check_vname 'PRINT DEF$
':
check_vname ret1 ' DEF$
':
check_variable: ' DEF$
'
check_variable: Ary test ' DEF$
'
check_literal:lit='(' idx=5 ' DEF$
'
check_literal:After drop space:'(' idx=5 ' DEF$
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
check_variable:ret1 
check_literal:lit=' =' idx=5 ' DEF$
'
    dropping space
check_literal:After drop space:'=' idx=6 'DEF$
'
  '=' != 'D'
check_literal: ret0
check_assignment:ret0
check_proc_call:
check_textlabel: 'PRINT DEF$
'
check_textlabel:ret0
check_proc_call:ret0
check_command:
check_command: ret1 found=> 'PRINT'
check_line:ret1
scan_cline: Checked len=6, ' DEF$
'
========================================================
PRINT DEF$

========================================================
(output_expression_start)
scan_line:
check_assignment:
check_variable:
check_vname 'PRINT DEF$
':
check_vname ret1 ' DEF$
':
check_variable: ' DEF$
'
check_variable: Ary test ' DEF$
'
check_literal:lit='(' idx=5 ' DEF$
'
check_literal:After drop space:'(' idx=5 ' DEF$
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
check_variable:ret1 
check_literal:lit=' =' idx=5 ' DEF$
'
    dropping space
check_literal:After drop space:'=' idx=6 'DEF$
'
  '=' != 'D'
check_literal: ret0
check_assignment:ret0
check_proc_call:
check_textlabel: 'PRINT DEF$
'
check_textlabel:ret0
check_proc_call:ret0
check_command:
check_command: ret1 found=> 'PRINT'
scan_line:check_command: 
scan_command:
   Frst:1 T:'PRINT' exptype:U
token_is_function:
PRINT is function
function_return_type: 'PRINT' =>v
function_return_type: 'PRINT' =>17
process_token: 'PRINT' t=>v
 Push:'PRINT'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: PRINT type:17
(op_stack_print) 
------------------

scan_expression: ' DEF$
'
check_eitem: 'DEF$
'
check_operator: DEF$

check_literal:lit=',' idx=6 'DEF$
'
check_literal:After drop space:',' idx=6 'DEF$
'
  ',' != 'D'
check_literal: ret0
check_operator:ret0
check_function: 'DEF$
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=6 'DEF$
'
    dropping space
check_literal:After drop space:'%' idx=6 'DEF$
'
  '%' != 'D'
check_literal: ret0
check_literal:lit=' "' idx=6 'DEF$
'
    dropping space
check_literal:After drop space:'"' idx=6 'DEF$
'
  '"' != 'D'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'DEF$
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'DEF$
':
check_vname ret1 '$
':
check_variable: '$
'
check_variable: Ary test '
'
check_literal:lit='(' idx=10 '
'
check_literal:After drop space:'(' idx=10 '
'
  '(' != '
'
check_literal: ret0
check_variable:ret1 vname='$' is str:1 int:0 flt:0 ary:0
check_variable:ret1 
check_eitem:ret1
scan_eitem:
check_operator: DEF$

check_literal:lit=',' idx=6 'DEF$
'
check_literal:After drop space:',' idx=6 'DEF$
'
  ',' != 'D'
check_literal: ret0
check_operator:ret0
check_function: 'DEF$
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=6 'DEF$
'
    dropping space
check_literal:After drop space:'%' idx=6 'DEF$
'
  '%' != 'D'
check_literal: ret0
check_literal:lit=' "' idx=6 'DEF$
'
    dropping space
check_literal:After drop space:'"' idx=6 'DEF$
'
  '"' != 'D'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'DEF$
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'DEF$
':
check_vname ret1 '$
':
check_variable: '$
'
check_variable: Ary test '
'
check_literal:lit='(' idx=10 '
'
check_literal:After drop space:'(' idx=10 '
'
  '(' != '
'
check_literal: ret0
check_variable:ret1 vname='$' is str:1 int:0 flt:0 ary:0
check_variable:ret1 
scan_atom:
check_literal:lit=' %' idx=6 'DEF$
'
    dropping space
check_literal:After drop space:'%' idx=6 'DEF$
'
  '%' != 'D'
check_literal: ret0
check_literal:lit=' "' idx=6 'DEF$
'
    dropping space
check_literal:After drop space:'"' idx=6 'DEF$
'
  '"' != 'D'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'DEF$
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'DEF$
':
check_vname ret1 '$
':
check_variable: '$
'
check_variable: Ary test '
'
check_literal:lit='(' idx=10 '
'
check_literal:After drop space:'(' idx=10 '
'
  '(' != '
'
check_literal: ret0
check_variable:ret1 vname='$' is str:1 int:0 flt:0 ary:0
check_variable:ret1 
scan_variable:
scan_vname: 'DEF$
'
scan_vname: ret1 'DEF'
scan_variable: '$
' vname='DEF'
scan_variable: Ary test '
'
check_literal:lit='(' idx=10 '
'
check_literal:After drop space:'(' idx=10 '
'
  '(' != '
'
check_literal: ret0
scan_variable:ret1 vname='DEF$' is str:1 int:0 flt:0 ary:0
   Frst:0 T:'DEF$' exptype:U
token_is_function:
token_is_function:DEF$ is not function
token_is_variable: tok:'DEF$'
token_is_function:
token_is_function:DEF$ is not function
(init_get_name) 
init_get_name:'DEF$'
(init_get_name) 
init_get_name:'DEF$'
(get_name) 
get_name:gn:'DEF$'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:s Outtype:s
( output_variable) [s,()] s s DEF$
VAR INFO: '              DEF$' gbl:0 ref:1 int:0 flt:0 str:1 ary:0 max_str:0 max_ary:0 num_ind:0
check_eitem: '
'
check_operator: 

check_literal:lit=',' idx=11 ''
check_literal:After drop space:',' idx=11 ''
check_literal  ret0 Empty test string
check_operator:ret0
check_function: ''
check_function: ret0
check_atom:
check_literal:lit=' %' idx=10 '
'
    dropping space
check_literal:After drop space:'%' idx=11 ''
check_literal  ret0 Empty test string
check_literal:lit=' "' idx=10 '
'
    dropping space
check_literal:After drop space:'"' idx=11 ''
check_literal  ret0 Empty test string
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: ''
check_integer:ret0
check_number: ret0
check_variable:
check_vname '':
check_vname ret0 '':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=10 '
'
    dropping space
check_literal:After drop space:'(' idx=11 ''
check_literal  ret0 Empty test string
check_sub_expr: ret0
check_eitem:ret0
scan_expression: ret1 '
'
scan_command: ret1 =>'PRINT'
Finalise stack
Pop 'PRINT'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_operator) [s,()] s s PRINT
token_is_function:
PRINT is function
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     s rq:s DEF$  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     s rq:s PRINT  0:
=================
 BE:DEF$
type_check_stack_push: 'DEF$'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'DEF$' type:2
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'DEF$' type:s (2)
 BE:PRINT
FN: 1 args
function_return_type: 'PRINT' =>v
function_return_type: 'PRINT' =>17
ret_type;17 v
typecheck_expression:Ret type of PRINT : v
type_check_stack_pop: 'DEF$'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (0)

(type_check_stack_print) 
------------------

FN ARG 0 ri DEF$ 2(s)  Arg not OK
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:17
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     s rq:s DEF$  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     s rq:s PRINT  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     s rq:s DEF$  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_FUNCTION     v rq:v PRINT  0:
=================
(process_expression_types) 
==INFIX==

infix_stack_push: 'DEF$'
infix_stack_pop: 'DEF$'
infix_stack_push: 'PRINT(DEF$ )'
infix_stack_pop: 'PRINT(DEF$ )'
(process_expression_types) ==PRINT(DEF$ )==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     s rq:s DEF$  0:
(    output_qcode) N2 EXP_BUFF_ID_FUNCTION     v rq:v PRINT  0:
check_literal:lit=':' idx=11 ''
check_literal:After drop space:':' idx=11 ''
check_literal  ret0 Empty test string
(translate_file) 
cline scanned OK
(translate_file) 
=======================cline==========================
(translate_file) 
==PRINT A(2)
==
scan_cline:
check_line:
check_assignment:
check_variable:
check_vname 'PRINT A(2)
':
check_vname ret1 ' A(2)
':
check_variable: ' A(2)
'
check_variable: Ary test ' A(2)
'
check_literal:lit='(' idx=5 ' A(2)
'
check_literal:After drop space:'(' idx=5 ' A(2)
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
check_variable:ret1 
check_literal:lit=' =' idx=5 ' A(2)
'
    dropping space
check_literal:After drop space:'=' idx=6 'A(2)
'
  '=' != 'A'
check_literal: ret0
check_assignment:ret0
check_proc_call:
check_textlabel: 'PRINT A(2)
'
check_textlabel:ret0
check_proc_call:ret0
check_command:
check_command: ret1 found=> 'PRINT'
check_line:ret1
scan_cline: Checked len=6, ' A(2)
'
========================================================
PRINT A(2)

========================================================
(output_expression_start)
scan_line:
check_assignment:
check_variable:
check_vname 'PRINT A(2)
':
check_vname ret1 ' A(2)
':
check_variable: ' A(2)
'
check_variable: Ary test ' A(2)
'
check_literal:lit='(' idx=5 ' A(2)
'
check_literal:After drop space:'(' idx=5 ' A(2)
'
  '(' != ' '
check_literal: ret0
check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
check_variable:ret1 
check_literal:lit=' =' idx=5 ' A(2)
'
    dropping space
check_literal:After drop space:'=' idx=6 'A(2)
'
  '=' != 'A'
check_literal: ret0
check_assignment:ret0
check_proc_call:
check_textlabel: 'PRINT A(2)
'
check_textlabel:ret0
check_proc_call:ret0
check_command:
check_command: ret1 found=> 'PRINT'
scan_line:check_command: 
scan_command:
   Frst:1 T:'PRINT' exptype:U
token_is_function:
PRINT is function
function_return_type: 'PRINT' =>v
function_return_type: 'PRINT' =>17
process_token: 'PRINT' t=>v
 Push:'PRINT'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: PRINT type:17
(op_stack_print) 
------------------

scan_expression: ' A(2)
'
check_eitem: 'A(2)
'
check_operator: A(2)

check_literal:lit=',' idx=6 'A(2)
'
check_literal:After drop space:',' idx=6 'A(2)
'
  ',' != 'A'
check_literal: ret0
check_operator:ret0
check_function: 'A(2)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=6 'A(2)
'
    dropping space
check_literal:After drop space:'%' idx=6 'A(2)
'
  '%' != 'A'
check_literal: ret0
check_literal:lit=' "' idx=6 'A(2)
'
    dropping space
check_literal:After drop space:'"' idx=6 'A(2)
'
  '"' != 'A'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'A(2)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'A(2)
':
check_vname ret1 '(2)
':
check_variable: '(2)
'
check_variable: Ary test '(2)
'
check_literal:lit='(' idx=7 '(2)
'
check_literal:After drop space:'(' idx=7 '(2)
'
check_literal:After while():2)

check_literal:ret1 
check_variable: is array
check_expression: '2)
'
check_eitem: '2)
'
check_operator: 2)

check_literal:lit=',' idx=8 '2)
'
check_literal:After drop space:',' idx=8 '2)
'
  ',' != '2'
check_literal: ret0
check_operator:ret0
check_function: '2)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=8 '2)
'
    dropping space
check_literal:After drop space:'%' idx=8 '2)
'
  '%' != '2'
check_literal: ret0
check_literal:lit=' "' idx=8 '2)
'
    dropping space
check_literal:After drop space:'"' idx=8 '2)
'
  '"' != '2'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '2)
'
check_integer:ret1
check_number: ret1
check_eitem:ret1
check_eitem: ')
'
check_operator: )

check_literal:lit=',' idx=9 ')
'
check_literal:After drop space:',' idx=9 ')
'
  ',' != ')'
check_literal: ret0
check_operator:ret0
check_function: ')
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=9 ')
'
    dropping space
check_literal:After drop space:'%' idx=9 ')
'
  '%' != ')'
check_literal: ret0
check_literal:lit=' "' idx=9 ')
'
    dropping space
check_literal:After drop space:'"' idx=9 ')
'
  '"' != ')'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: ')
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname ')
':
check_vname ret0 ')
':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=9 ')
'
    dropping space
check_literal:After drop space:'(' idx=9 ')
'
  '(' != ')'
check_literal: ret0
check_sub_expr: ret0
check_eitem:ret0
check_expression:ret1 ')
'
check_literal:lit=' ,' idx=9 ')
'
    dropping space
check_literal:After drop space:',' idx=9 ')
'
  ',' != ')'
check_literal: ret0
check_literal:lit=' )' idx=9 ')
'
    dropping space
check_literal:After drop space:')' idx=9 ')
'
check_literal:After while():

check_literal:ret1 
check_variable:ret1 
check_eitem:ret1
scan_eitem:
check_operator: A(2)

check_literal:lit=',' idx=6 'A(2)
'
check_literal:After drop space:',' idx=6 'A(2)
'
  ',' != 'A'
check_literal: ret0
check_operator:ret0
check_function: 'A(2)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=6 'A(2)
'
    dropping space
check_literal:After drop space:'%' idx=6 'A(2)
'
  '%' != 'A'
check_literal: ret0
check_literal:lit=' "' idx=6 'A(2)
'
    dropping space
check_literal:After drop space:'"' idx=6 'A(2)
'
  '"' != 'A'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'A(2)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'A(2)
':
check_vname ret1 '(2)
':
check_variable: '(2)
'
check_variable: Ary test '(2)
'
check_literal:lit='(' idx=7 '(2)
'
check_literal:After drop space:'(' idx=7 '(2)
'
check_literal:After while():2)

check_literal:ret1 
check_variable: is array
check_expression: '2)
'
check_eitem: '2)
'
check_operator: 2)

check_literal:lit=',' idx=8 '2)
'
check_literal:After drop space:',' idx=8 '2)
'
  ',' != '2'
check_literal: ret0
check_operator:ret0
check_function: '2)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=8 '2)
'
    dropping space
check_literal:After drop space:'%' idx=8 '2)
'
  '%' != '2'
check_literal: ret0
check_literal:lit=' "' idx=8 '2)
'
    dropping space
check_literal:After drop space:'"' idx=8 '2)
'
  '"' != '2'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '2)
'
check_integer:ret1
check_number: ret1
check_eitem:ret1
check_eitem: ')
'
check_operator: )

check_literal:lit=',' idx=9 ')
'
check_literal:After drop space:',' idx=9 ')
'
  ',' != ')'
check_literal: ret0
check_operator:ret0
check_function: ')
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=9 ')
'
    dropping space
check_literal:After drop space:'%' idx=9 ')
'
  '%' != ')'
check_literal: ret0
check_literal:lit=' "' idx=9 ')
'
    dropping space
check_literal:After drop space:'"' idx=9 ')
'
  '"' != ')'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: ')
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname ')
':
check_vname ret0 ')
':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=9 ')
'
    dropping space
check_literal:After drop space:'(' idx=9 ')
'
  '(' != ')'
check_literal: ret0
check_sub_expr: ret0
check_eitem:ret0
check_expression:ret1 ')
'
check_literal:lit=' ,' idx=9 ')
'
    dropping space
check_literal:After drop space:',' idx=9 ')
'
  ',' != ')'
check_literal: ret0
check_literal:lit=' )' idx=9 ')
'
    dropping space
check_literal:After drop space:')' idx=9 ')
'
check_literal:After while():

check_literal:ret1 
check_variable:ret1 
scan_atom:
check_literal:lit=' %' idx=6 'A(2)
'
    dropping space
check_literal:After drop space:'%' idx=6 'A(2)
'
  '%' != 'A'
check_literal: ret0
check_literal:lit=' "' idx=6 'A(2)
'
    dropping space
check_literal:After drop space:'"' idx=6 'A(2)
'
  '"' != 'A'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: 'A(2)
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname 'A(2)
':
check_vname ret1 '(2)
':
check_variable: '(2)
'
check_variable: Ary test '(2)
'
check_literal:lit='(' idx=7 '(2)
'
check_literal:After drop space:'(' idx=7 '(2)
'
check_literal:After while():2)

check_literal:ret1 
check_variable: is array
check_expression: '2)
'
check_eitem: '2)
'
check_operator: 2)

check_literal:lit=',' idx=8 '2)
'
check_literal:After drop space:',' idx=8 '2)
'
  ',' != '2'
check_literal: ret0
check_operator:ret0
check_function: '2)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=8 '2)
'
    dropping space
check_literal:After drop space:'%' idx=8 '2)
'
  '%' != '2'
check_literal: ret0
check_literal:lit=' "' idx=8 '2)
'
    dropping space
check_literal:After drop space:'"' idx=8 '2)
'
  '"' != '2'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '2)
'
check_integer:ret1
check_number: ret1
check_eitem:ret1
check_eitem: ')
'
check_operator: )

check_literal:lit=',' idx=9 ')
'
check_literal:After drop space:',' idx=9 ')
'
  ',' != ')'
check_literal: ret0
check_operator:ret0
check_function: ')
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=9 ')
'
    dropping space
check_literal:After drop space:'%' idx=9 ')
'
  '%' != ')'
check_literal: ret0
check_literal:lit=' "' idx=9 ')
'
    dropping space
check_literal:After drop space:'"' idx=9 ')
'
  '"' != ')'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: ')
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname ')
':
check_vname ret0 ')
':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=9 ')
'
    dropping space
check_literal:After drop space:'(' idx=9 ')
'
  '(' != ')'
check_literal: ret0
check_sub_expr: ret0
check_eitem:ret0
check_expression:ret1 ')
'
check_literal:lit=' ,' idx=9 ')
'
    dropping space
check_literal:After drop space:',' idx=9 ')
'
  ',' != ')'
check_literal: ret0
check_literal:lit=' )' idx=9 ')
'
    dropping space
check_literal:After drop space:')' idx=9 ')
'
check_literal:After while():

check_literal:ret1 
check_variable:ret1 
scan_variable:
scan_vname: 'A(2)
'
scan_vname: ret1 'A'
scan_variable: '(2)
' vname='A'
scan_variable: Ary test '(2)
'
check_literal:lit='(' idx=7 '(2)
'
check_literal:After drop space:'(' idx=7 '(2)
'
check_literal:After while():2)

check_literal:ret1 
scan_literal:lit='(' '(2)
'
scan_literal:After drop space:(2)

scan_literal:while loop:(2)

   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (2)

(op_stack_print) 
000: PRINT type:17
(op_stack_print) 
001: ( type:16
(op_stack_print) 
------------------

scan_variable: is array
scan_expression: '2)
'
check_eitem: '2)
'
check_operator: 2)

check_literal:lit=',' idx=8 '2)
'
check_literal:After drop space:',' idx=8 '2)
'
  ',' != '2'
check_literal: ret0
check_operator:ret0
check_function: '2)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=8 '2)
'
    dropping space
check_literal:After drop space:'%' idx=8 '2)
'
  '%' != '2'
check_literal: ret0
check_literal:lit=' "' idx=8 '2)
'
    dropping space
check_literal:After drop space:'"' idx=8 '2)
'
  '"' != '2'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '2)
'
check_integer:ret1
check_number: ret1
check_eitem:ret1
scan_eitem:
check_operator: 2)

check_literal:lit=',' idx=8 '2)
'
check_literal:After drop space:',' idx=8 '2)
'
  ',' != '2'
check_literal: ret0
check_operator:ret0
check_function: '2)
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=8 '2)
'
    dropping space
check_literal:After drop space:'%' idx=8 '2)
'
  '%' != '2'
check_literal: ret0
check_literal:lit=' "' idx=8 '2)
'
    dropping space
check_literal:After drop space:'"' idx=8 '2)
'
  '"' != '2'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '2)
'
check_integer:ret1
check_number: ret1
scan_atom:
check_literal:lit=' %' idx=8 '2)
'
    dropping space
check_literal:After drop space:'%' idx=8 '2)
'
  '%' != '2'
check_literal: ret0
check_literal:lit=' "' idx=8 '2)
'
    dropping space
check_literal:After drop space:'"' idx=8 '2)
'
  '"' != '2'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '2)
'
check_integer:ret1
check_number: ret1
scan_number:
check_float:
isfloatdigit:
isfloatdigit:
check_float: ret0
check_integer: '2)
'
check_integer:ret1
scan_integer:
scan_integer:ret1
   Frst:0 T:'2' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U )] i i 2
scan_integer:ret1  2
check_eitem: ')
'
check_operator: )

check_literal:lit=',' idx=9 ')
'
check_literal:After drop space:',' idx=9 ')
'
  ',' != ')'
check_literal: ret0
check_operator:ret0
check_function: ')
'
check_function: ret0
check_atom:
check_literal:lit=' %' idx=9 ')
'
    dropping space
check_literal:After drop space:'%' idx=9 ')
'
  '%' != ')'
check_literal: ret0
check_literal:lit=' "' idx=9 ')
'
    dropping space
check_literal:After drop space:'"' idx=9 ')
'
  '"' != ')'
check_literal: ret0
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: ')
'
check_integer:ret0
check_number: ret0
check_variable:
check_vname ')
':
check_vname ret0 ')
':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=9 ')
'
    dropping space
check_literal:After drop space:'(' idx=9 ')
'
  '(' != ')'
check_literal: ret0
check_sub_expr: ret0
check_eitem:ret0
scan_expression: ret1 ')
'
check_literal:lit=' ,' idx=9 ')
'
    dropping space
check_literal:After drop space:',' idx=9 ')
'
  ',' != ')'
check_literal: ret0
scan_literal:lit=' )' ')
'
scan_literal:After drop space:)

scan_literal:while loop:)

   Frst:0 T:')' exptype:i
Pop 4
Pop '('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: PRINT type:17
(op_stack_print) 
------------------

(  output_sub_end)
token_is_function:
PRINT is function
Pop 5
Pop 'PRINT'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_function) [i,(U )] v v PRINT
(  output_sub_end)
scan_variable:ret1 vname='A' is str:0 int:0 flt:1 ary:1
   Frst:0 T:'A' exptype:U
token_is_function:
token_is_function:A is not function
token_is_variable: tok:'A'
token_is_function:
token_is_function:A is not function
(init_get_name) 
init_get_name:'A'
(init_get_name) 
init_get_name:'A'
(get_name) 
get_name:gn:'A'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:f Outtype:f
   Frst:0 T:'@' exptype:f
(operator_precedence) 
@ is operator
'@' is operator
(process_token) 
Token is operator o1 name:@ o2 name:
(process_token) 
opr1:9 opr2:0
Push 1
 Push:'@'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: @ type:1
(op_stack_print) 
------------------

( output_variable) [f,()] f f A
VAR INFO: '                 A' gbl:0 ref:1 int:0 flt:1 str:0 ary:1 max_str:0 max_ary:0 num_ind:1
check_eitem: '
'
check_operator: 

check_literal:lit=',' idx=11 ''
check_literal:After drop space:',' idx=11 ''
check_literal  ret0 Empty test string
check_operator:ret0
check_function: ''
check_function: ret0
check_atom:
check_literal:lit=' %' idx=10 '
'
    dropping space
check_literal:After drop space:'%' idx=11 ''
check_literal  ret0 Empty test string
check_literal:lit=' "' idx=10 '
'
    dropping space
check_literal:After drop space:'"' idx=11 ''
check_literal  ret0 Empty test string
check_number:
check_float:
isfloatdigit:
check_float: ret0
check_integer: ''
check_integer:ret0
check_number: ret0
check_variable:
check_vname '':
check_vname ret0 '':
check_variable:ret0 
check_sub_expr:
check_literal:lit=' (' idx=10 '
'
    dropping space
check_literal:After drop space:'(' idx=11 ''
check_literal  ret0 Empty test string
check_sub_expr: ret0
check_eitem:ret0
scan_expression: ret1 '
'
scan_command: ret1 =>'PRINT'
Finalise stack
Pop '@'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_operator) [f,()] f f @
token_is_function:
token_is_function:@ is not function
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v PRINT  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f @  0:
=================
 BE:

Type Check Stack (0)

 BE:2
type_check_stack_push: '2'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '2' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '2' type:i (0)
 BE:

Type Check Stack (1)

000: '2' type:i (0)
 BE:PRINT
FN: 1 args
function_return_type: 'PRINT' =>v
function_return_type: 'PRINT' =>17
ret_type;17 v
typecheck_expression:Ret type of PRINT : v
type_check_stack_pop: '2'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (0)

(type_check_stack_print) 
------------------

FN ARG 0 ri 2 0(i)  Arg ok
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:17
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
 BE:A
type_check_stack_push: 'A'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: '000' type:17
(type_check_stack_print) 
001: 'A' type:1
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: '000' type:v (17)
001: 'A' type:f (1)
 BE:@
BUFF_ID_OPERATOR
Found operator @
type_check_stack_pop: 'A'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:17
(type_check_stack_print) 
------------------

type_check_stack_pop: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (0)

(type_check_stack_print) 
------------------

 Mutable type 1 17
typecheck_expression:Syntax error at node N7