
(parser_check) NUM_BUFF_ID    :16
(parser_check) EXP_BUFF_ID_MAX:15
(parser_check) 
**********
**game: **
**********


 (scan_procdef) scan_procdef:

  (check_textlabel) check_textlabel: 'game: '
  (check_textlabel) check_textlabel:ret1

  (scan_literal) scan_literal:lit=':' ': '
  (scan_literal) scan_literal:After drop space:': '
  (scan_literal) scan_literal:while loop:: 
   Frst:1 T:':' exptype:U
  (token_is_function) 
token_is_function:
  (token_is_function) 
token_is_function:: is not function
token_is_variable: tok:':'
  (token_is_function) 
token_is_function:
  (token_is_function) 
token_is_function:: is not function
  (scan_literal) scan_literal:ret1
 (scan_procdef) scan_procdef:ret1
(translate_file) 
cline scanned OK
****************
**LOCAL e$(2) **
****************


 (check_declare) check_declare:

  (check_literal) check_literal:lit=' LOCAL' idx=0 'LOCAL e$(2) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'LOCAL e$(2) '
  (check_literal) check_literal:After while(): e$(2) 
  (check_literal) check_literal:ret1 
 (check_declare) check_declare:ret 1

  (scan_declare) scan_declare:

   (check_literal) check_literal:lit=' LOCAL' idx=0 'LOCAL e$(2) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'LOCAL' idx=0 'LOCAL e$(2) '
   (check_literal) check_literal:After while(): e$(2) 
   (check_literal) check_literal:ret1 

   (scan_localglobal) scan_localglobal:

    (scan_literal) scan_literal:lit=' LOCAL' 'LOCAL e$(2) '
    (scan_literal) scan_literal:After drop space:'LOCAL e$(2) '
    (scan_literal) scan_literal:while loop:LOCAL e$(2) 
    (scan_literal) scan_literal:while loop:OCAL e$(2) 
    (scan_literal) scan_literal:while loop:CAL e$(2) 
    (scan_literal) scan_literal:while loop:AL e$(2) 
    (scan_literal) scan_literal:while loop:L e$(2) 
   Frst:0 T:'LOCAL' exptype:U
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:LOCAL is not function
token_is_variable: tok:'LOCAL'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:LOCAL is not function
    (init_get_name) 
init_get_name:'LOCAL'
    (init_get_name) 
init_get_name:'LOCAL'
    (get_name) 
get_name:gn:'LOCAL'
process_token:type:U req_type:?
modify_expression_type:Inittype:U Intype:f Outtype:f
( output_variable) [f,()] f f LOCAL
    (scan_literal) scan_literal:ret1

    (check_variable) check_variable:

     (check_vname) check_vname 'e$(2) ':
     (check_vname) check_vname ret1 '$(2) ':
    (check_variable) check_variable: '$(2) '
    (check_variable) check_variable: Ary test '(2) '

     (check_literal) check_literal:lit='(' idx=8 '(2) '
     (check_literal) check_literal:After drop space:'(' idx=8 '(2) '
     (check_literal) check_literal:After while():2) 
     (check_literal) check_literal:ret1 
    (check_variable) check_variable: is array

     (check_expression) check_expression: '2) '

      (check_eitem) check_eitem: '2) '

       (check_operator) check_operator: 2) 

        (check_literal) check_literal:lit=' ,' idx=9 '2) '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:',' idx=9 '2) '
        (check_literal)   ',' != '2'
        (check_literal) check_literal: ret0
       (check_operator) ret0:is comma: 0

       (check_function) check_function: '2) '
       (check_function) check_function: ret0

       (check_atom) check_atom:

        (check_literal) check_literal:lit=' %' idx=9 '2) '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'%' idx=9 '2) '
        (check_literal)   '%' != '2'
        (check_literal) check_literal: ret0

        (check_literal) check_literal:lit=' "' idx=9 '2) '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'"' idx=9 '2) '
        (check_literal)   '"' != '2'
        (check_literal) check_literal: ret0

        (check_number) check_number:

         (check_float) check_float:
         (isfloatdigit) isfloatdigit:
         (isfloatdigit) isfloatdigit:
         (check_float) check_float: ret0

         (check_integer) check_integer: '2) '
         (check_integer) check_integer:ret1
        (check_number) check_number: ret1
       (check_atom) check_atom:ret1
      (check_eitem) check_eitem:ret1

      (check_eitem) check_eitem: ') '

       (check_operator) check_operator: ) 

        (check_literal) check_literal:lit=' ,' idx=10 ') '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:',' idx=10 ') '
        (check_literal)   ',' != ')'
        (check_literal) check_literal: ret0
       (check_operator) ret0:is comma: 0

       (check_function) check_function: ') '
       (check_function) check_function: ret0

       (check_atom) check_atom:

        (check_literal) check_literal:lit=' %' idx=10 ') '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'%' idx=10 ') '
        (check_literal)   '%' != ')'
        (check_literal) check_literal: ret0

        (check_literal) check_literal:lit=' "' idx=10 ') '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'"' idx=10 ') '
        (check_literal)   '"' != ')'
        (check_literal) check_literal: ret0

        (check_number) check_number:

         (check_float) check_float:
         (isfloatdigit) isfloatdigit:
         (check_float) check_float: ret0

         (check_integer) check_integer: ') '
         (check_integer) check_integer:ret0
        (check_number) check_number: ret0

        (check_variable) check_variable:

         (check_vname) check_vname ') ':
         (check_vname) check_vname ret0 ') ':
        (check_variable) check_variable:ret0 
       (check_atom) check_atom:ret1

       (check_sub_expr) check_sub_expr:

        (check_literal) check_literal:lit=' (' idx=10 ') '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'(' idx=10 ') '
        (check_literal)   '(' != ')'
        (check_literal) check_literal: ret0
       (check_sub_expr) check_sub_expr: ret0
      (check_eitem) check_eitem:ret0
     (check_expression) check_expression:ret1 ') '

     (check_literal) check_literal:lit=' ,' idx=10 ') '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=10 ') '
     (check_literal)   ',' != ')'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' )' idx=10 ') '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:')' idx=10 ') '
     (check_literal) check_literal:After while(): 
     (check_literal) check_literal:ret1 
    (check_variable) check_variable:ret1 

    (scan_variable) scan_variable:

     (scan_vname) scan_vname: ' e$(2) '
     (scan_vname) scan_vname: ret1 'e'
    (scan_variable) scan_variable: '$(2) ' vname='e'
    (scan_variable) scan_variable: Ary test '(2) '

     (check_literal) check_literal:lit='(' idx=8 '(2) '
     (check_literal) check_literal:After drop space:'(' idx=8 '(2) '
     (check_literal) check_literal:After while():2) 
     (check_literal) check_literal:ret1 

     (scan_literal) scan_literal:lit='(' '(2) '
     (scan_literal) scan_literal:After drop space:'(2) '
     (scan_literal) scan_literal:while loop:(2) 
   Frst:0 T:'(' exptype:f
(output_sub_start)
 Push:'('
     (op_stack_print) 
------------------
     (op_stack_print) 
Operator Stack     (1)

     (op_stack_print) 
000: ( type:16
     (op_stack_print) 
------------------

     (scan_literal) scan_literal:ret1
    (scan_variable) scan_variable: is array

     (scan_integer) scan_integer:
     (scan_integer) scan_integer:ret1
   Frst:0 T:'2' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(f )] i i 2
    (scan_integer) scan_integer:ret1  2
   (scan_variable) num idx:0

    (check_literal) check_literal:lit=' ,' idx=10 ') '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=10 ') '
    (check_literal)   ',' != ')'
    (check_literal) check_literal: ret0

    (scan_literal) scan_literal:lit=' )' ') '
    (scan_literal) scan_literal:After drop space:') '
    (scan_literal) scan_literal:while loop:) 
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (0)

    (op_stack_print) 
------------------

(  output_sub_end)
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function: is not function
(  output_sub_end)
    (scan_literal) scan_literal:ret1
   (scan_variable) scan_variable:ret1 vname='e$' is str:1 int:0 flt:0 ary:0
   Frst:0 T:'e$' exptype:f
  (token_is_function) 
token_is_function:
  (token_is_function) 
token_is_function:e$ is not function
token_is_variable: tok:'e$'
  (token_is_function) 
token_is_function:
  (token_is_function) 
token_is_function:e$ is not function
  (init_get_name) 
init_get_name:'e$'
  (init_get_name) 
init_get_name:'e$'
  (get_name) 
get_name:gn:'e$'
process_token:type:f req_type:i
modify_expression_type:Inittype:f Intype:s Outtype:f
( output_variable) [f,()] f f e$
  (scan_localglobal) scan_localglobal: LOCAL variable:'ûÅ˛'
  (print_var_info) 
VAR INFO: '                e$' gbl:0 ref:0 int:0 flt:0 str:1 ary:0 max_str:2 max_ary:0 num_ind:0

   (check_literal) check_literal:lit=' ,' idx=11 ' '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=12 ''
   (check_literal) check_literal  ret0 Empty test string

   (check_variable) check_variable:

    (check_vname) check_vname '':
    (check_vname) check_vname ret0 '':
   (check_variable) check_variable:ret0 
  (scan_localglobal) scan_localglobal:ret1
 (scan_declare) scan_declare:ret 1
****************************************
**LOCAL a%,b%,b1%,c%,c1%,x%,y%,i%,sc% **
****************************************


 (check_declare) check_declare:

  (check_literal) check_literal:lit=' LOCAL' idx=0 'LOCAL a%,b%,b1%,c%,c1%,x%,y%,i%,sc% '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'LOCAL a%,b%,b1%,c%,c1%,x%,y%,i%,sc% '
  (check_literal) check_literal:After while(): a%,b%,b1%,c%,c1%,x%,y%,i%,sc% 
  (check_literal) check_literal:ret1 
 (check_declare) check_declare:ret 1

  (scan_declare) scan_declare:

   (check_literal) check_literal:lit=' LOCAL' idx=0 'LOCAL a%,b%,b1%,c%,c1%,x%,y%,i%,sc% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'LOCAL' idx=0 'LOCAL a%,b%,b1%,c%,c1%,x%,y%,i%,sc% '
   (check_literal) check_literal:After while(): a%,b%,b1%,c%,c1%,x%,y%,i%,sc% 
   (check_literal) check_literal:ret1 

   (scan_localglobal) scan_localglobal:

    (scan_literal) scan_literal:lit=' LOCAL' 'LOCAL a%,b%,b1%,c%,c1%,x%,y%,i%,sc% '
    (scan_literal) scan_literal:After drop space:'LOCAL a%,b%,b1%,c%,c1%,x%,y%,i%,sc% '
    (scan_literal) scan_literal:while loop:LOCAL a%,b%,b1%,c%,c1%,x%,y%,i%,sc% 
    (scan_literal) scan_literal:while loop:OCAL a%,b%,b1%,c%,c1%,x%,y%,i%,sc% 
    (scan_literal) scan_literal:while loop:CAL a%,b%,b1%,c%,c1%,x%,y%,i%,sc% 
    (scan_literal) scan_literal:while loop:AL a%,b%,b1%,c%,c1%,x%,y%,i%,sc% 
    (scan_literal) scan_literal:while loop:L a%,b%,b1%,c%,c1%,x%,y%,i%,sc% 
   Frst:0 T:'LOCAL' exptype:f
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:LOCAL is not function
token_is_variable: tok:'LOCAL'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:LOCAL is not function
    (init_get_name) 
init_get_name:'LOCAL'
    (init_get_name) 
init_get_name:'LOCAL'
    (get_name) 
get_name:gn:'LOCAL'
process_token:type:f req_type:?
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,()] f f LOCAL
    (scan_literal) scan_literal:ret1

    (check_variable) check_variable:

     (check_vname) check_vname 'a%,b%,b1%,c%,c1%,x%,y%,i%,sc% ':
     (check_vname) check_vname ret1 '%,b%,b1%,c%,c1%,x%,y%,i%,sc% ':
    (check_variable) check_variable: '%,b%,b1%,c%,c1%,x%,y%,i%,sc% '
    (check_variable) check_variable: Ary test ',b%,b1%,c%,c1%,x%,y%,i%,sc% '

     (check_literal) check_literal:lit='(' idx=8 ',b%,b1%,c%,c1%,x%,y%,i%,sc% '
     (check_literal) check_literal:After drop space:'(' idx=8 ',b%,b1%,c%,c1%,x%,y%,i%,sc% '
     (check_literal)   '(' != ','
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 

   (scan_variable) scan_variable:

    (scan_vname) scan_vname: ' a%,b%,b1%,c%,c1%,x%,y%,i%,sc% '
    (scan_vname) scan_vname: ret1 'a'
   (scan_variable) scan_variable: '%,b%,b1%,c%,c1%,x%,y%,i%,sc% ' vname='a'
   (scan_variable) scan_variable: Ary test ',b%,b1%,c%,c1%,x%,y%,i%,sc% '

    (check_literal) check_literal:lit='(' idx=8 ',b%,b1%,c%,c1%,x%,y%,i%,sc% '
    (check_literal) check_literal:After drop space:'(' idx=8 ',b%,b1%,c%,c1%,x%,y%,i%,sc% '
    (check_literal)   '(' != ','
    (check_literal) check_literal: ret0
   (scan_variable) scan_variable:ret1 vname='a%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'a%' exptype:f
  (token_is_function) 
token_is_function:
  (token_is_function) 
token_is_function:a% is not function
token_is_variable: tok:'a%'
  (token_is_function) 
token_is_function:
  (token_is_function) 
token_is_function:a% is not function
  (init_get_name) 
init_get_name:'a%'
  (init_get_name) 
init_get_name:'a%'
  (get_name) 
get_name:gn:'a%'
process_token:type:f req_type:i
modify_expression_type:Inittype:f Intype:i Outtype:f
( output_variable) [f,()] f f a%
  (scan_localglobal) scan_localglobal: LOCAL variable:'ûÅ˛'
  (print_var_info) 
VAR INFO: '                a%' gbl:0 ref:0 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0

   (check_literal) check_literal:lit=' ,' idx=8 ',b%,b1%,c%,c1%,x%,y%,i%,sc% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=8 ',b%,b1%,c%,c1%,x%,y%,i%,sc% '
   (check_literal) check_literal:After while():b%,b1%,c%,c1%,x%,y%,i%,sc% 
   (check_literal) check_literal:ret1 

   (scan_literal) scan_literal:lit=' ,' ',b%,b1%,c%,c1%,x%,y%,i%,sc% '
   (scan_literal) scan_literal:After drop space:',b%,b1%,c%,c1%,x%,y%,i%,sc% '
   (scan_literal) scan_literal:while loop:,b%,b1%,c%,c1%,x%,y%,i%,sc% 
   Frst:0 T:',' exptype:f
(output_sub_start)
   (scan_literal) scan_literal:ret1

   (check_variable) check_variable:

    (check_vname) check_vname 'b%,b1%,c%,c1%,x%,y%,i%,sc% ':
    (check_vname) check_vname ret1 '%,b1%,c%,c1%,x%,y%,i%,sc% ':
   (check_variable) check_variable: '%,b1%,c%,c1%,x%,y%,i%,sc% '
   (check_variable) check_variable: Ary test ',b1%,c%,c1%,x%,y%,i%,sc% '

    (check_literal) check_literal:lit='(' idx=11 ',b1%,c%,c1%,x%,y%,i%,sc% '
    (check_literal) check_literal:After drop space:'(' idx=11 ',b1%,c%,c1%,x%,y%,i%,sc% '
    (check_literal)   '(' != ','
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'b%,b1%,c%,c1%,x%,y%,i%,sc% '
   (scan_vname) scan_vname: ret1 'b'
  (scan_variable) scan_variable: '%,b1%,c%,c1%,x%,y%,i%,sc% ' vname='b'
  (scan_variable) scan_variable: Ary test ',b1%,c%,c1%,x%,y%,i%,sc% '

   (check_literal) check_literal:lit='(' idx=11 ',b1%,c%,c1%,x%,y%,i%,sc% '
   (check_literal) check_literal:After drop space:'(' idx=11 ',b1%,c%,c1%,x%,y%,i%,sc% '
   (check_literal)   '(' != ','
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='b%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'b%' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:b% is not function
token_is_variable: tok:'b%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:b% is not function
 (init_get_name) 
init_get_name:'b%'
 (init_get_name) 
init_get_name:'b%'
 (get_name) 
get_name:gn:'b%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] i i b%
 (scan_localglobal) scan_localglobal: LOCAL variable:'ûÅ˛'
 (print_var_info) 
VAR INFO: '                b%' gbl:0 ref:0 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0

  (check_literal) check_literal:lit=' ,' idx=11 ',b1%,c%,c1%,x%,y%,i%,sc% '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:',' idx=11 ',b1%,c%,c1%,x%,y%,i%,sc% '
  (check_literal) check_literal:After while():b1%,c%,c1%,x%,y%,i%,sc% 
  (check_literal) check_literal:ret1 

  (scan_literal) scan_literal:lit=' ,' ',b1%,c%,c1%,x%,y%,i%,sc% '
  (scan_literal) scan_literal:After drop space:',b1%,c%,c1%,x%,y%,i%,sc% '
  (scan_literal) scan_literal:while loop:,b1%,c%,c1%,x%,y%,i%,sc% 
   Frst:0 T:',' exptype:i
(output_sub_start)
  (scan_literal) scan_literal:ret1

  (check_variable) check_variable:

   (check_vname) check_vname 'b1%,c%,c1%,x%,y%,i%,sc% ':
   (check_vname) check_vname ret1 '%,c%,c1%,x%,y%,i%,sc% ':
  (check_variable) check_variable: '%,c%,c1%,x%,y%,i%,sc% '
  (check_variable) check_variable: Ary test ',c%,c1%,x%,y%,i%,sc% '

   (check_literal) check_literal:lit='(' idx=15 ',c%,c1%,x%,y%,i%,sc% '
   (check_literal) check_literal:After drop space:'(' idx=15 ',c%,c1%,x%,y%,i%,sc% '
   (check_literal)   '(' != ','
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) scan_variable:

  (scan_vname) scan_vname: 'b1%,c%,c1%,x%,y%,i%,sc% '
  (scan_vname) scan_vname: ret1 'b1'
 (scan_variable) scan_variable: '%,c%,c1%,x%,y%,i%,sc% ' vname='b1'
 (scan_variable) scan_variable: Ary test ',c%,c1%,x%,y%,i%,sc% '

  (check_literal) check_literal:lit='(' idx=15 ',c%,c1%,x%,y%,i%,sc% '
  (check_literal) check_literal:After drop space:'(' idx=15 ',c%,c1%,x%,y%,i%,sc% '
  (check_literal)   '(' != ','
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='b1%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'b1%' exptype:U
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:b1% is not function
token_is_variable: tok:'b1%'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:b1% is not function
(init_get_name) 
init_get_name:'b1%'
(init_get_name) 
init_get_name:'b1%'
(get_name) 
get_name:gn:'b1%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] i i b1%
(scan_localglobal) scan_localglobal: LOCAL variable:'ûÅ˛'
(print_var_info) 
VAR INFO: '               b1%' gbl:0 ref:0 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0

 (check_literal) check_literal:lit=' ,' idx=15 ',c%,c1%,x%,y%,i%,sc% '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=15 ',c%,c1%,x%,y%,i%,sc% '
 (check_literal) check_literal:After while():c%,c1%,x%,y%,i%,sc% 
 (check_literal) check_literal:ret1 

 (scan_literal) scan_literal:lit=' ,' ',c%,c1%,x%,y%,i%,sc% '
 (scan_literal) scan_literal:After drop space:',c%,c1%,x%,y%,i%,sc% '
 (scan_literal) scan_literal:while loop:,c%,c1%,x%,y%,i%,sc% 
   Frst:0 T:',' exptype:i
(output_sub_start)
 (scan_literal) scan_literal:ret1

 (check_variable) check_variable:

  (check_vname) check_vname 'c%,c1%,x%,y%,i%,sc% ':
  (check_vname) check_vname ret1 '%,c1%,x%,y%,i%,sc% ':
 (check_variable) check_variable: '%,c1%,x%,y%,i%,sc% '
 (check_variable) check_variable: Ary test ',c1%,x%,y%,i%,sc% '

  (check_literal) check_literal:lit='(' idx=18 ',c1%,x%,y%,i%,sc% '
  (check_literal) check_literal:After drop space:'(' idx=18 ',c1%,x%,y%,i%,sc% '
  (check_literal)   '(' != ','
  (check_literal) check_literal: ret0
 (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
(check_variable) check_variable:ret1 

 (scan_variable) scan_variable:

  (scan_vname) scan_vname: 'c%,c1%,x%,y%,i%,sc% '
  (scan_vname) scan_vname: ret1 'c'
 (scan_variable) scan_variable: '%,c1%,x%,y%,i%,sc% ' vname='c'
 (scan_variable) scan_variable: Ary test ',c1%,x%,y%,i%,sc% '

  (check_literal) check_literal:lit='(' idx=18 ',c1%,x%,y%,i%,sc% '
  (check_literal) check_literal:After drop space:'(' idx=18 ',c1%,x%,y%,i%,sc% '
  (check_literal)   '(' != ','
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='c%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'c%' exptype:U
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:c% is not function
token_is_variable: tok:'c%'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:c% is not function
(init_get_name) 
init_get_name:'c%'
(init_get_name) 
init_get_name:'c%'
(get_name) 
get_name:gn:'c%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] i i c%
(scan_localglobal) scan_localglobal: LOCAL variable:'ûÅ˛'
(print_var_info) 
VAR INFO: '                c%' gbl:0 ref:0 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0

 (check_literal) check_literal:lit=' ,' idx=18 ',c1%,x%,y%,i%,sc% '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=18 ',c1%,x%,y%,i%,sc% '
 (check_literal) check_literal:After while():c1%,x%,y%,i%,sc% 
 (check_literal) check_literal:ret1 

 (scan_literal) scan_literal:lit=' ,' ',c1%,x%,y%,i%,sc% '
 (scan_literal) scan_literal:After drop space:',c1%,x%,y%,i%,sc% '
 (scan_literal) scan_literal:while loop:,c1%,x%,y%,i%,sc% 
   Frst:0 T:',' exptype:i
(output_sub_start)
 (scan_literal) scan_literal:ret1

 (check_variable) check_variable:

  (check_vname) check_vname 'c1%,x%,y%,i%,sc% ':
  (check_vname) check_vname ret1 '%,x%,y%,i%,sc% ':
 (check_variable) check_variable: '%,x%,y%,i%,sc% '
 (check_variable) check_variable: Ary test ',x%,y%,i%,sc% '

  (check_literal) check_literal:lit='(' idx=22 ',x%,y%,i%,sc% '
  (check_literal) check_literal:After drop space:'(' idx=22 ',x%,y%,i%,sc% '
  (check_literal)   '(' != ','
  (check_literal) check_literal: ret0
 (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
(check_variable) check_variable:ret1 

 (scan_variable) scan_variable:

  (scan_vname) scan_vname: 'c1%,x%,y%,i%,sc% '
  (scan_vname) scan_vname: ret1 'c1'
 (scan_variable) scan_variable: '%,x%,y%,i%,sc% ' vname='c1'
 (scan_variable) scan_variable: Ary test ',x%,y%,i%,sc% '

  (check_literal) check_literal:lit='(' idx=22 ',x%,y%,i%,sc% '
  (check_literal) check_literal:After drop space:'(' idx=22 ',x%,y%,i%,sc% '
  (check_literal)   '(' != ','
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='c1%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'c1%' exptype:U
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:c1% is not function
token_is_variable: tok:'c1%'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:c1% is not function
(init_get_name) 
init_get_name:'c1%'
(init_get_name) 
init_get_name:'c1%'
(get_name) 
get_name:gn:'c1%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] i i c1%
(scan_localglobal) scan_localglobal: LOCAL variable:'ûÅ˛'
(print_var_info) 
VAR INFO: '               c1%' gbl:0 ref:0 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0

 (check_literal) check_literal:lit=' ,' idx=22 ',x%,y%,i%,sc% '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=22 ',x%,y%,i%,sc% '
 (check_literal) check_literal:After while():x%,y%,i%,sc% 
 (check_literal) check_literal:ret1 

 (scan_literal) scan_literal:lit=' ,' ',x%,y%,i%,sc% '
 (scan_literal) scan_literal:After drop space:',x%,y%,i%,sc% '
 (scan_literal) scan_literal:while loop:,x%,y%,i%,sc% 
   Frst:0 T:',' exptype:i
(output_sub_start)
 (scan_literal) scan_literal:ret1

 (check_variable) check_variable:

  (check_vname) check_vname 'x%,y%,i%,sc% ':
  (check_vname) check_vname ret1 '%,y%,i%,sc% ':
 (check_variable) check_variable: '%,y%,i%,sc% '
 (check_variable) check_variable: Ary test ',y%,i%,sc% '

  (check_literal) check_literal:lit='(' idx=25 ',y%,i%,sc% '
  (check_literal) check_literal:After drop space:'(' idx=25 ',y%,i%,sc% '
  (check_literal)   '(' != ','
  (check_literal) check_literal: ret0
 (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
(check_variable) check_variable:ret1 

 (scan_variable) scan_variable:

  (scan_vname) scan_vname: 'x%,y%,i%,sc% '
  (scan_vname) scan_vname: ret1 'x'
 (scan_variable) scan_variable: '%,y%,i%,sc% ' vname='x'
 (scan_variable) scan_variable: Ary test ',y%,i%,sc% '

  (check_literal) check_literal:lit='(' idx=25 ',y%,i%,sc% '
  (check_literal) check_literal:After drop space:'(' idx=25 ',y%,i%,sc% '
  (check_literal)   '(' != ','
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='x%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'x%' exptype:U
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:x% is not function
token_is_variable: tok:'x%'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:x% is not function
(init_get_name) 
init_get_name:'x%'
(init_get_name) 
init_get_name:'x%'
(get_name) 
get_name:gn:'x%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] i i x%
(scan_localglobal) scan_localglobal: LOCAL variable:'ûÅ˛'
(print_var_info) 
VAR INFO: '                x%' gbl:0 ref:0 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0

 (check_literal) check_literal:lit=' ,' idx=25 ',y%,i%,sc% '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=25 ',y%,i%,sc% '
 (check_literal) check_literal:After while():y%,i%,sc% 
 (check_literal) check_literal:ret1 

 (scan_literal) scan_literal:lit=' ,' ',y%,i%,sc% '
 (scan_literal) scan_literal:After drop space:',y%,i%,sc% '
 (scan_literal) scan_literal:while loop:,y%,i%,sc% 
   Frst:0 T:',' exptype:i
(output_sub_start)
 (scan_literal) scan_literal:ret1

 (check_variable) check_variable:

  (check_vname) check_vname 'y%,i%,sc% ':
  (check_vname) check_vname ret1 '%,i%,sc% ':
 (check_variable) check_variable: '%,i%,sc% '
 (check_variable) check_variable: Ary test ',i%,sc% '

  (check_literal) check_literal:lit='(' idx=28 ',i%,sc% '
  (check_literal) check_literal:After drop space:'(' idx=28 ',i%,sc% '
  (check_literal)   '(' != ','
  (check_literal) check_literal: ret0
 (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
(check_variable) check_variable:ret1 

 (scan_variable) scan_variable:

  (scan_vname) scan_vname: 'y%,i%,sc% '
  (scan_vname) scan_vname: ret1 'y'
 (scan_variable) scan_variable: '%,i%,sc% ' vname='y'
 (scan_variable) scan_variable: Ary test ',i%,sc% '

  (check_literal) check_literal:lit='(' idx=28 ',i%,sc% '
  (check_literal) check_literal:After drop space:'(' idx=28 ',i%,sc% '
  (check_literal)   '(' != ','
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='y%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'y%' exptype:U
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:y% is not function
token_is_variable: tok:'y%'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:y% is not function
(init_get_name) 
init_get_name:'y%'
(init_get_name) 
init_get_name:'y%'
(get_name) 
get_name:gn:'y%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] i i y%
(scan_localglobal) scan_localglobal: LOCAL variable:'ûÅ˛'
(print_var_info) 
VAR INFO: '                y%' gbl:0 ref:0 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0

 (check_literal) check_literal:lit=' ,' idx=28 ',i%,sc% '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=28 ',i%,sc% '
 (check_literal) check_literal:After while():i%,sc% 
 (check_literal) check_literal:ret1 

 (scan_literal) scan_literal:lit=' ,' ',i%,sc% '
 (scan_literal) scan_literal:After drop space:',i%,sc% '
 (scan_literal) scan_literal:while loop:,i%,sc% 
   Frst:0 T:',' exptype:i
(output_sub_start)
 (scan_literal) scan_literal:ret1

 (check_variable) check_variable:

  (check_vname) check_vname 'i%,sc% ':
  (check_vname) check_vname ret1 '%,sc% ':
 (check_variable) check_variable: '%,sc% '
 (check_variable) check_variable: Ary test ',sc% '

  (check_literal) check_literal:lit='(' idx=31 ',sc% '
  (check_literal) check_literal:After drop space:'(' idx=31 ',sc% '
  (check_literal)   '(' != ','
  (check_literal) check_literal: ret0
 (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
(check_variable) check_variable:ret1 

 (scan_variable) scan_variable:

  (scan_vname) scan_vname: 'i%,sc% '
  (scan_vname) scan_vname: ret1 'i'
 (scan_variable) scan_variable: '%,sc% ' vname='i'
 (scan_variable) scan_variable: Ary test ',sc% '

  (check_literal) check_literal:lit='(' idx=31 ',sc% '
  (check_literal) check_literal:After drop space:'(' idx=31 ',sc% '
  (check_literal)   '(' != ','
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='i%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'i%' exptype:U
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:i% is not function
token_is_variable: tok:'i%'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:i% is not function
(init_get_name) 
init_get_name:'i%'
(init_get_name) 
init_get_name:'i%'
(get_name) 
get_name:gn:'i%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] i i i%
(scan_localglobal) scan_localglobal: LOCAL variable:'ûÅ˛'
(print_var_info) 
VAR INFO: '                i%' gbl:0 ref:0 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0

 (check_literal) check_literal:lit=' ,' idx=31 ',sc% '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=31 ',sc% '
 (check_literal) check_literal:After while():sc% 
 (check_literal) check_literal:ret1 

 (scan_literal) scan_literal:lit=' ,' ',sc% '
 (scan_literal) scan_literal:After drop space:',sc% '
 (scan_literal) scan_literal:while loop:,sc% 
   Frst:0 T:',' exptype:i
(output_sub_start)
 (scan_literal) scan_literal:ret1

 (check_variable) check_variable:

  (check_vname) check_vname 'sc% ':
  (check_vname) check_vname ret1 '% ':
 (check_variable) check_variable: '% '
 (check_variable) check_variable: Ary test ' '

  (check_literal) check_literal:lit='(' idx=35 ' '
  (check_literal) check_literal:After drop space:'(' idx=35 ' '
  (check_literal)   '(' != ' '
  (check_literal) check_literal: ret0
 (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
(check_variable) check_variable:ret1 

 (scan_variable) scan_variable:

  (scan_vname) scan_vname: 'sc% '
  (scan_vname) scan_vname: ret1 'sc'
 (scan_variable) scan_variable: '% ' vname='sc'
 (scan_variable) scan_variable: Ary test ' '

  (check_literal) check_literal:lit='(' idx=35 ' '
  (check_literal) check_literal:After drop space:'(' idx=35 ' '
  (check_literal)   '(' != ' '
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='sc%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'sc%' exptype:U
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:sc% is not function
token_is_variable: tok:'sc%'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:sc% is not function
(init_get_name) 
init_get_name:'sc%'
(init_get_name) 
init_get_name:'sc%'
(get_name) 
get_name:gn:'sc%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] i i sc%
(scan_localglobal) scan_localglobal: LOCAL variable:'ûÅ˛'
(print_var_info) 
VAR INFO: '               sc%' gbl:0 ref:0 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0

 (check_literal) check_literal:lit=' ,' idx=35 ' '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:',' idx=36 ''
 (check_literal) check_literal  ret0 Empty test string

 (check_variable) check_variable:

  (check_vname) check_vname '':
  (check_vname) check_vname ret0 '':
 (check_variable) check_variable:ret0 
(scan_localglobal) scan_localglobal:ret1
(scan_declare) scan_declare:ret 1
*************************
**graphic: :CURSOR OFF **
*************************


 (check_declare) check_declare:

  (check_literal) check_literal:lit=' LOCAL' idx=0 'graphic: :CURSOR OFF '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'LOCAL' idx=0 'graphic: :CURSOR OFF '
  (check_literal)   'L' != 'g'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' GLOBAL' idx=0 'graphic: :CURSOR OFF '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'GLOBAL' idx=0 'graphic: :CURSOR OFF '
  (check_literal)   'G' != 'g'
  (check_literal) check_literal: ret0
 (check_declare) check_declare:ret 0

 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'graphic: :CURSOR OFF ':
     (check_vname) check_vname ret1 ': :CURSOR OFF ':
    (check_variable) check_variable: ': :CURSOR OFF '
    (check_variable) check_variable: Ary test ': :CURSOR OFF '

     (check_literal) check_literal:lit='(' idx=7 ': :CURSOR OFF '
     (check_literal) check_literal:After drop space:'(' idx=7 ': :CURSOR OFF '
     (check_literal)   '(' != ':'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=7 ': :CURSOR OFF '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=7 ': :CURSOR OFF '
   (check_literal)   '=' != ':'
   (check_literal) check_literal: ret0
  (check_assignment) check_assignment:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) check_textlabel: 'graphic: :CURSOR OFF '
   (check_textlabel) check_textlabel:ret1

   (check_literal) check_literal:lit=':' idx=7 ': :CURSOR OFF '
   (check_literal) check_literal:After drop space:':' idx=7 ': :CURSOR OFF '
   (check_literal) check_literal:After while(): :CURSOR OFF 
   (check_literal) check_literal:ret1 
  (check_proc_call) check_proc_call:ret1
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=13, ' :CURSOR OFF '
========================================================
graphic: :CURSOR OFF 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'graphic: :CURSOR OFF ':
    (check_vname) check_vname ret1 ': :CURSOR OFF ':
   (check_variable) check_variable: ': :CURSOR OFF '
   (check_variable) check_variable: Ary test ': :CURSOR OFF '

    (check_literal) check_literal:lit='(' idx=7 ': :CURSOR OFF '
    (check_literal) check_literal:After drop space:'(' idx=7 ': :CURSOR OFF '
    (check_literal)   '(' != ':'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=7 ': :CURSOR OFF '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=7 ': :CURSOR OFF '
  (check_literal)   '=' != ':'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'graphic: :CURSOR OFF '
  (check_textlabel) check_textlabel:ret1

  (check_literal) check_literal:lit=':' idx=7 ': :CURSOR OFF '
  (check_literal) check_literal:After drop space:':' idx=7 ': :CURSOR OFF '
  (check_literal) check_literal:After while(): :CURSOR OFF 
  (check_literal) check_literal:ret1 
 (check_proc_call) check_proc_call:ret1

 (scan_proc_call) scan_proc_call:

  (check_textlabel) check_textlabel: 'graphic: :CURSOR OFF '
  (check_textlabel) check_textlabel:ret1
 (scan_proc_call) scan_proc_call:*** 'graphic'

  (scan_literal) scan_literal:lit=':' ': :CURSOR OFF '
  (scan_literal) scan_literal:After drop space:': :CURSOR OFF '
  (scan_literal) scan_literal:while loop:: :CURSOR OFF 
   Frst:1 T:':' exptype:U
  (token_is_function) 
token_is_function:
  (token_is_function) 
token_is_function:: is not function
token_is_variable: tok:':'
  (token_is_function) 
token_is_function:
  (token_is_function) 
token_is_function:: is not function
  (scan_literal) scan_literal:ret1
 (scan_proc_call) scan_proc_call:ret1
   Frst:0 T:'graphic' exptype:U
Buff id proc call
(output_proc_call) [U,()] U U graphic
Finalise stack
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_PROC_CALL    U rq:U 'graphic' nidx:1667852400  0:
=================
 BE:graphic
default buf_id

Type Check Stack (0)

Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_PROC_CALL    U rq:U 'graphic' nidx:1667852400  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_PROC_CALL    U rq:U 'graphic'  0:
=================
(process_expression_types) 
==INFIX==

Infix stack empty
(process_expression_types) ====
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_PROC_CALL    U rq:U graphic  0:

 (check_literal) check_literal:lit=':' idx=9 ':CURSOR OFF '
 (check_literal) check_literal:After drop space:':' idx=9 ':CURSOR OFF '
 (check_literal) check_literal:After while():CURSOR OFF 
 (check_literal) check_literal:ret1 

 (scan_literal) scan_literal:lit=':' 'CURSOR OFF '
 (scan_literal) scan_literal:After drop space:'CURSOR OFF '
 (scan_literal) scan_literal:while loop:CURSOR OFF 
 (scan_literal) scan_literal:ret1

 (check_line) check_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'CURSOR OFF ':
    (check_vname) check_vname ret1 ' OFF ':
   (check_variable) check_variable: ' OFF '
   (check_variable) check_variable: Ary test ' OFF '

    (check_literal) check_literal:lit='(' idx=16 ' OFF '
    (check_literal) check_literal:After drop space:'(' idx=16 ' OFF '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=16 ' OFF '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=17 'OFF '
  (check_literal)   '=' != 'O'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'CURSOR OFF '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'CURSOR'
(check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=5, ' OFF '
========================================================
graphic: :CURSOR OFF 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'CURSOR OFF ':
    (check_vname) check_vname ret1 ' OFF ':
   (check_variable) check_variable: ' OFF '
   (check_variable) check_variable: Ary test ' OFF '

    (check_literal) check_literal:lit='(' idx=16 ' OFF '
    (check_literal) check_literal:After drop space:'(' idx=16 ' OFF '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=16 ' OFF '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=17 'OFF '
  (check_literal)   '=' != 'O'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'CURSOR OFF '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'CURSOR'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'CURSOR' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) CURSOR is function
 (function_return_type) 
function_return_type: 'CURSOR' =>v
 (function_return_type) 
function_return_type: 'CURSOR' =>17
process_token: 'CURSOR' t=>v
 Push:'CURSOR'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: CURSOR type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: CURSOR type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (check_onoff) check_onoff: ' OFF '

   (check_literal) check_literal:lit=' ON' idx=16 ' OFF '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'ON' idx=17 'OFF '
   (check_literal)   'N' != 'F'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' OFF' idx=16 ' OFF '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'OFF' idx=17 'OFF '
   (check_literal) check_literal:After while(): 
   (check_literal) check_literal:ret1 
  (check_onoff) check_onoff:ret1
   Frst:0 T:'0' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U )] i i 0
 (scan_command) scan_command: ret1 =>'CURSOR'
(scan_command) 
ENDEXP
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: CURSOR type:17
(op_stack_print) 
------------------

(  output_sub_end)
(token_is_function) 
token_is_function:
(token_is_function) CURSOR is function
Pop 5
Pop 'CURSOR'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_function) [i,(U )] v v CURSOR
(  output_sub_end)
Finalise stack
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '0' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'CURSOR' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
 BE:

Type Check Stack (0)

 BE:0
type_check_stack_push: '0'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '0' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '0' type:i (0)
 BE:

Type Check Stack (1)

000: '0' type:i (0)
 BE:CURSOR
FN: 1 args
(function_return_type) 
function_return_type: 'CURSOR' =>v
(function_return_type) 
function_return_type: 'CURSOR' =>17
ret_type;17 v
typecheck_expression:Ret type of CURSOR : v
type_check_stack_pop: '0'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (0)

(type_check_stack_print) 
------------------

FN ARG 0 ri 0 0(i)  Arg ok
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:17
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '0' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'CURSOR' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i '0'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_FUNCTION     v rq:v 'CURSOR'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
(process_expression_types) 
==INFIX==

infix_stack_push: '0'
infix_stack_pop: '0'
infix_stack_push: 'CURSOR(0 )'
infix_stack_pop: 'CURSOR(0 )'
(process_expression_types) ==CURSOR(0 )==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_INTEGER      i rq:i 0  0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N4 EXP_BUFF_ID_FUNCTION     v rq:v CURSOR  0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_END      U rq:i   0:

 (check_literal) check_literal:lit=':' idx=17 'OFF '
 (check_literal) check_literal:After drop space:':' idx=17 'OFF '
 (check_literal)   ':' != 'O'
 (check_literal) check_literal: ret0
(translate_file) 
cline failed scan
***********************
**e$=CHR$(4)+CHR$(6) **
***********************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'e$=CHR$(4)+CHR$(6) ':
     (check_vname) check_vname ret1 '$=CHR$(4)+CHR$(6) ':
    (check_variable) check_variable: '$=CHR$(4)+CHR$(6) '
    (check_variable) check_variable: Ary test '=CHR$(4)+CHR$(6) '

     (check_literal) check_literal:lit='(' idx=2 '=CHR$(4)+CHR$(6) '
     (check_literal) check_literal:After drop space:'(' idx=2 '=CHR$(4)+CHR$(6) '
     (check_literal)   '(' != '='
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='$' is str:1 int:0 flt:0 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=2 '=CHR$(4)+CHR$(6) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=2 '=CHR$(4)+CHR$(6) '
   (check_literal) check_literal:After while():CHR$(4)+CHR$(6) 
   (check_literal) check_literal:ret1 

   (check_expression) check_expression: 'CHR$(4)+CHR$(6) '

    (check_eitem) check_eitem: 'CHR$(4)+CHR$(6) '

     (check_operator) check_operator: CHR$(4)+CHR$(6) 

      (check_literal) check_literal:lit=' ,' idx=3 'CHR$(4)+CHR$(6) '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=3 'CHR$(4)+CHR$(6) '
      (check_literal)   ',' != 'C'
      (check_literal) check_literal: ret0
     (check_operator) ret0:is comma: 0

     (check_function) check_function: 'CHR$(4)+CHR$(6) '
     (check_function) check_function: ret1 Found fn=>'CHR$'
    (check_eitem) check_eitem:ret1

    (check_eitem) check_eitem: '(4)+CHR$(6) '

     (check_operator) check_operator: (4)+CHR$(6) 

      (check_literal) check_literal:lit=' ,' idx=7 '(4)+CHR$(6) '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=7 '(4)+CHR$(6) '
      (check_literal)   ',' != '('
      (check_literal) check_literal: ret0
     (check_operator) ret0:is comma: 0

     (check_function) check_function: '(4)+CHR$(6) '
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=7 '(4)+CHR$(6) '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=7 '(4)+CHR$(6) '
      (check_literal)   '%' != '('
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=7 '(4)+CHR$(6) '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=7 '(4)+CHR$(6) '
      (check_literal)   '"' != '('
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: '(4)+CHR$(6) '
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname '(4)+CHR$(6) ':
       (check_vname) check_vname ret0 '(4)+CHR$(6) ':
      (check_variable) check_variable:ret0 
     (check_atom) check_atom:ret1

     (check_sub_expr) check_sub_expr:

      (check_literal) check_literal:lit=' (' idx=7 '(4)+CHR$(6) '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'(' idx=7 '(4)+CHR$(6) '
      (check_literal) check_literal:After while():4)+CHR$(6) 
      (check_literal) check_literal:ret1 
     (check_sub_expr) check_sub_expr: ret1
    (check_eitem) check_eitem:ret1

    (check_eitem) check_eitem: '4)+CHR$(6) '

     (check_operator) check_operator: 4)+CHR$(6) 

      (check_literal) check_literal:lit=' ,' idx=8 '4)+CHR$(6) '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=8 '4)+CHR$(6) '
      (check_literal)   ',' != '4'
      (check_literal) check_literal: ret0
     (check_operator) ret0:is comma: 0

     (check_function) check_function: '4)+CHR$(6) '
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=8 '4)+CHR$(6) '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=8 '4)+CHR$(6) '
      (check_literal)   '%' != '4'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=8 '4)+CHR$(6) '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=8 '4)+CHR$(6) '
      (check_literal)   '"' != '4'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: '4)+CHR$(6) '
       (check_integer) check_integer:ret1
      (check_number) check_number: ret1
     (check_atom) check_atom:ret1
    (check_eitem) check_eitem:ret1

    (check_eitem) check_eitem: ')+CHR$(6) '

     (check_operator) check_operator: )+CHR$(6) 

      (check_literal) check_literal:lit=' ,' idx=9 ')+CHR$(6) '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=9 ')+CHR$(6) '
      (check_literal)   ',' != ')'
      (check_literal) check_literal: ret0
     (check_operator) ret0:is comma: 0

     (check_function) check_function: ')+CHR$(6) '
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=9 ')+CHR$(6) '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=9 ')+CHR$(6) '
      (check_literal)   '%' != ')'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=9 ')+CHR$(6) '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=9 ')+CHR$(6) '
      (check_literal)   '"' != ')'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: ')+CHR$(6) '
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname ')+CHR$(6) ':
       (check_vname) check_vname ret0 ')+CHR$(6) ':
      (check_variable) check_variable:ret0 
     (check_atom) check_atom:ret1

     (check_sub_expr) check_sub_expr:

      (check_literal) check_literal:lit=' (' idx=9 ')+CHR$(6) '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'(' idx=9 ')+CHR$(6) '
      (check_literal)   '(' != ')'
      (check_literal) check_literal: ret0
     (check_sub_expr) check_sub_expr: ret0
    (check_eitem) check_eitem:ret0
   (check_expression) check_expression:ret1 ')+CHR$(6) '
  (check_assignment) check_assignment:ret1
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=10, ')+CHR$(6) '
========================================================
e$=CHR$(4)+CHR$(6) 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'e$=CHR$(4)+CHR$(6) ':
    (check_vname) check_vname ret1 '$=CHR$(4)+CHR$(6) ':
   (check_variable) check_variable: '$=CHR$(4)+CHR$(6) '
   (check_variable) check_variable: Ary test '=CHR$(4)+CHR$(6) '

    (check_literal) check_literal:lit='(' idx=2 '=CHR$(4)+CHR$(6) '
    (check_literal) check_literal:After drop space:'(' idx=2 '=CHR$(4)+CHR$(6) '
    (check_literal)   '(' != '='
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='$' is str:1 int:0 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=2 '=CHR$(4)+CHR$(6) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=2 '=CHR$(4)+CHR$(6) '
  (check_literal) check_literal:After while():CHR$(4)+CHR$(6) 
  (check_literal) check_literal:ret1 

  (check_expression) check_expression: 'CHR$(4)+CHR$(6) '

   (check_eitem) check_eitem: 'CHR$(4)+CHR$(6) '

    (check_operator) check_operator: CHR$(4)+CHR$(6) 

     (check_literal) check_literal:lit=' ,' idx=3 'CHR$(4)+CHR$(6) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=3 'CHR$(4)+CHR$(6) '
     (check_literal)   ',' != 'C'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'CHR$(4)+CHR$(6) '
    (check_function) check_function: ret1 Found fn=>'CHR$'
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: '(4)+CHR$(6) '

    (check_operator) check_operator: (4)+CHR$(6) 

     (check_literal) check_literal:lit=' ,' idx=7 '(4)+CHR$(6) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=7 '(4)+CHR$(6) '
     (check_literal)   ',' != '('
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: '(4)+CHR$(6) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=7 '(4)+CHR$(6) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=7 '(4)+CHR$(6) '
     (check_literal)   '%' != '('
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=7 '(4)+CHR$(6) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=7 '(4)+CHR$(6) '
     (check_literal)   '"' != '('
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '(4)+CHR$(6) '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname '(4)+CHR$(6) ':
      (check_vname) check_vname ret0 '(4)+CHR$(6) ':
     (check_variable) check_variable:ret0 
    (check_atom) check_atom:ret1

    (check_sub_expr) check_sub_expr:

     (check_literal) check_literal:lit=' (' idx=7 '(4)+CHR$(6) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'(' idx=7 '(4)+CHR$(6) '
     (check_literal) check_literal:After while():4)+CHR$(6) 
     (check_literal) check_literal:ret1 
    (check_sub_expr) check_sub_expr: ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: '4)+CHR$(6) '

    (check_operator) check_operator: 4)+CHR$(6) 

     (check_literal) check_literal:lit=' ,' idx=8 '4)+CHR$(6) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=8 '4)+CHR$(6) '
     (check_literal)   ',' != '4'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: '4)+CHR$(6) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=8 '4)+CHR$(6) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=8 '4)+CHR$(6) '
     (check_literal)   '%' != '4'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=8 '4)+CHR$(6) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=8 '4)+CHR$(6) '
     (check_literal)   '"' != '4'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '4)+CHR$(6) '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: ')+CHR$(6) '

    (check_operator) check_operator: )+CHR$(6) 

     (check_literal) check_literal:lit=' ,' idx=9 ')+CHR$(6) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=9 ')+CHR$(6) '
     (check_literal)   ',' != ')'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: ')+CHR$(6) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=9 ')+CHR$(6) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=9 ')+CHR$(6) '
     (check_literal)   '%' != ')'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=9 ')+CHR$(6) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=9 ')+CHR$(6) '
     (check_literal)   '"' != ')'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: ')+CHR$(6) '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname ')+CHR$(6) ':
      (check_vname) check_vname ret0 ')+CHR$(6) ':
     (check_variable) check_variable:ret0 
    (check_atom) check_atom:ret1

    (check_sub_expr) check_sub_expr:

     (check_literal) check_literal:lit=' (' idx=9 ')+CHR$(6) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'(' idx=9 ')+CHR$(6) '
     (check_literal)   '(' != ')'
     (check_literal) check_literal: ret0
    (check_sub_expr) check_sub_expr: ret0
   (check_eitem) check_eitem:ret0
  (check_expression) check_expression:ret1 ')+CHR$(6) '
 (check_assignment) check_assignment:ret1

 (scan_assignment) scan_assignment:

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'e$=CHR$(4)+CHR$(6) '
   (scan_vname) scan_vname: ret1 'e'
  (scan_variable) scan_variable: '$=CHR$(4)+CHR$(6) ' vname='e'
  (scan_variable) scan_variable: Ary test '=CHR$(4)+CHR$(6) '

   (check_literal) check_literal:lit='(' idx=2 '=CHR$(4)+CHR$(6) '
   (check_literal) check_literal:After drop space:'(' idx=2 '=CHR$(4)+CHR$(6) '
   (check_literal)   '(' != '='
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='e$' is str:1 int:0 flt:0 ary:0
   Frst:1 T:'e$' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:e$ is not function
token_is_variable: tok:'e$'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:e$ is not function
 (init_get_name) 
init_get_name:'e$'
 (init_get_name) 
init_get_name:'e$'
 (get_name) 
get_name:gn:'e$'
modify_expression_type:Inittype:U Intype:s Outtype:s
( output_variable) [s,()] s s e$
 (print_var_info) 
VAR INFO: '                e$' gbl:0 ref:1 int:0 flt:0 str:1 ary:0 max_str:0 max_ary:0 num_ind:0

  (scan_assignment_equals) scan_assignment_equals:lit=' =' '=CHR$(4)+CHR$(6) '
  (scan_assignment_equals) scan_assignment_equals:After drop space:'=CHR$(4)+CHR$(6) '
  (scan_assignment_equals) scan_assignment_equals:while loop:=CHR$(4)+CHR$(6) 
   Frst:0 T:':=' exptype:s
  (operator_precedence) 
:= is operator
':=' is operator
  (process_token) 
Token is operator o1 name::= o2 name:
  (process_token) 
opr1:1 opr2:0
Push 1
 Push:':='
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (1)

  (op_stack_print) 
000: := type:2
  (op_stack_print) 
------------------

  (scan_assignment_equals) scan_assignment_equals:ret1

  (scan_expression) scan_expression: 'CHR$(4)+CHR$(6) '

   (check_eitem) check_eitem: 'CHR$(4)+CHR$(6) '

    (check_operator) check_operator: CHR$(4)+CHR$(6) 

     (check_literal) check_literal:lit=' ,' idx=3 'CHR$(4)+CHR$(6) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=3 'CHR$(4)+CHR$(6) '
     (check_literal)   ',' != 'C'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'CHR$(4)+CHR$(6) '
    (check_function) check_function: ret1 Found fn=>'CHR$'
   (check_eitem) check_eitem:ret1

   (scan_eitem) scan_eitem:

    (check_operator) check_operator: CHR$(4)+CHR$(6) 

     (check_literal) check_literal:lit=' ,' idx=3 'CHR$(4)+CHR$(6) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=3 'CHR$(4)+CHR$(6) '
     (check_literal)   ',' != 'C'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'CHR$(4)+CHR$(6) '
    (check_function) check_function: ret1 Found fn=>'CHR$'

    (scan_function) scan_function:
   Frst:0 T:'CHR$' exptype:s
    (operator_precedence) 
:= is operator
    (token_is_function) 
token_is_function:
    (token_is_function) CHR$ is function
    (function_return_type) 
function_return_type: 'CHR$' =>s
    (function_return_type) 
function_return_type: 'CHR$' =>2
process_token: 'CHR$' t=>s
 Push:'CHR$'
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (2)

    (op_stack_print) 
000: := type:2
    (op_stack_print) 
001: CHR$ type:2
    (op_stack_print) 
------------------

    (scan_expression) n commas now:0

     (check_eitem) check_eitem: '(4)+CHR$(6) '

      (check_operator) check_operator: (4)+CHR$(6) 

       (check_literal) check_literal:lit=' ,' idx=7 '(4)+CHR$(6) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=7 '(4)+CHR$(6) '
       (check_literal)   ',' != '('
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: '(4)+CHR$(6) '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=7 '(4)+CHR$(6) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=7 '(4)+CHR$(6) '
       (check_literal)   '%' != '('
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=7 '(4)+CHR$(6) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=7 '(4)+CHR$(6) '
       (check_literal)   '"' != '('
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '(4)+CHR$(6) '
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname '(4)+CHR$(6) ':
        (check_vname) check_vname ret0 '(4)+CHR$(6) ':
       (check_variable) check_variable:ret0 
      (check_atom) check_atom:ret1

      (check_sub_expr) check_sub_expr:

       (check_literal) check_literal:lit=' (' idx=7 '(4)+CHR$(6) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'(' idx=7 '(4)+CHR$(6) '
       (check_literal) check_literal:After while():4)+CHR$(6) 
       (check_literal) check_literal:ret1 
      (check_sub_expr) check_sub_expr: ret1
     (check_eitem) check_eitem:ret1

     (scan_eitem) scan_eitem:

      (check_operator) check_operator: (4)+CHR$(6) 

       (check_literal) check_literal:lit=' ,' idx=7 '(4)+CHR$(6) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=7 '(4)+CHR$(6) '
       (check_literal)   ',' != '('
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: '(4)+CHR$(6) '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=7 '(4)+CHR$(6) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=7 '(4)+CHR$(6) '
       (check_literal)   '%' != '('
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=7 '(4)+CHR$(6) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=7 '(4)+CHR$(6) '
       (check_literal)   '"' != '('
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '(4)+CHR$(6) '
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname '(4)+CHR$(6) ':
        (check_vname) check_vname ret0 '(4)+CHR$(6) ':
       (check_variable) check_variable:ret0 
      (check_atom) check_atom:ret1

      (check_sub_expr) check_sub_expr:

       (check_literal) check_literal:lit=' (' idx=7 '(4)+CHR$(6) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'(' idx=7 '(4)+CHR$(6) '
       (check_literal) check_literal:After while():4)+CHR$(6) 
       (check_literal) check_literal:ret1 
      (check_sub_expr) check_sub_expr: ret1

      (scan_sub_expr) scan_sub_expr:

       (scan_literal) scan_literal:lit=' (' '(4)+CHR$(6) '
       (scan_literal) scan_literal:After drop space:'(4)+CHR$(6) '
       (scan_literal) scan_literal:while loop:(4)+CHR$(6) 
   Frst:0 T:'(' exptype:s
(output_sub_start)
 Push:'('
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (3)

       (op_stack_print) 
000: := type:2
       (op_stack_print) 
001: CHR$ type:2
       (op_stack_print) 
002: ( type:16
       (op_stack_print) 
------------------

       (scan_literal) scan_literal:ret1
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (4)

      (op_stack_print) 
000: := type:2
      (op_stack_print) 
001: CHR$ type:2
      (op_stack_print) 
002: ( type:16
      (op_stack_print) 
003: ( type:16
      (op_stack_print) 
------------------


       (scan_expression) scan_expression: '4)+CHR$(6) '

        (check_eitem) check_eitem: '4)+CHR$(6) '

         (check_operator) check_operator: 4)+CHR$(6) 

          (check_literal) check_literal:lit=' ,' idx=8 '4)+CHR$(6) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:',' idx=8 '4)+CHR$(6) '
          (check_literal)   ',' != '4'
          (check_literal) check_literal: ret0
         (check_operator) ret0:is comma: 0

         (check_function) check_function: '4)+CHR$(6) '
         (check_function) check_function: ret0

         (check_atom) check_atom:

          (check_literal) check_literal:lit=' %' idx=8 '4)+CHR$(6) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=8 '4)+CHR$(6) '
          (check_literal)   '%' != '4'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=8 '4)+CHR$(6) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=8 '4)+CHR$(6) '
          (check_literal)   '"' != '4'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '4)+CHR$(6) '
           (check_integer) check_integer:ret1
          (check_number) check_number: ret1
         (check_atom) check_atom:ret1
        (check_eitem) check_eitem:ret1

        (scan_eitem) scan_eitem:

         (check_operator) check_operator: 4)+CHR$(6) 

          (check_literal) check_literal:lit=' ,' idx=8 '4)+CHR$(6) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:',' idx=8 '4)+CHR$(6) '
          (check_literal)   ',' != '4'
          (check_literal) check_literal: ret0
         (check_operator) ret0:is comma: 0

         (check_function) check_function: '4)+CHR$(6) '
         (check_function) check_function: ret0

         (check_atom) check_atom:

          (check_literal) check_literal:lit=' %' idx=8 '4)+CHR$(6) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=8 '4)+CHR$(6) '
          (check_literal)   '%' != '4'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=8 '4)+CHR$(6) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=8 '4)+CHR$(6) '
          (check_literal)   '"' != '4'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '4)+CHR$(6) '
           (check_integer) check_integer:ret1
          (check_number) check_number: ret1
         (check_atom) check_atom:ret1

         (scan_atom) scan_atom:

          (check_literal) check_literal:lit=' %' idx=8 '4)+CHR$(6) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=8 '4)+CHR$(6) '
          (check_literal)   '%' != '4'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=8 '4)+CHR$(6) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=8 '4)+CHR$(6) '
          (check_literal)   '"' != '4'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '4)+CHR$(6) '
           (check_integer) check_integer:ret1
          (check_number) check_number: ret1

          (scan_number) scan_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '4)+CHR$(6) '
           (check_integer) check_integer:ret1

           (scan_integer) scan_integer:
           (scan_integer) scan_integer:ret1
   Frst:0 T:'4' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(s U )] i i 4
          (scan_integer) scan_integer:ret1  4
         (scan_atom) scan_atom:ret1
        (scan_expression) n commas now:0

         (check_eitem) check_eitem: ')+CHR$(6) '

          (check_operator) check_operator: )+CHR$(6) 

           (check_literal) check_literal:lit=' ,' idx=9 ')+CHR$(6) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:',' idx=9 ')+CHR$(6) '
           (check_literal)   ',' != ')'
           (check_literal) check_literal: ret0
          (check_operator) ret0:is comma: 0

          (check_function) check_function: ')+CHR$(6) '
          (check_function) check_function: ret0

          (check_atom) check_atom:

           (check_literal) check_literal:lit=' %' idx=9 ')+CHR$(6) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'%' idx=9 ')+CHR$(6) '
           (check_literal)   '%' != ')'
           (check_literal) check_literal: ret0

           (check_literal) check_literal:lit=' "' idx=9 ')+CHR$(6) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'"' idx=9 ')+CHR$(6) '
           (check_literal)   '"' != ')'
           (check_literal) check_literal: ret0

           (check_number) check_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret0

            (check_integer) check_integer: ')+CHR$(6) '
            (check_integer) check_integer:ret0
           (check_number) check_number: ret0

           (check_variable) check_variable:

            (check_vname) check_vname ')+CHR$(6) ':
            (check_vname) check_vname ret0 ')+CHR$(6) ':
           (check_variable) check_variable:ret0 
          (check_atom) check_atom:ret1

          (check_sub_expr) check_sub_expr:

           (check_literal) check_literal:lit=' (' idx=9 ')+CHR$(6) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'(' idx=9 ')+CHR$(6) '
           (check_literal)   '(' != ')'
           (check_literal) check_literal: ret0
          (check_sub_expr) check_sub_expr: ret0
         (check_eitem) check_eitem:ret0
        (scan_expression) scan_expression: ret1 ')+CHR$(6) ' commas:0

        (scan_literal) scan_literal:lit=' )' ')+CHR$(6) '
        (scan_literal) scan_literal:After drop space:')+CHR$(6) '
        (scan_literal) scan_literal:while loop:)+CHR$(6) 
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
        (op_stack_print) 
------------------
        (op_stack_print) 
Operator Stack     (3)

        (op_stack_print) 
000: := type:2
        (op_stack_print) 
001: CHR$ type:2
        (op_stack_print) 
002: ( type:16
        (op_stack_print) 
------------------

(  output_sub_end)
        (token_is_function) 
token_is_function:
        (token_is_function) 
token_is_function:( is not function
(  output_sub_end)
        (scan_literal) scan_literal:ret1
   Frst:0 T:')' exptype:U
Pop 4
Pop '('
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (2)

       (op_stack_print) 
000: := type:2
       (op_stack_print) 
001: CHR$ type:2
       (op_stack_print) 
------------------

(  output_sub_end)
       (token_is_function) 
token_is_function:
       (token_is_function) CHR$ is function
Pop 5
Pop 'CHR$'
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (1)

       (op_stack_print) 
000: := type:2
       (op_stack_print) 
------------------

( output_function) [U,(s )] s s CHR$
(  output_sub_end)
       (scan_sub_expr) scan_sub_expr:ret1
      (scan_expression) n commas now:0

       (check_eitem) check_eitem: '+CHR$(6) '

        (check_operator) check_operator: +CHR$(6) 

         (check_literal) check_literal:lit=' ,' idx=10 '+CHR$(6) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:',' idx=10 '+CHR$(6) '
         (check_literal)   ',' != '+'
         (check_literal) check_literal: ret0
        (check_operator) ret1:is comma: 0
       (check_eitem) check_eitem:ret1 comma:1

       (scan_eitem) scan_eitem:

        (check_operator) check_operator: +CHR$(6) 

         (check_literal) check_literal:lit=' ,' idx=10 '+CHR$(6) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:',' idx=10 '+CHR$(6) '
         (check_literal)   ',' != '+'
         (check_literal) check_literal: ret0
        (check_operator) ret1:is comma: 0

        (scan_operator) scan_operator: '+CHR$(6) '

         (check_literal) check_literal:lit=' ,' idx=10 '+CHR$(6) '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:',' idx=10 '+CHR$(6) '
         (check_literal)   ',' != '+'
         (check_literal) check_literal: ret0
        (scan_operator) scan_operator: ret1 'CHR$(6) '
   Frst:0 T:'+' exptype:s
       (operator_precedence) 
+ is operator
       (operator_precedence) 
:= is operator
'+' is operator
       (process_token) 
Token is operator o1 name:+ o2 name::=
       (process_token) 
opr1:3 opr2:1
       (operator_precedence) 
:= is operator
       (operator_precedence) 
:= is operator
Push 1
 Push:'+'
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (2)

       (op_stack_print) 
000: := type:2
       (op_stack_print) 
001: + type:2
       (op_stack_print) 
------------------

       (scan_eitem) Is comma;0
       (scan_expression) n commas now:0

        (check_eitem) check_eitem: 'CHR$(6) '

         (check_operator) check_operator: CHR$(6) 

          (check_literal) check_literal:lit=' ,' idx=11 'CHR$(6) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:',' idx=11 'CHR$(6) '
          (check_literal)   ',' != 'C'
          (check_literal) check_literal: ret0
         (check_operator) ret0:is comma: 0

         (check_function) check_function: 'CHR$(6) '
         (check_function) check_function: ret1 Found fn=>'CHR$'
        (check_eitem) check_eitem:ret1

        (scan_eitem) scan_eitem:

         (check_operator) check_operator: CHR$(6) 

          (check_literal) check_literal:lit=' ,' idx=11 'CHR$(6) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:',' idx=11 'CHR$(6) '
          (check_literal)   ',' != 'C'
          (check_literal) check_literal: ret0
         (check_operator) ret0:is comma: 0

         (check_function) check_function: 'CHR$(6) '
         (check_function) check_function: ret1 Found fn=>'CHR$'

         (scan_function) scan_function:
   Frst:0 T:'CHR$' exptype:s
         (operator_precedence) 
+ is operator
         (token_is_function) 
token_is_function:
         (token_is_function) CHR$ is function
         (function_return_type) 
function_return_type: 'CHR$' =>s
         (function_return_type) 
function_return_type: 'CHR$' =>2
process_token: 'CHR$' t=>s
 Push:'CHR$'
         (op_stack_print) 
------------------
         (op_stack_print) 
Operator Stack     (3)

         (op_stack_print) 
000: := type:2
         (op_stack_print) 
001: + type:2
         (op_stack_print) 
002: CHR$ type:2
         (op_stack_print) 
------------------

         (scan_expression) n commas now:0

          (check_eitem) check_eitem: '(6) '

           (check_operator) check_operator: (6) 

            (check_literal) check_literal:lit=' ,' idx=15 '(6) '
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:',' idx=15 '(6) '
            (check_literal)   ',' != '('
            (check_literal) check_literal: ret0
           (check_operator) ret0:is comma: 0

           (check_function) check_function: '(6) '
           (check_function) check_function: ret0

           (check_atom) check_atom:

            (check_literal) check_literal:lit=' %' idx=15 '(6) '
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:'%' idx=15 '(6) '
            (check_literal)   '%' != '('
            (check_literal) check_literal: ret0

            (check_literal) check_literal:lit=' "' idx=15 '(6) '
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:'"' idx=15 '(6) '
            (check_literal)   '"' != '('
            (check_literal) check_literal: ret0

            (check_number) check_number:

             (check_float) check_float:
             (isfloatdigit) isfloatdigit:
             (check_float) check_float: ret0

             (check_integer) check_integer: '(6) '
             (check_integer) check_integer:ret0
            (check_number) check_number: ret0

            (check_variable) check_variable:

             (check_vname) check_vname '(6) ':
             (check_vname) check_vname ret0 '(6) ':
            (check_variable) check_variable:ret0 
           (check_atom) check_atom:ret1

           (check_sub_expr) check_sub_expr:

            (check_literal) check_literal:lit=' (' idx=15 '(6) '
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:'(' idx=15 '(6) '
            (check_literal) check_literal:After while():6) 
            (check_literal) check_literal:ret1 
           (check_sub_expr) check_sub_expr: ret1
          (check_eitem) check_eitem:ret1

          (scan_eitem) scan_eitem:

           (check_operator) check_operator: (6) 

            (check_literal) check_literal:lit=' ,' idx=15 '(6) '
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:',' idx=15 '(6) '
            (check_literal)   ',' != '('
            (check_literal) check_literal: ret0
           (check_operator) ret0:is comma: 0

           (check_function) check_function: '(6) '
           (check_function) check_function: ret0

           (check_atom) check_atom:

            (check_literal) check_literal:lit=' %' idx=15 '(6) '
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:'%' idx=15 '(6) '
            (check_literal)   '%' != '('
            (check_literal) check_literal: ret0

            (check_literal) check_literal:lit=' "' idx=15 '(6) '
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:'"' idx=15 '(6) '
            (check_literal)   '"' != '('
            (check_literal) check_literal: ret0

            (check_number) check_number:

             (check_float) check_float:
             (isfloatdigit) isfloatdigit:
             (check_float) check_float: ret0

             (check_integer) check_integer: '(6) '
             (check_integer) check_integer:ret0
            (check_number) check_number: ret0

            (check_variable) check_variable:

             (check_vname) check_vname '(6) ':
             (check_vname) check_vname ret0 '(6) ':
            (check_variable) check_variable:ret0 
           (check_atom) check_atom:ret1

           (check_sub_expr) check_sub_expr:

            (check_literal) check_literal:lit=' (' idx=15 '(6) '
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:'(' idx=15 '(6) '
            (check_literal) check_literal:After while():6) 
            (check_literal) check_literal:ret1 
           (check_sub_expr) check_sub_expr: ret1

           (scan_sub_expr) scan_sub_expr:

            (scan_literal) scan_literal:lit=' (' '(6) '
            (scan_literal) scan_literal:After drop space:'(6) '
            (scan_literal) scan_literal:while loop:(6) 
   Frst:0 T:'(' exptype:s
(output_sub_start)
 Push:'('
            (op_stack_print) 
------------------
            (op_stack_print) 
Operator Stack     (4)

            (op_stack_print) 
000: := type:2
            (op_stack_print) 
001: + type:2
            (op_stack_print) 
002: CHR$ type:2
            (op_stack_print) 
003: ( type:16
            (op_stack_print) 
------------------

            (scan_literal) scan_literal:ret1
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
           (op_stack_print) 
------------------
           (op_stack_print) 
Operator Stack     (5)

           (op_stack_print) 
000: := type:2
           (op_stack_print) 
001: + type:2
           (op_stack_print) 
002: CHR$ type:2
           (op_stack_print) 
003: ( type:16
           (op_stack_print) 
004: ( type:16
           (op_stack_print) 
------------------


            (scan_expression) scan_expression: '6) '

             (check_eitem) check_eitem: '6) '

              (check_operator) check_operator: 6) 

               (check_literal) check_literal:lit=' ,' idx=16 '6) '
               (check_literal) dropping space
               (check_literal) check_literal:After drop space:',' idx=16 '6) '
               (check_literal)   ',' != '6'
               (check_literal) check_literal: ret0
              (check_operator) ret0:is comma: 0

              (check_function) check_function: '6) '
              (check_function) check_function: ret0

              (check_atom) check_atom:

               (check_literal) check_literal:lit=' %' idx=16 '6) '
               (check_literal) dropping space
               (check_literal) check_literal:After drop space:'%' idx=16 '6) '
               (check_literal)   '%' != '6'
               (check_literal) check_literal: ret0

               (check_literal) check_literal:lit=' "' idx=16 '6) '
               (check_literal) dropping space
               (check_literal) check_literal:After drop space:'"' idx=16 '6) '
               (check_literal)   '"' != '6'
               (check_literal) check_literal: ret0

               (check_number) check_number:

                (check_float) check_float:
                (isfloatdigit) isfloatdigit:
                (isfloatdigit) isfloatdigit:
                (check_float) check_float: ret0

                (check_integer) check_integer: '6) '
                (check_integer) check_integer:ret1
               (check_number) check_number: ret1
              (check_atom) check_atom:ret1
             (check_eitem) check_eitem:ret1

             (scan_eitem) scan_eitem:

              (check_operator) check_operator: 6) 

               (check_literal) check_literal:lit=' ,' idx=16 '6) '
               (check_literal) dropping space
               (check_literal) check_literal:After drop space:',' idx=16 '6) '
               (check_literal)   ',' != '6'
               (check_literal) check_literal: ret0
              (check_operator) ret0:is comma: 0

              (check_function) check_function: '6) '
              (check_function) check_function: ret0

              (check_atom) check_atom:

               (check_literal) check_literal:lit=' %' idx=16 '6) '
               (check_literal) dropping space
               (check_literal) check_literal:After drop space:'%' idx=16 '6) '
               (check_literal)   '%' != '6'
               (check_literal) check_literal: ret0

               (check_literal) check_literal:lit=' "' idx=16 '6) '
               (check_literal) dropping space
               (check_literal) check_literal:After drop space:'"' idx=16 '6) '
               (check_literal)   '"' != '6'
               (check_literal) check_literal: ret0

               (check_number) check_number:

                (check_float) check_float:
                (isfloatdigit) isfloatdigit:
                (isfloatdigit) isfloatdigit:
                (check_float) check_float: ret0

                (check_integer) check_integer: '6) '
                (check_integer) check_integer:ret1
               (check_number) check_number: ret1
              (check_atom) check_atom:ret1

              (scan_atom) scan_atom:

               (check_literal) check_literal:lit=' %' idx=16 '6) '
               (check_literal) dropping space
               (check_literal) check_literal:After drop space:'%' idx=16 '6) '
               (check_literal)   '%' != '6'
               (check_literal) check_literal: ret0

               (check_literal) check_literal:lit=' "' idx=16 '6) '
               (check_literal) dropping space
               (check_literal) check_literal:After drop space:'"' idx=16 '6) '
               (check_literal)   '"' != '6'
               (check_literal) check_literal: ret0

               (check_number) check_number:

                (check_float) check_float:
                (isfloatdigit) isfloatdigit:
                (isfloatdigit) isfloatdigit:
                (check_float) check_float: ret0

                (check_integer) check_integer: '6) '
                (check_integer) check_integer:ret1
               (check_number) check_number: ret1

               (scan_number) scan_number:

                (check_float) check_float:
                (isfloatdigit) isfloatdigit:
                (isfloatdigit) isfloatdigit:
                (check_float) check_float: ret0

                (check_integer) check_integer: '6) '
                (check_integer) check_integer:ret1

                (scan_integer) scan_integer:
                (scan_integer) scan_integer:ret1
   Frst:0 T:'6' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(s U )] i i 6
               (scan_integer) scan_integer:ret1  6
              (scan_atom) scan_atom:ret1
             (scan_expression) n commas now:0

              (check_eitem) check_eitem: ') '

               (check_operator) check_operator: ) 

                (check_literal) check_literal:lit=' ,' idx=17 ') '
                (check_literal) dropping space
                (check_literal) check_literal:After drop space:',' idx=17 ') '
                (check_literal)   ',' != ')'
                (check_literal) check_literal: ret0
               (check_operator) ret0:is comma: 0

               (check_function) check_function: ') '
               (check_function) check_function: ret0

               (check_atom) check_atom:

                (check_literal) check_literal:lit=' %' idx=17 ') '
                (check_literal) dropping space
                (check_literal) check_literal:After drop space:'%' idx=17 ') '
                (check_literal)   '%' != ')'
                (check_literal) check_literal: ret0

                (check_literal) check_literal:lit=' "' idx=17 ') '
                (check_literal) dropping space
                (check_literal) check_literal:After drop space:'"' idx=17 ') '
                (check_literal)   '"' != ')'
                (check_literal) check_literal: ret0

                (check_number) check_number:

                 (check_float) check_float:
                 (isfloatdigit) isfloatdigit:
                 (check_float) check_float: ret0

                 (check_integer) check_integer: ') '
                 (check_integer) check_integer:ret0
                (check_number) check_number: ret0

                (check_variable) check_variable:

                 (check_vname) check_vname ') ':
                 (check_vname) check_vname ret0 ') ':
                (check_variable) check_variable:ret0 
               (check_atom) check_atom:ret1

               (check_sub_expr) check_sub_expr:

                (check_literal) check_literal:lit=' (' idx=17 ') '
                (check_literal) dropping space
                (check_literal) check_literal:After drop space:'(' idx=17 ') '
                (check_literal)   '(' != ')'
                (check_literal) check_literal: ret0
               (check_sub_expr) check_sub_expr: ret0
              (check_eitem) check_eitem:ret0
             (scan_expression) scan_expression: ret1 ') ' commas:0

             (scan_literal) scan_literal:lit=' )' ') '
             (scan_literal) scan_literal:After drop space:') '
             (scan_literal) scan_literal:while loop:) 
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
             (op_stack_print) 
------------------
             (op_stack_print) 
Operator Stack     (4)

             (op_stack_print) 
000: := type:2
             (op_stack_print) 
001: + type:2
             (op_stack_print) 
002: CHR$ type:2
             (op_stack_print) 
003: ( type:16
             (op_stack_print) 
------------------

(  output_sub_end)
             (token_is_function) 
token_is_function:
             (token_is_function) 
token_is_function:( is not function
(  output_sub_end)
             (scan_literal) scan_literal:ret1
   Frst:0 T:')' exptype:U
Pop 4
Pop '('
            (op_stack_print) 
------------------
            (op_stack_print) 
Operator Stack     (3)

            (op_stack_print) 
000: := type:2
            (op_stack_print) 
001: + type:2
            (op_stack_print) 
002: CHR$ type:2
            (op_stack_print) 
------------------

(  output_sub_end)
            (token_is_function) 
token_is_function:
            (token_is_function) CHR$ is function
Pop 5
Pop 'CHR$'
            (op_stack_print) 
------------------
            (op_stack_print) 
Operator Stack     (2)

            (op_stack_print) 
000: := type:2
            (op_stack_print) 
001: + type:2
            (op_stack_print) 
------------------

( output_function) [U,(s )] s s CHR$
(  output_sub_end)
            (scan_sub_expr) scan_sub_expr:ret1
           (scan_expression) n commas now:0

            (check_eitem) check_eitem: ' '

             (check_operator) check_operator:  

              (check_literal) check_literal:lit=' ,' idx=19 ''
              (check_literal) dropping space
              (check_literal) check_literal:After drop space:',' idx=19 ''
              (check_literal) check_literal  ret0 Empty test string
             (check_operator) ret0:is comma: 0

             (check_function) check_function: ''
             (check_function) check_function: ret0

             (check_atom) check_atom:

              (check_literal) check_literal:lit=' %' idx=18 ' '
              (check_literal) dropping space
              (check_literal) check_literal:After drop space:'%' idx=19 ''
              (check_literal) check_literal  ret0 Empty test string

              (check_literal) check_literal:lit=' "' idx=18 ' '
              (check_literal) dropping space
              (check_literal) check_literal:After drop space:'"' idx=19 ''
              (check_literal) check_literal  ret0 Empty test string

              (check_number) check_number:

               (check_float) check_float:
               (isfloatdigit) isfloatdigit:
               (check_float) check_float: ret0

               (check_integer) check_integer: ''
               (check_integer) check_integer:ret0
              (check_number) check_number: ret0

              (check_variable) check_variable:

               (check_vname) check_vname '':
               (check_vname) check_vname ret0 '':
              (check_variable) check_variable:ret0 
             (check_atom) check_atom:ret1

             (check_sub_expr) check_sub_expr:

              (check_literal) check_literal:lit=' (' idx=18 ' '
              (check_literal) dropping space
              (check_literal) check_literal:After drop space:'(' idx=19 ''
              (check_literal) check_literal  ret0 Empty test string
             (check_sub_expr) check_sub_expr: ret0
            (check_eitem) check_eitem:ret0
           (scan_expression) scan_expression: ret1 ' ' commas:0
          (scan_assignment) scan_assignment: ret1
Finalise stack
Pop '+'
         (op_stack_print) 
------------------
         (op_stack_print) 
Operator Stack     (1)

         (op_stack_print) 
000: := type:2
         (op_stack_print) 
------------------

( output_operator) [s,()] s s +
         (token_is_function) 
token_is_function:
         (token_is_function) 
token_is_function:+ is not function
Pop ':='
         (op_stack_print) 
------------------
         (op_stack_print) 
Operator Stack     (0)

         (op_stack_print) 
------------------

( output_operator) [s,()] s s :=
         (token_is_function) 
token_is_function:
         (token_is_function) 
token_is_function::= is not function
         (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     s rq:s 'e$' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '4' nidx:9  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:131072  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:131072  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     s rq:s 'CHR$' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '6' nidx:17  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:131072  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:131072  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     s rq:s 'CHR$' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     s rq:s '+' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     s rq:s ':=' nidx:0  0:
=================
 BE:e$
type_check_stack_push: 'e$'
         (type_check_stack_print) 
------------------
         (type_check_stack_print) 
Type Check Stack     (1)

         (type_check_stack_print) 
000: 'e$' type:2
         (type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'e$' type:s (2)
 BE:

Type Check Stack (1)

000: 'e$' type:s (2)
 BE:

Type Check Stack (1)

000: 'e$' type:s (2)
 BE:4
type_check_stack_push: '4'
         (type_check_stack_print) 
------------------
         (type_check_stack_print) 
Type Check Stack     (2)

         (type_check_stack_print) 
000: 'e$' type:2
         (type_check_stack_print) 
001: '4' type:0
         (type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'e$' type:s (2)
001: '4' type:i (0)
 BE:

Type Check Stack (2)

000: 'e$' type:s (2)
001: '4' type:i (0)
 BE:

Type Check Stack (2)

000: 'e$' type:s (2)
001: '4' type:i (0)
 BE:

Type Check Stack (2)

000: 'e$' type:s (2)
001: '4' type:i (0)
 BE:CHR$
FN: 1 args
         (function_return_type) 
function_return_type: 'CHR$' =>s
         (function_return_type) 
function_return_type: 'CHR$' =>2
ret_type;2 s
typecheck_expression:Ret type of CHR$ : s
type_check_stack_pop: '4'
         (type_check_stack_print) 
------------------
         (type_check_stack_print) 
Type Check Stack     (1)

         (type_check_stack_print) 
000: 'e$' type:2
         (type_check_stack_print) 
------------------

FN ARG 0 ri 4 0(i)  Arg ok
type_check_stack_push: '000'
         (type_check_stack_print) 
------------------
         (type_check_stack_print) 
Type Check Stack     (2)

         (type_check_stack_print) 
000: 'e$' type:2
         (type_check_stack_print) 
001: '000' type:2
         (type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'e$' type:s (2)
001: '000' type:s (2)
 BE:

Type Check Stack (2)

000: 'e$' type:s (2)
001: '000' type:s (2)
 BE:

Type Check Stack (2)

000: 'e$' type:s (2)
001: '000' type:s (2)
 BE:

Type Check Stack (2)

000: 'e$' type:s (2)
001: '000' type:s (2)
 BE:6
type_check_stack_push: '6'
         (type_check_stack_print) 
------------------
         (type_check_stack_print) 
Type Check Stack     (3)

         (type_check_stack_print) 
000: 'e$' type:2
         (type_check_stack_print) 
001: '000' type:2
         (type_check_stack_print) 
002: '6' type:0
         (type_check_stack_print) 
------------------


Type Check Stack (3)

000: 'e$' type:s (2)
001: '000' type:s (2)
002: '6' type:i (0)
 BE:

Type Check Stack (3)

000: 'e$' type:s (2)
001: '000' type:s (2)
002: '6' type:i (0)
 BE:

Type Check Stack (3)

000: 'e$' type:s (2)
001: '000' type:s (2)
002: '6' type:i (0)
 BE:

Type Check Stack (3)

000: 'e$' type:s (2)
001: '000' type:s (2)
002: '6' type:i (0)
 BE:CHR$
FN: 1 args
         (function_return_type) 
function_return_type: 'CHR$' =>s
         (function_return_type) 
function_return_type: 'CHR$' =>2
ret_type;2 s
typecheck_expression:Ret type of CHR$ : s
type_check_stack_pop: '6'
         (type_check_stack_print) 
------------------
         (type_check_stack_print) 
Type Check Stack     (2)

         (type_check_stack_print) 
000: 'e$' type:2
         (type_check_stack_print) 
001: '000' type:2
         (type_check_stack_print) 
------------------

FN ARG 0 ri 6 0(i)  Arg ok
type_check_stack_push: '000'
         (type_check_stack_print) 
------------------
         (type_check_stack_print) 
Type Check Stack     (3)

         (type_check_stack_print) 
000: 'e$' type:2
         (type_check_stack_print) 
001: '000' type:2
         (type_check_stack_print) 
002: '000' type:2
         (type_check_stack_print) 
------------------


Type Check Stack (3)

000: 'e$' type:s (2)
001: '000' type:s (2)
002: '000' type:s (2)
 BE:

Type Check Stack (3)

000: 'e$' type:s (2)
001: '000' type:s (2)
002: '000' type:s (2)
 BE:+
BUFF_ID_OPERATOR
Found operator +
type_check_stack_pop: '000'
         (type_check_stack_print) 
------------------
         (type_check_stack_print) 
Type Check Stack     (2)

         (type_check_stack_print) 
000: 'e$' type:2
         (type_check_stack_print) 
001: '000' type:2
         (type_check_stack_print) 
------------------

type_check_stack_pop: '000'
         (type_check_stack_print) 
------------------
         (type_check_stack_print) 
Type Check Stack     (1)

         (type_check_stack_print) 
000: 'e$' type:2
         (type_check_stack_print) 
------------------

 Mutable type 2 2
 Same type
type_check_stack_push: '000'
         (type_check_stack_print) 
------------------
         (type_check_stack_print) 
Type Check Stack     (2)

         (type_check_stack_print) 
000: 'e$' type:2
         (type_check_stack_print) 
001: '000' type:2
         (type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'e$' type:s (2)
001: '000' type:s (2)
 BE::=
BUFF_ID_OPERATOR
Found operator :=
type_check_stack_pop: '000'
         (type_check_stack_print) 
------------------
         (type_check_stack_print) 
Type Check Stack     (1)

         (type_check_stack_print) 
000: 'e$' type:2
         (type_check_stack_print) 
------------------

type_check_stack_pop: 'e$'
         (type_check_stack_print) 
------------------
         (type_check_stack_print) 
Type Check Stack     (0)

         (type_check_stack_print) 
------------------

 Mutable type 2 2
 Same type
type_check_stack_push: '000'
         (type_check_stack_print) 
------------------
         (type_check_stack_print) 
Type Check Stack     (1)

         (type_check_stack_print) 
000: '000' type:2
         (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:s (2)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     s rq:s 'e$' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '4' nidx:9  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:131072  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:131072  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     s rq:s 'CHR$' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '6' nidx:17  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:131072  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:131072  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     s rq:s 'CHR$' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     s rq:s '+' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     s rq:s ':=' nidx:0  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     s rq:s 'e$'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_INTEGER      i rq:i '4'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_FUNCTION     s rq:s 'CHR$'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N12 EXP_BUFF_ID_INTEGER      i rq:i '6'  0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N15 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N16 EXP_BUFF_ID_FUNCTION     s rq:s 'CHR$'  0:
(dump_exp_buffer2) N17 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N18 EXP_BUFF_ID_OPERATOR     s rq:s '+'  2: 16 8
(dump_exp_buffer2) N19 EXP_BUFF_ID_OPERATOR     s rq:s ':='  2: 18 1
=================
         (process_expression_types) 
==INFIX==

Var: e$ ary:0 NumIdx:0
infix_stack_push: 'e$'
infix_stack_push: '4'
infix_stack_pop: '4'
infix_stack_push: 'CHR$(4 )'
infix_stack_push: '6'
infix_stack_pop: '6'
infix_stack_push: 'CHR$(6 )'
infix_stack_pop: 'CHR$(6 )'
infix_stack_pop: 'CHR$(4 )'
infix_stack_push: '(CHR$(4 ) + CHR$(6 ))'
infix_stack_pop: '(CHR$(4 ) + CHR$(6 ))'
infix_stack_pop: 'e$'
infix_stack_push: '(e$ := (CHR$(4 ) + CHR$(6 )))'
infix_stack_pop: '(e$ := (CHR$(4 ) + CHR$(6 )))'
         (process_expression_types) ==(e$ := (CHR$(4 ) + CHR$(6 )))==
         (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     s rq:s e$  0:
(    output_qcode) N2 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N4 EXP_BUFF_ID_INTEGER      i rq:i 4  0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N8 EXP_BUFF_ID_FUNCTION     s rq:s CHR$  0:
(    output_qcode) N9 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N10 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N11 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N12 EXP_BUFF_ID_INTEGER      i rq:i 6  0:
(    output_qcode) N13 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N14 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N15 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N16 EXP_BUFF_ID_FUNCTION     s rq:s CHR$  0:
(    output_qcode) N17 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N18 EXP_BUFF_ID_OPERATOR     s rq:s +  2: 16 8
(    output_qcode) N19 EXP_BUFF_ID_OPERATOR     s rq:s :=  2: 18 1

          (check_literal) check_literal:lit=':' idx=19 ''
          (check_literal) check_literal:After drop space:':' idx=19 ''
          (check_literal) check_literal  ret0 Empty test string
         (translate_file) 
cline scanned OK
*****************************
**b%=20 :c%=12 :x%=3 :y%=1 **
*****************************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'b%=20 :c%=12 :x%=3 :y%=1 ':
     (check_vname) check_vname ret1 '%=20 :c%=12 :x%=3 :y%=1 ':
    (check_variable) check_variable: '%=20 :c%=12 :x%=3 :y%=1 '
    (check_variable) check_variable: Ary test '=20 :c%=12 :x%=3 :y%=1 '

     (check_literal) check_literal:lit='(' idx=2 '=20 :c%=12 :x%=3 :y%=1 '
     (check_literal) check_literal:After drop space:'(' idx=2 '=20 :c%=12 :x%=3 :y%=1 '
     (check_literal)   '(' != '='
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=2 '=20 :c%=12 :x%=3 :y%=1 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=2 '=20 :c%=12 :x%=3 :y%=1 '
   (check_literal) check_literal:After while():20 :c%=12 :x%=3 :y%=1 
   (check_literal) check_literal:ret1 

   (check_expression) check_expression: '20 :c%=12 :x%=3 :y%=1 '

    (check_eitem) check_eitem: '20 :c%=12 :x%=3 :y%=1 '

     (check_operator) check_operator: 20 :c%=12 :x%=3 :y%=1 

      (check_literal) check_literal:lit=' ,' idx=3 '20 :c%=12 :x%=3 :y%=1 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=3 '20 :c%=12 :x%=3 :y%=1 '
      (check_literal)   ',' != '2'
      (check_literal) check_literal: ret0
     (check_operator) ret0:is comma: 0

     (check_function) check_function: '20 :c%=12 :x%=3 :y%=1 '
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=3 '20 :c%=12 :x%=3 :y%=1 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=3 '20 :c%=12 :x%=3 :y%=1 '
      (check_literal)   '%' != '2'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=3 '20 :c%=12 :x%=3 :y%=1 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=3 '20 :c%=12 :x%=3 :y%=1 '
      (check_literal)   '"' != '2'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: '20 :c%=12 :x%=3 :y%=1 '
       (check_integer) check_integer:ret1
      (check_number) check_number: ret1
     (check_atom) check_atom:ret1
    (check_eitem) check_eitem:ret1

    (check_eitem) check_eitem: ' :c%=12 :x%=3 :y%=1 '

     (check_operator) check_operator:  :c%=12 :x%=3 :y%=1 

      (check_literal) check_literal:lit=' ,' idx=6 ':c%=12 :x%=3 :y%=1 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=6 ':c%=12 :x%=3 :y%=1 '
      (check_literal)   ',' != ':'
      (check_literal) check_literal: ret0
     (check_operator) ret0:is comma: 0

     (check_function) check_function: ':c%=12 :x%=3 :y%=1 '
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=5 ' :c%=12 :x%=3 :y%=1 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 ':c%=12 :x%=3 :y%=1 '
      (check_literal)   '%' != ':'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=5 ' :c%=12 :x%=3 :y%=1 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 ':c%=12 :x%=3 :y%=1 '
      (check_literal)   '"' != ':'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: ':c%=12 :x%=3 :y%=1 '
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname ':c%=12 :x%=3 :y%=1 ':
       (check_vname) check_vname ret0 ':c%=12 :x%=3 :y%=1 ':
      (check_variable) check_variable:ret0 
     (check_atom) check_atom:ret1

     (check_sub_expr) check_sub_expr:

      (check_literal) check_literal:lit=' (' idx=5 ' :c%=12 :x%=3 :y%=1 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'(' idx=6 ':c%=12 :x%=3 :y%=1 '
      (check_literal)   '(' != ':'
      (check_literal) check_literal: ret0
     (check_sub_expr) check_sub_expr: ret0
    (check_eitem) check_eitem:ret0
   (check_expression) check_expression:ret1 ' :c%=12 :x%=3 :y%=1 '
  (check_assignment) check_assignment:ret1
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=20, ' :c%=12 :x%=3 :y%=1 '
========================================================
b%=20 :c%=12 :x%=3 :y%=1 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'b%=20 :c%=12 :x%=3 :y%=1 ':
    (check_vname) check_vname ret1 '%=20 :c%=12 :x%=3 :y%=1 ':
   (check_variable) check_variable: '%=20 :c%=12 :x%=3 :y%=1 '
   (check_variable) check_variable: Ary test '=20 :c%=12 :x%=3 :y%=1 '

    (check_literal) check_literal:lit='(' idx=2 '=20 :c%=12 :x%=3 :y%=1 '
    (check_literal) check_literal:After drop space:'(' idx=2 '=20 :c%=12 :x%=3 :y%=1 '
    (check_literal)   '(' != '='
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=2 '=20 :c%=12 :x%=3 :y%=1 '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=2 '=20 :c%=12 :x%=3 :y%=1 '
  (check_literal) check_literal:After while():20 :c%=12 :x%=3 :y%=1 
  (check_literal) check_literal:ret1 

  (check_expression) check_expression: '20 :c%=12 :x%=3 :y%=1 '

   (check_eitem) check_eitem: '20 :c%=12 :x%=3 :y%=1 '

    (check_operator) check_operator: 20 :c%=12 :x%=3 :y%=1 

     (check_literal) check_literal:lit=' ,' idx=3 '20 :c%=12 :x%=3 :y%=1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=3 '20 :c%=12 :x%=3 :y%=1 '
     (check_literal)   ',' != '2'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: '20 :c%=12 :x%=3 :y%=1 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=3 '20 :c%=12 :x%=3 :y%=1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=3 '20 :c%=12 :x%=3 :y%=1 '
     (check_literal)   '%' != '2'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=3 '20 :c%=12 :x%=3 :y%=1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=3 '20 :c%=12 :x%=3 :y%=1 '
     (check_literal)   '"' != '2'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '20 :c%=12 :x%=3 :y%=1 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: ' :c%=12 :x%=3 :y%=1 '

    (check_operator) check_operator:  :c%=12 :x%=3 :y%=1 

     (check_literal) check_literal:lit=' ,' idx=6 ':c%=12 :x%=3 :y%=1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=6 ':c%=12 :x%=3 :y%=1 '
     (check_literal)   ',' != ':'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: ':c%=12 :x%=3 :y%=1 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=5 ' :c%=12 :x%=3 :y%=1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=6 ':c%=12 :x%=3 :y%=1 '
     (check_literal)   '%' != ':'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=5 ' :c%=12 :x%=3 :y%=1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=6 ':c%=12 :x%=3 :y%=1 '
     (check_literal)   '"' != ':'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: ':c%=12 :x%=3 :y%=1 '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname ':c%=12 :x%=3 :y%=1 ':
      (check_vname) check_vname ret0 ':c%=12 :x%=3 :y%=1 ':
     (check_variable) check_variable:ret0 
    (check_atom) check_atom:ret1

    (check_sub_expr) check_sub_expr:

     (check_literal) check_literal:lit=' (' idx=5 ' :c%=12 :x%=3 :y%=1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'(' idx=6 ':c%=12 :x%=3 :y%=1 '
     (check_literal)   '(' != ':'
     (check_literal) check_literal: ret0
    (check_sub_expr) check_sub_expr: ret0
   (check_eitem) check_eitem:ret0
  (check_expression) check_expression:ret1 ' :c%=12 :x%=3 :y%=1 '
 (check_assignment) check_assignment:ret1

 (scan_assignment) scan_assignment:

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'b%=20 :c%=12 :x%=3 :y%=1 '
   (scan_vname) scan_vname: ret1 'b'
  (scan_variable) scan_variable: '%=20 :c%=12 :x%=3 :y%=1 ' vname='b'
  (scan_variable) scan_variable: Ary test '=20 :c%=12 :x%=3 :y%=1 '

   (check_literal) check_literal:lit='(' idx=2 '=20 :c%=12 :x%=3 :y%=1 '
   (check_literal) check_literal:After drop space:'(' idx=2 '=20 :c%=12 :x%=3 :y%=1 '
   (check_literal)   '(' != '='
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='b%' is str:0 int:1 flt:0 ary:0
   Frst:1 T:'b%' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:b% is not function
token_is_variable: tok:'b%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:b% is not function
 (init_get_name) 
init_get_name:'b%'
 (init_get_name) 
init_get_name:'b%'
 (get_name) 
get_name:gn:'b%'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] i i b%
 (print_var_info) 
VAR INFO: '                b%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0

  (scan_assignment_equals) scan_assignment_equals:lit=' =' '=20 :c%=12 :x%=3 :y%=1 '
  (scan_assignment_equals) scan_assignment_equals:After drop space:'=20 :c%=12 :x%=3 :y%=1 '
  (scan_assignment_equals) scan_assignment_equals:while loop:=20 :c%=12 :x%=3 :y%=1 
   Frst:0 T:':=' exptype:i
  (operator_precedence) 
:= is operator
':=' is operator
  (process_token) 
Token is operator o1 name::= o2 name:
  (process_token) 
opr1:1 opr2:0
Push 1
 Push:':='
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (1)

  (op_stack_print) 
000: := type:0
  (op_stack_print) 
------------------

  (scan_assignment_equals) scan_assignment_equals:ret1

  (scan_expression) scan_expression: '20 :c%=12 :x%=3 :y%=1 '

   (check_eitem) check_eitem: '20 :c%=12 :x%=3 :y%=1 '

    (check_operator) check_operator: 20 :c%=12 :x%=3 :y%=1 

     (check_literal) check_literal:lit=' ,' idx=3 '20 :c%=12 :x%=3 :y%=1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=3 '20 :c%=12 :x%=3 :y%=1 '
     (check_literal)   ',' != '2'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: '20 :c%=12 :x%=3 :y%=1 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=3 '20 :c%=12 :x%=3 :y%=1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=3 '20 :c%=12 :x%=3 :y%=1 '
     (check_literal)   '%' != '2'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=3 '20 :c%=12 :x%=3 :y%=1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=3 '20 :c%=12 :x%=3 :y%=1 '
     (check_literal)   '"' != '2'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '20 :c%=12 :x%=3 :y%=1 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (scan_eitem) scan_eitem:

    (check_operator) check_operator: 20 :c%=12 :x%=3 :y%=1 

     (check_literal) check_literal:lit=' ,' idx=3 '20 :c%=12 :x%=3 :y%=1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=3 '20 :c%=12 :x%=3 :y%=1 '
     (check_literal)   ',' != '2'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: '20 :c%=12 :x%=3 :y%=1 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=3 '20 :c%=12 :x%=3 :y%=1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=3 '20 :c%=12 :x%=3 :y%=1 '
     (check_literal)   '%' != '2'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=3 '20 :c%=12 :x%=3 :y%=1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=3 '20 :c%=12 :x%=3 :y%=1 '
     (check_literal)   '"' != '2'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '20 :c%=12 :x%=3 :y%=1 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1

    (scan_atom) scan_atom:

     (check_literal) check_literal:lit=' %' idx=3 '20 :c%=12 :x%=3 :y%=1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=3 '20 :c%=12 :x%=3 :y%=1 '
     (check_literal)   '%' != '2'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=3 '20 :c%=12 :x%=3 :y%=1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=3 '20 :c%=12 :x%=3 :y%=1 '
     (check_literal)   '"' != '2'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '20 :c%=12 :x%=3 :y%=1 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1

     (scan_number) scan_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '20 :c%=12 :x%=3 :y%=1 '
      (check_integer) check_integer:ret1

      (scan_integer) scan_integer:
      (scan_integer) scan_integer:ret1
   Frst:0 T:'20' exptype:i
     (operator_precedence) 
:= is operator
modify_expression_type:Inittype:i Intype:i Outtype:i
(  output_integer) [i,()] i i 20
     (scan_integer) scan_integer:ret1  20
    (scan_atom) scan_atom:ret1
   (scan_expression) n commas now:0

    (check_eitem) check_eitem: ' :c%=12 :x%=3 :y%=1 '

     (check_operator) check_operator:  :c%=12 :x%=3 :y%=1 

      (check_literal) check_literal:lit=' ,' idx=6 ':c%=12 :x%=3 :y%=1 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=6 ':c%=12 :x%=3 :y%=1 '
      (check_literal)   ',' != ':'
      (check_literal) check_literal: ret0
     (check_operator) ret0:is comma: 0

     (check_function) check_function: ':c%=12 :x%=3 :y%=1 '
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=5 ' :c%=12 :x%=3 :y%=1 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 ':c%=12 :x%=3 :y%=1 '
      (check_literal)   '%' != ':'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=5 ' :c%=12 :x%=3 :y%=1 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 ':c%=12 :x%=3 :y%=1 '
      (check_literal)   '"' != ':'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: ':c%=12 :x%=3 :y%=1 '
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname ':c%=12 :x%=3 :y%=1 ':
       (check_vname) check_vname ret0 ':c%=12 :x%=3 :y%=1 ':
      (check_variable) check_variable:ret0 
     (check_atom) check_atom:ret1

     (check_sub_expr) check_sub_expr:

      (check_literal) check_literal:lit=' (' idx=5 ' :c%=12 :x%=3 :y%=1 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'(' idx=6 ':c%=12 :x%=3 :y%=1 '
      (check_literal)   '(' != ':'
      (check_literal) check_literal: ret0
     (check_sub_expr) check_sub_expr: ret0
    (check_eitem) check_eitem:ret0
   (scan_expression) scan_expression: ret1 ' :c%=12 :x%=3 :y%=1 ' commas:0
  (scan_assignment) scan_assignment: ret1
Finalise stack
Pop ':='
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (0)

 (op_stack_print) 
------------------

( output_operator) [i,()] i i :=
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function::= is not function
 (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'b%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '20' nidx:5  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i ':=' nidx:0  0:
=================
 BE:b%
type_check_stack_push: 'b%'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (1)

 (type_check_stack_print) 
000: 'b%' type:0
 (type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'b%' type:i (0)
 BE:20
type_check_stack_push: '20'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (2)

 (type_check_stack_print) 
000: 'b%' type:0
 (type_check_stack_print) 
001: '20' type:0
 (type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'b%' type:i (0)
001: '20' type:i (0)
 BE::=
BUFF_ID_OPERATOR
Found operator :=
type_check_stack_pop: '20'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (1)

 (type_check_stack_print) 
000: 'b%' type:0
 (type_check_stack_print) 
------------------

type_check_stack_pop: 'b%'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (0)

 (type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (1)

 (type_check_stack_print) 
000: '000' type:0
 (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'b%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '20' nidx:5  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i ':=' nidx:0  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i 'b%'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i '20'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_OPERATOR     i rq:i ':='  2: 2 1
=================
 (process_expression_types) 
==INFIX==

Var: b% ary:0 NumIdx:0
infix_stack_push: 'b%'
infix_stack_push: '20'
infix_stack_pop: '20'
infix_stack_pop: 'b%'
infix_stack_push: '(b% := 20)'
infix_stack_pop: '(b% := 20)'
 (process_expression_types) ==(b% := 20)==
 (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
(    output_qcode) N2 EXP_BUFF_ID_INTEGER      i rq:i 20  0:
(    output_qcode) N3 EXP_BUFF_ID_OPERATOR     i rq:i :=  2: 2 1

  (check_literal) check_literal:lit=':' idx=6 ':c%=12 :x%=3 :y%=1 '
  (check_literal) check_literal:After drop space:':' idx=6 ':c%=12 :x%=3 :y%=1 '
  (check_literal) check_literal:After while():c%=12 :x%=3 :y%=1 
  (check_literal) check_literal:ret1 

  (scan_literal) scan_literal:lit=':' 'c%=12 :x%=3 :y%=1 '
  (scan_literal) scan_literal:After drop space:'c%=12 :x%=3 :y%=1 '
  (scan_literal) scan_literal:while loop:c%=12 :x%=3 :y%=1 
  (scan_literal) scan_literal:ret1

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'c%=12 :x%=3 :y%=1 ':
     (check_vname) check_vname ret1 '%=12 :x%=3 :y%=1 ':
    (check_variable) check_variable: '%=12 :x%=3 :y%=1 '
    (check_variable) check_variable: Ary test '=12 :x%=3 :y%=1 '

     (check_literal) check_literal:lit='(' idx=9 '=12 :x%=3 :y%=1 '
     (check_literal) check_literal:After drop space:'(' idx=9 '=12 :x%=3 :y%=1 '
     (check_literal)   '(' != '='
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=9 '=12 :x%=3 :y%=1 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=9 '=12 :x%=3 :y%=1 '
   (check_literal) check_literal:After while():12 :x%=3 :y%=1 
   (check_literal) check_literal:ret1 

   (check_expression) check_expression: '12 :x%=3 :y%=1 '

    (check_eitem) check_eitem: '12 :x%=3 :y%=1 '

     (check_operator) check_operator: 12 :x%=3 :y%=1 

      (check_literal) check_literal:lit=' ,' idx=10 '12 :x%=3 :y%=1 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=10 '12 :x%=3 :y%=1 '
      (check_literal)   ',' != '1'
      (check_literal) check_literal: ret0
     (check_operator) ret0:is comma: 0

     (check_function) check_function: '12 :x%=3 :y%=1 '
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=10 '12 :x%=3 :y%=1 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=10 '12 :x%=3 :y%=1 '
      (check_literal)   '%' != '1'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=10 '12 :x%=3 :y%=1 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=10 '12 :x%=3 :y%=1 '
      (check_literal)   '"' != '1'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: '12 :x%=3 :y%=1 '
       (check_integer) check_integer:ret1
      (check_number) check_number: ret1
     (check_atom) check_atom:ret1
    (check_eitem) check_eitem:ret1

    (check_eitem) check_eitem: ' :x%=3 :y%=1 '

     (check_operator) check_operator:  :x%=3 :y%=1 

      (check_literal) check_literal:lit=' ,' idx=13 ':x%=3 :y%=1 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=13 ':x%=3 :y%=1 '
      (check_literal)   ',' != ':'
      (check_literal) check_literal: ret0
     (check_operator) ret0:is comma: 0

     (check_function) check_function: ':x%=3 :y%=1 '
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=12 ' :x%=3 :y%=1 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=13 ':x%=3 :y%=1 '
      (check_literal)   '%' != ':'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=12 ' :x%=3 :y%=1 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=13 ':x%=3 :y%=1 '
      (check_literal)   '"' != ':'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: ':x%=3 :y%=1 '
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname ':x%=3 :y%=1 ':
       (check_vname) check_vname ret0 ':x%=3 :y%=1 ':
      (check_variable) check_variable:ret0 
     (check_atom) check_atom:ret1

     (check_sub_expr) check_sub_expr:

      (check_literal) check_literal:lit=' (' idx=12 ' :x%=3 :y%=1 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'(' idx=13 ':x%=3 :y%=1 '
      (check_literal)   '(' != ':'
      (check_literal) check_literal: ret0
     (check_sub_expr) check_sub_expr: ret0
    (check_eitem) check_eitem:ret0
   (check_expression) check_expression:ret1 ' :x%=3 :y%=1 '
  (check_assignment) check_assignment:ret1
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=13, ' :x%=3 :y%=1 '
========================================================
b%=20 :c%=12 :x%=3 :y%=1 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'c%=12 :x%=3 :y%=1 ':
    (check_vname) check_vname ret1 '%=12 :x%=3 :y%=1 ':
   (check_variable) check_variable: '%=12 :x%=3 :y%=1 '
   (check_variable) check_variable: Ary test '=12 :x%=3 :y%=1 '

    (check_literal) check_literal:lit='(' idx=9 '=12 :x%=3 :y%=1 '
    (check_literal) check_literal:After drop space:'(' idx=9 '=12 :x%=3 :y%=1 '
    (check_literal)   '(' != '='
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=9 '=12 :x%=3 :y%=1 '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=9 '=12 :x%=3 :y%=1 '
  (check_literal) check_literal:After while():12 :x%=3 :y%=1 
  (check_literal) check_literal:ret1 

  (check_expression) check_expression: '12 :x%=3 :y%=1 '

   (check_eitem) check_eitem: '12 :x%=3 :y%=1 '

    (check_operator) check_operator: 12 :x%=3 :y%=1 

     (check_literal) check_literal:lit=' ,' idx=10 '12 :x%=3 :y%=1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=10 '12 :x%=3 :y%=1 '
     (check_literal)   ',' != '1'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: '12 :x%=3 :y%=1 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=10 '12 :x%=3 :y%=1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=10 '12 :x%=3 :y%=1 '
     (check_literal)   '%' != '1'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=10 '12 :x%=3 :y%=1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=10 '12 :x%=3 :y%=1 '
     (check_literal)   '"' != '1'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '12 :x%=3 :y%=1 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: ' :x%=3 :y%=1 '

    (check_operator) check_operator:  :x%=3 :y%=1 

     (check_literal) check_literal:lit=' ,' idx=13 ':x%=3 :y%=1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=13 ':x%=3 :y%=1 '
     (check_literal)   ',' != ':'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: ':x%=3 :y%=1 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=12 ' :x%=3 :y%=1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=13 ':x%=3 :y%=1 '
     (check_literal)   '%' != ':'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=12 ' :x%=3 :y%=1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=13 ':x%=3 :y%=1 '
     (check_literal)   '"' != ':'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: ':x%=3 :y%=1 '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname ':x%=3 :y%=1 ':
      (check_vname) check_vname ret0 ':x%=3 :y%=1 ':
     (check_variable) check_variable:ret0 
    (check_atom) check_atom:ret1

    (check_sub_expr) check_sub_expr:

     (check_literal) check_literal:lit=' (' idx=12 ' :x%=3 :y%=1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'(' idx=13 ':x%=3 :y%=1 '
     (check_literal)   '(' != ':'
     (check_literal) check_literal: ret0
    (check_sub_expr) check_sub_expr: ret0
   (check_eitem) check_eitem:ret0
  (check_expression) check_expression:ret1 ' :x%=3 :y%=1 '
 (check_assignment) check_assignment:ret1

 (scan_assignment) scan_assignment:

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'c%=12 :x%=3 :y%=1 '
   (scan_vname) scan_vname: ret1 'c'
  (scan_variable) scan_variable: '%=12 :x%=3 :y%=1 ' vname='c'
  (scan_variable) scan_variable: Ary test '=12 :x%=3 :y%=1 '

   (check_literal) check_literal:lit='(' idx=9 '=12 :x%=3 :y%=1 '
   (check_literal) check_literal:After drop space:'(' idx=9 '=12 :x%=3 :y%=1 '
   (check_literal)   '(' != '='
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='c%' is str:0 int:1 flt:0 ary:0
   Frst:1 T:'c%' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:c% is not function
token_is_variable: tok:'c%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:c% is not function
 (init_get_name) 
init_get_name:'c%'
 (init_get_name) 
init_get_name:'c%'
 (get_name) 
get_name:gn:'c%'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] i i c%
 (print_var_info) 
VAR INFO: '                c%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0

  (scan_assignment_equals) scan_assignment_equals:lit=' =' '=12 :x%=3 :y%=1 '
  (scan_assignment_equals) scan_assignment_equals:After drop space:'=12 :x%=3 :y%=1 '
  (scan_assignment_equals) scan_assignment_equals:while loop:=12 :x%=3 :y%=1 
   Frst:0 T:':=' exptype:i
  (operator_precedence) 
:= is operator
':=' is operator
  (process_token) 
Token is operator o1 name::= o2 name:
  (process_token) 
opr1:1 opr2:0
Push 1
 Push:':='
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (1)

  (op_stack_print) 
000: := type:0
  (op_stack_print) 
------------------

  (scan_assignment_equals) scan_assignment_equals:ret1

  (scan_expression) scan_expression: '12 :x%=3 :y%=1 '

   (check_eitem) check_eitem: '12 :x%=3 :y%=1 '

    (check_operator) check_operator: 12 :x%=3 :y%=1 

     (check_literal) check_literal:lit=' ,' idx=10 '12 :x%=3 :y%=1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=10 '12 :x%=3 :y%=1 '
     (check_literal)   ',' != '1'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: '12 :x%=3 :y%=1 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=10 '12 :x%=3 :y%=1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=10 '12 :x%=3 :y%=1 '
     (check_literal)   '%' != '1'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=10 '12 :x%=3 :y%=1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=10 '12 :x%=3 :y%=1 '
     (check_literal)   '"' != '1'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '12 :x%=3 :y%=1 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (scan_eitem) scan_eitem:

    (check_operator) check_operator: 12 :x%=3 :y%=1 

     (check_literal) check_literal:lit=' ,' idx=10 '12 :x%=3 :y%=1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=10 '12 :x%=3 :y%=1 '
     (check_literal)   ',' != '1'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: '12 :x%=3 :y%=1 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=10 '12 :x%=3 :y%=1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=10 '12 :x%=3 :y%=1 '
     (check_literal)   '%' != '1'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=10 '12 :x%=3 :y%=1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=10 '12 :x%=3 :y%=1 '
     (check_literal)   '"' != '1'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '12 :x%=3 :y%=1 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1

    (scan_atom) scan_atom:

     (check_literal) check_literal:lit=' %' idx=10 '12 :x%=3 :y%=1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=10 '12 :x%=3 :y%=1 '
     (check_literal)   '%' != '1'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=10 '12 :x%=3 :y%=1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=10 '12 :x%=3 :y%=1 '
     (check_literal)   '"' != '1'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '12 :x%=3 :y%=1 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1

     (scan_number) scan_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '12 :x%=3 :y%=1 '
      (check_integer) check_integer:ret1

      (scan_integer) scan_integer:
      (scan_integer) scan_integer:ret1
   Frst:0 T:'12' exptype:i
     (operator_precedence) 
:= is operator
modify_expression_type:Inittype:i Intype:i Outtype:i
(  output_integer) [i,()] i i 12
     (scan_integer) scan_integer:ret1  12
    (scan_atom) scan_atom:ret1
   (scan_expression) n commas now:0

    (check_eitem) check_eitem: ' :x%=3 :y%=1 '

     (check_operator) check_operator:  :x%=3 :y%=1 

      (check_literal) check_literal:lit=' ,' idx=13 ':x%=3 :y%=1 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=13 ':x%=3 :y%=1 '
      (check_literal)   ',' != ':'
      (check_literal) check_literal: ret0
     (check_operator) ret0:is comma: 0

     (check_function) check_function: ':x%=3 :y%=1 '
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=12 ' :x%=3 :y%=1 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=13 ':x%=3 :y%=1 '
      (check_literal)   '%' != ':'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=12 ' :x%=3 :y%=1 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=13 ':x%=3 :y%=1 '
      (check_literal)   '"' != ':'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: ':x%=3 :y%=1 '
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname ':x%=3 :y%=1 ':
       (check_vname) check_vname ret0 ':x%=3 :y%=1 ':
      (check_variable) check_variable:ret0 
     (check_atom) check_atom:ret1

     (check_sub_expr) check_sub_expr:

      (check_literal) check_literal:lit=' (' idx=12 ' :x%=3 :y%=1 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'(' idx=13 ':x%=3 :y%=1 '
      (check_literal)   '(' != ':'
      (check_literal) check_literal: ret0
     (check_sub_expr) check_sub_expr: ret0
    (check_eitem) check_eitem:ret0
   (scan_expression) scan_expression: ret1 ' :x%=3 :y%=1 ' commas:0
  (scan_assignment) scan_assignment: ret1
Finalise stack
Pop ':='
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (0)

 (op_stack_print) 
------------------

( output_operator) [i,()] i i :=
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function::= is not function
 (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'c%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '12' nidx:12  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i ':=' nidx:0  0:
=================
 BE:c%
type_check_stack_push: 'c%'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (1)

 (type_check_stack_print) 
000: 'c%' type:0
 (type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'c%' type:i (0)
 BE:12
type_check_stack_push: '12'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (2)

 (type_check_stack_print) 
000: 'c%' type:0
 (type_check_stack_print) 
001: '12' type:0
 (type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'c%' type:i (0)
001: '12' type:i (0)
 BE::=
BUFF_ID_OPERATOR
Found operator :=
type_check_stack_pop: '12'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (1)

 (type_check_stack_print) 
000: 'c%' type:0
 (type_check_stack_print) 
------------------

type_check_stack_pop: 'c%'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (0)

 (type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (1)

 (type_check_stack_print) 
000: '000' type:0
 (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'c%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '12' nidx:12  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i ':=' nidx:0  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i 'c%'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i '12'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_OPERATOR     i rq:i ':='  2: 2 1
=================
 (process_expression_types) 
==INFIX==

Var: c% ary:0 NumIdx:0
infix_stack_push: 'c%'
infix_stack_push: '12'
infix_stack_pop: '12'
infix_stack_pop: 'c%'
infix_stack_push: '(c% := 12)'
infix_stack_pop: '(c% := 12)'
 (process_expression_types) ==(c% := 12)==
 (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
(    output_qcode) N2 EXP_BUFF_ID_INTEGER      i rq:i 12  0:
(    output_qcode) N3 EXP_BUFF_ID_OPERATOR     i rq:i :=  2: 2 1

  (check_literal) check_literal:lit=':' idx=13 ':x%=3 :y%=1 '
  (check_literal) check_literal:After drop space:':' idx=13 ':x%=3 :y%=1 '
  (check_literal) check_literal:After while():x%=3 :y%=1 
  (check_literal) check_literal:ret1 

  (scan_literal) scan_literal:lit=':' 'x%=3 :y%=1 '
  (scan_literal) scan_literal:After drop space:'x%=3 :y%=1 '
  (scan_literal) scan_literal:while loop:x%=3 :y%=1 
  (scan_literal) scan_literal:ret1

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'x%=3 :y%=1 ':
     (check_vname) check_vname ret1 '%=3 :y%=1 ':
    (check_variable) check_variable: '%=3 :y%=1 '
    (check_variable) check_variable: Ary test '=3 :y%=1 '

     (check_literal) check_literal:lit='(' idx=16 '=3 :y%=1 '
     (check_literal) check_literal:After drop space:'(' idx=16 '=3 :y%=1 '
     (check_literal)   '(' != '='
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=16 '=3 :y%=1 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=16 '=3 :y%=1 '
   (check_literal) check_literal:After while():3 :y%=1 
   (check_literal) check_literal:ret1 

   (check_expression) check_expression: '3 :y%=1 '

    (check_eitem) check_eitem: '3 :y%=1 '

     (check_operator) check_operator: 3 :y%=1 

      (check_literal) check_literal:lit=' ,' idx=17 '3 :y%=1 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=17 '3 :y%=1 '
      (check_literal)   ',' != '3'
      (check_literal) check_literal: ret0
     (check_operator) ret0:is comma: 0

     (check_function) check_function: '3 :y%=1 '
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=17 '3 :y%=1 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=17 '3 :y%=1 '
      (check_literal)   '%' != '3'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=17 '3 :y%=1 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=17 '3 :y%=1 '
      (check_literal)   '"' != '3'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: '3 :y%=1 '
       (check_integer) check_integer:ret1
      (check_number) check_number: ret1
     (check_atom) check_atom:ret1
    (check_eitem) check_eitem:ret1

    (check_eitem) check_eitem: ' :y%=1 '

     (check_operator) check_operator:  :y%=1 

      (check_literal) check_literal:lit=' ,' idx=19 ':y%=1 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=19 ':y%=1 '
      (check_literal)   ',' != ':'
      (check_literal) check_literal: ret0
     (check_operator) ret0:is comma: 0

     (check_function) check_function: ':y%=1 '
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=18 ' :y%=1 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=19 ':y%=1 '
      (check_literal)   '%' != ':'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=18 ' :y%=1 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=19 ':y%=1 '
      (check_literal)   '"' != ':'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: ':y%=1 '
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname ':y%=1 ':
       (check_vname) check_vname ret0 ':y%=1 ':
      (check_variable) check_variable:ret0 
     (check_atom) check_atom:ret1

     (check_sub_expr) check_sub_expr:

      (check_literal) check_literal:lit=' (' idx=18 ' :y%=1 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'(' idx=19 ':y%=1 '
      (check_literal)   '(' != ':'
      (check_literal) check_literal: ret0
     (check_sub_expr) check_sub_expr: ret0
    (check_eitem) check_eitem:ret0
   (check_expression) check_expression:ret1 ' :y%=1 '
  (check_assignment) check_assignment:ret1
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=7, ' :y%=1 '
========================================================
b%=20 :c%=12 :x%=3 :y%=1 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'x%=3 :y%=1 ':
    (check_vname) check_vname ret1 '%=3 :y%=1 ':
   (check_variable) check_variable: '%=3 :y%=1 '
   (check_variable) check_variable: Ary test '=3 :y%=1 '

    (check_literal) check_literal:lit='(' idx=16 '=3 :y%=1 '
    (check_literal) check_literal:After drop space:'(' idx=16 '=3 :y%=1 '
    (check_literal)   '(' != '='
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=16 '=3 :y%=1 '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=16 '=3 :y%=1 '
  (check_literal) check_literal:After while():3 :y%=1 
  (check_literal) check_literal:ret1 

  (check_expression) check_expression: '3 :y%=1 '

   (check_eitem) check_eitem: '3 :y%=1 '

    (check_operator) check_operator: 3 :y%=1 

     (check_literal) check_literal:lit=' ,' idx=17 '3 :y%=1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=17 '3 :y%=1 '
     (check_literal)   ',' != '3'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: '3 :y%=1 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=17 '3 :y%=1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=17 '3 :y%=1 '
     (check_literal)   '%' != '3'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=17 '3 :y%=1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=17 '3 :y%=1 '
     (check_literal)   '"' != '3'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '3 :y%=1 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: ' :y%=1 '

    (check_operator) check_operator:  :y%=1 

     (check_literal) check_literal:lit=' ,' idx=19 ':y%=1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=19 ':y%=1 '
     (check_literal)   ',' != ':'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: ':y%=1 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=18 ' :y%=1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=19 ':y%=1 '
     (check_literal)   '%' != ':'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=18 ' :y%=1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=19 ':y%=1 '
     (check_literal)   '"' != ':'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: ':y%=1 '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname ':y%=1 ':
      (check_vname) check_vname ret0 ':y%=1 ':
     (check_variable) check_variable:ret0 
    (check_atom) check_atom:ret1

    (check_sub_expr) check_sub_expr:

     (check_literal) check_literal:lit=' (' idx=18 ' :y%=1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'(' idx=19 ':y%=1 '
     (check_literal)   '(' != ':'
     (check_literal) check_literal: ret0
    (check_sub_expr) check_sub_expr: ret0
   (check_eitem) check_eitem:ret0
  (check_expression) check_expression:ret1 ' :y%=1 '
 (check_assignment) check_assignment:ret1

 (scan_assignment) scan_assignment:

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'x%=3 :y%=1 '
   (scan_vname) scan_vname: ret1 'x'
  (scan_variable) scan_variable: '%=3 :y%=1 ' vname='x'
  (scan_variable) scan_variable: Ary test '=3 :y%=1 '

   (check_literal) check_literal:lit='(' idx=16 '=3 :y%=1 '
   (check_literal) check_literal:After drop space:'(' idx=16 '=3 :y%=1 '
   (check_literal)   '(' != '='
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='x%' is str:0 int:1 flt:0 ary:0
   Frst:1 T:'x%' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:x% is not function
token_is_variable: tok:'x%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:x% is not function
 (init_get_name) 
init_get_name:'x%'
 (init_get_name) 
init_get_name:'x%'
 (get_name) 
get_name:gn:'x%'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] i i x%
 (print_var_info) 
VAR INFO: '                x%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0

  (scan_assignment_equals) scan_assignment_equals:lit=' =' '=3 :y%=1 '
  (scan_assignment_equals) scan_assignment_equals:After drop space:'=3 :y%=1 '
  (scan_assignment_equals) scan_assignment_equals:while loop:=3 :y%=1 
   Frst:0 T:':=' exptype:i
  (operator_precedence) 
:= is operator
':=' is operator
  (process_token) 
Token is operator o1 name::= o2 name:
  (process_token) 
opr1:1 opr2:0
Push 1
 Push:':='
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (1)

  (op_stack_print) 
000: := type:0
  (op_stack_print) 
------------------

  (scan_assignment_equals) scan_assignment_equals:ret1

  (scan_expression) scan_expression: '3 :y%=1 '

   (check_eitem) check_eitem: '3 :y%=1 '

    (check_operator) check_operator: 3 :y%=1 

     (check_literal) check_literal:lit=' ,' idx=17 '3 :y%=1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=17 '3 :y%=1 '
     (check_literal)   ',' != '3'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: '3 :y%=1 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=17 '3 :y%=1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=17 '3 :y%=1 '
     (check_literal)   '%' != '3'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=17 '3 :y%=1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=17 '3 :y%=1 '
     (check_literal)   '"' != '3'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '3 :y%=1 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (scan_eitem) scan_eitem:

    (check_operator) check_operator: 3 :y%=1 

     (check_literal) check_literal:lit=' ,' idx=17 '3 :y%=1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=17 '3 :y%=1 '
     (check_literal)   ',' != '3'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: '3 :y%=1 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=17 '3 :y%=1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=17 '3 :y%=1 '
     (check_literal)   '%' != '3'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=17 '3 :y%=1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=17 '3 :y%=1 '
     (check_literal)   '"' != '3'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '3 :y%=1 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1

    (scan_atom) scan_atom:

     (check_literal) check_literal:lit=' %' idx=17 '3 :y%=1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=17 '3 :y%=1 '
     (check_literal)   '%' != '3'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=17 '3 :y%=1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=17 '3 :y%=1 '
     (check_literal)   '"' != '3'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '3 :y%=1 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1

     (scan_number) scan_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '3 :y%=1 '
      (check_integer) check_integer:ret1

      (scan_integer) scan_integer:
      (scan_integer) scan_integer:ret1
   Frst:0 T:'3' exptype:i
     (operator_precedence) 
:= is operator
modify_expression_type:Inittype:i Intype:i Outtype:i
(  output_integer) [i,()] i i 3
     (scan_integer) scan_integer:ret1  3
    (scan_atom) scan_atom:ret1
   (scan_expression) n commas now:0

    (check_eitem) check_eitem: ' :y%=1 '

     (check_operator) check_operator:  :y%=1 

      (check_literal) check_literal:lit=' ,' idx=19 ':y%=1 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=19 ':y%=1 '
      (check_literal)   ',' != ':'
      (check_literal) check_literal: ret0
     (check_operator) ret0:is comma: 0

     (check_function) check_function: ':y%=1 '
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=18 ' :y%=1 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=19 ':y%=1 '
      (check_literal)   '%' != ':'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=18 ' :y%=1 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=19 ':y%=1 '
      (check_literal)   '"' != ':'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: ':y%=1 '
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname ':y%=1 ':
       (check_vname) check_vname ret0 ':y%=1 ':
      (check_variable) check_variable:ret0 
     (check_atom) check_atom:ret1

     (check_sub_expr) check_sub_expr:

      (check_literal) check_literal:lit=' (' idx=18 ' :y%=1 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'(' idx=19 ':y%=1 '
      (check_literal)   '(' != ':'
      (check_literal) check_literal: ret0
     (check_sub_expr) check_sub_expr: ret0
    (check_eitem) check_eitem:ret0
   (scan_expression) scan_expression: ret1 ' :y%=1 ' commas:0
  (scan_assignment) scan_assignment: ret1
Finalise stack
Pop ':='
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (0)

 (op_stack_print) 
------------------

( output_operator) [i,()] i i :=
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function::= is not function
 (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'x%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '3' nidx:18  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i ':=' nidx:0  0:
=================
 BE:x%
type_check_stack_push: 'x%'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (1)

 (type_check_stack_print) 
000: 'x%' type:0
 (type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'x%' type:i (0)
 BE:3
type_check_stack_push: '3'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (2)

 (type_check_stack_print) 
000: 'x%' type:0
 (type_check_stack_print) 
001: '3' type:0
 (type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'x%' type:i (0)
001: '3' type:i (0)
 BE::=
BUFF_ID_OPERATOR
Found operator :=
type_check_stack_pop: '3'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (1)

 (type_check_stack_print) 
000: 'x%' type:0
 (type_check_stack_print) 
------------------

type_check_stack_pop: 'x%'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (0)

 (type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (1)

 (type_check_stack_print) 
000: '000' type:0
 (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'x%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '3' nidx:18  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i ':=' nidx:0  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i 'x%'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_OPERATOR     i rq:i ':='  2: 2 1
=================
 (process_expression_types) 
==INFIX==

Var: x% ary:0 NumIdx:0
infix_stack_push: 'x%'
infix_stack_push: '3'
infix_stack_pop: '3'
infix_stack_pop: 'x%'
infix_stack_push: '(x% := 3)'
infix_stack_pop: '(x% := 3)'
 (process_expression_types) ==(x% := 3)==
 (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i x%  0:
(    output_qcode) N2 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(    output_qcode) N3 EXP_BUFF_ID_OPERATOR     i rq:i :=  2: 2 1

  (check_literal) check_literal:lit=':' idx=19 ':y%=1 '
  (check_literal) check_literal:After drop space:':' idx=19 ':y%=1 '
  (check_literal) check_literal:After while():y%=1 
  (check_literal) check_literal:ret1 

  (scan_literal) scan_literal:lit=':' 'y%=1 '
  (scan_literal) scan_literal:After drop space:'y%=1 '
  (scan_literal) scan_literal:while loop:y%=1 
  (scan_literal) scan_literal:ret1

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'y%=1 ':
     (check_vname) check_vname ret1 '%=1 ':
    (check_variable) check_variable: '%=1 '
    (check_variable) check_variable: Ary test '=1 '

     (check_literal) check_literal:lit='(' idx=22 '=1 '
     (check_literal) check_literal:After drop space:'(' idx=22 '=1 '
     (check_literal)   '(' != '='
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=22 '=1 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=22 '=1 '
   (check_literal) check_literal:After while():1 
   (check_literal) check_literal:ret1 

   (check_expression) check_expression: '1 '

    (check_eitem) check_eitem: '1 '

     (check_operator) check_operator: 1 

      (check_literal) check_literal:lit=' ,' idx=23 '1 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=23 '1 '
      (check_literal)   ',' != '1'
      (check_literal) check_literal: ret0
     (check_operator) ret0:is comma: 0

     (check_function) check_function: '1 '
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=23 '1 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=23 '1 '
      (check_literal)   '%' != '1'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=23 '1 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=23 '1 '
      (check_literal)   '"' != '1'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: '1 '
       (check_integer) check_integer:ret1
      (check_number) check_number: ret1
     (check_atom) check_atom:ret1
    (check_eitem) check_eitem:ret1

    (check_eitem) check_eitem: ' '

     (check_operator) check_operator:  

      (check_literal) check_literal:lit=' ,' idx=25 ''
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=25 ''
      (check_literal) check_literal  ret0 Empty test string
     (check_operator) ret0:is comma: 0

     (check_function) check_function: ''
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=24 ' '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=25 ''
      (check_literal) check_literal  ret0 Empty test string

      (check_literal) check_literal:lit=' "' idx=24 ' '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=25 ''
      (check_literal) check_literal  ret0 Empty test string

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: ''
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname '':
       (check_vname) check_vname ret0 '':
      (check_variable) check_variable:ret0 
     (check_atom) check_atom:ret1

     (check_sub_expr) check_sub_expr:

      (check_literal) check_literal:lit=' (' idx=24 ' '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'(' idx=25 ''
      (check_literal) check_literal  ret0 Empty test string
     (check_sub_expr) check_sub_expr: ret0
    (check_eitem) check_eitem:ret0
   (check_expression) check_expression:ret1 ' '
  (check_assignment) check_assignment:ret1
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=1, ' '
========================================================
b%=20 :c%=12 :x%=3 :y%=1 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'y%=1 ':
    (check_vname) check_vname ret1 '%=1 ':
   (check_variable) check_variable: '%=1 '
   (check_variable) check_variable: Ary test '=1 '

    (check_literal) check_literal:lit='(' idx=22 '=1 '
    (check_literal) check_literal:After drop space:'(' idx=22 '=1 '
    (check_literal)   '(' != '='
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=22 '=1 '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=22 '=1 '
  (check_literal) check_literal:After while():1 
  (check_literal) check_literal:ret1 

  (check_expression) check_expression: '1 '

   (check_eitem) check_eitem: '1 '

    (check_operator) check_operator: 1 

     (check_literal) check_literal:lit=' ,' idx=23 '1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=23 '1 '
     (check_literal)   ',' != '1'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: '1 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=23 '1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=23 '1 '
     (check_literal)   '%' != '1'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=23 '1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=23 '1 '
     (check_literal)   '"' != '1'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '1 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: ' '

    (check_operator) check_operator:  

     (check_literal) check_literal:lit=' ,' idx=25 ''
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=25 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_operator) ret0:is comma: 0

    (check_function) check_function: ''
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=24 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=25 ''
     (check_literal) check_literal  ret0 Empty test string

     (check_literal) check_literal:lit=' "' idx=24 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=25 ''
     (check_literal) check_literal  ret0 Empty test string

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: ''
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname '':
      (check_vname) check_vname ret0 '':
     (check_variable) check_variable:ret0 
    (check_atom) check_atom:ret1

    (check_sub_expr) check_sub_expr:

     (check_literal) check_literal:lit=' (' idx=24 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'(' idx=25 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_sub_expr) check_sub_expr: ret0
   (check_eitem) check_eitem:ret0
  (check_expression) check_expression:ret1 ' '
 (check_assignment) check_assignment:ret1

 (scan_assignment) scan_assignment:

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'y%=1 '
   (scan_vname) scan_vname: ret1 'y'
  (scan_variable) scan_variable: '%=1 ' vname='y'
  (scan_variable) scan_variable: Ary test '=1 '

   (check_literal) check_literal:lit='(' idx=22 '=1 '
   (check_literal) check_literal:After drop space:'(' idx=22 '=1 '
   (check_literal)   '(' != '='
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='y%' is str:0 int:1 flt:0 ary:0
   Frst:1 T:'y%' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:y% is not function
token_is_variable: tok:'y%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:y% is not function
 (init_get_name) 
init_get_name:'y%'
 (init_get_name) 
init_get_name:'y%'
 (get_name) 
get_name:gn:'y%'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] i i y%
 (print_var_info) 
VAR INFO: '                y%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0

  (scan_assignment_equals) scan_assignment_equals:lit=' =' '=1 '
  (scan_assignment_equals) scan_assignment_equals:After drop space:'=1 '
  (scan_assignment_equals) scan_assignment_equals:while loop:=1 
   Frst:0 T:':=' exptype:i
  (operator_precedence) 
:= is operator
':=' is operator
  (process_token) 
Token is operator o1 name::= o2 name:
  (process_token) 
opr1:1 opr2:0
Push 1
 Push:':='
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (1)

  (op_stack_print) 
000: := type:0
  (op_stack_print) 
------------------

  (scan_assignment_equals) scan_assignment_equals:ret1

  (scan_expression) scan_expression: '1 '

   (check_eitem) check_eitem: '1 '

    (check_operator) check_operator: 1 

     (check_literal) check_literal:lit=' ,' idx=23 '1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=23 '1 '
     (check_literal)   ',' != '1'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: '1 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=23 '1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=23 '1 '
     (check_literal)   '%' != '1'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=23 '1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=23 '1 '
     (check_literal)   '"' != '1'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '1 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (scan_eitem) scan_eitem:

    (check_operator) check_operator: 1 

     (check_literal) check_literal:lit=' ,' idx=23 '1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=23 '1 '
     (check_literal)   ',' != '1'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: '1 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=23 '1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=23 '1 '
     (check_literal)   '%' != '1'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=23 '1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=23 '1 '
     (check_literal)   '"' != '1'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '1 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1

    (scan_atom) scan_atom:

     (check_literal) check_literal:lit=' %' idx=23 '1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=23 '1 '
     (check_literal)   '%' != '1'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=23 '1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=23 '1 '
     (check_literal)   '"' != '1'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '1 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1

     (scan_number) scan_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '1 '
      (check_integer) check_integer:ret1

      (scan_integer) scan_integer:
      (scan_integer) scan_integer:ret1
   Frst:0 T:'1' exptype:i
     (operator_precedence) 
:= is operator
modify_expression_type:Inittype:i Intype:i Outtype:i
(  output_integer) [i,()] i i 1
     (scan_integer) scan_integer:ret1  1
    (scan_atom) scan_atom:ret1
   (scan_expression) n commas now:0

    (check_eitem) check_eitem: ' '

     (check_operator) check_operator:  

      (check_literal) check_literal:lit=' ,' idx=25 ''
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=25 ''
      (check_literal) check_literal  ret0 Empty test string
     (check_operator) ret0:is comma: 0

     (check_function) check_function: ''
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=24 ' '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=25 ''
      (check_literal) check_literal  ret0 Empty test string

      (check_literal) check_literal:lit=' "' idx=24 ' '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=25 ''
      (check_literal) check_literal  ret0 Empty test string

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: ''
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname '':
       (check_vname) check_vname ret0 '':
      (check_variable) check_variable:ret0 
     (check_atom) check_atom:ret1

     (check_sub_expr) check_sub_expr:

      (check_literal) check_literal:lit=' (' idx=24 ' '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'(' idx=25 ''
      (check_literal) check_literal  ret0 Empty test string
     (check_sub_expr) check_sub_expr: ret0
    (check_eitem) check_eitem:ret0
   (scan_expression) scan_expression: ret1 ' ' commas:0
  (scan_assignment) scan_assignment: ret1
Finalise stack
Pop ':='
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (0)

 (op_stack_print) 
------------------

( output_operator) [i,()] i i :=
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function::= is not function
 (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'y%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '1' nidx:24  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i ':=' nidx:0  0:
=================
 BE:y%
type_check_stack_push: 'y%'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (1)

 (type_check_stack_print) 
000: 'y%' type:0
 (type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'y%' type:i (0)
 BE:1
type_check_stack_push: '1'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (2)

 (type_check_stack_print) 
000: 'y%' type:0
 (type_check_stack_print) 
001: '1' type:0
 (type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'y%' type:i (0)
001: '1' type:i (0)
 BE::=
BUFF_ID_OPERATOR
Found operator :=
type_check_stack_pop: '1'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (1)

 (type_check_stack_print) 
000: 'y%' type:0
 (type_check_stack_print) 
------------------

type_check_stack_pop: 'y%'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (0)

 (type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (1)

 (type_check_stack_print) 
000: '000' type:0
 (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'y%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '1' nidx:24  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i ':=' nidx:0  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i 'y%'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i '1'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_OPERATOR     i rq:i ':='  2: 2 1
=================
 (process_expression_types) 
==INFIX==

Var: y% ary:0 NumIdx:0
infix_stack_push: 'y%'
infix_stack_push: '1'
infix_stack_pop: '1'
infix_stack_pop: 'y%'
infix_stack_push: '(y% := 1)'
infix_stack_pop: '(y% := 1)'
 (process_expression_types) ==(y% := 1)==
 (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i y%  0:
(    output_qcode) N2 EXP_BUFF_ID_INTEGER      i rq:i 1  0:
(    output_qcode) N3 EXP_BUFF_ID_OPERATOR     i rq:i :=  2: 2 1

  (check_literal) check_literal:lit=':' idx=25 ''
  (check_literal) check_literal:After drop space:':' idx=25 ''
  (check_literal) check_literal  ret0 Empty test string
 (translate_file) 
cline scanned OK
*******
**DO **
*******


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'DO ':
     (check_vname) check_vname ret1 ' ':
    (check_variable) check_variable: ' '
    (check_variable) check_variable: Ary test ' '

     (check_literal) check_literal:lit='(' idx=2 ' '
     (check_literal) check_literal:After drop space:'(' idx=2 ' '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=2 ' '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=3 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_assignment) check_assignment:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) check_textlabel: 'DO '
   (check_textlabel) check_textlabel:ret0
  (check_proc_call) check_proc_call:ret0

  (check_command) check_command:
  (check_command) check_command: ret0

  (check_function) check_function: 'DO '
  (check_function) check_function: ret0

  (check_literal) check_literal:lit=' IF' idx=0 'DO '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'IF' idx=0 'DO '
  (check_literal)   'I' != 'D'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' ELSEIF' idx=0 'DO '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'ELSEIF' idx=0 'DO '
  (check_literal)   'E' != 'D'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' ELSE' idx=0 'DO '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'ELSE' idx=0 'DO '
  (check_literal)   'E' != 'D'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' ENDIF' idx=0 'DO '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'ENDIF' idx=0 'DO '
  (check_literal)   'E' != 'D'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' DO' idx=0 'DO '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'DO' idx=0 'DO '
  (check_literal) check_literal:After while(): 
  (check_literal) check_literal:ret1 
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=1, ' '
========================================================
DO 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'DO ':
    (check_vname) check_vname ret1 ' ':
   (check_variable) check_variable: ' '
   (check_variable) check_variable: Ary test ' '

    (check_literal) check_literal:lit='(' idx=2 ' '
    (check_literal) check_literal:After drop space:'(' idx=2 ' '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=2 ' '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=3 ''
  (check_literal) check_literal  ret0 Empty test string
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'DO '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret0

 (check_function) check_function: 'DO '
 (check_function) check_function: ret0

 (check_literal) check_literal:lit=' IF' idx=0 'DO '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'IF' idx=0 'DO '
 (check_literal)   'I' != 'D'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' ELSEIF' idx=0 'DO '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'ELSEIF' idx=0 'DO '
 (check_literal)   'E' != 'D'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' ELSE' idx=0 'DO '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'ELSE' idx=0 'DO '
 (check_literal)   'E' != 'D'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' ENDIF' idx=0 'DO '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'ENDIF' idx=0 'DO '
 (check_literal)   'E' != 'D'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' DO' idx=0 'DO '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'DO' idx=0 'DO '
 (check_literal) check_literal:After while(): 
 (check_literal) check_literal:ret1 

 (scan_literal) scan_literal:lit=' DO' 'DO '
 (scan_literal) scan_literal:After drop space:'DO '
 (scan_literal) scan_literal:while loop:DO 
 (scan_literal) scan_literal:while loop:O 
   Frst:1 T:'DO' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:DO is not function
token_is_variable: tok:'DO'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:DO is not function
 (init_get_name) 
init_get_name:'DO'
 (init_get_name) 
init_get_name:'DO'
 (get_name) 
get_name:gn:'DO'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] f f DO
 (scan_literal) scan_literal:ret1
Finalise stack
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'DO' nidx:0  0:
=================
 BE:DO
type_check_stack_push: 'DO'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'DO' type:1
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'DO' type:f (1)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'DO' nidx:0  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f 'DO'  0:
=================
(process_expression_types) 
==INFIX==

Var: DO ary:0 NumIdx:0
infix_stack_push: 'DO'
infix_stack_pop: 'DO'
(process_expression_types) ==DO==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     f rq:f DO  0:

 (check_literal) check_literal:lit=':' idx=3 ''
 (check_literal) check_literal:After drop space:':' idx=3 ''
 (check_literal) check_literal  ret0 Empty test string
(translate_file) 
cline scanned OK
************************************
** CLS :PRINT REPT$(CHR$(158),80) **
************************************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'CLS :PRINT REPT$(CHR$(158),80) ':
     (check_vname) check_vname ret1 ' :PRINT REPT$(CHR$(158),80) ':
    (check_variable) check_variable: ' :PRINT REPT$(CHR$(158),80) '
    (check_variable) check_variable: Ary test ' :PRINT REPT$(CHR$(158),80) '

     (check_literal) check_literal:lit='(' idx=4 ' :PRINT REPT$(CHR$(158),80) '
     (check_literal) check_literal:After drop space:'(' idx=4 ' :PRINT REPT$(CHR$(158),80) '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=4 ' :PRINT REPT$(CHR$(158),80) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=5 ':PRINT REPT$(CHR$(158),80) '
   (check_literal)   '=' != ':'
   (check_literal) check_literal: ret0
  (check_assignment) check_assignment:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) check_textlabel: 'CLS :PRINT REPT$(CHR$(158),80) '
   (check_textlabel) check_textlabel:ret0
  (check_proc_call) check_proc_call:ret0

  (check_command) check_command:
  (check_command) check_command: ret1 found=> 'CLS'
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=28, ' :PRINT REPT$(CHR$(158),80) '
========================================================
 CLS :PRINT REPT$(CHR$(158),80) 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'CLS :PRINT REPT$(CHR$(158),80) ':
    (check_vname) check_vname ret1 ' :PRINT REPT$(CHR$(158),80) ':
   (check_variable) check_variable: ' :PRINT REPT$(CHR$(158),80) '
   (check_variable) check_variable: Ary test ' :PRINT REPT$(CHR$(158),80) '

    (check_literal) check_literal:lit='(' idx=4 ' :PRINT REPT$(CHR$(158),80) '
    (check_literal) check_literal:After drop space:'(' idx=4 ' :PRINT REPT$(CHR$(158),80) '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=4 ' :PRINT REPT$(CHR$(158),80) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=5 ':PRINT REPT$(CHR$(158),80) '
  (check_literal)   '=' != ':'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'CLS :PRINT REPT$(CHR$(158),80) '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'CLS'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'CLS' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) CLS is function
 (function_return_type) 
function_return_type: 'CLS' =>v
 (function_return_type) 
function_return_type: 'CLS' =>17
process_token: 'CLS' t=>v
 Push:'CLS'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: CLS type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: CLS type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' :PRINT REPT$(CHR$(158),80) '

   (check_eitem) check_eitem: ':PRINT REPT$(CHR$(158),80) '

    (check_operator) check_operator: :PRINT REPT$(CHR$(158),80) 

     (check_literal) check_literal:lit=' ,' idx=5 ':PRINT REPT$(CHR$(158),80) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=5 ':PRINT REPT$(CHR$(158),80) '
     (check_literal)   ',' != ':'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: ':PRINT REPT$(CHR$(158),80) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=5 ':PRINT REPT$(CHR$(158),80) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=5 ':PRINT REPT$(CHR$(158),80) '
     (check_literal)   '%' != ':'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=5 ':PRINT REPT$(CHR$(158),80) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=5 ':PRINT REPT$(CHR$(158),80) '
     (check_literal)   '"' != ':'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: ':PRINT REPT$(CHR$(158),80) '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname ':PRINT REPT$(CHR$(158),80) ':
      (check_vname) check_vname ret0 ':PRINT REPT$(CHR$(158),80) ':
     (check_variable) check_variable:ret0 
    (check_atom) check_atom:ret1

    (check_sub_expr) check_sub_expr:

     (check_literal) check_literal:lit=' (' idx=5 ':PRINT REPT$(CHR$(158),80) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'(' idx=5 ':PRINT REPT$(CHR$(158),80) '
     (check_literal)   '(' != ':'
     (check_literal) check_literal: ret0
    (check_sub_expr) check_sub_expr: ret0
   (check_eitem) check_eitem:ret0
  (scan_expression) scan_expression: ret1 ':PRINT REPT$(CHR$(158),80) ' commas:0
 (scan_command) scan_command: ret1 =>'CLS'
(scan_command) 
ENDEXP
   Frst:0 T:')' exptype:U
Pop 4
Pop '('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: CLS type:17
(op_stack_print) 
------------------

(  output_sub_end)
(token_is_function) 
token_is_function:
(token_is_function) CLS is function
Pop 5
Pop 'CLS'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_function) [U,(U )] v v CLS
(  output_sub_end)
Finalise stack
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'CLS' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
 BE:

Type Check Stack (0)

 BE:

Type Check Stack (0)

 BE:CLS
FN: 0 args
(function_return_type) 
function_return_type: 'CLS' =>v
(function_return_type) 
function_return_type: 'CLS' =>17
ret_type;17 v
typecheck_expression:Ret type of CLS : v
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:17
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'CLS' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_FUNCTION     v rq:v 'CLS'  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
(process_expression_types) 
==INFIX==

infix_stack_push: 'CLS()'
infix_stack_pop: 'CLS()'
(process_expression_types) ==CLS()==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N3 EXP_BUFF_ID_FUNCTION     v rq:v CLS  0:
(    output_qcode) N4 EXP_BUFF_ID_SUB_END      U rq:i   0:

 (check_literal) check_literal:lit=':' idx=5 ':PRINT REPT$(CHR$(158),80) '
 (check_literal) check_literal:After drop space:':' idx=5 ':PRINT REPT$(CHR$(158),80) '
 (check_literal) check_literal:After while():PRINT REPT$(CHR$(158),80) 
 (check_literal) check_literal:ret1 

 (scan_literal) scan_literal:lit=':' 'PRINT REPT$(CHR$(158),80) '
 (scan_literal) scan_literal:After drop space:'PRINT REPT$(CHR$(158),80) '
 (scan_literal) scan_literal:while loop:PRINT REPT$(CHR$(158),80) 
 (scan_literal) scan_literal:ret1

 (check_line) check_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'PRINT REPT$(CHR$(158),80) ':
    (check_vname) check_vname ret1 ' REPT$(CHR$(158),80) ':
   (check_variable) check_variable: ' REPT$(CHR$(158),80) '
   (check_variable) check_variable: Ary test ' REPT$(CHR$(158),80) '

    (check_literal) check_literal:lit='(' idx=11 ' REPT$(CHR$(158),80) '
    (check_literal) check_literal:After drop space:'(' idx=11 ' REPT$(CHR$(158),80) '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=11 ' REPT$(CHR$(158),80) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=12 'REPT$(CHR$(158),80) '
  (check_literal)   '=' != 'R'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'PRINT REPT$(CHR$(158),80) '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'PRINT'
(check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=21, ' REPT$(CHR$(158),80) '
========================================================
 CLS :PRINT REPT$(CHR$(158),80) 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'PRINT REPT$(CHR$(158),80) ':
    (check_vname) check_vname ret1 ' REPT$(CHR$(158),80) ':
   (check_variable) check_variable: ' REPT$(CHR$(158),80) '
   (check_variable) check_variable: Ary test ' REPT$(CHR$(158),80) '

    (check_literal) check_literal:lit='(' idx=11 ' REPT$(CHR$(158),80) '
    (check_literal) check_literal:After drop space:'(' idx=11 ' REPT$(CHR$(158),80) '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=11 ' REPT$(CHR$(158),80) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=12 'REPT$(CHR$(158),80) '
  (check_literal)   '=' != 'R'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'PRINT REPT$(CHR$(158),80) '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'PRINT'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'PRINT' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) PRINT is function
 (function_return_type) 
function_return_type: 'PRINT' =>v
 (function_return_type) 
function_return_type: 'PRINT' =>17
process_token: 'PRINT' t=>v
 Push:'PRINT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' REPT$(CHR$(158),80) '

   (check_eitem) check_eitem: 'REPT$(CHR$(158),80) '

    (check_operator) check_operator: REPT$(CHR$(158),80) 

     (check_literal) check_literal:lit=' ,' idx=12 'REPT$(CHR$(158),80) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=12 'REPT$(CHR$(158),80) '
     (check_literal)   ',' != 'R'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'REPT$(CHR$(158),80) '
    (check_function) check_function: ret1 Found fn=>'REPT$'
   (check_eitem) check_eitem:ret1

   (scan_eitem) scan_eitem:

    (check_operator) check_operator: REPT$(CHR$(158),80) 

     (check_literal) check_literal:lit=' ,' idx=12 'REPT$(CHR$(158),80) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=12 'REPT$(CHR$(158),80) '
     (check_literal)   ',' != 'R'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'REPT$(CHR$(158),80) '
    (check_function) check_function: ret1 Found fn=>'REPT$'

    (scan_function) scan_function:
   Frst:0 T:'REPT$' exptype:U
    (token_is_function) 
token_is_function:
    (token_is_function) REPT$ is function
    (function_return_type) 
function_return_type: 'REPT$' =>f
    (function_return_type) 
function_return_type: 'REPT$' =>1
process_token: 'REPT$' t=>f
 Push:'REPT$'
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (3)

    (op_stack_print) 
000: PRINT type:17
    (op_stack_print) 
001: ( type:16
    (op_stack_print) 
002: REPT$ type:1
    (op_stack_print) 
------------------

    (scan_expression) n commas now:0

     (check_eitem) check_eitem: '(CHR$(158),80) '

      (check_operator) check_operator: (CHR$(158),80) 

       (check_literal) check_literal:lit=' ,' idx=17 '(CHR$(158),80) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=17 '(CHR$(158),80) '
       (check_literal)   ',' != '('
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: '(CHR$(158),80) '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=17 '(CHR$(158),80) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=17 '(CHR$(158),80) '
       (check_literal)   '%' != '('
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=17 '(CHR$(158),80) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=17 '(CHR$(158),80) '
       (check_literal)   '"' != '('
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '(CHR$(158),80) '
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname '(CHR$(158),80) ':
        (check_vname) check_vname ret0 '(CHR$(158),80) ':
       (check_variable) check_variable:ret0 
      (check_atom) check_atom:ret1

      (check_sub_expr) check_sub_expr:

       (check_literal) check_literal:lit=' (' idx=17 '(CHR$(158),80) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'(' idx=17 '(CHR$(158),80) '
       (check_literal) check_literal:After while():CHR$(158),80) 
       (check_literal) check_literal:ret1 
      (check_sub_expr) check_sub_expr: ret1
     (check_eitem) check_eitem:ret1

     (scan_eitem) scan_eitem:

      (check_operator) check_operator: (CHR$(158),80) 

       (check_literal) check_literal:lit=' ,' idx=17 '(CHR$(158),80) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=17 '(CHR$(158),80) '
       (check_literal)   ',' != '('
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: '(CHR$(158),80) '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=17 '(CHR$(158),80) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=17 '(CHR$(158),80) '
       (check_literal)   '%' != '('
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=17 '(CHR$(158),80) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=17 '(CHR$(158),80) '
       (check_literal)   '"' != '('
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '(CHR$(158),80) '
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname '(CHR$(158),80) ':
        (check_vname) check_vname ret0 '(CHR$(158),80) ':
       (check_variable) check_variable:ret0 
      (check_atom) check_atom:ret1

      (check_sub_expr) check_sub_expr:

       (check_literal) check_literal:lit=' (' idx=17 '(CHR$(158),80) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'(' idx=17 '(CHR$(158),80) '
       (check_literal) check_literal:After while():CHR$(158),80) 
       (check_literal) check_literal:ret1 
      (check_sub_expr) check_sub_expr: ret1

      (scan_sub_expr) scan_sub_expr:

       (scan_literal) scan_literal:lit=' (' '(CHR$(158),80) '
       (scan_literal) scan_literal:After drop space:'(CHR$(158),80) '
       (scan_literal) scan_literal:while loop:(CHR$(158),80) 
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (4)

       (op_stack_print) 
000: PRINT type:17
       (op_stack_print) 
001: ( type:16
       (op_stack_print) 
002: REPT$ type:1
       (op_stack_print) 
003: ( type:16
       (op_stack_print) 
------------------

       (scan_literal) scan_literal:ret1
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (5)

      (op_stack_print) 
000: PRINT type:17
      (op_stack_print) 
001: ( type:16
      (op_stack_print) 
002: REPT$ type:1
      (op_stack_print) 
003: ( type:16
      (op_stack_print) 
004: ( type:16
      (op_stack_print) 
------------------


       (scan_expression) scan_expression: 'CHR$(158),80) '

        (check_eitem) check_eitem: 'CHR$(158),80) '

         (check_operator) check_operator: CHR$(158),80) 

          (check_literal) check_literal:lit=' ,' idx=18 'CHR$(158),80) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:',' idx=18 'CHR$(158),80) '
          (check_literal)   ',' != 'C'
          (check_literal) check_literal: ret0
         (check_operator) ret0:is comma: 0

         (check_function) check_function: 'CHR$(158),80) '
         (check_function) check_function: ret1 Found fn=>'CHR$'
        (check_eitem) check_eitem:ret1

        (scan_eitem) scan_eitem:

         (check_operator) check_operator: CHR$(158),80) 

          (check_literal) check_literal:lit=' ,' idx=18 'CHR$(158),80) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:',' idx=18 'CHR$(158),80) '
          (check_literal)   ',' != 'C'
          (check_literal) check_literal: ret0
         (check_operator) ret0:is comma: 0

         (check_function) check_function: 'CHR$(158),80) '
         (check_function) check_function: ret1 Found fn=>'CHR$'

         (scan_function) scan_function:
   Frst:0 T:'CHR$' exptype:U
         (token_is_function) 
token_is_function:
         (token_is_function) CHR$ is function
         (function_return_type) 
function_return_type: 'CHR$' =>s
         (function_return_type) 
function_return_type: 'CHR$' =>2
process_token: 'CHR$' t=>s
 Push:'CHR$'
         (op_stack_print) 
------------------
         (op_stack_print) 
Operator Stack     (6)

         (op_stack_print) 
000: PRINT type:17
         (op_stack_print) 
001: ( type:16
         (op_stack_print) 
002: REPT$ type:1
         (op_stack_print) 
003: ( type:16
         (op_stack_print) 
004: ( type:16
         (op_stack_print) 
005: CHR$ type:2
         (op_stack_print) 
------------------

         (scan_expression) n commas now:0

          (check_eitem) check_eitem: '(158),80) '

           (check_operator) check_operator: (158),80) 

            (check_literal) check_literal:lit=' ,' idx=22 '(158),80) '
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:',' idx=22 '(158),80) '
            (check_literal)   ',' != '('
            (check_literal) check_literal: ret0
           (check_operator) ret0:is comma: 0

           (check_function) check_function: '(158),80) '
           (check_function) check_function: ret0

           (check_atom) check_atom:

            (check_literal) check_literal:lit=' %' idx=22 '(158),80) '
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:'%' idx=22 '(158),80) '
            (check_literal)   '%' != '('
            (check_literal) check_literal: ret0

            (check_literal) check_literal:lit=' "' idx=22 '(158),80) '
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:'"' idx=22 '(158),80) '
            (check_literal)   '"' != '('
            (check_literal) check_literal: ret0

            (check_number) check_number:

             (check_float) check_float:
             (isfloatdigit) isfloatdigit:
             (check_float) check_float: ret0

             (check_integer) check_integer: '(158),80) '
             (check_integer) check_integer:ret0
            (check_number) check_number: ret0

            (check_variable) check_variable:

             (check_vname) check_vname '(158),80) ':
             (check_vname) check_vname ret0 '(158),80) ':
            (check_variable) check_variable:ret0 
           (check_atom) check_atom:ret1

           (check_sub_expr) check_sub_expr:

            (check_literal) check_literal:lit=' (' idx=22 '(158),80) '
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:'(' idx=22 '(158),80) '
            (check_literal) check_literal:After while():158),80) 
            (check_literal) check_literal:ret1 
           (check_sub_expr) check_sub_expr: ret1
          (check_eitem) check_eitem:ret1

          (scan_eitem) scan_eitem:

           (check_operator) check_operator: (158),80) 

            (check_literal) check_literal:lit=' ,' idx=22 '(158),80) '
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:',' idx=22 '(158),80) '
            (check_literal)   ',' != '('
            (check_literal) check_literal: ret0
           (check_operator) ret0:is comma: 0

           (check_function) check_function: '(158),80) '
           (check_function) check_function: ret0

           (check_atom) check_atom:

            (check_literal) check_literal:lit=' %' idx=22 '(158),80) '
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:'%' idx=22 '(158),80) '
            (check_literal)   '%' != '('
            (check_literal) check_literal: ret0

            (check_literal) check_literal:lit=' "' idx=22 '(158),80) '
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:'"' idx=22 '(158),80) '
            (check_literal)   '"' != '('
            (check_literal) check_literal: ret0

            (check_number) check_number:

             (check_float) check_float:
             (isfloatdigit) isfloatdigit:
             (check_float) check_float: ret0

             (check_integer) check_integer: '(158),80) '
             (check_integer) check_integer:ret0
            (check_number) check_number: ret0

            (check_variable) check_variable:

             (check_vname) check_vname '(158),80) ':
             (check_vname) check_vname ret0 '(158),80) ':
            (check_variable) check_variable:ret0 
           (check_atom) check_atom:ret1

           (check_sub_expr) check_sub_expr:

            (check_literal) check_literal:lit=' (' idx=22 '(158),80) '
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:'(' idx=22 '(158),80) '
            (check_literal) check_literal:After while():158),80) 
            (check_literal) check_literal:ret1 
           (check_sub_expr) check_sub_expr: ret1

           (scan_sub_expr) scan_sub_expr:

            (scan_literal) scan_literal:lit=' (' '(158),80) '
            (scan_literal) scan_literal:After drop space:'(158),80) '
            (scan_literal) scan_literal:while loop:(158),80) 
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
            (op_stack_print) 
------------------
            (op_stack_print) 
Operator Stack     (7)

            (op_stack_print) 
000: PRINT type:17
            (op_stack_print) 
001: ( type:16
            (op_stack_print) 
002: REPT$ type:1
            (op_stack_print) 
003: ( type:16
            (op_stack_print) 
004: ( type:16
            (op_stack_print) 
005: CHR$ type:2
            (op_stack_print) 
006: ( type:16
            (op_stack_print) 
------------------

            (scan_literal) scan_literal:ret1
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
           (op_stack_print) 
------------------
           (op_stack_print) 
Operator Stack     (8)

           (op_stack_print) 
000: PRINT type:17
           (op_stack_print) 
001: ( type:16
           (op_stack_print) 
002: REPT$ type:1
           (op_stack_print) 
003: ( type:16
           (op_stack_print) 
004: ( type:16
           (op_stack_print) 
005: CHR$ type:2
           (op_stack_print) 
006: ( type:16
           (op_stack_print) 
007: ( type:16
           (op_stack_print) 
------------------


            (scan_expression) scan_expression: '158),80) '

             (check_eitem) check_eitem: '158),80) '

              (check_operator) check_operator: 158),80) 

               (check_literal) check_literal:lit=' ,' idx=23 '158),80) '
               (check_literal) dropping space
               (check_literal) check_literal:After drop space:',' idx=23 '158),80) '
               (check_literal)   ',' != '1'
               (check_literal) check_literal: ret0
              (check_operator) ret0:is comma: 0

              (check_function) check_function: '158),80) '
              (check_function) check_function: ret0

              (check_atom) check_atom:

               (check_literal) check_literal:lit=' %' idx=23 '158),80) '
               (check_literal) dropping space
               (check_literal) check_literal:After drop space:'%' idx=23 '158),80) '
               (check_literal)   '%' != '1'
               (check_literal) check_literal: ret0

               (check_literal) check_literal:lit=' "' idx=23 '158),80) '
               (check_literal) dropping space
               (check_literal) check_literal:After drop space:'"' idx=23 '158),80) '
               (check_literal)   '"' != '1'
               (check_literal) check_literal: ret0

               (check_number) check_number:

                (check_float) check_float:
                (isfloatdigit) isfloatdigit:
                (isfloatdigit) isfloatdigit:
                (isfloatdigit) isfloatdigit:
                (isfloatdigit) isfloatdigit:
                (check_float) check_float: ret0

                (check_integer) check_integer: '158),80) '
                (check_integer) check_integer:ret1
               (check_number) check_number: ret1
              (check_atom) check_atom:ret1
             (check_eitem) check_eitem:ret1

             (scan_eitem) scan_eitem:

              (check_operator) check_operator: 158),80) 

               (check_literal) check_literal:lit=' ,' idx=23 '158),80) '
               (check_literal) dropping space
               (check_literal) check_literal:After drop space:',' idx=23 '158),80) '
               (check_literal)   ',' != '1'
               (check_literal) check_literal: ret0
              (check_operator) ret0:is comma: 0

              (check_function) check_function: '158),80) '
              (check_function) check_function: ret0

              (check_atom) check_atom:

               (check_literal) check_literal:lit=' %' idx=23 '158),80) '
               (check_literal) dropping space
               (check_literal) check_literal:After drop space:'%' idx=23 '158),80) '
               (check_literal)   '%' != '1'
               (check_literal) check_literal: ret0

               (check_literal) check_literal:lit=' "' idx=23 '158),80) '
               (check_literal) dropping space
               (check_literal) check_literal:After drop space:'"' idx=23 '158),80) '
               (check_literal)   '"' != '1'
               (check_literal) check_literal: ret0

               (check_number) check_number:

                (check_float) check_float:
                (isfloatdigit) isfloatdigit:
                (isfloatdigit) isfloatdigit:
                (isfloatdigit) isfloatdigit:
                (isfloatdigit) isfloatdigit:
                (check_float) check_float: ret0

                (check_integer) check_integer: '158),80) '
                (check_integer) check_integer:ret1
               (check_number) check_number: ret1
              (check_atom) check_atom:ret1

              (scan_atom) scan_atom:

               (check_literal) check_literal:lit=' %' idx=23 '158),80) '
               (check_literal) dropping space
               (check_literal) check_literal:After drop space:'%' idx=23 '158),80) '
               (check_literal)   '%' != '1'
               (check_literal) check_literal: ret0

               (check_literal) check_literal:lit=' "' idx=23 '158),80) '
               (check_literal) dropping space
               (check_literal) check_literal:After drop space:'"' idx=23 '158),80) '
               (check_literal)   '"' != '1'
               (check_literal) check_literal: ret0

               (check_number) check_number:

                (check_float) check_float:
                (isfloatdigit) isfloatdigit:
                (isfloatdigit) isfloatdigit:
                (isfloatdigit) isfloatdigit:
                (isfloatdigit) isfloatdigit:
                (check_float) check_float: ret0

                (check_integer) check_integer: '158),80) '
                (check_integer) check_integer:ret1
               (check_number) check_number: ret1

               (scan_number) scan_number:

                (check_float) check_float:
                (isfloatdigit) isfloatdigit:
                (isfloatdigit) isfloatdigit:
                (isfloatdigit) isfloatdigit:
                (isfloatdigit) isfloatdigit:
                (check_float) check_float: ret0

                (check_integer) check_integer: '158),80) '
                (check_integer) check_integer:ret1

                (scan_integer) scan_integer:
                (scan_integer) scan_integer:ret1
   Frst:0 T:'158' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U U U U U )] i i 158
               (scan_integer) scan_integer:ret1  158
              (scan_atom) scan_atom:ret1
             (scan_expression) n commas now:0

              (check_eitem) check_eitem: '),80) '

               (check_operator) check_operator: ),80) 

                (check_literal) check_literal:lit=' ,' idx=26 '),80) '
                (check_literal) dropping space
                (check_literal) check_literal:After drop space:',' idx=26 '),80) '
                (check_literal)   ',' != ')'
                (check_literal) check_literal: ret0
               (check_operator) ret0:is comma: 0

               (check_function) check_function: '),80) '
               (check_function) check_function: ret0

               (check_atom) check_atom:

                (check_literal) check_literal:lit=' %' idx=26 '),80) '
                (check_literal) dropping space
                (check_literal) check_literal:After drop space:'%' idx=26 '),80) '
                (check_literal)   '%' != ')'
                (check_literal) check_literal: ret0

                (check_literal) check_literal:lit=' "' idx=26 '),80) '
                (check_literal) dropping space
                (check_literal) check_literal:After drop space:'"' idx=26 '),80) '
                (check_literal)   '"' != ')'
                (check_literal) check_literal: ret0

                (check_number) check_number:

                 (check_float) check_float:
                 (isfloatdigit) isfloatdigit:
                 (check_float) check_float: ret0

                 (check_integer) check_integer: '),80) '
                 (check_integer) check_integer:ret0
                (check_number) check_number: ret0

                (check_variable) check_variable:

                 (check_vname) check_vname '),80) ':
                 (check_vname) check_vname ret0 '),80) ':
                (check_variable) check_variable:ret0 
               (check_atom) check_atom:ret1

               (check_sub_expr) check_sub_expr:

                (check_literal) check_literal:lit=' (' idx=26 '),80) '
                (check_literal) dropping space
                (check_literal) check_literal:After drop space:'(' idx=26 '),80) '
                (check_literal)   '(' != ')'
                (check_literal) check_literal: ret0
               (check_sub_expr) check_sub_expr: ret0
              (check_eitem) check_eitem:ret0
             (scan_expression) scan_expression: ret1 '),80) ' commas:0

             (scan_literal) scan_literal:lit=' )' '),80) '
             (scan_literal) scan_literal:After drop space:'),80) '
             (scan_literal) scan_literal:while loop:),80) 
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
             (op_stack_print) 
------------------
             (op_stack_print) 
Operator Stack     (7)

             (op_stack_print) 
000: PRINT type:17
             (op_stack_print) 
001: ( type:16
             (op_stack_print) 
002: REPT$ type:1
             (op_stack_print) 
003: ( type:16
             (op_stack_print) 
004: ( type:16
             (op_stack_print) 
005: CHR$ type:2
             (op_stack_print) 
006: ( type:16
             (op_stack_print) 
------------------

(  output_sub_end)
             (token_is_function) 
token_is_function:
             (token_is_function) 
token_is_function:( is not function
(  output_sub_end)
             (scan_literal) scan_literal:ret1
   Frst:0 T:')' exptype:U
Pop 4
Pop '('
            (op_stack_print) 
------------------
            (op_stack_print) 
Operator Stack     (6)

            (op_stack_print) 
000: PRINT type:17
            (op_stack_print) 
001: ( type:16
            (op_stack_print) 
002: REPT$ type:1
            (op_stack_print) 
003: ( type:16
            (op_stack_print) 
004: ( type:16
            (op_stack_print) 
005: CHR$ type:2
            (op_stack_print) 
------------------

(  output_sub_end)
            (token_is_function) 
token_is_function:
            (token_is_function) CHR$ is function
Pop 5
Pop 'CHR$'
            (op_stack_print) 
------------------
            (op_stack_print) 
Operator Stack     (5)

            (op_stack_print) 
000: PRINT type:17
            (op_stack_print) 
001: ( type:16
            (op_stack_print) 
002: REPT$ type:1
            (op_stack_print) 
003: ( type:16
            (op_stack_print) 
004: ( type:16
            (op_stack_print) 
------------------

( output_function) [U,(U U U U )] s s CHR$
(  output_sub_end)
            (scan_sub_expr) scan_sub_expr:ret1
           (scan_expression) n commas now:0

            (check_eitem) check_eitem: ',80) '

             (check_operator) check_operator: ,80) 

              (check_literal) check_literal:lit=' ,' idx=27 ',80) '
              (check_literal) dropping space
              (check_literal) check_literal:After drop space:',' idx=27 ',80) '
              (check_literal) check_literal:After while():80) 
              (check_literal) check_literal:ret1 
             (check_operator) ret1:is comma: 0
            (check_eitem) check_eitem:ret1 comma:1

            (scan_eitem) scan_eitem:

             (check_operator) check_operator: ,80) 

              (check_literal) check_literal:lit=' ,' idx=27 ',80) '
              (check_literal) dropping space
              (check_literal) check_literal:After drop space:',' idx=27 ',80) '
              (check_literal) check_literal:After while():80) 
              (check_literal) check_literal:ret1 
             (check_operator) ret1:is comma: 0

             (scan_operator) scan_operator: ',80) '

              (check_literal) check_literal:lit=' ,' idx=27 ',80) '
              (check_literal) dropping space
              (check_literal) check_literal:After drop space:',' idx=27 ',80) '
              (check_literal) check_literal:After while():80) 
              (check_literal) check_literal:ret1 

              (scan_literal) scan_literal:lit=' ,' ',80) '
              (scan_literal) scan_literal:After drop space:',80) '
              (scan_literal) scan_literal:while loop:,80) 
   Frst:0 T:',' exptype:U
(output_sub_start)
              (scan_literal) scan_literal:ret1
             (scan_operator) ret1:is comma: 1
            (scan_eitem) Is comma;1
            (scan_expression) n commas now:1

             (check_eitem) check_eitem: '80) '

              (check_operator) check_operator: 80) 

               (check_literal) check_literal:lit=' ,' idx=28 '80) '
               (check_literal) dropping space
               (check_literal) check_literal:After drop space:',' idx=28 '80) '
               (check_literal)   ',' != '8'
               (check_literal) check_literal: ret0
              (check_operator) ret0:is comma: 0

              (check_function) check_function: '80) '
              (check_function) check_function: ret0

              (check_atom) check_atom:

               (check_literal) check_literal:lit=' %' idx=28 '80) '
               (check_literal) dropping space
               (check_literal) check_literal:After drop space:'%' idx=28 '80) '
               (check_literal)   '%' != '8'
               (check_literal) check_literal: ret0

               (check_literal) check_literal:lit=' "' idx=28 '80) '
               (check_literal) dropping space
               (check_literal) check_literal:After drop space:'"' idx=28 '80) '
               (check_literal)   '"' != '8'
               (check_literal) check_literal: ret0

               (check_number) check_number:

                (check_float) check_float:
                (isfloatdigit) isfloatdigit:
                (isfloatdigit) isfloatdigit:
                (isfloatdigit) isfloatdigit:
                (check_float) check_float: ret0

                (check_integer) check_integer: '80) '
                (check_integer) check_integer:ret1
               (check_number) check_number: ret1
              (check_atom) check_atom:ret1
             (check_eitem) check_eitem:ret1

             (scan_eitem) scan_eitem:

              (check_operator) check_operator: 80) 

               (check_literal) check_literal:lit=' ,' idx=28 '80) '
               (check_literal) dropping space
               (check_literal) check_literal:After drop space:',' idx=28 '80) '
               (check_literal)   ',' != '8'
               (check_literal) check_literal: ret0
              (check_operator) ret0:is comma: 0

              (check_function) check_function: '80) '
              (check_function) check_function: ret0

              (check_atom) check_atom:

               (check_literal) check_literal:lit=' %' idx=28 '80) '
               (check_literal) dropping space
               (check_literal) check_literal:After drop space:'%' idx=28 '80) '
               (check_literal)   '%' != '8'
               (check_literal) check_literal: ret0

               (check_literal) check_literal:lit=' "' idx=28 '80) '
               (check_literal) dropping space
               (check_literal) check_literal:After drop space:'"' idx=28 '80) '
               (check_literal)   '"' != '8'
               (check_literal) check_literal: ret0

               (check_number) check_number:

                (check_float) check_float:
                (isfloatdigit) isfloatdigit:
                (isfloatdigit) isfloatdigit:
                (isfloatdigit) isfloatdigit:
                (check_float) check_float: ret0

                (check_integer) check_integer: '80) '
                (check_integer) check_integer:ret1
               (check_number) check_number: ret1
              (check_atom) check_atom:ret1

              (scan_atom) scan_atom:

               (check_literal) check_literal:lit=' %' idx=28 '80) '
               (check_literal) dropping space
               (check_literal) check_literal:After drop space:'%' idx=28 '80) '
               (check_literal)   '%' != '8'
               (check_literal) check_literal: ret0

               (check_literal) check_literal:lit=' "' idx=28 '80) '
               (check_literal) dropping space
               (check_literal) check_literal:After drop space:'"' idx=28 '80) '
               (check_literal)   '"' != '8'
               (check_literal) check_literal: ret0

               (check_number) check_number:

                (check_float) check_float:
                (isfloatdigit) isfloatdigit:
                (isfloatdigit) isfloatdigit:
                (isfloatdigit) isfloatdigit:
                (check_float) check_float: ret0

                (check_integer) check_integer: '80) '
                (check_integer) check_integer:ret1
               (check_number) check_number: ret1

               (scan_number) scan_number:

                (check_float) check_float:
                (isfloatdigit) isfloatdigit:
                (isfloatdigit) isfloatdigit:
                (isfloatdigit) isfloatdigit:
                (check_float) check_float: ret0

                (check_integer) check_integer: '80) '
                (check_integer) check_integer:ret1

                (scan_integer) scan_integer:
                (scan_integer) scan_integer:ret1
   Frst:0 T:'80' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U U U )] i i 80
               (scan_integer) scan_integer:ret1  80
              (scan_atom) scan_atom:ret1
             (scan_expression) n commas now:1

              (check_eitem) check_eitem: ') '

               (check_operator) check_operator: ) 

                (check_literal) check_literal:lit=' ,' idx=30 ') '
                (check_literal) dropping space
                (check_literal) check_literal:After drop space:',' idx=30 ') '
                (check_literal)   ',' != ')'
                (check_literal) check_literal: ret0
               (check_operator) ret0:is comma: 0

               (check_function) check_function: ') '
               (check_function) check_function: ret0

               (check_atom) check_atom:

                (check_literal) check_literal:lit=' %' idx=30 ') '
                (check_literal) dropping space
                (check_literal) check_literal:After drop space:'%' idx=30 ') '
                (check_literal)   '%' != ')'
                (check_literal) check_literal: ret0

                (check_literal) check_literal:lit=' "' idx=30 ') '
                (check_literal) dropping space
                (check_literal) check_literal:After drop space:'"' idx=30 ') '
                (check_literal)   '"' != ')'
                (check_literal) check_literal: ret0

                (check_number) check_number:

                 (check_float) check_float:
                 (isfloatdigit) isfloatdigit:
                 (check_float) check_float: ret0

                 (check_integer) check_integer: ') '
                 (check_integer) check_integer:ret0
                (check_number) check_number: ret0

                (check_variable) check_variable:

                 (check_vname) check_vname ') ':
                 (check_vname) check_vname ret0 ') ':
                (check_variable) check_variable:ret0 
               (check_atom) check_atom:ret1

               (check_sub_expr) check_sub_expr:

                (check_literal) check_literal:lit=' (' idx=30 ') '
                (check_literal) dropping space
                (check_literal) check_literal:After drop space:'(' idx=30 ') '
                (check_literal)   '(' != ')'
                (check_literal) check_literal: ret0
               (check_sub_expr) check_sub_expr: ret0
              (check_eitem) check_eitem:ret0
             (scan_expression) scan_expression: ret1 ') ' commas:1

             (scan_literal) scan_literal:lit=' )' ') '
             (scan_literal) scan_literal:After drop space:') '
             (scan_literal) scan_literal:while loop:) 
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
             (op_stack_print) 
------------------
             (op_stack_print) 
Operator Stack     (4)

             (op_stack_print) 
000: PRINT type:17
             (op_stack_print) 
001: ( type:16
             (op_stack_print) 
002: REPT$ type:1
             (op_stack_print) 
003: ( type:16
             (op_stack_print) 
------------------

(  output_sub_end)
             (token_is_function) 
token_is_function:
             (token_is_function) 
token_is_function:( is not function
(  output_sub_end)
             (scan_literal) scan_literal:ret1
   Frst:0 T:')' exptype:U
Pop 4
Pop '('
            (op_stack_print) 
------------------
            (op_stack_print) 
Operator Stack     (3)

            (op_stack_print) 
000: PRINT type:17
            (op_stack_print) 
001: ( type:16
            (op_stack_print) 
002: REPT$ type:1
            (op_stack_print) 
------------------

(  output_sub_end)
            (token_is_function) 
token_is_function:
            (token_is_function) REPT$ is function
Pop 5
Pop 'REPT$'
            (op_stack_print) 
------------------
            (op_stack_print) 
Operator Stack     (2)

            (op_stack_print) 
000: PRINT type:17
            (op_stack_print) 
001: ( type:16
            (op_stack_print) 
------------------

( output_function) [U,(U U )] f f REPT$
(  output_sub_end)
            (scan_sub_expr) scan_sub_expr:ret1
           (scan_expression) n commas now:0

            (check_eitem) check_eitem: ' '

             (check_operator) check_operator:  

              (check_literal) check_literal:lit=' ,' idx=32 ''
              (check_literal) dropping space
              (check_literal) check_literal:After drop space:',' idx=32 ''
              (check_literal) check_literal  ret0 Empty test string
             (check_operator) ret0:is comma: 0

             (check_function) check_function: ''
             (check_function) check_function: ret0

             (check_atom) check_atom:

              (check_literal) check_literal:lit=' %' idx=31 ' '
              (check_literal) dropping space
              (check_literal) check_literal:After drop space:'%' idx=32 ''
              (check_literal) check_literal  ret0 Empty test string

              (check_literal) check_literal:lit=' "' idx=31 ' '
              (check_literal) dropping space
              (check_literal) check_literal:After drop space:'"' idx=32 ''
              (check_literal) check_literal  ret0 Empty test string

              (check_number) check_number:

               (check_float) check_float:
               (isfloatdigit) isfloatdigit:
               (check_float) check_float: ret0

               (check_integer) check_integer: ''
               (check_integer) check_integer:ret0
              (check_number) check_number: ret0

              (check_variable) check_variable:

               (check_vname) check_vname '':
               (check_vname) check_vname ret0 '':
              (check_variable) check_variable:ret0 
             (check_atom) check_atom:ret1

             (check_sub_expr) check_sub_expr:

              (check_literal) check_literal:lit=' (' idx=31 ' '
              (check_literal) dropping space
              (check_literal) check_literal:After drop space:'(' idx=32 ''
              (check_literal) check_literal  ret0 Empty test string
             (check_sub_expr) check_sub_expr: ret0
            (check_eitem) check_eitem:ret0
           (scan_expression) scan_expression: ret1 ' ' commas:0
          (scan_command) scan_command: ret1 =>'PRINT'
         (scan_command) 
ENDEXP
   Frst:0 T:')' exptype:U
Pop 4
Pop '('
         (op_stack_print) 
------------------
         (op_stack_print) 
Operator Stack     (1)

         (op_stack_print) 
000: PRINT type:17
         (op_stack_print) 
------------------

(  output_sub_end)
         (token_is_function) 
token_is_function:
         (token_is_function) PRINT is function
Pop 5
Pop 'PRINT'
         (op_stack_print) 
------------------
         (op_stack_print) 
Operator Stack     (0)

         (op_stack_print) 
------------------

( output_function) [U,(U )] v v PRINT
(  output_sub_end)
Finalise stack
         (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '158' nidx:26  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     s rq:s 'CHR$' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? '' nidx:-1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '80' nidx:30  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     f rq:f 'REPT$' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
 BE:

Type Check Stack (0)

 BE:

Type Check Stack (0)

 BE:

Type Check Stack (0)

 BE:

Type Check Stack (0)

 BE:

Type Check Stack (0)

 BE:158
type_check_stack_push: '158'
         (type_check_stack_print) 
------------------
         (type_check_stack_print) 
Type Check Stack     (1)

         (type_check_stack_print) 
000: '158' type:0
         (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '158' type:i (0)
 BE:

Type Check Stack (1)

000: '158' type:i (0)
 BE:

Type Check Stack (1)

000: '158' type:i (0)
 BE:

Type Check Stack (1)

000: '158' type:i (0)
 BE:CHR$
FN: 1 args
         (function_return_type) 
function_return_type: 'CHR$' =>s
         (function_return_type) 
function_return_type: 'CHR$' =>2
ret_type;2 s
typecheck_expression:Ret type of CHR$ : s
type_check_stack_pop: '158'
         (type_check_stack_print) 
------------------
         (type_check_stack_print) 
Type Check Stack     (0)

         (type_check_stack_print) 
------------------

FN ARG 0 ri 158 0(i)  Arg ok
type_check_stack_push: '000'
         (type_check_stack_print) 
------------------
         (type_check_stack_print) 
Type Check Stack     (1)

         (type_check_stack_print) 
000: '000' type:2
         (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:s (2)
 BE:

Type Check Stack (1)

000: '000' type:s (2)
 BE:

Type Check Stack (1)

000: '000' type:s (2)
 BE:80
type_check_stack_push: '80'
         (type_check_stack_print) 
------------------
         (type_check_stack_print) 
Type Check Stack     (2)

         (type_check_stack_print) 
000: '000' type:2
         (type_check_stack_print) 
001: '80' type:0
         (type_check_stack_print) 
------------------


Type Check Stack (2)

000: '000' type:s (2)
001: '80' type:i (0)
 BE:

Type Check Stack (2)

000: '000' type:s (2)
001: '80' type:i (0)
 BE:

Type Check Stack (2)

000: '000' type:s (2)
001: '80' type:i (0)
 BE:

Type Check Stack (2)

000: '000' type:s (2)
001: '80' type:i (0)
 BE:REPT$
FN: 2 args
         (function_return_type) 
function_return_type: 'REPT$' =>f
         (function_return_type) 
function_return_type: 'REPT$' =>1
ret_type;1 f
typecheck_expression:Ret type of REPT$ : f
type_check_stack_pop: '80'
         (type_check_stack_print) 
------------------
         (type_check_stack_print) 
Type Check Stack     (1)

         (type_check_stack_print) 
000: '000' type:2
         (type_check_stack_print) 
------------------

FN ARG 1 ri 80 0(i)  Arg ok
type_check_stack_pop: '000'
         (type_check_stack_print) 
------------------
         (type_check_stack_print) 
Type Check Stack     (0)

         (type_check_stack_print) 
------------------

FN ARG 0 ri 000 2(s)  Arg not OK
type_check_stack_push: '000'
         (type_check_stack_print) 
------------------
         (type_check_stack_print) 
Type Check Stack     (1)

         (type_check_stack_print) 
000: '000' type:1
         (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:f (1)
 BE:

Type Check Stack (1)

000: '000' type:f (1)
 BE:

Type Check Stack (1)

000: '000' type:f (1)
 BE:PRINT
FN: 1 args
         (function_return_type) 
function_return_type: 'PRINT' =>v
         (function_return_type) 
function_return_type: 'PRINT' =>17
ret_type;17 v
typecheck_expression:Ret type of PRINT : v
type_check_stack_pop: '000'
         (type_check_stack_print) 
------------------
         (type_check_stack_print) 
Type Check Stack     (0)

         (type_check_stack_print) 
------------------

FN ARG 0 ri 000 1(f)  Arg not OK
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i '158'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_FUNCTION     s rq:s 'CHR$'  0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N12 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_INTEGER      i rq:i '80'  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N15 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N16 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N17 EXP_BUFF_ID_FUNCTION     f rq:f 'REPT$'  0:
(dump_exp_buffer2) N18 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N19 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
 Insert after 17 exp_buffer2_i:19
   Found at i:16
   Copied 18 to 19:
   Copied 17 to 18:
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i '158'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_FUNCTION     s rq:s 'CHR$'  0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N12 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_INTEGER      i rq:i '80'  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N15 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N16 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N17 EXP_BUFF_ID_FUNCTION     f rq:f 'REPT$'  0:
(dump_exp_buffer2) N21 EXP_BUFF_ID_AUTOCON      v rq:v 'autocon f->i'  0:
(dump_exp_buffer2) N18 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N19 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
type_check_stack_push: '000'
         (type_check_stack_print) 
------------------
         (type_check_stack_print) 
Type Check Stack     (1)

         (type_check_stack_print) 
000: '000' type:17
         (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '158' nidx:26  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     s rq:s 'CHR$' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? '' nidx:-1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '80' nidx:30  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     f rq:f 'REPT$' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i '158'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_FUNCTION     s rq:s 'CHR$'  0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N12 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_INTEGER      i rq:i '80'  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N15 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N16 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N17 EXP_BUFF_ID_FUNCTION     f rq:f 'REPT$'  0:
(dump_exp_buffer2) N21 EXP_BUFF_ID_AUTOCON      v rq:v 'autocon f->i'  0:
(dump_exp_buffer2) N18 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N19 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N20 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
(dump_exp_buffer2) N22 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
         (process_expression_types) 
==INFIX==

infix_stack_push: '158'
infix_stack_pop: '158'
infix_stack_push: 'CHR$(158 )'
infix_stack_push: '80'
infix_stack_pop: '80'
infix_stack_pop: 'CHR$(158 )'
infix_stack_push: 'REPT$(CHR$(158 ) 80 )'
infix_stack_pop: 'REPT$(CHR$(158 ) 80 )'
infix_stack_push: 'PRINT(REPT$(CHR$(158 ) 80 ) )'
infix_stack_pop: 'PRINT(REPT$(CHR$(158 ) 80 ) )'
         (process_expression_types) ==PRINT(REPT$(CHR$(158 ) 80 ) )==
         (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N4 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_INTEGER      i rq:i 158  0:
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N8 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N9 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N10 EXP_BUFF_ID_FUNCTION     s rq:s CHR$  0:
(    output_qcode) N11 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N12 EXP_BUFF_ID_SUB_START    U rq:?   0:
(    output_qcode) N13 EXP_BUFF_ID_INTEGER      i rq:i 80  0:
(    output_qcode) N14 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N15 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N16 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N17 EXP_BUFF_ID_FUNCTION     f rq:f REPT$  0:
(    output_qcode) N21 EXP_BUFF_ID_AUTOCON      v rq:v autocon f->i  0:
(    output_qcode) N18 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N19 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N20 EXP_BUFF_ID_FUNCTION     v rq:v PRINT  0:
(    output_qcode) N22 EXP_BUFF_ID_SUB_END      U rq:i   0:

          (check_literal) check_literal:lit=':' idx=32 ''
          (check_literal) check_literal:After drop space:':' idx=32 ''
          (check_literal) check_literal  ret0 Empty test string
         (translate_file) 
cline scanned OK
*****************************
** AT x%,y% :PRINT CHR$(7) **
*****************************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'AT x%,y% :PRINT CHR$(7) ':
     (check_vname) check_vname ret1 ' x%,y% :PRINT CHR$(7) ':
    (check_variable) check_variable: ' x%,y% :PRINT CHR$(7) '
    (check_variable) check_variable: Ary test ' x%,y% :PRINT CHR$(7) '

     (check_literal) check_literal:lit='(' idx=3 ' x%,y% :PRINT CHR$(7) '
     (check_literal) check_literal:After drop space:'(' idx=3 ' x%,y% :PRINT CHR$(7) '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=3 ' x%,y% :PRINT CHR$(7) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=4 'x%,y% :PRINT CHR$(7) '
   (check_literal)   '=' != 'x'
   (check_literal) check_literal: ret0
  (check_assignment) check_assignment:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) check_textlabel: 'AT x%,y% :PRINT CHR$(7) '
   (check_textlabel) check_textlabel:ret0
  (check_proc_call) check_proc_call:ret0

  (check_command) check_command:
  (check_command) check_command: ret1 found=> 'AT'
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=22, ' x%,y% :PRINT CHR$(7) '
========================================================
 AT x%,y% :PRINT CHR$(7) 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'AT x%,y% :PRINT CHR$(7) ':
    (check_vname) check_vname ret1 ' x%,y% :PRINT CHR$(7) ':
   (check_variable) check_variable: ' x%,y% :PRINT CHR$(7) '
   (check_variable) check_variable: Ary test ' x%,y% :PRINT CHR$(7) '

    (check_literal) check_literal:lit='(' idx=3 ' x%,y% :PRINT CHR$(7) '
    (check_literal) check_literal:After drop space:'(' idx=3 ' x%,y% :PRINT CHR$(7) '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=3 ' x%,y% :PRINT CHR$(7) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=4 'x%,y% :PRINT CHR$(7) '
  (check_literal)   '=' != 'x'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'AT x%,y% :PRINT CHR$(7) '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'AT'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'AT' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) AT is function
 (function_return_type) 
function_return_type: 'AT' =>v
 (function_return_type) 
function_return_type: 'AT' =>17
process_token: 'AT' t=>v
 Push:'AT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: AT type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: AT type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' x%,y% :PRINT CHR$(7) '

   (check_eitem) check_eitem: 'x%,y% :PRINT CHR$(7) '

    (check_operator) check_operator: x%,y% :PRINT CHR$(7) 

     (check_literal) check_literal:lit=' ,' idx=4 'x%,y% :PRINT CHR$(7) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=4 'x%,y% :PRINT CHR$(7) '
     (check_literal)   ',' != 'x'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'x%,y% :PRINT CHR$(7) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=4 'x%,y% :PRINT CHR$(7) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=4 'x%,y% :PRINT CHR$(7) '
     (check_literal)   '%' != 'x'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=4 'x%,y% :PRINT CHR$(7) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=4 'x%,y% :PRINT CHR$(7) '
     (check_literal)   '"' != 'x'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'x%,y% :PRINT CHR$(7) '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'x%,y% :PRINT CHR$(7) ':
      (check_vname) check_vname ret1 '%,y% :PRINT CHR$(7) ':
     (check_variable) check_variable: '%,y% :PRINT CHR$(7) '
     (check_variable) check_variable: Ary test ',y% :PRINT CHR$(7) '

      (check_literal) check_literal:lit='(' idx=6 ',y% :PRINT CHR$(7) '
      (check_literal) check_literal:After drop space:'(' idx=6 ',y% :PRINT CHR$(7) '
      (check_literal)   '(' != ','
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator: x%,y% :PRINT CHR$(7) 

    (check_literal) check_literal:lit=' ,' idx=4 'x%,y% :PRINT CHR$(7) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=4 'x%,y% :PRINT CHR$(7) '
    (check_literal)   ',' != 'x'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'x%,y% :PRINT CHR$(7) '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=4 'x%,y% :PRINT CHR$(7) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=4 'x%,y% :PRINT CHR$(7) '
    (check_literal)   '%' != 'x'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=4 'x%,y% :PRINT CHR$(7) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=4 'x%,y% :PRINT CHR$(7) '
    (check_literal)   '"' != 'x'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'x%,y% :PRINT CHR$(7) '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'x%,y% :PRINT CHR$(7) ':
     (check_vname) check_vname ret1 '%,y% :PRINT CHR$(7) ':
    (check_variable) check_variable: '%,y% :PRINT CHR$(7) '
    (check_variable) check_variable: Ary test ',y% :PRINT CHR$(7) '

     (check_literal) check_literal:lit='(' idx=6 ',y% :PRINT CHR$(7) '
     (check_literal) check_literal:After drop space:'(' idx=6 ',y% :PRINT CHR$(7) '
     (check_literal)   '(' != ','
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1

  (scan_atom) scan_atom:

   (check_literal) check_literal:lit=' %' idx=4 'x%,y% :PRINT CHR$(7) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=4 'x%,y% :PRINT CHR$(7) '
   (check_literal)   '%' != 'x'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=4 'x%,y% :PRINT CHR$(7) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=4 'x%,y% :PRINT CHR$(7) '
   (check_literal)   '"' != 'x'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'x%,y% :PRINT CHR$(7) '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'x%,y% :PRINT CHR$(7) ':
    (check_vname) check_vname ret1 '%,y% :PRINT CHR$(7) ':
   (check_variable) check_variable: '%,y% :PRINT CHR$(7) '
   (check_variable) check_variable: Ary test ',y% :PRINT CHR$(7) '

    (check_literal) check_literal:lit='(' idx=6 ',y% :PRINT CHR$(7) '
    (check_literal) check_literal:After drop space:'(' idx=6 ',y% :PRINT CHR$(7) '
    (check_literal)   '(' != ','
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'x%,y% :PRINT CHR$(7) '
   (scan_vname) scan_vname: ret1 'x'
  (scan_variable) scan_variable: '%,y% :PRINT CHR$(7) ' vname='x'
  (scan_variable) scan_variable: Ary test ',y% :PRINT CHR$(7) '

   (check_literal) check_literal:lit='(' idx=6 ',y% :PRINT CHR$(7) '
   (check_literal) check_literal:After drop space:'(' idx=6 ',y% :PRINT CHR$(7) '
   (check_literal)   '(' != ','
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='x%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'x%' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:x% is not function
token_is_variable: tok:'x%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:x% is not function
 (init_get_name) 
init_get_name:'x%'
 (init_get_name) 
init_get_name:'x%'
 (get_name) 
get_name:gn:'x%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,(U )] i i x%
 (print_var_info) 
VAR INFO: '                x%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
 (scan_atom) scan_atom:ret1
(scan_expression) n commas now:0

 (check_eitem) check_eitem: ',y% :PRINT CHR$(7) '

  (check_operator) check_operator: ,y% :PRINT CHR$(7) 

   (check_literal) check_literal:lit=' ,' idx=6 ',y% :PRINT CHR$(7) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=6 ',y% :PRINT CHR$(7) '
   (check_literal) check_literal:After while():y% :PRINT CHR$(7) 
   (check_literal) check_literal:ret1 
  (check_operator) ret1:is comma: 0
 (check_eitem) check_eitem:ret1 comma:1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: ,y% :PRINT CHR$(7) 

   (check_literal) check_literal:lit=' ,' idx=6 ',y% :PRINT CHR$(7) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=6 ',y% :PRINT CHR$(7) '
   (check_literal) check_literal:After while():y% :PRINT CHR$(7) 
   (check_literal) check_literal:ret1 
  (check_operator) ret1:is comma: 0

  (scan_operator) scan_operator: ',y% :PRINT CHR$(7) '

   (check_literal) check_literal:lit=' ,' idx=6 ',y% :PRINT CHR$(7) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=6 ',y% :PRINT CHR$(7) '
   (check_literal) check_literal:After while():y% :PRINT CHR$(7) 
   (check_literal) check_literal:ret1 

   (scan_literal) scan_literal:lit=' ,' ',y% :PRINT CHR$(7) '
   (scan_literal) scan_literal:After drop space:',y% :PRINT CHR$(7) '
   (scan_literal) scan_literal:while loop:,y% :PRINT CHR$(7) 
   Frst:0 T:',' exptype:i
(output_sub_start)
   (scan_literal) scan_literal:ret1
  (scan_operator) ret1:is comma: 1
 (scan_eitem) Is comma;1
 (scan_expression) n commas now:1

  (check_eitem) check_eitem: 'y% :PRINT CHR$(7) '

   (check_operator) check_operator: y% :PRINT CHR$(7) 

    (check_literal) check_literal:lit=' ,' idx=7 'y% :PRINT CHR$(7) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=7 'y% :PRINT CHR$(7) '
    (check_literal)   ',' != 'y'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'y% :PRINT CHR$(7) '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=7 'y% :PRINT CHR$(7) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=7 'y% :PRINT CHR$(7) '
    (check_literal)   '%' != 'y'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=7 'y% :PRINT CHR$(7) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=7 'y% :PRINT CHR$(7) '
    (check_literal)   '"' != 'y'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'y% :PRINT CHR$(7) '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'y% :PRINT CHR$(7) ':
     (check_vname) check_vname ret1 '% :PRINT CHR$(7) ':
    (check_variable) check_variable: '% :PRINT CHR$(7) '
    (check_variable) check_variable: Ary test ' :PRINT CHR$(7) '

     (check_literal) check_literal:lit='(' idx=9 ' :PRINT CHR$(7) '
     (check_literal) check_literal:After drop space:'(' idx=9 ' :PRINT CHR$(7) '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1
 (check_eitem) check_eitem:ret1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: y% :PRINT CHR$(7) 

   (check_literal) check_literal:lit=' ,' idx=7 'y% :PRINT CHR$(7) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=7 'y% :PRINT CHR$(7) '
   (check_literal)   ',' != 'y'
   (check_literal) check_literal: ret0
  (check_operator) ret0:is comma: 0

  (check_function) check_function: 'y% :PRINT CHR$(7) '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=7 'y% :PRINT CHR$(7) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=7 'y% :PRINT CHR$(7) '
   (check_literal)   '%' != 'y'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=7 'y% :PRINT CHR$(7) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=7 'y% :PRINT CHR$(7) '
   (check_literal)   '"' != 'y'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'y% :PRINT CHR$(7) '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'y% :PRINT CHR$(7) ':
    (check_vname) check_vname ret1 '% :PRINT CHR$(7) ':
   (check_variable) check_variable: '% :PRINT CHR$(7) '
   (check_variable) check_variable: Ary test ' :PRINT CHR$(7) '

    (check_literal) check_literal:lit='(' idx=9 ' :PRINT CHR$(7) '
    (check_literal) check_literal:After drop space:'(' idx=9 ' :PRINT CHR$(7) '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) check_atom:ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=7 'y% :PRINT CHR$(7) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=7 'y% :PRINT CHR$(7) '
  (check_literal)   '%' != 'y'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=7 'y% :PRINT CHR$(7) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=7 'y% :PRINT CHR$(7) '
  (check_literal)   '"' != 'y'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) check_float: ret0

   (check_integer) check_integer: 'y% :PRINT CHR$(7) '
   (check_integer) check_integer:ret0
  (check_number) check_number: ret0

  (check_variable) check_variable:

   (check_vname) check_vname 'y% :PRINT CHR$(7) ':
   (check_vname) check_vname ret1 '% :PRINT CHR$(7) ':
  (check_variable) check_variable: '% :PRINT CHR$(7) '
  (check_variable) check_variable: Ary test ' :PRINT CHR$(7) '

   (check_literal) check_literal:lit='(' idx=9 ' :PRINT CHR$(7) '
   (check_literal) check_literal:After drop space:'(' idx=9 ' :PRINT CHR$(7) '
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) scan_variable:

  (scan_vname) scan_vname: 'y% :PRINT CHR$(7) '
  (scan_vname) scan_vname: ret1 'y'
 (scan_variable) scan_variable: '% :PRINT CHR$(7) ' vname='y'
 (scan_variable) scan_variable: Ary test ' :PRINT CHR$(7) '

  (check_literal) check_literal:lit='(' idx=9 ' :PRINT CHR$(7) '
  (check_literal) check_literal:After drop space:'(' idx=9 ' :PRINT CHR$(7) '
  (check_literal)   '(' != ' '
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='y%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'y%' exptype:U
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:y% is not function
token_is_variable: tok:'y%'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:y% is not function
(init_get_name) 
init_get_name:'y%'
(init_get_name) 
init_get_name:'y%'
(get_name) 
get_name:gn:'y%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,(U )] i i y%
(print_var_info) 
VAR INFO: '                y%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
(scan_atom) scan_atom:ret1
(scan_expression) n commas now:1

 (check_eitem) check_eitem: ' :PRINT CHR$(7) '

  (check_operator) check_operator:  :PRINT CHR$(7) 

   (check_literal) check_literal:lit=' ,' idx=10 ':PRINT CHR$(7) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=10 ':PRINT CHR$(7) '
   (check_literal)   ',' != ':'
   (check_literal) check_literal: ret0
  (check_operator) ret0:is comma: 0

  (check_function) check_function: ':PRINT CHR$(7) '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=9 ' :PRINT CHR$(7) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=10 ':PRINT CHR$(7) '
   (check_literal)   '%' != ':'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=9 ' :PRINT CHR$(7) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=10 ':PRINT CHR$(7) '
   (check_literal)   '"' != ':'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: ':PRINT CHR$(7) '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname ':PRINT CHR$(7) ':
    (check_vname) check_vname ret0 ':PRINT CHR$(7) ':
   (check_variable) check_variable:ret0 
  (check_atom) check_atom:ret1

  (check_sub_expr) check_sub_expr:

   (check_literal) check_literal:lit=' (' idx=9 ' :PRINT CHR$(7) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'(' idx=10 ':PRINT CHR$(7) '
   (check_literal)   '(' != ':'
   (check_literal) check_literal: ret0
  (check_sub_expr) check_sub_expr: ret0
 (check_eitem) check_eitem:ret0
(scan_expression) scan_expression: ret1 ' :PRINT CHR$(7) ' commas:1
(scan_command) scan_command: ret1 =>'AT'
(scan_command) 
ENDEXP
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: AT type:17
(op_stack_print) 
------------------

(  output_sub_end)
(token_is_function) 
token_is_function:
(token_is_function) AT is function
Pop 5
Pop 'AT'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_function) [i,(U )] v v AT
(  output_sub_end)
Finalise stack
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'x%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? '' nidx:-1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'y%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'AT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
 BE:

Type Check Stack (0)

 BE:x%
type_check_stack_push: 'x%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'x%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'x%' type:i (0)
 BE:

Type Check Stack (1)

000: 'x%' type:i (0)
 BE:y%
type_check_stack_push: 'y%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'x%' type:0
(type_check_stack_print) 
001: 'y%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'x%' type:i (0)
001: 'y%' type:i (0)
 BE:

Type Check Stack (2)

000: 'x%' type:i (0)
001: 'y%' type:i (0)
 BE:AT
FN: 2 args
(function_return_type) 
function_return_type: 'AT' =>v
(function_return_type) 
function_return_type: 'AT' =>17
ret_type;17 v
typecheck_expression:Ret type of AT : v
type_check_stack_pop: 'y%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'x%' type:0
(type_check_stack_print) 
------------------

FN ARG 1 ri y% 0(i)  Arg ok
type_check_stack_pop: 'x%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (0)

(type_check_stack_print) 
------------------

FN ARG 0 ri x% 0(i)  Arg ok
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:17
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'x%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? '' nidx:-1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'y%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'AT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'x%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     i rq:i 'y%'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_FUNCTION     v rq:v 'AT'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
(process_expression_types) 
==INFIX==

Var: x% ary:0 NumIdx:0
infix_stack_push: 'x%'
Var: y% ary:0 NumIdx:0
infix_stack_push: 'y%'
infix_stack_pop: 'y%'
infix_stack_pop: 'x%'
infix_stack_push: 'AT(x% y% )'
infix_stack_pop: 'AT(x% y% )'
(process_expression_types) ==AT(x% y% )==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     i rq:i x%  0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_START    U rq:?   0:
(    output_qcode) N4 EXP_BUFF_ID_VARIABLE     i rq:i y%  0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_FUNCTION     v rq:v AT  0:
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:i   0:

 (check_literal) check_literal:lit=':' idx=10 ':PRINT CHR$(7) '
 (check_literal) check_literal:After drop space:':' idx=10 ':PRINT CHR$(7) '
 (check_literal) check_literal:After while():PRINT CHR$(7) 
 (check_literal) check_literal:ret1 

 (scan_literal) scan_literal:lit=':' 'PRINT CHR$(7) '
 (scan_literal) scan_literal:After drop space:'PRINT CHR$(7) '
 (scan_literal) scan_literal:while loop:PRINT CHR$(7) 
 (scan_literal) scan_literal:ret1

 (check_line) check_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'PRINT CHR$(7) ':
    (check_vname) check_vname ret1 ' CHR$(7) ':
   (check_variable) check_variable: ' CHR$(7) '
   (check_variable) check_variable: Ary test ' CHR$(7) '

    (check_literal) check_literal:lit='(' idx=16 ' CHR$(7) '
    (check_literal) check_literal:After drop space:'(' idx=16 ' CHR$(7) '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=16 ' CHR$(7) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=17 'CHR$(7) '
  (check_literal)   '=' != 'C'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'PRINT CHR$(7) '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'PRINT'
(check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=9, ' CHR$(7) '
========================================================
 AT x%,y% :PRINT CHR$(7) 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'PRINT CHR$(7) ':
    (check_vname) check_vname ret1 ' CHR$(7) ':
   (check_variable) check_variable: ' CHR$(7) '
   (check_variable) check_variable: Ary test ' CHR$(7) '

    (check_literal) check_literal:lit='(' idx=16 ' CHR$(7) '
    (check_literal) check_literal:After drop space:'(' idx=16 ' CHR$(7) '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=16 ' CHR$(7) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=17 'CHR$(7) '
  (check_literal)   '=' != 'C'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'PRINT CHR$(7) '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'PRINT'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'PRINT' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) PRINT is function
 (function_return_type) 
function_return_type: 'PRINT' =>v
 (function_return_type) 
function_return_type: 'PRINT' =>17
process_token: 'PRINT' t=>v
 Push:'PRINT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' CHR$(7) '

   (check_eitem) check_eitem: 'CHR$(7) '

    (check_operator) check_operator: CHR$(7) 

     (check_literal) check_literal:lit=' ,' idx=17 'CHR$(7) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=17 'CHR$(7) '
     (check_literal)   ',' != 'C'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'CHR$(7) '
    (check_function) check_function: ret1 Found fn=>'CHR$'
   (check_eitem) check_eitem:ret1

   (scan_eitem) scan_eitem:

    (check_operator) check_operator: CHR$(7) 

     (check_literal) check_literal:lit=' ,' idx=17 'CHR$(7) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=17 'CHR$(7) '
     (check_literal)   ',' != 'C'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'CHR$(7) '
    (check_function) check_function: ret1 Found fn=>'CHR$'

    (scan_function) scan_function:
   Frst:0 T:'CHR$' exptype:U
    (token_is_function) 
token_is_function:
    (token_is_function) CHR$ is function
    (function_return_type) 
function_return_type: 'CHR$' =>s
    (function_return_type) 
function_return_type: 'CHR$' =>2
process_token: 'CHR$' t=>s
 Push:'CHR$'
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (3)

    (op_stack_print) 
000: PRINT type:17
    (op_stack_print) 
001: ( type:16
    (op_stack_print) 
002: CHR$ type:2
    (op_stack_print) 
------------------

    (scan_expression) n commas now:0

     (check_eitem) check_eitem: '(7) '

      (check_operator) check_operator: (7) 

       (check_literal) check_literal:lit=' ,' idx=21 '(7) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=21 '(7) '
       (check_literal)   ',' != '('
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: '(7) '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=21 '(7) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=21 '(7) '
       (check_literal)   '%' != '('
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=21 '(7) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=21 '(7) '
       (check_literal)   '"' != '('
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '(7) '
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname '(7) ':
        (check_vname) check_vname ret0 '(7) ':
       (check_variable) check_variable:ret0 
      (check_atom) check_atom:ret1

      (check_sub_expr) check_sub_expr:

       (check_literal) check_literal:lit=' (' idx=21 '(7) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'(' idx=21 '(7) '
       (check_literal) check_literal:After while():7) 
       (check_literal) check_literal:ret1 
      (check_sub_expr) check_sub_expr: ret1
     (check_eitem) check_eitem:ret1

     (scan_eitem) scan_eitem:

      (check_operator) check_operator: (7) 

       (check_literal) check_literal:lit=' ,' idx=21 '(7) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=21 '(7) '
       (check_literal)   ',' != '('
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: '(7) '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=21 '(7) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=21 '(7) '
       (check_literal)   '%' != '('
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=21 '(7) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=21 '(7) '
       (check_literal)   '"' != '('
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '(7) '
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname '(7) ':
        (check_vname) check_vname ret0 '(7) ':
       (check_variable) check_variable:ret0 
      (check_atom) check_atom:ret1

      (check_sub_expr) check_sub_expr:

       (check_literal) check_literal:lit=' (' idx=21 '(7) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'(' idx=21 '(7) '
       (check_literal) check_literal:After while():7) 
       (check_literal) check_literal:ret1 
      (check_sub_expr) check_sub_expr: ret1

      (scan_sub_expr) scan_sub_expr:

       (scan_literal) scan_literal:lit=' (' '(7) '
       (scan_literal) scan_literal:After drop space:'(7) '
       (scan_literal) scan_literal:while loop:(7) 
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (4)

       (op_stack_print) 
000: PRINT type:17
       (op_stack_print) 
001: ( type:16
       (op_stack_print) 
002: CHR$ type:2
       (op_stack_print) 
003: ( type:16
       (op_stack_print) 
------------------

       (scan_literal) scan_literal:ret1
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (5)

      (op_stack_print) 
000: PRINT type:17
      (op_stack_print) 
001: ( type:16
      (op_stack_print) 
002: CHR$ type:2
      (op_stack_print) 
003: ( type:16
      (op_stack_print) 
004: ( type:16
      (op_stack_print) 
------------------


       (scan_expression) scan_expression: '7) '

        (check_eitem) check_eitem: '7) '

         (check_operator) check_operator: 7) 

          (check_literal) check_literal:lit=' ,' idx=22 '7) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:',' idx=22 '7) '
          (check_literal)   ',' != '7'
          (check_literal) check_literal: ret0
         (check_operator) ret0:is comma: 0

         (check_function) check_function: '7) '
         (check_function) check_function: ret0

         (check_atom) check_atom:

          (check_literal) check_literal:lit=' %' idx=22 '7) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=22 '7) '
          (check_literal)   '%' != '7'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=22 '7) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=22 '7) '
          (check_literal)   '"' != '7'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '7) '
           (check_integer) check_integer:ret1
          (check_number) check_number: ret1
         (check_atom) check_atom:ret1
        (check_eitem) check_eitem:ret1

        (scan_eitem) scan_eitem:

         (check_operator) check_operator: 7) 

          (check_literal) check_literal:lit=' ,' idx=22 '7) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:',' idx=22 '7) '
          (check_literal)   ',' != '7'
          (check_literal) check_literal: ret0
         (check_operator) ret0:is comma: 0

         (check_function) check_function: '7) '
         (check_function) check_function: ret0

         (check_atom) check_atom:

          (check_literal) check_literal:lit=' %' idx=22 '7) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=22 '7) '
          (check_literal)   '%' != '7'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=22 '7) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=22 '7) '
          (check_literal)   '"' != '7'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '7) '
           (check_integer) check_integer:ret1
          (check_number) check_number: ret1
         (check_atom) check_atom:ret1

         (scan_atom) scan_atom:

          (check_literal) check_literal:lit=' %' idx=22 '7) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=22 '7) '
          (check_literal)   '%' != '7'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=22 '7) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=22 '7) '
          (check_literal)   '"' != '7'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '7) '
           (check_integer) check_integer:ret1
          (check_number) check_number: ret1

          (scan_number) scan_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '7) '
           (check_integer) check_integer:ret1

           (scan_integer) scan_integer:
           (scan_integer) scan_integer:ret1
   Frst:0 T:'7' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U U U )] i i 7
          (scan_integer) scan_integer:ret1  7
         (scan_atom) scan_atom:ret1
        (scan_expression) n commas now:0

         (check_eitem) check_eitem: ') '

          (check_operator) check_operator: ) 

           (check_literal) check_literal:lit=' ,' idx=23 ') '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:',' idx=23 ') '
           (check_literal)   ',' != ')'
           (check_literal) check_literal: ret0
          (check_operator) ret0:is comma: 0

          (check_function) check_function: ') '
          (check_function) check_function: ret0

          (check_atom) check_atom:

           (check_literal) check_literal:lit=' %' idx=23 ') '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'%' idx=23 ') '
           (check_literal)   '%' != ')'
           (check_literal) check_literal: ret0

           (check_literal) check_literal:lit=' "' idx=23 ') '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'"' idx=23 ') '
           (check_literal)   '"' != ')'
           (check_literal) check_literal: ret0

           (check_number) check_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret0

            (check_integer) check_integer: ') '
            (check_integer) check_integer:ret0
           (check_number) check_number: ret0

           (check_variable) check_variable:

            (check_vname) check_vname ') ':
            (check_vname) check_vname ret0 ') ':
           (check_variable) check_variable:ret0 
          (check_atom) check_atom:ret1

          (check_sub_expr) check_sub_expr:

           (check_literal) check_literal:lit=' (' idx=23 ') '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'(' idx=23 ') '
           (check_literal)   '(' != ')'
           (check_literal) check_literal: ret0
          (check_sub_expr) check_sub_expr: ret0
         (check_eitem) check_eitem:ret0
        (scan_expression) scan_expression: ret1 ') ' commas:0

        (scan_literal) scan_literal:lit=' )' ') '
        (scan_literal) scan_literal:After drop space:') '
        (scan_literal) scan_literal:while loop:) 
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
        (op_stack_print) 
------------------
        (op_stack_print) 
Operator Stack     (4)

        (op_stack_print) 
000: PRINT type:17
        (op_stack_print) 
001: ( type:16
        (op_stack_print) 
002: CHR$ type:2
        (op_stack_print) 
003: ( type:16
        (op_stack_print) 
------------------

(  output_sub_end)
        (token_is_function) 
token_is_function:
        (token_is_function) 
token_is_function:( is not function
(  output_sub_end)
        (scan_literal) scan_literal:ret1
   Frst:0 T:')' exptype:U
Pop 4
Pop '('
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (3)

       (op_stack_print) 
000: PRINT type:17
       (op_stack_print) 
001: ( type:16
       (op_stack_print) 
002: CHR$ type:2
       (op_stack_print) 
------------------

(  output_sub_end)
       (token_is_function) 
token_is_function:
       (token_is_function) CHR$ is function
Pop 5
Pop 'CHR$'
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (2)

       (op_stack_print) 
000: PRINT type:17
       (op_stack_print) 
001: ( type:16
       (op_stack_print) 
------------------

( output_function) [U,(U U )] s s CHR$
(  output_sub_end)
       (scan_sub_expr) scan_sub_expr:ret1
      (scan_expression) n commas now:0

       (check_eitem) check_eitem: ' '

        (check_operator) check_operator:  

         (check_literal) check_literal:lit=' ,' idx=25 ''
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:',' idx=25 ''
         (check_literal) check_literal  ret0 Empty test string
        (check_operator) ret0:is comma: 0

        (check_function) check_function: ''
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=24 ' '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=25 ''
         (check_literal) check_literal  ret0 Empty test string

         (check_literal) check_literal:lit=' "' idx=24 ' '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=25 ''
         (check_literal) check_literal  ret0 Empty test string

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: ''
          (check_integer) check_integer:ret0
         (check_number) check_number: ret0

         (check_variable) check_variable:

          (check_vname) check_vname '':
          (check_vname) check_vname ret0 '':
         (check_variable) check_variable:ret0 
        (check_atom) check_atom:ret1

        (check_sub_expr) check_sub_expr:

         (check_literal) check_literal:lit=' (' idx=24 ' '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'(' idx=25 ''
         (check_literal) check_literal  ret0 Empty test string
        (check_sub_expr) check_sub_expr: ret0
       (check_eitem) check_eitem:ret0
      (scan_expression) scan_expression: ret1 ' ' commas:0
     (scan_command) scan_command: ret1 =>'PRINT'
    (scan_command) 
ENDEXP
   Frst:0 T:')' exptype:U
Pop 4
Pop '('
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (1)

    (op_stack_print) 
000: PRINT type:17
    (op_stack_print) 
------------------

(  output_sub_end)
    (token_is_function) 
token_is_function:
    (token_is_function) PRINT is function
Pop 5
Pop 'PRINT'
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (0)

    (op_stack_print) 
------------------

( output_function) [U,(U )] v v PRINT
(  output_sub_end)
Finalise stack
    (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '7' nidx:23  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     s rq:s 'CHR$' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
 BE:

Type Check Stack (0)

 BE:

Type Check Stack (0)

 BE:

Type Check Stack (0)

 BE:7
type_check_stack_push: '7'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (1)

    (type_check_stack_print) 
000: '7' type:0
    (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '7' type:i (0)
 BE:

Type Check Stack (1)

000: '7' type:i (0)
 BE:

Type Check Stack (1)

000: '7' type:i (0)
 BE:

Type Check Stack (1)

000: '7' type:i (0)
 BE:CHR$
FN: 1 args
    (function_return_type) 
function_return_type: 'CHR$' =>s
    (function_return_type) 
function_return_type: 'CHR$' =>2
ret_type;2 s
typecheck_expression:Ret type of CHR$ : s
type_check_stack_pop: '7'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (0)

    (type_check_stack_print) 
------------------

FN ARG 0 ri 7 0(i)  Arg ok
type_check_stack_push: '000'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (1)

    (type_check_stack_print) 
000: '000' type:2
    (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:s (2)
 BE:

Type Check Stack (1)

000: '000' type:s (2)
 BE:

Type Check Stack (1)

000: '000' type:s (2)
 BE:PRINT
FN: 1 args
    (function_return_type) 
function_return_type: 'PRINT' =>v
    (function_return_type) 
function_return_type: 'PRINT' =>17
ret_type;17 v
typecheck_expression:Ret type of PRINT : v
type_check_stack_pop: '000'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (0)

    (type_check_stack_print) 
------------------

FN ARG 0 ri 000 2(s)  Arg not OK
type_check_stack_push: '000'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (1)

    (type_check_stack_print) 
000: '000' type:17
    (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '7' nidx:23  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     s rq:s 'CHR$' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_INTEGER      i rq:i '7'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_FUNCTION     s rq:s 'CHR$'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
(dump_exp_buffer2) N12 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
    (process_expression_types) 
==INFIX==

infix_stack_push: '7'
infix_stack_pop: '7'
infix_stack_push: 'CHR$(7 )'
infix_stack_pop: 'CHR$(7 )'
infix_stack_push: 'PRINT(CHR$(7 ) )'
infix_stack_pop: 'PRINT(CHR$(7 ) )'
    (process_expression_types) ==PRINT(CHR$(7 ) )==
    (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N4 EXP_BUFF_ID_INTEGER      i rq:i 7  0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N8 EXP_BUFF_ID_FUNCTION     s rq:s CHR$  0:
(    output_qcode) N9 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N10 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N11 EXP_BUFF_ID_FUNCTION     v rq:v PRINT  0:
(    output_qcode) N12 EXP_BUFF_ID_SUB_END      U rq:i   0:

     (check_literal) check_literal:lit=':' idx=25 ''
     (check_literal) check_literal:After drop space:':' idx=25 ''
     (check_literal) check_literal  ret0 Empty test string
    (translate_file) 
cline scanned OK
**********************
** a%=1 :c%=1+RND*4 **
**********************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'a%=1 :c%=1+RND*4 ':
     (check_vname) check_vname ret1 '%=1 :c%=1+RND*4 ':
    (check_variable) check_variable: '%=1 :c%=1+RND*4 '
    (check_variable) check_variable: Ary test '=1 :c%=1+RND*4 '

     (check_literal) check_literal:lit='(' idx=3 '=1 :c%=1+RND*4 '
     (check_literal) check_literal:After drop space:'(' idx=3 '=1 :c%=1+RND*4 '
     (check_literal)   '(' != '='
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=3 '=1 :c%=1+RND*4 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=3 '=1 :c%=1+RND*4 '
   (check_literal) check_literal:After while():1 :c%=1+RND*4 
   (check_literal) check_literal:ret1 

   (check_expression) check_expression: '1 :c%=1+RND*4 '

    (check_eitem) check_eitem: '1 :c%=1+RND*4 '

     (check_operator) check_operator: 1 :c%=1+RND*4 

      (check_literal) check_literal:lit=' ,' idx=4 '1 :c%=1+RND*4 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=4 '1 :c%=1+RND*4 '
      (check_literal)   ',' != '1'
      (check_literal) check_literal: ret0
     (check_operator) ret0:is comma: 0

     (check_function) check_function: '1 :c%=1+RND*4 '
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=4 '1 :c%=1+RND*4 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=4 '1 :c%=1+RND*4 '
      (check_literal)   '%' != '1'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=4 '1 :c%=1+RND*4 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=4 '1 :c%=1+RND*4 '
      (check_literal)   '"' != '1'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: '1 :c%=1+RND*4 '
       (check_integer) check_integer:ret1
      (check_number) check_number: ret1
     (check_atom) check_atom:ret1
    (check_eitem) check_eitem:ret1

    (check_eitem) check_eitem: ' :c%=1+RND*4 '

     (check_operator) check_operator:  :c%=1+RND*4 

      (check_literal) check_literal:lit=' ,' idx=6 ':c%=1+RND*4 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=6 ':c%=1+RND*4 '
      (check_literal)   ',' != ':'
      (check_literal) check_literal: ret0
     (check_operator) ret0:is comma: 0

     (check_function) check_function: ':c%=1+RND*4 '
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=5 ' :c%=1+RND*4 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 ':c%=1+RND*4 '
      (check_literal)   '%' != ':'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=5 ' :c%=1+RND*4 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 ':c%=1+RND*4 '
      (check_literal)   '"' != ':'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: ':c%=1+RND*4 '
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname ':c%=1+RND*4 ':
       (check_vname) check_vname ret0 ':c%=1+RND*4 ':
      (check_variable) check_variable:ret0 
     (check_atom) check_atom:ret1

     (check_sub_expr) check_sub_expr:

      (check_literal) check_literal:lit=' (' idx=5 ' :c%=1+RND*4 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'(' idx=6 ':c%=1+RND*4 '
      (check_literal)   '(' != ':'
      (check_literal) check_literal: ret0
     (check_sub_expr) check_sub_expr: ret0
    (check_eitem) check_eitem:ret0
   (check_expression) check_expression:ret1 ' :c%=1+RND*4 '
  (check_assignment) check_assignment:ret1
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=13, ' :c%=1+RND*4 '
========================================================
 a%=1 :c%=1+RND*4 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'a%=1 :c%=1+RND*4 ':
    (check_vname) check_vname ret1 '%=1 :c%=1+RND*4 ':
   (check_variable) check_variable: '%=1 :c%=1+RND*4 '
   (check_variable) check_variable: Ary test '=1 :c%=1+RND*4 '

    (check_literal) check_literal:lit='(' idx=3 '=1 :c%=1+RND*4 '
    (check_literal) check_literal:After drop space:'(' idx=3 '=1 :c%=1+RND*4 '
    (check_literal)   '(' != '='
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=3 '=1 :c%=1+RND*4 '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=3 '=1 :c%=1+RND*4 '
  (check_literal) check_literal:After while():1 :c%=1+RND*4 
  (check_literal) check_literal:ret1 

  (check_expression) check_expression: '1 :c%=1+RND*4 '

   (check_eitem) check_eitem: '1 :c%=1+RND*4 '

    (check_operator) check_operator: 1 :c%=1+RND*4 

     (check_literal) check_literal:lit=' ,' idx=4 '1 :c%=1+RND*4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=4 '1 :c%=1+RND*4 '
     (check_literal)   ',' != '1'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: '1 :c%=1+RND*4 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=4 '1 :c%=1+RND*4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=4 '1 :c%=1+RND*4 '
     (check_literal)   '%' != '1'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=4 '1 :c%=1+RND*4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=4 '1 :c%=1+RND*4 '
     (check_literal)   '"' != '1'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '1 :c%=1+RND*4 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: ' :c%=1+RND*4 '

    (check_operator) check_operator:  :c%=1+RND*4 

     (check_literal) check_literal:lit=' ,' idx=6 ':c%=1+RND*4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=6 ':c%=1+RND*4 '
     (check_literal)   ',' != ':'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: ':c%=1+RND*4 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=5 ' :c%=1+RND*4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=6 ':c%=1+RND*4 '
     (check_literal)   '%' != ':'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=5 ' :c%=1+RND*4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=6 ':c%=1+RND*4 '
     (check_literal)   '"' != ':'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: ':c%=1+RND*4 '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname ':c%=1+RND*4 ':
      (check_vname) check_vname ret0 ':c%=1+RND*4 ':
     (check_variable) check_variable:ret0 
    (check_atom) check_atom:ret1

    (check_sub_expr) check_sub_expr:

     (check_literal) check_literal:lit=' (' idx=5 ' :c%=1+RND*4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'(' idx=6 ':c%=1+RND*4 '
     (check_literal)   '(' != ':'
     (check_literal) check_literal: ret0
    (check_sub_expr) check_sub_expr: ret0
   (check_eitem) check_eitem:ret0
  (check_expression) check_expression:ret1 ' :c%=1+RND*4 '
 (check_assignment) check_assignment:ret1

 (scan_assignment) scan_assignment:

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'a%=1 :c%=1+RND*4 '
   (scan_vname) scan_vname: ret1 'a'
  (scan_variable) scan_variable: '%=1 :c%=1+RND*4 ' vname='a'
  (scan_variable) scan_variable: Ary test '=1 :c%=1+RND*4 '

   (check_literal) check_literal:lit='(' idx=3 '=1 :c%=1+RND*4 '
   (check_literal) check_literal:After drop space:'(' idx=3 '=1 :c%=1+RND*4 '
   (check_literal)   '(' != '='
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='a%' is str:0 int:1 flt:0 ary:0
   Frst:1 T:'a%' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:a% is not function
token_is_variable: tok:'a%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:a% is not function
 (init_get_name) 
init_get_name:'a%'
 (init_get_name) 
init_get_name:'a%'
 (get_name) 
get_name:gn:'a%'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] i i a%
 (print_var_info) 
VAR INFO: '                a%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0

  (scan_assignment_equals) scan_assignment_equals:lit=' =' '=1 :c%=1+RND*4 '
  (scan_assignment_equals) scan_assignment_equals:After drop space:'=1 :c%=1+RND*4 '
  (scan_assignment_equals) scan_assignment_equals:while loop:=1 :c%=1+RND*4 
   Frst:0 T:':=' exptype:i
  (operator_precedence) 
:= is operator
':=' is operator
  (process_token) 
Token is operator o1 name::= o2 name:
  (process_token) 
opr1:1 opr2:0
Push 1
 Push:':='
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (1)

  (op_stack_print) 
000: := type:0
  (op_stack_print) 
------------------

  (scan_assignment_equals) scan_assignment_equals:ret1

  (scan_expression) scan_expression: '1 :c%=1+RND*4 '

   (check_eitem) check_eitem: '1 :c%=1+RND*4 '

    (check_operator) check_operator: 1 :c%=1+RND*4 

     (check_literal) check_literal:lit=' ,' idx=4 '1 :c%=1+RND*4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=4 '1 :c%=1+RND*4 '
     (check_literal)   ',' != '1'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: '1 :c%=1+RND*4 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=4 '1 :c%=1+RND*4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=4 '1 :c%=1+RND*4 '
     (check_literal)   '%' != '1'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=4 '1 :c%=1+RND*4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=4 '1 :c%=1+RND*4 '
     (check_literal)   '"' != '1'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '1 :c%=1+RND*4 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (scan_eitem) scan_eitem:

    (check_operator) check_operator: 1 :c%=1+RND*4 

     (check_literal) check_literal:lit=' ,' idx=4 '1 :c%=1+RND*4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=4 '1 :c%=1+RND*4 '
     (check_literal)   ',' != '1'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: '1 :c%=1+RND*4 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=4 '1 :c%=1+RND*4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=4 '1 :c%=1+RND*4 '
     (check_literal)   '%' != '1'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=4 '1 :c%=1+RND*4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=4 '1 :c%=1+RND*4 '
     (check_literal)   '"' != '1'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '1 :c%=1+RND*4 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1

    (scan_atom) scan_atom:

     (check_literal) check_literal:lit=' %' idx=4 '1 :c%=1+RND*4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=4 '1 :c%=1+RND*4 '
     (check_literal)   '%' != '1'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=4 '1 :c%=1+RND*4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=4 '1 :c%=1+RND*4 '
     (check_literal)   '"' != '1'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '1 :c%=1+RND*4 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1

     (scan_number) scan_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '1 :c%=1+RND*4 '
      (check_integer) check_integer:ret1

      (scan_integer) scan_integer:
      (scan_integer) scan_integer:ret1
   Frst:0 T:'1' exptype:i
     (operator_precedence) 
:= is operator
modify_expression_type:Inittype:i Intype:i Outtype:i
(  output_integer) [i,()] i i 1
     (scan_integer) scan_integer:ret1  1
    (scan_atom) scan_atom:ret1
   (scan_expression) n commas now:0

    (check_eitem) check_eitem: ' :c%=1+RND*4 '

     (check_operator) check_operator:  :c%=1+RND*4 

      (check_literal) check_literal:lit=' ,' idx=6 ':c%=1+RND*4 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=6 ':c%=1+RND*4 '
      (check_literal)   ',' != ':'
      (check_literal) check_literal: ret0
     (check_operator) ret0:is comma: 0

     (check_function) check_function: ':c%=1+RND*4 '
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=5 ' :c%=1+RND*4 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 ':c%=1+RND*4 '
      (check_literal)   '%' != ':'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=5 ' :c%=1+RND*4 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 ':c%=1+RND*4 '
      (check_literal)   '"' != ':'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: ':c%=1+RND*4 '
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname ':c%=1+RND*4 ':
       (check_vname) check_vname ret0 ':c%=1+RND*4 ':
      (check_variable) check_variable:ret0 
     (check_atom) check_atom:ret1

     (check_sub_expr) check_sub_expr:

      (check_literal) check_literal:lit=' (' idx=5 ' :c%=1+RND*4 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'(' idx=6 ':c%=1+RND*4 '
      (check_literal)   '(' != ':'
      (check_literal) check_literal: ret0
     (check_sub_expr) check_sub_expr: ret0
    (check_eitem) check_eitem:ret0
   (scan_expression) scan_expression: ret1 ' :c%=1+RND*4 ' commas:0
  (scan_assignment) scan_assignment: ret1
Finalise stack
Pop ':='
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (0)

 (op_stack_print) 
------------------

( output_operator) [i,()] i i :=
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function::= is not function
 (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'a%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '1' nidx:5  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i ':=' nidx:0  0:
=================
 BE:a%
type_check_stack_push: 'a%'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (1)

 (type_check_stack_print) 
000: 'a%' type:0
 (type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'a%' type:i (0)
 BE:1
type_check_stack_push: '1'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (2)

 (type_check_stack_print) 
000: 'a%' type:0
 (type_check_stack_print) 
001: '1' type:0
 (type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'a%' type:i (0)
001: '1' type:i (0)
 BE::=
BUFF_ID_OPERATOR
Found operator :=
type_check_stack_pop: '1'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (1)

 (type_check_stack_print) 
000: 'a%' type:0
 (type_check_stack_print) 
------------------

type_check_stack_pop: 'a%'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (0)

 (type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (1)

 (type_check_stack_print) 
000: '000' type:0
 (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'a%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '1' nidx:5  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i ':=' nidx:0  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i 'a%'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i '1'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_OPERATOR     i rq:i ':='  2: 2 1
=================
 (process_expression_types) 
==INFIX==

Var: a% ary:0 NumIdx:0
infix_stack_push: 'a%'
infix_stack_push: '1'
infix_stack_pop: '1'
infix_stack_pop: 'a%'
infix_stack_push: '(a% := 1)'
infix_stack_pop: '(a% := 1)'
 (process_expression_types) ==(a% := 1)==
 (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
(    output_qcode) N2 EXP_BUFF_ID_INTEGER      i rq:i 1  0:
(    output_qcode) N3 EXP_BUFF_ID_OPERATOR     i rq:i :=  2: 2 1

  (check_literal) check_literal:lit=':' idx=6 ':c%=1+RND*4 '
  (check_literal) check_literal:After drop space:':' idx=6 ':c%=1+RND*4 '
  (check_literal) check_literal:After while():c%=1+RND*4 
  (check_literal) check_literal:ret1 

  (scan_literal) scan_literal:lit=':' 'c%=1+RND*4 '
  (scan_literal) scan_literal:After drop space:'c%=1+RND*4 '
  (scan_literal) scan_literal:while loop:c%=1+RND*4 
  (scan_literal) scan_literal:ret1

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'c%=1+RND*4 ':
     (check_vname) check_vname ret1 '%=1+RND*4 ':
    (check_variable) check_variable: '%=1+RND*4 '
    (check_variable) check_variable: Ary test '=1+RND*4 '

     (check_literal) check_literal:lit='(' idx=9 '=1+RND*4 '
     (check_literal) check_literal:After drop space:'(' idx=9 '=1+RND*4 '
     (check_literal)   '(' != '='
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=9 '=1+RND*4 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=9 '=1+RND*4 '
   (check_literal) check_literal:After while():1+RND*4 
   (check_literal) check_literal:ret1 

   (check_expression) check_expression: '1+RND*4 '

    (check_eitem) check_eitem: '1+RND*4 '

     (check_operator) check_operator: 1+RND*4 

      (check_literal) check_literal:lit=' ,' idx=10 '1+RND*4 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=10 '1+RND*4 '
      (check_literal)   ',' != '1'
      (check_literal) check_literal: ret0
     (check_operator) ret0:is comma: 0

     (check_function) check_function: '1+RND*4 '
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=10 '1+RND*4 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=10 '1+RND*4 '
      (check_literal)   '%' != '1'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=10 '1+RND*4 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=10 '1+RND*4 '
      (check_literal)   '"' != '1'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: '1+RND*4 '
       (check_integer) check_integer:ret1
      (check_number) check_number: ret1
     (check_atom) check_atom:ret1
    (check_eitem) check_eitem:ret1

    (check_eitem) check_eitem: '+RND*4 '

     (check_operator) check_operator: +RND*4 

      (check_literal) check_literal:lit=' ,' idx=11 '+RND*4 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=11 '+RND*4 '
      (check_literal)   ',' != '+'
      (check_literal) check_literal: ret0
     (check_operator) ret1:is comma: 0
    (check_eitem) check_eitem:ret1 comma:1

    (check_eitem) check_eitem: 'RND*4 '

     (check_operator) check_operator: RND*4 

      (check_literal) check_literal:lit=' ,' idx=12 'RND*4 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=12 'RND*4 '
      (check_literal)   ',' != 'R'
      (check_literal) check_literal: ret0
     (check_operator) ret0:is comma: 0

     (check_function) check_function: 'RND*4 '
     (check_function) check_function: ret1 Found fn=>'RND'
    (check_eitem) check_eitem:ret1

    (check_eitem) check_eitem: '*4 '

     (check_operator) check_operator: *4 

      (check_literal) check_literal:lit=' ,' idx=15 '*4 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=15 '*4 '
      (check_literal)   ',' != '*'
      (check_literal) check_literal: ret0
     (check_operator) ret1:is comma: 0
    (check_eitem) check_eitem:ret1 comma:1

    (check_eitem) check_eitem: '4 '

     (check_operator) check_operator: 4 

      (check_literal) check_literal:lit=' ,' idx=16 '4 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=16 '4 '
      (check_literal)   ',' != '4'
      (check_literal) check_literal: ret0
     (check_operator) ret0:is comma: 0

     (check_function) check_function: '4 '
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=16 '4 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=16 '4 '
      (check_literal)   '%' != '4'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=16 '4 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=16 '4 '
      (check_literal)   '"' != '4'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: '4 '
       (check_integer) check_integer:ret1
      (check_number) check_number: ret1
     (check_atom) check_atom:ret1
    (check_eitem) check_eitem:ret1

    (check_eitem) check_eitem: ' '

     (check_operator) check_operator:  

      (check_literal) check_literal:lit=' ,' idx=18 ''
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=18 ''
      (check_literal) check_literal  ret0 Empty test string
     (check_operator) ret0:is comma: 0

     (check_function) check_function: ''
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=17 ' '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=18 ''
      (check_literal) check_literal  ret0 Empty test string

      (check_literal) check_literal:lit=' "' idx=17 ' '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=18 ''
      (check_literal) check_literal  ret0 Empty test string

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: ''
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname '':
       (check_vname) check_vname ret0 '':
      (check_variable) check_variable:ret0 
     (check_atom) check_atom:ret1

     (check_sub_expr) check_sub_expr:

      (check_literal) check_literal:lit=' (' idx=17 ' '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'(' idx=18 ''
      (check_literal) check_literal  ret0 Empty test string
     (check_sub_expr) check_sub_expr: ret0
    (check_eitem) check_eitem:ret0
   (check_expression) check_expression:ret1 ' '
  (check_assignment) check_assignment:ret1
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=1, ' '
========================================================
 a%=1 :c%=1+RND*4 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'c%=1+RND*4 ':
    (check_vname) check_vname ret1 '%=1+RND*4 ':
   (check_variable) check_variable: '%=1+RND*4 '
   (check_variable) check_variable: Ary test '=1+RND*4 '

    (check_literal) check_literal:lit='(' idx=9 '=1+RND*4 '
    (check_literal) check_literal:After drop space:'(' idx=9 '=1+RND*4 '
    (check_literal)   '(' != '='
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=9 '=1+RND*4 '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=9 '=1+RND*4 '
  (check_literal) check_literal:After while():1+RND*4 
  (check_literal) check_literal:ret1 

  (check_expression) check_expression: '1+RND*4 '

   (check_eitem) check_eitem: '1+RND*4 '

    (check_operator) check_operator: 1+RND*4 

     (check_literal) check_literal:lit=' ,' idx=10 '1+RND*4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=10 '1+RND*4 '
     (check_literal)   ',' != '1'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: '1+RND*4 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=10 '1+RND*4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=10 '1+RND*4 '
     (check_literal)   '%' != '1'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=10 '1+RND*4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=10 '1+RND*4 '
     (check_literal)   '"' != '1'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '1+RND*4 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: '+RND*4 '

    (check_operator) check_operator: +RND*4 

     (check_literal) check_literal:lit=' ,' idx=11 '+RND*4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=11 '+RND*4 '
     (check_literal)   ',' != '+'
     (check_literal) check_literal: ret0
    (check_operator) ret1:is comma: 0
   (check_eitem) check_eitem:ret1 comma:1

   (check_eitem) check_eitem: 'RND*4 '

    (check_operator) check_operator: RND*4 

     (check_literal) check_literal:lit=' ,' idx=12 'RND*4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=12 'RND*4 '
     (check_literal)   ',' != 'R'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'RND*4 '
    (check_function) check_function: ret1 Found fn=>'RND'
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: '*4 '

    (check_operator) check_operator: *4 

     (check_literal) check_literal:lit=' ,' idx=15 '*4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=15 '*4 '
     (check_literal)   ',' != '*'
     (check_literal) check_literal: ret0
    (check_operator) ret1:is comma: 0
   (check_eitem) check_eitem:ret1 comma:1

   (check_eitem) check_eitem: '4 '

    (check_operator) check_operator: 4 

     (check_literal) check_literal:lit=' ,' idx=16 '4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=16 '4 '
     (check_literal)   ',' != '4'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: '4 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=16 '4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=16 '4 '
     (check_literal)   '%' != '4'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=16 '4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=16 '4 '
     (check_literal)   '"' != '4'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '4 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: ' '

    (check_operator) check_operator:  

     (check_literal) check_literal:lit=' ,' idx=18 ''
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=18 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_operator) ret0:is comma: 0

    (check_function) check_function: ''
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=17 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=18 ''
     (check_literal) check_literal  ret0 Empty test string

     (check_literal) check_literal:lit=' "' idx=17 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=18 ''
     (check_literal) check_literal  ret0 Empty test string

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: ''
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname '':
      (check_vname) check_vname ret0 '':
     (check_variable) check_variable:ret0 
    (check_atom) check_atom:ret1

    (check_sub_expr) check_sub_expr:

     (check_literal) check_literal:lit=' (' idx=17 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'(' idx=18 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_sub_expr) check_sub_expr: ret0
   (check_eitem) check_eitem:ret0
  (check_expression) check_expression:ret1 ' '
 (check_assignment) check_assignment:ret1

 (scan_assignment) scan_assignment:

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'c%=1+RND*4 '
   (scan_vname) scan_vname: ret1 'c'
  (scan_variable) scan_variable: '%=1+RND*4 ' vname='c'
  (scan_variable) scan_variable: Ary test '=1+RND*4 '

   (check_literal) check_literal:lit='(' idx=9 '=1+RND*4 '
   (check_literal) check_literal:After drop space:'(' idx=9 '=1+RND*4 '
   (check_literal)   '(' != '='
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='c%' is str:0 int:1 flt:0 ary:0
   Frst:1 T:'c%' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:c% is not function
token_is_variable: tok:'c%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:c% is not function
 (init_get_name) 
init_get_name:'c%'
 (init_get_name) 
init_get_name:'c%'
 (get_name) 
get_name:gn:'c%'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] i i c%
 (print_var_info) 
VAR INFO: '                c%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0

  (scan_assignment_equals) scan_assignment_equals:lit=' =' '=1+RND*4 '
  (scan_assignment_equals) scan_assignment_equals:After drop space:'=1+RND*4 '
  (scan_assignment_equals) scan_assignment_equals:while loop:=1+RND*4 
   Frst:0 T:':=' exptype:i
  (operator_precedence) 
:= is operator
':=' is operator
  (process_token) 
Token is operator o1 name::= o2 name:
  (process_token) 
opr1:1 opr2:0
Push 1
 Push:':='
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (1)

  (op_stack_print) 
000: := type:0
  (op_stack_print) 
------------------

  (scan_assignment_equals) scan_assignment_equals:ret1

  (scan_expression) scan_expression: '1+RND*4 '

   (check_eitem) check_eitem: '1+RND*4 '

    (check_operator) check_operator: 1+RND*4 

     (check_literal) check_literal:lit=' ,' idx=10 '1+RND*4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=10 '1+RND*4 '
     (check_literal)   ',' != '1'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: '1+RND*4 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=10 '1+RND*4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=10 '1+RND*4 '
     (check_literal)   '%' != '1'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=10 '1+RND*4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=10 '1+RND*4 '
     (check_literal)   '"' != '1'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '1+RND*4 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (scan_eitem) scan_eitem:

    (check_operator) check_operator: 1+RND*4 

     (check_literal) check_literal:lit=' ,' idx=10 '1+RND*4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=10 '1+RND*4 '
     (check_literal)   ',' != '1'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: '1+RND*4 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=10 '1+RND*4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=10 '1+RND*4 '
     (check_literal)   '%' != '1'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=10 '1+RND*4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=10 '1+RND*4 '
     (check_literal)   '"' != '1'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '1+RND*4 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1

    (scan_atom) scan_atom:

     (check_literal) check_literal:lit=' %' idx=10 '1+RND*4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=10 '1+RND*4 '
     (check_literal)   '%' != '1'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=10 '1+RND*4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=10 '1+RND*4 '
     (check_literal)   '"' != '1'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '1+RND*4 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1

     (scan_number) scan_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '1+RND*4 '
      (check_integer) check_integer:ret1

      (scan_integer) scan_integer:
      (scan_integer) scan_integer:ret1
   Frst:0 T:'1' exptype:i
     (operator_precedence) 
:= is operator
modify_expression_type:Inittype:i Intype:i Outtype:i
(  output_integer) [i,()] i i 1
     (scan_integer) scan_integer:ret1  1
    (scan_atom) scan_atom:ret1
   (scan_expression) n commas now:0

    (check_eitem) check_eitem: '+RND*4 '

     (check_operator) check_operator: +RND*4 

      (check_literal) check_literal:lit=' ,' idx=11 '+RND*4 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=11 '+RND*4 '
      (check_literal)   ',' != '+'
      (check_literal) check_literal: ret0
     (check_operator) ret1:is comma: 0
    (check_eitem) check_eitem:ret1 comma:1

    (scan_eitem) scan_eitem:

     (check_operator) check_operator: +RND*4 

      (check_literal) check_literal:lit=' ,' idx=11 '+RND*4 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=11 '+RND*4 '
      (check_literal)   ',' != '+'
      (check_literal) check_literal: ret0
     (check_operator) ret1:is comma: 0

     (scan_operator) scan_operator: '+RND*4 '

      (check_literal) check_literal:lit=' ,' idx=11 '+RND*4 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=11 '+RND*4 '
      (check_literal)   ',' != '+'
      (check_literal) check_literal: ret0
     (scan_operator) scan_operator: ret1 'RND*4 '
   Frst:0 T:'+' exptype:i
    (operator_precedence) 
+ is operator
    (operator_precedence) 
:= is operator
'+' is operator
    (process_token) 
Token is operator o1 name:+ o2 name::=
    (process_token) 
opr1:3 opr2:1
    (operator_precedence) 
:= is operator
    (operator_precedence) 
:= is operator
Push 1
 Push:'+'
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (2)

    (op_stack_print) 
000: := type:0
    (op_stack_print) 
001: + type:0
    (op_stack_print) 
------------------

    (scan_eitem) Is comma;0
    (scan_expression) n commas now:0

     (check_eitem) check_eitem: 'RND*4 '

      (check_operator) check_operator: RND*4 

       (check_literal) check_literal:lit=' ,' idx=12 'RND*4 '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=12 'RND*4 '
       (check_literal)   ',' != 'R'
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: 'RND*4 '
      (check_function) check_function: ret1 Found fn=>'RND'
     (check_eitem) check_eitem:ret1

     (scan_eitem) scan_eitem:

      (check_operator) check_operator: RND*4 

       (check_literal) check_literal:lit=' ,' idx=12 'RND*4 '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=12 'RND*4 '
       (check_literal)   ',' != 'R'
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: 'RND*4 '
      (check_function) check_function: ret1 Found fn=>'RND'

      (scan_function) scan_function:
   Frst:0 T:'RND' exptype:i
      (operator_precedence) 
+ is operator
      (token_is_function) 
token_is_function:
      (token_is_function) RND is function
      (function_return_type) 
function_return_type: 'RND' =>f
      (function_return_type) 
function_return_type: 'RND' =>1
process_token: 'RND' t=>f
 Push:'RND'
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (3)

      (op_stack_print) 
000: := type:0
      (op_stack_print) 
001: + type:0
      (op_stack_print) 
002: RND type:1
      (op_stack_print) 
------------------

Dummy argument expression added
   Frst:0 T:'(' exptype:i
(output_sub_start)
 Push:'('
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (4)

      (op_stack_print) 
000: := type:0
      (op_stack_print) 
001: + type:0
      (op_stack_print) 
002: RND type:1
      (op_stack_print) 
003: ( type:16
      (op_stack_print) 
------------------

   Frst:0 T:')' exptype:U
Pop 4
Pop '('
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (3)

      (op_stack_print) 
000: := type:0
      (op_stack_print) 
001: + type:0
      (op_stack_print) 
002: RND type:1
      (op_stack_print) 
------------------

(  output_sub_end)
      (token_is_function) 
token_is_function:
      (token_is_function) RND is function
Pop 5
Pop 'RND'
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (2)

      (op_stack_print) 
000: := type:0
      (op_stack_print) 
001: + type:0
      (op_stack_print) 
------------------

( output_function) [U,(i )] f f RND
(  output_sub_end)
      (scan_expression) n commas now:0

       (check_eitem) check_eitem: '*4 '

        (check_operator) check_operator: *4 

         (check_literal) check_literal:lit=' ,' idx=15 '*4 '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:',' idx=15 '*4 '
         (check_literal)   ',' != '*'
         (check_literal) check_literal: ret0
        (check_operator) ret1:is comma: 0
       (check_eitem) check_eitem:ret1 comma:1

       (scan_eitem) scan_eitem:

        (check_operator) check_operator: *4 

         (check_literal) check_literal:lit=' ,' idx=15 '*4 '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:',' idx=15 '*4 '
         (check_literal)   ',' != '*'
         (check_literal) check_literal: ret0
        (check_operator) ret1:is comma: 0

        (scan_operator) scan_operator: '*4 '

         (check_literal) check_literal:lit=' ,' idx=15 '*4 '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:',' idx=15 '*4 '
         (check_literal)   ',' != '*'
         (check_literal) check_literal: ret0
        (scan_operator) scan_operator: ret1 '4 '
   Frst:0 T:'*' exptype:i
       (operator_precedence) 
* is operator
       (operator_precedence) 
+ is operator
'*' is operator
       (process_token) 
Token is operator o1 name:* o2 name:+
       (process_token) 
opr1:5 opr2:3
       (operator_precedence) 
+ is operator
       (operator_precedence) 
+ is operator
Push 1
 Push:'*'
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (3)

       (op_stack_print) 
000: := type:0
       (op_stack_print) 
001: + type:0
       (op_stack_print) 
002: * type:0
       (op_stack_print) 
------------------

       (scan_eitem) Is comma;0
       (scan_expression) n commas now:0

        (check_eitem) check_eitem: '4 '

         (check_operator) check_operator: 4 

          (check_literal) check_literal:lit=' ,' idx=16 '4 '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:',' idx=16 '4 '
          (check_literal)   ',' != '4'
          (check_literal) check_literal: ret0
         (check_operator) ret0:is comma: 0

         (check_function) check_function: '4 '
         (check_function) check_function: ret0

         (check_atom) check_atom:

          (check_literal) check_literal:lit=' %' idx=16 '4 '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=16 '4 '
          (check_literal)   '%' != '4'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=16 '4 '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=16 '4 '
          (check_literal)   '"' != '4'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '4 '
           (check_integer) check_integer:ret1
          (check_number) check_number: ret1
         (check_atom) check_atom:ret1
        (check_eitem) check_eitem:ret1

        (scan_eitem) scan_eitem:

         (check_operator) check_operator: 4 

          (check_literal) check_literal:lit=' ,' idx=16 '4 '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:',' idx=16 '4 '
          (check_literal)   ',' != '4'
          (check_literal) check_literal: ret0
         (check_operator) ret0:is comma: 0

         (check_function) check_function: '4 '
         (check_function) check_function: ret0

         (check_atom) check_atom:

          (check_literal) check_literal:lit=' %' idx=16 '4 '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=16 '4 '
          (check_literal)   '%' != '4'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=16 '4 '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=16 '4 '
          (check_literal)   '"' != '4'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '4 '
           (check_integer) check_integer:ret1
          (check_number) check_number: ret1
         (check_atom) check_atom:ret1

         (scan_atom) scan_atom:

          (check_literal) check_literal:lit=' %' idx=16 '4 '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=16 '4 '
          (check_literal)   '%' != '4'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=16 '4 '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=16 '4 '
          (check_literal)   '"' != '4'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '4 '
           (check_integer) check_integer:ret1
          (check_number) check_number: ret1

          (scan_number) scan_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '4 '
           (check_integer) check_integer:ret1

           (scan_integer) scan_integer:
           (scan_integer) scan_integer:ret1
   Frst:0 T:'4' exptype:i
          (operator_precedence) 
* is operator
modify_expression_type:Inittype:i Intype:i Outtype:i
(  output_integer) [i,()] i i 4
          (scan_integer) scan_integer:ret1  4
         (scan_atom) scan_atom:ret1
        (scan_expression) n commas now:0

         (check_eitem) check_eitem: ' '

          (check_operator) check_operator:  

           (check_literal) check_literal:lit=' ,' idx=18 ''
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:',' idx=18 ''
           (check_literal) check_literal  ret0 Empty test string
          (check_operator) ret0:is comma: 0

          (check_function) check_function: ''
          (check_function) check_function: ret0

          (check_atom) check_atom:

           (check_literal) check_literal:lit=' %' idx=17 ' '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'%' idx=18 ''
           (check_literal) check_literal  ret0 Empty test string

           (check_literal) check_literal:lit=' "' idx=17 ' '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'"' idx=18 ''
           (check_literal) check_literal  ret0 Empty test string

           (check_number) check_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret0

            (check_integer) check_integer: ''
            (check_integer) check_integer:ret0
           (check_number) check_number: ret0

           (check_variable) check_variable:

            (check_vname) check_vname '':
            (check_vname) check_vname ret0 '':
           (check_variable) check_variable:ret0 
          (check_atom) check_atom:ret1

          (check_sub_expr) check_sub_expr:

           (check_literal) check_literal:lit=' (' idx=17 ' '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'(' idx=18 ''
           (check_literal) check_literal  ret0 Empty test string
          (check_sub_expr) check_sub_expr: ret0
         (check_eitem) check_eitem:ret0
        (scan_expression) scan_expression: ret1 ' ' commas:0
       (scan_assignment) scan_assignment: ret1
Finalise stack
Pop '*'
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (2)

      (op_stack_print) 
000: := type:0
      (op_stack_print) 
001: + type:0
      (op_stack_print) 
------------------

( output_operator) [i,()] i i *
      (token_is_function) 
token_is_function:
      (token_is_function) 
token_is_function:* is not function
Pop '+'
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (1)

      (op_stack_print) 
000: := type:0
      (op_stack_print) 
------------------

( output_operator) [i,()] i i +
      (token_is_function) 
token_is_function:
      (token_is_function) 
token_is_function:+ is not function
Pop ':='
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (0)

      (op_stack_print) 
------------------

( output_operator) [i,()] i i :=
      (token_is_function) 
token_is_function:
      (token_is_function) 
token_is_function::= is not function
      (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'c%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '1' nidx:11  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     f rq:f 'RND' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '4' nidx:17  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '*' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '+' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i ':=' nidx:0  0:
=================
 BE:c%
type_check_stack_push: 'c%'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (1)

      (type_check_stack_print) 
000: 'c%' type:0
      (type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'c%' type:i (0)
 BE:1
type_check_stack_push: '1'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (2)

      (type_check_stack_print) 
000: 'c%' type:0
      (type_check_stack_print) 
001: '1' type:0
      (type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'c%' type:i (0)
001: '1' type:i (0)
 BE:

Type Check Stack (2)

000: 'c%' type:i (0)
001: '1' type:i (0)
 BE:

Type Check Stack (2)

000: 'c%' type:i (0)
001: '1' type:i (0)
 BE:RND
FN: 0 args
      (function_return_type) 
function_return_type: 'RND' =>f
      (function_return_type) 
function_return_type: 'RND' =>1
ret_type;1 f
typecheck_expression:Ret type of RND : f
type_check_stack_push: '000'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (3)

      (type_check_stack_print) 
000: 'c%' type:0
      (type_check_stack_print) 
001: '1' type:0
      (type_check_stack_print) 
002: '000' type:1
      (type_check_stack_print) 
------------------


Type Check Stack (3)

000: 'c%' type:i (0)
001: '1' type:i (0)
002: '000' type:f (1)
 BE:

Type Check Stack (3)

000: 'c%' type:i (0)
001: '1' type:i (0)
002: '000' type:f (1)
 BE:4
type_check_stack_push: '4'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (4)

      (type_check_stack_print) 
000: 'c%' type:0
      (type_check_stack_print) 
001: '1' type:0
      (type_check_stack_print) 
002: '000' type:1
      (type_check_stack_print) 
003: '4' type:0
      (type_check_stack_print) 
------------------


Type Check Stack (4)

000: 'c%' type:i (0)
001: '1' type:i (0)
002: '000' type:f (1)
003: '4' type:i (0)
 BE:*
BUFF_ID_OPERATOR
Found operator *
type_check_stack_pop: '4'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (3)

      (type_check_stack_print) 
000: 'c%' type:0
      (type_check_stack_print) 
001: '1' type:0
      (type_check_stack_print) 
002: '000' type:1
      (type_check_stack_print) 
------------------

type_check_stack_pop: '000'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (2)

      (type_check_stack_print) 
000: 'c%' type:0
      (type_check_stack_print) 
001: '1' type:0
      (type_check_stack_print) 
------------------

 Mutable type 0 1
type_with_least_conversion_from: i f => f
type_with_least_conversion_from: i f => f
 Autoconversion
 --------------
 Op1: type:0 req type:0
 Op2: type:1 req type:1
 BE:  type:1 req type:1
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i 'c%'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i '1'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_FUNCTION     f rq:f 'RND'  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_INTEGER      i rq:i '4'  0:
=================
 Insert after 7 exp_buffer2_i:7
   Found at i:6
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i 'c%'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i '1'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_FUNCTION     f rq:f 'RND'  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_INTEGER      i rq:i '4'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 7 5
=================
type_check_stack_push: '000'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (3)

      (type_check_stack_print) 
000: 'c%' type:0
      (type_check_stack_print) 
001: '1' type:0
      (type_check_stack_print) 
002: '000' type:1
      (type_check_stack_print) 
------------------


Type Check Stack (3)

000: 'c%' type:i (0)
001: '1' type:i (0)
002: '000' type:f (1)
 BE:+
BUFF_ID_OPERATOR
Found operator +
type_check_stack_pop: '000'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (2)

      (type_check_stack_print) 
000: 'c%' type:0
      (type_check_stack_print) 
001: '1' type:0
      (type_check_stack_print) 
------------------

type_check_stack_pop: '1'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (1)

      (type_check_stack_print) 
000: 'c%' type:0
      (type_check_stack_print) 
------------------

 Mutable type 1 0
type_with_least_conversion_from: f i => f
type_with_least_conversion_from: f i => f
 Autoconversion
 --------------
 Op1: type:1 req type:1
 Op2: type:0 req type:0
 BE:  type:1 req type:1
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i 'c%'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i '1'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_FUNCTION     f rq:f 'RND'  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_INTEGER      i rq:i '4'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 7 5
(dump_exp_buffer2) N8 EXP_BUFF_ID_OPERATOR     f rq:f '*'  2: 7 5
=================
 Insert after 2 exp_buffer2_i:9
   Found at i:1
   Copied 8 to 9:
   Copied 7 to 8:
   Copied 6 to 7:
   Copied 5 to 6:
   Copied 4 to 5:
   Copied 3 to 4:
   Copied 2 to 3:
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i 'c%'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i '1'  0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 8 2
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_FUNCTION     f rq:f 'RND'  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_INTEGER      i rq:i '4'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 7 5
(dump_exp_buffer2) N8 EXP_BUFF_ID_OPERATOR     f rq:f '*'  2: 7 5
=================
type_check_stack_push: '000'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (2)

      (type_check_stack_print) 
000: 'c%' type:0
      (type_check_stack_print) 
001: '000' type:1
      (type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'c%' type:i (0)
001: '000' type:f (1)
 BE::=
BUFF_ID_OPERATOR
Found operator :=
type_check_stack_pop: '000'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (1)

      (type_check_stack_print) 
000: 'c%' type:0
      (type_check_stack_print) 
------------------

type_check_stack_pop: 'c%'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (0)

      (type_check_stack_print) 
------------------

 Mutable type 1 0
type_with_least_conversion_from: f i => f
type_with_least_conversion_from: f i => f
 Autoconversion
 --------------
 Op1: type:1 req type:1
 Op2: type:0 req type:0
 BE:  type:1 req type:1
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i 'c%'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i '1'  0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 8 2
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_FUNCTION     f rq:f 'RND'  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_INTEGER      i rq:i '4'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 7 5
(dump_exp_buffer2) N8 EXP_BUFF_ID_OPERATOR     f rq:f '*'  2: 7 5
(dump_exp_buffer2) N10 EXP_BUFF_ID_OPERATOR     f rq:f '+'  2: 8 2
=================
 Insert after 10 exp_buffer2_i:11
   Found at i:10
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i 'c%'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i '1'  0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 8 2
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_FUNCTION     f rq:f 'RND'  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_INTEGER      i rq:i '4'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 7 5
(dump_exp_buffer2) N8 EXP_BUFF_ID_OPERATOR     f rq:f '*'  2: 7 5
(dump_exp_buffer2) N10 EXP_BUFF_ID_OPERATOR     f rq:f '+'  2: 8 2
(dump_exp_buffer2) N13 EXP_BUFF_ID_AUTOCON      i rq:i 'autocon f->i'  2: 10 1
=================
type_check_stack_push: '000'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (1)

      (type_check_stack_print) 
000: '000' type:0
      (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'c%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '1' nidx:11  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     f rq:f 'RND' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '4' nidx:17  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '*' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '+' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i ':=' nidx:0  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i 'c%'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i '1'  0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 8 2
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_FUNCTION     f rq:f 'RND'  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_INTEGER      i rq:i '4'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 7 5
(dump_exp_buffer2) N8 EXP_BUFF_ID_OPERATOR     f rq:f '*'  2: 7 5
(dump_exp_buffer2) N10 EXP_BUFF_ID_OPERATOR     f rq:f '+'  2: 8 2
(dump_exp_buffer2) N13 EXP_BUFF_ID_AUTOCON      i rq:i 'autocon f->i'  2: 10 1
(dump_exp_buffer2) N12 EXP_BUFF_ID_OPERATOR     i rq:i ':='  2: 10 1
=================
      (process_expression_types) 
==INFIX==

Var: c% ary:0 NumIdx:0
infix_stack_push: 'c%'
infix_stack_push: '1'
infix_stack_push: 'RND()'
infix_stack_push: '4'
infix_stack_pop: '4'
infix_stack_pop: 'RND()'
infix_stack_push: '(RND() * 4)'
infix_stack_pop: '(RND() * 4)'
infix_stack_pop: '1'
infix_stack_push: '(1 + (RND() * 4))'
infix_stack_pop: '(1 + (RND() * 4))'
infix_stack_pop: 'c%'
infix_stack_push: '(c% := (1 + (RND() * 4)))'
infix_stack_pop: '(c% := (1 + (RND() * 4)))'
      (process_expression_types) ==(c% := (1 + (RND() * 4)))==
      (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
(    output_qcode) N2 EXP_BUFF_ID_INTEGER      i rq:i 1  0:
(    output_qcode) N11 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 8 2
(    output_qcode) N3 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N4 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N5 EXP_BUFF_ID_FUNCTION     f rq:f RND  0:
(    output_qcode) N6 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N7 EXP_BUFF_ID_INTEGER      i rq:i 4  0:
(    output_qcode) N9 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 7 5
(    output_qcode) N8 EXP_BUFF_ID_OPERATOR     f rq:f *  2: 7 5
(    output_qcode) N10 EXP_BUFF_ID_OPERATOR     f rq:f +  2: 8 2
(    output_qcode) N13 EXP_BUFF_ID_AUTOCON      i rq:i autocon f->i  2: 10 1
(    output_qcode) N12 EXP_BUFF_ID_OPERATOR     i rq:i :=  2: 10 1

       (check_literal) check_literal:lit=':' idx=18 ''
       (check_literal) check_literal:After drop space:':' idx=18 ''
       (check_literal) check_literal  ret0 Empty test string
      (translate_file) 
cline scanned OK
************************************
** DO :c1%=1+RND*4 :UNTIL c%<>c1% **
************************************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'DO :c1%=1+RND*4 :UNTIL c%<>c1% ':
     (check_vname) check_vname ret1 ' :c1%=1+RND*4 :UNTIL c%<>c1% ':
    (check_variable) check_variable: ' :c1%=1+RND*4 :UNTIL c%<>c1% '
    (check_variable) check_variable: Ary test ' :c1%=1+RND*4 :UNTIL c%<>c1% '

     (check_literal) check_literal:lit='(' idx=3 ' :c1%=1+RND*4 :UNTIL c%<>c1% '
     (check_literal) check_literal:After drop space:'(' idx=3 ' :c1%=1+RND*4 :UNTIL c%<>c1% '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=3 ' :c1%=1+RND*4 :UNTIL c%<>c1% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=4 ':c1%=1+RND*4 :UNTIL c%<>c1% '
   (check_literal)   '=' != ':'
   (check_literal) check_literal: ret0
  (check_assignment) check_assignment:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) check_textlabel: 'DO :c1%=1+RND*4 :UNTIL c%<>c1% '
   (check_textlabel) check_textlabel:ret0
  (check_proc_call) check_proc_call:ret0

  (check_command) check_command:
  (check_command) check_command: ret0

  (check_function) check_function: 'DO :c1%=1+RND*4 :UNTIL c%<>c1% '
  (check_function) check_function: ret0

  (check_literal) check_literal:lit=' IF' idx=0 ' DO :c1%=1+RND*4 :UNTIL c%<>c1% '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'IF' idx=1 'DO :c1%=1+RND*4 :UNTIL c%<>c1% '
  (check_literal)   'I' != 'D'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' ELSEIF' idx=0 ' DO :c1%=1+RND*4 :UNTIL c%<>c1% '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'ELSEIF' idx=1 'DO :c1%=1+RND*4 :UNTIL c%<>c1% '
  (check_literal)   'E' != 'D'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' ELSE' idx=0 ' DO :c1%=1+RND*4 :UNTIL c%<>c1% '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'ELSE' idx=1 'DO :c1%=1+RND*4 :UNTIL c%<>c1% '
  (check_literal)   'E' != 'D'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' ENDIF' idx=0 ' DO :c1%=1+RND*4 :UNTIL c%<>c1% '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'ENDIF' idx=1 'DO :c1%=1+RND*4 :UNTIL c%<>c1% '
  (check_literal)   'E' != 'D'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' DO' idx=0 ' DO :c1%=1+RND*4 :UNTIL c%<>c1% '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'DO' idx=1 'DO :c1%=1+RND*4 :UNTIL c%<>c1% '
  (check_literal) check_literal:After while(): :c1%=1+RND*4 :UNTIL c%<>c1% 
  (check_literal) check_literal:ret1 
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=29, ' :c1%=1+RND*4 :UNTIL c%<>c1% '
========================================================
 DO :c1%=1+RND*4 :UNTIL c%<>c1% 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'DO :c1%=1+RND*4 :UNTIL c%<>c1% ':
    (check_vname) check_vname ret1 ' :c1%=1+RND*4 :UNTIL c%<>c1% ':
   (check_variable) check_variable: ' :c1%=1+RND*4 :UNTIL c%<>c1% '
   (check_variable) check_variable: Ary test ' :c1%=1+RND*4 :UNTIL c%<>c1% '

    (check_literal) check_literal:lit='(' idx=3 ' :c1%=1+RND*4 :UNTIL c%<>c1% '
    (check_literal) check_literal:After drop space:'(' idx=3 ' :c1%=1+RND*4 :UNTIL c%<>c1% '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=3 ' :c1%=1+RND*4 :UNTIL c%<>c1% '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=4 ':c1%=1+RND*4 :UNTIL c%<>c1% '
  (check_literal)   '=' != ':'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'DO :c1%=1+RND*4 :UNTIL c%<>c1% '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret0

 (check_function) check_function: 'DO :c1%=1+RND*4 :UNTIL c%<>c1% '
 (check_function) check_function: ret0

 (check_literal) check_literal:lit=' IF' idx=1 'DO :c1%=1+RND*4 :UNTIL c%<>c1% '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'IF' idx=1 'DO :c1%=1+RND*4 :UNTIL c%<>c1% '
 (check_literal)   'I' != 'D'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' ELSEIF' idx=1 'DO :c1%=1+RND*4 :UNTIL c%<>c1% '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'ELSEIF' idx=1 'DO :c1%=1+RND*4 :UNTIL c%<>c1% '
 (check_literal)   'E' != 'D'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' ELSE' idx=1 'DO :c1%=1+RND*4 :UNTIL c%<>c1% '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'ELSE' idx=1 'DO :c1%=1+RND*4 :UNTIL c%<>c1% '
 (check_literal)   'E' != 'D'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' ENDIF' idx=1 'DO :c1%=1+RND*4 :UNTIL c%<>c1% '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'ENDIF' idx=1 'DO :c1%=1+RND*4 :UNTIL c%<>c1% '
 (check_literal)   'E' != 'D'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' DO' idx=1 'DO :c1%=1+RND*4 :UNTIL c%<>c1% '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'DO' idx=1 'DO :c1%=1+RND*4 :UNTIL c%<>c1% '
 (check_literal) check_literal:After while(): :c1%=1+RND*4 :UNTIL c%<>c1% 
 (check_literal) check_literal:ret1 

 (scan_literal) scan_literal:lit=' DO' 'DO :c1%=1+RND*4 :UNTIL c%<>c1% '
 (scan_literal) scan_literal:After drop space:'DO :c1%=1+RND*4 :UNTIL c%<>c1% '
 (scan_literal) scan_literal:while loop:DO :c1%=1+RND*4 :UNTIL c%<>c1% 
 (scan_literal) scan_literal:while loop:O :c1%=1+RND*4 :UNTIL c%<>c1% 
   Frst:1 T:'DO' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:DO is not function
token_is_variable: tok:'DO'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:DO is not function
 (init_get_name) 
init_get_name:'DO'
 (init_get_name) 
init_get_name:'DO'
 (get_name) 
get_name:gn:'DO'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] f f DO
 (scan_literal) scan_literal:ret1
Finalise stack
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'DO' nidx:0  0:
=================
 BE:DO
type_check_stack_push: 'DO'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'DO' type:1
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'DO' type:f (1)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'DO' nidx:0  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f 'DO'  0:
=================
(process_expression_types) 
==INFIX==

Var: DO ary:1 NumIdx:0
infix_stack_push: 'DO()'
infix_stack_pop: 'DO()'
(process_expression_types) ==DO()==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     f rq:f DO  0:

 (check_literal) check_literal:lit=':' idx=4 ':c1%=1+RND*4 :UNTIL c%<>c1% '
 (check_literal) check_literal:After drop space:':' idx=4 ':c1%=1+RND*4 :UNTIL c%<>c1% '
 (check_literal) check_literal:After while():c1%=1+RND*4 :UNTIL c%<>c1% 
 (check_literal) check_literal:ret1 

 (scan_literal) scan_literal:lit=':' 'c1%=1+RND*4 :UNTIL c%<>c1% '
 (scan_literal) scan_literal:After drop space:'c1%=1+RND*4 :UNTIL c%<>c1% '
 (scan_literal) scan_literal:while loop:c1%=1+RND*4 :UNTIL c%<>c1% 
 (scan_literal) scan_literal:ret1

 (check_line) check_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'c1%=1+RND*4 :UNTIL c%<>c1% ':
    (check_vname) check_vname ret1 '%=1+RND*4 :UNTIL c%<>c1% ':
   (check_variable) check_variable: '%=1+RND*4 :UNTIL c%<>c1% '
   (check_variable) check_variable: Ary test '=1+RND*4 :UNTIL c%<>c1% '

    (check_literal) check_literal:lit='(' idx=8 '=1+RND*4 :UNTIL c%<>c1% '
    (check_literal) check_literal:After drop space:'(' idx=8 '=1+RND*4 :UNTIL c%<>c1% '
    (check_literal)   '(' != '='
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=8 '=1+RND*4 :UNTIL c%<>c1% '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=8 '=1+RND*4 :UNTIL c%<>c1% '
  (check_literal) check_literal:After while():1+RND*4 :UNTIL c%<>c1% 
  (check_literal) check_literal:ret1 

  (check_expression) check_expression: '1+RND*4 :UNTIL c%<>c1% '

   (check_eitem) check_eitem: '1+RND*4 :UNTIL c%<>c1% '

    (check_operator) check_operator: 1+RND*4 :UNTIL c%<>c1% 

     (check_literal) check_literal:lit=' ,' idx=9 '1+RND*4 :UNTIL c%<>c1% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=9 '1+RND*4 :UNTIL c%<>c1% '
     (check_literal)   ',' != '1'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: '1+RND*4 :UNTIL c%<>c1% '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=9 '1+RND*4 :UNTIL c%<>c1% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=9 '1+RND*4 :UNTIL c%<>c1% '
     (check_literal)   '%' != '1'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=9 '1+RND*4 :UNTIL c%<>c1% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=9 '1+RND*4 :UNTIL c%<>c1% '
     (check_literal)   '"' != '1'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '1+RND*4 :UNTIL c%<>c1% '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: '+RND*4 :UNTIL c%<>c1% '

    (check_operator) check_operator: +RND*4 :UNTIL c%<>c1% 

     (check_literal) check_literal:lit=' ,' idx=10 '+RND*4 :UNTIL c%<>c1% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=10 '+RND*4 :UNTIL c%<>c1% '
     (check_literal)   ',' != '+'
     (check_literal) check_literal: ret0
    (check_operator) ret1:is comma: 0
   (check_eitem) check_eitem:ret1 comma:1

   (check_eitem) check_eitem: 'RND*4 :UNTIL c%<>c1% '

    (check_operator) check_operator: RND*4 :UNTIL c%<>c1% 

     (check_literal) check_literal:lit=' ,' idx=11 'RND*4 :UNTIL c%<>c1% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=11 'RND*4 :UNTIL c%<>c1% '
     (check_literal)   ',' != 'R'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'RND*4 :UNTIL c%<>c1% '
    (check_function) check_function: ret1 Found fn=>'RND'
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: '*4 :UNTIL c%<>c1% '

    (check_operator) check_operator: *4 :UNTIL c%<>c1% 

     (check_literal) check_literal:lit=' ,' idx=14 '*4 :UNTIL c%<>c1% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=14 '*4 :UNTIL c%<>c1% '
     (check_literal)   ',' != '*'
     (check_literal) check_literal: ret0
    (check_operator) ret1:is comma: 0
   (check_eitem) check_eitem:ret1 comma:1

   (check_eitem) check_eitem: '4 :UNTIL c%<>c1% '

    (check_operator) check_operator: 4 :UNTIL c%<>c1% 

     (check_literal) check_literal:lit=' ,' idx=15 '4 :UNTIL c%<>c1% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=15 '4 :UNTIL c%<>c1% '
     (check_literal)   ',' != '4'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: '4 :UNTIL c%<>c1% '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=15 '4 :UNTIL c%<>c1% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=15 '4 :UNTIL c%<>c1% '
     (check_literal)   '%' != '4'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=15 '4 :UNTIL c%<>c1% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=15 '4 :UNTIL c%<>c1% '
     (check_literal)   '"' != '4'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '4 :UNTIL c%<>c1% '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: ' :UNTIL c%<>c1% '

    (check_operator) check_operator:  :UNTIL c%<>c1% 

     (check_literal) check_literal:lit=' ,' idx=17 ':UNTIL c%<>c1% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=17 ':UNTIL c%<>c1% '
     (check_literal)   ',' != ':'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: ':UNTIL c%<>c1% '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=16 ' :UNTIL c%<>c1% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=17 ':UNTIL c%<>c1% '
     (check_literal)   '%' != ':'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=16 ' :UNTIL c%<>c1% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=17 ':UNTIL c%<>c1% '
     (check_literal)   '"' != ':'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: ':UNTIL c%<>c1% '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname ':UNTIL c%<>c1% ':
      (check_vname) check_vname ret0 ':UNTIL c%<>c1% ':
     (check_variable) check_variable:ret0 
    (check_atom) check_atom:ret1

    (check_sub_expr) check_sub_expr:

     (check_literal) check_literal:lit=' (' idx=16 ' :UNTIL c%<>c1% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'(' idx=17 ':UNTIL c%<>c1% '
     (check_literal)   '(' != ':'
     (check_literal) check_literal: ret0
    (check_sub_expr) check_sub_expr: ret0
   (check_eitem) check_eitem:ret0
  (check_expression) check_expression:ret1 ' :UNTIL c%<>c1% '
 (check_assignment) check_assignment:ret1
(check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=16, ' :UNTIL c%<>c1% '
========================================================
 DO :c1%=1+RND*4 :UNTIL c%<>c1% 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'c1%=1+RND*4 :UNTIL c%<>c1% ':
    (check_vname) check_vname ret1 '%=1+RND*4 :UNTIL c%<>c1% ':
   (check_variable) check_variable: '%=1+RND*4 :UNTIL c%<>c1% '
   (check_variable) check_variable: Ary test '=1+RND*4 :UNTIL c%<>c1% '

    (check_literal) check_literal:lit='(' idx=8 '=1+RND*4 :UNTIL c%<>c1% '
    (check_literal) check_literal:After drop space:'(' idx=8 '=1+RND*4 :UNTIL c%<>c1% '
    (check_literal)   '(' != '='
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=8 '=1+RND*4 :UNTIL c%<>c1% '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=8 '=1+RND*4 :UNTIL c%<>c1% '
  (check_literal) check_literal:After while():1+RND*4 :UNTIL c%<>c1% 
  (check_literal) check_literal:ret1 

  (check_expression) check_expression: '1+RND*4 :UNTIL c%<>c1% '

   (check_eitem) check_eitem: '1+RND*4 :UNTIL c%<>c1% '

    (check_operator) check_operator: 1+RND*4 :UNTIL c%<>c1% 

     (check_literal) check_literal:lit=' ,' idx=9 '1+RND*4 :UNTIL c%<>c1% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=9 '1+RND*4 :UNTIL c%<>c1% '
     (check_literal)   ',' != '1'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: '1+RND*4 :UNTIL c%<>c1% '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=9 '1+RND*4 :UNTIL c%<>c1% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=9 '1+RND*4 :UNTIL c%<>c1% '
     (check_literal)   '%' != '1'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=9 '1+RND*4 :UNTIL c%<>c1% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=9 '1+RND*4 :UNTIL c%<>c1% '
     (check_literal)   '"' != '1'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '1+RND*4 :UNTIL c%<>c1% '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: '+RND*4 :UNTIL c%<>c1% '

    (check_operator) check_operator: +RND*4 :UNTIL c%<>c1% 

     (check_literal) check_literal:lit=' ,' idx=10 '+RND*4 :UNTIL c%<>c1% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=10 '+RND*4 :UNTIL c%<>c1% '
     (check_literal)   ',' != '+'
     (check_literal) check_literal: ret0
    (check_operator) ret1:is comma: 0
   (check_eitem) check_eitem:ret1 comma:1

   (check_eitem) check_eitem: 'RND*4 :UNTIL c%<>c1% '

    (check_operator) check_operator: RND*4 :UNTIL c%<>c1% 

     (check_literal) check_literal:lit=' ,' idx=11 'RND*4 :UNTIL c%<>c1% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=11 'RND*4 :UNTIL c%<>c1% '
     (check_literal)   ',' != 'R'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'RND*4 :UNTIL c%<>c1% '
    (check_function) check_function: ret1 Found fn=>'RND'
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: '*4 :UNTIL c%<>c1% '

    (check_operator) check_operator: *4 :UNTIL c%<>c1% 

     (check_literal) check_literal:lit=' ,' idx=14 '*4 :UNTIL c%<>c1% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=14 '*4 :UNTIL c%<>c1% '
     (check_literal)   ',' != '*'
     (check_literal) check_literal: ret0
    (check_operator) ret1:is comma: 0
   (check_eitem) check_eitem:ret1 comma:1

   (check_eitem) check_eitem: '4 :UNTIL c%<>c1% '

    (check_operator) check_operator: 4 :UNTIL c%<>c1% 

     (check_literal) check_literal:lit=' ,' idx=15 '4 :UNTIL c%<>c1% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=15 '4 :UNTIL c%<>c1% '
     (check_literal)   ',' != '4'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: '4 :UNTIL c%<>c1% '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=15 '4 :UNTIL c%<>c1% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=15 '4 :UNTIL c%<>c1% '
     (check_literal)   '%' != '4'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=15 '4 :UNTIL c%<>c1% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=15 '4 :UNTIL c%<>c1% '
     (check_literal)   '"' != '4'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '4 :UNTIL c%<>c1% '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: ' :UNTIL c%<>c1% '

    (check_operator) check_operator:  :UNTIL c%<>c1% 

     (check_literal) check_literal:lit=' ,' idx=17 ':UNTIL c%<>c1% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=17 ':UNTIL c%<>c1% '
     (check_literal)   ',' != ':'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: ':UNTIL c%<>c1% '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=16 ' :UNTIL c%<>c1% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=17 ':UNTIL c%<>c1% '
     (check_literal)   '%' != ':'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=16 ' :UNTIL c%<>c1% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=17 ':UNTIL c%<>c1% '
     (check_literal)   '"' != ':'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: ':UNTIL c%<>c1% '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname ':UNTIL c%<>c1% ':
      (check_vname) check_vname ret0 ':UNTIL c%<>c1% ':
     (check_variable) check_variable:ret0 
    (check_atom) check_atom:ret1

    (check_sub_expr) check_sub_expr:

     (check_literal) check_literal:lit=' (' idx=16 ' :UNTIL c%<>c1% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'(' idx=17 ':UNTIL c%<>c1% '
     (check_literal)   '(' != ':'
     (check_literal) check_literal: ret0
    (check_sub_expr) check_sub_expr: ret0
   (check_eitem) check_eitem:ret0
  (check_expression) check_expression:ret1 ' :UNTIL c%<>c1% '
 (check_assignment) check_assignment:ret1

 (scan_assignment) scan_assignment:

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'c1%=1+RND*4 :UNTIL c%<>c1% '
   (scan_vname) scan_vname: ret1 'c1'
  (scan_variable) scan_variable: '%=1+RND*4 :UNTIL c%<>c1% ' vname='c1'
  (scan_variable) scan_variable: Ary test '=1+RND*4 :UNTIL c%<>c1% '

   (check_literal) check_literal:lit='(' idx=8 '=1+RND*4 :UNTIL c%<>c1% '
   (check_literal) check_literal:After drop space:'(' idx=8 '=1+RND*4 :UNTIL c%<>c1% '
   (check_literal)   '(' != '='
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='c1%' is str:0 int:1 flt:0 ary:0
   Frst:1 T:'c1%' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:c1% is not function
token_is_variable: tok:'c1%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:c1% is not function
 (init_get_name) 
init_get_name:'c1%'
 (init_get_name) 
init_get_name:'c1%'
 (get_name) 
get_name:gn:'c1%'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] i i c1%
 (print_var_info) 
VAR INFO: '               c1%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0

  (scan_assignment_equals) scan_assignment_equals:lit=' =' '=1+RND*4 :UNTIL c%<>c1% '
  (scan_assignment_equals) scan_assignment_equals:After drop space:'=1+RND*4 :UNTIL c%<>c1% '
  (scan_assignment_equals) scan_assignment_equals:while loop:=1+RND*4 :UNTIL c%<>c1% 
   Frst:0 T:':=' exptype:i
  (operator_precedence) 
:= is operator
':=' is operator
  (process_token) 
Token is operator o1 name::= o2 name:
  (process_token) 
opr1:1 opr2:0
Push 1
 Push:':='
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (1)

  (op_stack_print) 
000: := type:0
  (op_stack_print) 
------------------

  (scan_assignment_equals) scan_assignment_equals:ret1

  (scan_expression) scan_expression: '1+RND*4 :UNTIL c%<>c1% '

   (check_eitem) check_eitem: '1+RND*4 :UNTIL c%<>c1% '

    (check_operator) check_operator: 1+RND*4 :UNTIL c%<>c1% 

     (check_literal) check_literal:lit=' ,' idx=9 '1+RND*4 :UNTIL c%<>c1% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=9 '1+RND*4 :UNTIL c%<>c1% '
     (check_literal)   ',' != '1'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: '1+RND*4 :UNTIL c%<>c1% '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=9 '1+RND*4 :UNTIL c%<>c1% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=9 '1+RND*4 :UNTIL c%<>c1% '
     (check_literal)   '%' != '1'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=9 '1+RND*4 :UNTIL c%<>c1% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=9 '1+RND*4 :UNTIL c%<>c1% '
     (check_literal)   '"' != '1'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '1+RND*4 :UNTIL c%<>c1% '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (scan_eitem) scan_eitem:

    (check_operator) check_operator: 1+RND*4 :UNTIL c%<>c1% 

     (check_literal) check_literal:lit=' ,' idx=9 '1+RND*4 :UNTIL c%<>c1% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=9 '1+RND*4 :UNTIL c%<>c1% '
     (check_literal)   ',' != '1'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: '1+RND*4 :UNTIL c%<>c1% '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=9 '1+RND*4 :UNTIL c%<>c1% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=9 '1+RND*4 :UNTIL c%<>c1% '
     (check_literal)   '%' != '1'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=9 '1+RND*4 :UNTIL c%<>c1% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=9 '1+RND*4 :UNTIL c%<>c1% '
     (check_literal)   '"' != '1'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '1+RND*4 :UNTIL c%<>c1% '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1

    (scan_atom) scan_atom:

     (check_literal) check_literal:lit=' %' idx=9 '1+RND*4 :UNTIL c%<>c1% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=9 '1+RND*4 :UNTIL c%<>c1% '
     (check_literal)   '%' != '1'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=9 '1+RND*4 :UNTIL c%<>c1% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=9 '1+RND*4 :UNTIL c%<>c1% '
     (check_literal)   '"' != '1'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '1+RND*4 :UNTIL c%<>c1% '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1

     (scan_number) scan_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '1+RND*4 :UNTIL c%<>c1% '
      (check_integer) check_integer:ret1

      (scan_integer) scan_integer:
      (scan_integer) scan_integer:ret1
   Frst:0 T:'1' exptype:i
     (operator_precedence) 
:= is operator
modify_expression_type:Inittype:i Intype:i Outtype:i
(  output_integer) [i,()] i i 1
     (scan_integer) scan_integer:ret1  1
    (scan_atom) scan_atom:ret1
   (scan_expression) n commas now:0

    (check_eitem) check_eitem: '+RND*4 :UNTIL c%<>c1% '

     (check_operator) check_operator: +RND*4 :UNTIL c%<>c1% 

      (check_literal) check_literal:lit=' ,' idx=10 '+RND*4 :UNTIL c%<>c1% '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=10 '+RND*4 :UNTIL c%<>c1% '
      (check_literal)   ',' != '+'
      (check_literal) check_literal: ret0
     (check_operator) ret1:is comma: 0
    (check_eitem) check_eitem:ret1 comma:1

    (scan_eitem) scan_eitem:

     (check_operator) check_operator: +RND*4 :UNTIL c%<>c1% 

      (check_literal) check_literal:lit=' ,' idx=10 '+RND*4 :UNTIL c%<>c1% '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=10 '+RND*4 :UNTIL c%<>c1% '
      (check_literal)   ',' != '+'
      (check_literal) check_literal: ret0
     (check_operator) ret1:is comma: 0

     (scan_operator) scan_operator: '+RND*4 :UNTIL c%<>c1% '

      (check_literal) check_literal:lit=' ,' idx=10 '+RND*4 :UNTIL c%<>c1% '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=10 '+RND*4 :UNTIL c%<>c1% '
      (check_literal)   ',' != '+'
      (check_literal) check_literal: ret0
     (scan_operator) scan_operator: ret1 'RND*4 :UNTIL c%<>c1% '
   Frst:0 T:'+' exptype:i
    (operator_precedence) 
+ is operator
    (operator_precedence) 
:= is operator
'+' is operator
    (process_token) 
Token is operator o1 name:+ o2 name::=
    (process_token) 
opr1:3 opr2:1
    (operator_precedence) 
:= is operator
    (operator_precedence) 
:= is operator
Push 1
 Push:'+'
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (2)

    (op_stack_print) 
000: := type:0
    (op_stack_print) 
001: + type:0
    (op_stack_print) 
------------------

    (scan_eitem) Is comma;0
    (scan_expression) n commas now:0

     (check_eitem) check_eitem: 'RND*4 :UNTIL c%<>c1% '

      (check_operator) check_operator: RND*4 :UNTIL c%<>c1% 

       (check_literal) check_literal:lit=' ,' idx=11 'RND*4 :UNTIL c%<>c1% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=11 'RND*4 :UNTIL c%<>c1% '
       (check_literal)   ',' != 'R'
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: 'RND*4 :UNTIL c%<>c1% '
      (check_function) check_function: ret1 Found fn=>'RND'
     (check_eitem) check_eitem:ret1

     (scan_eitem) scan_eitem:

      (check_operator) check_operator: RND*4 :UNTIL c%<>c1% 

       (check_literal) check_literal:lit=' ,' idx=11 'RND*4 :UNTIL c%<>c1% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=11 'RND*4 :UNTIL c%<>c1% '
       (check_literal)   ',' != 'R'
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: 'RND*4 :UNTIL c%<>c1% '
      (check_function) check_function: ret1 Found fn=>'RND'

      (scan_function) scan_function:
   Frst:0 T:'RND' exptype:i
      (operator_precedence) 
+ is operator
      (token_is_function) 
token_is_function:
      (token_is_function) RND is function
      (function_return_type) 
function_return_type: 'RND' =>f
      (function_return_type) 
function_return_type: 'RND' =>1
process_token: 'RND' t=>f
 Push:'RND'
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (3)

      (op_stack_print) 
000: := type:0
      (op_stack_print) 
001: + type:0
      (op_stack_print) 
002: RND type:1
      (op_stack_print) 
------------------

Dummy argument expression added
   Frst:0 T:'(' exptype:i
(output_sub_start)
 Push:'('
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (4)

      (op_stack_print) 
000: := type:0
      (op_stack_print) 
001: + type:0
      (op_stack_print) 
002: RND type:1
      (op_stack_print) 
003: ( type:16
      (op_stack_print) 
------------------

   Frst:0 T:')' exptype:U
Pop 4
Pop '('
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (3)

      (op_stack_print) 
000: := type:0
      (op_stack_print) 
001: + type:0
      (op_stack_print) 
002: RND type:1
      (op_stack_print) 
------------------

(  output_sub_end)
      (token_is_function) 
token_is_function:
      (token_is_function) RND is function
Pop 5
Pop 'RND'
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (2)

      (op_stack_print) 
000: := type:0
      (op_stack_print) 
001: + type:0
      (op_stack_print) 
------------------

( output_function) [U,(i )] f f RND
(  output_sub_end)
      (scan_expression) n commas now:0

       (check_eitem) check_eitem: '*4 :UNTIL c%<>c1% '

        (check_operator) check_operator: *4 :UNTIL c%<>c1% 

         (check_literal) check_literal:lit=' ,' idx=14 '*4 :UNTIL c%<>c1% '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:',' idx=14 '*4 :UNTIL c%<>c1% '
         (check_literal)   ',' != '*'
         (check_literal) check_literal: ret0
        (check_operator) ret1:is comma: 0
       (check_eitem) check_eitem:ret1 comma:1

       (scan_eitem) scan_eitem:

        (check_operator) check_operator: *4 :UNTIL c%<>c1% 

         (check_literal) check_literal:lit=' ,' idx=14 '*4 :UNTIL c%<>c1% '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:',' idx=14 '*4 :UNTIL c%<>c1% '
         (check_literal)   ',' != '*'
         (check_literal) check_literal: ret0
        (check_operator) ret1:is comma: 0

        (scan_operator) scan_operator: '*4 :UNTIL c%<>c1% '

         (check_literal) check_literal:lit=' ,' idx=14 '*4 :UNTIL c%<>c1% '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:',' idx=14 '*4 :UNTIL c%<>c1% '
         (check_literal)   ',' != '*'
         (check_literal) check_literal: ret0
        (scan_operator) scan_operator: ret1 '4 :UNTIL c%<>c1% '
   Frst:0 T:'*' exptype:i
       (operator_precedence) 
* is operator
       (operator_precedence) 
+ is operator
'*' is operator
       (process_token) 
Token is operator o1 name:* o2 name:+
       (process_token) 
opr1:5 opr2:3
       (operator_precedence) 
+ is operator
       (operator_precedence) 
+ is operator
Push 1
 Push:'*'
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (3)

       (op_stack_print) 
000: := type:0
       (op_stack_print) 
001: + type:0
       (op_stack_print) 
002: * type:0
       (op_stack_print) 
------------------

       (scan_eitem) Is comma;0
       (scan_expression) n commas now:0

        (check_eitem) check_eitem: '4 :UNTIL c%<>c1% '

         (check_operator) check_operator: 4 :UNTIL c%<>c1% 

          (check_literal) check_literal:lit=' ,' idx=15 '4 :UNTIL c%<>c1% '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:',' idx=15 '4 :UNTIL c%<>c1% '
          (check_literal)   ',' != '4'
          (check_literal) check_literal: ret0
         (check_operator) ret0:is comma: 0

         (check_function) check_function: '4 :UNTIL c%<>c1% '
         (check_function) check_function: ret0

         (check_atom) check_atom:

          (check_literal) check_literal:lit=' %' idx=15 '4 :UNTIL c%<>c1% '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=15 '4 :UNTIL c%<>c1% '
          (check_literal)   '%' != '4'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=15 '4 :UNTIL c%<>c1% '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=15 '4 :UNTIL c%<>c1% '
          (check_literal)   '"' != '4'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '4 :UNTIL c%<>c1% '
           (check_integer) check_integer:ret1
          (check_number) check_number: ret1
         (check_atom) check_atom:ret1
        (check_eitem) check_eitem:ret1

        (scan_eitem) scan_eitem:

         (check_operator) check_operator: 4 :UNTIL c%<>c1% 

          (check_literal) check_literal:lit=' ,' idx=15 '4 :UNTIL c%<>c1% '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:',' idx=15 '4 :UNTIL c%<>c1% '
          (check_literal)   ',' != '4'
          (check_literal) check_literal: ret0
         (check_operator) ret0:is comma: 0

         (check_function) check_function: '4 :UNTIL c%<>c1% '
         (check_function) check_function: ret0

         (check_atom) check_atom:

          (check_literal) check_literal:lit=' %' idx=15 '4 :UNTIL c%<>c1% '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=15 '4 :UNTIL c%<>c1% '
          (check_literal)   '%' != '4'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=15 '4 :UNTIL c%<>c1% '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=15 '4 :UNTIL c%<>c1% '
          (check_literal)   '"' != '4'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '4 :UNTIL c%<>c1% '
           (check_integer) check_integer:ret1
          (check_number) check_number: ret1
         (check_atom) check_atom:ret1

         (scan_atom) scan_atom:

          (check_literal) check_literal:lit=' %' idx=15 '4 :UNTIL c%<>c1% '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=15 '4 :UNTIL c%<>c1% '
          (check_literal)   '%' != '4'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=15 '4 :UNTIL c%<>c1% '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=15 '4 :UNTIL c%<>c1% '
          (check_literal)   '"' != '4'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '4 :UNTIL c%<>c1% '
           (check_integer) check_integer:ret1
          (check_number) check_number: ret1

          (scan_number) scan_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '4 :UNTIL c%<>c1% '
           (check_integer) check_integer:ret1

           (scan_integer) scan_integer:
           (scan_integer) scan_integer:ret1
   Frst:0 T:'4' exptype:i
          (operator_precedence) 
* is operator
modify_expression_type:Inittype:i Intype:i Outtype:i
(  output_integer) [i,()] i i 4
          (scan_integer) scan_integer:ret1  4
         (scan_atom) scan_atom:ret1
        (scan_expression) n commas now:0

         (check_eitem) check_eitem: ' :UNTIL c%<>c1% '

          (check_operator) check_operator:  :UNTIL c%<>c1% 

           (check_literal) check_literal:lit=' ,' idx=17 ':UNTIL c%<>c1% '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:',' idx=17 ':UNTIL c%<>c1% '
           (check_literal)   ',' != ':'
           (check_literal) check_literal: ret0
          (check_operator) ret0:is comma: 0

          (check_function) check_function: ':UNTIL c%<>c1% '
          (check_function) check_function: ret0

          (check_atom) check_atom:

           (check_literal) check_literal:lit=' %' idx=16 ' :UNTIL c%<>c1% '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'%' idx=17 ':UNTIL c%<>c1% '
           (check_literal)   '%' != ':'
           (check_literal) check_literal: ret0

           (check_literal) check_literal:lit=' "' idx=16 ' :UNTIL c%<>c1% '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'"' idx=17 ':UNTIL c%<>c1% '
           (check_literal)   '"' != ':'
           (check_literal) check_literal: ret0

           (check_number) check_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret0

            (check_integer) check_integer: ':UNTIL c%<>c1% '
            (check_integer) check_integer:ret0
           (check_number) check_number: ret0

           (check_variable) check_variable:

            (check_vname) check_vname ':UNTIL c%<>c1% ':
            (check_vname) check_vname ret0 ':UNTIL c%<>c1% ':
           (check_variable) check_variable:ret0 
          (check_atom) check_atom:ret1

          (check_sub_expr) check_sub_expr:

           (check_literal) check_literal:lit=' (' idx=16 ' :UNTIL c%<>c1% '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'(' idx=17 ':UNTIL c%<>c1% '
           (check_literal)   '(' != ':'
           (check_literal) check_literal: ret0
          (check_sub_expr) check_sub_expr: ret0
         (check_eitem) check_eitem:ret0
        (scan_expression) scan_expression: ret1 ' :UNTIL c%<>c1% ' commas:0
       (scan_assignment) scan_assignment: ret1
Finalise stack
Pop '*'
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (2)

      (op_stack_print) 
000: := type:0
      (op_stack_print) 
001: + type:0
      (op_stack_print) 
------------------

( output_operator) [i,()] i i *
      (token_is_function) 
token_is_function:
      (token_is_function) 
token_is_function:* is not function
Pop '+'
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (1)

      (op_stack_print) 
000: := type:0
      (op_stack_print) 
------------------

( output_operator) [i,()] i i +
      (token_is_function) 
token_is_function:
      (token_is_function) 
token_is_function:+ is not function
Pop ':='
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (0)

      (op_stack_print) 
------------------

( output_operator) [i,()] i i :=
      (token_is_function) 
token_is_function:
      (token_is_function) 
token_is_function::= is not function
      (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'c1%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '1' nidx:10  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     f rq:f 'RND' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '4' nidx:16  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '*' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '+' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i ':=' nidx:0  0:
=================
 BE:c1%
type_check_stack_push: 'c1%'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (1)

      (type_check_stack_print) 
000: 'c1%' type:0
      (type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'c1%' type:i (0)
 BE:1
type_check_stack_push: '1'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (2)

      (type_check_stack_print) 
000: 'c1%' type:0
      (type_check_stack_print) 
001: '1' type:0
      (type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'c1%' type:i (0)
001: '1' type:i (0)
 BE:

Type Check Stack (2)

000: 'c1%' type:i (0)
001: '1' type:i (0)
 BE:

Type Check Stack (2)

000: 'c1%' type:i (0)
001: '1' type:i (0)
 BE:RND
FN: 0 args
      (function_return_type) 
function_return_type: 'RND' =>f
      (function_return_type) 
function_return_type: 'RND' =>1
ret_type;1 f
typecheck_expression:Ret type of RND : f
type_check_stack_push: '000'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (3)

      (type_check_stack_print) 
000: 'c1%' type:0
      (type_check_stack_print) 
001: '1' type:0
      (type_check_stack_print) 
002: '000' type:1
      (type_check_stack_print) 
------------------


Type Check Stack (3)

000: 'c1%' type:i (0)
001: '1' type:i (0)
002: '000' type:f (1)
 BE:

Type Check Stack (3)

000: 'c1%' type:i (0)
001: '1' type:i (0)
002: '000' type:f (1)
 BE:4
type_check_stack_push: '4'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (4)

      (type_check_stack_print) 
000: 'c1%' type:0
      (type_check_stack_print) 
001: '1' type:0
      (type_check_stack_print) 
002: '000' type:1
      (type_check_stack_print) 
003: '4' type:0
      (type_check_stack_print) 
------------------


Type Check Stack (4)

000: 'c1%' type:i (0)
001: '1' type:i (0)
002: '000' type:f (1)
003: '4' type:i (0)
 BE:*
BUFF_ID_OPERATOR
Found operator *
type_check_stack_pop: '4'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (3)

      (type_check_stack_print) 
000: 'c1%' type:0
      (type_check_stack_print) 
001: '1' type:0
      (type_check_stack_print) 
002: '000' type:1
      (type_check_stack_print) 
------------------

type_check_stack_pop: '000'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (2)

      (type_check_stack_print) 
000: 'c1%' type:0
      (type_check_stack_print) 
001: '1' type:0
      (type_check_stack_print) 
------------------

 Mutable type 0 1
type_with_least_conversion_from: i f => f
type_with_least_conversion_from: i f => f
 Autoconversion
 --------------
 Op1: type:0 req type:0
 Op2: type:1 req type:1
 BE:  type:1 req type:1
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i 'c1%'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i '1'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_FUNCTION     f rq:f 'RND'  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_INTEGER      i rq:i '4'  0:
=================
 Insert after 7 exp_buffer2_i:7
   Found at i:6
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i 'c1%'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i '1'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_FUNCTION     f rq:f 'RND'  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_INTEGER      i rq:i '4'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 7 5
=================
type_check_stack_push: '000'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (3)

      (type_check_stack_print) 
000: 'c1%' type:0
      (type_check_stack_print) 
001: '1' type:0
      (type_check_stack_print) 
002: '000' type:1
      (type_check_stack_print) 
------------------


Type Check Stack (3)

000: 'c1%' type:i (0)
001: '1' type:i (0)
002: '000' type:f (1)
 BE:+
BUFF_ID_OPERATOR
Found operator +
type_check_stack_pop: '000'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (2)

      (type_check_stack_print) 
000: 'c1%' type:0
      (type_check_stack_print) 
001: '1' type:0
      (type_check_stack_print) 
------------------

type_check_stack_pop: '1'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (1)

      (type_check_stack_print) 
000: 'c1%' type:0
      (type_check_stack_print) 
------------------

 Mutable type 1 0
type_with_least_conversion_from: f i => f
type_with_least_conversion_from: f i => f
 Autoconversion
 --------------
 Op1: type:1 req type:1
 Op2: type:0 req type:0
 BE:  type:1 req type:1
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i 'c1%'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i '1'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_FUNCTION     f rq:f 'RND'  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_INTEGER      i rq:i '4'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 7 5
(dump_exp_buffer2) N8 EXP_BUFF_ID_OPERATOR     f rq:f '*'  2: 7 5
=================
 Insert after 2 exp_buffer2_i:9
   Found at i:1
   Copied 8 to 9:
   Copied 7 to 8:
   Copied 6 to 7:
   Copied 5 to 6:
   Copied 4 to 5:
   Copied 3 to 4:
   Copied 2 to 3:
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i 'c1%'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i '1'  0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 8 2
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_FUNCTION     f rq:f 'RND'  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_INTEGER      i rq:i '4'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 7 5
(dump_exp_buffer2) N8 EXP_BUFF_ID_OPERATOR     f rq:f '*'  2: 7 5
=================
type_check_stack_push: '000'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (2)

      (type_check_stack_print) 
000: 'c1%' type:0
      (type_check_stack_print) 
001: '000' type:1
      (type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'c1%' type:i (0)
001: '000' type:f (1)
 BE::=
BUFF_ID_OPERATOR
Found operator :=
type_check_stack_pop: '000'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (1)

      (type_check_stack_print) 
000: 'c1%' type:0
      (type_check_stack_print) 
------------------

type_check_stack_pop: 'c1%'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (0)

      (type_check_stack_print) 
------------------

 Mutable type 1 0
type_with_least_conversion_from: f i => f
type_with_least_conversion_from: f i => f
 Autoconversion
 --------------
 Op1: type:1 req type:1
 Op2: type:0 req type:0
 BE:  type:1 req type:1
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i 'c1%'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i '1'  0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 8 2
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_FUNCTION     f rq:f 'RND'  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_INTEGER      i rq:i '4'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 7 5
(dump_exp_buffer2) N8 EXP_BUFF_ID_OPERATOR     f rq:f '*'  2: 7 5
(dump_exp_buffer2) N10 EXP_BUFF_ID_OPERATOR     f rq:f '+'  2: 8 2
=================
 Insert after 10 exp_buffer2_i:11
   Found at i:10
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i 'c1%'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i '1'  0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 8 2
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_FUNCTION     f rq:f 'RND'  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_INTEGER      i rq:i '4'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 7 5
(dump_exp_buffer2) N8 EXP_BUFF_ID_OPERATOR     f rq:f '*'  2: 7 5
(dump_exp_buffer2) N10 EXP_BUFF_ID_OPERATOR     f rq:f '+'  2: 8 2
(dump_exp_buffer2) N13 EXP_BUFF_ID_AUTOCON      i rq:i 'autocon f->i'  2: 10 1
=================
type_check_stack_push: '000'
      (type_check_stack_print) 
------------------
      (type_check_stack_print) 
Type Check Stack     (1)

      (type_check_stack_print) 
000: '000' type:0
      (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'c1%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '1' nidx:10  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     f rq:f 'RND' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '4' nidx:16  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '*' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '+' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i ':=' nidx:0  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i 'c1%'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i '1'  0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 8 2
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_FUNCTION     f rq:f 'RND'  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_INTEGER      i rq:i '4'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 7 5
(dump_exp_buffer2) N8 EXP_BUFF_ID_OPERATOR     f rq:f '*'  2: 7 5
(dump_exp_buffer2) N10 EXP_BUFF_ID_OPERATOR     f rq:f '+'  2: 8 2
(dump_exp_buffer2) N13 EXP_BUFF_ID_AUTOCON      i rq:i 'autocon f->i'  2: 10 1
(dump_exp_buffer2) N12 EXP_BUFF_ID_OPERATOR     i rq:i ':='  2: 10 1
=================
      (process_expression_types) 
==INFIX==

Var: c1% ary:0 NumIdx:0
infix_stack_push: 'c1%'
infix_stack_push: '1'
infix_stack_push: 'RND()'
infix_stack_push: '4'
infix_stack_pop: '4'
infix_stack_pop: 'RND()'
infix_stack_push: '(RND() * 4)'
infix_stack_pop: '(RND() * 4)'
infix_stack_pop: '1'
infix_stack_push: '(1 + (RND() * 4))'
infix_stack_pop: '(1 + (RND() * 4))'
infix_stack_pop: 'c1%'
infix_stack_push: '(c1% := (1 + (RND() * 4)))'
infix_stack_pop: '(c1% := (1 + (RND() * 4)))'
      (process_expression_types) ==(c1% := (1 + (RND() * 4)))==
      (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i c1%  0:
(    output_qcode) N2 EXP_BUFF_ID_INTEGER      i rq:i 1  0:
(    output_qcode) N11 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 8 2
(    output_qcode) N3 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N4 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N5 EXP_BUFF_ID_FUNCTION     f rq:f RND  0:
(    output_qcode) N6 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N7 EXP_BUFF_ID_INTEGER      i rq:i 4  0:
(    output_qcode) N9 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 7 5
(    output_qcode) N8 EXP_BUFF_ID_OPERATOR     f rq:f *  2: 7 5
(    output_qcode) N10 EXP_BUFF_ID_OPERATOR     f rq:f +  2: 8 2
(    output_qcode) N13 EXP_BUFF_ID_AUTOCON      i rq:i autocon f->i  2: 10 1
(    output_qcode) N12 EXP_BUFF_ID_OPERATOR     i rq:i :=  2: 10 1

       (check_literal) check_literal:lit=':' idx=17 ':UNTIL c%<>c1% '
       (check_literal) check_literal:After drop space:':' idx=17 ':UNTIL c%<>c1% '
       (check_literal) check_literal:After while():UNTIL c%<>c1% 
       (check_literal) check_literal:ret1 

       (scan_literal) scan_literal:lit=':' 'UNTIL c%<>c1% '
       (scan_literal) scan_literal:After drop space:'UNTIL c%<>c1% '
       (scan_literal) scan_literal:while loop:UNTIL c%<>c1% 
       (scan_literal) scan_literal:ret1

       (check_line) check_line:

        (check_assignment) check_assignment:

         (check_variable) check_variable:

          (check_vname) check_vname 'UNTIL c%<>c1% ':
          (check_vname) check_vname ret1 ' c%<>c1% ':
         (check_variable) check_variable: ' c%<>c1% '
         (check_variable) check_variable: Ary test ' c%<>c1% '

          (check_literal) check_literal:lit='(' idx=23 ' c%<>c1% '
          (check_literal) check_literal:After drop space:'(' idx=23 ' c%<>c1% '
          (check_literal)   '(' != ' '
          (check_literal) check_literal: ret0
         (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
        (check_variable) check_variable:ret1 

        (check_literal) check_literal:lit=' =' idx=23 ' c%<>c1% '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'=' idx=24 'c%<>c1% '
        (check_literal)   '=' != 'c'
        (check_literal) check_literal: ret0
       (check_assignment) check_assignment:ret0

       (check_proc_call) check_proc_call:

        (check_textlabel) check_textlabel: 'UNTIL c%<>c1% '
        (check_textlabel) check_textlabel:ret0
       (check_proc_call) check_proc_call:ret0

       (check_command) check_command:
       (check_command) check_command: ret0

       (check_function) check_function: 'UNTIL c%<>c1% '
       (check_function) check_function: ret0

       (check_literal) check_literal:lit=' IF' idx=18 'UNTIL c%<>c1% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'IF' idx=18 'UNTIL c%<>c1% '
       (check_literal)   'I' != 'U'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' ELSEIF' idx=18 'UNTIL c%<>c1% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'ELSEIF' idx=18 'UNTIL c%<>c1% '
       (check_literal)   'E' != 'U'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' ELSE' idx=18 'UNTIL c%<>c1% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'ELSE' idx=18 'UNTIL c%<>c1% '
       (check_literal)   'E' != 'U'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' ENDIF' idx=18 'UNTIL c%<>c1% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'ENDIF' idx=18 'UNTIL c%<>c1% '
       (check_literal)   'E' != 'U'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' DO' idx=18 'UNTIL c%<>c1% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'DO' idx=18 'UNTIL c%<>c1% '
       (check_literal)   'D' != 'U'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' WHILE' idx=18 'UNTIL c%<>c1% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'WHILE' idx=18 'UNTIL c%<>c1% '
       (check_literal)   'W' != 'U'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' ENDWH' idx=18 'UNTIL c%<>c1% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'ENDWH' idx=18 'UNTIL c%<>c1% '
       (check_literal)   'E' != 'U'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' REPEAT' idx=18 'UNTIL c%<>c1% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'REPEAT' idx=18 'UNTIL c%<>c1% '
       (check_literal)   'R' != 'U'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' UNTIL' idx=18 'UNTIL c%<>c1% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'UNTIL' idx=18 'UNTIL c%<>c1% '
       (check_literal) check_literal:After while(): c%<>c1% 
       (check_literal) check_literal:ret1 

       (check_expression) check_expression: 'c%<>c1% '

        (check_eitem) check_eitem: 'c%<>c1% '

         (check_operator) check_operator: c%<>c1% 

          (check_literal) check_literal:lit=' ,' idx=24 'c%<>c1% '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:',' idx=24 'c%<>c1% '
          (check_literal)   ',' != 'c'
          (check_literal) check_literal: ret0
         (check_operator) ret0:is comma: 0

         (check_function) check_function: 'c%<>c1% '
         (check_function) check_function: ret0

         (check_atom) check_atom:

          (check_literal) check_literal:lit=' %' idx=24 'c%<>c1% '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=24 'c%<>c1% '
          (check_literal)   '%' != 'c'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=24 'c%<>c1% '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=24 'c%<>c1% '
          (check_literal)   '"' != 'c'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: 'c%<>c1% '
           (check_integer) check_integer:ret0
          (check_number) check_number: ret0

          (check_variable) check_variable:

           (check_vname) check_vname 'c%<>c1% ':
           (check_vname) check_vname ret1 '%<>c1% ':
          (check_variable) check_variable: '%<>c1% '
          (check_variable) check_variable: Ary test '<>c1% '

           (check_literal) check_literal:lit='(' idx=26 '<>c1% '
           (check_literal) check_literal:After drop space:'(' idx=26 '<>c1% '
           (check_literal)   '(' != '<'
           (check_literal) check_literal: ret0
          (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
         (check_variable) check_variable:ret1 
        (check_atom) check_atom:ret1
       (check_eitem) check_eitem:ret1

       (check_eitem) check_eitem: '<>c1% '

        (check_operator) check_operator: <>c1% 

         (check_literal) check_literal:lit=' ,' idx=26 '<>c1% '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:',' idx=26 '<>c1% '
         (check_literal)   ',' != '<'
         (check_literal) check_literal: ret0
        (check_operator) ret1:is comma: 0
       (check_eitem) check_eitem:ret1 comma:1

       (check_eitem) check_eitem: 'c1% '

        (check_operator) check_operator: c1% 

         (check_literal) check_literal:lit=' ,' idx=28 'c1% '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:',' idx=28 'c1% '
         (check_literal)   ',' != 'c'
         (check_literal) check_literal: ret0
        (check_operator) ret0:is comma: 0

        (check_function) check_function: 'c1% '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=28 'c1% '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=28 'c1% '
         (check_literal)   '%' != 'c'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=28 'c1% '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=28 'c1% '
         (check_literal)   '"' != 'c'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: 'c1% '
          (check_integer) check_integer:ret0
         (check_number) check_number: ret0

         (check_variable) check_variable:

          (check_vname) check_vname 'c1% ':
          (check_vname) check_vname ret1 '% ':
         (check_variable) check_variable: '% '
         (check_variable) check_variable: Ary test ' '

          (check_literal) check_literal:lit='(' idx=31 ' '
          (check_literal) check_literal:After drop space:'(' idx=31 ' '
          (check_literal)   '(' != ' '
          (check_literal) check_literal: ret0
         (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
        (check_variable) check_variable:ret1 
       (check_atom) check_atom:ret1
      (check_eitem) check_eitem:ret1

      (check_eitem) check_eitem: ' '

       (check_operator) check_operator:  

        (check_literal) check_literal:lit=' ,' idx=32 ''
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:',' idx=32 ''
        (check_literal) check_literal  ret0 Empty test string
       (check_operator) ret0:is comma: 0

       (check_function) check_function: ''
       (check_function) check_function: ret0

       (check_atom) check_atom:

        (check_literal) check_literal:lit=' %' idx=31 ' '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'%' idx=32 ''
        (check_literal) check_literal  ret0 Empty test string

        (check_literal) check_literal:lit=' "' idx=31 ' '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'"' idx=32 ''
        (check_literal) check_literal  ret0 Empty test string

        (check_number) check_number:

         (check_float) check_float:
         (isfloatdigit) isfloatdigit:
         (check_float) check_float: ret0

         (check_integer) check_integer: ''
         (check_integer) check_integer:ret0
        (check_number) check_number: ret0

        (check_variable) check_variable:

         (check_vname) check_vname '':
         (check_vname) check_vname ret0 '':
        (check_variable) check_variable:ret0 
       (check_atom) check_atom:ret1

       (check_sub_expr) check_sub_expr:

        (check_literal) check_literal:lit=' (' idx=31 ' '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'(' idx=32 ''
        (check_literal) check_literal  ret0 Empty test string
       (check_sub_expr) check_sub_expr: ret0
      (check_eitem) check_eitem:ret0
     (check_expression) check_expression:ret1 ' '
    (check_line) check_line:ret1
   (scan_cline) scan_cline: Checked len=1, ' '
========================================================
 DO :c1%=1+RND*4 :UNTIL c%<>c1% 
========================================================
(output_expression_start)

    (scan_line) scan_line:

     (check_assignment) check_assignment:

      (check_variable) check_variable:

       (check_vname) check_vname 'UNTIL c%<>c1% ':
       (check_vname) check_vname ret1 ' c%<>c1% ':
      (check_variable) check_variable: ' c%<>c1% '
      (check_variable) check_variable: Ary test ' c%<>c1% '

       (check_literal) check_literal:lit='(' idx=23 ' c%<>c1% '
       (check_literal) check_literal:After drop space:'(' idx=23 ' c%<>c1% '
       (check_literal)   '(' != ' '
       (check_literal) check_literal: ret0
      (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
     (check_variable) check_variable:ret1 

     (check_literal) check_literal:lit=' =' idx=23 ' c%<>c1% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'=' idx=24 'c%<>c1% '
     (check_literal)   '=' != 'c'
     (check_literal) check_literal: ret0
    (check_assignment) check_assignment:ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) check_textlabel: 'UNTIL c%<>c1% '
     (check_textlabel) check_textlabel:ret0
    (check_proc_call) check_proc_call:ret0

    (check_command) check_command:
    (check_command) check_command: ret0

    (check_function) check_function: 'UNTIL c%<>c1% '
    (check_function) check_function: ret0

    (check_literal) check_literal:lit=' IF' idx=18 'UNTIL c%<>c1% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'IF' idx=18 'UNTIL c%<>c1% '
    (check_literal)   'I' != 'U'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' ELSEIF' idx=18 'UNTIL c%<>c1% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'ELSEIF' idx=18 'UNTIL c%<>c1% '
    (check_literal)   'E' != 'U'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' ELSE' idx=18 'UNTIL c%<>c1% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'ELSE' idx=18 'UNTIL c%<>c1% '
    (check_literal)   'E' != 'U'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' ENDIF' idx=18 'UNTIL c%<>c1% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'ENDIF' idx=18 'UNTIL c%<>c1% '
    (check_literal)   'E' != 'U'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' DO' idx=18 'UNTIL c%<>c1% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'DO' idx=18 'UNTIL c%<>c1% '
    (check_literal)   'D' != 'U'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' WHILE' idx=18 'UNTIL c%<>c1% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'WHILE' idx=18 'UNTIL c%<>c1% '
    (check_literal)   'W' != 'U'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' ENDWH' idx=18 'UNTIL c%<>c1% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'ENDWH' idx=18 'UNTIL c%<>c1% '
    (check_literal)   'E' != 'U'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' REPEAT' idx=18 'UNTIL c%<>c1% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'REPEAT' idx=18 'UNTIL c%<>c1% '
    (check_literal)   'R' != 'U'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' UNTIL' idx=18 'UNTIL c%<>c1% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'UNTIL' idx=18 'UNTIL c%<>c1% '
    (check_literal) check_literal:After while(): c%<>c1% 
    (check_literal) check_literal:ret1 

    (scan_literal) scan_literal:lit=' UNTIL' 'UNTIL c%<>c1% '
    (scan_literal) scan_literal:After drop space:'UNTIL c%<>c1% '
    (scan_literal) scan_literal:while loop:UNTIL c%<>c1% 
    (scan_literal) scan_literal:while loop:NTIL c%<>c1% 
    (scan_literal) scan_literal:while loop:TIL c%<>c1% 
    (scan_literal) scan_literal:while loop:IL c%<>c1% 
    (scan_literal) scan_literal:while loop:L c%<>c1% 
   Frst:1 T:'UNTIL' exptype:U
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:UNTIL is not function
token_is_variable: tok:'UNTIL'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:UNTIL is not function
    (init_get_name) 
init_get_name:'UNTIL'
    (init_get_name) 
init_get_name:'UNTIL'
    (get_name) 
get_name:gn:'UNTIL'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] f f UNTIL
    (scan_literal) scan_literal:ret1

    (scan_expression) scan_expression: ' c%<>c1% '

     (check_eitem) check_eitem: 'c%<>c1% '

      (check_operator) check_operator: c%<>c1% 

       (check_literal) check_literal:lit=' ,' idx=24 'c%<>c1% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=24 'c%<>c1% '
       (check_literal)   ',' != 'c'
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: 'c%<>c1% '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=24 'c%<>c1% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=24 'c%<>c1% '
       (check_literal)   '%' != 'c'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=24 'c%<>c1% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=24 'c%<>c1% '
       (check_literal)   '"' != 'c'
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: 'c%<>c1% '
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname 'c%<>c1% ':
        (check_vname) check_vname ret1 '%<>c1% ':
       (check_variable) check_variable: '%<>c1% '
       (check_variable) check_variable: Ary test '<>c1% '

        (check_literal) check_literal:lit='(' idx=26 '<>c1% '
        (check_literal) check_literal:After drop space:'(' idx=26 '<>c1% '
        (check_literal)   '(' != '<'
        (check_literal) check_literal: ret0
       (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
      (check_variable) check_variable:ret1 
     (check_atom) check_atom:ret1
    (check_eitem) check_eitem:ret1

    (scan_eitem) scan_eitem:

     (check_operator) check_operator: c%<>c1% 

      (check_literal) check_literal:lit=' ,' idx=24 'c%<>c1% '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=24 'c%<>c1% '
      (check_literal)   ',' != 'c'
      (check_literal) check_literal: ret0
     (check_operator) ret0:is comma: 0

     (check_function) check_function: 'c%<>c1% '
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=24 'c%<>c1% '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=24 'c%<>c1% '
      (check_literal)   '%' != 'c'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=24 'c%<>c1% '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=24 'c%<>c1% '
      (check_literal)   '"' != 'c'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: 'c%<>c1% '
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname 'c%<>c1% ':
       (check_vname) check_vname ret1 '%<>c1% ':
      (check_variable) check_variable: '%<>c1% '
      (check_variable) check_variable: Ary test '<>c1% '

       (check_literal) check_literal:lit='(' idx=26 '<>c1% '
       (check_literal) check_literal:After drop space:'(' idx=26 '<>c1% '
       (check_literal)   '(' != '<'
       (check_literal) check_literal: ret0
      (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
     (check_variable) check_variable:ret1 
    (check_atom) check_atom:ret1

    (scan_atom) scan_atom:

     (check_literal) check_literal:lit=' %' idx=24 'c%<>c1% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=24 'c%<>c1% '
     (check_literal)   '%' != 'c'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=24 'c%<>c1% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=24 'c%<>c1% '
     (check_literal)   '"' != 'c'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'c%<>c1% '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'c%<>c1% ':
      (check_vname) check_vname ret1 '%<>c1% ':
     (check_variable) check_variable: '%<>c1% '
     (check_variable) check_variable: Ary test '<>c1% '

      (check_literal) check_literal:lit='(' idx=26 '<>c1% '
      (check_literal) check_literal:After drop space:'(' idx=26 '<>c1% '
      (check_literal)   '(' != '<'
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
    (check_variable) check_variable:ret1 

    (scan_variable) scan_variable:

     (scan_vname) scan_vname: 'c%<>c1% '
     (scan_vname) scan_vname: ret1 'c'
    (scan_variable) scan_variable: '%<>c1% ' vname='c'
    (scan_variable) scan_variable: Ary test '<>c1% '

     (check_literal) check_literal:lit='(' idx=26 '<>c1% '
     (check_literal) check_literal:After drop space:'(' idx=26 '<>c1% '
     (check_literal)   '(' != '<'
     (check_literal) check_literal: ret0
    (scan_variable) scan_variable:ret1 vname='c%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'c%' exptype:i
   (token_is_function) 
token_is_function:
   (token_is_function) 
token_is_function:c% is not function
token_is_variable: tok:'c%'
   (token_is_function) 
token_is_function:
   (token_is_function) 
token_is_function:c% is not function
   (init_get_name) 
init_get_name:'c%'
   (init_get_name) 
init_get_name:'c%'
   (get_name) 
get_name:gn:'c%'
process_token:type:i req_type:i
modify_expression_type:Inittype:i Intype:i Outtype:i
( output_variable) [i,()] i i c%
   (print_var_info) 
VAR INFO: '                c%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
   (scan_atom) scan_atom:ret1
  (scan_expression) n commas now:0

   (check_eitem) check_eitem: '<>c1% '

    (check_operator) check_operator: <>c1% 

     (check_literal) check_literal:lit=' ,' idx=26 '<>c1% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=26 '<>c1% '
     (check_literal)   ',' != '<'
     (check_literal) check_literal: ret0
    (check_operator) ret1:is comma: 0
   (check_eitem) check_eitem:ret1 comma:1

   (scan_eitem) scan_eitem:

    (check_operator) check_operator: <>c1% 

     (check_literal) check_literal:lit=' ,' idx=26 '<>c1% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=26 '<>c1% '
     (check_literal)   ',' != '<'
     (check_literal) check_literal: ret0
    (check_operator) ret1:is comma: 0

    (scan_operator) scan_operator: '<>c1% '

     (check_literal) check_literal:lit=' ,' idx=26 '<>c1% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=26 '<>c1% '
     (check_literal)   ',' != '<'
     (check_literal) check_literal: ret0
    (scan_operator) scan_operator: ret1 'c1% '
   Frst:0 T:'<>' exptype:i
   (operator_precedence) 
<> is operator
'<>' is operator
   (process_token) 
Token is operator o1 name:<> o2 name:
   (process_token) 
opr1:1 opr2:0
Push 1
 Push:'<>'
   (op_stack_print) 
------------------
   (op_stack_print) 
Operator Stack     (1)

   (op_stack_print) 
000: <> type:0
   (op_stack_print) 
------------------

   (scan_eitem) Is comma;0
   (scan_expression) n commas now:0

    (check_eitem) check_eitem: 'c1% '

     (check_operator) check_operator: c1% 

      (check_literal) check_literal:lit=' ,' idx=28 'c1% '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=28 'c1% '
      (check_literal)   ',' != 'c'
      (check_literal) check_literal: ret0
     (check_operator) ret0:is comma: 0

     (check_function) check_function: 'c1% '
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=28 'c1% '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=28 'c1% '
      (check_literal)   '%' != 'c'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=28 'c1% '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=28 'c1% '
      (check_literal)   '"' != 'c'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: 'c1% '
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname 'c1% ':
       (check_vname) check_vname ret1 '% ':
      (check_variable) check_variable: '% '
      (check_variable) check_variable: Ary test ' '

       (check_literal) check_literal:lit='(' idx=31 ' '
       (check_literal) check_literal:After drop space:'(' idx=31 ' '
       (check_literal)   '(' != ' '
       (check_literal) check_literal: ret0
      (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
     (check_variable) check_variable:ret1 
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (scan_eitem) scan_eitem:

    (check_operator) check_operator: c1% 

     (check_literal) check_literal:lit=' ,' idx=28 'c1% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=28 'c1% '
     (check_literal)   ',' != 'c'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'c1% '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=28 'c1% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=28 'c1% '
     (check_literal)   '%' != 'c'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=28 'c1% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=28 'c1% '
     (check_literal)   '"' != 'c'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'c1% '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'c1% ':
      (check_vname) check_vname ret1 '% ':
     (check_variable) check_variable: '% '
     (check_variable) check_variable: Ary test ' '

      (check_literal) check_literal:lit='(' idx=31 ' '
      (check_literal) check_literal:After drop space:'(' idx=31 ' '
      (check_literal)   '(' != ' '
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1

   (scan_atom) scan_atom:

    (check_literal) check_literal:lit=' %' idx=28 'c1% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=28 'c1% '
    (check_literal)   '%' != 'c'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=28 'c1% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=28 'c1% '
    (check_literal)   '"' != 'c'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'c1% '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'c1% ':
     (check_vname) check_vname ret1 '% ':
    (check_variable) check_variable: '% '
    (check_variable) check_variable: Ary test ' '

     (check_literal) check_literal:lit='(' idx=31 ' '
     (check_literal) check_literal:After drop space:'(' idx=31 ' '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 

   (scan_variable) scan_variable:

    (scan_vname) scan_vname: 'c1% '
    (scan_vname) scan_vname: ret1 'c1'
   (scan_variable) scan_variable: '% ' vname='c1'
   (scan_variable) scan_variable: Ary test ' '

    (check_literal) check_literal:lit='(' idx=31 ' '
    (check_literal) check_literal:After drop space:'(' idx=31 ' '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (scan_variable) scan_variable:ret1 vname='c1%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'c1%' exptype:i
  (operator_precedence) 
<> is operator
  (token_is_function) 
token_is_function:
  (token_is_function) 
token_is_function:c1% is not function
token_is_variable: tok:'c1%'
  (token_is_function) 
token_is_function:
  (token_is_function) 
token_is_function:c1% is not function
  (init_get_name) 
init_get_name:'c1%'
  (init_get_name) 
init_get_name:'c1%'
  (get_name) 
get_name:gn:'c1%'
process_token:type:i req_type:i
modify_expression_type:Inittype:i Intype:i Outtype:i
( output_variable) [i,()] i i c1%
  (print_var_info) 
VAR INFO: '               c1%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
  (scan_atom) scan_atom:ret1
 (scan_expression) n commas now:0

  (check_eitem) check_eitem: ' '

   (check_operator) check_operator:  

    (check_literal) check_literal:lit=' ,' idx=32 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=32 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_operator) ret0:is comma: 0

   (check_function) check_function: ''
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=31 ' '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=32 ''
    (check_literal) check_literal  ret0 Empty test string

    (check_literal) check_literal:lit=' "' idx=31 ' '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=32 ''
    (check_literal) check_literal  ret0 Empty test string

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: ''
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname '':
     (check_vname) check_vname ret0 '':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret1

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=31 ' '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=32 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_sub_expr) check_sub_expr: ret0
  (check_eitem) check_eitem:ret0
 (scan_expression) scan_expression: ret1 ' ' commas:0
(scan_line) scan_line: ret1
Finalise stack
Pop '<>'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_operator) [i,()] i i <>
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:<> is not function
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'UNTIL' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'c%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'c1%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '<>' nidx:32766  0:
=================
 BE:UNTIL
type_check_stack_push: 'UNTIL'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'UNTIL' type:1
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'UNTIL' type:f (1)
 BE:c%
type_check_stack_push: 'c%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'UNTIL' type:1
(type_check_stack_print) 
001: 'c%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'UNTIL' type:f (1)
001: 'c%' type:i (0)
 BE:c1%
type_check_stack_push: 'c1%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (3)

(type_check_stack_print) 
000: 'UNTIL' type:1
(type_check_stack_print) 
001: 'c%' type:0
(type_check_stack_print) 
002: 'c1%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (3)

000: 'UNTIL' type:f (1)
001: 'c%' type:i (0)
002: 'c1%' type:i (0)
 BE:<>
BUFF_ID_OPERATOR
Found operator <>
type_check_stack_pop: 'c1%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'UNTIL' type:1
(type_check_stack_print) 
001: 'c%' type:0
(type_check_stack_print) 
------------------

type_check_stack_pop: 'c%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'UNTIL' type:1
(type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'UNTIL' type:1
(type_check_stack_print) 
001: '000' type:0
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'UNTIL' type:f (1)
001: '000' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'UNTIL' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'c%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'c1%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '<>' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f 'UNTIL'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'c%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     i rq:i 'c1%'  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_OPERATOR     i rq:i '<>'  2: 3 2
=================
(process_expression_types) 
==INFIX==

Var: UNTIL ary:18 NumIdx:0
infix_stack_push: 'UNTIL()'
Var: c% ary:0 NumIdx:0
infix_stack_push: 'c%'
Var: c1% ary:0 NumIdx:0
infix_stack_push: 'c1%'
infix_stack_pop: 'c1%'
infix_stack_pop: 'c%'
infix_stack_push: '(c% <> c1%)'
infix_stack_pop: '(c% <> c1%)'
(process_expression_types) ==(c% <> c1%)==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     f rq:f UNTIL  0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
(    output_qcode) N3 EXP_BUFF_ID_VARIABLE     i rq:i c1%  0:
(    output_qcode) N4 EXP_BUFF_ID_OPERATOR     i rq:i <>  2: 3 2

 (check_literal) check_literal:lit=':' idx=32 ''
 (check_literal) check_literal:After drop space:':' idx=32 ''
 (check_literal) check_literal  ret0 Empty test string
(translate_file) 
cline scanned OK
********
** DO **
********


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'DO ':
     (check_vname) check_vname ret1 ' ':
    (check_variable) check_variable: ' '
    (check_variable) check_variable: Ary test ' '

     (check_literal) check_literal:lit='(' idx=3 ' '
     (check_literal) check_literal:After drop space:'(' idx=3 ' '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=3 ' '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=4 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_assignment) check_assignment:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) check_textlabel: 'DO '
   (check_textlabel) check_textlabel:ret0
  (check_proc_call) check_proc_call:ret0

  (check_command) check_command:
  (check_command) check_command: ret0

  (check_function) check_function: 'DO '
  (check_function) check_function: ret0

  (check_literal) check_literal:lit=' IF' idx=0 ' DO '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'IF' idx=1 'DO '
  (check_literal)   'I' != 'D'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' ELSEIF' idx=0 ' DO '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'ELSEIF' idx=1 'DO '
  (check_literal)   'E' != 'D'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' ELSE' idx=0 ' DO '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'ELSE' idx=1 'DO '
  (check_literal)   'E' != 'D'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' ENDIF' idx=0 ' DO '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'ENDIF' idx=1 'DO '
  (check_literal)   'E' != 'D'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' DO' idx=0 ' DO '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'DO' idx=1 'DO '
  (check_literal) check_literal:After while(): 
  (check_literal) check_literal:ret1 
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=1, ' '
========================================================
 DO 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'DO ':
    (check_vname) check_vname ret1 ' ':
   (check_variable) check_variable: ' '
   (check_variable) check_variable: Ary test ' '

    (check_literal) check_literal:lit='(' idx=3 ' '
    (check_literal) check_literal:After drop space:'(' idx=3 ' '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=3 ' '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=4 ''
  (check_literal) check_literal  ret0 Empty test string
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'DO '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret0

 (check_function) check_function: 'DO '
 (check_function) check_function: ret0

 (check_literal) check_literal:lit=' IF' idx=1 'DO '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'IF' idx=1 'DO '
 (check_literal)   'I' != 'D'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' ELSEIF' idx=1 'DO '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'ELSEIF' idx=1 'DO '
 (check_literal)   'E' != 'D'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' ELSE' idx=1 'DO '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'ELSE' idx=1 'DO '
 (check_literal)   'E' != 'D'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' ENDIF' idx=1 'DO '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'ENDIF' idx=1 'DO '
 (check_literal)   'E' != 'D'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' DO' idx=1 'DO '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'DO' idx=1 'DO '
 (check_literal) check_literal:After while(): 
 (check_literal) check_literal:ret1 

 (scan_literal) scan_literal:lit=' DO' 'DO '
 (scan_literal) scan_literal:After drop space:'DO '
 (scan_literal) scan_literal:while loop:DO 
 (scan_literal) scan_literal:while loop:O 
   Frst:1 T:'DO' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:DO is not function
token_is_variable: tok:'DO'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:DO is not function
 (init_get_name) 
init_get_name:'DO'
 (init_get_name) 
init_get_name:'DO'
 (get_name) 
get_name:gn:'DO'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] f f DO
 (scan_literal) scan_literal:ret1
Finalise stack
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'DO' nidx:0  0:
=================
 BE:DO
type_check_stack_push: 'DO'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'DO' type:1
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'DO' type:f (1)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'DO' nidx:0  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f 'DO'  0:
=================
(process_expression_types) 
==INFIX==

Var: DO ary:1 NumIdx:0
infix_stack_push: 'DO()'
infix_stack_pop: 'DO()'
(process_expression_types) ==DO()==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     f rq:f DO  0:

 (check_literal) check_literal:lit=':' idx=4 ''
 (check_literal) check_literal:After drop space:':' idx=4 ''
 (check_literal) check_literal  ret0 Empty test string
(translate_file) 
cline scanned OK
******************************
**  AT a%,c% :PRINT CHR$(0) **
******************************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'AT a%,c% :PRINT CHR$(0) ':
     (check_vname) check_vname ret1 ' a%,c% :PRINT CHR$(0) ':
    (check_variable) check_variable: ' a%,c% :PRINT CHR$(0) '
    (check_variable) check_variable: Ary test ' a%,c% :PRINT CHR$(0) '

     (check_literal) check_literal:lit='(' idx=4 ' a%,c% :PRINT CHR$(0) '
     (check_literal) check_literal:After drop space:'(' idx=4 ' a%,c% :PRINT CHR$(0) '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=4 ' a%,c% :PRINT CHR$(0) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=5 'a%,c% :PRINT CHR$(0) '
   (check_literal)   '=' != 'a'
   (check_literal) check_literal: ret0
  (check_assignment) check_assignment:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) check_textlabel: 'AT a%,c% :PRINT CHR$(0) '
   (check_textlabel) check_textlabel:ret0
  (check_proc_call) check_proc_call:ret0

  (check_command) check_command:
  (check_command) check_command: ret1 found=> 'AT'
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=22, ' a%,c% :PRINT CHR$(0) '
========================================================
  AT a%,c% :PRINT CHR$(0) 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'AT a%,c% :PRINT CHR$(0) ':
    (check_vname) check_vname ret1 ' a%,c% :PRINT CHR$(0) ':
   (check_variable) check_variable: ' a%,c% :PRINT CHR$(0) '
   (check_variable) check_variable: Ary test ' a%,c% :PRINT CHR$(0) '

    (check_literal) check_literal:lit='(' idx=4 ' a%,c% :PRINT CHR$(0) '
    (check_literal) check_literal:After drop space:'(' idx=4 ' a%,c% :PRINT CHR$(0) '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=4 ' a%,c% :PRINT CHR$(0) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=5 'a%,c% :PRINT CHR$(0) '
  (check_literal)   '=' != 'a'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'AT a%,c% :PRINT CHR$(0) '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'AT'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'AT' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) AT is function
 (function_return_type) 
function_return_type: 'AT' =>v
 (function_return_type) 
function_return_type: 'AT' =>17
process_token: 'AT' t=>v
 Push:'AT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: AT type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: AT type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' a%,c% :PRINT CHR$(0) '

   (check_eitem) check_eitem: 'a%,c% :PRINT CHR$(0) '

    (check_operator) check_operator: a%,c% :PRINT CHR$(0) 

     (check_literal) check_literal:lit=' ,' idx=5 'a%,c% :PRINT CHR$(0) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=5 'a%,c% :PRINT CHR$(0) '
     (check_literal)   ',' != 'a'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'a%,c% :PRINT CHR$(0) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=5 'a%,c% :PRINT CHR$(0) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=5 'a%,c% :PRINT CHR$(0) '
     (check_literal)   '%' != 'a'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=5 'a%,c% :PRINT CHR$(0) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=5 'a%,c% :PRINT CHR$(0) '
     (check_literal)   '"' != 'a'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'a%,c% :PRINT CHR$(0) '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'a%,c% :PRINT CHR$(0) ':
      (check_vname) check_vname ret1 '%,c% :PRINT CHR$(0) ':
     (check_variable) check_variable: '%,c% :PRINT CHR$(0) '
     (check_variable) check_variable: Ary test ',c% :PRINT CHR$(0) '

      (check_literal) check_literal:lit='(' idx=7 ',c% :PRINT CHR$(0) '
      (check_literal) check_literal:After drop space:'(' idx=7 ',c% :PRINT CHR$(0) '
      (check_literal)   '(' != ','
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator: a%,c% :PRINT CHR$(0) 

    (check_literal) check_literal:lit=' ,' idx=5 'a%,c% :PRINT CHR$(0) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=5 'a%,c% :PRINT CHR$(0) '
    (check_literal)   ',' != 'a'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'a%,c% :PRINT CHR$(0) '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=5 'a%,c% :PRINT CHR$(0) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=5 'a%,c% :PRINT CHR$(0) '
    (check_literal)   '%' != 'a'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=5 'a%,c% :PRINT CHR$(0) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=5 'a%,c% :PRINT CHR$(0) '
    (check_literal)   '"' != 'a'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'a%,c% :PRINT CHR$(0) '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'a%,c% :PRINT CHR$(0) ':
     (check_vname) check_vname ret1 '%,c% :PRINT CHR$(0) ':
    (check_variable) check_variable: '%,c% :PRINT CHR$(0) '
    (check_variable) check_variable: Ary test ',c% :PRINT CHR$(0) '

     (check_literal) check_literal:lit='(' idx=7 ',c% :PRINT CHR$(0) '
     (check_literal) check_literal:After drop space:'(' idx=7 ',c% :PRINT CHR$(0) '
     (check_literal)   '(' != ','
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1

  (scan_atom) scan_atom:

   (check_literal) check_literal:lit=' %' idx=5 'a%,c% :PRINT CHR$(0) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=5 'a%,c% :PRINT CHR$(0) '
   (check_literal)   '%' != 'a'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=5 'a%,c% :PRINT CHR$(0) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=5 'a%,c% :PRINT CHR$(0) '
   (check_literal)   '"' != 'a'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'a%,c% :PRINT CHR$(0) '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'a%,c% :PRINT CHR$(0) ':
    (check_vname) check_vname ret1 '%,c% :PRINT CHR$(0) ':
   (check_variable) check_variable: '%,c% :PRINT CHR$(0) '
   (check_variable) check_variable: Ary test ',c% :PRINT CHR$(0) '

    (check_literal) check_literal:lit='(' idx=7 ',c% :PRINT CHR$(0) '
    (check_literal) check_literal:After drop space:'(' idx=7 ',c% :PRINT CHR$(0) '
    (check_literal)   '(' != ','
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'a%,c% :PRINT CHR$(0) '
   (scan_vname) scan_vname: ret1 'a'
  (scan_variable) scan_variable: '%,c% :PRINT CHR$(0) ' vname='a'
  (scan_variable) scan_variable: Ary test ',c% :PRINT CHR$(0) '

   (check_literal) check_literal:lit='(' idx=7 ',c% :PRINT CHR$(0) '
   (check_literal) check_literal:After drop space:'(' idx=7 ',c% :PRINT CHR$(0) '
   (check_literal)   '(' != ','
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='a%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'a%' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:a% is not function
token_is_variable: tok:'a%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:a% is not function
 (init_get_name) 
init_get_name:'a%'
 (init_get_name) 
init_get_name:'a%'
 (get_name) 
get_name:gn:'a%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,(U )] i i a%
 (print_var_info) 
VAR INFO: '                a%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
 (scan_atom) scan_atom:ret1
(scan_expression) n commas now:0

 (check_eitem) check_eitem: ',c% :PRINT CHR$(0) '

  (check_operator) check_operator: ,c% :PRINT CHR$(0) 

   (check_literal) check_literal:lit=' ,' idx=7 ',c% :PRINT CHR$(0) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=7 ',c% :PRINT CHR$(0) '
   (check_literal) check_literal:After while():c% :PRINT CHR$(0) 
   (check_literal) check_literal:ret1 
  (check_operator) ret1:is comma: 0
 (check_eitem) check_eitem:ret1 comma:1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: ,c% :PRINT CHR$(0) 

   (check_literal) check_literal:lit=' ,' idx=7 ',c% :PRINT CHR$(0) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=7 ',c% :PRINT CHR$(0) '
   (check_literal) check_literal:After while():c% :PRINT CHR$(0) 
   (check_literal) check_literal:ret1 
  (check_operator) ret1:is comma: 0

  (scan_operator) scan_operator: ',c% :PRINT CHR$(0) '

   (check_literal) check_literal:lit=' ,' idx=7 ',c% :PRINT CHR$(0) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=7 ',c% :PRINT CHR$(0) '
   (check_literal) check_literal:After while():c% :PRINT CHR$(0) 
   (check_literal) check_literal:ret1 

   (scan_literal) scan_literal:lit=' ,' ',c% :PRINT CHR$(0) '
   (scan_literal) scan_literal:After drop space:',c% :PRINT CHR$(0) '
   (scan_literal) scan_literal:while loop:,c% :PRINT CHR$(0) 
   Frst:0 T:',' exptype:i
(output_sub_start)
   (scan_literal) scan_literal:ret1
  (scan_operator) ret1:is comma: 1
 (scan_eitem) Is comma;1
 (scan_expression) n commas now:1

  (check_eitem) check_eitem: 'c% :PRINT CHR$(0) '

   (check_operator) check_operator: c% :PRINT CHR$(0) 

    (check_literal) check_literal:lit=' ,' idx=8 'c% :PRINT CHR$(0) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=8 'c% :PRINT CHR$(0) '
    (check_literal)   ',' != 'c'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'c% :PRINT CHR$(0) '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=8 'c% :PRINT CHR$(0) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=8 'c% :PRINT CHR$(0) '
    (check_literal)   '%' != 'c'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=8 'c% :PRINT CHR$(0) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=8 'c% :PRINT CHR$(0) '
    (check_literal)   '"' != 'c'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'c% :PRINT CHR$(0) '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'c% :PRINT CHR$(0) ':
     (check_vname) check_vname ret1 '% :PRINT CHR$(0) ':
    (check_variable) check_variable: '% :PRINT CHR$(0) '
    (check_variable) check_variable: Ary test ' :PRINT CHR$(0) '

     (check_literal) check_literal:lit='(' idx=10 ' :PRINT CHR$(0) '
     (check_literal) check_literal:After drop space:'(' idx=10 ' :PRINT CHR$(0) '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1
 (check_eitem) check_eitem:ret1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: c% :PRINT CHR$(0) 

   (check_literal) check_literal:lit=' ,' idx=8 'c% :PRINT CHR$(0) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=8 'c% :PRINT CHR$(0) '
   (check_literal)   ',' != 'c'
   (check_literal) check_literal: ret0
  (check_operator) ret0:is comma: 0

  (check_function) check_function: 'c% :PRINT CHR$(0) '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=8 'c% :PRINT CHR$(0) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=8 'c% :PRINT CHR$(0) '
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=8 'c% :PRINT CHR$(0) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=8 'c% :PRINT CHR$(0) '
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c% :PRINT CHR$(0) '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'c% :PRINT CHR$(0) ':
    (check_vname) check_vname ret1 '% :PRINT CHR$(0) ':
   (check_variable) check_variable: '% :PRINT CHR$(0) '
   (check_variable) check_variable: Ary test ' :PRINT CHR$(0) '

    (check_literal) check_literal:lit='(' idx=10 ' :PRINT CHR$(0) '
    (check_literal) check_literal:After drop space:'(' idx=10 ' :PRINT CHR$(0) '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) check_atom:ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=8 'c% :PRINT CHR$(0) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=8 'c% :PRINT CHR$(0) '
  (check_literal)   '%' != 'c'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=8 'c% :PRINT CHR$(0) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=8 'c% :PRINT CHR$(0) '
  (check_literal)   '"' != 'c'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) check_float: ret0

   (check_integer) check_integer: 'c% :PRINT CHR$(0) '
   (check_integer) check_integer:ret0
  (check_number) check_number: ret0

  (check_variable) check_variable:

   (check_vname) check_vname 'c% :PRINT CHR$(0) ':
   (check_vname) check_vname ret1 '% :PRINT CHR$(0) ':
  (check_variable) check_variable: '% :PRINT CHR$(0) '
  (check_variable) check_variable: Ary test ' :PRINT CHR$(0) '

   (check_literal) check_literal:lit='(' idx=10 ' :PRINT CHR$(0) '
   (check_literal) check_literal:After drop space:'(' idx=10 ' :PRINT CHR$(0) '
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) scan_variable:

  (scan_vname) scan_vname: 'c% :PRINT CHR$(0) '
  (scan_vname) scan_vname: ret1 'c'
 (scan_variable) scan_variable: '% :PRINT CHR$(0) ' vname='c'
 (scan_variable) scan_variable: Ary test ' :PRINT CHR$(0) '

  (check_literal) check_literal:lit='(' idx=10 ' :PRINT CHR$(0) '
  (check_literal) check_literal:After drop space:'(' idx=10 ' :PRINT CHR$(0) '
  (check_literal)   '(' != ' '
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='c%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'c%' exptype:U
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:c% is not function
token_is_variable: tok:'c%'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:c% is not function
(init_get_name) 
init_get_name:'c%'
(init_get_name) 
init_get_name:'c%'
(get_name) 
get_name:gn:'c%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,(U )] i i c%
(print_var_info) 
VAR INFO: '                c%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
(scan_atom) scan_atom:ret1
(scan_expression) n commas now:1

 (check_eitem) check_eitem: ' :PRINT CHR$(0) '

  (check_operator) check_operator:  :PRINT CHR$(0) 

   (check_literal) check_literal:lit=' ,' idx=11 ':PRINT CHR$(0) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=11 ':PRINT CHR$(0) '
   (check_literal)   ',' != ':'
   (check_literal) check_literal: ret0
  (check_operator) ret0:is comma: 0

  (check_function) check_function: ':PRINT CHR$(0) '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=10 ' :PRINT CHR$(0) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=11 ':PRINT CHR$(0) '
   (check_literal)   '%' != ':'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=10 ' :PRINT CHR$(0) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=11 ':PRINT CHR$(0) '
   (check_literal)   '"' != ':'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: ':PRINT CHR$(0) '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname ':PRINT CHR$(0) ':
    (check_vname) check_vname ret0 ':PRINT CHR$(0) ':
   (check_variable) check_variable:ret0 
  (check_atom) check_atom:ret1

  (check_sub_expr) check_sub_expr:

   (check_literal) check_literal:lit=' (' idx=10 ' :PRINT CHR$(0) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'(' idx=11 ':PRINT CHR$(0) '
   (check_literal)   '(' != ':'
   (check_literal) check_literal: ret0
  (check_sub_expr) check_sub_expr: ret0
 (check_eitem) check_eitem:ret0
(scan_expression) scan_expression: ret1 ' :PRINT CHR$(0) ' commas:1
(scan_command) scan_command: ret1 =>'AT'
(scan_command) 
ENDEXP
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: AT type:17
(op_stack_print) 
------------------

(  output_sub_end)
(token_is_function) 
token_is_function:
(token_is_function) AT is function
Pop 5
Pop 'AT'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_function) [i,(U )] v v AT
(  output_sub_end)
Finalise stack
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'a%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? '' nidx:-1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'c%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'AT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
 BE:

Type Check Stack (0)

 BE:a%
type_check_stack_push: 'a%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'a%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'a%' type:i (0)
 BE:

Type Check Stack (1)

000: 'a%' type:i (0)
 BE:c%
type_check_stack_push: 'c%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'a%' type:0
(type_check_stack_print) 
001: 'c%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'a%' type:i (0)
001: 'c%' type:i (0)
 BE:

Type Check Stack (2)

000: 'a%' type:i (0)
001: 'c%' type:i (0)
 BE:AT
FN: 2 args
(function_return_type) 
function_return_type: 'AT' =>v
(function_return_type) 
function_return_type: 'AT' =>17
ret_type;17 v
typecheck_expression:Ret type of AT : v
type_check_stack_pop: 'c%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'a%' type:0
(type_check_stack_print) 
------------------

FN ARG 1 ri c% 0(i)  Arg ok
type_check_stack_pop: 'a%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (0)

(type_check_stack_print) 
------------------

FN ARG 0 ri a% 0(i)  Arg ok
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:17
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'a%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? '' nidx:-1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'c%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'AT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'a%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     i rq:i 'c%'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_FUNCTION     v rq:v 'AT'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
(process_expression_types) 
==INFIX==

Var: a% ary:0 NumIdx:0
infix_stack_push: 'a%'
Var: c% ary:0 NumIdx:0
infix_stack_push: 'c%'
infix_stack_pop: 'c%'
infix_stack_pop: 'a%'
infix_stack_push: 'AT(a% c% )'
infix_stack_pop: 'AT(a% c% )'
(process_expression_types) ==AT(a% c% )==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_START    U rq:?   0:
(    output_qcode) N4 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_FUNCTION     v rq:v AT  0:
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:i   0:

 (check_literal) check_literal:lit=':' idx=11 ':PRINT CHR$(0) '
 (check_literal) check_literal:After drop space:':' idx=11 ':PRINT CHR$(0) '
 (check_literal) check_literal:After while():PRINT CHR$(0) 
 (check_literal) check_literal:ret1 

 (scan_literal) scan_literal:lit=':' 'PRINT CHR$(0) '
 (scan_literal) scan_literal:After drop space:'PRINT CHR$(0) '
 (scan_literal) scan_literal:while loop:PRINT CHR$(0) 
 (scan_literal) scan_literal:ret1

 (check_line) check_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'PRINT CHR$(0) ':
    (check_vname) check_vname ret1 ' CHR$(0) ':
   (check_variable) check_variable: ' CHR$(0) '
   (check_variable) check_variable: Ary test ' CHR$(0) '

    (check_literal) check_literal:lit='(' idx=17 ' CHR$(0) '
    (check_literal) check_literal:After drop space:'(' idx=17 ' CHR$(0) '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=17 ' CHR$(0) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=18 'CHR$(0) '
  (check_literal)   '=' != 'C'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'PRINT CHR$(0) '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'PRINT'
(check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=9, ' CHR$(0) '
========================================================
  AT a%,c% :PRINT CHR$(0) 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'PRINT CHR$(0) ':
    (check_vname) check_vname ret1 ' CHR$(0) ':
   (check_variable) check_variable: ' CHR$(0) '
   (check_variable) check_variable: Ary test ' CHR$(0) '

    (check_literal) check_literal:lit='(' idx=17 ' CHR$(0) '
    (check_literal) check_literal:After drop space:'(' idx=17 ' CHR$(0) '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=17 ' CHR$(0) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=18 'CHR$(0) '
  (check_literal)   '=' != 'C'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'PRINT CHR$(0) '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'PRINT'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'PRINT' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) PRINT is function
 (function_return_type) 
function_return_type: 'PRINT' =>v
 (function_return_type) 
function_return_type: 'PRINT' =>17
process_token: 'PRINT' t=>v
 Push:'PRINT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' CHR$(0) '

   (check_eitem) check_eitem: 'CHR$(0) '

    (check_operator) check_operator: CHR$(0) 

     (check_literal) check_literal:lit=' ,' idx=18 'CHR$(0) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=18 'CHR$(0) '
     (check_literal)   ',' != 'C'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'CHR$(0) '
    (check_function) check_function: ret1 Found fn=>'CHR$'
   (check_eitem) check_eitem:ret1

   (scan_eitem) scan_eitem:

    (check_operator) check_operator: CHR$(0) 

     (check_literal) check_literal:lit=' ,' idx=18 'CHR$(0) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=18 'CHR$(0) '
     (check_literal)   ',' != 'C'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'CHR$(0) '
    (check_function) check_function: ret1 Found fn=>'CHR$'

    (scan_function) scan_function:
   Frst:0 T:'CHR$' exptype:U
    (token_is_function) 
token_is_function:
    (token_is_function) CHR$ is function
    (function_return_type) 
function_return_type: 'CHR$' =>s
    (function_return_type) 
function_return_type: 'CHR$' =>2
process_token: 'CHR$' t=>s
 Push:'CHR$'
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (3)

    (op_stack_print) 
000: PRINT type:17
    (op_stack_print) 
001: ( type:16
    (op_stack_print) 
002: CHR$ type:2
    (op_stack_print) 
------------------

    (scan_expression) n commas now:0

     (check_eitem) check_eitem: '(0) '

      (check_operator) check_operator: (0) 

       (check_literal) check_literal:lit=' ,' idx=22 '(0) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=22 '(0) '
       (check_literal)   ',' != '('
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: '(0) '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=22 '(0) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=22 '(0) '
       (check_literal)   '%' != '('
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=22 '(0) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=22 '(0) '
       (check_literal)   '"' != '('
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '(0) '
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname '(0) ':
        (check_vname) check_vname ret0 '(0) ':
       (check_variable) check_variable:ret0 
      (check_atom) check_atom:ret1

      (check_sub_expr) check_sub_expr:

       (check_literal) check_literal:lit=' (' idx=22 '(0) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'(' idx=22 '(0) '
       (check_literal) check_literal:After while():0) 
       (check_literal) check_literal:ret1 
      (check_sub_expr) check_sub_expr: ret1
     (check_eitem) check_eitem:ret1

     (scan_eitem) scan_eitem:

      (check_operator) check_operator: (0) 

       (check_literal) check_literal:lit=' ,' idx=22 '(0) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=22 '(0) '
       (check_literal)   ',' != '('
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: '(0) '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=22 '(0) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=22 '(0) '
       (check_literal)   '%' != '('
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=22 '(0) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=22 '(0) '
       (check_literal)   '"' != '('
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '(0) '
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname '(0) ':
        (check_vname) check_vname ret0 '(0) ':
       (check_variable) check_variable:ret0 
      (check_atom) check_atom:ret1

      (check_sub_expr) check_sub_expr:

       (check_literal) check_literal:lit=' (' idx=22 '(0) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'(' idx=22 '(0) '
       (check_literal) check_literal:After while():0) 
       (check_literal) check_literal:ret1 
      (check_sub_expr) check_sub_expr: ret1

      (scan_sub_expr) scan_sub_expr:

       (scan_literal) scan_literal:lit=' (' '(0) '
       (scan_literal) scan_literal:After drop space:'(0) '
       (scan_literal) scan_literal:while loop:(0) 
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (4)

       (op_stack_print) 
000: PRINT type:17
       (op_stack_print) 
001: ( type:16
       (op_stack_print) 
002: CHR$ type:2
       (op_stack_print) 
003: ( type:16
       (op_stack_print) 
------------------

       (scan_literal) scan_literal:ret1
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (5)

      (op_stack_print) 
000: PRINT type:17
      (op_stack_print) 
001: ( type:16
      (op_stack_print) 
002: CHR$ type:2
      (op_stack_print) 
003: ( type:16
      (op_stack_print) 
004: ( type:16
      (op_stack_print) 
------------------


       (scan_expression) scan_expression: '0) '

        (check_eitem) check_eitem: '0) '

         (check_operator) check_operator: 0) 

          (check_literal) check_literal:lit=' ,' idx=23 '0) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:',' idx=23 '0) '
          (check_literal)   ',' != '0'
          (check_literal) check_literal: ret0
         (check_operator) ret0:is comma: 0

         (check_function) check_function: '0) '
         (check_function) check_function: ret0

         (check_atom) check_atom:

          (check_literal) check_literal:lit=' %' idx=23 '0) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=23 '0) '
          (check_literal)   '%' != '0'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=23 '0) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=23 '0) '
          (check_literal)   '"' != '0'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '0) '
           (check_integer) check_integer:ret1
          (check_number) check_number: ret1
         (check_atom) check_atom:ret1
        (check_eitem) check_eitem:ret1

        (scan_eitem) scan_eitem:

         (check_operator) check_operator: 0) 

          (check_literal) check_literal:lit=' ,' idx=23 '0) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:',' idx=23 '0) '
          (check_literal)   ',' != '0'
          (check_literal) check_literal: ret0
         (check_operator) ret0:is comma: 0

         (check_function) check_function: '0) '
         (check_function) check_function: ret0

         (check_atom) check_atom:

          (check_literal) check_literal:lit=' %' idx=23 '0) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=23 '0) '
          (check_literal)   '%' != '0'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=23 '0) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=23 '0) '
          (check_literal)   '"' != '0'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '0) '
           (check_integer) check_integer:ret1
          (check_number) check_number: ret1
         (check_atom) check_atom:ret1

         (scan_atom) scan_atom:

          (check_literal) check_literal:lit=' %' idx=23 '0) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=23 '0) '
          (check_literal)   '%' != '0'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=23 '0) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=23 '0) '
          (check_literal)   '"' != '0'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '0) '
           (check_integer) check_integer:ret1
          (check_number) check_number: ret1

          (scan_number) scan_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '0) '
           (check_integer) check_integer:ret1

           (scan_integer) scan_integer:
           (scan_integer) scan_integer:ret1
   Frst:0 T:'0' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U U U )] i i 0
          (scan_integer) scan_integer:ret1  0
         (scan_atom) scan_atom:ret1
        (scan_expression) n commas now:0

         (check_eitem) check_eitem: ') '

          (check_operator) check_operator: ) 

           (check_literal) check_literal:lit=' ,' idx=24 ') '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:',' idx=24 ') '
           (check_literal)   ',' != ')'
           (check_literal) check_literal: ret0
          (check_operator) ret0:is comma: 0

          (check_function) check_function: ') '
          (check_function) check_function: ret0

          (check_atom) check_atom:

           (check_literal) check_literal:lit=' %' idx=24 ') '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'%' idx=24 ') '
           (check_literal)   '%' != ')'
           (check_literal) check_literal: ret0

           (check_literal) check_literal:lit=' "' idx=24 ') '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'"' idx=24 ') '
           (check_literal)   '"' != ')'
           (check_literal) check_literal: ret0

           (check_number) check_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret0

            (check_integer) check_integer: ') '
            (check_integer) check_integer:ret0
           (check_number) check_number: ret0

           (check_variable) check_variable:

            (check_vname) check_vname ') ':
            (check_vname) check_vname ret0 ') ':
           (check_variable) check_variable:ret0 
          (check_atom) check_atom:ret1

          (check_sub_expr) check_sub_expr:

           (check_literal) check_literal:lit=' (' idx=24 ') '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'(' idx=24 ') '
           (check_literal)   '(' != ')'
           (check_literal) check_literal: ret0
          (check_sub_expr) check_sub_expr: ret0
         (check_eitem) check_eitem:ret0
        (scan_expression) scan_expression: ret1 ') ' commas:0

        (scan_literal) scan_literal:lit=' )' ') '
        (scan_literal) scan_literal:After drop space:') '
        (scan_literal) scan_literal:while loop:) 
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
        (op_stack_print) 
------------------
        (op_stack_print) 
Operator Stack     (4)

        (op_stack_print) 
000: PRINT type:17
        (op_stack_print) 
001: ( type:16
        (op_stack_print) 
002: CHR$ type:2
        (op_stack_print) 
003: ( type:16
        (op_stack_print) 
------------------

(  output_sub_end)
        (token_is_function) 
token_is_function:
        (token_is_function) 
token_is_function:( is not function
(  output_sub_end)
        (scan_literal) scan_literal:ret1
   Frst:0 T:')' exptype:U
Pop 4
Pop '('
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (3)

       (op_stack_print) 
000: PRINT type:17
       (op_stack_print) 
001: ( type:16
       (op_stack_print) 
002: CHR$ type:2
       (op_stack_print) 
------------------

(  output_sub_end)
       (token_is_function) 
token_is_function:
       (token_is_function) CHR$ is function
Pop 5
Pop 'CHR$'
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (2)

       (op_stack_print) 
000: PRINT type:17
       (op_stack_print) 
001: ( type:16
       (op_stack_print) 
------------------

( output_function) [U,(U U )] s s CHR$
(  output_sub_end)
       (scan_sub_expr) scan_sub_expr:ret1
      (scan_expression) n commas now:0

       (check_eitem) check_eitem: ' '

        (check_operator) check_operator:  

         (check_literal) check_literal:lit=' ,' idx=26 ''
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:',' idx=26 ''
         (check_literal) check_literal  ret0 Empty test string
        (check_operator) ret0:is comma: 0

        (check_function) check_function: ''
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=25 ' '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=26 ''
         (check_literal) check_literal  ret0 Empty test string

         (check_literal) check_literal:lit=' "' idx=25 ' '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=26 ''
         (check_literal) check_literal  ret0 Empty test string

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: ''
          (check_integer) check_integer:ret0
         (check_number) check_number: ret0

         (check_variable) check_variable:

          (check_vname) check_vname '':
          (check_vname) check_vname ret0 '':
         (check_variable) check_variable:ret0 
        (check_atom) check_atom:ret1

        (check_sub_expr) check_sub_expr:

         (check_literal) check_literal:lit=' (' idx=25 ' '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'(' idx=26 ''
         (check_literal) check_literal  ret0 Empty test string
        (check_sub_expr) check_sub_expr: ret0
       (check_eitem) check_eitem:ret0
      (scan_expression) scan_expression: ret1 ' ' commas:0
     (scan_command) scan_command: ret1 =>'PRINT'
    (scan_command) 
ENDEXP
   Frst:0 T:')' exptype:U
Pop 4
Pop '('
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (1)

    (op_stack_print) 
000: PRINT type:17
    (op_stack_print) 
------------------

(  output_sub_end)
    (token_is_function) 
token_is_function:
    (token_is_function) PRINT is function
Pop 5
Pop 'PRINT'
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (0)

    (op_stack_print) 
------------------

( output_function) [U,(U )] v v PRINT
(  output_sub_end)
Finalise stack
    (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '0' nidx:24  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     s rq:s 'CHR$' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
 BE:

Type Check Stack (0)

 BE:

Type Check Stack (0)

 BE:

Type Check Stack (0)

 BE:0
type_check_stack_push: '0'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (1)

    (type_check_stack_print) 
000: '0' type:0
    (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '0' type:i (0)
 BE:

Type Check Stack (1)

000: '0' type:i (0)
 BE:

Type Check Stack (1)

000: '0' type:i (0)
 BE:

Type Check Stack (1)

000: '0' type:i (0)
 BE:CHR$
FN: 1 args
    (function_return_type) 
function_return_type: 'CHR$' =>s
    (function_return_type) 
function_return_type: 'CHR$' =>2
ret_type;2 s
typecheck_expression:Ret type of CHR$ : s
type_check_stack_pop: '0'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (0)

    (type_check_stack_print) 
------------------

FN ARG 0 ri 0 0(i)  Arg ok
type_check_stack_push: '000'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (1)

    (type_check_stack_print) 
000: '000' type:2
    (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:s (2)
 BE:

Type Check Stack (1)

000: '000' type:s (2)
 BE:

Type Check Stack (1)

000: '000' type:s (2)
 BE:PRINT
FN: 1 args
    (function_return_type) 
function_return_type: 'PRINT' =>v
    (function_return_type) 
function_return_type: 'PRINT' =>17
ret_type;17 v
typecheck_expression:Ret type of PRINT : v
type_check_stack_pop: '000'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (0)

    (type_check_stack_print) 
------------------

FN ARG 0 ri 000 2(s)  Arg not OK
type_check_stack_push: '000'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (1)

    (type_check_stack_print) 
000: '000' type:17
    (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '0' nidx:24  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     s rq:s 'CHR$' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_INTEGER      i rq:i '0'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_FUNCTION     s rq:s 'CHR$'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
(dump_exp_buffer2) N12 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
    (process_expression_types) 
==INFIX==

infix_stack_push: '0'
infix_stack_pop: '0'
infix_stack_push: 'CHR$(0 )'
infix_stack_pop: 'CHR$(0 )'
infix_stack_push: 'PRINT(CHR$(0 ) )'
infix_stack_pop: 'PRINT(CHR$(0 ) )'
    (process_expression_types) ==PRINT(CHR$(0 ) )==
    (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N4 EXP_BUFF_ID_INTEGER      i rq:i 0  0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N8 EXP_BUFF_ID_FUNCTION     s rq:s CHR$  0:
(    output_qcode) N9 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N10 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N11 EXP_BUFF_ID_FUNCTION     v rq:v PRINT  0:
(    output_qcode) N12 EXP_BUFF_ID_SUB_END      U rq:i   0:

     (check_literal) check_literal:lit=':' idx=26 ''
     (check_literal) check_literal:After drop space:':' idx=26 ''
     (check_literal) check_literal  ret0 Empty test string
    (translate_file) 
cline scanned OK
**********************************************
**  AT a%,c1% :PRINT CHR$(0) :BEEP b%,10*b% **
**********************************************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'AT a%,c1% :PRINT CHR$(0) :BEEP b%,10*b% ':
     (check_vname) check_vname ret1 ' a%,c1% :PRINT CHR$(0) :BEEP b%,10*b% ':
    (check_variable) check_variable: ' a%,c1% :PRINT CHR$(0) :BEEP b%,10*b% '
    (check_variable) check_variable: Ary test ' a%,c1% :PRINT CHR$(0) :BEEP b%,10*b% '

     (check_literal) check_literal:lit='(' idx=4 ' a%,c1% :PRINT CHR$(0) :BEEP b%,10*b% '
     (check_literal) check_literal:After drop space:'(' idx=4 ' a%,c1% :PRINT CHR$(0) :BEEP b%,10*b% '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=4 ' a%,c1% :PRINT CHR$(0) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=5 'a%,c1% :PRINT CHR$(0) :BEEP b%,10*b% '
   (check_literal)   '=' != 'a'
   (check_literal) check_literal: ret0
  (check_assignment) check_assignment:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) check_textlabel: 'AT a%,c1% :PRINT CHR$(0) :BEEP b%,10*b% '
   (check_textlabel) check_textlabel:ret0
  (check_proc_call) check_proc_call:ret0

  (check_command) check_command:
  (check_command) check_command: ret1 found=> 'AT'
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=38, ' a%,c1% :PRINT CHR$(0) :BEEP b%,10*b% '
========================================================
  AT a%,c1% :PRINT CHR$(0) :BEEP b%,10*b% 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'AT a%,c1% :PRINT CHR$(0) :BEEP b%,10*b% ':
    (check_vname) check_vname ret1 ' a%,c1% :PRINT CHR$(0) :BEEP b%,10*b% ':
   (check_variable) check_variable: ' a%,c1% :PRINT CHR$(0) :BEEP b%,10*b% '
   (check_variable) check_variable: Ary test ' a%,c1% :PRINT CHR$(0) :BEEP b%,10*b% '

    (check_literal) check_literal:lit='(' idx=4 ' a%,c1% :PRINT CHR$(0) :BEEP b%,10*b% '
    (check_literal) check_literal:After drop space:'(' idx=4 ' a%,c1% :PRINT CHR$(0) :BEEP b%,10*b% '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=4 ' a%,c1% :PRINT CHR$(0) :BEEP b%,10*b% '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=5 'a%,c1% :PRINT CHR$(0) :BEEP b%,10*b% '
  (check_literal)   '=' != 'a'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'AT a%,c1% :PRINT CHR$(0) :BEEP b%,10*b% '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'AT'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'AT' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) AT is function
 (function_return_type) 
function_return_type: 'AT' =>v
 (function_return_type) 
function_return_type: 'AT' =>17
process_token: 'AT' t=>v
 Push:'AT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: AT type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: AT type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' a%,c1% :PRINT CHR$(0) :BEEP b%,10*b% '

   (check_eitem) check_eitem: 'a%,c1% :PRINT CHR$(0) :BEEP b%,10*b% '

    (check_operator) check_operator: a%,c1% :PRINT CHR$(0) :BEEP b%,10*b% 

     (check_literal) check_literal:lit=' ,' idx=5 'a%,c1% :PRINT CHR$(0) :BEEP b%,10*b% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=5 'a%,c1% :PRINT CHR$(0) :BEEP b%,10*b% '
     (check_literal)   ',' != 'a'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'a%,c1% :PRINT CHR$(0) :BEEP b%,10*b% '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=5 'a%,c1% :PRINT CHR$(0) :BEEP b%,10*b% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=5 'a%,c1% :PRINT CHR$(0) :BEEP b%,10*b% '
     (check_literal)   '%' != 'a'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=5 'a%,c1% :PRINT CHR$(0) :BEEP b%,10*b% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=5 'a%,c1% :PRINT CHR$(0) :BEEP b%,10*b% '
     (check_literal)   '"' != 'a'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'a%,c1% :PRINT CHR$(0) :BEEP b%,10*b% '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'a%,c1% :PRINT CHR$(0) :BEEP b%,10*b% ':
      (check_vname) check_vname ret1 '%,c1% :PRINT CHR$(0) :BEEP b%,10*b% ':
     (check_variable) check_variable: '%,c1% :PRINT CHR$(0) :BEEP b%,10*b% '
     (check_variable) check_variable: Ary test ',c1% :PRINT CHR$(0) :BEEP b%,10*b% '

      (check_literal) check_literal:lit='(' idx=7 ',c1% :PRINT CHR$(0) :BEEP b%,10*b% '
      (check_literal) check_literal:After drop space:'(' idx=7 ',c1% :PRINT CHR$(0) :BEEP b%,10*b% '
      (check_literal)   '(' != ','
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator: a%,c1% :PRINT CHR$(0) :BEEP b%,10*b% 

    (check_literal) check_literal:lit=' ,' idx=5 'a%,c1% :PRINT CHR$(0) :BEEP b%,10*b% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=5 'a%,c1% :PRINT CHR$(0) :BEEP b%,10*b% '
    (check_literal)   ',' != 'a'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'a%,c1% :PRINT CHR$(0) :BEEP b%,10*b% '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=5 'a%,c1% :PRINT CHR$(0) :BEEP b%,10*b% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=5 'a%,c1% :PRINT CHR$(0) :BEEP b%,10*b% '
    (check_literal)   '%' != 'a'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=5 'a%,c1% :PRINT CHR$(0) :BEEP b%,10*b% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=5 'a%,c1% :PRINT CHR$(0) :BEEP b%,10*b% '
    (check_literal)   '"' != 'a'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'a%,c1% :PRINT CHR$(0) :BEEP b%,10*b% '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'a%,c1% :PRINT CHR$(0) :BEEP b%,10*b% ':
     (check_vname) check_vname ret1 '%,c1% :PRINT CHR$(0) :BEEP b%,10*b% ':
    (check_variable) check_variable: '%,c1% :PRINT CHR$(0) :BEEP b%,10*b% '
    (check_variable) check_variable: Ary test ',c1% :PRINT CHR$(0) :BEEP b%,10*b% '

     (check_literal) check_literal:lit='(' idx=7 ',c1% :PRINT CHR$(0) :BEEP b%,10*b% '
     (check_literal) check_literal:After drop space:'(' idx=7 ',c1% :PRINT CHR$(0) :BEEP b%,10*b% '
     (check_literal)   '(' != ','
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1

  (scan_atom) scan_atom:

   (check_literal) check_literal:lit=' %' idx=5 'a%,c1% :PRINT CHR$(0) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=5 'a%,c1% :PRINT CHR$(0) :BEEP b%,10*b% '
   (check_literal)   '%' != 'a'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=5 'a%,c1% :PRINT CHR$(0) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=5 'a%,c1% :PRINT CHR$(0) :BEEP b%,10*b% '
   (check_literal)   '"' != 'a'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'a%,c1% :PRINT CHR$(0) :BEEP b%,10*b% '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'a%,c1% :PRINT CHR$(0) :BEEP b%,10*b% ':
    (check_vname) check_vname ret1 '%,c1% :PRINT CHR$(0) :BEEP b%,10*b% ':
   (check_variable) check_variable: '%,c1% :PRINT CHR$(0) :BEEP b%,10*b% '
   (check_variable) check_variable: Ary test ',c1% :PRINT CHR$(0) :BEEP b%,10*b% '

    (check_literal) check_literal:lit='(' idx=7 ',c1% :PRINT CHR$(0) :BEEP b%,10*b% '
    (check_literal) check_literal:After drop space:'(' idx=7 ',c1% :PRINT CHR$(0) :BEEP b%,10*b% '
    (check_literal)   '(' != ','
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'a%,c1% :PRINT CHR$(0) :BEEP b%,10*b% '
   (scan_vname) scan_vname: ret1 'a'
  (scan_variable) scan_variable: '%,c1% :PRINT CHR$(0) :BEEP b%,10*b% ' vname='a'
  (scan_variable) scan_variable: Ary test ',c1% :PRINT CHR$(0) :BEEP b%,10*b% '

   (check_literal) check_literal:lit='(' idx=7 ',c1% :PRINT CHR$(0) :BEEP b%,10*b% '
   (check_literal) check_literal:After drop space:'(' idx=7 ',c1% :PRINT CHR$(0) :BEEP b%,10*b% '
   (check_literal)   '(' != ','
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='a%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'a%' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:a% is not function
token_is_variable: tok:'a%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:a% is not function
 (init_get_name) 
init_get_name:'a%'
 (init_get_name) 
init_get_name:'a%'
 (get_name) 
get_name:gn:'a%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,(U )] i i a%
 (print_var_info) 
VAR INFO: '                a%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
 (scan_atom) scan_atom:ret1
(scan_expression) n commas now:0

 (check_eitem) check_eitem: ',c1% :PRINT CHR$(0) :BEEP b%,10*b% '

  (check_operator) check_operator: ,c1% :PRINT CHR$(0) :BEEP b%,10*b% 

   (check_literal) check_literal:lit=' ,' idx=7 ',c1% :PRINT CHR$(0) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=7 ',c1% :PRINT CHR$(0) :BEEP b%,10*b% '
   (check_literal) check_literal:After while():c1% :PRINT CHR$(0) :BEEP b%,10*b% 
   (check_literal) check_literal:ret1 
  (check_operator) ret1:is comma: 0
 (check_eitem) check_eitem:ret1 comma:1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: ,c1% :PRINT CHR$(0) :BEEP b%,10*b% 

   (check_literal) check_literal:lit=' ,' idx=7 ',c1% :PRINT CHR$(0) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=7 ',c1% :PRINT CHR$(0) :BEEP b%,10*b% '
   (check_literal) check_literal:After while():c1% :PRINT CHR$(0) :BEEP b%,10*b% 
   (check_literal) check_literal:ret1 
  (check_operator) ret1:is comma: 0

  (scan_operator) scan_operator: ',c1% :PRINT CHR$(0) :BEEP b%,10*b% '

   (check_literal) check_literal:lit=' ,' idx=7 ',c1% :PRINT CHR$(0) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=7 ',c1% :PRINT CHR$(0) :BEEP b%,10*b% '
   (check_literal) check_literal:After while():c1% :PRINT CHR$(0) :BEEP b%,10*b% 
   (check_literal) check_literal:ret1 

   (scan_literal) scan_literal:lit=' ,' ',c1% :PRINT CHR$(0) :BEEP b%,10*b% '
   (scan_literal) scan_literal:After drop space:',c1% :PRINT CHR$(0) :BEEP b%,10*b% '
   (scan_literal) scan_literal:while loop:,c1% :PRINT CHR$(0) :BEEP b%,10*b% 
   Frst:0 T:',' exptype:i
(output_sub_start)
   (scan_literal) scan_literal:ret1
  (scan_operator) ret1:is comma: 1
 (scan_eitem) Is comma;1
 (scan_expression) n commas now:1

  (check_eitem) check_eitem: 'c1% :PRINT CHR$(0) :BEEP b%,10*b% '

   (check_operator) check_operator: c1% :PRINT CHR$(0) :BEEP b%,10*b% 

    (check_literal) check_literal:lit=' ,' idx=8 'c1% :PRINT CHR$(0) :BEEP b%,10*b% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=8 'c1% :PRINT CHR$(0) :BEEP b%,10*b% '
    (check_literal)   ',' != 'c'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'c1% :PRINT CHR$(0) :BEEP b%,10*b% '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=8 'c1% :PRINT CHR$(0) :BEEP b%,10*b% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=8 'c1% :PRINT CHR$(0) :BEEP b%,10*b% '
    (check_literal)   '%' != 'c'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=8 'c1% :PRINT CHR$(0) :BEEP b%,10*b% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=8 'c1% :PRINT CHR$(0) :BEEP b%,10*b% '
    (check_literal)   '"' != 'c'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'c1% :PRINT CHR$(0) :BEEP b%,10*b% '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'c1% :PRINT CHR$(0) :BEEP b%,10*b% ':
     (check_vname) check_vname ret1 '% :PRINT CHR$(0) :BEEP b%,10*b% ':
    (check_variable) check_variable: '% :PRINT CHR$(0) :BEEP b%,10*b% '
    (check_variable) check_variable: Ary test ' :PRINT CHR$(0) :BEEP b%,10*b% '

     (check_literal) check_literal:lit='(' idx=11 ' :PRINT CHR$(0) :BEEP b%,10*b% '
     (check_literal) check_literal:After drop space:'(' idx=11 ' :PRINT CHR$(0) :BEEP b%,10*b% '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1
 (check_eitem) check_eitem:ret1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: c1% :PRINT CHR$(0) :BEEP b%,10*b% 

   (check_literal) check_literal:lit=' ,' idx=8 'c1% :PRINT CHR$(0) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=8 'c1% :PRINT CHR$(0) :BEEP b%,10*b% '
   (check_literal)   ',' != 'c'
   (check_literal) check_literal: ret0
  (check_operator) ret0:is comma: 0

  (check_function) check_function: 'c1% :PRINT CHR$(0) :BEEP b%,10*b% '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=8 'c1% :PRINT CHR$(0) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=8 'c1% :PRINT CHR$(0) :BEEP b%,10*b% '
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=8 'c1% :PRINT CHR$(0) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=8 'c1% :PRINT CHR$(0) :BEEP b%,10*b% '
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c1% :PRINT CHR$(0) :BEEP b%,10*b% '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'c1% :PRINT CHR$(0) :BEEP b%,10*b% ':
    (check_vname) check_vname ret1 '% :PRINT CHR$(0) :BEEP b%,10*b% ':
   (check_variable) check_variable: '% :PRINT CHR$(0) :BEEP b%,10*b% '
   (check_variable) check_variable: Ary test ' :PRINT CHR$(0) :BEEP b%,10*b% '

    (check_literal) check_literal:lit='(' idx=11 ' :PRINT CHR$(0) :BEEP b%,10*b% '
    (check_literal) check_literal:After drop space:'(' idx=11 ' :PRINT CHR$(0) :BEEP b%,10*b% '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) check_atom:ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=8 'c1% :PRINT CHR$(0) :BEEP b%,10*b% '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=8 'c1% :PRINT CHR$(0) :BEEP b%,10*b% '
  (check_literal)   '%' != 'c'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=8 'c1% :PRINT CHR$(0) :BEEP b%,10*b% '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=8 'c1% :PRINT CHR$(0) :BEEP b%,10*b% '
  (check_literal)   '"' != 'c'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) check_float: ret0

   (check_integer) check_integer: 'c1% :PRINT CHR$(0) :BEEP b%,10*b% '
   (check_integer) check_integer:ret0
  (check_number) check_number: ret0

  (check_variable) check_variable:

   (check_vname) check_vname 'c1% :PRINT CHR$(0) :BEEP b%,10*b% ':
   (check_vname) check_vname ret1 '% :PRINT CHR$(0) :BEEP b%,10*b% ':
  (check_variable) check_variable: '% :PRINT CHR$(0) :BEEP b%,10*b% '
  (check_variable) check_variable: Ary test ' :PRINT CHR$(0) :BEEP b%,10*b% '

   (check_literal) check_literal:lit='(' idx=11 ' :PRINT CHR$(0) :BEEP b%,10*b% '
   (check_literal) check_literal:After drop space:'(' idx=11 ' :PRINT CHR$(0) :BEEP b%,10*b% '
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) scan_variable:

  (scan_vname) scan_vname: 'c1% :PRINT CHR$(0) :BEEP b%,10*b% '
  (scan_vname) scan_vname: ret1 'c1'
 (scan_variable) scan_variable: '% :PRINT CHR$(0) :BEEP b%,10*b% ' vname='c1'
 (scan_variable) scan_variable: Ary test ' :PRINT CHR$(0) :BEEP b%,10*b% '

  (check_literal) check_literal:lit='(' idx=11 ' :PRINT CHR$(0) :BEEP b%,10*b% '
  (check_literal) check_literal:After drop space:'(' idx=11 ' :PRINT CHR$(0) :BEEP b%,10*b% '
  (check_literal)   '(' != ' '
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='c1%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'c1%' exptype:U
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:c1% is not function
token_is_variable: tok:'c1%'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:c1% is not function
(init_get_name) 
init_get_name:'c1%'
(init_get_name) 
init_get_name:'c1%'
(get_name) 
get_name:gn:'c1%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,(U )] i i c1%
(print_var_info) 
VAR INFO: '               c1%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
(scan_atom) scan_atom:ret1
(scan_expression) n commas now:1

 (check_eitem) check_eitem: ' :PRINT CHR$(0) :BEEP b%,10*b% '

  (check_operator) check_operator:  :PRINT CHR$(0) :BEEP b%,10*b% 

   (check_literal) check_literal:lit=' ,' idx=12 ':PRINT CHR$(0) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=12 ':PRINT CHR$(0) :BEEP b%,10*b% '
   (check_literal)   ',' != ':'
   (check_literal) check_literal: ret0
  (check_operator) ret0:is comma: 0

  (check_function) check_function: ':PRINT CHR$(0) :BEEP b%,10*b% '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=11 ' :PRINT CHR$(0) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=12 ':PRINT CHR$(0) :BEEP b%,10*b% '
   (check_literal)   '%' != ':'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=11 ' :PRINT CHR$(0) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=12 ':PRINT CHR$(0) :BEEP b%,10*b% '
   (check_literal)   '"' != ':'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: ':PRINT CHR$(0) :BEEP b%,10*b% '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname ':PRINT CHR$(0) :BEEP b%,10*b% ':
    (check_vname) check_vname ret0 ':PRINT CHR$(0) :BEEP b%,10*b% ':
   (check_variable) check_variable:ret0 
  (check_atom) check_atom:ret1

  (check_sub_expr) check_sub_expr:

   (check_literal) check_literal:lit=' (' idx=11 ' :PRINT CHR$(0) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'(' idx=12 ':PRINT CHR$(0) :BEEP b%,10*b% '
   (check_literal)   '(' != ':'
   (check_literal) check_literal: ret0
  (check_sub_expr) check_sub_expr: ret0
 (check_eitem) check_eitem:ret0
(scan_expression) scan_expression: ret1 ' :PRINT CHR$(0) :BEEP b%,10*b% ' commas:1
(scan_command) scan_command: ret1 =>'AT'
(scan_command) 
ENDEXP
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: AT type:17
(op_stack_print) 
------------------

(  output_sub_end)
(token_is_function) 
token_is_function:
(token_is_function) AT is function
Pop 5
Pop 'AT'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_function) [i,(U )] v v AT
(  output_sub_end)
Finalise stack
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'a%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? '' nidx:-1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'c1%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'AT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
 BE:

Type Check Stack (0)

 BE:a%
type_check_stack_push: 'a%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'a%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'a%' type:i (0)
 BE:

Type Check Stack (1)

000: 'a%' type:i (0)
 BE:c1%
type_check_stack_push: 'c1%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'a%' type:0
(type_check_stack_print) 
001: 'c1%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'a%' type:i (0)
001: 'c1%' type:i (0)
 BE:

Type Check Stack (2)

000: 'a%' type:i (0)
001: 'c1%' type:i (0)
 BE:AT
FN: 2 args
(function_return_type) 
function_return_type: 'AT' =>v
(function_return_type) 
function_return_type: 'AT' =>17
ret_type;17 v
typecheck_expression:Ret type of AT : v
type_check_stack_pop: 'c1%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'a%' type:0
(type_check_stack_print) 
------------------

FN ARG 1 ri c1% 0(i)  Arg ok
type_check_stack_pop: 'a%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (0)

(type_check_stack_print) 
------------------

FN ARG 0 ri a% 0(i)  Arg ok
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:17
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'a%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? '' nidx:-1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'c1%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'AT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'a%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     i rq:i 'c1%'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_FUNCTION     v rq:v 'AT'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
(process_expression_types) 
==INFIX==

Var: a% ary:0 NumIdx:0
infix_stack_push: 'a%'
Var: c1% ary:0 NumIdx:0
infix_stack_push: 'c1%'
infix_stack_pop: 'c1%'
infix_stack_pop: 'a%'
infix_stack_push: 'AT(a% c1% )'
infix_stack_pop: 'AT(a% c1% )'
(process_expression_types) ==AT(a% c1% )==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_START    U rq:?   0:
(    output_qcode) N4 EXP_BUFF_ID_VARIABLE     i rq:i c1%  0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_FUNCTION     v rq:v AT  0:
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:i   0:

 (check_literal) check_literal:lit=':' idx=12 ':PRINT CHR$(0) :BEEP b%,10*b% '
 (check_literal) check_literal:After drop space:':' idx=12 ':PRINT CHR$(0) :BEEP b%,10*b% '
 (check_literal) check_literal:After while():PRINT CHR$(0) :BEEP b%,10*b% 
 (check_literal) check_literal:ret1 

 (scan_literal) scan_literal:lit=':' 'PRINT CHR$(0) :BEEP b%,10*b% '
 (scan_literal) scan_literal:After drop space:'PRINT CHR$(0) :BEEP b%,10*b% '
 (scan_literal) scan_literal:while loop:PRINT CHR$(0) :BEEP b%,10*b% 
 (scan_literal) scan_literal:ret1

 (check_line) check_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'PRINT CHR$(0) :BEEP b%,10*b% ':
    (check_vname) check_vname ret1 ' CHR$(0) :BEEP b%,10*b% ':
   (check_variable) check_variable: ' CHR$(0) :BEEP b%,10*b% '
   (check_variable) check_variable: Ary test ' CHR$(0) :BEEP b%,10*b% '

    (check_literal) check_literal:lit='(' idx=18 ' CHR$(0) :BEEP b%,10*b% '
    (check_literal) check_literal:After drop space:'(' idx=18 ' CHR$(0) :BEEP b%,10*b% '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=18 ' CHR$(0) :BEEP b%,10*b% '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=19 'CHR$(0) :BEEP b%,10*b% '
  (check_literal)   '=' != 'C'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'PRINT CHR$(0) :BEEP b%,10*b% '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'PRINT'
(check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=24, ' CHR$(0) :BEEP b%,10*b% '
========================================================
  AT a%,c1% :PRINT CHR$(0) :BEEP b%,10*b% 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'PRINT CHR$(0) :BEEP b%,10*b% ':
    (check_vname) check_vname ret1 ' CHR$(0) :BEEP b%,10*b% ':
   (check_variable) check_variable: ' CHR$(0) :BEEP b%,10*b% '
   (check_variable) check_variable: Ary test ' CHR$(0) :BEEP b%,10*b% '

    (check_literal) check_literal:lit='(' idx=18 ' CHR$(0) :BEEP b%,10*b% '
    (check_literal) check_literal:After drop space:'(' idx=18 ' CHR$(0) :BEEP b%,10*b% '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=18 ' CHR$(0) :BEEP b%,10*b% '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=19 'CHR$(0) :BEEP b%,10*b% '
  (check_literal)   '=' != 'C'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'PRINT CHR$(0) :BEEP b%,10*b% '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'PRINT'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'PRINT' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) PRINT is function
 (function_return_type) 
function_return_type: 'PRINT' =>v
 (function_return_type) 
function_return_type: 'PRINT' =>17
process_token: 'PRINT' t=>v
 Push:'PRINT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' CHR$(0) :BEEP b%,10*b% '

   (check_eitem) check_eitem: 'CHR$(0) :BEEP b%,10*b% '

    (check_operator) check_operator: CHR$(0) :BEEP b%,10*b% 

     (check_literal) check_literal:lit=' ,' idx=19 'CHR$(0) :BEEP b%,10*b% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=19 'CHR$(0) :BEEP b%,10*b% '
     (check_literal)   ',' != 'C'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'CHR$(0) :BEEP b%,10*b% '
    (check_function) check_function: ret1 Found fn=>'CHR$'
   (check_eitem) check_eitem:ret1

   (scan_eitem) scan_eitem:

    (check_operator) check_operator: CHR$(0) :BEEP b%,10*b% 

     (check_literal) check_literal:lit=' ,' idx=19 'CHR$(0) :BEEP b%,10*b% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=19 'CHR$(0) :BEEP b%,10*b% '
     (check_literal)   ',' != 'C'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'CHR$(0) :BEEP b%,10*b% '
    (check_function) check_function: ret1 Found fn=>'CHR$'

    (scan_function) scan_function:
   Frst:0 T:'CHR$' exptype:U
    (token_is_function) 
token_is_function:
    (token_is_function) CHR$ is function
    (function_return_type) 
function_return_type: 'CHR$' =>s
    (function_return_type) 
function_return_type: 'CHR$' =>2
process_token: 'CHR$' t=>s
 Push:'CHR$'
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (3)

    (op_stack_print) 
000: PRINT type:17
    (op_stack_print) 
001: ( type:16
    (op_stack_print) 
002: CHR$ type:2
    (op_stack_print) 
------------------

    (scan_expression) n commas now:0

     (check_eitem) check_eitem: '(0) :BEEP b%,10*b% '

      (check_operator) check_operator: (0) :BEEP b%,10*b% 

       (check_literal) check_literal:lit=' ,' idx=23 '(0) :BEEP b%,10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=23 '(0) :BEEP b%,10*b% '
       (check_literal)   ',' != '('
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: '(0) :BEEP b%,10*b% '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=23 '(0) :BEEP b%,10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=23 '(0) :BEEP b%,10*b% '
       (check_literal)   '%' != '('
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=23 '(0) :BEEP b%,10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=23 '(0) :BEEP b%,10*b% '
       (check_literal)   '"' != '('
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '(0) :BEEP b%,10*b% '
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname '(0) :BEEP b%,10*b% ':
        (check_vname) check_vname ret0 '(0) :BEEP b%,10*b% ':
       (check_variable) check_variable:ret0 
      (check_atom) check_atom:ret1

      (check_sub_expr) check_sub_expr:

       (check_literal) check_literal:lit=' (' idx=23 '(0) :BEEP b%,10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'(' idx=23 '(0) :BEEP b%,10*b% '
       (check_literal) check_literal:After while():0) :BEEP b%,10*b% 
       (check_literal) check_literal:ret1 
      (check_sub_expr) check_sub_expr: ret1
     (check_eitem) check_eitem:ret1

     (scan_eitem) scan_eitem:

      (check_operator) check_operator: (0) :BEEP b%,10*b% 

       (check_literal) check_literal:lit=' ,' idx=23 '(0) :BEEP b%,10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=23 '(0) :BEEP b%,10*b% '
       (check_literal)   ',' != '('
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: '(0) :BEEP b%,10*b% '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=23 '(0) :BEEP b%,10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=23 '(0) :BEEP b%,10*b% '
       (check_literal)   '%' != '('
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=23 '(0) :BEEP b%,10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=23 '(0) :BEEP b%,10*b% '
       (check_literal)   '"' != '('
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '(0) :BEEP b%,10*b% '
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname '(0) :BEEP b%,10*b% ':
        (check_vname) check_vname ret0 '(0) :BEEP b%,10*b% ':
       (check_variable) check_variable:ret0 
      (check_atom) check_atom:ret1

      (check_sub_expr) check_sub_expr:

       (check_literal) check_literal:lit=' (' idx=23 '(0) :BEEP b%,10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'(' idx=23 '(0) :BEEP b%,10*b% '
       (check_literal) check_literal:After while():0) :BEEP b%,10*b% 
       (check_literal) check_literal:ret1 
      (check_sub_expr) check_sub_expr: ret1

      (scan_sub_expr) scan_sub_expr:

       (scan_literal) scan_literal:lit=' (' '(0) :BEEP b%,10*b% '
       (scan_literal) scan_literal:After drop space:'(0) :BEEP b%,10*b% '
       (scan_literal) scan_literal:while loop:(0) :BEEP b%,10*b% 
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (4)

       (op_stack_print) 
000: PRINT type:17
       (op_stack_print) 
001: ( type:16
       (op_stack_print) 
002: CHR$ type:2
       (op_stack_print) 
003: ( type:16
       (op_stack_print) 
------------------

       (scan_literal) scan_literal:ret1
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (5)

      (op_stack_print) 
000: PRINT type:17
      (op_stack_print) 
001: ( type:16
      (op_stack_print) 
002: CHR$ type:2
      (op_stack_print) 
003: ( type:16
      (op_stack_print) 
004: ( type:16
      (op_stack_print) 
------------------


       (scan_expression) scan_expression: '0) :BEEP b%,10*b% '

        (check_eitem) check_eitem: '0) :BEEP b%,10*b% '

         (check_operator) check_operator: 0) :BEEP b%,10*b% 

          (check_literal) check_literal:lit=' ,' idx=24 '0) :BEEP b%,10*b% '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:',' idx=24 '0) :BEEP b%,10*b% '
          (check_literal)   ',' != '0'
          (check_literal) check_literal: ret0
         (check_operator) ret0:is comma: 0

         (check_function) check_function: '0) :BEEP b%,10*b% '
         (check_function) check_function: ret0

         (check_atom) check_atom:

          (check_literal) check_literal:lit=' %' idx=24 '0) :BEEP b%,10*b% '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=24 '0) :BEEP b%,10*b% '
          (check_literal)   '%' != '0'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=24 '0) :BEEP b%,10*b% '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=24 '0) :BEEP b%,10*b% '
          (check_literal)   '"' != '0'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '0) :BEEP b%,10*b% '
           (check_integer) check_integer:ret1
          (check_number) check_number: ret1
         (check_atom) check_atom:ret1
        (check_eitem) check_eitem:ret1

        (scan_eitem) scan_eitem:

         (check_operator) check_operator: 0) :BEEP b%,10*b% 

          (check_literal) check_literal:lit=' ,' idx=24 '0) :BEEP b%,10*b% '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:',' idx=24 '0) :BEEP b%,10*b% '
          (check_literal)   ',' != '0'
          (check_literal) check_literal: ret0
         (check_operator) ret0:is comma: 0

         (check_function) check_function: '0) :BEEP b%,10*b% '
         (check_function) check_function: ret0

         (check_atom) check_atom:

          (check_literal) check_literal:lit=' %' idx=24 '0) :BEEP b%,10*b% '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=24 '0) :BEEP b%,10*b% '
          (check_literal)   '%' != '0'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=24 '0) :BEEP b%,10*b% '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=24 '0) :BEEP b%,10*b% '
          (check_literal)   '"' != '0'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '0) :BEEP b%,10*b% '
           (check_integer) check_integer:ret1
          (check_number) check_number: ret1
         (check_atom) check_atom:ret1

         (scan_atom) scan_atom:

          (check_literal) check_literal:lit=' %' idx=24 '0) :BEEP b%,10*b% '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=24 '0) :BEEP b%,10*b% '
          (check_literal)   '%' != '0'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=24 '0) :BEEP b%,10*b% '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=24 '0) :BEEP b%,10*b% '
          (check_literal)   '"' != '0'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '0) :BEEP b%,10*b% '
           (check_integer) check_integer:ret1
          (check_number) check_number: ret1

          (scan_number) scan_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '0) :BEEP b%,10*b% '
           (check_integer) check_integer:ret1

           (scan_integer) scan_integer:
           (scan_integer) scan_integer:ret1
   Frst:0 T:'0' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U U U )] i i 0
          (scan_integer) scan_integer:ret1  0
         (scan_atom) scan_atom:ret1
        (scan_expression) n commas now:0

         (check_eitem) check_eitem: ') :BEEP b%,10*b% '

          (check_operator) check_operator: ) :BEEP b%,10*b% 

           (check_literal) check_literal:lit=' ,' idx=25 ') :BEEP b%,10*b% '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:',' idx=25 ') :BEEP b%,10*b% '
           (check_literal)   ',' != ')'
           (check_literal) check_literal: ret0
          (check_operator) ret0:is comma: 0

          (check_function) check_function: ') :BEEP b%,10*b% '
          (check_function) check_function: ret0

          (check_atom) check_atom:

           (check_literal) check_literal:lit=' %' idx=25 ') :BEEP b%,10*b% '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'%' idx=25 ') :BEEP b%,10*b% '
           (check_literal)   '%' != ')'
           (check_literal) check_literal: ret0

           (check_literal) check_literal:lit=' "' idx=25 ') :BEEP b%,10*b% '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'"' idx=25 ') :BEEP b%,10*b% '
           (check_literal)   '"' != ')'
           (check_literal) check_literal: ret0

           (check_number) check_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret0

            (check_integer) check_integer: ') :BEEP b%,10*b% '
            (check_integer) check_integer:ret0
           (check_number) check_number: ret0

           (check_variable) check_variable:

            (check_vname) check_vname ') :BEEP b%,10*b% ':
            (check_vname) check_vname ret0 ') :BEEP b%,10*b% ':
           (check_variable) check_variable:ret0 
          (check_atom) check_atom:ret1

          (check_sub_expr) check_sub_expr:

           (check_literal) check_literal:lit=' (' idx=25 ') :BEEP b%,10*b% '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'(' idx=25 ') :BEEP b%,10*b% '
           (check_literal)   '(' != ')'
           (check_literal) check_literal: ret0
          (check_sub_expr) check_sub_expr: ret0
         (check_eitem) check_eitem:ret0
        (scan_expression) scan_expression: ret1 ') :BEEP b%,10*b% ' commas:0

        (scan_literal) scan_literal:lit=' )' ') :BEEP b%,10*b% '
        (scan_literal) scan_literal:After drop space:') :BEEP b%,10*b% '
        (scan_literal) scan_literal:while loop:) :BEEP b%,10*b% 
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
        (op_stack_print) 
------------------
        (op_stack_print) 
Operator Stack     (4)

        (op_stack_print) 
000: PRINT type:17
        (op_stack_print) 
001: ( type:16
        (op_stack_print) 
002: CHR$ type:2
        (op_stack_print) 
003: ( type:16
        (op_stack_print) 
------------------

(  output_sub_end)
        (token_is_function) 
token_is_function:
        (token_is_function) 
token_is_function:( is not function
(  output_sub_end)
        (scan_literal) scan_literal:ret1
   Frst:0 T:')' exptype:U
Pop 4
Pop '('
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (3)

       (op_stack_print) 
000: PRINT type:17
       (op_stack_print) 
001: ( type:16
       (op_stack_print) 
002: CHR$ type:2
       (op_stack_print) 
------------------

(  output_sub_end)
       (token_is_function) 
token_is_function:
       (token_is_function) CHR$ is function
Pop 5
Pop 'CHR$'
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (2)

       (op_stack_print) 
000: PRINT type:17
       (op_stack_print) 
001: ( type:16
       (op_stack_print) 
------------------

( output_function) [U,(U U )] s s CHR$
(  output_sub_end)
       (scan_sub_expr) scan_sub_expr:ret1
      (scan_expression) n commas now:0

       (check_eitem) check_eitem: ' :BEEP b%,10*b% '

        (check_operator) check_operator:  :BEEP b%,10*b% 

         (check_literal) check_literal:lit=' ,' idx=27 ':BEEP b%,10*b% '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:',' idx=27 ':BEEP b%,10*b% '
         (check_literal)   ',' != ':'
         (check_literal) check_literal: ret0
        (check_operator) ret0:is comma: 0

        (check_function) check_function: ':BEEP b%,10*b% '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=26 ' :BEEP b%,10*b% '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=27 ':BEEP b%,10*b% '
         (check_literal)   '%' != ':'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=26 ' :BEEP b%,10*b% '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=27 ':BEEP b%,10*b% '
         (check_literal)   '"' != ':'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: ':BEEP b%,10*b% '
          (check_integer) check_integer:ret0
         (check_number) check_number: ret0

         (check_variable) check_variable:

          (check_vname) check_vname ':BEEP b%,10*b% ':
          (check_vname) check_vname ret0 ':BEEP b%,10*b% ':
         (check_variable) check_variable:ret0 
        (check_atom) check_atom:ret1

        (check_sub_expr) check_sub_expr:

         (check_literal) check_literal:lit=' (' idx=26 ' :BEEP b%,10*b% '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'(' idx=27 ':BEEP b%,10*b% '
         (check_literal)   '(' != ':'
         (check_literal) check_literal: ret0
        (check_sub_expr) check_sub_expr: ret0
       (check_eitem) check_eitem:ret0
      (scan_expression) scan_expression: ret1 ' :BEEP b%,10*b% ' commas:0
     (scan_command) scan_command: ret1 =>'PRINT'
    (scan_command) 
ENDEXP
   Frst:0 T:')' exptype:U
Pop 4
Pop '('
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (1)

    (op_stack_print) 
000: PRINT type:17
    (op_stack_print) 
------------------

(  output_sub_end)
    (token_is_function) 
token_is_function:
    (token_is_function) PRINT is function
Pop 5
Pop 'PRINT'
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (0)

    (op_stack_print) 
------------------

( output_function) [U,(U )] v v PRINT
(  output_sub_end)
Finalise stack
    (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '0' nidx:25  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     s rq:s 'CHR$' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
 BE:

Type Check Stack (0)

 BE:

Type Check Stack (0)

 BE:

Type Check Stack (0)

 BE:0
type_check_stack_push: '0'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (1)

    (type_check_stack_print) 
000: '0' type:0
    (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '0' type:i (0)
 BE:

Type Check Stack (1)

000: '0' type:i (0)
 BE:

Type Check Stack (1)

000: '0' type:i (0)
 BE:

Type Check Stack (1)

000: '0' type:i (0)
 BE:CHR$
FN: 1 args
    (function_return_type) 
function_return_type: 'CHR$' =>s
    (function_return_type) 
function_return_type: 'CHR$' =>2
ret_type;2 s
typecheck_expression:Ret type of CHR$ : s
type_check_stack_pop: '0'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (0)

    (type_check_stack_print) 
------------------

FN ARG 0 ri 0 0(i)  Arg ok
type_check_stack_push: '000'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (1)

    (type_check_stack_print) 
000: '000' type:2
    (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:s (2)
 BE:

Type Check Stack (1)

000: '000' type:s (2)
 BE:

Type Check Stack (1)

000: '000' type:s (2)
 BE:PRINT
FN: 1 args
    (function_return_type) 
function_return_type: 'PRINT' =>v
    (function_return_type) 
function_return_type: 'PRINT' =>17
ret_type;17 v
typecheck_expression:Ret type of PRINT : v
type_check_stack_pop: '000'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (0)

    (type_check_stack_print) 
------------------

FN ARG 0 ri 000 2(s)  Arg not OK
type_check_stack_push: '000'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (1)

    (type_check_stack_print) 
000: '000' type:17
    (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '0' nidx:25  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     s rq:s 'CHR$' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_INTEGER      i rq:i '0'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_FUNCTION     s rq:s 'CHR$'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
(dump_exp_buffer2) N12 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
    (process_expression_types) 
==INFIX==

infix_stack_push: '0'
infix_stack_pop: '0'
infix_stack_push: 'CHR$(0 )'
infix_stack_pop: 'CHR$(0 )'
infix_stack_push: 'PRINT(CHR$(0 ) )'
infix_stack_pop: 'PRINT(CHR$(0 ) )'
    (process_expression_types) ==PRINT(CHR$(0 ) )==
    (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N4 EXP_BUFF_ID_INTEGER      i rq:i 0  0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N8 EXP_BUFF_ID_FUNCTION     s rq:s CHR$  0:
(    output_qcode) N9 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N10 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N11 EXP_BUFF_ID_FUNCTION     v rq:v PRINT  0:
(    output_qcode) N12 EXP_BUFF_ID_SUB_END      U rq:i   0:

     (check_literal) check_literal:lit=':' idx=27 ':BEEP b%,10*b% '
     (check_literal) check_literal:After drop space:':' idx=27 ':BEEP b%,10*b% '
     (check_literal) check_literal:After while():BEEP b%,10*b% 
     (check_literal) check_literal:ret1 

     (scan_literal) scan_literal:lit=':' 'BEEP b%,10*b% '
     (scan_literal) scan_literal:After drop space:'BEEP b%,10*b% '
     (scan_literal) scan_literal:while loop:BEEP b%,10*b% 
     (scan_literal) scan_literal:ret1

     (check_line) check_line:

      (check_assignment) check_assignment:

       (check_variable) check_variable:

        (check_vname) check_vname 'BEEP b%,10*b% ':
        (check_vname) check_vname ret1 ' b%,10*b% ':
       (check_variable) check_variable: ' b%,10*b% '
       (check_variable) check_variable: Ary test ' b%,10*b% '

        (check_literal) check_literal:lit='(' idx=32 ' b%,10*b% '
        (check_literal) check_literal:After drop space:'(' idx=32 ' b%,10*b% '
        (check_literal)   '(' != ' '
        (check_literal) check_literal: ret0
       (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
      (check_variable) check_variable:ret1 

      (check_literal) check_literal:lit=' =' idx=32 ' b%,10*b% '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'=' idx=33 'b%,10*b% '
      (check_literal)   '=' != 'b'
      (check_literal) check_literal: ret0
     (check_assignment) check_assignment:ret0

     (check_proc_call) check_proc_call:

      (check_textlabel) check_textlabel: 'BEEP b%,10*b% '
      (check_textlabel) check_textlabel:ret0
     (check_proc_call) check_proc_call:ret0

     (check_command) check_command:
     (check_command) check_command: ret1 found=> 'BEEP'
    (check_line) check_line:ret1
   (scan_cline) scan_cline: Checked len=10, ' b%,10*b% '
========================================================
  AT a%,c1% :PRINT CHR$(0) :BEEP b%,10*b% 
========================================================
(output_expression_start)

    (scan_line) scan_line:

     (check_assignment) check_assignment:

      (check_variable) check_variable:

       (check_vname) check_vname 'BEEP b%,10*b% ':
       (check_vname) check_vname ret1 ' b%,10*b% ':
      (check_variable) check_variable: ' b%,10*b% '
      (check_variable) check_variable: Ary test ' b%,10*b% '

       (check_literal) check_literal:lit='(' idx=32 ' b%,10*b% '
       (check_literal) check_literal:After drop space:'(' idx=32 ' b%,10*b% '
       (check_literal)   '(' != ' '
       (check_literal) check_literal: ret0
      (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
     (check_variable) check_variable:ret1 

     (check_literal) check_literal:lit=' =' idx=32 ' b%,10*b% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'=' idx=33 'b%,10*b% '
     (check_literal)   '=' != 'b'
     (check_literal) check_literal: ret0
    (check_assignment) check_assignment:ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) check_textlabel: 'BEEP b%,10*b% '
     (check_textlabel) check_textlabel:ret0
    (check_proc_call) check_proc_call:ret0

    (check_command) check_command:
    (check_command) check_command: ret1 found=> 'BEEP'
   (scan_line) scan_line:check_command: 

    (scan_command) scan_command:
   Frst:1 T:'BEEP' exptype:U
    (token_is_function) 
token_is_function:
    (token_is_function) BEEP is function
    (function_return_type) 
function_return_type: 'BEEP' =>v
    (function_return_type) 
function_return_type: 'BEEP' =>17
process_token: 'BEEP' t=>v
 Push:'BEEP'
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (1)

    (op_stack_print) 
000: BEEP type:17
    (op_stack_print) 
------------------

    (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (2)

    (op_stack_print) 
000: BEEP type:17
    (op_stack_print) 
001: ( type:16
    (op_stack_print) 
------------------


     (scan_expression) scan_expression: ' b%,10*b% '

      (check_eitem) check_eitem: 'b%,10*b% '

       (check_operator) check_operator: b%,10*b% 

        (check_literal) check_literal:lit=' ,' idx=33 'b%,10*b% '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:',' idx=33 'b%,10*b% '
        (check_literal)   ',' != 'b'
        (check_literal) check_literal: ret0
       (check_operator) ret0:is comma: 0

       (check_function) check_function: 'b%,10*b% '
       (check_function) check_function: ret0

       (check_atom) check_atom:

        (check_literal) check_literal:lit=' %' idx=33 'b%,10*b% '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'%' idx=33 'b%,10*b% '
        (check_literal)   '%' != 'b'
        (check_literal) check_literal: ret0

        (check_literal) check_literal:lit=' "' idx=33 'b%,10*b% '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'"' idx=33 'b%,10*b% '
        (check_literal)   '"' != 'b'
        (check_literal) check_literal: ret0

        (check_number) check_number:

         (check_float) check_float:
         (isfloatdigit) isfloatdigit:
         (check_float) check_float: ret0

         (check_integer) check_integer: 'b%,10*b% '
         (check_integer) check_integer:ret0
        (check_number) check_number: ret0

        (check_variable) check_variable:

         (check_vname) check_vname 'b%,10*b% ':
         (check_vname) check_vname ret1 '%,10*b% ':
        (check_variable) check_variable: '%,10*b% '
        (check_variable) check_variable: Ary test ',10*b% '

         (check_literal) check_literal:lit='(' idx=35 ',10*b% '
         (check_literal) check_literal:After drop space:'(' idx=35 ',10*b% '
         (check_literal)   '(' != ','
         (check_literal) check_literal: ret0
        (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
       (check_variable) check_variable:ret1 
      (check_atom) check_atom:ret1
     (check_eitem) check_eitem:ret1

     (scan_eitem) scan_eitem:

      (check_operator) check_operator: b%,10*b% 

       (check_literal) check_literal:lit=' ,' idx=33 'b%,10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=33 'b%,10*b% '
       (check_literal)   ',' != 'b'
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: 'b%,10*b% '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=33 'b%,10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=33 'b%,10*b% '
       (check_literal)   '%' != 'b'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=33 'b%,10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=33 'b%,10*b% '
       (check_literal)   '"' != 'b'
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: 'b%,10*b% '
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname 'b%,10*b% ':
        (check_vname) check_vname ret1 '%,10*b% ':
       (check_variable) check_variable: '%,10*b% '
       (check_variable) check_variable: Ary test ',10*b% '

        (check_literal) check_literal:lit='(' idx=35 ',10*b% '
        (check_literal) check_literal:After drop space:'(' idx=35 ',10*b% '
        (check_literal)   '(' != ','
        (check_literal) check_literal: ret0
       (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
      (check_variable) check_variable:ret1 
     (check_atom) check_atom:ret1

     (scan_atom) scan_atom:

      (check_literal) check_literal:lit=' %' idx=33 'b%,10*b% '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=33 'b%,10*b% '
      (check_literal)   '%' != 'b'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=33 'b%,10*b% '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=33 'b%,10*b% '
      (check_literal)   '"' != 'b'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: 'b%,10*b% '
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname 'b%,10*b% ':
       (check_vname) check_vname ret1 '%,10*b% ':
      (check_variable) check_variable: '%,10*b% '
      (check_variable) check_variable: Ary test ',10*b% '

       (check_literal) check_literal:lit='(' idx=35 ',10*b% '
       (check_literal) check_literal:After drop space:'(' idx=35 ',10*b% '
       (check_literal)   '(' != ','
       (check_literal) check_literal: ret0
      (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
     (check_variable) check_variable:ret1 

     (scan_variable) scan_variable:

      (scan_vname) scan_vname: 'b%,10*b% '
      (scan_vname) scan_vname: ret1 'b'
     (scan_variable) scan_variable: '%,10*b% ' vname='b'
     (scan_variable) scan_variable: Ary test ',10*b% '

      (check_literal) check_literal:lit='(' idx=35 ',10*b% '
      (check_literal) check_literal:After drop space:'(' idx=35 ',10*b% '
      (check_literal)   '(' != ','
      (check_literal) check_literal: ret0
     (scan_variable) scan_variable:ret1 vname='b%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'b%' exptype:U
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:b% is not function
token_is_variable: tok:'b%'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:b% is not function
    (init_get_name) 
init_get_name:'b%'
    (init_get_name) 
init_get_name:'b%'
    (get_name) 
get_name:gn:'b%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,(U )] i i b%
    (print_var_info) 
VAR INFO: '                b%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
    (scan_atom) scan_atom:ret1
   (scan_expression) n commas now:0

    (check_eitem) check_eitem: ',10*b% '

     (check_operator) check_operator: ,10*b% 

      (check_literal) check_literal:lit=' ,' idx=35 ',10*b% '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=35 ',10*b% '
      (check_literal) check_literal:After while():10*b% 
      (check_literal) check_literal:ret1 
     (check_operator) ret1:is comma: 0
    (check_eitem) check_eitem:ret1 comma:1

    (scan_eitem) scan_eitem:

     (check_operator) check_operator: ,10*b% 

      (check_literal) check_literal:lit=' ,' idx=35 ',10*b% '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=35 ',10*b% '
      (check_literal) check_literal:After while():10*b% 
      (check_literal) check_literal:ret1 
     (check_operator) ret1:is comma: 0

     (scan_operator) scan_operator: ',10*b% '

      (check_literal) check_literal:lit=' ,' idx=35 ',10*b% '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=35 ',10*b% '
      (check_literal) check_literal:After while():10*b% 
      (check_literal) check_literal:ret1 

      (scan_literal) scan_literal:lit=' ,' ',10*b% '
      (scan_literal) scan_literal:After drop space:',10*b% '
      (scan_literal) scan_literal:while loop:,10*b% 
   Frst:0 T:',' exptype:i
(output_sub_start)
      (scan_literal) scan_literal:ret1
     (scan_operator) ret1:is comma: 1
    (scan_eitem) Is comma;1
    (scan_expression) n commas now:1

     (check_eitem) check_eitem: '10*b% '

      (check_operator) check_operator: 10*b% 

       (check_literal) check_literal:lit=' ,' idx=36 '10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=36 '10*b% '
       (check_literal)   ',' != '1'
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: '10*b% '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=36 '10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=36 '10*b% '
       (check_literal)   '%' != '1'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=36 '10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=36 '10*b% '
       (check_literal)   '"' != '1'
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '10*b% '
        (check_integer) check_integer:ret1
       (check_number) check_number: ret1
      (check_atom) check_atom:ret1
     (check_eitem) check_eitem:ret1

     (scan_eitem) scan_eitem:

      (check_operator) check_operator: 10*b% 

       (check_literal) check_literal:lit=' ,' idx=36 '10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=36 '10*b% '
       (check_literal)   ',' != '1'
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: '10*b% '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=36 '10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=36 '10*b% '
       (check_literal)   '%' != '1'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=36 '10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=36 '10*b% '
       (check_literal)   '"' != '1'
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '10*b% '
        (check_integer) check_integer:ret1
       (check_number) check_number: ret1
      (check_atom) check_atom:ret1

      (scan_atom) scan_atom:

       (check_literal) check_literal:lit=' %' idx=36 '10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=36 '10*b% '
       (check_literal)   '%' != '1'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=36 '10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=36 '10*b% '
       (check_literal)   '"' != '1'
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '10*b% '
        (check_integer) check_integer:ret1
       (check_number) check_number: ret1

       (scan_number) scan_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '10*b% '
        (check_integer) check_integer:ret1

        (scan_integer) scan_integer:
        (scan_integer) scan_integer:ret1
   Frst:0 T:'10' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U )] i i 10
       (scan_integer) scan_integer:ret1  10
      (scan_atom) scan_atom:ret1
     (scan_expression) n commas now:1

      (check_eitem) check_eitem: '*b% '

       (check_operator) check_operator: *b% 

        (check_literal) check_literal:lit=' ,' idx=38 '*b% '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:',' idx=38 '*b% '
        (check_literal)   ',' != '*'
        (check_literal) check_literal: ret0
       (check_operator) ret1:is comma: 0
      (check_eitem) check_eitem:ret1 comma:1

      (scan_eitem) scan_eitem:

       (check_operator) check_operator: *b% 

        (check_literal) check_literal:lit=' ,' idx=38 '*b% '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:',' idx=38 '*b% '
        (check_literal)   ',' != '*'
        (check_literal) check_literal: ret0
       (check_operator) ret1:is comma: 0

       (scan_operator) scan_operator: '*b% '

        (check_literal) check_literal:lit=' ,' idx=38 '*b% '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:',' idx=38 '*b% '
        (check_literal)   ',' != '*'
        (check_literal) check_literal: ret0
       (scan_operator) scan_operator: ret1 'b% '
   Frst:0 T:'*' exptype:i
      (operator_precedence) 
* is operator
'*' is operator
      (process_token) 
Token is operator o1 name:* o2 name:(
      (process_token) 
opr1:5 opr2:0
Push 1
 Push:'*'
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (3)

      (op_stack_print) 
000: BEEP type:17
      (op_stack_print) 
001: ( type:16
      (op_stack_print) 
002: * type:0
      (op_stack_print) 
------------------

      (scan_eitem) Is comma;0
      (scan_expression) n commas now:1

       (check_eitem) check_eitem: 'b% '

        (check_operator) check_operator: b% 

         (check_literal) check_literal:lit=' ,' idx=39 'b% '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:',' idx=39 'b% '
         (check_literal)   ',' != 'b'
         (check_literal) check_literal: ret0
        (check_operator) ret0:is comma: 0

        (check_function) check_function: 'b% '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=39 'b% '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=39 'b% '
         (check_literal)   '%' != 'b'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=39 'b% '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=39 'b% '
         (check_literal)   '"' != 'b'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: 'b% '
          (check_integer) check_integer:ret0
         (check_number) check_number: ret0

         (check_variable) check_variable:

          (check_vname) check_vname 'b% ':
          (check_vname) check_vname ret1 '% ':
         (check_variable) check_variable: '% '
         (check_variable) check_variable: Ary test ' '

          (check_literal) check_literal:lit='(' idx=41 ' '
          (check_literal) check_literal:After drop space:'(' idx=41 ' '
          (check_literal)   '(' != ' '
          (check_literal) check_literal: ret0
         (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
        (check_variable) check_variable:ret1 
       (check_atom) check_atom:ret1
      (check_eitem) check_eitem:ret1

      (scan_eitem) scan_eitem:

       (check_operator) check_operator: b% 

        (check_literal) check_literal:lit=' ,' idx=39 'b% '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:',' idx=39 'b% '
        (check_literal)   ',' != 'b'
        (check_literal) check_literal: ret0
       (check_operator) ret0:is comma: 0

       (check_function) check_function: 'b% '
       (check_function) check_function: ret0

       (check_atom) check_atom:

        (check_literal) check_literal:lit=' %' idx=39 'b% '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'%' idx=39 'b% '
        (check_literal)   '%' != 'b'
        (check_literal) check_literal: ret0

        (check_literal) check_literal:lit=' "' idx=39 'b% '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'"' idx=39 'b% '
        (check_literal)   '"' != 'b'
        (check_literal) check_literal: ret0

        (check_number) check_number:

         (check_float) check_float:
         (isfloatdigit) isfloatdigit:
         (check_float) check_float: ret0

         (check_integer) check_integer: 'b% '
         (check_integer) check_integer:ret0
        (check_number) check_number: ret0

        (check_variable) check_variable:

         (check_vname) check_vname 'b% ':
         (check_vname) check_vname ret1 '% ':
        (check_variable) check_variable: '% '
        (check_variable) check_variable: Ary test ' '

         (check_literal) check_literal:lit='(' idx=41 ' '
         (check_literal) check_literal:After drop space:'(' idx=41 ' '
         (check_literal)   '(' != ' '
         (check_literal) check_literal: ret0
        (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
       (check_variable) check_variable:ret1 
      (check_atom) check_atom:ret1

      (scan_atom) scan_atom:

       (check_literal) check_literal:lit=' %' idx=39 'b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=39 'b% '
       (check_literal)   '%' != 'b'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=39 'b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=39 'b% '
       (check_literal)   '"' != 'b'
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: 'b% '
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname 'b% ':
        (check_vname) check_vname ret1 '% ':
       (check_variable) check_variable: '% '
       (check_variable) check_variable: Ary test ' '

        (check_literal) check_literal:lit='(' idx=41 ' '
        (check_literal) check_literal:After drop space:'(' idx=41 ' '
        (check_literal)   '(' != ' '
        (check_literal) check_literal: ret0
       (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
      (check_variable) check_variable:ret1 

      (scan_variable) scan_variable:

       (scan_vname) scan_vname: 'b% '
       (scan_vname) scan_vname: ret1 'b'
      (scan_variable) scan_variable: '% ' vname='b'
      (scan_variable) scan_variable: Ary test ' '

       (check_literal) check_literal:lit='(' idx=41 ' '
       (check_literal) check_literal:After drop space:'(' idx=41 ' '
       (check_literal)   '(' != ' '
       (check_literal) check_literal: ret0
      (scan_variable) scan_variable:ret1 vname='b%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'b%' exptype:i
     (operator_precedence) 
* is operator
     (token_is_function) 
token_is_function:
     (token_is_function) 
token_is_function:b% is not function
token_is_variable: tok:'b%'
     (token_is_function) 
token_is_function:
     (token_is_function) 
token_is_function:b% is not function
     (init_get_name) 
init_get_name:'b%'
     (init_get_name) 
init_get_name:'b%'
     (get_name) 
get_name:gn:'b%'
process_token:type:i req_type:i
modify_expression_type:Inittype:i Intype:i Outtype:i
( output_variable) [i,(U )] i i b%
     (print_var_info) 
VAR INFO: '                b%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
     (scan_atom) scan_atom:ret1
    (scan_expression) n commas now:1

     (check_eitem) check_eitem: ' '

      (check_operator) check_operator:  

       (check_literal) check_literal:lit=' ,' idx=42 ''
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=42 ''
       (check_literal) check_literal  ret0 Empty test string
      (check_operator) ret0:is comma: 0

      (check_function) check_function: ''
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=41 ' '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=42 ''
       (check_literal) check_literal  ret0 Empty test string

       (check_literal) check_literal:lit=' "' idx=41 ' '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=42 ''
       (check_literal) check_literal  ret0 Empty test string

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: ''
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname '':
        (check_vname) check_vname ret0 '':
       (check_variable) check_variable:ret0 
      (check_atom) check_atom:ret1

      (check_sub_expr) check_sub_expr:

       (check_literal) check_literal:lit=' (' idx=41 ' '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'(' idx=42 ''
       (check_literal) check_literal  ret0 Empty test string
      (check_sub_expr) check_sub_expr: ret0
     (check_eitem) check_eitem:ret0
    (scan_expression) scan_expression: ret1 ' ' commas:1
   (scan_command) scan_command: ret1 =>'BEEP'
  (scan_command) 
ENDEXP
   Frst:0 T:')' exptype:i
  (operator_precedence) 
* is operator
  (process_token) 
Pop 3
Pop '*'
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (2)

  (op_stack_print) 
000: BEEP type:17
  (op_stack_print) 
001: ( type:16
  (op_stack_print) 
------------------

( output_operator) [i,(U )] i i *
  (token_is_function) 
token_is_function:
  (token_is_function) 
token_is_function:* is not function
Pop 4
Pop '('
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (1)

  (op_stack_print) 
000: BEEP type:17
  (op_stack_print) 
------------------

(  output_sub_end)
  (token_is_function) 
token_is_function:
  (token_is_function) BEEP is function
Pop 5
Pop 'BEEP'
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (0)

  (op_stack_print) 
------------------

( output_function) [i,(U )] v v BEEP
(  output_sub_end)
Finalise stack
  (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'b%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? '' nidx:-1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '10' nidx:38  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'b%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '*' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'BEEP' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
 BE:

Type Check Stack (0)

 BE:b%
type_check_stack_push: 'b%'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (1)

  (type_check_stack_print) 
000: 'b%' type:0
  (type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'b%' type:i (0)
 BE:

Type Check Stack (1)

000: 'b%' type:i (0)
 BE:10
type_check_stack_push: '10'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (2)

  (type_check_stack_print) 
000: 'b%' type:0
  (type_check_stack_print) 
001: '10' type:0
  (type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'b%' type:i (0)
001: '10' type:i (0)
 BE:b%
type_check_stack_push: 'b%'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (3)

  (type_check_stack_print) 
000: 'b%' type:0
  (type_check_stack_print) 
001: '10' type:0
  (type_check_stack_print) 
002: 'b%' type:0
  (type_check_stack_print) 
------------------


Type Check Stack (3)

000: 'b%' type:i (0)
001: '10' type:i (0)
002: 'b%' type:i (0)
 BE:*
BUFF_ID_OPERATOR
Found operator *
type_check_stack_pop: 'b%'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (2)

  (type_check_stack_print) 
000: 'b%' type:0
  (type_check_stack_print) 
001: '10' type:0
  (type_check_stack_print) 
------------------

type_check_stack_pop: '10'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (1)

  (type_check_stack_print) 
000: 'b%' type:0
  (type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (2)

  (type_check_stack_print) 
000: 'b%' type:0
  (type_check_stack_print) 
001: '000' type:0
  (type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'b%' type:i (0)
001: '000' type:i (0)
 BE:

Type Check Stack (2)

000: 'b%' type:i (0)
001: '000' type:i (0)
 BE:BEEP
FN: 2 args
  (function_return_type) 
function_return_type: 'BEEP' =>v
  (function_return_type) 
function_return_type: 'BEEP' =>17
ret_type;17 v
typecheck_expression:Ret type of BEEP : v
type_check_stack_pop: '000'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (1)

  (type_check_stack_print) 
000: 'b%' type:0
  (type_check_stack_print) 
------------------

FN ARG 1 ri 000 0(i)  Arg ok
type_check_stack_pop: 'b%'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (0)

  (type_check_stack_print) 
------------------

FN ARG 0 ri b% 0(i)  Arg ok
type_check_stack_push: '000'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (1)

  (type_check_stack_print) 
000: '000' type:17
  (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'b%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? '' nidx:-1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '10' nidx:38  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'b%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '*' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'BEEP' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'b%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_INTEGER      i rq:i '10'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_VARIABLE     i rq:i 'b%'  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 5 4
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_FUNCTION     v rq:v 'BEEP'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
  (process_expression_types) 
==INFIX==

Var: b% ary:0 NumIdx:0
infix_stack_push: 'b%'
infix_stack_push: '10'
Var: b% ary:0 NumIdx:0
infix_stack_push: 'b%'
infix_stack_pop: 'b%'
infix_stack_pop: '10'
infix_stack_push: '(10 * b%)'
infix_stack_pop: '(10 * b%)'
infix_stack_pop: 'b%'
infix_stack_push: 'BEEP(b% (10 * b%) )'
infix_stack_pop: 'BEEP(b% (10 * b%) )'
  (process_expression_types) ==BEEP(b% (10 * b%) )==
  (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_START    U rq:?   0:
(    output_qcode) N4 EXP_BUFF_ID_INTEGER      i rq:i 10  0:
(    output_qcode) N5 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
(    output_qcode) N6 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 5 4
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N8 EXP_BUFF_ID_FUNCTION     v rq:v BEEP  0:
(    output_qcode) N9 EXP_BUFF_ID_SUB_END      U rq:i   0:

   (check_literal) check_literal:lit=':' idx=42 ''
   (check_literal) check_literal:After drop space:':' idx=42 ''
   (check_literal) check_literal  ret0 Empty test string
  (translate_file) 
cline scanned OK
******************************
**  AT a%,c% :PRINT CHR$(1) **
******************************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'AT a%,c% :PRINT CHR$(1) ':
     (check_vname) check_vname ret1 ' a%,c% :PRINT CHR$(1) ':
    (check_variable) check_variable: ' a%,c% :PRINT CHR$(1) '
    (check_variable) check_variable: Ary test ' a%,c% :PRINT CHR$(1) '

     (check_literal) check_literal:lit='(' idx=4 ' a%,c% :PRINT CHR$(1) '
     (check_literal) check_literal:After drop space:'(' idx=4 ' a%,c% :PRINT CHR$(1) '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=4 ' a%,c% :PRINT CHR$(1) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=5 'a%,c% :PRINT CHR$(1) '
   (check_literal)   '=' != 'a'
   (check_literal) check_literal: ret0
  (check_assignment) check_assignment:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) check_textlabel: 'AT a%,c% :PRINT CHR$(1) '
   (check_textlabel) check_textlabel:ret0
  (check_proc_call) check_proc_call:ret0

  (check_command) check_command:
  (check_command) check_command: ret1 found=> 'AT'
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=22, ' a%,c% :PRINT CHR$(1) '
========================================================
  AT a%,c% :PRINT CHR$(1) 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'AT a%,c% :PRINT CHR$(1) ':
    (check_vname) check_vname ret1 ' a%,c% :PRINT CHR$(1) ':
   (check_variable) check_variable: ' a%,c% :PRINT CHR$(1) '
   (check_variable) check_variable: Ary test ' a%,c% :PRINT CHR$(1) '

    (check_literal) check_literal:lit='(' idx=4 ' a%,c% :PRINT CHR$(1) '
    (check_literal) check_literal:After drop space:'(' idx=4 ' a%,c% :PRINT CHR$(1) '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=4 ' a%,c% :PRINT CHR$(1) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=5 'a%,c% :PRINT CHR$(1) '
  (check_literal)   '=' != 'a'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'AT a%,c% :PRINT CHR$(1) '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'AT'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'AT' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) AT is function
 (function_return_type) 
function_return_type: 'AT' =>v
 (function_return_type) 
function_return_type: 'AT' =>17
process_token: 'AT' t=>v
 Push:'AT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: AT type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: AT type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' a%,c% :PRINT CHR$(1) '

   (check_eitem) check_eitem: 'a%,c% :PRINT CHR$(1) '

    (check_operator) check_operator: a%,c% :PRINT CHR$(1) 

     (check_literal) check_literal:lit=' ,' idx=5 'a%,c% :PRINT CHR$(1) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=5 'a%,c% :PRINT CHR$(1) '
     (check_literal)   ',' != 'a'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'a%,c% :PRINT CHR$(1) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=5 'a%,c% :PRINT CHR$(1) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=5 'a%,c% :PRINT CHR$(1) '
     (check_literal)   '%' != 'a'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=5 'a%,c% :PRINT CHR$(1) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=5 'a%,c% :PRINT CHR$(1) '
     (check_literal)   '"' != 'a'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'a%,c% :PRINT CHR$(1) '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'a%,c% :PRINT CHR$(1) ':
      (check_vname) check_vname ret1 '%,c% :PRINT CHR$(1) ':
     (check_variable) check_variable: '%,c% :PRINT CHR$(1) '
     (check_variable) check_variable: Ary test ',c% :PRINT CHR$(1) '

      (check_literal) check_literal:lit='(' idx=7 ',c% :PRINT CHR$(1) '
      (check_literal) check_literal:After drop space:'(' idx=7 ',c% :PRINT CHR$(1) '
      (check_literal)   '(' != ','
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator: a%,c% :PRINT CHR$(1) 

    (check_literal) check_literal:lit=' ,' idx=5 'a%,c% :PRINT CHR$(1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=5 'a%,c% :PRINT CHR$(1) '
    (check_literal)   ',' != 'a'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'a%,c% :PRINT CHR$(1) '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=5 'a%,c% :PRINT CHR$(1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=5 'a%,c% :PRINT CHR$(1) '
    (check_literal)   '%' != 'a'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=5 'a%,c% :PRINT CHR$(1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=5 'a%,c% :PRINT CHR$(1) '
    (check_literal)   '"' != 'a'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'a%,c% :PRINT CHR$(1) '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'a%,c% :PRINT CHR$(1) ':
     (check_vname) check_vname ret1 '%,c% :PRINT CHR$(1) ':
    (check_variable) check_variable: '%,c% :PRINT CHR$(1) '
    (check_variable) check_variable: Ary test ',c% :PRINT CHR$(1) '

     (check_literal) check_literal:lit='(' idx=7 ',c% :PRINT CHR$(1) '
     (check_literal) check_literal:After drop space:'(' idx=7 ',c% :PRINT CHR$(1) '
     (check_literal)   '(' != ','
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1

  (scan_atom) scan_atom:

   (check_literal) check_literal:lit=' %' idx=5 'a%,c% :PRINT CHR$(1) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=5 'a%,c% :PRINT CHR$(1) '
   (check_literal)   '%' != 'a'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=5 'a%,c% :PRINT CHR$(1) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=5 'a%,c% :PRINT CHR$(1) '
   (check_literal)   '"' != 'a'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'a%,c% :PRINT CHR$(1) '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'a%,c% :PRINT CHR$(1) ':
    (check_vname) check_vname ret1 '%,c% :PRINT CHR$(1) ':
   (check_variable) check_variable: '%,c% :PRINT CHR$(1) '
   (check_variable) check_variable: Ary test ',c% :PRINT CHR$(1) '

    (check_literal) check_literal:lit='(' idx=7 ',c% :PRINT CHR$(1) '
    (check_literal) check_literal:After drop space:'(' idx=7 ',c% :PRINT CHR$(1) '
    (check_literal)   '(' != ','
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'a%,c% :PRINT CHR$(1) '
   (scan_vname) scan_vname: ret1 'a'
  (scan_variable) scan_variable: '%,c% :PRINT CHR$(1) ' vname='a'
  (scan_variable) scan_variable: Ary test ',c% :PRINT CHR$(1) '

   (check_literal) check_literal:lit='(' idx=7 ',c% :PRINT CHR$(1) '
   (check_literal) check_literal:After drop space:'(' idx=7 ',c% :PRINT CHR$(1) '
   (check_literal)   '(' != ','
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='a%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'a%' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:a% is not function
token_is_variable: tok:'a%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:a% is not function
 (init_get_name) 
init_get_name:'a%'
 (init_get_name) 
init_get_name:'a%'
 (get_name) 
get_name:gn:'a%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,(U )] i i a%
 (print_var_info) 
VAR INFO: '                a%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
 (scan_atom) scan_atom:ret1
(scan_expression) n commas now:0

 (check_eitem) check_eitem: ',c% :PRINT CHR$(1) '

  (check_operator) check_operator: ,c% :PRINT CHR$(1) 

   (check_literal) check_literal:lit=' ,' idx=7 ',c% :PRINT CHR$(1) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=7 ',c% :PRINT CHR$(1) '
   (check_literal) check_literal:After while():c% :PRINT CHR$(1) 
   (check_literal) check_literal:ret1 
  (check_operator) ret1:is comma: 0
 (check_eitem) check_eitem:ret1 comma:1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: ,c% :PRINT CHR$(1) 

   (check_literal) check_literal:lit=' ,' idx=7 ',c% :PRINT CHR$(1) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=7 ',c% :PRINT CHR$(1) '
   (check_literal) check_literal:After while():c% :PRINT CHR$(1) 
   (check_literal) check_literal:ret1 
  (check_operator) ret1:is comma: 0

  (scan_operator) scan_operator: ',c% :PRINT CHR$(1) '

   (check_literal) check_literal:lit=' ,' idx=7 ',c% :PRINT CHR$(1) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=7 ',c% :PRINT CHR$(1) '
   (check_literal) check_literal:After while():c% :PRINT CHR$(1) 
   (check_literal) check_literal:ret1 

   (scan_literal) scan_literal:lit=' ,' ',c% :PRINT CHR$(1) '
   (scan_literal) scan_literal:After drop space:',c% :PRINT CHR$(1) '
   (scan_literal) scan_literal:while loop:,c% :PRINT CHR$(1) 
   Frst:0 T:',' exptype:i
(output_sub_start)
   (scan_literal) scan_literal:ret1
  (scan_operator) ret1:is comma: 1
 (scan_eitem) Is comma;1
 (scan_expression) n commas now:1

  (check_eitem) check_eitem: 'c% :PRINT CHR$(1) '

   (check_operator) check_operator: c% :PRINT CHR$(1) 

    (check_literal) check_literal:lit=' ,' idx=8 'c% :PRINT CHR$(1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=8 'c% :PRINT CHR$(1) '
    (check_literal)   ',' != 'c'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'c% :PRINT CHR$(1) '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=8 'c% :PRINT CHR$(1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=8 'c% :PRINT CHR$(1) '
    (check_literal)   '%' != 'c'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=8 'c% :PRINT CHR$(1) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=8 'c% :PRINT CHR$(1) '
    (check_literal)   '"' != 'c'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'c% :PRINT CHR$(1) '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'c% :PRINT CHR$(1) ':
     (check_vname) check_vname ret1 '% :PRINT CHR$(1) ':
    (check_variable) check_variable: '% :PRINT CHR$(1) '
    (check_variable) check_variable: Ary test ' :PRINT CHR$(1) '

     (check_literal) check_literal:lit='(' idx=10 ' :PRINT CHR$(1) '
     (check_literal) check_literal:After drop space:'(' idx=10 ' :PRINT CHR$(1) '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1
 (check_eitem) check_eitem:ret1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: c% :PRINT CHR$(1) 

   (check_literal) check_literal:lit=' ,' idx=8 'c% :PRINT CHR$(1) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=8 'c% :PRINT CHR$(1) '
   (check_literal)   ',' != 'c'
   (check_literal) check_literal: ret0
  (check_operator) ret0:is comma: 0

  (check_function) check_function: 'c% :PRINT CHR$(1) '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=8 'c% :PRINT CHR$(1) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=8 'c% :PRINT CHR$(1) '
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=8 'c% :PRINT CHR$(1) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=8 'c% :PRINT CHR$(1) '
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c% :PRINT CHR$(1) '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'c% :PRINT CHR$(1) ':
    (check_vname) check_vname ret1 '% :PRINT CHR$(1) ':
   (check_variable) check_variable: '% :PRINT CHR$(1) '
   (check_variable) check_variable: Ary test ' :PRINT CHR$(1) '

    (check_literal) check_literal:lit='(' idx=10 ' :PRINT CHR$(1) '
    (check_literal) check_literal:After drop space:'(' idx=10 ' :PRINT CHR$(1) '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) check_atom:ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=8 'c% :PRINT CHR$(1) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=8 'c% :PRINT CHR$(1) '
  (check_literal)   '%' != 'c'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=8 'c% :PRINT CHR$(1) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=8 'c% :PRINT CHR$(1) '
  (check_literal)   '"' != 'c'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) check_float: ret0

   (check_integer) check_integer: 'c% :PRINT CHR$(1) '
   (check_integer) check_integer:ret0
  (check_number) check_number: ret0

  (check_variable) check_variable:

   (check_vname) check_vname 'c% :PRINT CHR$(1) ':
   (check_vname) check_vname ret1 '% :PRINT CHR$(1) ':
  (check_variable) check_variable: '% :PRINT CHR$(1) '
  (check_variable) check_variable: Ary test ' :PRINT CHR$(1) '

   (check_literal) check_literal:lit='(' idx=10 ' :PRINT CHR$(1) '
   (check_literal) check_literal:After drop space:'(' idx=10 ' :PRINT CHR$(1) '
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) scan_variable:

  (scan_vname) scan_vname: 'c% :PRINT CHR$(1) '
  (scan_vname) scan_vname: ret1 'c'
 (scan_variable) scan_variable: '% :PRINT CHR$(1) ' vname='c'
 (scan_variable) scan_variable: Ary test ' :PRINT CHR$(1) '

  (check_literal) check_literal:lit='(' idx=10 ' :PRINT CHR$(1) '
  (check_literal) check_literal:After drop space:'(' idx=10 ' :PRINT CHR$(1) '
  (check_literal)   '(' != ' '
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='c%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'c%' exptype:U
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:c% is not function
token_is_variable: tok:'c%'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:c% is not function
(init_get_name) 
init_get_name:'c%'
(init_get_name) 
init_get_name:'c%'
(get_name) 
get_name:gn:'c%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,(U )] i i c%
(print_var_info) 
VAR INFO: '                c%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
(scan_atom) scan_atom:ret1
(scan_expression) n commas now:1

 (check_eitem) check_eitem: ' :PRINT CHR$(1) '

  (check_operator) check_operator:  :PRINT CHR$(1) 

   (check_literal) check_literal:lit=' ,' idx=11 ':PRINT CHR$(1) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=11 ':PRINT CHR$(1) '
   (check_literal)   ',' != ':'
   (check_literal) check_literal: ret0
  (check_operator) ret0:is comma: 0

  (check_function) check_function: ':PRINT CHR$(1) '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=10 ' :PRINT CHR$(1) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=11 ':PRINT CHR$(1) '
   (check_literal)   '%' != ':'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=10 ' :PRINT CHR$(1) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=11 ':PRINT CHR$(1) '
   (check_literal)   '"' != ':'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: ':PRINT CHR$(1) '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname ':PRINT CHR$(1) ':
    (check_vname) check_vname ret0 ':PRINT CHR$(1) ':
   (check_variable) check_variable:ret0 
  (check_atom) check_atom:ret1

  (check_sub_expr) check_sub_expr:

   (check_literal) check_literal:lit=' (' idx=10 ' :PRINT CHR$(1) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'(' idx=11 ':PRINT CHR$(1) '
   (check_literal)   '(' != ':'
   (check_literal) check_literal: ret0
  (check_sub_expr) check_sub_expr: ret0
 (check_eitem) check_eitem:ret0
(scan_expression) scan_expression: ret1 ' :PRINT CHR$(1) ' commas:1
(scan_command) scan_command: ret1 =>'AT'
(scan_command) 
ENDEXP
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: AT type:17
(op_stack_print) 
------------------

(  output_sub_end)
(token_is_function) 
token_is_function:
(token_is_function) AT is function
Pop 5
Pop 'AT'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_function) [i,(U )] v v AT
(  output_sub_end)
Finalise stack
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'a%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? '' nidx:-1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'c%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'AT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
 BE:

Type Check Stack (0)

 BE:a%
type_check_stack_push: 'a%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'a%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'a%' type:i (0)
 BE:

Type Check Stack (1)

000: 'a%' type:i (0)
 BE:c%
type_check_stack_push: 'c%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'a%' type:0
(type_check_stack_print) 
001: 'c%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'a%' type:i (0)
001: 'c%' type:i (0)
 BE:

Type Check Stack (2)

000: 'a%' type:i (0)
001: 'c%' type:i (0)
 BE:AT
FN: 2 args
(function_return_type) 
function_return_type: 'AT' =>v
(function_return_type) 
function_return_type: 'AT' =>17
ret_type;17 v
typecheck_expression:Ret type of AT : v
type_check_stack_pop: 'c%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'a%' type:0
(type_check_stack_print) 
------------------

FN ARG 1 ri c% 0(i)  Arg ok
type_check_stack_pop: 'a%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (0)

(type_check_stack_print) 
------------------

FN ARG 0 ri a% 0(i)  Arg ok
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:17
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'a%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? '' nidx:-1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'c%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'AT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'a%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     i rq:i 'c%'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_FUNCTION     v rq:v 'AT'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
(process_expression_types) 
==INFIX==

Var: a% ary:0 NumIdx:0
infix_stack_push: 'a%'
Var: c% ary:0 NumIdx:0
infix_stack_push: 'c%'
infix_stack_pop: 'c%'
infix_stack_pop: 'a%'
infix_stack_push: 'AT(a% c% )'
infix_stack_pop: 'AT(a% c% )'
(process_expression_types) ==AT(a% c% )==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_START    U rq:?   0:
(    output_qcode) N4 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_FUNCTION     v rq:v AT  0:
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:i   0:

 (check_literal) check_literal:lit=':' idx=11 ':PRINT CHR$(1) '
 (check_literal) check_literal:After drop space:':' idx=11 ':PRINT CHR$(1) '
 (check_literal) check_literal:After while():PRINT CHR$(1) 
 (check_literal) check_literal:ret1 

 (scan_literal) scan_literal:lit=':' 'PRINT CHR$(1) '
 (scan_literal) scan_literal:After drop space:'PRINT CHR$(1) '
 (scan_literal) scan_literal:while loop:PRINT CHR$(1) 
 (scan_literal) scan_literal:ret1

 (check_line) check_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'PRINT CHR$(1) ':
    (check_vname) check_vname ret1 ' CHR$(1) ':
   (check_variable) check_variable: ' CHR$(1) '
   (check_variable) check_variable: Ary test ' CHR$(1) '

    (check_literal) check_literal:lit='(' idx=17 ' CHR$(1) '
    (check_literal) check_literal:After drop space:'(' idx=17 ' CHR$(1) '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=17 ' CHR$(1) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=18 'CHR$(1) '
  (check_literal)   '=' != 'C'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'PRINT CHR$(1) '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'PRINT'
(check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=9, ' CHR$(1) '
========================================================
  AT a%,c% :PRINT CHR$(1) 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'PRINT CHR$(1) ':
    (check_vname) check_vname ret1 ' CHR$(1) ':
   (check_variable) check_variable: ' CHR$(1) '
   (check_variable) check_variable: Ary test ' CHR$(1) '

    (check_literal) check_literal:lit='(' idx=17 ' CHR$(1) '
    (check_literal) check_literal:After drop space:'(' idx=17 ' CHR$(1) '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=17 ' CHR$(1) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=18 'CHR$(1) '
  (check_literal)   '=' != 'C'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'PRINT CHR$(1) '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'PRINT'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'PRINT' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) PRINT is function
 (function_return_type) 
function_return_type: 'PRINT' =>v
 (function_return_type) 
function_return_type: 'PRINT' =>17
process_token: 'PRINT' t=>v
 Push:'PRINT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' CHR$(1) '

   (check_eitem) check_eitem: 'CHR$(1) '

    (check_operator) check_operator: CHR$(1) 

     (check_literal) check_literal:lit=' ,' idx=18 'CHR$(1) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=18 'CHR$(1) '
     (check_literal)   ',' != 'C'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'CHR$(1) '
    (check_function) check_function: ret1 Found fn=>'CHR$'
   (check_eitem) check_eitem:ret1

   (scan_eitem) scan_eitem:

    (check_operator) check_operator: CHR$(1) 

     (check_literal) check_literal:lit=' ,' idx=18 'CHR$(1) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=18 'CHR$(1) '
     (check_literal)   ',' != 'C'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'CHR$(1) '
    (check_function) check_function: ret1 Found fn=>'CHR$'

    (scan_function) scan_function:
   Frst:0 T:'CHR$' exptype:U
    (token_is_function) 
token_is_function:
    (token_is_function) CHR$ is function
    (function_return_type) 
function_return_type: 'CHR$' =>s
    (function_return_type) 
function_return_type: 'CHR$' =>2
process_token: 'CHR$' t=>s
 Push:'CHR$'
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (3)

    (op_stack_print) 
000: PRINT type:17
    (op_stack_print) 
001: ( type:16
    (op_stack_print) 
002: CHR$ type:2
    (op_stack_print) 
------------------

    (scan_expression) n commas now:0

     (check_eitem) check_eitem: '(1) '

      (check_operator) check_operator: (1) 

       (check_literal) check_literal:lit=' ,' idx=22 '(1) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=22 '(1) '
       (check_literal)   ',' != '('
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: '(1) '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=22 '(1) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=22 '(1) '
       (check_literal)   '%' != '('
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=22 '(1) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=22 '(1) '
       (check_literal)   '"' != '('
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '(1) '
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname '(1) ':
        (check_vname) check_vname ret0 '(1) ':
       (check_variable) check_variable:ret0 
      (check_atom) check_atom:ret1

      (check_sub_expr) check_sub_expr:

       (check_literal) check_literal:lit=' (' idx=22 '(1) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'(' idx=22 '(1) '
       (check_literal) check_literal:After while():1) 
       (check_literal) check_literal:ret1 
      (check_sub_expr) check_sub_expr: ret1
     (check_eitem) check_eitem:ret1

     (scan_eitem) scan_eitem:

      (check_operator) check_operator: (1) 

       (check_literal) check_literal:lit=' ,' idx=22 '(1) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=22 '(1) '
       (check_literal)   ',' != '('
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: '(1) '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=22 '(1) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=22 '(1) '
       (check_literal)   '%' != '('
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=22 '(1) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=22 '(1) '
       (check_literal)   '"' != '('
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '(1) '
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname '(1) ':
        (check_vname) check_vname ret0 '(1) ':
       (check_variable) check_variable:ret0 
      (check_atom) check_atom:ret1

      (check_sub_expr) check_sub_expr:

       (check_literal) check_literal:lit=' (' idx=22 '(1) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'(' idx=22 '(1) '
       (check_literal) check_literal:After while():1) 
       (check_literal) check_literal:ret1 
      (check_sub_expr) check_sub_expr: ret1

      (scan_sub_expr) scan_sub_expr:

       (scan_literal) scan_literal:lit=' (' '(1) '
       (scan_literal) scan_literal:After drop space:'(1) '
       (scan_literal) scan_literal:while loop:(1) 
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (4)

       (op_stack_print) 
000: PRINT type:17
       (op_stack_print) 
001: ( type:16
       (op_stack_print) 
002: CHR$ type:2
       (op_stack_print) 
003: ( type:16
       (op_stack_print) 
------------------

       (scan_literal) scan_literal:ret1
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (5)

      (op_stack_print) 
000: PRINT type:17
      (op_stack_print) 
001: ( type:16
      (op_stack_print) 
002: CHR$ type:2
      (op_stack_print) 
003: ( type:16
      (op_stack_print) 
004: ( type:16
      (op_stack_print) 
------------------


       (scan_expression) scan_expression: '1) '

        (check_eitem) check_eitem: '1) '

         (check_operator) check_operator: 1) 

          (check_literal) check_literal:lit=' ,' idx=23 '1) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:',' idx=23 '1) '
          (check_literal)   ',' != '1'
          (check_literal) check_literal: ret0
         (check_operator) ret0:is comma: 0

         (check_function) check_function: '1) '
         (check_function) check_function: ret0

         (check_atom) check_atom:

          (check_literal) check_literal:lit=' %' idx=23 '1) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=23 '1) '
          (check_literal)   '%' != '1'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=23 '1) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=23 '1) '
          (check_literal)   '"' != '1'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '1) '
           (check_integer) check_integer:ret1
          (check_number) check_number: ret1
         (check_atom) check_atom:ret1
        (check_eitem) check_eitem:ret1

        (scan_eitem) scan_eitem:

         (check_operator) check_operator: 1) 

          (check_literal) check_literal:lit=' ,' idx=23 '1) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:',' idx=23 '1) '
          (check_literal)   ',' != '1'
          (check_literal) check_literal: ret0
         (check_operator) ret0:is comma: 0

         (check_function) check_function: '1) '
         (check_function) check_function: ret0

         (check_atom) check_atom:

          (check_literal) check_literal:lit=' %' idx=23 '1) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=23 '1) '
          (check_literal)   '%' != '1'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=23 '1) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=23 '1) '
          (check_literal)   '"' != '1'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '1) '
           (check_integer) check_integer:ret1
          (check_number) check_number: ret1
         (check_atom) check_atom:ret1

         (scan_atom) scan_atom:

          (check_literal) check_literal:lit=' %' idx=23 '1) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=23 '1) '
          (check_literal)   '%' != '1'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=23 '1) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=23 '1) '
          (check_literal)   '"' != '1'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '1) '
           (check_integer) check_integer:ret1
          (check_number) check_number: ret1

          (scan_number) scan_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '1) '
           (check_integer) check_integer:ret1

           (scan_integer) scan_integer:
           (scan_integer) scan_integer:ret1
   Frst:0 T:'1' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U U U )] i i 1
          (scan_integer) scan_integer:ret1  1
         (scan_atom) scan_atom:ret1
        (scan_expression) n commas now:0

         (check_eitem) check_eitem: ') '

          (check_operator) check_operator: ) 

           (check_literal) check_literal:lit=' ,' idx=24 ') '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:',' idx=24 ') '
           (check_literal)   ',' != ')'
           (check_literal) check_literal: ret0
          (check_operator) ret0:is comma: 0

          (check_function) check_function: ') '
          (check_function) check_function: ret0

          (check_atom) check_atom:

           (check_literal) check_literal:lit=' %' idx=24 ') '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'%' idx=24 ') '
           (check_literal)   '%' != ')'
           (check_literal) check_literal: ret0

           (check_literal) check_literal:lit=' "' idx=24 ') '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'"' idx=24 ') '
           (check_literal)   '"' != ')'
           (check_literal) check_literal: ret0

           (check_number) check_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret0

            (check_integer) check_integer: ') '
            (check_integer) check_integer:ret0
           (check_number) check_number: ret0

           (check_variable) check_variable:

            (check_vname) check_vname ') ':
            (check_vname) check_vname ret0 ') ':
           (check_variable) check_variable:ret0 
          (check_atom) check_atom:ret1

          (check_sub_expr) check_sub_expr:

           (check_literal) check_literal:lit=' (' idx=24 ') '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'(' idx=24 ') '
           (check_literal)   '(' != ')'
           (check_literal) check_literal: ret0
          (check_sub_expr) check_sub_expr: ret0
         (check_eitem) check_eitem:ret0
        (scan_expression) scan_expression: ret1 ') ' commas:0

        (scan_literal) scan_literal:lit=' )' ') '
        (scan_literal) scan_literal:After drop space:') '
        (scan_literal) scan_literal:while loop:) 
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
        (op_stack_print) 
------------------
        (op_stack_print) 
Operator Stack     (4)

        (op_stack_print) 
000: PRINT type:17
        (op_stack_print) 
001: ( type:16
        (op_stack_print) 
002: CHR$ type:2
        (op_stack_print) 
003: ( type:16
        (op_stack_print) 
------------------

(  output_sub_end)
        (token_is_function) 
token_is_function:
        (token_is_function) 
token_is_function:( is not function
(  output_sub_end)
        (scan_literal) scan_literal:ret1
   Frst:0 T:')' exptype:U
Pop 4
Pop '('
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (3)

       (op_stack_print) 
000: PRINT type:17
       (op_stack_print) 
001: ( type:16
       (op_stack_print) 
002: CHR$ type:2
       (op_stack_print) 
------------------

(  output_sub_end)
       (token_is_function) 
token_is_function:
       (token_is_function) CHR$ is function
Pop 5
Pop 'CHR$'
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (2)

       (op_stack_print) 
000: PRINT type:17
       (op_stack_print) 
001: ( type:16
       (op_stack_print) 
------------------

( output_function) [U,(U U )] s s CHR$
(  output_sub_end)
       (scan_sub_expr) scan_sub_expr:ret1
      (scan_expression) n commas now:0

       (check_eitem) check_eitem: ' '

        (check_operator) check_operator:  

         (check_literal) check_literal:lit=' ,' idx=26 ''
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:',' idx=26 ''
         (check_literal) check_literal  ret0 Empty test string
        (check_operator) ret0:is comma: 0

        (check_function) check_function: ''
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=25 ' '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=26 ''
         (check_literal) check_literal  ret0 Empty test string

         (check_literal) check_literal:lit=' "' idx=25 ' '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=26 ''
         (check_literal) check_literal  ret0 Empty test string

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: ''
          (check_integer) check_integer:ret0
         (check_number) check_number: ret0

         (check_variable) check_variable:

          (check_vname) check_vname '':
          (check_vname) check_vname ret0 '':
         (check_variable) check_variable:ret0 
        (check_atom) check_atom:ret1

        (check_sub_expr) check_sub_expr:

         (check_literal) check_literal:lit=' (' idx=25 ' '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'(' idx=26 ''
         (check_literal) check_literal  ret0 Empty test string
        (check_sub_expr) check_sub_expr: ret0
       (check_eitem) check_eitem:ret0
      (scan_expression) scan_expression: ret1 ' ' commas:0
     (scan_command) scan_command: ret1 =>'PRINT'
    (scan_command) 
ENDEXP
   Frst:0 T:')' exptype:U
Pop 4
Pop '('
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (1)

    (op_stack_print) 
000: PRINT type:17
    (op_stack_print) 
------------------

(  output_sub_end)
    (token_is_function) 
token_is_function:
    (token_is_function) PRINT is function
Pop 5
Pop 'PRINT'
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (0)

    (op_stack_print) 
------------------

( output_function) [U,(U )] v v PRINT
(  output_sub_end)
Finalise stack
    (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '1' nidx:24  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     s rq:s 'CHR$' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
 BE:

Type Check Stack (0)

 BE:

Type Check Stack (0)

 BE:

Type Check Stack (0)

 BE:1
type_check_stack_push: '1'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (1)

    (type_check_stack_print) 
000: '1' type:0
    (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '1' type:i (0)
 BE:

Type Check Stack (1)

000: '1' type:i (0)
 BE:

Type Check Stack (1)

000: '1' type:i (0)
 BE:

Type Check Stack (1)

000: '1' type:i (0)
 BE:CHR$
FN: 1 args
    (function_return_type) 
function_return_type: 'CHR$' =>s
    (function_return_type) 
function_return_type: 'CHR$' =>2
ret_type;2 s
typecheck_expression:Ret type of CHR$ : s
type_check_stack_pop: '1'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (0)

    (type_check_stack_print) 
------------------

FN ARG 0 ri 1 0(i)  Arg ok
type_check_stack_push: '000'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (1)

    (type_check_stack_print) 
000: '000' type:2
    (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:s (2)
 BE:

Type Check Stack (1)

000: '000' type:s (2)
 BE:

Type Check Stack (1)

000: '000' type:s (2)
 BE:PRINT
FN: 1 args
    (function_return_type) 
function_return_type: 'PRINT' =>v
    (function_return_type) 
function_return_type: 'PRINT' =>17
ret_type;17 v
typecheck_expression:Ret type of PRINT : v
type_check_stack_pop: '000'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (0)

    (type_check_stack_print) 
------------------

FN ARG 0 ri 000 2(s)  Arg not OK
type_check_stack_push: '000'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (1)

    (type_check_stack_print) 
000: '000' type:17
    (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '1' nidx:24  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     s rq:s 'CHR$' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_INTEGER      i rq:i '1'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_FUNCTION     s rq:s 'CHR$'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
(dump_exp_buffer2) N12 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
    (process_expression_types) 
==INFIX==

infix_stack_push: '1'
infix_stack_pop: '1'
infix_stack_push: 'CHR$(1 )'
infix_stack_pop: 'CHR$(1 )'
infix_stack_push: 'PRINT(CHR$(1 ) )'
infix_stack_pop: 'PRINT(CHR$(1 ) )'
    (process_expression_types) ==PRINT(CHR$(1 ) )==
    (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N4 EXP_BUFF_ID_INTEGER      i rq:i 1  0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N8 EXP_BUFF_ID_FUNCTION     s rq:s CHR$  0:
(    output_qcode) N9 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N10 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N11 EXP_BUFF_ID_FUNCTION     v rq:v PRINT  0:
(    output_qcode) N12 EXP_BUFF_ID_SUB_END      U rq:i   0:

     (check_literal) check_literal:lit=':' idx=26 ''
     (check_literal) check_literal:After drop space:':' idx=26 ''
     (check_literal) check_literal  ret0 Empty test string
    (translate_file) 
cline scanned OK
**********************************************
**  AT a%,c1% :PRINT CHR$(1) :BEEP b%,10*b% **
**********************************************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'AT a%,c1% :PRINT CHR$(1) :BEEP b%,10*b% ':
     (check_vname) check_vname ret1 ' a%,c1% :PRINT CHR$(1) :BEEP b%,10*b% ':
    (check_variable) check_variable: ' a%,c1% :PRINT CHR$(1) :BEEP b%,10*b% '
    (check_variable) check_variable: Ary test ' a%,c1% :PRINT CHR$(1) :BEEP b%,10*b% '

     (check_literal) check_literal:lit='(' idx=4 ' a%,c1% :PRINT CHR$(1) :BEEP b%,10*b% '
     (check_literal) check_literal:After drop space:'(' idx=4 ' a%,c1% :PRINT CHR$(1) :BEEP b%,10*b% '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=4 ' a%,c1% :PRINT CHR$(1) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=5 'a%,c1% :PRINT CHR$(1) :BEEP b%,10*b% '
   (check_literal)   '=' != 'a'
   (check_literal) check_literal: ret0
  (check_assignment) check_assignment:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) check_textlabel: 'AT a%,c1% :PRINT CHR$(1) :BEEP b%,10*b% '
   (check_textlabel) check_textlabel:ret0
  (check_proc_call) check_proc_call:ret0

  (check_command) check_command:
  (check_command) check_command: ret1 found=> 'AT'
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=38, ' a%,c1% :PRINT CHR$(1) :BEEP b%,10*b% '
========================================================
  AT a%,c1% :PRINT CHR$(1) :BEEP b%,10*b% 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'AT a%,c1% :PRINT CHR$(1) :BEEP b%,10*b% ':
    (check_vname) check_vname ret1 ' a%,c1% :PRINT CHR$(1) :BEEP b%,10*b% ':
   (check_variable) check_variable: ' a%,c1% :PRINT CHR$(1) :BEEP b%,10*b% '
   (check_variable) check_variable: Ary test ' a%,c1% :PRINT CHR$(1) :BEEP b%,10*b% '

    (check_literal) check_literal:lit='(' idx=4 ' a%,c1% :PRINT CHR$(1) :BEEP b%,10*b% '
    (check_literal) check_literal:After drop space:'(' idx=4 ' a%,c1% :PRINT CHR$(1) :BEEP b%,10*b% '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=4 ' a%,c1% :PRINT CHR$(1) :BEEP b%,10*b% '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=5 'a%,c1% :PRINT CHR$(1) :BEEP b%,10*b% '
  (check_literal)   '=' != 'a'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'AT a%,c1% :PRINT CHR$(1) :BEEP b%,10*b% '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'AT'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'AT' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) AT is function
 (function_return_type) 
function_return_type: 'AT' =>v
 (function_return_type) 
function_return_type: 'AT' =>17
process_token: 'AT' t=>v
 Push:'AT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: AT type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: AT type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' a%,c1% :PRINT CHR$(1) :BEEP b%,10*b% '

   (check_eitem) check_eitem: 'a%,c1% :PRINT CHR$(1) :BEEP b%,10*b% '

    (check_operator) check_operator: a%,c1% :PRINT CHR$(1) :BEEP b%,10*b% 

     (check_literal) check_literal:lit=' ,' idx=5 'a%,c1% :PRINT CHR$(1) :BEEP b%,10*b% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=5 'a%,c1% :PRINT CHR$(1) :BEEP b%,10*b% '
     (check_literal)   ',' != 'a'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'a%,c1% :PRINT CHR$(1) :BEEP b%,10*b% '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=5 'a%,c1% :PRINT CHR$(1) :BEEP b%,10*b% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=5 'a%,c1% :PRINT CHR$(1) :BEEP b%,10*b% '
     (check_literal)   '%' != 'a'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=5 'a%,c1% :PRINT CHR$(1) :BEEP b%,10*b% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=5 'a%,c1% :PRINT CHR$(1) :BEEP b%,10*b% '
     (check_literal)   '"' != 'a'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'a%,c1% :PRINT CHR$(1) :BEEP b%,10*b% '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'a%,c1% :PRINT CHR$(1) :BEEP b%,10*b% ':
      (check_vname) check_vname ret1 '%,c1% :PRINT CHR$(1) :BEEP b%,10*b% ':
     (check_variable) check_variable: '%,c1% :PRINT CHR$(1) :BEEP b%,10*b% '
     (check_variable) check_variable: Ary test ',c1% :PRINT CHR$(1) :BEEP b%,10*b% '

      (check_literal) check_literal:lit='(' idx=7 ',c1% :PRINT CHR$(1) :BEEP b%,10*b% '
      (check_literal) check_literal:After drop space:'(' idx=7 ',c1% :PRINT CHR$(1) :BEEP b%,10*b% '
      (check_literal)   '(' != ','
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator: a%,c1% :PRINT CHR$(1) :BEEP b%,10*b% 

    (check_literal) check_literal:lit=' ,' idx=5 'a%,c1% :PRINT CHR$(1) :BEEP b%,10*b% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=5 'a%,c1% :PRINT CHR$(1) :BEEP b%,10*b% '
    (check_literal)   ',' != 'a'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'a%,c1% :PRINT CHR$(1) :BEEP b%,10*b% '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=5 'a%,c1% :PRINT CHR$(1) :BEEP b%,10*b% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=5 'a%,c1% :PRINT CHR$(1) :BEEP b%,10*b% '
    (check_literal)   '%' != 'a'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=5 'a%,c1% :PRINT CHR$(1) :BEEP b%,10*b% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=5 'a%,c1% :PRINT CHR$(1) :BEEP b%,10*b% '
    (check_literal)   '"' != 'a'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'a%,c1% :PRINT CHR$(1) :BEEP b%,10*b% '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'a%,c1% :PRINT CHR$(1) :BEEP b%,10*b% ':
     (check_vname) check_vname ret1 '%,c1% :PRINT CHR$(1) :BEEP b%,10*b% ':
    (check_variable) check_variable: '%,c1% :PRINT CHR$(1) :BEEP b%,10*b% '
    (check_variable) check_variable: Ary test ',c1% :PRINT CHR$(1) :BEEP b%,10*b% '

     (check_literal) check_literal:lit='(' idx=7 ',c1% :PRINT CHR$(1) :BEEP b%,10*b% '
     (check_literal) check_literal:After drop space:'(' idx=7 ',c1% :PRINT CHR$(1) :BEEP b%,10*b% '
     (check_literal)   '(' != ','
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1

  (scan_atom) scan_atom:

   (check_literal) check_literal:lit=' %' idx=5 'a%,c1% :PRINT CHR$(1) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=5 'a%,c1% :PRINT CHR$(1) :BEEP b%,10*b% '
   (check_literal)   '%' != 'a'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=5 'a%,c1% :PRINT CHR$(1) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=5 'a%,c1% :PRINT CHR$(1) :BEEP b%,10*b% '
   (check_literal)   '"' != 'a'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'a%,c1% :PRINT CHR$(1) :BEEP b%,10*b% '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'a%,c1% :PRINT CHR$(1) :BEEP b%,10*b% ':
    (check_vname) check_vname ret1 '%,c1% :PRINT CHR$(1) :BEEP b%,10*b% ':
   (check_variable) check_variable: '%,c1% :PRINT CHR$(1) :BEEP b%,10*b% '
   (check_variable) check_variable: Ary test ',c1% :PRINT CHR$(1) :BEEP b%,10*b% '

    (check_literal) check_literal:lit='(' idx=7 ',c1% :PRINT CHR$(1) :BEEP b%,10*b% '
    (check_literal) check_literal:After drop space:'(' idx=7 ',c1% :PRINT CHR$(1) :BEEP b%,10*b% '
    (check_literal)   '(' != ','
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'a%,c1% :PRINT CHR$(1) :BEEP b%,10*b% '
   (scan_vname) scan_vname: ret1 'a'
  (scan_variable) scan_variable: '%,c1% :PRINT CHR$(1) :BEEP b%,10*b% ' vname='a'
  (scan_variable) scan_variable: Ary test ',c1% :PRINT CHR$(1) :BEEP b%,10*b% '

   (check_literal) check_literal:lit='(' idx=7 ',c1% :PRINT CHR$(1) :BEEP b%,10*b% '
   (check_literal) check_literal:After drop space:'(' idx=7 ',c1% :PRINT CHR$(1) :BEEP b%,10*b% '
   (check_literal)   '(' != ','
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='a%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'a%' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:a% is not function
token_is_variable: tok:'a%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:a% is not function
 (init_get_name) 
init_get_name:'a%'
 (init_get_name) 
init_get_name:'a%'
 (get_name) 
get_name:gn:'a%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,(U )] i i a%
 (print_var_info) 
VAR INFO: '                a%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
 (scan_atom) scan_atom:ret1
(scan_expression) n commas now:0

 (check_eitem) check_eitem: ',c1% :PRINT CHR$(1) :BEEP b%,10*b% '

  (check_operator) check_operator: ,c1% :PRINT CHR$(1) :BEEP b%,10*b% 

   (check_literal) check_literal:lit=' ,' idx=7 ',c1% :PRINT CHR$(1) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=7 ',c1% :PRINT CHR$(1) :BEEP b%,10*b% '
   (check_literal) check_literal:After while():c1% :PRINT CHR$(1) :BEEP b%,10*b% 
   (check_literal) check_literal:ret1 
  (check_operator) ret1:is comma: 0
 (check_eitem) check_eitem:ret1 comma:1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: ,c1% :PRINT CHR$(1) :BEEP b%,10*b% 

   (check_literal) check_literal:lit=' ,' idx=7 ',c1% :PRINT CHR$(1) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=7 ',c1% :PRINT CHR$(1) :BEEP b%,10*b% '
   (check_literal) check_literal:After while():c1% :PRINT CHR$(1) :BEEP b%,10*b% 
   (check_literal) check_literal:ret1 
  (check_operator) ret1:is comma: 0

  (scan_operator) scan_operator: ',c1% :PRINT CHR$(1) :BEEP b%,10*b% '

   (check_literal) check_literal:lit=' ,' idx=7 ',c1% :PRINT CHR$(1) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=7 ',c1% :PRINT CHR$(1) :BEEP b%,10*b% '
   (check_literal) check_literal:After while():c1% :PRINT CHR$(1) :BEEP b%,10*b% 
   (check_literal) check_literal:ret1 

   (scan_literal) scan_literal:lit=' ,' ',c1% :PRINT CHR$(1) :BEEP b%,10*b% '
   (scan_literal) scan_literal:After drop space:',c1% :PRINT CHR$(1) :BEEP b%,10*b% '
   (scan_literal) scan_literal:while loop:,c1% :PRINT CHR$(1) :BEEP b%,10*b% 
   Frst:0 T:',' exptype:i
(output_sub_start)
   (scan_literal) scan_literal:ret1
  (scan_operator) ret1:is comma: 1
 (scan_eitem) Is comma;1
 (scan_expression) n commas now:1

  (check_eitem) check_eitem: 'c1% :PRINT CHR$(1) :BEEP b%,10*b% '

   (check_operator) check_operator: c1% :PRINT CHR$(1) :BEEP b%,10*b% 

    (check_literal) check_literal:lit=' ,' idx=8 'c1% :PRINT CHR$(1) :BEEP b%,10*b% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=8 'c1% :PRINT CHR$(1) :BEEP b%,10*b% '
    (check_literal)   ',' != 'c'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'c1% :PRINT CHR$(1) :BEEP b%,10*b% '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=8 'c1% :PRINT CHR$(1) :BEEP b%,10*b% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=8 'c1% :PRINT CHR$(1) :BEEP b%,10*b% '
    (check_literal)   '%' != 'c'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=8 'c1% :PRINT CHR$(1) :BEEP b%,10*b% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=8 'c1% :PRINT CHR$(1) :BEEP b%,10*b% '
    (check_literal)   '"' != 'c'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'c1% :PRINT CHR$(1) :BEEP b%,10*b% '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'c1% :PRINT CHR$(1) :BEEP b%,10*b% ':
     (check_vname) check_vname ret1 '% :PRINT CHR$(1) :BEEP b%,10*b% ':
    (check_variable) check_variable: '% :PRINT CHR$(1) :BEEP b%,10*b% '
    (check_variable) check_variable: Ary test ' :PRINT CHR$(1) :BEEP b%,10*b% '

     (check_literal) check_literal:lit='(' idx=11 ' :PRINT CHR$(1) :BEEP b%,10*b% '
     (check_literal) check_literal:After drop space:'(' idx=11 ' :PRINT CHR$(1) :BEEP b%,10*b% '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1
 (check_eitem) check_eitem:ret1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: c1% :PRINT CHR$(1) :BEEP b%,10*b% 

   (check_literal) check_literal:lit=' ,' idx=8 'c1% :PRINT CHR$(1) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=8 'c1% :PRINT CHR$(1) :BEEP b%,10*b% '
   (check_literal)   ',' != 'c'
   (check_literal) check_literal: ret0
  (check_operator) ret0:is comma: 0

  (check_function) check_function: 'c1% :PRINT CHR$(1) :BEEP b%,10*b% '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=8 'c1% :PRINT CHR$(1) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=8 'c1% :PRINT CHR$(1) :BEEP b%,10*b% '
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=8 'c1% :PRINT CHR$(1) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=8 'c1% :PRINT CHR$(1) :BEEP b%,10*b% '
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c1% :PRINT CHR$(1) :BEEP b%,10*b% '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'c1% :PRINT CHR$(1) :BEEP b%,10*b% ':
    (check_vname) check_vname ret1 '% :PRINT CHR$(1) :BEEP b%,10*b% ':
   (check_variable) check_variable: '% :PRINT CHR$(1) :BEEP b%,10*b% '
   (check_variable) check_variable: Ary test ' :PRINT CHR$(1) :BEEP b%,10*b% '

    (check_literal) check_literal:lit='(' idx=11 ' :PRINT CHR$(1) :BEEP b%,10*b% '
    (check_literal) check_literal:After drop space:'(' idx=11 ' :PRINT CHR$(1) :BEEP b%,10*b% '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) check_atom:ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=8 'c1% :PRINT CHR$(1) :BEEP b%,10*b% '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=8 'c1% :PRINT CHR$(1) :BEEP b%,10*b% '
  (check_literal)   '%' != 'c'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=8 'c1% :PRINT CHR$(1) :BEEP b%,10*b% '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=8 'c1% :PRINT CHR$(1) :BEEP b%,10*b% '
  (check_literal)   '"' != 'c'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) check_float: ret0

   (check_integer) check_integer: 'c1% :PRINT CHR$(1) :BEEP b%,10*b% '
   (check_integer) check_integer:ret0
  (check_number) check_number: ret0

  (check_variable) check_variable:

   (check_vname) check_vname 'c1% :PRINT CHR$(1) :BEEP b%,10*b% ':
   (check_vname) check_vname ret1 '% :PRINT CHR$(1) :BEEP b%,10*b% ':
  (check_variable) check_variable: '% :PRINT CHR$(1) :BEEP b%,10*b% '
  (check_variable) check_variable: Ary test ' :PRINT CHR$(1) :BEEP b%,10*b% '

   (check_literal) check_literal:lit='(' idx=11 ' :PRINT CHR$(1) :BEEP b%,10*b% '
   (check_literal) check_literal:After drop space:'(' idx=11 ' :PRINT CHR$(1) :BEEP b%,10*b% '
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) scan_variable:

  (scan_vname) scan_vname: 'c1% :PRINT CHR$(1) :BEEP b%,10*b% '
  (scan_vname) scan_vname: ret1 'c1'
 (scan_variable) scan_variable: '% :PRINT CHR$(1) :BEEP b%,10*b% ' vname='c1'
 (scan_variable) scan_variable: Ary test ' :PRINT CHR$(1) :BEEP b%,10*b% '

  (check_literal) check_literal:lit='(' idx=11 ' :PRINT CHR$(1) :BEEP b%,10*b% '
  (check_literal) check_literal:After drop space:'(' idx=11 ' :PRINT CHR$(1) :BEEP b%,10*b% '
  (check_literal)   '(' != ' '
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='c1%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'c1%' exptype:U
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:c1% is not function
token_is_variable: tok:'c1%'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:c1% is not function
(init_get_name) 
init_get_name:'c1%'
(init_get_name) 
init_get_name:'c1%'
(get_name) 
get_name:gn:'c1%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,(U )] i i c1%
(print_var_info) 
VAR INFO: '               c1%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
(scan_atom) scan_atom:ret1
(scan_expression) n commas now:1

 (check_eitem) check_eitem: ' :PRINT CHR$(1) :BEEP b%,10*b% '

  (check_operator) check_operator:  :PRINT CHR$(1) :BEEP b%,10*b% 

   (check_literal) check_literal:lit=' ,' idx=12 ':PRINT CHR$(1) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=12 ':PRINT CHR$(1) :BEEP b%,10*b% '
   (check_literal)   ',' != ':'
   (check_literal) check_literal: ret0
  (check_operator) ret0:is comma: 0

  (check_function) check_function: ':PRINT CHR$(1) :BEEP b%,10*b% '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=11 ' :PRINT CHR$(1) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=12 ':PRINT CHR$(1) :BEEP b%,10*b% '
   (check_literal)   '%' != ':'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=11 ' :PRINT CHR$(1) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=12 ':PRINT CHR$(1) :BEEP b%,10*b% '
   (check_literal)   '"' != ':'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: ':PRINT CHR$(1) :BEEP b%,10*b% '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname ':PRINT CHR$(1) :BEEP b%,10*b% ':
    (check_vname) check_vname ret0 ':PRINT CHR$(1) :BEEP b%,10*b% ':
   (check_variable) check_variable:ret0 
  (check_atom) check_atom:ret1

  (check_sub_expr) check_sub_expr:

   (check_literal) check_literal:lit=' (' idx=11 ' :PRINT CHR$(1) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'(' idx=12 ':PRINT CHR$(1) :BEEP b%,10*b% '
   (check_literal)   '(' != ':'
   (check_literal) check_literal: ret0
  (check_sub_expr) check_sub_expr: ret0
 (check_eitem) check_eitem:ret0
(scan_expression) scan_expression: ret1 ' :PRINT CHR$(1) :BEEP b%,10*b% ' commas:1
(scan_command) scan_command: ret1 =>'AT'
(scan_command) 
ENDEXP
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: AT type:17
(op_stack_print) 
------------------

(  output_sub_end)
(token_is_function) 
token_is_function:
(token_is_function) AT is function
Pop 5
Pop 'AT'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_function) [i,(U )] v v AT
(  output_sub_end)
Finalise stack
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'a%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? '' nidx:-1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'c1%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'AT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
 BE:

Type Check Stack (0)

 BE:a%
type_check_stack_push: 'a%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'a%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'a%' type:i (0)
 BE:

Type Check Stack (1)

000: 'a%' type:i (0)
 BE:c1%
type_check_stack_push: 'c1%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'a%' type:0
(type_check_stack_print) 
001: 'c1%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'a%' type:i (0)
001: 'c1%' type:i (0)
 BE:

Type Check Stack (2)

000: 'a%' type:i (0)
001: 'c1%' type:i (0)
 BE:AT
FN: 2 args
(function_return_type) 
function_return_type: 'AT' =>v
(function_return_type) 
function_return_type: 'AT' =>17
ret_type;17 v
typecheck_expression:Ret type of AT : v
type_check_stack_pop: 'c1%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'a%' type:0
(type_check_stack_print) 
------------------

FN ARG 1 ri c1% 0(i)  Arg ok
type_check_stack_pop: 'a%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (0)

(type_check_stack_print) 
------------------

FN ARG 0 ri a% 0(i)  Arg ok
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:17
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'a%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? '' nidx:-1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'c1%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'AT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'a%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     i rq:i 'c1%'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_FUNCTION     v rq:v 'AT'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
(process_expression_types) 
==INFIX==

Var: a% ary:0 NumIdx:0
infix_stack_push: 'a%'
Var: c1% ary:0 NumIdx:0
infix_stack_push: 'c1%'
infix_stack_pop: 'c1%'
infix_stack_pop: 'a%'
infix_stack_push: 'AT(a% c1% )'
infix_stack_pop: 'AT(a% c1% )'
(process_expression_types) ==AT(a% c1% )==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_START    U rq:?   0:
(    output_qcode) N4 EXP_BUFF_ID_VARIABLE     i rq:i c1%  0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_FUNCTION     v rq:v AT  0:
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:i   0:

 (check_literal) check_literal:lit=':' idx=12 ':PRINT CHR$(1) :BEEP b%,10*b% '
 (check_literal) check_literal:After drop space:':' idx=12 ':PRINT CHR$(1) :BEEP b%,10*b% '
 (check_literal) check_literal:After while():PRINT CHR$(1) :BEEP b%,10*b% 
 (check_literal) check_literal:ret1 

 (scan_literal) scan_literal:lit=':' 'PRINT CHR$(1) :BEEP b%,10*b% '
 (scan_literal) scan_literal:After drop space:'PRINT CHR$(1) :BEEP b%,10*b% '
 (scan_literal) scan_literal:while loop:PRINT CHR$(1) :BEEP b%,10*b% 
 (scan_literal) scan_literal:ret1

 (check_line) check_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'PRINT CHR$(1) :BEEP b%,10*b% ':
    (check_vname) check_vname ret1 ' CHR$(1) :BEEP b%,10*b% ':
   (check_variable) check_variable: ' CHR$(1) :BEEP b%,10*b% '
   (check_variable) check_variable: Ary test ' CHR$(1) :BEEP b%,10*b% '

    (check_literal) check_literal:lit='(' idx=18 ' CHR$(1) :BEEP b%,10*b% '
    (check_literal) check_literal:After drop space:'(' idx=18 ' CHR$(1) :BEEP b%,10*b% '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=18 ' CHR$(1) :BEEP b%,10*b% '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=19 'CHR$(1) :BEEP b%,10*b% '
  (check_literal)   '=' != 'C'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'PRINT CHR$(1) :BEEP b%,10*b% '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'PRINT'
(check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=24, ' CHR$(1) :BEEP b%,10*b% '
========================================================
  AT a%,c1% :PRINT CHR$(1) :BEEP b%,10*b% 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'PRINT CHR$(1) :BEEP b%,10*b% ':
    (check_vname) check_vname ret1 ' CHR$(1) :BEEP b%,10*b% ':
   (check_variable) check_variable: ' CHR$(1) :BEEP b%,10*b% '
   (check_variable) check_variable: Ary test ' CHR$(1) :BEEP b%,10*b% '

    (check_literal) check_literal:lit='(' idx=18 ' CHR$(1) :BEEP b%,10*b% '
    (check_literal) check_literal:After drop space:'(' idx=18 ' CHR$(1) :BEEP b%,10*b% '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=18 ' CHR$(1) :BEEP b%,10*b% '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=19 'CHR$(1) :BEEP b%,10*b% '
  (check_literal)   '=' != 'C'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'PRINT CHR$(1) :BEEP b%,10*b% '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'PRINT'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'PRINT' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) PRINT is function
 (function_return_type) 
function_return_type: 'PRINT' =>v
 (function_return_type) 
function_return_type: 'PRINT' =>17
process_token: 'PRINT' t=>v
 Push:'PRINT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' CHR$(1) :BEEP b%,10*b% '

   (check_eitem) check_eitem: 'CHR$(1) :BEEP b%,10*b% '

    (check_operator) check_operator: CHR$(1) :BEEP b%,10*b% 

     (check_literal) check_literal:lit=' ,' idx=19 'CHR$(1) :BEEP b%,10*b% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=19 'CHR$(1) :BEEP b%,10*b% '
     (check_literal)   ',' != 'C'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'CHR$(1) :BEEP b%,10*b% '
    (check_function) check_function: ret1 Found fn=>'CHR$'
   (check_eitem) check_eitem:ret1

   (scan_eitem) scan_eitem:

    (check_operator) check_operator: CHR$(1) :BEEP b%,10*b% 

     (check_literal) check_literal:lit=' ,' idx=19 'CHR$(1) :BEEP b%,10*b% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=19 'CHR$(1) :BEEP b%,10*b% '
     (check_literal)   ',' != 'C'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'CHR$(1) :BEEP b%,10*b% '
    (check_function) check_function: ret1 Found fn=>'CHR$'

    (scan_function) scan_function:
   Frst:0 T:'CHR$' exptype:U
    (token_is_function) 
token_is_function:
    (token_is_function) CHR$ is function
    (function_return_type) 
function_return_type: 'CHR$' =>s
    (function_return_type) 
function_return_type: 'CHR$' =>2
process_token: 'CHR$' t=>s
 Push:'CHR$'
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (3)

    (op_stack_print) 
000: PRINT type:17
    (op_stack_print) 
001: ( type:16
    (op_stack_print) 
002: CHR$ type:2
    (op_stack_print) 
------------------

    (scan_expression) n commas now:0

     (check_eitem) check_eitem: '(1) :BEEP b%,10*b% '

      (check_operator) check_operator: (1) :BEEP b%,10*b% 

       (check_literal) check_literal:lit=' ,' idx=23 '(1) :BEEP b%,10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=23 '(1) :BEEP b%,10*b% '
       (check_literal)   ',' != '('
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: '(1) :BEEP b%,10*b% '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=23 '(1) :BEEP b%,10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=23 '(1) :BEEP b%,10*b% '
       (check_literal)   '%' != '('
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=23 '(1) :BEEP b%,10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=23 '(1) :BEEP b%,10*b% '
       (check_literal)   '"' != '('
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '(1) :BEEP b%,10*b% '
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname '(1) :BEEP b%,10*b% ':
        (check_vname) check_vname ret0 '(1) :BEEP b%,10*b% ':
       (check_variable) check_variable:ret0 
      (check_atom) check_atom:ret1

      (check_sub_expr) check_sub_expr:

       (check_literal) check_literal:lit=' (' idx=23 '(1) :BEEP b%,10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'(' idx=23 '(1) :BEEP b%,10*b% '
       (check_literal) check_literal:After while():1) :BEEP b%,10*b% 
       (check_literal) check_literal:ret1 
      (check_sub_expr) check_sub_expr: ret1
     (check_eitem) check_eitem:ret1

     (scan_eitem) scan_eitem:

      (check_operator) check_operator: (1) :BEEP b%,10*b% 

       (check_literal) check_literal:lit=' ,' idx=23 '(1) :BEEP b%,10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=23 '(1) :BEEP b%,10*b% '
       (check_literal)   ',' != '('
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: '(1) :BEEP b%,10*b% '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=23 '(1) :BEEP b%,10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=23 '(1) :BEEP b%,10*b% '
       (check_literal)   '%' != '('
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=23 '(1) :BEEP b%,10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=23 '(1) :BEEP b%,10*b% '
       (check_literal)   '"' != '('
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '(1) :BEEP b%,10*b% '
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname '(1) :BEEP b%,10*b% ':
        (check_vname) check_vname ret0 '(1) :BEEP b%,10*b% ':
       (check_variable) check_variable:ret0 
      (check_atom) check_atom:ret1

      (check_sub_expr) check_sub_expr:

       (check_literal) check_literal:lit=' (' idx=23 '(1) :BEEP b%,10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'(' idx=23 '(1) :BEEP b%,10*b% '
       (check_literal) check_literal:After while():1) :BEEP b%,10*b% 
       (check_literal) check_literal:ret1 
      (check_sub_expr) check_sub_expr: ret1

      (scan_sub_expr) scan_sub_expr:

       (scan_literal) scan_literal:lit=' (' '(1) :BEEP b%,10*b% '
       (scan_literal) scan_literal:After drop space:'(1) :BEEP b%,10*b% '
       (scan_literal) scan_literal:while loop:(1) :BEEP b%,10*b% 
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (4)

       (op_stack_print) 
000: PRINT type:17
       (op_stack_print) 
001: ( type:16
       (op_stack_print) 
002: CHR$ type:2
       (op_stack_print) 
003: ( type:16
       (op_stack_print) 
------------------

       (scan_literal) scan_literal:ret1
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (5)

      (op_stack_print) 
000: PRINT type:17
      (op_stack_print) 
001: ( type:16
      (op_stack_print) 
002: CHR$ type:2
      (op_stack_print) 
003: ( type:16
      (op_stack_print) 
004: ( type:16
      (op_stack_print) 
------------------


       (scan_expression) scan_expression: '1) :BEEP b%,10*b% '

        (check_eitem) check_eitem: '1) :BEEP b%,10*b% '

         (check_operator) check_operator: 1) :BEEP b%,10*b% 

          (check_literal) check_literal:lit=' ,' idx=24 '1) :BEEP b%,10*b% '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:',' idx=24 '1) :BEEP b%,10*b% '
          (check_literal)   ',' != '1'
          (check_literal) check_literal: ret0
         (check_operator) ret0:is comma: 0

         (check_function) check_function: '1) :BEEP b%,10*b% '
         (check_function) check_function: ret0

         (check_atom) check_atom:

          (check_literal) check_literal:lit=' %' idx=24 '1) :BEEP b%,10*b% '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=24 '1) :BEEP b%,10*b% '
          (check_literal)   '%' != '1'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=24 '1) :BEEP b%,10*b% '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=24 '1) :BEEP b%,10*b% '
          (check_literal)   '"' != '1'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '1) :BEEP b%,10*b% '
           (check_integer) check_integer:ret1
          (check_number) check_number: ret1
         (check_atom) check_atom:ret1
        (check_eitem) check_eitem:ret1

        (scan_eitem) scan_eitem:

         (check_operator) check_operator: 1) :BEEP b%,10*b% 

          (check_literal) check_literal:lit=' ,' idx=24 '1) :BEEP b%,10*b% '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:',' idx=24 '1) :BEEP b%,10*b% '
          (check_literal)   ',' != '1'
          (check_literal) check_literal: ret0
         (check_operator) ret0:is comma: 0

         (check_function) check_function: '1) :BEEP b%,10*b% '
         (check_function) check_function: ret0

         (check_atom) check_atom:

          (check_literal) check_literal:lit=' %' idx=24 '1) :BEEP b%,10*b% '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=24 '1) :BEEP b%,10*b% '
          (check_literal)   '%' != '1'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=24 '1) :BEEP b%,10*b% '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=24 '1) :BEEP b%,10*b% '
          (check_literal)   '"' != '1'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '1) :BEEP b%,10*b% '
           (check_integer) check_integer:ret1
          (check_number) check_number: ret1
         (check_atom) check_atom:ret1

         (scan_atom) scan_atom:

          (check_literal) check_literal:lit=' %' idx=24 '1) :BEEP b%,10*b% '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=24 '1) :BEEP b%,10*b% '
          (check_literal)   '%' != '1'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=24 '1) :BEEP b%,10*b% '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=24 '1) :BEEP b%,10*b% '
          (check_literal)   '"' != '1'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '1) :BEEP b%,10*b% '
           (check_integer) check_integer:ret1
          (check_number) check_number: ret1

          (scan_number) scan_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '1) :BEEP b%,10*b% '
           (check_integer) check_integer:ret1

           (scan_integer) scan_integer:
           (scan_integer) scan_integer:ret1
   Frst:0 T:'1' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U U U )] i i 1
          (scan_integer) scan_integer:ret1  1
         (scan_atom) scan_atom:ret1
        (scan_expression) n commas now:0

         (check_eitem) check_eitem: ') :BEEP b%,10*b% '

          (check_operator) check_operator: ) :BEEP b%,10*b% 

           (check_literal) check_literal:lit=' ,' idx=25 ') :BEEP b%,10*b% '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:',' idx=25 ') :BEEP b%,10*b% '
           (check_literal)   ',' != ')'
           (check_literal) check_literal: ret0
          (check_operator) ret0:is comma: 0

          (check_function) check_function: ') :BEEP b%,10*b% '
          (check_function) check_function: ret0

          (check_atom) check_atom:

           (check_literal) check_literal:lit=' %' idx=25 ') :BEEP b%,10*b% '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'%' idx=25 ') :BEEP b%,10*b% '
           (check_literal)   '%' != ')'
           (check_literal) check_literal: ret0

           (check_literal) check_literal:lit=' "' idx=25 ') :BEEP b%,10*b% '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'"' idx=25 ') :BEEP b%,10*b% '
           (check_literal)   '"' != ')'
           (check_literal) check_literal: ret0

           (check_number) check_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret0

            (check_integer) check_integer: ') :BEEP b%,10*b% '
            (check_integer) check_integer:ret0
           (check_number) check_number: ret0

           (check_variable) check_variable:

            (check_vname) check_vname ') :BEEP b%,10*b% ':
            (check_vname) check_vname ret0 ') :BEEP b%,10*b% ':
           (check_variable) check_variable:ret0 
          (check_atom) check_atom:ret1

          (check_sub_expr) check_sub_expr:

           (check_literal) check_literal:lit=' (' idx=25 ') :BEEP b%,10*b% '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'(' idx=25 ') :BEEP b%,10*b% '
           (check_literal)   '(' != ')'
           (check_literal) check_literal: ret0
          (check_sub_expr) check_sub_expr: ret0
         (check_eitem) check_eitem:ret0
        (scan_expression) scan_expression: ret1 ') :BEEP b%,10*b% ' commas:0

        (scan_literal) scan_literal:lit=' )' ') :BEEP b%,10*b% '
        (scan_literal) scan_literal:After drop space:') :BEEP b%,10*b% '
        (scan_literal) scan_literal:while loop:) :BEEP b%,10*b% 
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
        (op_stack_print) 
------------------
        (op_stack_print) 
Operator Stack     (4)

        (op_stack_print) 
000: PRINT type:17
        (op_stack_print) 
001: ( type:16
        (op_stack_print) 
002: CHR$ type:2
        (op_stack_print) 
003: ( type:16
        (op_stack_print) 
------------------

(  output_sub_end)
        (token_is_function) 
token_is_function:
        (token_is_function) 
token_is_function:( is not function
(  output_sub_end)
        (scan_literal) scan_literal:ret1
   Frst:0 T:')' exptype:U
Pop 4
Pop '('
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (3)

       (op_stack_print) 
000: PRINT type:17
       (op_stack_print) 
001: ( type:16
       (op_stack_print) 
002: CHR$ type:2
       (op_stack_print) 
------------------

(  output_sub_end)
       (token_is_function) 
token_is_function:
       (token_is_function) CHR$ is function
Pop 5
Pop 'CHR$'
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (2)

       (op_stack_print) 
000: PRINT type:17
       (op_stack_print) 
001: ( type:16
       (op_stack_print) 
------------------

( output_function) [U,(U U )] s s CHR$
(  output_sub_end)
       (scan_sub_expr) scan_sub_expr:ret1
      (scan_expression) n commas now:0

       (check_eitem) check_eitem: ' :BEEP b%,10*b% '

        (check_operator) check_operator:  :BEEP b%,10*b% 

         (check_literal) check_literal:lit=' ,' idx=27 ':BEEP b%,10*b% '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:',' idx=27 ':BEEP b%,10*b% '
         (check_literal)   ',' != ':'
         (check_literal) check_literal: ret0
        (check_operator) ret0:is comma: 0

        (check_function) check_function: ':BEEP b%,10*b% '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=26 ' :BEEP b%,10*b% '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=27 ':BEEP b%,10*b% '
         (check_literal)   '%' != ':'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=26 ' :BEEP b%,10*b% '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=27 ':BEEP b%,10*b% '
         (check_literal)   '"' != ':'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: ':BEEP b%,10*b% '
          (check_integer) check_integer:ret0
         (check_number) check_number: ret0

         (check_variable) check_variable:

          (check_vname) check_vname ':BEEP b%,10*b% ':
          (check_vname) check_vname ret0 ':BEEP b%,10*b% ':
         (check_variable) check_variable:ret0 
        (check_atom) check_atom:ret1

        (check_sub_expr) check_sub_expr:

         (check_literal) check_literal:lit=' (' idx=26 ' :BEEP b%,10*b% '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'(' idx=27 ':BEEP b%,10*b% '
         (check_literal)   '(' != ':'
         (check_literal) check_literal: ret0
        (check_sub_expr) check_sub_expr: ret0
       (check_eitem) check_eitem:ret0
      (scan_expression) scan_expression: ret1 ' :BEEP b%,10*b% ' commas:0
     (scan_command) scan_command: ret1 =>'PRINT'
    (scan_command) 
ENDEXP
   Frst:0 T:')' exptype:U
Pop 4
Pop '('
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (1)

    (op_stack_print) 
000: PRINT type:17
    (op_stack_print) 
------------------

(  output_sub_end)
    (token_is_function) 
token_is_function:
    (token_is_function) PRINT is function
Pop 5
Pop 'PRINT'
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (0)

    (op_stack_print) 
------------------

( output_function) [U,(U )] v v PRINT
(  output_sub_end)
Finalise stack
    (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '1' nidx:25  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     s rq:s 'CHR$' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
 BE:

Type Check Stack (0)

 BE:

Type Check Stack (0)

 BE:

Type Check Stack (0)

 BE:1
type_check_stack_push: '1'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (1)

    (type_check_stack_print) 
000: '1' type:0
    (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '1' type:i (0)
 BE:

Type Check Stack (1)

000: '1' type:i (0)
 BE:

Type Check Stack (1)

000: '1' type:i (0)
 BE:

Type Check Stack (1)

000: '1' type:i (0)
 BE:CHR$
FN: 1 args
    (function_return_type) 
function_return_type: 'CHR$' =>s
    (function_return_type) 
function_return_type: 'CHR$' =>2
ret_type;2 s
typecheck_expression:Ret type of CHR$ : s
type_check_stack_pop: '1'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (0)

    (type_check_stack_print) 
------------------

FN ARG 0 ri 1 0(i)  Arg ok
type_check_stack_push: '000'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (1)

    (type_check_stack_print) 
000: '000' type:2
    (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:s (2)
 BE:

Type Check Stack (1)

000: '000' type:s (2)
 BE:

Type Check Stack (1)

000: '000' type:s (2)
 BE:PRINT
FN: 1 args
    (function_return_type) 
function_return_type: 'PRINT' =>v
    (function_return_type) 
function_return_type: 'PRINT' =>17
ret_type;17 v
typecheck_expression:Ret type of PRINT : v
type_check_stack_pop: '000'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (0)

    (type_check_stack_print) 
------------------

FN ARG 0 ri 000 2(s)  Arg not OK
type_check_stack_push: '000'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (1)

    (type_check_stack_print) 
000: '000' type:17
    (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '1' nidx:25  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     s rq:s 'CHR$' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_INTEGER      i rq:i '1'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_FUNCTION     s rq:s 'CHR$'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
(dump_exp_buffer2) N12 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
    (process_expression_types) 
==INFIX==

infix_stack_push: '1'
infix_stack_pop: '1'
infix_stack_push: 'CHR$(1 )'
infix_stack_pop: 'CHR$(1 )'
infix_stack_push: 'PRINT(CHR$(1 ) )'
infix_stack_pop: 'PRINT(CHR$(1 ) )'
    (process_expression_types) ==PRINT(CHR$(1 ) )==
    (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N4 EXP_BUFF_ID_INTEGER      i rq:i 1  0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N8 EXP_BUFF_ID_FUNCTION     s rq:s CHR$  0:
(    output_qcode) N9 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N10 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N11 EXP_BUFF_ID_FUNCTION     v rq:v PRINT  0:
(    output_qcode) N12 EXP_BUFF_ID_SUB_END      U rq:i   0:

     (check_literal) check_literal:lit=':' idx=27 ':BEEP b%,10*b% '
     (check_literal) check_literal:After drop space:':' idx=27 ':BEEP b%,10*b% '
     (check_literal) check_literal:After while():BEEP b%,10*b% 
     (check_literal) check_literal:ret1 

     (scan_literal) scan_literal:lit=':' 'BEEP b%,10*b% '
     (scan_literal) scan_literal:After drop space:'BEEP b%,10*b% '
     (scan_literal) scan_literal:while loop:BEEP b%,10*b% 
     (scan_literal) scan_literal:ret1

     (check_line) check_line:

      (check_assignment) check_assignment:

       (check_variable) check_variable:

        (check_vname) check_vname 'BEEP b%,10*b% ':
        (check_vname) check_vname ret1 ' b%,10*b% ':
       (check_variable) check_variable: ' b%,10*b% '
       (check_variable) check_variable: Ary test ' b%,10*b% '

        (check_literal) check_literal:lit='(' idx=32 ' b%,10*b% '
        (check_literal) check_literal:After drop space:'(' idx=32 ' b%,10*b% '
        (check_literal)   '(' != ' '
        (check_literal) check_literal: ret0
       (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
      (check_variable) check_variable:ret1 

      (check_literal) check_literal:lit=' =' idx=32 ' b%,10*b% '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'=' idx=33 'b%,10*b% '
      (check_literal)   '=' != 'b'
      (check_literal) check_literal: ret0
     (check_assignment) check_assignment:ret0

     (check_proc_call) check_proc_call:

      (check_textlabel) check_textlabel: 'BEEP b%,10*b% '
      (check_textlabel) check_textlabel:ret0
     (check_proc_call) check_proc_call:ret0

     (check_command) check_command:
     (check_command) check_command: ret1 found=> 'BEEP'
    (check_line) check_line:ret1
   (scan_cline) scan_cline: Checked len=10, ' b%,10*b% '
========================================================
  AT a%,c1% :PRINT CHR$(1) :BEEP b%,10*b% 
========================================================
(output_expression_start)

    (scan_line) scan_line:

     (check_assignment) check_assignment:

      (check_variable) check_variable:

       (check_vname) check_vname 'BEEP b%,10*b% ':
       (check_vname) check_vname ret1 ' b%,10*b% ':
      (check_variable) check_variable: ' b%,10*b% '
      (check_variable) check_variable: Ary test ' b%,10*b% '

       (check_literal) check_literal:lit='(' idx=32 ' b%,10*b% '
       (check_literal) check_literal:After drop space:'(' idx=32 ' b%,10*b% '
       (check_literal)   '(' != ' '
       (check_literal) check_literal: ret0
      (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
     (check_variable) check_variable:ret1 

     (check_literal) check_literal:lit=' =' idx=32 ' b%,10*b% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'=' idx=33 'b%,10*b% '
     (check_literal)   '=' != 'b'
     (check_literal) check_literal: ret0
    (check_assignment) check_assignment:ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) check_textlabel: 'BEEP b%,10*b% '
     (check_textlabel) check_textlabel:ret0
    (check_proc_call) check_proc_call:ret0

    (check_command) check_command:
    (check_command) check_command: ret1 found=> 'BEEP'
   (scan_line) scan_line:check_command: 

    (scan_command) scan_command:
   Frst:1 T:'BEEP' exptype:U
    (token_is_function) 
token_is_function:
    (token_is_function) BEEP is function
    (function_return_type) 
function_return_type: 'BEEP' =>v
    (function_return_type) 
function_return_type: 'BEEP' =>17
process_token: 'BEEP' t=>v
 Push:'BEEP'
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (1)

    (op_stack_print) 
000: BEEP type:17
    (op_stack_print) 
------------------

    (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (2)

    (op_stack_print) 
000: BEEP type:17
    (op_stack_print) 
001: ( type:16
    (op_stack_print) 
------------------


     (scan_expression) scan_expression: ' b%,10*b% '

      (check_eitem) check_eitem: 'b%,10*b% '

       (check_operator) check_operator: b%,10*b% 

        (check_literal) check_literal:lit=' ,' idx=33 'b%,10*b% '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:',' idx=33 'b%,10*b% '
        (check_literal)   ',' != 'b'
        (check_literal) check_literal: ret0
       (check_operator) ret0:is comma: 0

       (check_function) check_function: 'b%,10*b% '
       (check_function) check_function: ret0

       (check_atom) check_atom:

        (check_literal) check_literal:lit=' %' idx=33 'b%,10*b% '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'%' idx=33 'b%,10*b% '
        (check_literal)   '%' != 'b'
        (check_literal) check_literal: ret0

        (check_literal) check_literal:lit=' "' idx=33 'b%,10*b% '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'"' idx=33 'b%,10*b% '
        (check_literal)   '"' != 'b'
        (check_literal) check_literal: ret0

        (check_number) check_number:

         (check_float) check_float:
         (isfloatdigit) isfloatdigit:
         (check_float) check_float: ret0

         (check_integer) check_integer: 'b%,10*b% '
         (check_integer) check_integer:ret0
        (check_number) check_number: ret0

        (check_variable) check_variable:

         (check_vname) check_vname 'b%,10*b% ':
         (check_vname) check_vname ret1 '%,10*b% ':
        (check_variable) check_variable: '%,10*b% '
        (check_variable) check_variable: Ary test ',10*b% '

         (check_literal) check_literal:lit='(' idx=35 ',10*b% '
         (check_literal) check_literal:After drop space:'(' idx=35 ',10*b% '
         (check_literal)   '(' != ','
         (check_literal) check_literal: ret0
        (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
       (check_variable) check_variable:ret1 
      (check_atom) check_atom:ret1
     (check_eitem) check_eitem:ret1

     (scan_eitem) scan_eitem:

      (check_operator) check_operator: b%,10*b% 

       (check_literal) check_literal:lit=' ,' idx=33 'b%,10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=33 'b%,10*b% '
       (check_literal)   ',' != 'b'
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: 'b%,10*b% '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=33 'b%,10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=33 'b%,10*b% '
       (check_literal)   '%' != 'b'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=33 'b%,10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=33 'b%,10*b% '
       (check_literal)   '"' != 'b'
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: 'b%,10*b% '
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname 'b%,10*b% ':
        (check_vname) check_vname ret1 '%,10*b% ':
       (check_variable) check_variable: '%,10*b% '
       (check_variable) check_variable: Ary test ',10*b% '

        (check_literal) check_literal:lit='(' idx=35 ',10*b% '
        (check_literal) check_literal:After drop space:'(' idx=35 ',10*b% '
        (check_literal)   '(' != ','
        (check_literal) check_literal: ret0
       (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
      (check_variable) check_variable:ret1 
     (check_atom) check_atom:ret1

     (scan_atom) scan_atom:

      (check_literal) check_literal:lit=' %' idx=33 'b%,10*b% '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=33 'b%,10*b% '
      (check_literal)   '%' != 'b'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=33 'b%,10*b% '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=33 'b%,10*b% '
      (check_literal)   '"' != 'b'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: 'b%,10*b% '
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname 'b%,10*b% ':
       (check_vname) check_vname ret1 '%,10*b% ':
      (check_variable) check_variable: '%,10*b% '
      (check_variable) check_variable: Ary test ',10*b% '

       (check_literal) check_literal:lit='(' idx=35 ',10*b% '
       (check_literal) check_literal:After drop space:'(' idx=35 ',10*b% '
       (check_literal)   '(' != ','
       (check_literal) check_literal: ret0
      (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
     (check_variable) check_variable:ret1 

     (scan_variable) scan_variable:

      (scan_vname) scan_vname: 'b%,10*b% '
      (scan_vname) scan_vname: ret1 'b'
     (scan_variable) scan_variable: '%,10*b% ' vname='b'
     (scan_variable) scan_variable: Ary test ',10*b% '

      (check_literal) check_literal:lit='(' idx=35 ',10*b% '
      (check_literal) check_literal:After drop space:'(' idx=35 ',10*b% '
      (check_literal)   '(' != ','
      (check_literal) check_literal: ret0
     (scan_variable) scan_variable:ret1 vname='b%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'b%' exptype:U
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:b% is not function
token_is_variable: tok:'b%'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:b% is not function
    (init_get_name) 
init_get_name:'b%'
    (init_get_name) 
init_get_name:'b%'
    (get_name) 
get_name:gn:'b%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,(U )] i i b%
    (print_var_info) 
VAR INFO: '                b%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
    (scan_atom) scan_atom:ret1
   (scan_expression) n commas now:0

    (check_eitem) check_eitem: ',10*b% '

     (check_operator) check_operator: ,10*b% 

      (check_literal) check_literal:lit=' ,' idx=35 ',10*b% '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=35 ',10*b% '
      (check_literal) check_literal:After while():10*b% 
      (check_literal) check_literal:ret1 
     (check_operator) ret1:is comma: 0
    (check_eitem) check_eitem:ret1 comma:1

    (scan_eitem) scan_eitem:

     (check_operator) check_operator: ,10*b% 

      (check_literal) check_literal:lit=' ,' idx=35 ',10*b% '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=35 ',10*b% '
      (check_literal) check_literal:After while():10*b% 
      (check_literal) check_literal:ret1 
     (check_operator) ret1:is comma: 0

     (scan_operator) scan_operator: ',10*b% '

      (check_literal) check_literal:lit=' ,' idx=35 ',10*b% '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=35 ',10*b% '
      (check_literal) check_literal:After while():10*b% 
      (check_literal) check_literal:ret1 

      (scan_literal) scan_literal:lit=' ,' ',10*b% '
      (scan_literal) scan_literal:After drop space:',10*b% '
      (scan_literal) scan_literal:while loop:,10*b% 
   Frst:0 T:',' exptype:i
(output_sub_start)
      (scan_literal) scan_literal:ret1
     (scan_operator) ret1:is comma: 1
    (scan_eitem) Is comma;1
    (scan_expression) n commas now:1

     (check_eitem) check_eitem: '10*b% '

      (check_operator) check_operator: 10*b% 

       (check_literal) check_literal:lit=' ,' idx=36 '10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=36 '10*b% '
       (check_literal)   ',' != '1'
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: '10*b% '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=36 '10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=36 '10*b% '
       (check_literal)   '%' != '1'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=36 '10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=36 '10*b% '
       (check_literal)   '"' != '1'
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '10*b% '
        (check_integer) check_integer:ret1
       (check_number) check_number: ret1
      (check_atom) check_atom:ret1
     (check_eitem) check_eitem:ret1

     (scan_eitem) scan_eitem:

      (check_operator) check_operator: 10*b% 

       (check_literal) check_literal:lit=' ,' idx=36 '10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=36 '10*b% '
       (check_literal)   ',' != '1'
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: '10*b% '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=36 '10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=36 '10*b% '
       (check_literal)   '%' != '1'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=36 '10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=36 '10*b% '
       (check_literal)   '"' != '1'
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '10*b% '
        (check_integer) check_integer:ret1
       (check_number) check_number: ret1
      (check_atom) check_atom:ret1

      (scan_atom) scan_atom:

       (check_literal) check_literal:lit=' %' idx=36 '10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=36 '10*b% '
       (check_literal)   '%' != '1'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=36 '10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=36 '10*b% '
       (check_literal)   '"' != '1'
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '10*b% '
        (check_integer) check_integer:ret1
       (check_number) check_number: ret1

       (scan_number) scan_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '10*b% '
        (check_integer) check_integer:ret1

        (scan_integer) scan_integer:
        (scan_integer) scan_integer:ret1
   Frst:0 T:'10' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U )] i i 10
       (scan_integer) scan_integer:ret1  10
      (scan_atom) scan_atom:ret1
     (scan_expression) n commas now:1

      (check_eitem) check_eitem: '*b% '

       (check_operator) check_operator: *b% 

        (check_literal) check_literal:lit=' ,' idx=38 '*b% '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:',' idx=38 '*b% '
        (check_literal)   ',' != '*'
        (check_literal) check_literal: ret0
       (check_operator) ret1:is comma: 0
      (check_eitem) check_eitem:ret1 comma:1

      (scan_eitem) scan_eitem:

       (check_operator) check_operator: *b% 

        (check_literal) check_literal:lit=' ,' idx=38 '*b% '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:',' idx=38 '*b% '
        (check_literal)   ',' != '*'
        (check_literal) check_literal: ret0
       (check_operator) ret1:is comma: 0

       (scan_operator) scan_operator: '*b% '

        (check_literal) check_literal:lit=' ,' idx=38 '*b% '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:',' idx=38 '*b% '
        (check_literal)   ',' != '*'
        (check_literal) check_literal: ret0
       (scan_operator) scan_operator: ret1 'b% '
   Frst:0 T:'*' exptype:i
      (operator_precedence) 
* is operator
'*' is operator
      (process_token) 
Token is operator o1 name:* o2 name:(
      (process_token) 
opr1:5 opr2:0
Push 1
 Push:'*'
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (3)

      (op_stack_print) 
000: BEEP type:17
      (op_stack_print) 
001: ( type:16
      (op_stack_print) 
002: * type:0
      (op_stack_print) 
------------------

      (scan_eitem) Is comma;0
      (scan_expression) n commas now:1

       (check_eitem) check_eitem: 'b% '

        (check_operator) check_operator: b% 

         (check_literal) check_literal:lit=' ,' idx=39 'b% '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:',' idx=39 'b% '
         (check_literal)   ',' != 'b'
         (check_literal) check_literal: ret0
        (check_operator) ret0:is comma: 0

        (check_function) check_function: 'b% '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=39 'b% '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=39 'b% '
         (check_literal)   '%' != 'b'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=39 'b% '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=39 'b% '
         (check_literal)   '"' != 'b'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: 'b% '
          (check_integer) check_integer:ret0
         (check_number) check_number: ret0

         (check_variable) check_variable:

          (check_vname) check_vname 'b% ':
          (check_vname) check_vname ret1 '% ':
         (check_variable) check_variable: '% '
         (check_variable) check_variable: Ary test ' '

          (check_literal) check_literal:lit='(' idx=41 ' '
          (check_literal) check_literal:After drop space:'(' idx=41 ' '
          (check_literal)   '(' != ' '
          (check_literal) check_literal: ret0
         (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
        (check_variable) check_variable:ret1 
       (check_atom) check_atom:ret1
      (check_eitem) check_eitem:ret1

      (scan_eitem) scan_eitem:

       (check_operator) check_operator: b% 

        (check_literal) check_literal:lit=' ,' idx=39 'b% '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:',' idx=39 'b% '
        (check_literal)   ',' != 'b'
        (check_literal) check_literal: ret0
       (check_operator) ret0:is comma: 0

       (check_function) check_function: 'b% '
       (check_function) check_function: ret0

       (check_atom) check_atom:

        (check_literal) check_literal:lit=' %' idx=39 'b% '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'%' idx=39 'b% '
        (check_literal)   '%' != 'b'
        (check_literal) check_literal: ret0

        (check_literal) check_literal:lit=' "' idx=39 'b% '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'"' idx=39 'b% '
        (check_literal)   '"' != 'b'
        (check_literal) check_literal: ret0

        (check_number) check_number:

         (check_float) check_float:
         (isfloatdigit) isfloatdigit:
         (check_float) check_float: ret0

         (check_integer) check_integer: 'b% '
         (check_integer) check_integer:ret0
        (check_number) check_number: ret0

        (check_variable) check_variable:

         (check_vname) check_vname 'b% ':
         (check_vname) check_vname ret1 '% ':
        (check_variable) check_variable: '% '
        (check_variable) check_variable: Ary test ' '

         (check_literal) check_literal:lit='(' idx=41 ' '
         (check_literal) check_literal:After drop space:'(' idx=41 ' '
         (check_literal)   '(' != ' '
         (check_literal) check_literal: ret0
        (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
       (check_variable) check_variable:ret1 
      (check_atom) check_atom:ret1

      (scan_atom) scan_atom:

       (check_literal) check_literal:lit=' %' idx=39 'b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=39 'b% '
       (check_literal)   '%' != 'b'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=39 'b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=39 'b% '
       (check_literal)   '"' != 'b'
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: 'b% '
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname 'b% ':
        (check_vname) check_vname ret1 '% ':
       (check_variable) check_variable: '% '
       (check_variable) check_variable: Ary test ' '

        (check_literal) check_literal:lit='(' idx=41 ' '
        (check_literal) check_literal:After drop space:'(' idx=41 ' '
        (check_literal)   '(' != ' '
        (check_literal) check_literal: ret0
       (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
      (check_variable) check_variable:ret1 

      (scan_variable) scan_variable:

       (scan_vname) scan_vname: 'b% '
       (scan_vname) scan_vname: ret1 'b'
      (scan_variable) scan_variable: '% ' vname='b'
      (scan_variable) scan_variable: Ary test ' '

       (check_literal) check_literal:lit='(' idx=41 ' '
       (check_literal) check_literal:After drop space:'(' idx=41 ' '
       (check_literal)   '(' != ' '
       (check_literal) check_literal: ret0
      (scan_variable) scan_variable:ret1 vname='b%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'b%' exptype:i
     (operator_precedence) 
* is operator
     (token_is_function) 
token_is_function:
     (token_is_function) 
token_is_function:b% is not function
token_is_variable: tok:'b%'
     (token_is_function) 
token_is_function:
     (token_is_function) 
token_is_function:b% is not function
     (init_get_name) 
init_get_name:'b%'
     (init_get_name) 
init_get_name:'b%'
     (get_name) 
get_name:gn:'b%'
process_token:type:i req_type:i
modify_expression_type:Inittype:i Intype:i Outtype:i
( output_variable) [i,(U )] i i b%
     (print_var_info) 
VAR INFO: '                b%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
     (scan_atom) scan_atom:ret1
    (scan_expression) n commas now:1

     (check_eitem) check_eitem: ' '

      (check_operator) check_operator:  

       (check_literal) check_literal:lit=' ,' idx=42 ''
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=42 ''
       (check_literal) check_literal  ret0 Empty test string
      (check_operator) ret0:is comma: 0

      (check_function) check_function: ''
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=41 ' '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=42 ''
       (check_literal) check_literal  ret0 Empty test string

       (check_literal) check_literal:lit=' "' idx=41 ' '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=42 ''
       (check_literal) check_literal  ret0 Empty test string

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: ''
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname '':
        (check_vname) check_vname ret0 '':
       (check_variable) check_variable:ret0 
      (check_atom) check_atom:ret1

      (check_sub_expr) check_sub_expr:

       (check_literal) check_literal:lit=' (' idx=41 ' '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'(' idx=42 ''
       (check_literal) check_literal  ret0 Empty test string
      (check_sub_expr) check_sub_expr: ret0
     (check_eitem) check_eitem:ret0
    (scan_expression) scan_expression: ret1 ' ' commas:1
   (scan_command) scan_command: ret1 =>'BEEP'
  (scan_command) 
ENDEXP
   Frst:0 T:')' exptype:i
  (operator_precedence) 
* is operator
  (process_token) 
Pop 3
Pop '*'
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (2)

  (op_stack_print) 
000: BEEP type:17
  (op_stack_print) 
001: ( type:16
  (op_stack_print) 
------------------

( output_operator) [i,(U )] i i *
  (token_is_function) 
token_is_function:
  (token_is_function) 
token_is_function:* is not function
Pop 4
Pop '('
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (1)

  (op_stack_print) 
000: BEEP type:17
  (op_stack_print) 
------------------

(  output_sub_end)
  (token_is_function) 
token_is_function:
  (token_is_function) BEEP is function
Pop 5
Pop 'BEEP'
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (0)

  (op_stack_print) 
------------------

( output_function) [i,(U )] v v BEEP
(  output_sub_end)
Finalise stack
  (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'b%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? '' nidx:-1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '10' nidx:38  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'b%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '*' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'BEEP' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
 BE:

Type Check Stack (0)

 BE:b%
type_check_stack_push: 'b%'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (1)

  (type_check_stack_print) 
000: 'b%' type:0
  (type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'b%' type:i (0)
 BE:

Type Check Stack (1)

000: 'b%' type:i (0)
 BE:10
type_check_stack_push: '10'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (2)

  (type_check_stack_print) 
000: 'b%' type:0
  (type_check_stack_print) 
001: '10' type:0
  (type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'b%' type:i (0)
001: '10' type:i (0)
 BE:b%
type_check_stack_push: 'b%'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (3)

  (type_check_stack_print) 
000: 'b%' type:0
  (type_check_stack_print) 
001: '10' type:0
  (type_check_stack_print) 
002: 'b%' type:0
  (type_check_stack_print) 
------------------


Type Check Stack (3)

000: 'b%' type:i (0)
001: '10' type:i (0)
002: 'b%' type:i (0)
 BE:*
BUFF_ID_OPERATOR
Found operator *
type_check_stack_pop: 'b%'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (2)

  (type_check_stack_print) 
000: 'b%' type:0
  (type_check_stack_print) 
001: '10' type:0
  (type_check_stack_print) 
------------------

type_check_stack_pop: '10'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (1)

  (type_check_stack_print) 
000: 'b%' type:0
  (type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (2)

  (type_check_stack_print) 
000: 'b%' type:0
  (type_check_stack_print) 
001: '000' type:0
  (type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'b%' type:i (0)
001: '000' type:i (0)
 BE:

Type Check Stack (2)

000: 'b%' type:i (0)
001: '000' type:i (0)
 BE:BEEP
FN: 2 args
  (function_return_type) 
function_return_type: 'BEEP' =>v
  (function_return_type) 
function_return_type: 'BEEP' =>17
ret_type;17 v
typecheck_expression:Ret type of BEEP : v
type_check_stack_pop: '000'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (1)

  (type_check_stack_print) 
000: 'b%' type:0
  (type_check_stack_print) 
------------------

FN ARG 1 ri 000 0(i)  Arg ok
type_check_stack_pop: 'b%'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (0)

  (type_check_stack_print) 
------------------

FN ARG 0 ri b% 0(i)  Arg ok
type_check_stack_push: '000'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (1)

  (type_check_stack_print) 
000: '000' type:17
  (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'b%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? '' nidx:-1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '10' nidx:38  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'b%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '*' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'BEEP' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'b%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_INTEGER      i rq:i '10'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_VARIABLE     i rq:i 'b%'  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 5 4
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_FUNCTION     v rq:v 'BEEP'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
  (process_expression_types) 
==INFIX==

Var: b% ary:0 NumIdx:0
infix_stack_push: 'b%'
infix_stack_push: '10'
Var: b% ary:0 NumIdx:0
infix_stack_push: 'b%'
infix_stack_pop: 'b%'
infix_stack_pop: '10'
infix_stack_push: '(10 * b%)'
infix_stack_pop: '(10 * b%)'
infix_stack_pop: 'b%'
infix_stack_push: 'BEEP(b% (10 * b%) )'
infix_stack_pop: 'BEEP(b% (10 * b%) )'
  (process_expression_types) ==BEEP(b% (10 * b%) )==
  (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_START    U rq:?   0:
(    output_qcode) N4 EXP_BUFF_ID_INTEGER      i rq:i 10  0:
(    output_qcode) N5 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
(    output_qcode) N6 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 5 4
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N8 EXP_BUFF_ID_FUNCTION     v rq:v BEEP  0:
(    output_qcode) N9 EXP_BUFF_ID_SUB_END      U rq:i   0:

   (check_literal) check_literal:lit=':' idx=42 ''
   (check_literal) check_literal:After drop space:':' idx=42 ''
   (check_literal) check_literal  ret0 Empty test string
  (translate_file) 
cline scanned OK
******************************
**  AT a%,c% :PRINT CHR$(2) **
******************************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'AT a%,c% :PRINT CHR$(2) ':
     (check_vname) check_vname ret1 ' a%,c% :PRINT CHR$(2) ':
    (check_variable) check_variable: ' a%,c% :PRINT CHR$(2) '
    (check_variable) check_variable: Ary test ' a%,c% :PRINT CHR$(2) '

     (check_literal) check_literal:lit='(' idx=4 ' a%,c% :PRINT CHR$(2) '
     (check_literal) check_literal:After drop space:'(' idx=4 ' a%,c% :PRINT CHR$(2) '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=4 ' a%,c% :PRINT CHR$(2) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=5 'a%,c% :PRINT CHR$(2) '
   (check_literal)   '=' != 'a'
   (check_literal) check_literal: ret0
  (check_assignment) check_assignment:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) check_textlabel: 'AT a%,c% :PRINT CHR$(2) '
   (check_textlabel) check_textlabel:ret0
  (check_proc_call) check_proc_call:ret0

  (check_command) check_command:
  (check_command) check_command: ret1 found=> 'AT'
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=22, ' a%,c% :PRINT CHR$(2) '
========================================================
  AT a%,c% :PRINT CHR$(2) 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'AT a%,c% :PRINT CHR$(2) ':
    (check_vname) check_vname ret1 ' a%,c% :PRINT CHR$(2) ':
   (check_variable) check_variable: ' a%,c% :PRINT CHR$(2) '
   (check_variable) check_variable: Ary test ' a%,c% :PRINT CHR$(2) '

    (check_literal) check_literal:lit='(' idx=4 ' a%,c% :PRINT CHR$(2) '
    (check_literal) check_literal:After drop space:'(' idx=4 ' a%,c% :PRINT CHR$(2) '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=4 ' a%,c% :PRINT CHR$(2) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=5 'a%,c% :PRINT CHR$(2) '
  (check_literal)   '=' != 'a'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'AT a%,c% :PRINT CHR$(2) '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'AT'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'AT' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) AT is function
 (function_return_type) 
function_return_type: 'AT' =>v
 (function_return_type) 
function_return_type: 'AT' =>17
process_token: 'AT' t=>v
 Push:'AT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: AT type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: AT type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' a%,c% :PRINT CHR$(2) '

   (check_eitem) check_eitem: 'a%,c% :PRINT CHR$(2) '

    (check_operator) check_operator: a%,c% :PRINT CHR$(2) 

     (check_literal) check_literal:lit=' ,' idx=5 'a%,c% :PRINT CHR$(2) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=5 'a%,c% :PRINT CHR$(2) '
     (check_literal)   ',' != 'a'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'a%,c% :PRINT CHR$(2) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=5 'a%,c% :PRINT CHR$(2) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=5 'a%,c% :PRINT CHR$(2) '
     (check_literal)   '%' != 'a'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=5 'a%,c% :PRINT CHR$(2) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=5 'a%,c% :PRINT CHR$(2) '
     (check_literal)   '"' != 'a'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'a%,c% :PRINT CHR$(2) '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'a%,c% :PRINT CHR$(2) ':
      (check_vname) check_vname ret1 '%,c% :PRINT CHR$(2) ':
     (check_variable) check_variable: '%,c% :PRINT CHR$(2) '
     (check_variable) check_variable: Ary test ',c% :PRINT CHR$(2) '

      (check_literal) check_literal:lit='(' idx=7 ',c% :PRINT CHR$(2) '
      (check_literal) check_literal:After drop space:'(' idx=7 ',c% :PRINT CHR$(2) '
      (check_literal)   '(' != ','
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator: a%,c% :PRINT CHR$(2) 

    (check_literal) check_literal:lit=' ,' idx=5 'a%,c% :PRINT CHR$(2) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=5 'a%,c% :PRINT CHR$(2) '
    (check_literal)   ',' != 'a'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'a%,c% :PRINT CHR$(2) '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=5 'a%,c% :PRINT CHR$(2) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=5 'a%,c% :PRINT CHR$(2) '
    (check_literal)   '%' != 'a'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=5 'a%,c% :PRINT CHR$(2) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=5 'a%,c% :PRINT CHR$(2) '
    (check_literal)   '"' != 'a'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'a%,c% :PRINT CHR$(2) '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'a%,c% :PRINT CHR$(2) ':
     (check_vname) check_vname ret1 '%,c% :PRINT CHR$(2) ':
    (check_variable) check_variable: '%,c% :PRINT CHR$(2) '
    (check_variable) check_variable: Ary test ',c% :PRINT CHR$(2) '

     (check_literal) check_literal:lit='(' idx=7 ',c% :PRINT CHR$(2) '
     (check_literal) check_literal:After drop space:'(' idx=7 ',c% :PRINT CHR$(2) '
     (check_literal)   '(' != ','
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1

  (scan_atom) scan_atom:

   (check_literal) check_literal:lit=' %' idx=5 'a%,c% :PRINT CHR$(2) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=5 'a%,c% :PRINT CHR$(2) '
   (check_literal)   '%' != 'a'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=5 'a%,c% :PRINT CHR$(2) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=5 'a%,c% :PRINT CHR$(2) '
   (check_literal)   '"' != 'a'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'a%,c% :PRINT CHR$(2) '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'a%,c% :PRINT CHR$(2) ':
    (check_vname) check_vname ret1 '%,c% :PRINT CHR$(2) ':
   (check_variable) check_variable: '%,c% :PRINT CHR$(2) '
   (check_variable) check_variable: Ary test ',c% :PRINT CHR$(2) '

    (check_literal) check_literal:lit='(' idx=7 ',c% :PRINT CHR$(2) '
    (check_literal) check_literal:After drop space:'(' idx=7 ',c% :PRINT CHR$(2) '
    (check_literal)   '(' != ','
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'a%,c% :PRINT CHR$(2) '
   (scan_vname) scan_vname: ret1 'a'
  (scan_variable) scan_variable: '%,c% :PRINT CHR$(2) ' vname='a'
  (scan_variable) scan_variable: Ary test ',c% :PRINT CHR$(2) '

   (check_literal) check_literal:lit='(' idx=7 ',c% :PRINT CHR$(2) '
   (check_literal) check_literal:After drop space:'(' idx=7 ',c% :PRINT CHR$(2) '
   (check_literal)   '(' != ','
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='a%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'a%' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:a% is not function
token_is_variable: tok:'a%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:a% is not function
 (init_get_name) 
init_get_name:'a%'
 (init_get_name) 
init_get_name:'a%'
 (get_name) 
get_name:gn:'a%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,(U )] i i a%
 (print_var_info) 
VAR INFO: '                a%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
 (scan_atom) scan_atom:ret1
(scan_expression) n commas now:0

 (check_eitem) check_eitem: ',c% :PRINT CHR$(2) '

  (check_operator) check_operator: ,c% :PRINT CHR$(2) 

   (check_literal) check_literal:lit=' ,' idx=7 ',c% :PRINT CHR$(2) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=7 ',c% :PRINT CHR$(2) '
   (check_literal) check_literal:After while():c% :PRINT CHR$(2) 
   (check_literal) check_literal:ret1 
  (check_operator) ret1:is comma: 0
 (check_eitem) check_eitem:ret1 comma:1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: ,c% :PRINT CHR$(2) 

   (check_literal) check_literal:lit=' ,' idx=7 ',c% :PRINT CHR$(2) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=7 ',c% :PRINT CHR$(2) '
   (check_literal) check_literal:After while():c% :PRINT CHR$(2) 
   (check_literal) check_literal:ret1 
  (check_operator) ret1:is comma: 0

  (scan_operator) scan_operator: ',c% :PRINT CHR$(2) '

   (check_literal) check_literal:lit=' ,' idx=7 ',c% :PRINT CHR$(2) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=7 ',c% :PRINT CHR$(2) '
   (check_literal) check_literal:After while():c% :PRINT CHR$(2) 
   (check_literal) check_literal:ret1 

   (scan_literal) scan_literal:lit=' ,' ',c% :PRINT CHR$(2) '
   (scan_literal) scan_literal:After drop space:',c% :PRINT CHR$(2) '
   (scan_literal) scan_literal:while loop:,c% :PRINT CHR$(2) 
   Frst:0 T:',' exptype:i
(output_sub_start)
   (scan_literal) scan_literal:ret1
  (scan_operator) ret1:is comma: 1
 (scan_eitem) Is comma;1
 (scan_expression) n commas now:1

  (check_eitem) check_eitem: 'c% :PRINT CHR$(2) '

   (check_operator) check_operator: c% :PRINT CHR$(2) 

    (check_literal) check_literal:lit=' ,' idx=8 'c% :PRINT CHR$(2) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=8 'c% :PRINT CHR$(2) '
    (check_literal)   ',' != 'c'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'c% :PRINT CHR$(2) '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=8 'c% :PRINT CHR$(2) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=8 'c% :PRINT CHR$(2) '
    (check_literal)   '%' != 'c'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=8 'c% :PRINT CHR$(2) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=8 'c% :PRINT CHR$(2) '
    (check_literal)   '"' != 'c'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'c% :PRINT CHR$(2) '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'c% :PRINT CHR$(2) ':
     (check_vname) check_vname ret1 '% :PRINT CHR$(2) ':
    (check_variable) check_variable: '% :PRINT CHR$(2) '
    (check_variable) check_variable: Ary test ' :PRINT CHR$(2) '

     (check_literal) check_literal:lit='(' idx=10 ' :PRINT CHR$(2) '
     (check_literal) check_literal:After drop space:'(' idx=10 ' :PRINT CHR$(2) '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1
 (check_eitem) check_eitem:ret1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: c% :PRINT CHR$(2) 

   (check_literal) check_literal:lit=' ,' idx=8 'c% :PRINT CHR$(2) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=8 'c% :PRINT CHR$(2) '
   (check_literal)   ',' != 'c'
   (check_literal) check_literal: ret0
  (check_operator) ret0:is comma: 0

  (check_function) check_function: 'c% :PRINT CHR$(2) '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=8 'c% :PRINT CHR$(2) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=8 'c% :PRINT CHR$(2) '
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=8 'c% :PRINT CHR$(2) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=8 'c% :PRINT CHR$(2) '
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c% :PRINT CHR$(2) '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'c% :PRINT CHR$(2) ':
    (check_vname) check_vname ret1 '% :PRINT CHR$(2) ':
   (check_variable) check_variable: '% :PRINT CHR$(2) '
   (check_variable) check_variable: Ary test ' :PRINT CHR$(2) '

    (check_literal) check_literal:lit='(' idx=10 ' :PRINT CHR$(2) '
    (check_literal) check_literal:After drop space:'(' idx=10 ' :PRINT CHR$(2) '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) check_atom:ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=8 'c% :PRINT CHR$(2) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=8 'c% :PRINT CHR$(2) '
  (check_literal)   '%' != 'c'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=8 'c% :PRINT CHR$(2) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=8 'c% :PRINT CHR$(2) '
  (check_literal)   '"' != 'c'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) check_float: ret0

   (check_integer) check_integer: 'c% :PRINT CHR$(2) '
   (check_integer) check_integer:ret0
  (check_number) check_number: ret0

  (check_variable) check_variable:

   (check_vname) check_vname 'c% :PRINT CHR$(2) ':
   (check_vname) check_vname ret1 '% :PRINT CHR$(2) ':
  (check_variable) check_variable: '% :PRINT CHR$(2) '
  (check_variable) check_variable: Ary test ' :PRINT CHR$(2) '

   (check_literal) check_literal:lit='(' idx=10 ' :PRINT CHR$(2) '
   (check_literal) check_literal:After drop space:'(' idx=10 ' :PRINT CHR$(2) '
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) scan_variable:

  (scan_vname) scan_vname: 'c% :PRINT CHR$(2) '
  (scan_vname) scan_vname: ret1 'c'
 (scan_variable) scan_variable: '% :PRINT CHR$(2) ' vname='c'
 (scan_variable) scan_variable: Ary test ' :PRINT CHR$(2) '

  (check_literal) check_literal:lit='(' idx=10 ' :PRINT CHR$(2) '
  (check_literal) check_literal:After drop space:'(' idx=10 ' :PRINT CHR$(2) '
  (check_literal)   '(' != ' '
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='c%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'c%' exptype:U
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:c% is not function
token_is_variable: tok:'c%'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:c% is not function
(init_get_name) 
init_get_name:'c%'
(init_get_name) 
init_get_name:'c%'
(get_name) 
get_name:gn:'c%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,(U )] i i c%
(print_var_info) 
VAR INFO: '                c%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
(scan_atom) scan_atom:ret1
(scan_expression) n commas now:1

 (check_eitem) check_eitem: ' :PRINT CHR$(2) '

  (check_operator) check_operator:  :PRINT CHR$(2) 

   (check_literal) check_literal:lit=' ,' idx=11 ':PRINT CHR$(2) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=11 ':PRINT CHR$(2) '
   (check_literal)   ',' != ':'
   (check_literal) check_literal: ret0
  (check_operator) ret0:is comma: 0

  (check_function) check_function: ':PRINT CHR$(2) '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=10 ' :PRINT CHR$(2) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=11 ':PRINT CHR$(2) '
   (check_literal)   '%' != ':'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=10 ' :PRINT CHR$(2) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=11 ':PRINT CHR$(2) '
   (check_literal)   '"' != ':'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: ':PRINT CHR$(2) '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname ':PRINT CHR$(2) ':
    (check_vname) check_vname ret0 ':PRINT CHR$(2) ':
   (check_variable) check_variable:ret0 
  (check_atom) check_atom:ret1

  (check_sub_expr) check_sub_expr:

   (check_literal) check_literal:lit=' (' idx=10 ' :PRINT CHR$(2) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'(' idx=11 ':PRINT CHR$(2) '
   (check_literal)   '(' != ':'
   (check_literal) check_literal: ret0
  (check_sub_expr) check_sub_expr: ret0
 (check_eitem) check_eitem:ret0
(scan_expression) scan_expression: ret1 ' :PRINT CHR$(2) ' commas:1
(scan_command) scan_command: ret1 =>'AT'
(scan_command) 
ENDEXP
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: AT type:17
(op_stack_print) 
------------------

(  output_sub_end)
(token_is_function) 
token_is_function:
(token_is_function) AT is function
Pop 5
Pop 'AT'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_function) [i,(U )] v v AT
(  output_sub_end)
Finalise stack
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'a%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? '' nidx:-1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'c%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'AT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
 BE:

Type Check Stack (0)

 BE:a%
type_check_stack_push: 'a%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'a%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'a%' type:i (0)
 BE:

Type Check Stack (1)

000: 'a%' type:i (0)
 BE:c%
type_check_stack_push: 'c%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'a%' type:0
(type_check_stack_print) 
001: 'c%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'a%' type:i (0)
001: 'c%' type:i (0)
 BE:

Type Check Stack (2)

000: 'a%' type:i (0)
001: 'c%' type:i (0)
 BE:AT
FN: 2 args
(function_return_type) 
function_return_type: 'AT' =>v
(function_return_type) 
function_return_type: 'AT' =>17
ret_type;17 v
typecheck_expression:Ret type of AT : v
type_check_stack_pop: 'c%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'a%' type:0
(type_check_stack_print) 
------------------

FN ARG 1 ri c% 0(i)  Arg ok
type_check_stack_pop: 'a%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (0)

(type_check_stack_print) 
------------------

FN ARG 0 ri a% 0(i)  Arg ok
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:17
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'a%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? '' nidx:-1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'c%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'AT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'a%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     i rq:i 'c%'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_FUNCTION     v rq:v 'AT'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
(process_expression_types) 
==INFIX==

Var: a% ary:0 NumIdx:0
infix_stack_push: 'a%'
Var: c% ary:0 NumIdx:0
infix_stack_push: 'c%'
infix_stack_pop: 'c%'
infix_stack_pop: 'a%'
infix_stack_push: 'AT(a% c% )'
infix_stack_pop: 'AT(a% c% )'
(process_expression_types) ==AT(a% c% )==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_START    U rq:?   0:
(    output_qcode) N4 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_FUNCTION     v rq:v AT  0:
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:i   0:

 (check_literal) check_literal:lit=':' idx=11 ':PRINT CHR$(2) '
 (check_literal) check_literal:After drop space:':' idx=11 ':PRINT CHR$(2) '
 (check_literal) check_literal:After while():PRINT CHR$(2) 
 (check_literal) check_literal:ret1 

 (scan_literal) scan_literal:lit=':' 'PRINT CHR$(2) '
 (scan_literal) scan_literal:After drop space:'PRINT CHR$(2) '
 (scan_literal) scan_literal:while loop:PRINT CHR$(2) 
 (scan_literal) scan_literal:ret1

 (check_line) check_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'PRINT CHR$(2) ':
    (check_vname) check_vname ret1 ' CHR$(2) ':
   (check_variable) check_variable: ' CHR$(2) '
   (check_variable) check_variable: Ary test ' CHR$(2) '

    (check_literal) check_literal:lit='(' idx=17 ' CHR$(2) '
    (check_literal) check_literal:After drop space:'(' idx=17 ' CHR$(2) '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=17 ' CHR$(2) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=18 'CHR$(2) '
  (check_literal)   '=' != 'C'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'PRINT CHR$(2) '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'PRINT'
(check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=9, ' CHR$(2) '
========================================================
  AT a%,c% :PRINT CHR$(2) 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'PRINT CHR$(2) ':
    (check_vname) check_vname ret1 ' CHR$(2) ':
   (check_variable) check_variable: ' CHR$(2) '
   (check_variable) check_variable: Ary test ' CHR$(2) '

    (check_literal) check_literal:lit='(' idx=17 ' CHR$(2) '
    (check_literal) check_literal:After drop space:'(' idx=17 ' CHR$(2) '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=17 ' CHR$(2) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=18 'CHR$(2) '
  (check_literal)   '=' != 'C'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'PRINT CHR$(2) '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'PRINT'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'PRINT' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) PRINT is function
 (function_return_type) 
function_return_type: 'PRINT' =>v
 (function_return_type) 
function_return_type: 'PRINT' =>17
process_token: 'PRINT' t=>v
 Push:'PRINT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' CHR$(2) '

   (check_eitem) check_eitem: 'CHR$(2) '

    (check_operator) check_operator: CHR$(2) 

     (check_literal) check_literal:lit=' ,' idx=18 'CHR$(2) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=18 'CHR$(2) '
     (check_literal)   ',' != 'C'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'CHR$(2) '
    (check_function) check_function: ret1 Found fn=>'CHR$'
   (check_eitem) check_eitem:ret1

   (scan_eitem) scan_eitem:

    (check_operator) check_operator: CHR$(2) 

     (check_literal) check_literal:lit=' ,' idx=18 'CHR$(2) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=18 'CHR$(2) '
     (check_literal)   ',' != 'C'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'CHR$(2) '
    (check_function) check_function: ret1 Found fn=>'CHR$'

    (scan_function) scan_function:
   Frst:0 T:'CHR$' exptype:U
    (token_is_function) 
token_is_function:
    (token_is_function) CHR$ is function
    (function_return_type) 
function_return_type: 'CHR$' =>s
    (function_return_type) 
function_return_type: 'CHR$' =>2
process_token: 'CHR$' t=>s
 Push:'CHR$'
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (3)

    (op_stack_print) 
000: PRINT type:17
    (op_stack_print) 
001: ( type:16
    (op_stack_print) 
002: CHR$ type:2
    (op_stack_print) 
------------------

    (scan_expression) n commas now:0

     (check_eitem) check_eitem: '(2) '

      (check_operator) check_operator: (2) 

       (check_literal) check_literal:lit=' ,' idx=22 '(2) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=22 '(2) '
       (check_literal)   ',' != '('
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: '(2) '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=22 '(2) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=22 '(2) '
       (check_literal)   '%' != '('
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=22 '(2) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=22 '(2) '
       (check_literal)   '"' != '('
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '(2) '
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname '(2) ':
        (check_vname) check_vname ret0 '(2) ':
       (check_variable) check_variable:ret0 
      (check_atom) check_atom:ret1

      (check_sub_expr) check_sub_expr:

       (check_literal) check_literal:lit=' (' idx=22 '(2) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'(' idx=22 '(2) '
       (check_literal) check_literal:After while():2) 
       (check_literal) check_literal:ret1 
      (check_sub_expr) check_sub_expr: ret1
     (check_eitem) check_eitem:ret1

     (scan_eitem) scan_eitem:

      (check_operator) check_operator: (2) 

       (check_literal) check_literal:lit=' ,' idx=22 '(2) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=22 '(2) '
       (check_literal)   ',' != '('
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: '(2) '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=22 '(2) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=22 '(2) '
       (check_literal)   '%' != '('
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=22 '(2) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=22 '(2) '
       (check_literal)   '"' != '('
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '(2) '
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname '(2) ':
        (check_vname) check_vname ret0 '(2) ':
       (check_variable) check_variable:ret0 
      (check_atom) check_atom:ret1

      (check_sub_expr) check_sub_expr:

       (check_literal) check_literal:lit=' (' idx=22 '(2) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'(' idx=22 '(2) '
       (check_literal) check_literal:After while():2) 
       (check_literal) check_literal:ret1 
      (check_sub_expr) check_sub_expr: ret1

      (scan_sub_expr) scan_sub_expr:

       (scan_literal) scan_literal:lit=' (' '(2) '
       (scan_literal) scan_literal:After drop space:'(2) '
       (scan_literal) scan_literal:while loop:(2) 
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (4)

       (op_stack_print) 
000: PRINT type:17
       (op_stack_print) 
001: ( type:16
       (op_stack_print) 
002: CHR$ type:2
       (op_stack_print) 
003: ( type:16
       (op_stack_print) 
------------------

       (scan_literal) scan_literal:ret1
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (5)

      (op_stack_print) 
000: PRINT type:17
      (op_stack_print) 
001: ( type:16
      (op_stack_print) 
002: CHR$ type:2
      (op_stack_print) 
003: ( type:16
      (op_stack_print) 
004: ( type:16
      (op_stack_print) 
------------------


       (scan_expression) scan_expression: '2) '

        (check_eitem) check_eitem: '2) '

         (check_operator) check_operator: 2) 

          (check_literal) check_literal:lit=' ,' idx=23 '2) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:',' idx=23 '2) '
          (check_literal)   ',' != '2'
          (check_literal) check_literal: ret0
         (check_operator) ret0:is comma: 0

         (check_function) check_function: '2) '
         (check_function) check_function: ret0

         (check_atom) check_atom:

          (check_literal) check_literal:lit=' %' idx=23 '2) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=23 '2) '
          (check_literal)   '%' != '2'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=23 '2) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=23 '2) '
          (check_literal)   '"' != '2'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '2) '
           (check_integer) check_integer:ret1
          (check_number) check_number: ret1
         (check_atom) check_atom:ret1
        (check_eitem) check_eitem:ret1

        (scan_eitem) scan_eitem:

         (check_operator) check_operator: 2) 

          (check_literal) check_literal:lit=' ,' idx=23 '2) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:',' idx=23 '2) '
          (check_literal)   ',' != '2'
          (check_literal) check_literal: ret0
         (check_operator) ret0:is comma: 0

         (check_function) check_function: '2) '
         (check_function) check_function: ret0

         (check_atom) check_atom:

          (check_literal) check_literal:lit=' %' idx=23 '2) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=23 '2) '
          (check_literal)   '%' != '2'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=23 '2) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=23 '2) '
          (check_literal)   '"' != '2'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '2) '
           (check_integer) check_integer:ret1
          (check_number) check_number: ret1
         (check_atom) check_atom:ret1

         (scan_atom) scan_atom:

          (check_literal) check_literal:lit=' %' idx=23 '2) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=23 '2) '
          (check_literal)   '%' != '2'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=23 '2) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=23 '2) '
          (check_literal)   '"' != '2'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '2) '
           (check_integer) check_integer:ret1
          (check_number) check_number: ret1

          (scan_number) scan_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '2) '
           (check_integer) check_integer:ret1

           (scan_integer) scan_integer:
           (scan_integer) scan_integer:ret1
   Frst:0 T:'2' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U U U )] i i 2
          (scan_integer) scan_integer:ret1  2
         (scan_atom) scan_atom:ret1
        (scan_expression) n commas now:0

         (check_eitem) check_eitem: ') '

          (check_operator) check_operator: ) 

           (check_literal) check_literal:lit=' ,' idx=24 ') '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:',' idx=24 ') '
           (check_literal)   ',' != ')'
           (check_literal) check_literal: ret0
          (check_operator) ret0:is comma: 0

          (check_function) check_function: ') '
          (check_function) check_function: ret0

          (check_atom) check_atom:

           (check_literal) check_literal:lit=' %' idx=24 ') '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'%' idx=24 ') '
           (check_literal)   '%' != ')'
           (check_literal) check_literal: ret0

           (check_literal) check_literal:lit=' "' idx=24 ') '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'"' idx=24 ') '
           (check_literal)   '"' != ')'
           (check_literal) check_literal: ret0

           (check_number) check_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret0

            (check_integer) check_integer: ') '
            (check_integer) check_integer:ret0
           (check_number) check_number: ret0

           (check_variable) check_variable:

            (check_vname) check_vname ') ':
            (check_vname) check_vname ret0 ') ':
           (check_variable) check_variable:ret0 
          (check_atom) check_atom:ret1

          (check_sub_expr) check_sub_expr:

           (check_literal) check_literal:lit=' (' idx=24 ') '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'(' idx=24 ') '
           (check_literal)   '(' != ')'
           (check_literal) check_literal: ret0
          (check_sub_expr) check_sub_expr: ret0
         (check_eitem) check_eitem:ret0
        (scan_expression) scan_expression: ret1 ') ' commas:0

        (scan_literal) scan_literal:lit=' )' ') '
        (scan_literal) scan_literal:After drop space:') '
        (scan_literal) scan_literal:while loop:) 
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
        (op_stack_print) 
------------------
        (op_stack_print) 
Operator Stack     (4)

        (op_stack_print) 
000: PRINT type:17
        (op_stack_print) 
001: ( type:16
        (op_stack_print) 
002: CHR$ type:2
        (op_stack_print) 
003: ( type:16
        (op_stack_print) 
------------------

(  output_sub_end)
        (token_is_function) 
token_is_function:
        (token_is_function) 
token_is_function:( is not function
(  output_sub_end)
        (scan_literal) scan_literal:ret1
   Frst:0 T:')' exptype:U
Pop 4
Pop '('
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (3)

       (op_stack_print) 
000: PRINT type:17
       (op_stack_print) 
001: ( type:16
       (op_stack_print) 
002: CHR$ type:2
       (op_stack_print) 
------------------

(  output_sub_end)
       (token_is_function) 
token_is_function:
       (token_is_function) CHR$ is function
Pop 5
Pop 'CHR$'
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (2)

       (op_stack_print) 
000: PRINT type:17
       (op_stack_print) 
001: ( type:16
       (op_stack_print) 
------------------

( output_function) [U,(U U )] s s CHR$
(  output_sub_end)
       (scan_sub_expr) scan_sub_expr:ret1
      (scan_expression) n commas now:0

       (check_eitem) check_eitem: ' '

        (check_operator) check_operator:  

         (check_literal) check_literal:lit=' ,' idx=26 ''
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:',' idx=26 ''
         (check_literal) check_literal  ret0 Empty test string
        (check_operator) ret0:is comma: 0

        (check_function) check_function: ''
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=25 ' '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=26 ''
         (check_literal) check_literal  ret0 Empty test string

         (check_literal) check_literal:lit=' "' idx=25 ' '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=26 ''
         (check_literal) check_literal  ret0 Empty test string

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: ''
          (check_integer) check_integer:ret0
         (check_number) check_number: ret0

         (check_variable) check_variable:

          (check_vname) check_vname '':
          (check_vname) check_vname ret0 '':
         (check_variable) check_variable:ret0 
        (check_atom) check_atom:ret1

        (check_sub_expr) check_sub_expr:

         (check_literal) check_literal:lit=' (' idx=25 ' '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'(' idx=26 ''
         (check_literal) check_literal  ret0 Empty test string
        (check_sub_expr) check_sub_expr: ret0
       (check_eitem) check_eitem:ret0
      (scan_expression) scan_expression: ret1 ' ' commas:0
     (scan_command) scan_command: ret1 =>'PRINT'
    (scan_command) 
ENDEXP
   Frst:0 T:')' exptype:U
Pop 4
Pop '('
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (1)

    (op_stack_print) 
000: PRINT type:17
    (op_stack_print) 
------------------

(  output_sub_end)
    (token_is_function) 
token_is_function:
    (token_is_function) PRINT is function
Pop 5
Pop 'PRINT'
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (0)

    (op_stack_print) 
------------------

( output_function) [U,(U )] v v PRINT
(  output_sub_end)
Finalise stack
    (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '2' nidx:24  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     s rq:s 'CHR$' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
 BE:

Type Check Stack (0)

 BE:

Type Check Stack (0)

 BE:

Type Check Stack (0)

 BE:2
type_check_stack_push: '2'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (1)

    (type_check_stack_print) 
000: '2' type:0
    (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '2' type:i (0)
 BE:

Type Check Stack (1)

000: '2' type:i (0)
 BE:

Type Check Stack (1)

000: '2' type:i (0)
 BE:

Type Check Stack (1)

000: '2' type:i (0)
 BE:CHR$
FN: 1 args
    (function_return_type) 
function_return_type: 'CHR$' =>s
    (function_return_type) 
function_return_type: 'CHR$' =>2
ret_type;2 s
typecheck_expression:Ret type of CHR$ : s
type_check_stack_pop: '2'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (0)

    (type_check_stack_print) 
------------------

FN ARG 0 ri 2 0(i)  Arg ok
type_check_stack_push: '000'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (1)

    (type_check_stack_print) 
000: '000' type:2
    (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:s (2)
 BE:

Type Check Stack (1)

000: '000' type:s (2)
 BE:

Type Check Stack (1)

000: '000' type:s (2)
 BE:PRINT
FN: 1 args
    (function_return_type) 
function_return_type: 'PRINT' =>v
    (function_return_type) 
function_return_type: 'PRINT' =>17
ret_type;17 v
typecheck_expression:Ret type of PRINT : v
type_check_stack_pop: '000'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (0)

    (type_check_stack_print) 
------------------

FN ARG 0 ri 000 2(s)  Arg not OK
type_check_stack_push: '000'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (1)

    (type_check_stack_print) 
000: '000' type:17
    (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '2' nidx:24  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     s rq:s 'CHR$' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_FUNCTION     s rq:s 'CHR$'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
(dump_exp_buffer2) N12 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
    (process_expression_types) 
==INFIX==

infix_stack_push: '2'
infix_stack_pop: '2'
infix_stack_push: 'CHR$(2 )'
infix_stack_pop: 'CHR$(2 )'
infix_stack_push: 'PRINT(CHR$(2 ) )'
infix_stack_pop: 'PRINT(CHR$(2 ) )'
    (process_expression_types) ==PRINT(CHR$(2 ) )==
    (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N4 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N8 EXP_BUFF_ID_FUNCTION     s rq:s CHR$  0:
(    output_qcode) N9 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N10 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N11 EXP_BUFF_ID_FUNCTION     v rq:v PRINT  0:
(    output_qcode) N12 EXP_BUFF_ID_SUB_END      U rq:i   0:

     (check_literal) check_literal:lit=':' idx=26 ''
     (check_literal) check_literal:After drop space:':' idx=26 ''
     (check_literal) check_literal  ret0 Empty test string
    (translate_file) 
cline scanned OK
**********************************************
**  AT a%,c1% :PRINT CHR$(2) :BEEP b%,10*b% **
**********************************************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'AT a%,c1% :PRINT CHR$(2) :BEEP b%,10*b% ':
     (check_vname) check_vname ret1 ' a%,c1% :PRINT CHR$(2) :BEEP b%,10*b% ':
    (check_variable) check_variable: ' a%,c1% :PRINT CHR$(2) :BEEP b%,10*b% '
    (check_variable) check_variable: Ary test ' a%,c1% :PRINT CHR$(2) :BEEP b%,10*b% '

     (check_literal) check_literal:lit='(' idx=4 ' a%,c1% :PRINT CHR$(2) :BEEP b%,10*b% '
     (check_literal) check_literal:After drop space:'(' idx=4 ' a%,c1% :PRINT CHR$(2) :BEEP b%,10*b% '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=4 ' a%,c1% :PRINT CHR$(2) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=5 'a%,c1% :PRINT CHR$(2) :BEEP b%,10*b% '
   (check_literal)   '=' != 'a'
   (check_literal) check_literal: ret0
  (check_assignment) check_assignment:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) check_textlabel: 'AT a%,c1% :PRINT CHR$(2) :BEEP b%,10*b% '
   (check_textlabel) check_textlabel:ret0
  (check_proc_call) check_proc_call:ret0

  (check_command) check_command:
  (check_command) check_command: ret1 found=> 'AT'
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=38, ' a%,c1% :PRINT CHR$(2) :BEEP b%,10*b% '
========================================================
  AT a%,c1% :PRINT CHR$(2) :BEEP b%,10*b% 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'AT a%,c1% :PRINT CHR$(2) :BEEP b%,10*b% ':
    (check_vname) check_vname ret1 ' a%,c1% :PRINT CHR$(2) :BEEP b%,10*b% ':
   (check_variable) check_variable: ' a%,c1% :PRINT CHR$(2) :BEEP b%,10*b% '
   (check_variable) check_variable: Ary test ' a%,c1% :PRINT CHR$(2) :BEEP b%,10*b% '

    (check_literal) check_literal:lit='(' idx=4 ' a%,c1% :PRINT CHR$(2) :BEEP b%,10*b% '
    (check_literal) check_literal:After drop space:'(' idx=4 ' a%,c1% :PRINT CHR$(2) :BEEP b%,10*b% '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=4 ' a%,c1% :PRINT CHR$(2) :BEEP b%,10*b% '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=5 'a%,c1% :PRINT CHR$(2) :BEEP b%,10*b% '
  (check_literal)   '=' != 'a'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'AT a%,c1% :PRINT CHR$(2) :BEEP b%,10*b% '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'AT'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'AT' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) AT is function
 (function_return_type) 
function_return_type: 'AT' =>v
 (function_return_type) 
function_return_type: 'AT' =>17
process_token: 'AT' t=>v
 Push:'AT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: AT type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: AT type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' a%,c1% :PRINT CHR$(2) :BEEP b%,10*b% '

   (check_eitem) check_eitem: 'a%,c1% :PRINT CHR$(2) :BEEP b%,10*b% '

    (check_operator) check_operator: a%,c1% :PRINT CHR$(2) :BEEP b%,10*b% 

     (check_literal) check_literal:lit=' ,' idx=5 'a%,c1% :PRINT CHR$(2) :BEEP b%,10*b% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=5 'a%,c1% :PRINT CHR$(2) :BEEP b%,10*b% '
     (check_literal)   ',' != 'a'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'a%,c1% :PRINT CHR$(2) :BEEP b%,10*b% '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=5 'a%,c1% :PRINT CHR$(2) :BEEP b%,10*b% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=5 'a%,c1% :PRINT CHR$(2) :BEEP b%,10*b% '
     (check_literal)   '%' != 'a'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=5 'a%,c1% :PRINT CHR$(2) :BEEP b%,10*b% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=5 'a%,c1% :PRINT CHR$(2) :BEEP b%,10*b% '
     (check_literal)   '"' != 'a'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'a%,c1% :PRINT CHR$(2) :BEEP b%,10*b% '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'a%,c1% :PRINT CHR$(2) :BEEP b%,10*b% ':
      (check_vname) check_vname ret1 '%,c1% :PRINT CHR$(2) :BEEP b%,10*b% ':
     (check_variable) check_variable: '%,c1% :PRINT CHR$(2) :BEEP b%,10*b% '
     (check_variable) check_variable: Ary test ',c1% :PRINT CHR$(2) :BEEP b%,10*b% '

      (check_literal) check_literal:lit='(' idx=7 ',c1% :PRINT CHR$(2) :BEEP b%,10*b% '
      (check_literal) check_literal:After drop space:'(' idx=7 ',c1% :PRINT CHR$(2) :BEEP b%,10*b% '
      (check_literal)   '(' != ','
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator: a%,c1% :PRINT CHR$(2) :BEEP b%,10*b% 

    (check_literal) check_literal:lit=' ,' idx=5 'a%,c1% :PRINT CHR$(2) :BEEP b%,10*b% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=5 'a%,c1% :PRINT CHR$(2) :BEEP b%,10*b% '
    (check_literal)   ',' != 'a'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'a%,c1% :PRINT CHR$(2) :BEEP b%,10*b% '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=5 'a%,c1% :PRINT CHR$(2) :BEEP b%,10*b% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=5 'a%,c1% :PRINT CHR$(2) :BEEP b%,10*b% '
    (check_literal)   '%' != 'a'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=5 'a%,c1% :PRINT CHR$(2) :BEEP b%,10*b% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=5 'a%,c1% :PRINT CHR$(2) :BEEP b%,10*b% '
    (check_literal)   '"' != 'a'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'a%,c1% :PRINT CHR$(2) :BEEP b%,10*b% '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'a%,c1% :PRINT CHR$(2) :BEEP b%,10*b% ':
     (check_vname) check_vname ret1 '%,c1% :PRINT CHR$(2) :BEEP b%,10*b% ':
    (check_variable) check_variable: '%,c1% :PRINT CHR$(2) :BEEP b%,10*b% '
    (check_variable) check_variable: Ary test ',c1% :PRINT CHR$(2) :BEEP b%,10*b% '

     (check_literal) check_literal:lit='(' idx=7 ',c1% :PRINT CHR$(2) :BEEP b%,10*b% '
     (check_literal) check_literal:After drop space:'(' idx=7 ',c1% :PRINT CHR$(2) :BEEP b%,10*b% '
     (check_literal)   '(' != ','
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1

  (scan_atom) scan_atom:

   (check_literal) check_literal:lit=' %' idx=5 'a%,c1% :PRINT CHR$(2) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=5 'a%,c1% :PRINT CHR$(2) :BEEP b%,10*b% '
   (check_literal)   '%' != 'a'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=5 'a%,c1% :PRINT CHR$(2) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=5 'a%,c1% :PRINT CHR$(2) :BEEP b%,10*b% '
   (check_literal)   '"' != 'a'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'a%,c1% :PRINT CHR$(2) :BEEP b%,10*b% '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'a%,c1% :PRINT CHR$(2) :BEEP b%,10*b% ':
    (check_vname) check_vname ret1 '%,c1% :PRINT CHR$(2) :BEEP b%,10*b% ':
   (check_variable) check_variable: '%,c1% :PRINT CHR$(2) :BEEP b%,10*b% '
   (check_variable) check_variable: Ary test ',c1% :PRINT CHR$(2) :BEEP b%,10*b% '

    (check_literal) check_literal:lit='(' idx=7 ',c1% :PRINT CHR$(2) :BEEP b%,10*b% '
    (check_literal) check_literal:After drop space:'(' idx=7 ',c1% :PRINT CHR$(2) :BEEP b%,10*b% '
    (check_literal)   '(' != ','
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'a%,c1% :PRINT CHR$(2) :BEEP b%,10*b% '
   (scan_vname) scan_vname: ret1 'a'
  (scan_variable) scan_variable: '%,c1% :PRINT CHR$(2) :BEEP b%,10*b% ' vname='a'
  (scan_variable) scan_variable: Ary test ',c1% :PRINT CHR$(2) :BEEP b%,10*b% '

   (check_literal) check_literal:lit='(' idx=7 ',c1% :PRINT CHR$(2) :BEEP b%,10*b% '
   (check_literal) check_literal:After drop space:'(' idx=7 ',c1% :PRINT CHR$(2) :BEEP b%,10*b% '
   (check_literal)   '(' != ','
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='a%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'a%' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:a% is not function
token_is_variable: tok:'a%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:a% is not function
 (init_get_name) 
init_get_name:'a%'
 (init_get_name) 
init_get_name:'a%'
 (get_name) 
get_name:gn:'a%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,(U )] i i a%
 (print_var_info) 
VAR INFO: '                a%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
 (scan_atom) scan_atom:ret1
(scan_expression) n commas now:0

 (check_eitem) check_eitem: ',c1% :PRINT CHR$(2) :BEEP b%,10*b% '

  (check_operator) check_operator: ,c1% :PRINT CHR$(2) :BEEP b%,10*b% 

   (check_literal) check_literal:lit=' ,' idx=7 ',c1% :PRINT CHR$(2) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=7 ',c1% :PRINT CHR$(2) :BEEP b%,10*b% '
   (check_literal) check_literal:After while():c1% :PRINT CHR$(2) :BEEP b%,10*b% 
   (check_literal) check_literal:ret1 
  (check_operator) ret1:is comma: 0
 (check_eitem) check_eitem:ret1 comma:1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: ,c1% :PRINT CHR$(2) :BEEP b%,10*b% 

   (check_literal) check_literal:lit=' ,' idx=7 ',c1% :PRINT CHR$(2) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=7 ',c1% :PRINT CHR$(2) :BEEP b%,10*b% '
   (check_literal) check_literal:After while():c1% :PRINT CHR$(2) :BEEP b%,10*b% 
   (check_literal) check_literal:ret1 
  (check_operator) ret1:is comma: 0

  (scan_operator) scan_operator: ',c1% :PRINT CHR$(2) :BEEP b%,10*b% '

   (check_literal) check_literal:lit=' ,' idx=7 ',c1% :PRINT CHR$(2) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=7 ',c1% :PRINT CHR$(2) :BEEP b%,10*b% '
   (check_literal) check_literal:After while():c1% :PRINT CHR$(2) :BEEP b%,10*b% 
   (check_literal) check_literal:ret1 

   (scan_literal) scan_literal:lit=' ,' ',c1% :PRINT CHR$(2) :BEEP b%,10*b% '
   (scan_literal) scan_literal:After drop space:',c1% :PRINT CHR$(2) :BEEP b%,10*b% '
   (scan_literal) scan_literal:while loop:,c1% :PRINT CHR$(2) :BEEP b%,10*b% 
   Frst:0 T:',' exptype:i
(output_sub_start)
   (scan_literal) scan_literal:ret1
  (scan_operator) ret1:is comma: 1
 (scan_eitem) Is comma;1
 (scan_expression) n commas now:1

  (check_eitem) check_eitem: 'c1% :PRINT CHR$(2) :BEEP b%,10*b% '

   (check_operator) check_operator: c1% :PRINT CHR$(2) :BEEP b%,10*b% 

    (check_literal) check_literal:lit=' ,' idx=8 'c1% :PRINT CHR$(2) :BEEP b%,10*b% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=8 'c1% :PRINT CHR$(2) :BEEP b%,10*b% '
    (check_literal)   ',' != 'c'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'c1% :PRINT CHR$(2) :BEEP b%,10*b% '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=8 'c1% :PRINT CHR$(2) :BEEP b%,10*b% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=8 'c1% :PRINT CHR$(2) :BEEP b%,10*b% '
    (check_literal)   '%' != 'c'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=8 'c1% :PRINT CHR$(2) :BEEP b%,10*b% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=8 'c1% :PRINT CHR$(2) :BEEP b%,10*b% '
    (check_literal)   '"' != 'c'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'c1% :PRINT CHR$(2) :BEEP b%,10*b% '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'c1% :PRINT CHR$(2) :BEEP b%,10*b% ':
     (check_vname) check_vname ret1 '% :PRINT CHR$(2) :BEEP b%,10*b% ':
    (check_variable) check_variable: '% :PRINT CHR$(2) :BEEP b%,10*b% '
    (check_variable) check_variable: Ary test ' :PRINT CHR$(2) :BEEP b%,10*b% '

     (check_literal) check_literal:lit='(' idx=11 ' :PRINT CHR$(2) :BEEP b%,10*b% '
     (check_literal) check_literal:After drop space:'(' idx=11 ' :PRINT CHR$(2) :BEEP b%,10*b% '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1
 (check_eitem) check_eitem:ret1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: c1% :PRINT CHR$(2) :BEEP b%,10*b% 

   (check_literal) check_literal:lit=' ,' idx=8 'c1% :PRINT CHR$(2) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=8 'c1% :PRINT CHR$(2) :BEEP b%,10*b% '
   (check_literal)   ',' != 'c'
   (check_literal) check_literal: ret0
  (check_operator) ret0:is comma: 0

  (check_function) check_function: 'c1% :PRINT CHR$(2) :BEEP b%,10*b% '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=8 'c1% :PRINT CHR$(2) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=8 'c1% :PRINT CHR$(2) :BEEP b%,10*b% '
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=8 'c1% :PRINT CHR$(2) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=8 'c1% :PRINT CHR$(2) :BEEP b%,10*b% '
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c1% :PRINT CHR$(2) :BEEP b%,10*b% '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'c1% :PRINT CHR$(2) :BEEP b%,10*b% ':
    (check_vname) check_vname ret1 '% :PRINT CHR$(2) :BEEP b%,10*b% ':
   (check_variable) check_variable: '% :PRINT CHR$(2) :BEEP b%,10*b% '
   (check_variable) check_variable: Ary test ' :PRINT CHR$(2) :BEEP b%,10*b% '

    (check_literal) check_literal:lit='(' idx=11 ' :PRINT CHR$(2) :BEEP b%,10*b% '
    (check_literal) check_literal:After drop space:'(' idx=11 ' :PRINT CHR$(2) :BEEP b%,10*b% '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) check_atom:ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=8 'c1% :PRINT CHR$(2) :BEEP b%,10*b% '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=8 'c1% :PRINT CHR$(2) :BEEP b%,10*b% '
  (check_literal)   '%' != 'c'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=8 'c1% :PRINT CHR$(2) :BEEP b%,10*b% '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=8 'c1% :PRINT CHR$(2) :BEEP b%,10*b% '
  (check_literal)   '"' != 'c'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) check_float: ret0

   (check_integer) check_integer: 'c1% :PRINT CHR$(2) :BEEP b%,10*b% '
   (check_integer) check_integer:ret0
  (check_number) check_number: ret0

  (check_variable) check_variable:

   (check_vname) check_vname 'c1% :PRINT CHR$(2) :BEEP b%,10*b% ':
   (check_vname) check_vname ret1 '% :PRINT CHR$(2) :BEEP b%,10*b% ':
  (check_variable) check_variable: '% :PRINT CHR$(2) :BEEP b%,10*b% '
  (check_variable) check_variable: Ary test ' :PRINT CHR$(2) :BEEP b%,10*b% '

   (check_literal) check_literal:lit='(' idx=11 ' :PRINT CHR$(2) :BEEP b%,10*b% '
   (check_literal) check_literal:After drop space:'(' idx=11 ' :PRINT CHR$(2) :BEEP b%,10*b% '
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) scan_variable:

  (scan_vname) scan_vname: 'c1% :PRINT CHR$(2) :BEEP b%,10*b% '
  (scan_vname) scan_vname: ret1 'c1'
 (scan_variable) scan_variable: '% :PRINT CHR$(2) :BEEP b%,10*b% ' vname='c1'
 (scan_variable) scan_variable: Ary test ' :PRINT CHR$(2) :BEEP b%,10*b% '

  (check_literal) check_literal:lit='(' idx=11 ' :PRINT CHR$(2) :BEEP b%,10*b% '
  (check_literal) check_literal:After drop space:'(' idx=11 ' :PRINT CHR$(2) :BEEP b%,10*b% '
  (check_literal)   '(' != ' '
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='c1%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'c1%' exptype:U
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:c1% is not function
token_is_variable: tok:'c1%'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:c1% is not function
(init_get_name) 
init_get_name:'c1%'
(init_get_name) 
init_get_name:'c1%'
(get_name) 
get_name:gn:'c1%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,(U )] i i c1%
(print_var_info) 
VAR INFO: '               c1%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
(scan_atom) scan_atom:ret1
(scan_expression) n commas now:1

 (check_eitem) check_eitem: ' :PRINT CHR$(2) :BEEP b%,10*b% '

  (check_operator) check_operator:  :PRINT CHR$(2) :BEEP b%,10*b% 

   (check_literal) check_literal:lit=' ,' idx=12 ':PRINT CHR$(2) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=12 ':PRINT CHR$(2) :BEEP b%,10*b% '
   (check_literal)   ',' != ':'
   (check_literal) check_literal: ret0
  (check_operator) ret0:is comma: 0

  (check_function) check_function: ':PRINT CHR$(2) :BEEP b%,10*b% '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=11 ' :PRINT CHR$(2) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=12 ':PRINT CHR$(2) :BEEP b%,10*b% '
   (check_literal)   '%' != ':'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=11 ' :PRINT CHR$(2) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=12 ':PRINT CHR$(2) :BEEP b%,10*b% '
   (check_literal)   '"' != ':'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: ':PRINT CHR$(2) :BEEP b%,10*b% '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname ':PRINT CHR$(2) :BEEP b%,10*b% ':
    (check_vname) check_vname ret0 ':PRINT CHR$(2) :BEEP b%,10*b% ':
   (check_variable) check_variable:ret0 
  (check_atom) check_atom:ret1

  (check_sub_expr) check_sub_expr:

   (check_literal) check_literal:lit=' (' idx=11 ' :PRINT CHR$(2) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'(' idx=12 ':PRINT CHR$(2) :BEEP b%,10*b% '
   (check_literal)   '(' != ':'
   (check_literal) check_literal: ret0
  (check_sub_expr) check_sub_expr: ret0
 (check_eitem) check_eitem:ret0
(scan_expression) scan_expression: ret1 ' :PRINT CHR$(2) :BEEP b%,10*b% ' commas:1
(scan_command) scan_command: ret1 =>'AT'
(scan_command) 
ENDEXP
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: AT type:17
(op_stack_print) 
------------------

(  output_sub_end)
(token_is_function) 
token_is_function:
(token_is_function) AT is function
Pop 5
Pop 'AT'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_function) [i,(U )] v v AT
(  output_sub_end)
Finalise stack
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'a%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? '' nidx:-1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'c1%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'AT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
 BE:

Type Check Stack (0)

 BE:a%
type_check_stack_push: 'a%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'a%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'a%' type:i (0)
 BE:

Type Check Stack (1)

000: 'a%' type:i (0)
 BE:c1%
type_check_stack_push: 'c1%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'a%' type:0
(type_check_stack_print) 
001: 'c1%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'a%' type:i (0)
001: 'c1%' type:i (0)
 BE:

Type Check Stack (2)

000: 'a%' type:i (0)
001: 'c1%' type:i (0)
 BE:AT
FN: 2 args
(function_return_type) 
function_return_type: 'AT' =>v
(function_return_type) 
function_return_type: 'AT' =>17
ret_type;17 v
typecheck_expression:Ret type of AT : v
type_check_stack_pop: 'c1%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'a%' type:0
(type_check_stack_print) 
------------------

FN ARG 1 ri c1% 0(i)  Arg ok
type_check_stack_pop: 'a%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (0)

(type_check_stack_print) 
------------------

FN ARG 0 ri a% 0(i)  Arg ok
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:17
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'a%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? '' nidx:-1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'c1%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'AT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'a%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     i rq:i 'c1%'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_FUNCTION     v rq:v 'AT'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
(process_expression_types) 
==INFIX==

Var: a% ary:0 NumIdx:0
infix_stack_push: 'a%'
Var: c1% ary:0 NumIdx:0
infix_stack_push: 'c1%'
infix_stack_pop: 'c1%'
infix_stack_pop: 'a%'
infix_stack_push: 'AT(a% c1% )'
infix_stack_pop: 'AT(a% c1% )'
(process_expression_types) ==AT(a% c1% )==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_START    U rq:?   0:
(    output_qcode) N4 EXP_BUFF_ID_VARIABLE     i rq:i c1%  0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_FUNCTION     v rq:v AT  0:
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:i   0:

 (check_literal) check_literal:lit=':' idx=12 ':PRINT CHR$(2) :BEEP b%,10*b% '
 (check_literal) check_literal:After drop space:':' idx=12 ':PRINT CHR$(2) :BEEP b%,10*b% '
 (check_literal) check_literal:After while():PRINT CHR$(2) :BEEP b%,10*b% 
 (check_literal) check_literal:ret1 

 (scan_literal) scan_literal:lit=':' 'PRINT CHR$(2) :BEEP b%,10*b% '
 (scan_literal) scan_literal:After drop space:'PRINT CHR$(2) :BEEP b%,10*b% '
 (scan_literal) scan_literal:while loop:PRINT CHR$(2) :BEEP b%,10*b% 
 (scan_literal) scan_literal:ret1

 (check_line) check_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'PRINT CHR$(2) :BEEP b%,10*b% ':
    (check_vname) check_vname ret1 ' CHR$(2) :BEEP b%,10*b% ':
   (check_variable) check_variable: ' CHR$(2) :BEEP b%,10*b% '
   (check_variable) check_variable: Ary test ' CHR$(2) :BEEP b%,10*b% '

    (check_literal) check_literal:lit='(' idx=18 ' CHR$(2) :BEEP b%,10*b% '
    (check_literal) check_literal:After drop space:'(' idx=18 ' CHR$(2) :BEEP b%,10*b% '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=18 ' CHR$(2) :BEEP b%,10*b% '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=19 'CHR$(2) :BEEP b%,10*b% '
  (check_literal)   '=' != 'C'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'PRINT CHR$(2) :BEEP b%,10*b% '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'PRINT'
(check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=24, ' CHR$(2) :BEEP b%,10*b% '
========================================================
  AT a%,c1% :PRINT CHR$(2) :BEEP b%,10*b% 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'PRINT CHR$(2) :BEEP b%,10*b% ':
    (check_vname) check_vname ret1 ' CHR$(2) :BEEP b%,10*b% ':
   (check_variable) check_variable: ' CHR$(2) :BEEP b%,10*b% '
   (check_variable) check_variable: Ary test ' CHR$(2) :BEEP b%,10*b% '

    (check_literal) check_literal:lit='(' idx=18 ' CHR$(2) :BEEP b%,10*b% '
    (check_literal) check_literal:After drop space:'(' idx=18 ' CHR$(2) :BEEP b%,10*b% '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=18 ' CHR$(2) :BEEP b%,10*b% '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=19 'CHR$(2) :BEEP b%,10*b% '
  (check_literal)   '=' != 'C'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'PRINT CHR$(2) :BEEP b%,10*b% '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'PRINT'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'PRINT' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) PRINT is function
 (function_return_type) 
function_return_type: 'PRINT' =>v
 (function_return_type) 
function_return_type: 'PRINT' =>17
process_token: 'PRINT' t=>v
 Push:'PRINT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' CHR$(2) :BEEP b%,10*b% '

   (check_eitem) check_eitem: 'CHR$(2) :BEEP b%,10*b% '

    (check_operator) check_operator: CHR$(2) :BEEP b%,10*b% 

     (check_literal) check_literal:lit=' ,' idx=19 'CHR$(2) :BEEP b%,10*b% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=19 'CHR$(2) :BEEP b%,10*b% '
     (check_literal)   ',' != 'C'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'CHR$(2) :BEEP b%,10*b% '
    (check_function) check_function: ret1 Found fn=>'CHR$'
   (check_eitem) check_eitem:ret1

   (scan_eitem) scan_eitem:

    (check_operator) check_operator: CHR$(2) :BEEP b%,10*b% 

     (check_literal) check_literal:lit=' ,' idx=19 'CHR$(2) :BEEP b%,10*b% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=19 'CHR$(2) :BEEP b%,10*b% '
     (check_literal)   ',' != 'C'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'CHR$(2) :BEEP b%,10*b% '
    (check_function) check_function: ret1 Found fn=>'CHR$'

    (scan_function) scan_function:
   Frst:0 T:'CHR$' exptype:U
    (token_is_function) 
token_is_function:
    (token_is_function) CHR$ is function
    (function_return_type) 
function_return_type: 'CHR$' =>s
    (function_return_type) 
function_return_type: 'CHR$' =>2
process_token: 'CHR$' t=>s
 Push:'CHR$'
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (3)

    (op_stack_print) 
000: PRINT type:17
    (op_stack_print) 
001: ( type:16
    (op_stack_print) 
002: CHR$ type:2
    (op_stack_print) 
------------------

    (scan_expression) n commas now:0

     (check_eitem) check_eitem: '(2) :BEEP b%,10*b% '

      (check_operator) check_operator: (2) :BEEP b%,10*b% 

       (check_literal) check_literal:lit=' ,' idx=23 '(2) :BEEP b%,10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=23 '(2) :BEEP b%,10*b% '
       (check_literal)   ',' != '('
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: '(2) :BEEP b%,10*b% '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=23 '(2) :BEEP b%,10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=23 '(2) :BEEP b%,10*b% '
       (check_literal)   '%' != '('
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=23 '(2) :BEEP b%,10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=23 '(2) :BEEP b%,10*b% '
       (check_literal)   '"' != '('
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '(2) :BEEP b%,10*b% '
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname '(2) :BEEP b%,10*b% ':
        (check_vname) check_vname ret0 '(2) :BEEP b%,10*b% ':
       (check_variable) check_variable:ret0 
      (check_atom) check_atom:ret1

      (check_sub_expr) check_sub_expr:

       (check_literal) check_literal:lit=' (' idx=23 '(2) :BEEP b%,10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'(' idx=23 '(2) :BEEP b%,10*b% '
       (check_literal) check_literal:After while():2) :BEEP b%,10*b% 
       (check_literal) check_literal:ret1 
      (check_sub_expr) check_sub_expr: ret1
     (check_eitem) check_eitem:ret1

     (scan_eitem) scan_eitem:

      (check_operator) check_operator: (2) :BEEP b%,10*b% 

       (check_literal) check_literal:lit=' ,' idx=23 '(2) :BEEP b%,10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=23 '(2) :BEEP b%,10*b% '
       (check_literal)   ',' != '('
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: '(2) :BEEP b%,10*b% '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=23 '(2) :BEEP b%,10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=23 '(2) :BEEP b%,10*b% '
       (check_literal)   '%' != '('
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=23 '(2) :BEEP b%,10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=23 '(2) :BEEP b%,10*b% '
       (check_literal)   '"' != '('
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '(2) :BEEP b%,10*b% '
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname '(2) :BEEP b%,10*b% ':
        (check_vname) check_vname ret0 '(2) :BEEP b%,10*b% ':
       (check_variable) check_variable:ret0 
      (check_atom) check_atom:ret1

      (check_sub_expr) check_sub_expr:

       (check_literal) check_literal:lit=' (' idx=23 '(2) :BEEP b%,10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'(' idx=23 '(2) :BEEP b%,10*b% '
       (check_literal) check_literal:After while():2) :BEEP b%,10*b% 
       (check_literal) check_literal:ret1 
      (check_sub_expr) check_sub_expr: ret1

      (scan_sub_expr) scan_sub_expr:

       (scan_literal) scan_literal:lit=' (' '(2) :BEEP b%,10*b% '
       (scan_literal) scan_literal:After drop space:'(2) :BEEP b%,10*b% '
       (scan_literal) scan_literal:while loop:(2) :BEEP b%,10*b% 
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (4)

       (op_stack_print) 
000: PRINT type:17
       (op_stack_print) 
001: ( type:16
       (op_stack_print) 
002: CHR$ type:2
       (op_stack_print) 
003: ( type:16
       (op_stack_print) 
------------------

       (scan_literal) scan_literal:ret1
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (5)

      (op_stack_print) 
000: PRINT type:17
      (op_stack_print) 
001: ( type:16
      (op_stack_print) 
002: CHR$ type:2
      (op_stack_print) 
003: ( type:16
      (op_stack_print) 
004: ( type:16
      (op_stack_print) 
------------------


       (scan_expression) scan_expression: '2) :BEEP b%,10*b% '

        (check_eitem) check_eitem: '2) :BEEP b%,10*b% '

         (check_operator) check_operator: 2) :BEEP b%,10*b% 

          (check_literal) check_literal:lit=' ,' idx=24 '2) :BEEP b%,10*b% '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:',' idx=24 '2) :BEEP b%,10*b% '
          (check_literal)   ',' != '2'
          (check_literal) check_literal: ret0
         (check_operator) ret0:is comma: 0

         (check_function) check_function: '2) :BEEP b%,10*b% '
         (check_function) check_function: ret0

         (check_atom) check_atom:

          (check_literal) check_literal:lit=' %' idx=24 '2) :BEEP b%,10*b% '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=24 '2) :BEEP b%,10*b% '
          (check_literal)   '%' != '2'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=24 '2) :BEEP b%,10*b% '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=24 '2) :BEEP b%,10*b% '
          (check_literal)   '"' != '2'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '2) :BEEP b%,10*b% '
           (check_integer) check_integer:ret1
          (check_number) check_number: ret1
         (check_atom) check_atom:ret1
        (check_eitem) check_eitem:ret1

        (scan_eitem) scan_eitem:

         (check_operator) check_operator: 2) :BEEP b%,10*b% 

          (check_literal) check_literal:lit=' ,' idx=24 '2) :BEEP b%,10*b% '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:',' idx=24 '2) :BEEP b%,10*b% '
          (check_literal)   ',' != '2'
          (check_literal) check_literal: ret0
         (check_operator) ret0:is comma: 0

         (check_function) check_function: '2) :BEEP b%,10*b% '
         (check_function) check_function: ret0

         (check_atom) check_atom:

          (check_literal) check_literal:lit=' %' idx=24 '2) :BEEP b%,10*b% '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=24 '2) :BEEP b%,10*b% '
          (check_literal)   '%' != '2'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=24 '2) :BEEP b%,10*b% '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=24 '2) :BEEP b%,10*b% '
          (check_literal)   '"' != '2'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '2) :BEEP b%,10*b% '
           (check_integer) check_integer:ret1
          (check_number) check_number: ret1
         (check_atom) check_atom:ret1

         (scan_atom) scan_atom:

          (check_literal) check_literal:lit=' %' idx=24 '2) :BEEP b%,10*b% '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=24 '2) :BEEP b%,10*b% '
          (check_literal)   '%' != '2'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=24 '2) :BEEP b%,10*b% '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=24 '2) :BEEP b%,10*b% '
          (check_literal)   '"' != '2'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '2) :BEEP b%,10*b% '
           (check_integer) check_integer:ret1
          (check_number) check_number: ret1

          (scan_number) scan_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '2) :BEEP b%,10*b% '
           (check_integer) check_integer:ret1

           (scan_integer) scan_integer:
           (scan_integer) scan_integer:ret1
   Frst:0 T:'2' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U U U )] i i 2
          (scan_integer) scan_integer:ret1  2
         (scan_atom) scan_atom:ret1
        (scan_expression) n commas now:0

         (check_eitem) check_eitem: ') :BEEP b%,10*b% '

          (check_operator) check_operator: ) :BEEP b%,10*b% 

           (check_literal) check_literal:lit=' ,' idx=25 ') :BEEP b%,10*b% '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:',' idx=25 ') :BEEP b%,10*b% '
           (check_literal)   ',' != ')'
           (check_literal) check_literal: ret0
          (check_operator) ret0:is comma: 0

          (check_function) check_function: ') :BEEP b%,10*b% '
          (check_function) check_function: ret0

          (check_atom) check_atom:

           (check_literal) check_literal:lit=' %' idx=25 ') :BEEP b%,10*b% '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'%' idx=25 ') :BEEP b%,10*b% '
           (check_literal)   '%' != ')'
           (check_literal) check_literal: ret0

           (check_literal) check_literal:lit=' "' idx=25 ') :BEEP b%,10*b% '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'"' idx=25 ') :BEEP b%,10*b% '
           (check_literal)   '"' != ')'
           (check_literal) check_literal: ret0

           (check_number) check_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret0

            (check_integer) check_integer: ') :BEEP b%,10*b% '
            (check_integer) check_integer:ret0
           (check_number) check_number: ret0

           (check_variable) check_variable:

            (check_vname) check_vname ') :BEEP b%,10*b% ':
            (check_vname) check_vname ret0 ') :BEEP b%,10*b% ':
           (check_variable) check_variable:ret0 
          (check_atom) check_atom:ret1

          (check_sub_expr) check_sub_expr:

           (check_literal) check_literal:lit=' (' idx=25 ') :BEEP b%,10*b% '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'(' idx=25 ') :BEEP b%,10*b% '
           (check_literal)   '(' != ')'
           (check_literal) check_literal: ret0
          (check_sub_expr) check_sub_expr: ret0
         (check_eitem) check_eitem:ret0
        (scan_expression) scan_expression: ret1 ') :BEEP b%,10*b% ' commas:0

        (scan_literal) scan_literal:lit=' )' ') :BEEP b%,10*b% '
        (scan_literal) scan_literal:After drop space:') :BEEP b%,10*b% '
        (scan_literal) scan_literal:while loop:) :BEEP b%,10*b% 
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
        (op_stack_print) 
------------------
        (op_stack_print) 
Operator Stack     (4)

        (op_stack_print) 
000: PRINT type:17
        (op_stack_print) 
001: ( type:16
        (op_stack_print) 
002: CHR$ type:2
        (op_stack_print) 
003: ( type:16
        (op_stack_print) 
------------------

(  output_sub_end)
        (token_is_function) 
token_is_function:
        (token_is_function) 
token_is_function:( is not function
(  output_sub_end)
        (scan_literal) scan_literal:ret1
   Frst:0 T:')' exptype:U
Pop 4
Pop '('
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (3)

       (op_stack_print) 
000: PRINT type:17
       (op_stack_print) 
001: ( type:16
       (op_stack_print) 
002: CHR$ type:2
       (op_stack_print) 
------------------

(  output_sub_end)
       (token_is_function) 
token_is_function:
       (token_is_function) CHR$ is function
Pop 5
Pop 'CHR$'
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (2)

       (op_stack_print) 
000: PRINT type:17
       (op_stack_print) 
001: ( type:16
       (op_stack_print) 
------------------

( output_function) [U,(U U )] s s CHR$
(  output_sub_end)
       (scan_sub_expr) scan_sub_expr:ret1
      (scan_expression) n commas now:0

       (check_eitem) check_eitem: ' :BEEP b%,10*b% '

        (check_operator) check_operator:  :BEEP b%,10*b% 

         (check_literal) check_literal:lit=' ,' idx=27 ':BEEP b%,10*b% '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:',' idx=27 ':BEEP b%,10*b% '
         (check_literal)   ',' != ':'
         (check_literal) check_literal: ret0
        (check_operator) ret0:is comma: 0

        (check_function) check_function: ':BEEP b%,10*b% '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=26 ' :BEEP b%,10*b% '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=27 ':BEEP b%,10*b% '
         (check_literal)   '%' != ':'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=26 ' :BEEP b%,10*b% '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=27 ':BEEP b%,10*b% '
         (check_literal)   '"' != ':'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: ':BEEP b%,10*b% '
          (check_integer) check_integer:ret0
         (check_number) check_number: ret0

         (check_variable) check_variable:

          (check_vname) check_vname ':BEEP b%,10*b% ':
          (check_vname) check_vname ret0 ':BEEP b%,10*b% ':
         (check_variable) check_variable:ret0 
        (check_atom) check_atom:ret1

        (check_sub_expr) check_sub_expr:

         (check_literal) check_literal:lit=' (' idx=26 ' :BEEP b%,10*b% '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'(' idx=27 ':BEEP b%,10*b% '
         (check_literal)   '(' != ':'
         (check_literal) check_literal: ret0
        (check_sub_expr) check_sub_expr: ret0
       (check_eitem) check_eitem:ret0
      (scan_expression) scan_expression: ret1 ' :BEEP b%,10*b% ' commas:0
     (scan_command) scan_command: ret1 =>'PRINT'
    (scan_command) 
ENDEXP
   Frst:0 T:')' exptype:U
Pop 4
Pop '('
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (1)

    (op_stack_print) 
000: PRINT type:17
    (op_stack_print) 
------------------

(  output_sub_end)
    (token_is_function) 
token_is_function:
    (token_is_function) PRINT is function
Pop 5
Pop 'PRINT'
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (0)

    (op_stack_print) 
------------------

( output_function) [U,(U )] v v PRINT
(  output_sub_end)
Finalise stack
    (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '2' nidx:25  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     s rq:s 'CHR$' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
 BE:

Type Check Stack (0)

 BE:

Type Check Stack (0)

 BE:

Type Check Stack (0)

 BE:2
type_check_stack_push: '2'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (1)

    (type_check_stack_print) 
000: '2' type:0
    (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '2' type:i (0)
 BE:

Type Check Stack (1)

000: '2' type:i (0)
 BE:

Type Check Stack (1)

000: '2' type:i (0)
 BE:

Type Check Stack (1)

000: '2' type:i (0)
 BE:CHR$
FN: 1 args
    (function_return_type) 
function_return_type: 'CHR$' =>s
    (function_return_type) 
function_return_type: 'CHR$' =>2
ret_type;2 s
typecheck_expression:Ret type of CHR$ : s
type_check_stack_pop: '2'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (0)

    (type_check_stack_print) 
------------------

FN ARG 0 ri 2 0(i)  Arg ok
type_check_stack_push: '000'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (1)

    (type_check_stack_print) 
000: '000' type:2
    (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:s (2)
 BE:

Type Check Stack (1)

000: '000' type:s (2)
 BE:

Type Check Stack (1)

000: '000' type:s (2)
 BE:PRINT
FN: 1 args
    (function_return_type) 
function_return_type: 'PRINT' =>v
    (function_return_type) 
function_return_type: 'PRINT' =>17
ret_type;17 v
typecheck_expression:Ret type of PRINT : v
type_check_stack_pop: '000'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (0)

    (type_check_stack_print) 
------------------

FN ARG 0 ri 000 2(s)  Arg not OK
type_check_stack_push: '000'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (1)

    (type_check_stack_print) 
000: '000' type:17
    (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '2' nidx:25  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     s rq:s 'CHR$' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_FUNCTION     s rq:s 'CHR$'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
(dump_exp_buffer2) N12 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
    (process_expression_types) 
==INFIX==

infix_stack_push: '2'
infix_stack_pop: '2'
infix_stack_push: 'CHR$(2 )'
infix_stack_pop: 'CHR$(2 )'
infix_stack_push: 'PRINT(CHR$(2 ) )'
infix_stack_pop: 'PRINT(CHR$(2 ) )'
    (process_expression_types) ==PRINT(CHR$(2 ) )==
    (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N4 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N8 EXP_BUFF_ID_FUNCTION     s rq:s CHR$  0:
(    output_qcode) N9 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N10 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N11 EXP_BUFF_ID_FUNCTION     v rq:v PRINT  0:
(    output_qcode) N12 EXP_BUFF_ID_SUB_END      U rq:i   0:

     (check_literal) check_literal:lit=':' idx=27 ':BEEP b%,10*b% '
     (check_literal) check_literal:After drop space:':' idx=27 ':BEEP b%,10*b% '
     (check_literal) check_literal:After while():BEEP b%,10*b% 
     (check_literal) check_literal:ret1 

     (scan_literal) scan_literal:lit=':' 'BEEP b%,10*b% '
     (scan_literal) scan_literal:After drop space:'BEEP b%,10*b% '
     (scan_literal) scan_literal:while loop:BEEP b%,10*b% 
     (scan_literal) scan_literal:ret1

     (check_line) check_line:

      (check_assignment) check_assignment:

       (check_variable) check_variable:

        (check_vname) check_vname 'BEEP b%,10*b% ':
        (check_vname) check_vname ret1 ' b%,10*b% ':
       (check_variable) check_variable: ' b%,10*b% '
       (check_variable) check_variable: Ary test ' b%,10*b% '

        (check_literal) check_literal:lit='(' idx=32 ' b%,10*b% '
        (check_literal) check_literal:After drop space:'(' idx=32 ' b%,10*b% '
        (check_literal)   '(' != ' '
        (check_literal) check_literal: ret0
       (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
      (check_variable) check_variable:ret1 

      (check_literal) check_literal:lit=' =' idx=32 ' b%,10*b% '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'=' idx=33 'b%,10*b% '
      (check_literal)   '=' != 'b'
      (check_literal) check_literal: ret0
     (check_assignment) check_assignment:ret0

     (check_proc_call) check_proc_call:

      (check_textlabel) check_textlabel: 'BEEP b%,10*b% '
      (check_textlabel) check_textlabel:ret0
     (check_proc_call) check_proc_call:ret0

     (check_command) check_command:
     (check_command) check_command: ret1 found=> 'BEEP'
    (check_line) check_line:ret1
   (scan_cline) scan_cline: Checked len=10, ' b%,10*b% '
========================================================
  AT a%,c1% :PRINT CHR$(2) :BEEP b%,10*b% 
========================================================
(output_expression_start)

    (scan_line) scan_line:

     (check_assignment) check_assignment:

      (check_variable) check_variable:

       (check_vname) check_vname 'BEEP b%,10*b% ':
       (check_vname) check_vname ret1 ' b%,10*b% ':
      (check_variable) check_variable: ' b%,10*b% '
      (check_variable) check_variable: Ary test ' b%,10*b% '

       (check_literal) check_literal:lit='(' idx=32 ' b%,10*b% '
       (check_literal) check_literal:After drop space:'(' idx=32 ' b%,10*b% '
       (check_literal)   '(' != ' '
       (check_literal) check_literal: ret0
      (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
     (check_variable) check_variable:ret1 

     (check_literal) check_literal:lit=' =' idx=32 ' b%,10*b% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'=' idx=33 'b%,10*b% '
     (check_literal)   '=' != 'b'
     (check_literal) check_literal: ret0
    (check_assignment) check_assignment:ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) check_textlabel: 'BEEP b%,10*b% '
     (check_textlabel) check_textlabel:ret0
    (check_proc_call) check_proc_call:ret0

    (check_command) check_command:
    (check_command) check_command: ret1 found=> 'BEEP'
   (scan_line) scan_line:check_command: 

    (scan_command) scan_command:
   Frst:1 T:'BEEP' exptype:U
    (token_is_function) 
token_is_function:
    (token_is_function) BEEP is function
    (function_return_type) 
function_return_type: 'BEEP' =>v
    (function_return_type) 
function_return_type: 'BEEP' =>17
process_token: 'BEEP' t=>v
 Push:'BEEP'
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (1)

    (op_stack_print) 
000: BEEP type:17
    (op_stack_print) 
------------------

    (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (2)

    (op_stack_print) 
000: BEEP type:17
    (op_stack_print) 
001: ( type:16
    (op_stack_print) 
------------------


     (scan_expression) scan_expression: ' b%,10*b% '

      (check_eitem) check_eitem: 'b%,10*b% '

       (check_operator) check_operator: b%,10*b% 

        (check_literal) check_literal:lit=' ,' idx=33 'b%,10*b% '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:',' idx=33 'b%,10*b% '
        (check_literal)   ',' != 'b'
        (check_literal) check_literal: ret0
       (check_operator) ret0:is comma: 0

       (check_function) check_function: 'b%,10*b% '
       (check_function) check_function: ret0

       (check_atom) check_atom:

        (check_literal) check_literal:lit=' %' idx=33 'b%,10*b% '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'%' idx=33 'b%,10*b% '
        (check_literal)   '%' != 'b'
        (check_literal) check_literal: ret0

        (check_literal) check_literal:lit=' "' idx=33 'b%,10*b% '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'"' idx=33 'b%,10*b% '
        (check_literal)   '"' != 'b'
        (check_literal) check_literal: ret0

        (check_number) check_number:

         (check_float) check_float:
         (isfloatdigit) isfloatdigit:
         (check_float) check_float: ret0

         (check_integer) check_integer: 'b%,10*b% '
         (check_integer) check_integer:ret0
        (check_number) check_number: ret0

        (check_variable) check_variable:

         (check_vname) check_vname 'b%,10*b% ':
         (check_vname) check_vname ret1 '%,10*b% ':
        (check_variable) check_variable: '%,10*b% '
        (check_variable) check_variable: Ary test ',10*b% '

         (check_literal) check_literal:lit='(' idx=35 ',10*b% '
         (check_literal) check_literal:After drop space:'(' idx=35 ',10*b% '
         (check_literal)   '(' != ','
         (check_literal) check_literal: ret0
        (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
       (check_variable) check_variable:ret1 
      (check_atom) check_atom:ret1
     (check_eitem) check_eitem:ret1

     (scan_eitem) scan_eitem:

      (check_operator) check_operator: b%,10*b% 

       (check_literal) check_literal:lit=' ,' idx=33 'b%,10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=33 'b%,10*b% '
       (check_literal)   ',' != 'b'
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: 'b%,10*b% '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=33 'b%,10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=33 'b%,10*b% '
       (check_literal)   '%' != 'b'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=33 'b%,10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=33 'b%,10*b% '
       (check_literal)   '"' != 'b'
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: 'b%,10*b% '
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname 'b%,10*b% ':
        (check_vname) check_vname ret1 '%,10*b% ':
       (check_variable) check_variable: '%,10*b% '
       (check_variable) check_variable: Ary test ',10*b% '

        (check_literal) check_literal:lit='(' idx=35 ',10*b% '
        (check_literal) check_literal:After drop space:'(' idx=35 ',10*b% '
        (check_literal)   '(' != ','
        (check_literal) check_literal: ret0
       (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
      (check_variable) check_variable:ret1 
     (check_atom) check_atom:ret1

     (scan_atom) scan_atom:

      (check_literal) check_literal:lit=' %' idx=33 'b%,10*b% '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=33 'b%,10*b% '
      (check_literal)   '%' != 'b'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=33 'b%,10*b% '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=33 'b%,10*b% '
      (check_literal)   '"' != 'b'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: 'b%,10*b% '
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname 'b%,10*b% ':
       (check_vname) check_vname ret1 '%,10*b% ':
      (check_variable) check_variable: '%,10*b% '
      (check_variable) check_variable: Ary test ',10*b% '

       (check_literal) check_literal:lit='(' idx=35 ',10*b% '
       (check_literal) check_literal:After drop space:'(' idx=35 ',10*b% '
       (check_literal)   '(' != ','
       (check_literal) check_literal: ret0
      (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
     (check_variable) check_variable:ret1 

     (scan_variable) scan_variable:

      (scan_vname) scan_vname: 'b%,10*b% '
      (scan_vname) scan_vname: ret1 'b'
     (scan_variable) scan_variable: '%,10*b% ' vname='b'
     (scan_variable) scan_variable: Ary test ',10*b% '

      (check_literal) check_literal:lit='(' idx=35 ',10*b% '
      (check_literal) check_literal:After drop space:'(' idx=35 ',10*b% '
      (check_literal)   '(' != ','
      (check_literal) check_literal: ret0
     (scan_variable) scan_variable:ret1 vname='b%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'b%' exptype:U
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:b% is not function
token_is_variable: tok:'b%'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:b% is not function
    (init_get_name) 
init_get_name:'b%'
    (init_get_name) 
init_get_name:'b%'
    (get_name) 
get_name:gn:'b%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,(U )] i i b%
    (print_var_info) 
VAR INFO: '                b%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
    (scan_atom) scan_atom:ret1
   (scan_expression) n commas now:0

    (check_eitem) check_eitem: ',10*b% '

     (check_operator) check_operator: ,10*b% 

      (check_literal) check_literal:lit=' ,' idx=35 ',10*b% '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=35 ',10*b% '
      (check_literal) check_literal:After while():10*b% 
      (check_literal) check_literal:ret1 
     (check_operator) ret1:is comma: 0
    (check_eitem) check_eitem:ret1 comma:1

    (scan_eitem) scan_eitem:

     (check_operator) check_operator: ,10*b% 

      (check_literal) check_literal:lit=' ,' idx=35 ',10*b% '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=35 ',10*b% '
      (check_literal) check_literal:After while():10*b% 
      (check_literal) check_literal:ret1 
     (check_operator) ret1:is comma: 0

     (scan_operator) scan_operator: ',10*b% '

      (check_literal) check_literal:lit=' ,' idx=35 ',10*b% '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=35 ',10*b% '
      (check_literal) check_literal:After while():10*b% 
      (check_literal) check_literal:ret1 

      (scan_literal) scan_literal:lit=' ,' ',10*b% '
      (scan_literal) scan_literal:After drop space:',10*b% '
      (scan_literal) scan_literal:while loop:,10*b% 
   Frst:0 T:',' exptype:i
(output_sub_start)
      (scan_literal) scan_literal:ret1
     (scan_operator) ret1:is comma: 1
    (scan_eitem) Is comma;1
    (scan_expression) n commas now:1

     (check_eitem) check_eitem: '10*b% '

      (check_operator) check_operator: 10*b% 

       (check_literal) check_literal:lit=' ,' idx=36 '10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=36 '10*b% '
       (check_literal)   ',' != '1'
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: '10*b% '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=36 '10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=36 '10*b% '
       (check_literal)   '%' != '1'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=36 '10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=36 '10*b% '
       (check_literal)   '"' != '1'
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '10*b% '
        (check_integer) check_integer:ret1
       (check_number) check_number: ret1
      (check_atom) check_atom:ret1
     (check_eitem) check_eitem:ret1

     (scan_eitem) scan_eitem:

      (check_operator) check_operator: 10*b% 

       (check_literal) check_literal:lit=' ,' idx=36 '10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=36 '10*b% '
       (check_literal)   ',' != '1'
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: '10*b% '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=36 '10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=36 '10*b% '
       (check_literal)   '%' != '1'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=36 '10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=36 '10*b% '
       (check_literal)   '"' != '1'
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '10*b% '
        (check_integer) check_integer:ret1
       (check_number) check_number: ret1
      (check_atom) check_atom:ret1

      (scan_atom) scan_atom:

       (check_literal) check_literal:lit=' %' idx=36 '10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=36 '10*b% '
       (check_literal)   '%' != '1'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=36 '10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=36 '10*b% '
       (check_literal)   '"' != '1'
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '10*b% '
        (check_integer) check_integer:ret1
       (check_number) check_number: ret1

       (scan_number) scan_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '10*b% '
        (check_integer) check_integer:ret1

        (scan_integer) scan_integer:
        (scan_integer) scan_integer:ret1
   Frst:0 T:'10' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U )] i i 10
       (scan_integer) scan_integer:ret1  10
      (scan_atom) scan_atom:ret1
     (scan_expression) n commas now:1

      (check_eitem) check_eitem: '*b% '

       (check_operator) check_operator: *b% 

        (check_literal) check_literal:lit=' ,' idx=38 '*b% '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:',' idx=38 '*b% '
        (check_literal)   ',' != '*'
        (check_literal) check_literal: ret0
       (check_operator) ret1:is comma: 0
      (check_eitem) check_eitem:ret1 comma:1

      (scan_eitem) scan_eitem:

       (check_operator) check_operator: *b% 

        (check_literal) check_literal:lit=' ,' idx=38 '*b% '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:',' idx=38 '*b% '
        (check_literal)   ',' != '*'
        (check_literal) check_literal: ret0
       (check_operator) ret1:is comma: 0

       (scan_operator) scan_operator: '*b% '

        (check_literal) check_literal:lit=' ,' idx=38 '*b% '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:',' idx=38 '*b% '
        (check_literal)   ',' != '*'
        (check_literal) check_literal: ret0
       (scan_operator) scan_operator: ret1 'b% '
   Frst:0 T:'*' exptype:i
      (operator_precedence) 
* is operator
'*' is operator
      (process_token) 
Token is operator o1 name:* o2 name:(
      (process_token) 
opr1:5 opr2:0
Push 1
 Push:'*'
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (3)

      (op_stack_print) 
000: BEEP type:17
      (op_stack_print) 
001: ( type:16
      (op_stack_print) 
002: * type:0
      (op_stack_print) 
------------------

      (scan_eitem) Is comma;0
      (scan_expression) n commas now:1

       (check_eitem) check_eitem: 'b% '

        (check_operator) check_operator: b% 

         (check_literal) check_literal:lit=' ,' idx=39 'b% '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:',' idx=39 'b% '
         (check_literal)   ',' != 'b'
         (check_literal) check_literal: ret0
        (check_operator) ret0:is comma: 0

        (check_function) check_function: 'b% '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=39 'b% '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=39 'b% '
         (check_literal)   '%' != 'b'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=39 'b% '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=39 'b% '
         (check_literal)   '"' != 'b'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: 'b% '
          (check_integer) check_integer:ret0
         (check_number) check_number: ret0

         (check_variable) check_variable:

          (check_vname) check_vname 'b% ':
          (check_vname) check_vname ret1 '% ':
         (check_variable) check_variable: '% '
         (check_variable) check_variable: Ary test ' '

          (check_literal) check_literal:lit='(' idx=41 ' '
          (check_literal) check_literal:After drop space:'(' idx=41 ' '
          (check_literal)   '(' != ' '
          (check_literal) check_literal: ret0
         (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
        (check_variable) check_variable:ret1 
       (check_atom) check_atom:ret1
      (check_eitem) check_eitem:ret1

      (scan_eitem) scan_eitem:

       (check_operator) check_operator: b% 

        (check_literal) check_literal:lit=' ,' idx=39 'b% '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:',' idx=39 'b% '
        (check_literal)   ',' != 'b'
        (check_literal) check_literal: ret0
       (check_operator) ret0:is comma: 0

       (check_function) check_function: 'b% '
       (check_function) check_function: ret0

       (check_atom) check_atom:

        (check_literal) check_literal:lit=' %' idx=39 'b% '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'%' idx=39 'b% '
        (check_literal)   '%' != 'b'
        (check_literal) check_literal: ret0

        (check_literal) check_literal:lit=' "' idx=39 'b% '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'"' idx=39 'b% '
        (check_literal)   '"' != 'b'
        (check_literal) check_literal: ret0

        (check_number) check_number:

         (check_float) check_float:
         (isfloatdigit) isfloatdigit:
         (check_float) check_float: ret0

         (check_integer) check_integer: 'b% '
         (check_integer) check_integer:ret0
        (check_number) check_number: ret0

        (check_variable) check_variable:

         (check_vname) check_vname 'b% ':
         (check_vname) check_vname ret1 '% ':
        (check_variable) check_variable: '% '
        (check_variable) check_variable: Ary test ' '

         (check_literal) check_literal:lit='(' idx=41 ' '
         (check_literal) check_literal:After drop space:'(' idx=41 ' '
         (check_literal)   '(' != ' '
         (check_literal) check_literal: ret0
        (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
       (check_variable) check_variable:ret1 
      (check_atom) check_atom:ret1

      (scan_atom) scan_atom:

       (check_literal) check_literal:lit=' %' idx=39 'b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=39 'b% '
       (check_literal)   '%' != 'b'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=39 'b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=39 'b% '
       (check_literal)   '"' != 'b'
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: 'b% '
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname 'b% ':
        (check_vname) check_vname ret1 '% ':
       (check_variable) check_variable: '% '
       (check_variable) check_variable: Ary test ' '

        (check_literal) check_literal:lit='(' idx=41 ' '
        (check_literal) check_literal:After drop space:'(' idx=41 ' '
        (check_literal)   '(' != ' '
        (check_literal) check_literal: ret0
       (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
      (check_variable) check_variable:ret1 

      (scan_variable) scan_variable:

       (scan_vname) scan_vname: 'b% '
       (scan_vname) scan_vname: ret1 'b'
      (scan_variable) scan_variable: '% ' vname='b'
      (scan_variable) scan_variable: Ary test ' '

       (check_literal) check_literal:lit='(' idx=41 ' '
       (check_literal) check_literal:After drop space:'(' idx=41 ' '
       (check_literal)   '(' != ' '
       (check_literal) check_literal: ret0
      (scan_variable) scan_variable:ret1 vname='b%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'b%' exptype:i
     (operator_precedence) 
* is operator
     (token_is_function) 
token_is_function:
     (token_is_function) 
token_is_function:b% is not function
token_is_variable: tok:'b%'
     (token_is_function) 
token_is_function:
     (token_is_function) 
token_is_function:b% is not function
     (init_get_name) 
init_get_name:'b%'
     (init_get_name) 
init_get_name:'b%'
     (get_name) 
get_name:gn:'b%'
process_token:type:i req_type:i
modify_expression_type:Inittype:i Intype:i Outtype:i
( output_variable) [i,(U )] i i b%
     (print_var_info) 
VAR INFO: '                b%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
     (scan_atom) scan_atom:ret1
    (scan_expression) n commas now:1

     (check_eitem) check_eitem: ' '

      (check_operator) check_operator:  

       (check_literal) check_literal:lit=' ,' idx=42 ''
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=42 ''
       (check_literal) check_literal  ret0 Empty test string
      (check_operator) ret0:is comma: 0

      (check_function) check_function: ''
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=41 ' '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=42 ''
       (check_literal) check_literal  ret0 Empty test string

       (check_literal) check_literal:lit=' "' idx=41 ' '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=42 ''
       (check_literal) check_literal  ret0 Empty test string

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: ''
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname '':
        (check_vname) check_vname ret0 '':
       (check_variable) check_variable:ret0 
      (check_atom) check_atom:ret1

      (check_sub_expr) check_sub_expr:

       (check_literal) check_literal:lit=' (' idx=41 ' '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'(' idx=42 ''
       (check_literal) check_literal  ret0 Empty test string
      (check_sub_expr) check_sub_expr: ret0
     (check_eitem) check_eitem:ret0
    (scan_expression) scan_expression: ret1 ' ' commas:1
   (scan_command) scan_command: ret1 =>'BEEP'
  (scan_command) 
ENDEXP
   Frst:0 T:')' exptype:i
  (operator_precedence) 
* is operator
  (process_token) 
Pop 3
Pop '*'
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (2)

  (op_stack_print) 
000: BEEP type:17
  (op_stack_print) 
001: ( type:16
  (op_stack_print) 
------------------

( output_operator) [i,(U )] i i *
  (token_is_function) 
token_is_function:
  (token_is_function) 
token_is_function:* is not function
Pop 4
Pop '('
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (1)

  (op_stack_print) 
000: BEEP type:17
  (op_stack_print) 
------------------

(  output_sub_end)
  (token_is_function) 
token_is_function:
  (token_is_function) BEEP is function
Pop 5
Pop 'BEEP'
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (0)

  (op_stack_print) 
------------------

( output_function) [i,(U )] v v BEEP
(  output_sub_end)
Finalise stack
  (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'b%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? '' nidx:-1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '10' nidx:38  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'b%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '*' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'BEEP' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
 BE:

Type Check Stack (0)

 BE:b%
type_check_stack_push: 'b%'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (1)

  (type_check_stack_print) 
000: 'b%' type:0
  (type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'b%' type:i (0)
 BE:

Type Check Stack (1)

000: 'b%' type:i (0)
 BE:10
type_check_stack_push: '10'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (2)

  (type_check_stack_print) 
000: 'b%' type:0
  (type_check_stack_print) 
001: '10' type:0
  (type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'b%' type:i (0)
001: '10' type:i (0)
 BE:b%
type_check_stack_push: 'b%'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (3)

  (type_check_stack_print) 
000: 'b%' type:0
  (type_check_stack_print) 
001: '10' type:0
  (type_check_stack_print) 
002: 'b%' type:0
  (type_check_stack_print) 
------------------


Type Check Stack (3)

000: 'b%' type:i (0)
001: '10' type:i (0)
002: 'b%' type:i (0)
 BE:*
BUFF_ID_OPERATOR
Found operator *
type_check_stack_pop: 'b%'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (2)

  (type_check_stack_print) 
000: 'b%' type:0
  (type_check_stack_print) 
001: '10' type:0
  (type_check_stack_print) 
------------------

type_check_stack_pop: '10'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (1)

  (type_check_stack_print) 
000: 'b%' type:0
  (type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (2)

  (type_check_stack_print) 
000: 'b%' type:0
  (type_check_stack_print) 
001: '000' type:0
  (type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'b%' type:i (0)
001: '000' type:i (0)
 BE:

Type Check Stack (2)

000: 'b%' type:i (0)
001: '000' type:i (0)
 BE:BEEP
FN: 2 args
  (function_return_type) 
function_return_type: 'BEEP' =>v
  (function_return_type) 
function_return_type: 'BEEP' =>17
ret_type;17 v
typecheck_expression:Ret type of BEEP : v
type_check_stack_pop: '000'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (1)

  (type_check_stack_print) 
000: 'b%' type:0
  (type_check_stack_print) 
------------------

FN ARG 1 ri 000 0(i)  Arg ok
type_check_stack_pop: 'b%'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (0)

  (type_check_stack_print) 
------------------

FN ARG 0 ri b% 0(i)  Arg ok
type_check_stack_push: '000'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (1)

  (type_check_stack_print) 
000: '000' type:17
  (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'b%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? '' nidx:-1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '10' nidx:38  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'b%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '*' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'BEEP' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'b%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_INTEGER      i rq:i '10'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_VARIABLE     i rq:i 'b%'  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 5 4
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_FUNCTION     v rq:v 'BEEP'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
  (process_expression_types) 
==INFIX==

Var: b% ary:0 NumIdx:0
infix_stack_push: 'b%'
infix_stack_push: '10'
Var: b% ary:0 NumIdx:0
infix_stack_push: 'b%'
infix_stack_pop: 'b%'
infix_stack_pop: '10'
infix_stack_push: '(10 * b%)'
infix_stack_pop: '(10 * b%)'
infix_stack_pop: 'b%'
infix_stack_push: 'BEEP(b% (10 * b%) )'
infix_stack_pop: 'BEEP(b% (10 * b%) )'
  (process_expression_types) ==BEEP(b% (10 * b%) )==
  (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_START    U rq:?   0:
(    output_qcode) N4 EXP_BUFF_ID_INTEGER      i rq:i 10  0:
(    output_qcode) N5 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
(    output_qcode) N6 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 5 4
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N8 EXP_BUFF_ID_FUNCTION     v rq:v BEEP  0:
(    output_qcode) N9 EXP_BUFF_ID_SUB_END      U rq:i   0:

   (check_literal) check_literal:lit=':' idx=42 ''
   (check_literal) check_literal:After drop space:':' idx=42 ''
   (check_literal) check_literal  ret0 Empty test string
  (translate_file) 
cline scanned OK
******************************
**  AT a%,c% :PRINT CHR$(3) **
******************************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'AT a%,c% :PRINT CHR$(3) ':
     (check_vname) check_vname ret1 ' a%,c% :PRINT CHR$(3) ':
    (check_variable) check_variable: ' a%,c% :PRINT CHR$(3) '
    (check_variable) check_variable: Ary test ' a%,c% :PRINT CHR$(3) '

     (check_literal) check_literal:lit='(' idx=4 ' a%,c% :PRINT CHR$(3) '
     (check_literal) check_literal:After drop space:'(' idx=4 ' a%,c% :PRINT CHR$(3) '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=4 ' a%,c% :PRINT CHR$(3) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=5 'a%,c% :PRINT CHR$(3) '
   (check_literal)   '=' != 'a'
   (check_literal) check_literal: ret0
  (check_assignment) check_assignment:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) check_textlabel: 'AT a%,c% :PRINT CHR$(3) '
   (check_textlabel) check_textlabel:ret0
  (check_proc_call) check_proc_call:ret0

  (check_command) check_command:
  (check_command) check_command: ret1 found=> 'AT'
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=22, ' a%,c% :PRINT CHR$(3) '
========================================================
  AT a%,c% :PRINT CHR$(3) 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'AT a%,c% :PRINT CHR$(3) ':
    (check_vname) check_vname ret1 ' a%,c% :PRINT CHR$(3) ':
   (check_variable) check_variable: ' a%,c% :PRINT CHR$(3) '
   (check_variable) check_variable: Ary test ' a%,c% :PRINT CHR$(3) '

    (check_literal) check_literal:lit='(' idx=4 ' a%,c% :PRINT CHR$(3) '
    (check_literal) check_literal:After drop space:'(' idx=4 ' a%,c% :PRINT CHR$(3) '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=4 ' a%,c% :PRINT CHR$(3) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=5 'a%,c% :PRINT CHR$(3) '
  (check_literal)   '=' != 'a'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'AT a%,c% :PRINT CHR$(3) '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'AT'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'AT' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) AT is function
 (function_return_type) 
function_return_type: 'AT' =>v
 (function_return_type) 
function_return_type: 'AT' =>17
process_token: 'AT' t=>v
 Push:'AT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: AT type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: AT type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' a%,c% :PRINT CHR$(3) '

   (check_eitem) check_eitem: 'a%,c% :PRINT CHR$(3) '

    (check_operator) check_operator: a%,c% :PRINT CHR$(3) 

     (check_literal) check_literal:lit=' ,' idx=5 'a%,c% :PRINT CHR$(3) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=5 'a%,c% :PRINT CHR$(3) '
     (check_literal)   ',' != 'a'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'a%,c% :PRINT CHR$(3) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=5 'a%,c% :PRINT CHR$(3) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=5 'a%,c% :PRINT CHR$(3) '
     (check_literal)   '%' != 'a'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=5 'a%,c% :PRINT CHR$(3) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=5 'a%,c% :PRINT CHR$(3) '
     (check_literal)   '"' != 'a'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'a%,c% :PRINT CHR$(3) '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'a%,c% :PRINT CHR$(3) ':
      (check_vname) check_vname ret1 '%,c% :PRINT CHR$(3) ':
     (check_variable) check_variable: '%,c% :PRINT CHR$(3) '
     (check_variable) check_variable: Ary test ',c% :PRINT CHR$(3) '

      (check_literal) check_literal:lit='(' idx=7 ',c% :PRINT CHR$(3) '
      (check_literal) check_literal:After drop space:'(' idx=7 ',c% :PRINT CHR$(3) '
      (check_literal)   '(' != ','
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator: a%,c% :PRINT CHR$(3) 

    (check_literal) check_literal:lit=' ,' idx=5 'a%,c% :PRINT CHR$(3) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=5 'a%,c% :PRINT CHR$(3) '
    (check_literal)   ',' != 'a'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'a%,c% :PRINT CHR$(3) '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=5 'a%,c% :PRINT CHR$(3) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=5 'a%,c% :PRINT CHR$(3) '
    (check_literal)   '%' != 'a'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=5 'a%,c% :PRINT CHR$(3) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=5 'a%,c% :PRINT CHR$(3) '
    (check_literal)   '"' != 'a'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'a%,c% :PRINT CHR$(3) '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'a%,c% :PRINT CHR$(3) ':
     (check_vname) check_vname ret1 '%,c% :PRINT CHR$(3) ':
    (check_variable) check_variable: '%,c% :PRINT CHR$(3) '
    (check_variable) check_variable: Ary test ',c% :PRINT CHR$(3) '

     (check_literal) check_literal:lit='(' idx=7 ',c% :PRINT CHR$(3) '
     (check_literal) check_literal:After drop space:'(' idx=7 ',c% :PRINT CHR$(3) '
     (check_literal)   '(' != ','
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1

  (scan_atom) scan_atom:

   (check_literal) check_literal:lit=' %' idx=5 'a%,c% :PRINT CHR$(3) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=5 'a%,c% :PRINT CHR$(3) '
   (check_literal)   '%' != 'a'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=5 'a%,c% :PRINT CHR$(3) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=5 'a%,c% :PRINT CHR$(3) '
   (check_literal)   '"' != 'a'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'a%,c% :PRINT CHR$(3) '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'a%,c% :PRINT CHR$(3) ':
    (check_vname) check_vname ret1 '%,c% :PRINT CHR$(3) ':
   (check_variable) check_variable: '%,c% :PRINT CHR$(3) '
   (check_variable) check_variable: Ary test ',c% :PRINT CHR$(3) '

    (check_literal) check_literal:lit='(' idx=7 ',c% :PRINT CHR$(3) '
    (check_literal) check_literal:After drop space:'(' idx=7 ',c% :PRINT CHR$(3) '
    (check_literal)   '(' != ','
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'a%,c% :PRINT CHR$(3) '
   (scan_vname) scan_vname: ret1 'a'
  (scan_variable) scan_variable: '%,c% :PRINT CHR$(3) ' vname='a'
  (scan_variable) scan_variable: Ary test ',c% :PRINT CHR$(3) '

   (check_literal) check_literal:lit='(' idx=7 ',c% :PRINT CHR$(3) '
   (check_literal) check_literal:After drop space:'(' idx=7 ',c% :PRINT CHR$(3) '
   (check_literal)   '(' != ','
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='a%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'a%' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:a% is not function
token_is_variable: tok:'a%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:a% is not function
 (init_get_name) 
init_get_name:'a%'
 (init_get_name) 
init_get_name:'a%'
 (get_name) 
get_name:gn:'a%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,(U )] i i a%
 (print_var_info) 
VAR INFO: '                a%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
 (scan_atom) scan_atom:ret1
(scan_expression) n commas now:0

 (check_eitem) check_eitem: ',c% :PRINT CHR$(3) '

  (check_operator) check_operator: ,c% :PRINT CHR$(3) 

   (check_literal) check_literal:lit=' ,' idx=7 ',c% :PRINT CHR$(3) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=7 ',c% :PRINT CHR$(3) '
   (check_literal) check_literal:After while():c% :PRINT CHR$(3) 
   (check_literal) check_literal:ret1 
  (check_operator) ret1:is comma: 0
 (check_eitem) check_eitem:ret1 comma:1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: ,c% :PRINT CHR$(3) 

   (check_literal) check_literal:lit=' ,' idx=7 ',c% :PRINT CHR$(3) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=7 ',c% :PRINT CHR$(3) '
   (check_literal) check_literal:After while():c% :PRINT CHR$(3) 
   (check_literal) check_literal:ret1 
  (check_operator) ret1:is comma: 0

  (scan_operator) scan_operator: ',c% :PRINT CHR$(3) '

   (check_literal) check_literal:lit=' ,' idx=7 ',c% :PRINT CHR$(3) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=7 ',c% :PRINT CHR$(3) '
   (check_literal) check_literal:After while():c% :PRINT CHR$(3) 
   (check_literal) check_literal:ret1 

   (scan_literal) scan_literal:lit=' ,' ',c% :PRINT CHR$(3) '
   (scan_literal) scan_literal:After drop space:',c% :PRINT CHR$(3) '
   (scan_literal) scan_literal:while loop:,c% :PRINT CHR$(3) 
   Frst:0 T:',' exptype:i
(output_sub_start)
   (scan_literal) scan_literal:ret1
  (scan_operator) ret1:is comma: 1
 (scan_eitem) Is comma;1
 (scan_expression) n commas now:1

  (check_eitem) check_eitem: 'c% :PRINT CHR$(3) '

   (check_operator) check_operator: c% :PRINT CHR$(3) 

    (check_literal) check_literal:lit=' ,' idx=8 'c% :PRINT CHR$(3) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=8 'c% :PRINT CHR$(3) '
    (check_literal)   ',' != 'c'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'c% :PRINT CHR$(3) '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=8 'c% :PRINT CHR$(3) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=8 'c% :PRINT CHR$(3) '
    (check_literal)   '%' != 'c'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=8 'c% :PRINT CHR$(3) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=8 'c% :PRINT CHR$(3) '
    (check_literal)   '"' != 'c'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'c% :PRINT CHR$(3) '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'c% :PRINT CHR$(3) ':
     (check_vname) check_vname ret1 '% :PRINT CHR$(3) ':
    (check_variable) check_variable: '% :PRINT CHR$(3) '
    (check_variable) check_variable: Ary test ' :PRINT CHR$(3) '

     (check_literal) check_literal:lit='(' idx=10 ' :PRINT CHR$(3) '
     (check_literal) check_literal:After drop space:'(' idx=10 ' :PRINT CHR$(3) '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1
 (check_eitem) check_eitem:ret1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: c% :PRINT CHR$(3) 

   (check_literal) check_literal:lit=' ,' idx=8 'c% :PRINT CHR$(3) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=8 'c% :PRINT CHR$(3) '
   (check_literal)   ',' != 'c'
   (check_literal) check_literal: ret0
  (check_operator) ret0:is comma: 0

  (check_function) check_function: 'c% :PRINT CHR$(3) '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=8 'c% :PRINT CHR$(3) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=8 'c% :PRINT CHR$(3) '
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=8 'c% :PRINT CHR$(3) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=8 'c% :PRINT CHR$(3) '
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c% :PRINT CHR$(3) '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'c% :PRINT CHR$(3) ':
    (check_vname) check_vname ret1 '% :PRINT CHR$(3) ':
   (check_variable) check_variable: '% :PRINT CHR$(3) '
   (check_variable) check_variable: Ary test ' :PRINT CHR$(3) '

    (check_literal) check_literal:lit='(' idx=10 ' :PRINT CHR$(3) '
    (check_literal) check_literal:After drop space:'(' idx=10 ' :PRINT CHR$(3) '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) check_atom:ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=8 'c% :PRINT CHR$(3) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=8 'c% :PRINT CHR$(3) '
  (check_literal)   '%' != 'c'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=8 'c% :PRINT CHR$(3) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=8 'c% :PRINT CHR$(3) '
  (check_literal)   '"' != 'c'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) check_float: ret0

   (check_integer) check_integer: 'c% :PRINT CHR$(3) '
   (check_integer) check_integer:ret0
  (check_number) check_number: ret0

  (check_variable) check_variable:

   (check_vname) check_vname 'c% :PRINT CHR$(3) ':
   (check_vname) check_vname ret1 '% :PRINT CHR$(3) ':
  (check_variable) check_variable: '% :PRINT CHR$(3) '
  (check_variable) check_variable: Ary test ' :PRINT CHR$(3) '

   (check_literal) check_literal:lit='(' idx=10 ' :PRINT CHR$(3) '
   (check_literal) check_literal:After drop space:'(' idx=10 ' :PRINT CHR$(3) '
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) scan_variable:

  (scan_vname) scan_vname: 'c% :PRINT CHR$(3) '
  (scan_vname) scan_vname: ret1 'c'
 (scan_variable) scan_variable: '% :PRINT CHR$(3) ' vname='c'
 (scan_variable) scan_variable: Ary test ' :PRINT CHR$(3) '

  (check_literal) check_literal:lit='(' idx=10 ' :PRINT CHR$(3) '
  (check_literal) check_literal:After drop space:'(' idx=10 ' :PRINT CHR$(3) '
  (check_literal)   '(' != ' '
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='c%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'c%' exptype:U
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:c% is not function
token_is_variable: tok:'c%'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:c% is not function
(init_get_name) 
init_get_name:'c%'
(init_get_name) 
init_get_name:'c%'
(get_name) 
get_name:gn:'c%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,(U )] i i c%
(print_var_info) 
VAR INFO: '                c%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
(scan_atom) scan_atom:ret1
(scan_expression) n commas now:1

 (check_eitem) check_eitem: ' :PRINT CHR$(3) '

  (check_operator) check_operator:  :PRINT CHR$(3) 

   (check_literal) check_literal:lit=' ,' idx=11 ':PRINT CHR$(3) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=11 ':PRINT CHR$(3) '
   (check_literal)   ',' != ':'
   (check_literal) check_literal: ret0
  (check_operator) ret0:is comma: 0

  (check_function) check_function: ':PRINT CHR$(3) '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=10 ' :PRINT CHR$(3) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=11 ':PRINT CHR$(3) '
   (check_literal)   '%' != ':'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=10 ' :PRINT CHR$(3) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=11 ':PRINT CHR$(3) '
   (check_literal)   '"' != ':'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: ':PRINT CHR$(3) '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname ':PRINT CHR$(3) ':
    (check_vname) check_vname ret0 ':PRINT CHR$(3) ':
   (check_variable) check_variable:ret0 
  (check_atom) check_atom:ret1

  (check_sub_expr) check_sub_expr:

   (check_literal) check_literal:lit=' (' idx=10 ' :PRINT CHR$(3) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'(' idx=11 ':PRINT CHR$(3) '
   (check_literal)   '(' != ':'
   (check_literal) check_literal: ret0
  (check_sub_expr) check_sub_expr: ret0
 (check_eitem) check_eitem:ret0
(scan_expression) scan_expression: ret1 ' :PRINT CHR$(3) ' commas:1
(scan_command) scan_command: ret1 =>'AT'
(scan_command) 
ENDEXP
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: AT type:17
(op_stack_print) 
------------------

(  output_sub_end)
(token_is_function) 
token_is_function:
(token_is_function) AT is function
Pop 5
Pop 'AT'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_function) [i,(U )] v v AT
(  output_sub_end)
Finalise stack
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'a%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? '' nidx:-1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'c%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'AT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
 BE:

Type Check Stack (0)

 BE:a%
type_check_stack_push: 'a%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'a%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'a%' type:i (0)
 BE:

Type Check Stack (1)

000: 'a%' type:i (0)
 BE:c%
type_check_stack_push: 'c%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'a%' type:0
(type_check_stack_print) 
001: 'c%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'a%' type:i (0)
001: 'c%' type:i (0)
 BE:

Type Check Stack (2)

000: 'a%' type:i (0)
001: 'c%' type:i (0)
 BE:AT
FN: 2 args
(function_return_type) 
function_return_type: 'AT' =>v
(function_return_type) 
function_return_type: 'AT' =>17
ret_type;17 v
typecheck_expression:Ret type of AT : v
type_check_stack_pop: 'c%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'a%' type:0
(type_check_stack_print) 
------------------

FN ARG 1 ri c% 0(i)  Arg ok
type_check_stack_pop: 'a%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (0)

(type_check_stack_print) 
------------------

FN ARG 0 ri a% 0(i)  Arg ok
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:17
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'a%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? '' nidx:-1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'c%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'AT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'a%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     i rq:i 'c%'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_FUNCTION     v rq:v 'AT'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
(process_expression_types) 
==INFIX==

Var: a% ary:0 NumIdx:0
infix_stack_push: 'a%'
Var: c% ary:0 NumIdx:0
infix_stack_push: 'c%'
infix_stack_pop: 'c%'
infix_stack_pop: 'a%'
infix_stack_push: 'AT(a% c% )'
infix_stack_pop: 'AT(a% c% )'
(process_expression_types) ==AT(a% c% )==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_START    U rq:?   0:
(    output_qcode) N4 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_FUNCTION     v rq:v AT  0:
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:i   0:

 (check_literal) check_literal:lit=':' idx=11 ':PRINT CHR$(3) '
 (check_literal) check_literal:After drop space:':' idx=11 ':PRINT CHR$(3) '
 (check_literal) check_literal:After while():PRINT CHR$(3) 
 (check_literal) check_literal:ret1 

 (scan_literal) scan_literal:lit=':' 'PRINT CHR$(3) '
 (scan_literal) scan_literal:After drop space:'PRINT CHR$(3) '
 (scan_literal) scan_literal:while loop:PRINT CHR$(3) 
 (scan_literal) scan_literal:ret1

 (check_line) check_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'PRINT CHR$(3) ':
    (check_vname) check_vname ret1 ' CHR$(3) ':
   (check_variable) check_variable: ' CHR$(3) '
   (check_variable) check_variable: Ary test ' CHR$(3) '

    (check_literal) check_literal:lit='(' idx=17 ' CHR$(3) '
    (check_literal) check_literal:After drop space:'(' idx=17 ' CHR$(3) '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=17 ' CHR$(3) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=18 'CHR$(3) '
  (check_literal)   '=' != 'C'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'PRINT CHR$(3) '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'PRINT'
(check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=9, ' CHR$(3) '
========================================================
  AT a%,c% :PRINT CHR$(3) 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'PRINT CHR$(3) ':
    (check_vname) check_vname ret1 ' CHR$(3) ':
   (check_variable) check_variable: ' CHR$(3) '
   (check_variable) check_variable: Ary test ' CHR$(3) '

    (check_literal) check_literal:lit='(' idx=17 ' CHR$(3) '
    (check_literal) check_literal:After drop space:'(' idx=17 ' CHR$(3) '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=17 ' CHR$(3) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=18 'CHR$(3) '
  (check_literal)   '=' != 'C'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'PRINT CHR$(3) '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'PRINT'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'PRINT' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) PRINT is function
 (function_return_type) 
function_return_type: 'PRINT' =>v
 (function_return_type) 
function_return_type: 'PRINT' =>17
process_token: 'PRINT' t=>v
 Push:'PRINT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' CHR$(3) '

   (check_eitem) check_eitem: 'CHR$(3) '

    (check_operator) check_operator: CHR$(3) 

     (check_literal) check_literal:lit=' ,' idx=18 'CHR$(3) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=18 'CHR$(3) '
     (check_literal)   ',' != 'C'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'CHR$(3) '
    (check_function) check_function: ret1 Found fn=>'CHR$'
   (check_eitem) check_eitem:ret1

   (scan_eitem) scan_eitem:

    (check_operator) check_operator: CHR$(3) 

     (check_literal) check_literal:lit=' ,' idx=18 'CHR$(3) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=18 'CHR$(3) '
     (check_literal)   ',' != 'C'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'CHR$(3) '
    (check_function) check_function: ret1 Found fn=>'CHR$'

    (scan_function) scan_function:
   Frst:0 T:'CHR$' exptype:U
    (token_is_function) 
token_is_function:
    (token_is_function) CHR$ is function
    (function_return_type) 
function_return_type: 'CHR$' =>s
    (function_return_type) 
function_return_type: 'CHR$' =>2
process_token: 'CHR$' t=>s
 Push:'CHR$'
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (3)

    (op_stack_print) 
000: PRINT type:17
    (op_stack_print) 
001: ( type:16
    (op_stack_print) 
002: CHR$ type:2
    (op_stack_print) 
------------------

    (scan_expression) n commas now:0

     (check_eitem) check_eitem: '(3) '

      (check_operator) check_operator: (3) 

       (check_literal) check_literal:lit=' ,' idx=22 '(3) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=22 '(3) '
       (check_literal)   ',' != '('
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: '(3) '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=22 '(3) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=22 '(3) '
       (check_literal)   '%' != '('
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=22 '(3) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=22 '(3) '
       (check_literal)   '"' != '('
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '(3) '
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname '(3) ':
        (check_vname) check_vname ret0 '(3) ':
       (check_variable) check_variable:ret0 
      (check_atom) check_atom:ret1

      (check_sub_expr) check_sub_expr:

       (check_literal) check_literal:lit=' (' idx=22 '(3) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'(' idx=22 '(3) '
       (check_literal) check_literal:After while():3) 
       (check_literal) check_literal:ret1 
      (check_sub_expr) check_sub_expr: ret1
     (check_eitem) check_eitem:ret1

     (scan_eitem) scan_eitem:

      (check_operator) check_operator: (3) 

       (check_literal) check_literal:lit=' ,' idx=22 '(3) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=22 '(3) '
       (check_literal)   ',' != '('
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: '(3) '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=22 '(3) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=22 '(3) '
       (check_literal)   '%' != '('
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=22 '(3) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=22 '(3) '
       (check_literal)   '"' != '('
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '(3) '
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname '(3) ':
        (check_vname) check_vname ret0 '(3) ':
       (check_variable) check_variable:ret0 
      (check_atom) check_atom:ret1

      (check_sub_expr) check_sub_expr:

       (check_literal) check_literal:lit=' (' idx=22 '(3) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'(' idx=22 '(3) '
       (check_literal) check_literal:After while():3) 
       (check_literal) check_literal:ret1 
      (check_sub_expr) check_sub_expr: ret1

      (scan_sub_expr) scan_sub_expr:

       (scan_literal) scan_literal:lit=' (' '(3) '
       (scan_literal) scan_literal:After drop space:'(3) '
       (scan_literal) scan_literal:while loop:(3) 
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (4)

       (op_stack_print) 
000: PRINT type:17
       (op_stack_print) 
001: ( type:16
       (op_stack_print) 
002: CHR$ type:2
       (op_stack_print) 
003: ( type:16
       (op_stack_print) 
------------------

       (scan_literal) scan_literal:ret1
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (5)

      (op_stack_print) 
000: PRINT type:17
      (op_stack_print) 
001: ( type:16
      (op_stack_print) 
002: CHR$ type:2
      (op_stack_print) 
003: ( type:16
      (op_stack_print) 
004: ( type:16
      (op_stack_print) 
------------------


       (scan_expression) scan_expression: '3) '

        (check_eitem) check_eitem: '3) '

         (check_operator) check_operator: 3) 

          (check_literal) check_literal:lit=' ,' idx=23 '3) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:',' idx=23 '3) '
          (check_literal)   ',' != '3'
          (check_literal) check_literal: ret0
         (check_operator) ret0:is comma: 0

         (check_function) check_function: '3) '
         (check_function) check_function: ret0

         (check_atom) check_atom:

          (check_literal) check_literal:lit=' %' idx=23 '3) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=23 '3) '
          (check_literal)   '%' != '3'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=23 '3) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=23 '3) '
          (check_literal)   '"' != '3'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '3) '
           (check_integer) check_integer:ret1
          (check_number) check_number: ret1
         (check_atom) check_atom:ret1
        (check_eitem) check_eitem:ret1

        (scan_eitem) scan_eitem:

         (check_operator) check_operator: 3) 

          (check_literal) check_literal:lit=' ,' idx=23 '3) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:',' idx=23 '3) '
          (check_literal)   ',' != '3'
          (check_literal) check_literal: ret0
         (check_operator) ret0:is comma: 0

         (check_function) check_function: '3) '
         (check_function) check_function: ret0

         (check_atom) check_atom:

          (check_literal) check_literal:lit=' %' idx=23 '3) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=23 '3) '
          (check_literal)   '%' != '3'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=23 '3) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=23 '3) '
          (check_literal)   '"' != '3'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '3) '
           (check_integer) check_integer:ret1
          (check_number) check_number: ret1
         (check_atom) check_atom:ret1

         (scan_atom) scan_atom:

          (check_literal) check_literal:lit=' %' idx=23 '3) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=23 '3) '
          (check_literal)   '%' != '3'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=23 '3) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=23 '3) '
          (check_literal)   '"' != '3'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '3) '
           (check_integer) check_integer:ret1
          (check_number) check_number: ret1

          (scan_number) scan_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '3) '
           (check_integer) check_integer:ret1

           (scan_integer) scan_integer:
           (scan_integer) scan_integer:ret1
   Frst:0 T:'3' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U U U )] i i 3
          (scan_integer) scan_integer:ret1  3
         (scan_atom) scan_atom:ret1
        (scan_expression) n commas now:0

         (check_eitem) check_eitem: ') '

          (check_operator) check_operator: ) 

           (check_literal) check_literal:lit=' ,' idx=24 ') '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:',' idx=24 ') '
           (check_literal)   ',' != ')'
           (check_literal) check_literal: ret0
          (check_operator) ret0:is comma: 0

          (check_function) check_function: ') '
          (check_function) check_function: ret0

          (check_atom) check_atom:

           (check_literal) check_literal:lit=' %' idx=24 ') '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'%' idx=24 ') '
           (check_literal)   '%' != ')'
           (check_literal) check_literal: ret0

           (check_literal) check_literal:lit=' "' idx=24 ') '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'"' idx=24 ') '
           (check_literal)   '"' != ')'
           (check_literal) check_literal: ret0

           (check_number) check_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret0

            (check_integer) check_integer: ') '
            (check_integer) check_integer:ret0
           (check_number) check_number: ret0

           (check_variable) check_variable:

            (check_vname) check_vname ') ':
            (check_vname) check_vname ret0 ') ':
           (check_variable) check_variable:ret0 
          (check_atom) check_atom:ret1

          (check_sub_expr) check_sub_expr:

           (check_literal) check_literal:lit=' (' idx=24 ') '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'(' idx=24 ') '
           (check_literal)   '(' != ')'
           (check_literal) check_literal: ret0
          (check_sub_expr) check_sub_expr: ret0
         (check_eitem) check_eitem:ret0
        (scan_expression) scan_expression: ret1 ') ' commas:0

        (scan_literal) scan_literal:lit=' )' ') '
        (scan_literal) scan_literal:After drop space:') '
        (scan_literal) scan_literal:while loop:) 
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
        (op_stack_print) 
------------------
        (op_stack_print) 
Operator Stack     (4)

        (op_stack_print) 
000: PRINT type:17
        (op_stack_print) 
001: ( type:16
        (op_stack_print) 
002: CHR$ type:2
        (op_stack_print) 
003: ( type:16
        (op_stack_print) 
------------------

(  output_sub_end)
        (token_is_function) 
token_is_function:
        (token_is_function) 
token_is_function:( is not function
(  output_sub_end)
        (scan_literal) scan_literal:ret1
   Frst:0 T:')' exptype:U
Pop 4
Pop '('
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (3)

       (op_stack_print) 
000: PRINT type:17
       (op_stack_print) 
001: ( type:16
       (op_stack_print) 
002: CHR$ type:2
       (op_stack_print) 
------------------

(  output_sub_end)
       (token_is_function) 
token_is_function:
       (token_is_function) CHR$ is function
Pop 5
Pop 'CHR$'
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (2)

       (op_stack_print) 
000: PRINT type:17
       (op_stack_print) 
001: ( type:16
       (op_stack_print) 
------------------

( output_function) [U,(U U )] s s CHR$
(  output_sub_end)
       (scan_sub_expr) scan_sub_expr:ret1
      (scan_expression) n commas now:0

       (check_eitem) check_eitem: ' '

        (check_operator) check_operator:  

         (check_literal) check_literal:lit=' ,' idx=26 ''
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:',' idx=26 ''
         (check_literal) check_literal  ret0 Empty test string
        (check_operator) ret0:is comma: 0

        (check_function) check_function: ''
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=25 ' '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=26 ''
         (check_literal) check_literal  ret0 Empty test string

         (check_literal) check_literal:lit=' "' idx=25 ' '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=26 ''
         (check_literal) check_literal  ret0 Empty test string

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: ''
          (check_integer) check_integer:ret0
         (check_number) check_number: ret0

         (check_variable) check_variable:

          (check_vname) check_vname '':
          (check_vname) check_vname ret0 '':
         (check_variable) check_variable:ret0 
        (check_atom) check_atom:ret1

        (check_sub_expr) check_sub_expr:

         (check_literal) check_literal:lit=' (' idx=25 ' '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'(' idx=26 ''
         (check_literal) check_literal  ret0 Empty test string
        (check_sub_expr) check_sub_expr: ret0
       (check_eitem) check_eitem:ret0
      (scan_expression) scan_expression: ret1 ' ' commas:0
     (scan_command) scan_command: ret1 =>'PRINT'
    (scan_command) 
ENDEXP
   Frst:0 T:')' exptype:U
Pop 4
Pop '('
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (1)

    (op_stack_print) 
000: PRINT type:17
    (op_stack_print) 
------------------

(  output_sub_end)
    (token_is_function) 
token_is_function:
    (token_is_function) PRINT is function
Pop 5
Pop 'PRINT'
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (0)

    (op_stack_print) 
------------------

( output_function) [U,(U )] v v PRINT
(  output_sub_end)
Finalise stack
    (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '3' nidx:24  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     s rq:s 'CHR$' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
 BE:

Type Check Stack (0)

 BE:

Type Check Stack (0)

 BE:

Type Check Stack (0)

 BE:3
type_check_stack_push: '3'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (1)

    (type_check_stack_print) 
000: '3' type:0
    (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '3' type:i (0)
 BE:

Type Check Stack (1)

000: '3' type:i (0)
 BE:

Type Check Stack (1)

000: '3' type:i (0)
 BE:

Type Check Stack (1)

000: '3' type:i (0)
 BE:CHR$
FN: 1 args
    (function_return_type) 
function_return_type: 'CHR$' =>s
    (function_return_type) 
function_return_type: 'CHR$' =>2
ret_type;2 s
typecheck_expression:Ret type of CHR$ : s
type_check_stack_pop: '3'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (0)

    (type_check_stack_print) 
------------------

FN ARG 0 ri 3 0(i)  Arg ok
type_check_stack_push: '000'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (1)

    (type_check_stack_print) 
000: '000' type:2
    (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:s (2)
 BE:

Type Check Stack (1)

000: '000' type:s (2)
 BE:

Type Check Stack (1)

000: '000' type:s (2)
 BE:PRINT
FN: 1 args
    (function_return_type) 
function_return_type: 'PRINT' =>v
    (function_return_type) 
function_return_type: 'PRINT' =>17
ret_type;17 v
typecheck_expression:Ret type of PRINT : v
type_check_stack_pop: '000'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (0)

    (type_check_stack_print) 
------------------

FN ARG 0 ri 000 2(s)  Arg not OK
type_check_stack_push: '000'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (1)

    (type_check_stack_print) 
000: '000' type:17
    (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '3' nidx:24  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     s rq:s 'CHR$' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_FUNCTION     s rq:s 'CHR$'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
(dump_exp_buffer2) N12 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
    (process_expression_types) 
==INFIX==

infix_stack_push: '3'
infix_stack_pop: '3'
infix_stack_push: 'CHR$(3 )'
infix_stack_pop: 'CHR$(3 )'
infix_stack_push: 'PRINT(CHR$(3 ) )'
infix_stack_pop: 'PRINT(CHR$(3 ) )'
    (process_expression_types) ==PRINT(CHR$(3 ) )==
    (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N4 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N8 EXP_BUFF_ID_FUNCTION     s rq:s CHR$  0:
(    output_qcode) N9 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N10 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N11 EXP_BUFF_ID_FUNCTION     v rq:v PRINT  0:
(    output_qcode) N12 EXP_BUFF_ID_SUB_END      U rq:i   0:

     (check_literal) check_literal:lit=':' idx=26 ''
     (check_literal) check_literal:After drop space:':' idx=26 ''
     (check_literal) check_literal  ret0 Empty test string
    (translate_file) 
cline scanned OK
**********************************************
**  AT a%,c1% :PRINT CHR$(3) :BEEP b%,10*b% **
**********************************************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'AT a%,c1% :PRINT CHR$(3) :BEEP b%,10*b% ':
     (check_vname) check_vname ret1 ' a%,c1% :PRINT CHR$(3) :BEEP b%,10*b% ':
    (check_variable) check_variable: ' a%,c1% :PRINT CHR$(3) :BEEP b%,10*b% '
    (check_variable) check_variable: Ary test ' a%,c1% :PRINT CHR$(3) :BEEP b%,10*b% '

     (check_literal) check_literal:lit='(' idx=4 ' a%,c1% :PRINT CHR$(3) :BEEP b%,10*b% '
     (check_literal) check_literal:After drop space:'(' idx=4 ' a%,c1% :PRINT CHR$(3) :BEEP b%,10*b% '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=4 ' a%,c1% :PRINT CHR$(3) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=5 'a%,c1% :PRINT CHR$(3) :BEEP b%,10*b% '
   (check_literal)   '=' != 'a'
   (check_literal) check_literal: ret0
  (check_assignment) check_assignment:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) check_textlabel: 'AT a%,c1% :PRINT CHR$(3) :BEEP b%,10*b% '
   (check_textlabel) check_textlabel:ret0
  (check_proc_call) check_proc_call:ret0

  (check_command) check_command:
  (check_command) check_command: ret1 found=> 'AT'
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=38, ' a%,c1% :PRINT CHR$(3) :BEEP b%,10*b% '
========================================================
  AT a%,c1% :PRINT CHR$(3) :BEEP b%,10*b% 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'AT a%,c1% :PRINT CHR$(3) :BEEP b%,10*b% ':
    (check_vname) check_vname ret1 ' a%,c1% :PRINT CHR$(3) :BEEP b%,10*b% ':
   (check_variable) check_variable: ' a%,c1% :PRINT CHR$(3) :BEEP b%,10*b% '
   (check_variable) check_variable: Ary test ' a%,c1% :PRINT CHR$(3) :BEEP b%,10*b% '

    (check_literal) check_literal:lit='(' idx=4 ' a%,c1% :PRINT CHR$(3) :BEEP b%,10*b% '
    (check_literal) check_literal:After drop space:'(' idx=4 ' a%,c1% :PRINT CHR$(3) :BEEP b%,10*b% '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=4 ' a%,c1% :PRINT CHR$(3) :BEEP b%,10*b% '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=5 'a%,c1% :PRINT CHR$(3) :BEEP b%,10*b% '
  (check_literal)   '=' != 'a'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'AT a%,c1% :PRINT CHR$(3) :BEEP b%,10*b% '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'AT'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'AT' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) AT is function
 (function_return_type) 
function_return_type: 'AT' =>v
 (function_return_type) 
function_return_type: 'AT' =>17
process_token: 'AT' t=>v
 Push:'AT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: AT type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: AT type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' a%,c1% :PRINT CHR$(3) :BEEP b%,10*b% '

   (check_eitem) check_eitem: 'a%,c1% :PRINT CHR$(3) :BEEP b%,10*b% '

    (check_operator) check_operator: a%,c1% :PRINT CHR$(3) :BEEP b%,10*b% 

     (check_literal) check_literal:lit=' ,' idx=5 'a%,c1% :PRINT CHR$(3) :BEEP b%,10*b% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=5 'a%,c1% :PRINT CHR$(3) :BEEP b%,10*b% '
     (check_literal)   ',' != 'a'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'a%,c1% :PRINT CHR$(3) :BEEP b%,10*b% '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=5 'a%,c1% :PRINT CHR$(3) :BEEP b%,10*b% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=5 'a%,c1% :PRINT CHR$(3) :BEEP b%,10*b% '
     (check_literal)   '%' != 'a'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=5 'a%,c1% :PRINT CHR$(3) :BEEP b%,10*b% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=5 'a%,c1% :PRINT CHR$(3) :BEEP b%,10*b% '
     (check_literal)   '"' != 'a'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'a%,c1% :PRINT CHR$(3) :BEEP b%,10*b% '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'a%,c1% :PRINT CHR$(3) :BEEP b%,10*b% ':
      (check_vname) check_vname ret1 '%,c1% :PRINT CHR$(3) :BEEP b%,10*b% ':
     (check_variable) check_variable: '%,c1% :PRINT CHR$(3) :BEEP b%,10*b% '
     (check_variable) check_variable: Ary test ',c1% :PRINT CHR$(3) :BEEP b%,10*b% '

      (check_literal) check_literal:lit='(' idx=7 ',c1% :PRINT CHR$(3) :BEEP b%,10*b% '
      (check_literal) check_literal:After drop space:'(' idx=7 ',c1% :PRINT CHR$(3) :BEEP b%,10*b% '
      (check_literal)   '(' != ','
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator: a%,c1% :PRINT CHR$(3) :BEEP b%,10*b% 

    (check_literal) check_literal:lit=' ,' idx=5 'a%,c1% :PRINT CHR$(3) :BEEP b%,10*b% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=5 'a%,c1% :PRINT CHR$(3) :BEEP b%,10*b% '
    (check_literal)   ',' != 'a'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'a%,c1% :PRINT CHR$(3) :BEEP b%,10*b% '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=5 'a%,c1% :PRINT CHR$(3) :BEEP b%,10*b% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=5 'a%,c1% :PRINT CHR$(3) :BEEP b%,10*b% '
    (check_literal)   '%' != 'a'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=5 'a%,c1% :PRINT CHR$(3) :BEEP b%,10*b% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=5 'a%,c1% :PRINT CHR$(3) :BEEP b%,10*b% '
    (check_literal)   '"' != 'a'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'a%,c1% :PRINT CHR$(3) :BEEP b%,10*b% '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'a%,c1% :PRINT CHR$(3) :BEEP b%,10*b% ':
     (check_vname) check_vname ret1 '%,c1% :PRINT CHR$(3) :BEEP b%,10*b% ':
    (check_variable) check_variable: '%,c1% :PRINT CHR$(3) :BEEP b%,10*b% '
    (check_variable) check_variable: Ary test ',c1% :PRINT CHR$(3) :BEEP b%,10*b% '

     (check_literal) check_literal:lit='(' idx=7 ',c1% :PRINT CHR$(3) :BEEP b%,10*b% '
     (check_literal) check_literal:After drop space:'(' idx=7 ',c1% :PRINT CHR$(3) :BEEP b%,10*b% '
     (check_literal)   '(' != ','
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1

  (scan_atom) scan_atom:

   (check_literal) check_literal:lit=' %' idx=5 'a%,c1% :PRINT CHR$(3) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=5 'a%,c1% :PRINT CHR$(3) :BEEP b%,10*b% '
   (check_literal)   '%' != 'a'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=5 'a%,c1% :PRINT CHR$(3) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=5 'a%,c1% :PRINT CHR$(3) :BEEP b%,10*b% '
   (check_literal)   '"' != 'a'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'a%,c1% :PRINT CHR$(3) :BEEP b%,10*b% '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'a%,c1% :PRINT CHR$(3) :BEEP b%,10*b% ':
    (check_vname) check_vname ret1 '%,c1% :PRINT CHR$(3) :BEEP b%,10*b% ':
   (check_variable) check_variable: '%,c1% :PRINT CHR$(3) :BEEP b%,10*b% '
   (check_variable) check_variable: Ary test ',c1% :PRINT CHR$(3) :BEEP b%,10*b% '

    (check_literal) check_literal:lit='(' idx=7 ',c1% :PRINT CHR$(3) :BEEP b%,10*b% '
    (check_literal) check_literal:After drop space:'(' idx=7 ',c1% :PRINT CHR$(3) :BEEP b%,10*b% '
    (check_literal)   '(' != ','
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'a%,c1% :PRINT CHR$(3) :BEEP b%,10*b% '
   (scan_vname) scan_vname: ret1 'a'
  (scan_variable) scan_variable: '%,c1% :PRINT CHR$(3) :BEEP b%,10*b% ' vname='a'
  (scan_variable) scan_variable: Ary test ',c1% :PRINT CHR$(3) :BEEP b%,10*b% '

   (check_literal) check_literal:lit='(' idx=7 ',c1% :PRINT CHR$(3) :BEEP b%,10*b% '
   (check_literal) check_literal:After drop space:'(' idx=7 ',c1% :PRINT CHR$(3) :BEEP b%,10*b% '
   (check_literal)   '(' != ','
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='a%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'a%' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:a% is not function
token_is_variable: tok:'a%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:a% is not function
 (init_get_name) 
init_get_name:'a%'
 (init_get_name) 
init_get_name:'a%'
 (get_name) 
get_name:gn:'a%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,(U )] i i a%
 (print_var_info) 
VAR INFO: '                a%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
 (scan_atom) scan_atom:ret1
(scan_expression) n commas now:0

 (check_eitem) check_eitem: ',c1% :PRINT CHR$(3) :BEEP b%,10*b% '

  (check_operator) check_operator: ,c1% :PRINT CHR$(3) :BEEP b%,10*b% 

   (check_literal) check_literal:lit=' ,' idx=7 ',c1% :PRINT CHR$(3) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=7 ',c1% :PRINT CHR$(3) :BEEP b%,10*b% '
   (check_literal) check_literal:After while():c1% :PRINT CHR$(3) :BEEP b%,10*b% 
   (check_literal) check_literal:ret1 
  (check_operator) ret1:is comma: 0
 (check_eitem) check_eitem:ret1 comma:1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: ,c1% :PRINT CHR$(3) :BEEP b%,10*b% 

   (check_literal) check_literal:lit=' ,' idx=7 ',c1% :PRINT CHR$(3) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=7 ',c1% :PRINT CHR$(3) :BEEP b%,10*b% '
   (check_literal) check_literal:After while():c1% :PRINT CHR$(3) :BEEP b%,10*b% 
   (check_literal) check_literal:ret1 
  (check_operator) ret1:is comma: 0

  (scan_operator) scan_operator: ',c1% :PRINT CHR$(3) :BEEP b%,10*b% '

   (check_literal) check_literal:lit=' ,' idx=7 ',c1% :PRINT CHR$(3) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=7 ',c1% :PRINT CHR$(3) :BEEP b%,10*b% '
   (check_literal) check_literal:After while():c1% :PRINT CHR$(3) :BEEP b%,10*b% 
   (check_literal) check_literal:ret1 

   (scan_literal) scan_literal:lit=' ,' ',c1% :PRINT CHR$(3) :BEEP b%,10*b% '
   (scan_literal) scan_literal:After drop space:',c1% :PRINT CHR$(3) :BEEP b%,10*b% '
   (scan_literal) scan_literal:while loop:,c1% :PRINT CHR$(3) :BEEP b%,10*b% 
   Frst:0 T:',' exptype:i
(output_sub_start)
   (scan_literal) scan_literal:ret1
  (scan_operator) ret1:is comma: 1
 (scan_eitem) Is comma;1
 (scan_expression) n commas now:1

  (check_eitem) check_eitem: 'c1% :PRINT CHR$(3) :BEEP b%,10*b% '

   (check_operator) check_operator: c1% :PRINT CHR$(3) :BEEP b%,10*b% 

    (check_literal) check_literal:lit=' ,' idx=8 'c1% :PRINT CHR$(3) :BEEP b%,10*b% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=8 'c1% :PRINT CHR$(3) :BEEP b%,10*b% '
    (check_literal)   ',' != 'c'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'c1% :PRINT CHR$(3) :BEEP b%,10*b% '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=8 'c1% :PRINT CHR$(3) :BEEP b%,10*b% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=8 'c1% :PRINT CHR$(3) :BEEP b%,10*b% '
    (check_literal)   '%' != 'c'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=8 'c1% :PRINT CHR$(3) :BEEP b%,10*b% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=8 'c1% :PRINT CHR$(3) :BEEP b%,10*b% '
    (check_literal)   '"' != 'c'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'c1% :PRINT CHR$(3) :BEEP b%,10*b% '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'c1% :PRINT CHR$(3) :BEEP b%,10*b% ':
     (check_vname) check_vname ret1 '% :PRINT CHR$(3) :BEEP b%,10*b% ':
    (check_variable) check_variable: '% :PRINT CHR$(3) :BEEP b%,10*b% '
    (check_variable) check_variable: Ary test ' :PRINT CHR$(3) :BEEP b%,10*b% '

     (check_literal) check_literal:lit='(' idx=11 ' :PRINT CHR$(3) :BEEP b%,10*b% '
     (check_literal) check_literal:After drop space:'(' idx=11 ' :PRINT CHR$(3) :BEEP b%,10*b% '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1
 (check_eitem) check_eitem:ret1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: c1% :PRINT CHR$(3) :BEEP b%,10*b% 

   (check_literal) check_literal:lit=' ,' idx=8 'c1% :PRINT CHR$(3) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=8 'c1% :PRINT CHR$(3) :BEEP b%,10*b% '
   (check_literal)   ',' != 'c'
   (check_literal) check_literal: ret0
  (check_operator) ret0:is comma: 0

  (check_function) check_function: 'c1% :PRINT CHR$(3) :BEEP b%,10*b% '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=8 'c1% :PRINT CHR$(3) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=8 'c1% :PRINT CHR$(3) :BEEP b%,10*b% '
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=8 'c1% :PRINT CHR$(3) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=8 'c1% :PRINT CHR$(3) :BEEP b%,10*b% '
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c1% :PRINT CHR$(3) :BEEP b%,10*b% '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'c1% :PRINT CHR$(3) :BEEP b%,10*b% ':
    (check_vname) check_vname ret1 '% :PRINT CHR$(3) :BEEP b%,10*b% ':
   (check_variable) check_variable: '% :PRINT CHR$(3) :BEEP b%,10*b% '
   (check_variable) check_variable: Ary test ' :PRINT CHR$(3) :BEEP b%,10*b% '

    (check_literal) check_literal:lit='(' idx=11 ' :PRINT CHR$(3) :BEEP b%,10*b% '
    (check_literal) check_literal:After drop space:'(' idx=11 ' :PRINT CHR$(3) :BEEP b%,10*b% '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) check_atom:ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=8 'c1% :PRINT CHR$(3) :BEEP b%,10*b% '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=8 'c1% :PRINT CHR$(3) :BEEP b%,10*b% '
  (check_literal)   '%' != 'c'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=8 'c1% :PRINT CHR$(3) :BEEP b%,10*b% '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=8 'c1% :PRINT CHR$(3) :BEEP b%,10*b% '
  (check_literal)   '"' != 'c'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) check_float: ret0

   (check_integer) check_integer: 'c1% :PRINT CHR$(3) :BEEP b%,10*b% '
   (check_integer) check_integer:ret0
  (check_number) check_number: ret0

  (check_variable) check_variable:

   (check_vname) check_vname 'c1% :PRINT CHR$(3) :BEEP b%,10*b% ':
   (check_vname) check_vname ret1 '% :PRINT CHR$(3) :BEEP b%,10*b% ':
  (check_variable) check_variable: '% :PRINT CHR$(3) :BEEP b%,10*b% '
  (check_variable) check_variable: Ary test ' :PRINT CHR$(3) :BEEP b%,10*b% '

   (check_literal) check_literal:lit='(' idx=11 ' :PRINT CHR$(3) :BEEP b%,10*b% '
   (check_literal) check_literal:After drop space:'(' idx=11 ' :PRINT CHR$(3) :BEEP b%,10*b% '
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) scan_variable:

  (scan_vname) scan_vname: 'c1% :PRINT CHR$(3) :BEEP b%,10*b% '
  (scan_vname) scan_vname: ret1 'c1'
 (scan_variable) scan_variable: '% :PRINT CHR$(3) :BEEP b%,10*b% ' vname='c1'
 (scan_variable) scan_variable: Ary test ' :PRINT CHR$(3) :BEEP b%,10*b% '

  (check_literal) check_literal:lit='(' idx=11 ' :PRINT CHR$(3) :BEEP b%,10*b% '
  (check_literal) check_literal:After drop space:'(' idx=11 ' :PRINT CHR$(3) :BEEP b%,10*b% '
  (check_literal)   '(' != ' '
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='c1%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'c1%' exptype:U
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:c1% is not function
token_is_variable: tok:'c1%'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:c1% is not function
(init_get_name) 
init_get_name:'c1%'
(init_get_name) 
init_get_name:'c1%'
(get_name) 
get_name:gn:'c1%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,(U )] i i c1%
(print_var_info) 
VAR INFO: '               c1%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
(scan_atom) scan_atom:ret1
(scan_expression) n commas now:1

 (check_eitem) check_eitem: ' :PRINT CHR$(3) :BEEP b%,10*b% '

  (check_operator) check_operator:  :PRINT CHR$(3) :BEEP b%,10*b% 

   (check_literal) check_literal:lit=' ,' idx=12 ':PRINT CHR$(3) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=12 ':PRINT CHR$(3) :BEEP b%,10*b% '
   (check_literal)   ',' != ':'
   (check_literal) check_literal: ret0
  (check_operator) ret0:is comma: 0

  (check_function) check_function: ':PRINT CHR$(3) :BEEP b%,10*b% '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=11 ' :PRINT CHR$(3) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=12 ':PRINT CHR$(3) :BEEP b%,10*b% '
   (check_literal)   '%' != ':'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=11 ' :PRINT CHR$(3) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=12 ':PRINT CHR$(3) :BEEP b%,10*b% '
   (check_literal)   '"' != ':'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: ':PRINT CHR$(3) :BEEP b%,10*b% '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname ':PRINT CHR$(3) :BEEP b%,10*b% ':
    (check_vname) check_vname ret0 ':PRINT CHR$(3) :BEEP b%,10*b% ':
   (check_variable) check_variable:ret0 
  (check_atom) check_atom:ret1

  (check_sub_expr) check_sub_expr:

   (check_literal) check_literal:lit=' (' idx=11 ' :PRINT CHR$(3) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'(' idx=12 ':PRINT CHR$(3) :BEEP b%,10*b% '
   (check_literal)   '(' != ':'
   (check_literal) check_literal: ret0
  (check_sub_expr) check_sub_expr: ret0
 (check_eitem) check_eitem:ret0
(scan_expression) scan_expression: ret1 ' :PRINT CHR$(3) :BEEP b%,10*b% ' commas:1
(scan_command) scan_command: ret1 =>'AT'
(scan_command) 
ENDEXP
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: AT type:17
(op_stack_print) 
------------------

(  output_sub_end)
(token_is_function) 
token_is_function:
(token_is_function) AT is function
Pop 5
Pop 'AT'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_function) [i,(U )] v v AT
(  output_sub_end)
Finalise stack
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'a%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? '' nidx:-1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'c1%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'AT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
 BE:

Type Check Stack (0)

 BE:a%
type_check_stack_push: 'a%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'a%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'a%' type:i (0)
 BE:

Type Check Stack (1)

000: 'a%' type:i (0)
 BE:c1%
type_check_stack_push: 'c1%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'a%' type:0
(type_check_stack_print) 
001: 'c1%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'a%' type:i (0)
001: 'c1%' type:i (0)
 BE:

Type Check Stack (2)

000: 'a%' type:i (0)
001: 'c1%' type:i (0)
 BE:AT
FN: 2 args
(function_return_type) 
function_return_type: 'AT' =>v
(function_return_type) 
function_return_type: 'AT' =>17
ret_type;17 v
typecheck_expression:Ret type of AT : v
type_check_stack_pop: 'c1%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'a%' type:0
(type_check_stack_print) 
------------------

FN ARG 1 ri c1% 0(i)  Arg ok
type_check_stack_pop: 'a%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (0)

(type_check_stack_print) 
------------------

FN ARG 0 ri a% 0(i)  Arg ok
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:17
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'a%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? '' nidx:-1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'c1%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'AT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'a%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     i rq:i 'c1%'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_FUNCTION     v rq:v 'AT'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
(process_expression_types) 
==INFIX==

Var: a% ary:0 NumIdx:0
infix_stack_push: 'a%'
Var: c1% ary:0 NumIdx:0
infix_stack_push: 'c1%'
infix_stack_pop: 'c1%'
infix_stack_pop: 'a%'
infix_stack_push: 'AT(a% c1% )'
infix_stack_pop: 'AT(a% c1% )'
(process_expression_types) ==AT(a% c1% )==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_START    U rq:?   0:
(    output_qcode) N4 EXP_BUFF_ID_VARIABLE     i rq:i c1%  0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_FUNCTION     v rq:v AT  0:
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:i   0:

 (check_literal) check_literal:lit=':' idx=12 ':PRINT CHR$(3) :BEEP b%,10*b% '
 (check_literal) check_literal:After drop space:':' idx=12 ':PRINT CHR$(3) :BEEP b%,10*b% '
 (check_literal) check_literal:After while():PRINT CHR$(3) :BEEP b%,10*b% 
 (check_literal) check_literal:ret1 

 (scan_literal) scan_literal:lit=':' 'PRINT CHR$(3) :BEEP b%,10*b% '
 (scan_literal) scan_literal:After drop space:'PRINT CHR$(3) :BEEP b%,10*b% '
 (scan_literal) scan_literal:while loop:PRINT CHR$(3) :BEEP b%,10*b% 
 (scan_literal) scan_literal:ret1

 (check_line) check_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'PRINT CHR$(3) :BEEP b%,10*b% ':
    (check_vname) check_vname ret1 ' CHR$(3) :BEEP b%,10*b% ':
   (check_variable) check_variable: ' CHR$(3) :BEEP b%,10*b% '
   (check_variable) check_variable: Ary test ' CHR$(3) :BEEP b%,10*b% '

    (check_literal) check_literal:lit='(' idx=18 ' CHR$(3) :BEEP b%,10*b% '
    (check_literal) check_literal:After drop space:'(' idx=18 ' CHR$(3) :BEEP b%,10*b% '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=18 ' CHR$(3) :BEEP b%,10*b% '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=19 'CHR$(3) :BEEP b%,10*b% '
  (check_literal)   '=' != 'C'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'PRINT CHR$(3) :BEEP b%,10*b% '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'PRINT'
(check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=24, ' CHR$(3) :BEEP b%,10*b% '
========================================================
  AT a%,c1% :PRINT CHR$(3) :BEEP b%,10*b% 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'PRINT CHR$(3) :BEEP b%,10*b% ':
    (check_vname) check_vname ret1 ' CHR$(3) :BEEP b%,10*b% ':
   (check_variable) check_variable: ' CHR$(3) :BEEP b%,10*b% '
   (check_variable) check_variable: Ary test ' CHR$(3) :BEEP b%,10*b% '

    (check_literal) check_literal:lit='(' idx=18 ' CHR$(3) :BEEP b%,10*b% '
    (check_literal) check_literal:After drop space:'(' idx=18 ' CHR$(3) :BEEP b%,10*b% '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=18 ' CHR$(3) :BEEP b%,10*b% '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=19 'CHR$(3) :BEEP b%,10*b% '
  (check_literal)   '=' != 'C'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'PRINT CHR$(3) :BEEP b%,10*b% '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'PRINT'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'PRINT' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) PRINT is function
 (function_return_type) 
function_return_type: 'PRINT' =>v
 (function_return_type) 
function_return_type: 'PRINT' =>17
process_token: 'PRINT' t=>v
 Push:'PRINT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' CHR$(3) :BEEP b%,10*b% '

   (check_eitem) check_eitem: 'CHR$(3) :BEEP b%,10*b% '

    (check_operator) check_operator: CHR$(3) :BEEP b%,10*b% 

     (check_literal) check_literal:lit=' ,' idx=19 'CHR$(3) :BEEP b%,10*b% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=19 'CHR$(3) :BEEP b%,10*b% '
     (check_literal)   ',' != 'C'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'CHR$(3) :BEEP b%,10*b% '
    (check_function) check_function: ret1 Found fn=>'CHR$'
   (check_eitem) check_eitem:ret1

   (scan_eitem) scan_eitem:

    (check_operator) check_operator: CHR$(3) :BEEP b%,10*b% 

     (check_literal) check_literal:lit=' ,' idx=19 'CHR$(3) :BEEP b%,10*b% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=19 'CHR$(3) :BEEP b%,10*b% '
     (check_literal)   ',' != 'C'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'CHR$(3) :BEEP b%,10*b% '
    (check_function) check_function: ret1 Found fn=>'CHR$'

    (scan_function) scan_function:
   Frst:0 T:'CHR$' exptype:U
    (token_is_function) 
token_is_function:
    (token_is_function) CHR$ is function
    (function_return_type) 
function_return_type: 'CHR$' =>s
    (function_return_type) 
function_return_type: 'CHR$' =>2
process_token: 'CHR$' t=>s
 Push:'CHR$'
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (3)

    (op_stack_print) 
000: PRINT type:17
    (op_stack_print) 
001: ( type:16
    (op_stack_print) 
002: CHR$ type:2
    (op_stack_print) 
------------------

    (scan_expression) n commas now:0

     (check_eitem) check_eitem: '(3) :BEEP b%,10*b% '

      (check_operator) check_operator: (3) :BEEP b%,10*b% 

       (check_literal) check_literal:lit=' ,' idx=23 '(3) :BEEP b%,10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=23 '(3) :BEEP b%,10*b% '
       (check_literal)   ',' != '('
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: '(3) :BEEP b%,10*b% '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=23 '(3) :BEEP b%,10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=23 '(3) :BEEP b%,10*b% '
       (check_literal)   '%' != '('
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=23 '(3) :BEEP b%,10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=23 '(3) :BEEP b%,10*b% '
       (check_literal)   '"' != '('
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '(3) :BEEP b%,10*b% '
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname '(3) :BEEP b%,10*b% ':
        (check_vname) check_vname ret0 '(3) :BEEP b%,10*b% ':
       (check_variable) check_variable:ret0 
      (check_atom) check_atom:ret1

      (check_sub_expr) check_sub_expr:

       (check_literal) check_literal:lit=' (' idx=23 '(3) :BEEP b%,10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'(' idx=23 '(3) :BEEP b%,10*b% '
       (check_literal) check_literal:After while():3) :BEEP b%,10*b% 
       (check_literal) check_literal:ret1 
      (check_sub_expr) check_sub_expr: ret1
     (check_eitem) check_eitem:ret1

     (scan_eitem) scan_eitem:

      (check_operator) check_operator: (3) :BEEP b%,10*b% 

       (check_literal) check_literal:lit=' ,' idx=23 '(3) :BEEP b%,10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=23 '(3) :BEEP b%,10*b% '
       (check_literal)   ',' != '('
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: '(3) :BEEP b%,10*b% '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=23 '(3) :BEEP b%,10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=23 '(3) :BEEP b%,10*b% '
       (check_literal)   '%' != '('
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=23 '(3) :BEEP b%,10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=23 '(3) :BEEP b%,10*b% '
       (check_literal)   '"' != '('
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '(3) :BEEP b%,10*b% '
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname '(3) :BEEP b%,10*b% ':
        (check_vname) check_vname ret0 '(3) :BEEP b%,10*b% ':
       (check_variable) check_variable:ret0 
      (check_atom) check_atom:ret1

      (check_sub_expr) check_sub_expr:

       (check_literal) check_literal:lit=' (' idx=23 '(3) :BEEP b%,10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'(' idx=23 '(3) :BEEP b%,10*b% '
       (check_literal) check_literal:After while():3) :BEEP b%,10*b% 
       (check_literal) check_literal:ret1 
      (check_sub_expr) check_sub_expr: ret1

      (scan_sub_expr) scan_sub_expr:

       (scan_literal) scan_literal:lit=' (' '(3) :BEEP b%,10*b% '
       (scan_literal) scan_literal:After drop space:'(3) :BEEP b%,10*b% '
       (scan_literal) scan_literal:while loop:(3) :BEEP b%,10*b% 
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (4)

       (op_stack_print) 
000: PRINT type:17
       (op_stack_print) 
001: ( type:16
       (op_stack_print) 
002: CHR$ type:2
       (op_stack_print) 
003: ( type:16
       (op_stack_print) 
------------------

       (scan_literal) scan_literal:ret1
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (5)

      (op_stack_print) 
000: PRINT type:17
      (op_stack_print) 
001: ( type:16
      (op_stack_print) 
002: CHR$ type:2
      (op_stack_print) 
003: ( type:16
      (op_stack_print) 
004: ( type:16
      (op_stack_print) 
------------------


       (scan_expression) scan_expression: '3) :BEEP b%,10*b% '

        (check_eitem) check_eitem: '3) :BEEP b%,10*b% '

         (check_operator) check_operator: 3) :BEEP b%,10*b% 

          (check_literal) check_literal:lit=' ,' idx=24 '3) :BEEP b%,10*b% '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:',' idx=24 '3) :BEEP b%,10*b% '
          (check_literal)   ',' != '3'
          (check_literal) check_literal: ret0
         (check_operator) ret0:is comma: 0

         (check_function) check_function: '3) :BEEP b%,10*b% '
         (check_function) check_function: ret0

         (check_atom) check_atom:

          (check_literal) check_literal:lit=' %' idx=24 '3) :BEEP b%,10*b% '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=24 '3) :BEEP b%,10*b% '
          (check_literal)   '%' != '3'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=24 '3) :BEEP b%,10*b% '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=24 '3) :BEEP b%,10*b% '
          (check_literal)   '"' != '3'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '3) :BEEP b%,10*b% '
           (check_integer) check_integer:ret1
          (check_number) check_number: ret1
         (check_atom) check_atom:ret1
        (check_eitem) check_eitem:ret1

        (scan_eitem) scan_eitem:

         (check_operator) check_operator: 3) :BEEP b%,10*b% 

          (check_literal) check_literal:lit=' ,' idx=24 '3) :BEEP b%,10*b% '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:',' idx=24 '3) :BEEP b%,10*b% '
          (check_literal)   ',' != '3'
          (check_literal) check_literal: ret0
         (check_operator) ret0:is comma: 0

         (check_function) check_function: '3) :BEEP b%,10*b% '
         (check_function) check_function: ret0

         (check_atom) check_atom:

          (check_literal) check_literal:lit=' %' idx=24 '3) :BEEP b%,10*b% '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=24 '3) :BEEP b%,10*b% '
          (check_literal)   '%' != '3'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=24 '3) :BEEP b%,10*b% '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=24 '3) :BEEP b%,10*b% '
          (check_literal)   '"' != '3'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '3) :BEEP b%,10*b% '
           (check_integer) check_integer:ret1
          (check_number) check_number: ret1
         (check_atom) check_atom:ret1

         (scan_atom) scan_atom:

          (check_literal) check_literal:lit=' %' idx=24 '3) :BEEP b%,10*b% '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=24 '3) :BEEP b%,10*b% '
          (check_literal)   '%' != '3'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=24 '3) :BEEP b%,10*b% '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=24 '3) :BEEP b%,10*b% '
          (check_literal)   '"' != '3'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '3) :BEEP b%,10*b% '
           (check_integer) check_integer:ret1
          (check_number) check_number: ret1

          (scan_number) scan_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '3) :BEEP b%,10*b% '
           (check_integer) check_integer:ret1

           (scan_integer) scan_integer:
           (scan_integer) scan_integer:ret1
   Frst:0 T:'3' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U U U )] i i 3
          (scan_integer) scan_integer:ret1  3
         (scan_atom) scan_atom:ret1
        (scan_expression) n commas now:0

         (check_eitem) check_eitem: ') :BEEP b%,10*b% '

          (check_operator) check_operator: ) :BEEP b%,10*b% 

           (check_literal) check_literal:lit=' ,' idx=25 ') :BEEP b%,10*b% '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:',' idx=25 ') :BEEP b%,10*b% '
           (check_literal)   ',' != ')'
           (check_literal) check_literal: ret0
          (check_operator) ret0:is comma: 0

          (check_function) check_function: ') :BEEP b%,10*b% '
          (check_function) check_function: ret0

          (check_atom) check_atom:

           (check_literal) check_literal:lit=' %' idx=25 ') :BEEP b%,10*b% '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'%' idx=25 ') :BEEP b%,10*b% '
           (check_literal)   '%' != ')'
           (check_literal) check_literal: ret0

           (check_literal) check_literal:lit=' "' idx=25 ') :BEEP b%,10*b% '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'"' idx=25 ') :BEEP b%,10*b% '
           (check_literal)   '"' != ')'
           (check_literal) check_literal: ret0

           (check_number) check_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret0

            (check_integer) check_integer: ') :BEEP b%,10*b% '
            (check_integer) check_integer:ret0
           (check_number) check_number: ret0

           (check_variable) check_variable:

            (check_vname) check_vname ') :BEEP b%,10*b% ':
            (check_vname) check_vname ret0 ') :BEEP b%,10*b% ':
           (check_variable) check_variable:ret0 
          (check_atom) check_atom:ret1

          (check_sub_expr) check_sub_expr:

           (check_literal) check_literal:lit=' (' idx=25 ') :BEEP b%,10*b% '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'(' idx=25 ') :BEEP b%,10*b% '
           (check_literal)   '(' != ')'
           (check_literal) check_literal: ret0
          (check_sub_expr) check_sub_expr: ret0
         (check_eitem) check_eitem:ret0
        (scan_expression) scan_expression: ret1 ') :BEEP b%,10*b% ' commas:0

        (scan_literal) scan_literal:lit=' )' ') :BEEP b%,10*b% '
        (scan_literal) scan_literal:After drop space:') :BEEP b%,10*b% '
        (scan_literal) scan_literal:while loop:) :BEEP b%,10*b% 
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
        (op_stack_print) 
------------------
        (op_stack_print) 
Operator Stack     (4)

        (op_stack_print) 
000: PRINT type:17
        (op_stack_print) 
001: ( type:16
        (op_stack_print) 
002: CHR$ type:2
        (op_stack_print) 
003: ( type:16
        (op_stack_print) 
------------------

(  output_sub_end)
        (token_is_function) 
token_is_function:
        (token_is_function) 
token_is_function:( is not function
(  output_sub_end)
        (scan_literal) scan_literal:ret1
   Frst:0 T:')' exptype:U
Pop 4
Pop '('
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (3)

       (op_stack_print) 
000: PRINT type:17
       (op_stack_print) 
001: ( type:16
       (op_stack_print) 
002: CHR$ type:2
       (op_stack_print) 
------------------

(  output_sub_end)
       (token_is_function) 
token_is_function:
       (token_is_function) CHR$ is function
Pop 5
Pop 'CHR$'
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (2)

       (op_stack_print) 
000: PRINT type:17
       (op_stack_print) 
001: ( type:16
       (op_stack_print) 
------------------

( output_function) [U,(U U )] s s CHR$
(  output_sub_end)
       (scan_sub_expr) scan_sub_expr:ret1
      (scan_expression) n commas now:0

       (check_eitem) check_eitem: ' :BEEP b%,10*b% '

        (check_operator) check_operator:  :BEEP b%,10*b% 

         (check_literal) check_literal:lit=' ,' idx=27 ':BEEP b%,10*b% '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:',' idx=27 ':BEEP b%,10*b% '
         (check_literal)   ',' != ':'
         (check_literal) check_literal: ret0
        (check_operator) ret0:is comma: 0

        (check_function) check_function: ':BEEP b%,10*b% '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=26 ' :BEEP b%,10*b% '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=27 ':BEEP b%,10*b% '
         (check_literal)   '%' != ':'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=26 ' :BEEP b%,10*b% '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=27 ':BEEP b%,10*b% '
         (check_literal)   '"' != ':'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: ':BEEP b%,10*b% '
          (check_integer) check_integer:ret0
         (check_number) check_number: ret0

         (check_variable) check_variable:

          (check_vname) check_vname ':BEEP b%,10*b% ':
          (check_vname) check_vname ret0 ':BEEP b%,10*b% ':
         (check_variable) check_variable:ret0 
        (check_atom) check_atom:ret1

        (check_sub_expr) check_sub_expr:

         (check_literal) check_literal:lit=' (' idx=26 ' :BEEP b%,10*b% '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'(' idx=27 ':BEEP b%,10*b% '
         (check_literal)   '(' != ':'
         (check_literal) check_literal: ret0
        (check_sub_expr) check_sub_expr: ret0
       (check_eitem) check_eitem:ret0
      (scan_expression) scan_expression: ret1 ' :BEEP b%,10*b% ' commas:0
     (scan_command) scan_command: ret1 =>'PRINT'
    (scan_command) 
ENDEXP
   Frst:0 T:')' exptype:U
Pop 4
Pop '('
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (1)

    (op_stack_print) 
000: PRINT type:17
    (op_stack_print) 
------------------

(  output_sub_end)
    (token_is_function) 
token_is_function:
    (token_is_function) PRINT is function
Pop 5
Pop 'PRINT'
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (0)

    (op_stack_print) 
------------------

( output_function) [U,(U )] v v PRINT
(  output_sub_end)
Finalise stack
    (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '3' nidx:25  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     s rq:s 'CHR$' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
 BE:

Type Check Stack (0)

 BE:

Type Check Stack (0)

 BE:

Type Check Stack (0)

 BE:3
type_check_stack_push: '3'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (1)

    (type_check_stack_print) 
000: '3' type:0
    (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '3' type:i (0)
 BE:

Type Check Stack (1)

000: '3' type:i (0)
 BE:

Type Check Stack (1)

000: '3' type:i (0)
 BE:

Type Check Stack (1)

000: '3' type:i (0)
 BE:CHR$
FN: 1 args
    (function_return_type) 
function_return_type: 'CHR$' =>s
    (function_return_type) 
function_return_type: 'CHR$' =>2
ret_type;2 s
typecheck_expression:Ret type of CHR$ : s
type_check_stack_pop: '3'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (0)

    (type_check_stack_print) 
------------------

FN ARG 0 ri 3 0(i)  Arg ok
type_check_stack_push: '000'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (1)

    (type_check_stack_print) 
000: '000' type:2
    (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:s (2)
 BE:

Type Check Stack (1)

000: '000' type:s (2)
 BE:

Type Check Stack (1)

000: '000' type:s (2)
 BE:PRINT
FN: 1 args
    (function_return_type) 
function_return_type: 'PRINT' =>v
    (function_return_type) 
function_return_type: 'PRINT' =>17
ret_type;17 v
typecheck_expression:Ret type of PRINT : v
type_check_stack_pop: '000'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (0)

    (type_check_stack_print) 
------------------

FN ARG 0 ri 000 2(s)  Arg not OK
type_check_stack_push: '000'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (1)

    (type_check_stack_print) 
000: '000' type:17
    (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '3' nidx:25  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     s rq:s 'CHR$' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_INTEGER      i rq:i '3'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_FUNCTION     s rq:s 'CHR$'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
(dump_exp_buffer2) N12 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
    (process_expression_types) 
==INFIX==

infix_stack_push: '3'
infix_stack_pop: '3'
infix_stack_push: 'CHR$(3 )'
infix_stack_pop: 'CHR$(3 )'
infix_stack_push: 'PRINT(CHR$(3 ) )'
infix_stack_pop: 'PRINT(CHR$(3 ) )'
    (process_expression_types) ==PRINT(CHR$(3 ) )==
    (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N4 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N8 EXP_BUFF_ID_FUNCTION     s rq:s CHR$  0:
(    output_qcode) N9 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N10 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N11 EXP_BUFF_ID_FUNCTION     v rq:v PRINT  0:
(    output_qcode) N12 EXP_BUFF_ID_SUB_END      U rq:i   0:

     (check_literal) check_literal:lit=':' idx=27 ':BEEP b%,10*b% '
     (check_literal) check_literal:After drop space:':' idx=27 ':BEEP b%,10*b% '
     (check_literal) check_literal:After while():BEEP b%,10*b% 
     (check_literal) check_literal:ret1 

     (scan_literal) scan_literal:lit=':' 'BEEP b%,10*b% '
     (scan_literal) scan_literal:After drop space:'BEEP b%,10*b% '
     (scan_literal) scan_literal:while loop:BEEP b%,10*b% 
     (scan_literal) scan_literal:ret1

     (check_line) check_line:

      (check_assignment) check_assignment:

       (check_variable) check_variable:

        (check_vname) check_vname 'BEEP b%,10*b% ':
        (check_vname) check_vname ret1 ' b%,10*b% ':
       (check_variable) check_variable: ' b%,10*b% '
       (check_variable) check_variable: Ary test ' b%,10*b% '

        (check_literal) check_literal:lit='(' idx=32 ' b%,10*b% '
        (check_literal) check_literal:After drop space:'(' idx=32 ' b%,10*b% '
        (check_literal)   '(' != ' '
        (check_literal) check_literal: ret0
       (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
      (check_variable) check_variable:ret1 

      (check_literal) check_literal:lit=' =' idx=32 ' b%,10*b% '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'=' idx=33 'b%,10*b% '
      (check_literal)   '=' != 'b'
      (check_literal) check_literal: ret0
     (check_assignment) check_assignment:ret0

     (check_proc_call) check_proc_call:

      (check_textlabel) check_textlabel: 'BEEP b%,10*b% '
      (check_textlabel) check_textlabel:ret0
     (check_proc_call) check_proc_call:ret0

     (check_command) check_command:
     (check_command) check_command: ret1 found=> 'BEEP'
    (check_line) check_line:ret1
   (scan_cline) scan_cline: Checked len=10, ' b%,10*b% '
========================================================
  AT a%,c1% :PRINT CHR$(3) :BEEP b%,10*b% 
========================================================
(output_expression_start)

    (scan_line) scan_line:

     (check_assignment) check_assignment:

      (check_variable) check_variable:

       (check_vname) check_vname 'BEEP b%,10*b% ':
       (check_vname) check_vname ret1 ' b%,10*b% ':
      (check_variable) check_variable: ' b%,10*b% '
      (check_variable) check_variable: Ary test ' b%,10*b% '

       (check_literal) check_literal:lit='(' idx=32 ' b%,10*b% '
       (check_literal) check_literal:After drop space:'(' idx=32 ' b%,10*b% '
       (check_literal)   '(' != ' '
       (check_literal) check_literal: ret0
      (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
     (check_variable) check_variable:ret1 

     (check_literal) check_literal:lit=' =' idx=32 ' b%,10*b% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'=' idx=33 'b%,10*b% '
     (check_literal)   '=' != 'b'
     (check_literal) check_literal: ret0
    (check_assignment) check_assignment:ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) check_textlabel: 'BEEP b%,10*b% '
     (check_textlabel) check_textlabel:ret0
    (check_proc_call) check_proc_call:ret0

    (check_command) check_command:
    (check_command) check_command: ret1 found=> 'BEEP'
   (scan_line) scan_line:check_command: 

    (scan_command) scan_command:
   Frst:1 T:'BEEP' exptype:U
    (token_is_function) 
token_is_function:
    (token_is_function) BEEP is function
    (function_return_type) 
function_return_type: 'BEEP' =>v
    (function_return_type) 
function_return_type: 'BEEP' =>17
process_token: 'BEEP' t=>v
 Push:'BEEP'
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (1)

    (op_stack_print) 
000: BEEP type:17
    (op_stack_print) 
------------------

    (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (2)

    (op_stack_print) 
000: BEEP type:17
    (op_stack_print) 
001: ( type:16
    (op_stack_print) 
------------------


     (scan_expression) scan_expression: ' b%,10*b% '

      (check_eitem) check_eitem: 'b%,10*b% '

       (check_operator) check_operator: b%,10*b% 

        (check_literal) check_literal:lit=' ,' idx=33 'b%,10*b% '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:',' idx=33 'b%,10*b% '
        (check_literal)   ',' != 'b'
        (check_literal) check_literal: ret0
       (check_operator) ret0:is comma: 0

       (check_function) check_function: 'b%,10*b% '
       (check_function) check_function: ret0

       (check_atom) check_atom:

        (check_literal) check_literal:lit=' %' idx=33 'b%,10*b% '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'%' idx=33 'b%,10*b% '
        (check_literal)   '%' != 'b'
        (check_literal) check_literal: ret0

        (check_literal) check_literal:lit=' "' idx=33 'b%,10*b% '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'"' idx=33 'b%,10*b% '
        (check_literal)   '"' != 'b'
        (check_literal) check_literal: ret0

        (check_number) check_number:

         (check_float) check_float:
         (isfloatdigit) isfloatdigit:
         (check_float) check_float: ret0

         (check_integer) check_integer: 'b%,10*b% '
         (check_integer) check_integer:ret0
        (check_number) check_number: ret0

        (check_variable) check_variable:

         (check_vname) check_vname 'b%,10*b% ':
         (check_vname) check_vname ret1 '%,10*b% ':
        (check_variable) check_variable: '%,10*b% '
        (check_variable) check_variable: Ary test ',10*b% '

         (check_literal) check_literal:lit='(' idx=35 ',10*b% '
         (check_literal) check_literal:After drop space:'(' idx=35 ',10*b% '
         (check_literal)   '(' != ','
         (check_literal) check_literal: ret0
        (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
       (check_variable) check_variable:ret1 
      (check_atom) check_atom:ret1
     (check_eitem) check_eitem:ret1

     (scan_eitem) scan_eitem:

      (check_operator) check_operator: b%,10*b% 

       (check_literal) check_literal:lit=' ,' idx=33 'b%,10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=33 'b%,10*b% '
       (check_literal)   ',' != 'b'
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: 'b%,10*b% '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=33 'b%,10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=33 'b%,10*b% '
       (check_literal)   '%' != 'b'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=33 'b%,10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=33 'b%,10*b% '
       (check_literal)   '"' != 'b'
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: 'b%,10*b% '
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname 'b%,10*b% ':
        (check_vname) check_vname ret1 '%,10*b% ':
       (check_variable) check_variable: '%,10*b% '
       (check_variable) check_variable: Ary test ',10*b% '

        (check_literal) check_literal:lit='(' idx=35 ',10*b% '
        (check_literal) check_literal:After drop space:'(' idx=35 ',10*b% '
        (check_literal)   '(' != ','
        (check_literal) check_literal: ret0
       (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
      (check_variable) check_variable:ret1 
     (check_atom) check_atom:ret1

     (scan_atom) scan_atom:

      (check_literal) check_literal:lit=' %' idx=33 'b%,10*b% '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=33 'b%,10*b% '
      (check_literal)   '%' != 'b'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=33 'b%,10*b% '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=33 'b%,10*b% '
      (check_literal)   '"' != 'b'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: 'b%,10*b% '
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname 'b%,10*b% ':
       (check_vname) check_vname ret1 '%,10*b% ':
      (check_variable) check_variable: '%,10*b% '
      (check_variable) check_variable: Ary test ',10*b% '

       (check_literal) check_literal:lit='(' idx=35 ',10*b% '
       (check_literal) check_literal:After drop space:'(' idx=35 ',10*b% '
       (check_literal)   '(' != ','
       (check_literal) check_literal: ret0
      (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
     (check_variable) check_variable:ret1 

     (scan_variable) scan_variable:

      (scan_vname) scan_vname: 'b%,10*b% '
      (scan_vname) scan_vname: ret1 'b'
     (scan_variable) scan_variable: '%,10*b% ' vname='b'
     (scan_variable) scan_variable: Ary test ',10*b% '

      (check_literal) check_literal:lit='(' idx=35 ',10*b% '
      (check_literal) check_literal:After drop space:'(' idx=35 ',10*b% '
      (check_literal)   '(' != ','
      (check_literal) check_literal: ret0
     (scan_variable) scan_variable:ret1 vname='b%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'b%' exptype:U
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:b% is not function
token_is_variable: tok:'b%'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:b% is not function
    (init_get_name) 
init_get_name:'b%'
    (init_get_name) 
init_get_name:'b%'
    (get_name) 
get_name:gn:'b%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,(U )] i i b%
    (print_var_info) 
VAR INFO: '                b%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
    (scan_atom) scan_atom:ret1
   (scan_expression) n commas now:0

    (check_eitem) check_eitem: ',10*b% '

     (check_operator) check_operator: ,10*b% 

      (check_literal) check_literal:lit=' ,' idx=35 ',10*b% '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=35 ',10*b% '
      (check_literal) check_literal:After while():10*b% 
      (check_literal) check_literal:ret1 
     (check_operator) ret1:is comma: 0
    (check_eitem) check_eitem:ret1 comma:1

    (scan_eitem) scan_eitem:

     (check_operator) check_operator: ,10*b% 

      (check_literal) check_literal:lit=' ,' idx=35 ',10*b% '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=35 ',10*b% '
      (check_literal) check_literal:After while():10*b% 
      (check_literal) check_literal:ret1 
     (check_operator) ret1:is comma: 0

     (scan_operator) scan_operator: ',10*b% '

      (check_literal) check_literal:lit=' ,' idx=35 ',10*b% '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=35 ',10*b% '
      (check_literal) check_literal:After while():10*b% 
      (check_literal) check_literal:ret1 

      (scan_literal) scan_literal:lit=' ,' ',10*b% '
      (scan_literal) scan_literal:After drop space:',10*b% '
      (scan_literal) scan_literal:while loop:,10*b% 
   Frst:0 T:',' exptype:i
(output_sub_start)
      (scan_literal) scan_literal:ret1
     (scan_operator) ret1:is comma: 1
    (scan_eitem) Is comma;1
    (scan_expression) n commas now:1

     (check_eitem) check_eitem: '10*b% '

      (check_operator) check_operator: 10*b% 

       (check_literal) check_literal:lit=' ,' idx=36 '10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=36 '10*b% '
       (check_literal)   ',' != '1'
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: '10*b% '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=36 '10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=36 '10*b% '
       (check_literal)   '%' != '1'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=36 '10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=36 '10*b% '
       (check_literal)   '"' != '1'
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '10*b% '
        (check_integer) check_integer:ret1
       (check_number) check_number: ret1
      (check_atom) check_atom:ret1
     (check_eitem) check_eitem:ret1

     (scan_eitem) scan_eitem:

      (check_operator) check_operator: 10*b% 

       (check_literal) check_literal:lit=' ,' idx=36 '10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=36 '10*b% '
       (check_literal)   ',' != '1'
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: '10*b% '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=36 '10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=36 '10*b% '
       (check_literal)   '%' != '1'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=36 '10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=36 '10*b% '
       (check_literal)   '"' != '1'
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '10*b% '
        (check_integer) check_integer:ret1
       (check_number) check_number: ret1
      (check_atom) check_atom:ret1

      (scan_atom) scan_atom:

       (check_literal) check_literal:lit=' %' idx=36 '10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=36 '10*b% '
       (check_literal)   '%' != '1'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=36 '10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=36 '10*b% '
       (check_literal)   '"' != '1'
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '10*b% '
        (check_integer) check_integer:ret1
       (check_number) check_number: ret1

       (scan_number) scan_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '10*b% '
        (check_integer) check_integer:ret1

        (scan_integer) scan_integer:
        (scan_integer) scan_integer:ret1
   Frst:0 T:'10' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U )] i i 10
       (scan_integer) scan_integer:ret1  10
      (scan_atom) scan_atom:ret1
     (scan_expression) n commas now:1

      (check_eitem) check_eitem: '*b% '

       (check_operator) check_operator: *b% 

        (check_literal) check_literal:lit=' ,' idx=38 '*b% '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:',' idx=38 '*b% '
        (check_literal)   ',' != '*'
        (check_literal) check_literal: ret0
       (check_operator) ret1:is comma: 0
      (check_eitem) check_eitem:ret1 comma:1

      (scan_eitem) scan_eitem:

       (check_operator) check_operator: *b% 

        (check_literal) check_literal:lit=' ,' idx=38 '*b% '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:',' idx=38 '*b% '
        (check_literal)   ',' != '*'
        (check_literal) check_literal: ret0
       (check_operator) ret1:is comma: 0

       (scan_operator) scan_operator: '*b% '

        (check_literal) check_literal:lit=' ,' idx=38 '*b% '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:',' idx=38 '*b% '
        (check_literal)   ',' != '*'
        (check_literal) check_literal: ret0
       (scan_operator) scan_operator: ret1 'b% '
   Frst:0 T:'*' exptype:i
      (operator_precedence) 
* is operator
'*' is operator
      (process_token) 
Token is operator o1 name:* o2 name:(
      (process_token) 
opr1:5 opr2:0
Push 1
 Push:'*'
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (3)

      (op_stack_print) 
000: BEEP type:17
      (op_stack_print) 
001: ( type:16
      (op_stack_print) 
002: * type:0
      (op_stack_print) 
------------------

      (scan_eitem) Is comma;0
      (scan_expression) n commas now:1

       (check_eitem) check_eitem: 'b% '

        (check_operator) check_operator: b% 

         (check_literal) check_literal:lit=' ,' idx=39 'b% '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:',' idx=39 'b% '
         (check_literal)   ',' != 'b'
         (check_literal) check_literal: ret0
        (check_operator) ret0:is comma: 0

        (check_function) check_function: 'b% '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=39 'b% '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=39 'b% '
         (check_literal)   '%' != 'b'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=39 'b% '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=39 'b% '
         (check_literal)   '"' != 'b'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: 'b% '
          (check_integer) check_integer:ret0
         (check_number) check_number: ret0

         (check_variable) check_variable:

          (check_vname) check_vname 'b% ':
          (check_vname) check_vname ret1 '% ':
         (check_variable) check_variable: '% '
         (check_variable) check_variable: Ary test ' '

          (check_literal) check_literal:lit='(' idx=41 ' '
          (check_literal) check_literal:After drop space:'(' idx=41 ' '
          (check_literal)   '(' != ' '
          (check_literal) check_literal: ret0
         (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
        (check_variable) check_variable:ret1 
       (check_atom) check_atom:ret1
      (check_eitem) check_eitem:ret1

      (scan_eitem) scan_eitem:

       (check_operator) check_operator: b% 

        (check_literal) check_literal:lit=' ,' idx=39 'b% '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:',' idx=39 'b% '
        (check_literal)   ',' != 'b'
        (check_literal) check_literal: ret0
       (check_operator) ret0:is comma: 0

       (check_function) check_function: 'b% '
       (check_function) check_function: ret0

       (check_atom) check_atom:

        (check_literal) check_literal:lit=' %' idx=39 'b% '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'%' idx=39 'b% '
        (check_literal)   '%' != 'b'
        (check_literal) check_literal: ret0

        (check_literal) check_literal:lit=' "' idx=39 'b% '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'"' idx=39 'b% '
        (check_literal)   '"' != 'b'
        (check_literal) check_literal: ret0

        (check_number) check_number:

         (check_float) check_float:
         (isfloatdigit) isfloatdigit:
         (check_float) check_float: ret0

         (check_integer) check_integer: 'b% '
         (check_integer) check_integer:ret0
        (check_number) check_number: ret0

        (check_variable) check_variable:

         (check_vname) check_vname 'b% ':
         (check_vname) check_vname ret1 '% ':
        (check_variable) check_variable: '% '
        (check_variable) check_variable: Ary test ' '

         (check_literal) check_literal:lit='(' idx=41 ' '
         (check_literal) check_literal:After drop space:'(' idx=41 ' '
         (check_literal)   '(' != ' '
         (check_literal) check_literal: ret0
        (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
       (check_variable) check_variable:ret1 
      (check_atom) check_atom:ret1

      (scan_atom) scan_atom:

       (check_literal) check_literal:lit=' %' idx=39 'b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=39 'b% '
       (check_literal)   '%' != 'b'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=39 'b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=39 'b% '
       (check_literal)   '"' != 'b'
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: 'b% '
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname 'b% ':
        (check_vname) check_vname ret1 '% ':
       (check_variable) check_variable: '% '
       (check_variable) check_variable: Ary test ' '

        (check_literal) check_literal:lit='(' idx=41 ' '
        (check_literal) check_literal:After drop space:'(' idx=41 ' '
        (check_literal)   '(' != ' '
        (check_literal) check_literal: ret0
       (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
      (check_variable) check_variable:ret1 

      (scan_variable) scan_variable:

       (scan_vname) scan_vname: 'b% '
       (scan_vname) scan_vname: ret1 'b'
      (scan_variable) scan_variable: '% ' vname='b'
      (scan_variable) scan_variable: Ary test ' '

       (check_literal) check_literal:lit='(' idx=41 ' '
       (check_literal) check_literal:After drop space:'(' idx=41 ' '
       (check_literal)   '(' != ' '
       (check_literal) check_literal: ret0
      (scan_variable) scan_variable:ret1 vname='b%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'b%' exptype:i
     (operator_precedence) 
* is operator
     (token_is_function) 
token_is_function:
     (token_is_function) 
token_is_function:b% is not function
token_is_variable: tok:'b%'
     (token_is_function) 
token_is_function:
     (token_is_function) 
token_is_function:b% is not function
     (init_get_name) 
init_get_name:'b%'
     (init_get_name) 
init_get_name:'b%'
     (get_name) 
get_name:gn:'b%'
process_token:type:i req_type:i
modify_expression_type:Inittype:i Intype:i Outtype:i
( output_variable) [i,(U )] i i b%
     (print_var_info) 
VAR INFO: '                b%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
     (scan_atom) scan_atom:ret1
    (scan_expression) n commas now:1

     (check_eitem) check_eitem: ' '

      (check_operator) check_operator:  

       (check_literal) check_literal:lit=' ,' idx=42 ''
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=42 ''
       (check_literal) check_literal  ret0 Empty test string
      (check_operator) ret0:is comma: 0

      (check_function) check_function: ''
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=41 ' '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=42 ''
       (check_literal) check_literal  ret0 Empty test string

       (check_literal) check_literal:lit=' "' idx=41 ' '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=42 ''
       (check_literal) check_literal  ret0 Empty test string

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: ''
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname '':
        (check_vname) check_vname ret0 '':
       (check_variable) check_variable:ret0 
      (check_atom) check_atom:ret1

      (check_sub_expr) check_sub_expr:

       (check_literal) check_literal:lit=' (' idx=41 ' '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'(' idx=42 ''
       (check_literal) check_literal  ret0 Empty test string
      (check_sub_expr) check_sub_expr: ret0
     (check_eitem) check_eitem:ret0
    (scan_expression) scan_expression: ret1 ' ' commas:1
   (scan_command) scan_command: ret1 =>'BEEP'
  (scan_command) 
ENDEXP
   Frst:0 T:')' exptype:i
  (operator_precedence) 
* is operator
  (process_token) 
Pop 3
Pop '*'
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (2)

  (op_stack_print) 
000: BEEP type:17
  (op_stack_print) 
001: ( type:16
  (op_stack_print) 
------------------

( output_operator) [i,(U )] i i *
  (token_is_function) 
token_is_function:
  (token_is_function) 
token_is_function:* is not function
Pop 4
Pop '('
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (1)

  (op_stack_print) 
000: BEEP type:17
  (op_stack_print) 
------------------

(  output_sub_end)
  (token_is_function) 
token_is_function:
  (token_is_function) BEEP is function
Pop 5
Pop 'BEEP'
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (0)

  (op_stack_print) 
------------------

( output_function) [i,(U )] v v BEEP
(  output_sub_end)
Finalise stack
  (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'b%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? '' nidx:-1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '10' nidx:38  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'b%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '*' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'BEEP' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
 BE:

Type Check Stack (0)

 BE:b%
type_check_stack_push: 'b%'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (1)

  (type_check_stack_print) 
000: 'b%' type:0
  (type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'b%' type:i (0)
 BE:

Type Check Stack (1)

000: 'b%' type:i (0)
 BE:10
type_check_stack_push: '10'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (2)

  (type_check_stack_print) 
000: 'b%' type:0
  (type_check_stack_print) 
001: '10' type:0
  (type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'b%' type:i (0)
001: '10' type:i (0)
 BE:b%
type_check_stack_push: 'b%'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (3)

  (type_check_stack_print) 
000: 'b%' type:0
  (type_check_stack_print) 
001: '10' type:0
  (type_check_stack_print) 
002: 'b%' type:0
  (type_check_stack_print) 
------------------


Type Check Stack (3)

000: 'b%' type:i (0)
001: '10' type:i (0)
002: 'b%' type:i (0)
 BE:*
BUFF_ID_OPERATOR
Found operator *
type_check_stack_pop: 'b%'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (2)

  (type_check_stack_print) 
000: 'b%' type:0
  (type_check_stack_print) 
001: '10' type:0
  (type_check_stack_print) 
------------------

type_check_stack_pop: '10'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (1)

  (type_check_stack_print) 
000: 'b%' type:0
  (type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (2)

  (type_check_stack_print) 
000: 'b%' type:0
  (type_check_stack_print) 
001: '000' type:0
  (type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'b%' type:i (0)
001: '000' type:i (0)
 BE:

Type Check Stack (2)

000: 'b%' type:i (0)
001: '000' type:i (0)
 BE:BEEP
FN: 2 args
  (function_return_type) 
function_return_type: 'BEEP' =>v
  (function_return_type) 
function_return_type: 'BEEP' =>17
ret_type;17 v
typecheck_expression:Ret type of BEEP : v
type_check_stack_pop: '000'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (1)

  (type_check_stack_print) 
000: 'b%' type:0
  (type_check_stack_print) 
------------------

FN ARG 1 ri 000 0(i)  Arg ok
type_check_stack_pop: 'b%'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (0)

  (type_check_stack_print) 
------------------

FN ARG 0 ri b% 0(i)  Arg ok
type_check_stack_push: '000'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (1)

  (type_check_stack_print) 
000: '000' type:17
  (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'b%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? '' nidx:-1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '10' nidx:38  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'b%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '*' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'BEEP' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'b%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_INTEGER      i rq:i '10'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_VARIABLE     i rq:i 'b%'  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 5 4
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_FUNCTION     v rq:v 'BEEP'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
  (process_expression_types) 
==INFIX==

Var: b% ary:0 NumIdx:0
infix_stack_push: 'b%'
infix_stack_push: '10'
Var: b% ary:0 NumIdx:0
infix_stack_push: 'b%'
infix_stack_pop: 'b%'
infix_stack_pop: '10'
infix_stack_push: '(10 * b%)'
infix_stack_pop: '(10 * b%)'
infix_stack_pop: 'b%'
infix_stack_push: 'BEEP(b% (10 * b%) )'
infix_stack_pop: 'BEEP(b% (10 * b%) )'
  (process_expression_types) ==BEEP(b% (10 * b%) )==
  (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_START    U rq:?   0:
(    output_qcode) N4 EXP_BUFF_ID_INTEGER      i rq:i 10  0:
(    output_qcode) N5 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
(    output_qcode) N6 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 5 4
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N8 EXP_BUFF_ID_FUNCTION     v rq:v BEEP  0:
(    output_qcode) N9 EXP_BUFF_ID_SUB_END      U rq:i   0:

   (check_literal) check_literal:lit=':' idx=42 ''
   (check_literal) check_literal:After drop space:':' idx=42 ''
   (check_literal) check_literal  ret0 Empty test string
  (translate_file) 
cline scanned OK
*************************
**  AT a%,c% :PRINT e$ **
*************************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'AT a%,c% :PRINT e$ ':
     (check_vname) check_vname ret1 ' a%,c% :PRINT e$ ':
    (check_variable) check_variable: ' a%,c% :PRINT e$ '
    (check_variable) check_variable: Ary test ' a%,c% :PRINT e$ '

     (check_literal) check_literal:lit='(' idx=4 ' a%,c% :PRINT e$ '
     (check_literal) check_literal:After drop space:'(' idx=4 ' a%,c% :PRINT e$ '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=4 ' a%,c% :PRINT e$ '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=5 'a%,c% :PRINT e$ '
   (check_literal)   '=' != 'a'
   (check_literal) check_literal: ret0
  (check_assignment) check_assignment:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) check_textlabel: 'AT a%,c% :PRINT e$ '
   (check_textlabel) check_textlabel:ret0
  (check_proc_call) check_proc_call:ret0

  (check_command) check_command:
  (check_command) check_command: ret1 found=> 'AT'
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=17, ' a%,c% :PRINT e$ '
========================================================
  AT a%,c% :PRINT e$ 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'AT a%,c% :PRINT e$ ':
    (check_vname) check_vname ret1 ' a%,c% :PRINT e$ ':
   (check_variable) check_variable: ' a%,c% :PRINT e$ '
   (check_variable) check_variable: Ary test ' a%,c% :PRINT e$ '

    (check_literal) check_literal:lit='(' idx=4 ' a%,c% :PRINT e$ '
    (check_literal) check_literal:After drop space:'(' idx=4 ' a%,c% :PRINT e$ '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=4 ' a%,c% :PRINT e$ '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=5 'a%,c% :PRINT e$ '
  (check_literal)   '=' != 'a'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'AT a%,c% :PRINT e$ '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'AT'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'AT' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) AT is function
 (function_return_type) 
function_return_type: 'AT' =>v
 (function_return_type) 
function_return_type: 'AT' =>17
process_token: 'AT' t=>v
 Push:'AT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: AT type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: AT type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' a%,c% :PRINT e$ '

   (check_eitem) check_eitem: 'a%,c% :PRINT e$ '

    (check_operator) check_operator: a%,c% :PRINT e$ 

     (check_literal) check_literal:lit=' ,' idx=5 'a%,c% :PRINT e$ '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=5 'a%,c% :PRINT e$ '
     (check_literal)   ',' != 'a'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'a%,c% :PRINT e$ '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=5 'a%,c% :PRINT e$ '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=5 'a%,c% :PRINT e$ '
     (check_literal)   '%' != 'a'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=5 'a%,c% :PRINT e$ '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=5 'a%,c% :PRINT e$ '
     (check_literal)   '"' != 'a'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'a%,c% :PRINT e$ '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'a%,c% :PRINT e$ ':
      (check_vname) check_vname ret1 '%,c% :PRINT e$ ':
     (check_variable) check_variable: '%,c% :PRINT e$ '
     (check_variable) check_variable: Ary test ',c% :PRINT e$ '

      (check_literal) check_literal:lit='(' idx=7 ',c% :PRINT e$ '
      (check_literal) check_literal:After drop space:'(' idx=7 ',c% :PRINT e$ '
      (check_literal)   '(' != ','
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator: a%,c% :PRINT e$ 

    (check_literal) check_literal:lit=' ,' idx=5 'a%,c% :PRINT e$ '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=5 'a%,c% :PRINT e$ '
    (check_literal)   ',' != 'a'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'a%,c% :PRINT e$ '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=5 'a%,c% :PRINT e$ '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=5 'a%,c% :PRINT e$ '
    (check_literal)   '%' != 'a'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=5 'a%,c% :PRINT e$ '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=5 'a%,c% :PRINT e$ '
    (check_literal)   '"' != 'a'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'a%,c% :PRINT e$ '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'a%,c% :PRINT e$ ':
     (check_vname) check_vname ret1 '%,c% :PRINT e$ ':
    (check_variable) check_variable: '%,c% :PRINT e$ '
    (check_variable) check_variable: Ary test ',c% :PRINT e$ '

     (check_literal) check_literal:lit='(' idx=7 ',c% :PRINT e$ '
     (check_literal) check_literal:After drop space:'(' idx=7 ',c% :PRINT e$ '
     (check_literal)   '(' != ','
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1

  (scan_atom) scan_atom:

   (check_literal) check_literal:lit=' %' idx=5 'a%,c% :PRINT e$ '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=5 'a%,c% :PRINT e$ '
   (check_literal)   '%' != 'a'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=5 'a%,c% :PRINT e$ '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=5 'a%,c% :PRINT e$ '
   (check_literal)   '"' != 'a'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'a%,c% :PRINT e$ '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'a%,c% :PRINT e$ ':
    (check_vname) check_vname ret1 '%,c% :PRINT e$ ':
   (check_variable) check_variable: '%,c% :PRINT e$ '
   (check_variable) check_variable: Ary test ',c% :PRINT e$ '

    (check_literal) check_literal:lit='(' idx=7 ',c% :PRINT e$ '
    (check_literal) check_literal:After drop space:'(' idx=7 ',c% :PRINT e$ '
    (check_literal)   '(' != ','
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'a%,c% :PRINT e$ '
   (scan_vname) scan_vname: ret1 'a'
  (scan_variable) scan_variable: '%,c% :PRINT e$ ' vname='a'
  (scan_variable) scan_variable: Ary test ',c% :PRINT e$ '

   (check_literal) check_literal:lit='(' idx=7 ',c% :PRINT e$ '
   (check_literal) check_literal:After drop space:'(' idx=7 ',c% :PRINT e$ '
   (check_literal)   '(' != ','
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='a%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'a%' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:a% is not function
token_is_variable: tok:'a%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:a% is not function
 (init_get_name) 
init_get_name:'a%'
 (init_get_name) 
init_get_name:'a%'
 (get_name) 
get_name:gn:'a%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,(U )] i i a%
 (print_var_info) 
VAR INFO: '                a%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
 (scan_atom) scan_atom:ret1
(scan_expression) n commas now:0

 (check_eitem) check_eitem: ',c% :PRINT e$ '

  (check_operator) check_operator: ,c% :PRINT e$ 

   (check_literal) check_literal:lit=' ,' idx=7 ',c% :PRINT e$ '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=7 ',c% :PRINT e$ '
   (check_literal) check_literal:After while():c% :PRINT e$ 
   (check_literal) check_literal:ret1 
  (check_operator) ret1:is comma: 0
 (check_eitem) check_eitem:ret1 comma:1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: ,c% :PRINT e$ 

   (check_literal) check_literal:lit=' ,' idx=7 ',c% :PRINT e$ '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=7 ',c% :PRINT e$ '
   (check_literal) check_literal:After while():c% :PRINT e$ 
   (check_literal) check_literal:ret1 
  (check_operator) ret1:is comma: 0

  (scan_operator) scan_operator: ',c% :PRINT e$ '

   (check_literal) check_literal:lit=' ,' idx=7 ',c% :PRINT e$ '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=7 ',c% :PRINT e$ '
   (check_literal) check_literal:After while():c% :PRINT e$ 
   (check_literal) check_literal:ret1 

   (scan_literal) scan_literal:lit=' ,' ',c% :PRINT e$ '
   (scan_literal) scan_literal:After drop space:',c% :PRINT e$ '
   (scan_literal) scan_literal:while loop:,c% :PRINT e$ 
   Frst:0 T:',' exptype:i
(output_sub_start)
   (scan_literal) scan_literal:ret1
  (scan_operator) ret1:is comma: 1
 (scan_eitem) Is comma;1
 (scan_expression) n commas now:1

  (check_eitem) check_eitem: 'c% :PRINT e$ '

   (check_operator) check_operator: c% :PRINT e$ 

    (check_literal) check_literal:lit=' ,' idx=8 'c% :PRINT e$ '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=8 'c% :PRINT e$ '
    (check_literal)   ',' != 'c'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'c% :PRINT e$ '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=8 'c% :PRINT e$ '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=8 'c% :PRINT e$ '
    (check_literal)   '%' != 'c'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=8 'c% :PRINT e$ '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=8 'c% :PRINT e$ '
    (check_literal)   '"' != 'c'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'c% :PRINT e$ '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'c% :PRINT e$ ':
     (check_vname) check_vname ret1 '% :PRINT e$ ':
    (check_variable) check_variable: '% :PRINT e$ '
    (check_variable) check_variable: Ary test ' :PRINT e$ '

     (check_literal) check_literal:lit='(' idx=10 ' :PRINT e$ '
     (check_literal) check_literal:After drop space:'(' idx=10 ' :PRINT e$ '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1
 (check_eitem) check_eitem:ret1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: c% :PRINT e$ 

   (check_literal) check_literal:lit=' ,' idx=8 'c% :PRINT e$ '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=8 'c% :PRINT e$ '
   (check_literal)   ',' != 'c'
   (check_literal) check_literal: ret0
  (check_operator) ret0:is comma: 0

  (check_function) check_function: 'c% :PRINT e$ '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=8 'c% :PRINT e$ '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=8 'c% :PRINT e$ '
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=8 'c% :PRINT e$ '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=8 'c% :PRINT e$ '
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c% :PRINT e$ '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'c% :PRINT e$ ':
    (check_vname) check_vname ret1 '% :PRINT e$ ':
   (check_variable) check_variable: '% :PRINT e$ '
   (check_variable) check_variable: Ary test ' :PRINT e$ '

    (check_literal) check_literal:lit='(' idx=10 ' :PRINT e$ '
    (check_literal) check_literal:After drop space:'(' idx=10 ' :PRINT e$ '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) check_atom:ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=8 'c% :PRINT e$ '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=8 'c% :PRINT e$ '
  (check_literal)   '%' != 'c'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=8 'c% :PRINT e$ '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=8 'c% :PRINT e$ '
  (check_literal)   '"' != 'c'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) check_float: ret0

   (check_integer) check_integer: 'c% :PRINT e$ '
   (check_integer) check_integer:ret0
  (check_number) check_number: ret0

  (check_variable) check_variable:

   (check_vname) check_vname 'c% :PRINT e$ ':
   (check_vname) check_vname ret1 '% :PRINT e$ ':
  (check_variable) check_variable: '% :PRINT e$ '
  (check_variable) check_variable: Ary test ' :PRINT e$ '

   (check_literal) check_literal:lit='(' idx=10 ' :PRINT e$ '
   (check_literal) check_literal:After drop space:'(' idx=10 ' :PRINT e$ '
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) scan_variable:

  (scan_vname) scan_vname: 'c% :PRINT e$ '
  (scan_vname) scan_vname: ret1 'c'
 (scan_variable) scan_variable: '% :PRINT e$ ' vname='c'
 (scan_variable) scan_variable: Ary test ' :PRINT e$ '

  (check_literal) check_literal:lit='(' idx=10 ' :PRINT e$ '
  (check_literal) check_literal:After drop space:'(' idx=10 ' :PRINT e$ '
  (check_literal)   '(' != ' '
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='c%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'c%' exptype:U
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:c% is not function
token_is_variable: tok:'c%'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:c% is not function
(init_get_name) 
init_get_name:'c%'
(init_get_name) 
init_get_name:'c%'
(get_name) 
get_name:gn:'c%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,(U )] i i c%
(print_var_info) 
VAR INFO: '                c%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
(scan_atom) scan_atom:ret1
(scan_expression) n commas now:1

 (check_eitem) check_eitem: ' :PRINT e$ '

  (check_operator) check_operator:  :PRINT e$ 

   (check_literal) check_literal:lit=' ,' idx=11 ':PRINT e$ '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=11 ':PRINT e$ '
   (check_literal)   ',' != ':'
   (check_literal) check_literal: ret0
  (check_operator) ret0:is comma: 0

  (check_function) check_function: ':PRINT e$ '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=10 ' :PRINT e$ '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=11 ':PRINT e$ '
   (check_literal)   '%' != ':'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=10 ' :PRINT e$ '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=11 ':PRINT e$ '
   (check_literal)   '"' != ':'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: ':PRINT e$ '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname ':PRINT e$ ':
    (check_vname) check_vname ret0 ':PRINT e$ ':
   (check_variable) check_variable:ret0 
  (check_atom) check_atom:ret1

  (check_sub_expr) check_sub_expr:

   (check_literal) check_literal:lit=' (' idx=10 ' :PRINT e$ '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'(' idx=11 ':PRINT e$ '
   (check_literal)   '(' != ':'
   (check_literal) check_literal: ret0
  (check_sub_expr) check_sub_expr: ret0
 (check_eitem) check_eitem:ret0
(scan_expression) scan_expression: ret1 ' :PRINT e$ ' commas:1
(scan_command) scan_command: ret1 =>'AT'
(scan_command) 
ENDEXP
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: AT type:17
(op_stack_print) 
------------------

(  output_sub_end)
(token_is_function) 
token_is_function:
(token_is_function) AT is function
Pop 5
Pop 'AT'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_function) [i,(U )] v v AT
(  output_sub_end)
Finalise stack
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'a%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? '' nidx:-1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'c%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'AT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
 BE:

Type Check Stack (0)

 BE:a%
type_check_stack_push: 'a%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'a%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'a%' type:i (0)
 BE:

Type Check Stack (1)

000: 'a%' type:i (0)
 BE:c%
type_check_stack_push: 'c%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'a%' type:0
(type_check_stack_print) 
001: 'c%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'a%' type:i (0)
001: 'c%' type:i (0)
 BE:

Type Check Stack (2)

000: 'a%' type:i (0)
001: 'c%' type:i (0)
 BE:AT
FN: 2 args
(function_return_type) 
function_return_type: 'AT' =>v
(function_return_type) 
function_return_type: 'AT' =>17
ret_type;17 v
typecheck_expression:Ret type of AT : v
type_check_stack_pop: 'c%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'a%' type:0
(type_check_stack_print) 
------------------

FN ARG 1 ri c% 0(i)  Arg ok
type_check_stack_pop: 'a%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (0)

(type_check_stack_print) 
------------------

FN ARG 0 ri a% 0(i)  Arg ok
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:17
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'a%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? '' nidx:-1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'c%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'AT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'a%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     i rq:i 'c%'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_FUNCTION     v rq:v 'AT'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
(process_expression_types) 
==INFIX==

Var: a% ary:0 NumIdx:0
infix_stack_push: 'a%'
Var: c% ary:0 NumIdx:0
infix_stack_push: 'c%'
infix_stack_pop: 'c%'
infix_stack_pop: 'a%'
infix_stack_push: 'AT(a% c% )'
infix_stack_pop: 'AT(a% c% )'
(process_expression_types) ==AT(a% c% )==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_START    U rq:?   0:
(    output_qcode) N4 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_FUNCTION     v rq:v AT  0:
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:i   0:

 (check_literal) check_literal:lit=':' idx=11 ':PRINT e$ '
 (check_literal) check_literal:After drop space:':' idx=11 ':PRINT e$ '
 (check_literal) check_literal:After while():PRINT e$ 
 (check_literal) check_literal:ret1 

 (scan_literal) scan_literal:lit=':' 'PRINT e$ '
 (scan_literal) scan_literal:After drop space:'PRINT e$ '
 (scan_literal) scan_literal:while loop:PRINT e$ 
 (scan_literal) scan_literal:ret1

 (check_line) check_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'PRINT e$ ':
    (check_vname) check_vname ret1 ' e$ ':
   (check_variable) check_variable: ' e$ '
   (check_variable) check_variable: Ary test ' e$ '

    (check_literal) check_literal:lit='(' idx=17 ' e$ '
    (check_literal) check_literal:After drop space:'(' idx=17 ' e$ '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=17 ' e$ '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=18 'e$ '
  (check_literal)   '=' != 'e'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'PRINT e$ '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'PRINT'
(check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=4, ' e$ '
========================================================
  AT a%,c% :PRINT e$ 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'PRINT e$ ':
    (check_vname) check_vname ret1 ' e$ ':
   (check_variable) check_variable: ' e$ '
   (check_variable) check_variable: Ary test ' e$ '

    (check_literal) check_literal:lit='(' idx=17 ' e$ '
    (check_literal) check_literal:After drop space:'(' idx=17 ' e$ '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=17 ' e$ '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=18 'e$ '
  (check_literal)   '=' != 'e'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'PRINT e$ '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'PRINT'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'PRINT' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) PRINT is function
 (function_return_type) 
function_return_type: 'PRINT' =>v
 (function_return_type) 
function_return_type: 'PRINT' =>17
process_token: 'PRINT' t=>v
 Push:'PRINT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' e$ '

   (check_eitem) check_eitem: 'e$ '

    (check_operator) check_operator: e$ 

     (check_literal) check_literal:lit=' ,' idx=18 'e$ '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=18 'e$ '
     (check_literal)   ',' != 'e'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'e$ '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=18 'e$ '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=18 'e$ '
     (check_literal)   '%' != 'e'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=18 'e$ '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=18 'e$ '
     (check_literal)   '"' != 'e'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'e$ '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'e$ ':
      (check_vname) check_vname ret1 '$ ':
     (check_variable) check_variable: '$ '
     (check_variable) check_variable: Ary test ' '

      (check_literal) check_literal:lit='(' idx=20 ' '
      (check_literal) check_literal:After drop space:'(' idx=20 ' '
      (check_literal)   '(' != ' '
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='$' is str:1 int:0 flt:0 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator: e$ 

    (check_literal) check_literal:lit=' ,' idx=18 'e$ '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=18 'e$ '
    (check_literal)   ',' != 'e'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'e$ '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=18 'e$ '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=18 'e$ '
    (check_literal)   '%' != 'e'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=18 'e$ '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=18 'e$ '
    (check_literal)   '"' != 'e'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'e$ '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'e$ ':
     (check_vname) check_vname ret1 '$ ':
    (check_variable) check_variable: '$ '
    (check_variable) check_variable: Ary test ' '

     (check_literal) check_literal:lit='(' idx=20 ' '
     (check_literal) check_literal:After drop space:'(' idx=20 ' '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='$' is str:1 int:0 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1

  (scan_atom) scan_atom:

   (check_literal) check_literal:lit=' %' idx=18 'e$ '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=18 'e$ '
   (check_literal)   '%' != 'e'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=18 'e$ '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=18 'e$ '
   (check_literal)   '"' != 'e'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'e$ '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'e$ ':
    (check_vname) check_vname ret1 '$ ':
   (check_variable) check_variable: '$ '
   (check_variable) check_variable: Ary test ' '

    (check_literal) check_literal:lit='(' idx=20 ' '
    (check_literal) check_literal:After drop space:'(' idx=20 ' '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='$' is str:1 int:0 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'e$ '
   (scan_vname) scan_vname: ret1 'e'
  (scan_variable) scan_variable: '$ ' vname='e'
  (scan_variable) scan_variable: Ary test ' '

   (check_literal) check_literal:lit='(' idx=20 ' '
   (check_literal) check_literal:After drop space:'(' idx=20 ' '
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='e$' is str:1 int:0 flt:0 ary:0
   Frst:0 T:'e$' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:e$ is not function
token_is_variable: tok:'e$'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:e$ is not function
 (init_get_name) 
init_get_name:'e$'
 (init_get_name) 
init_get_name:'e$'
 (get_name) 
get_name:gn:'e$'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:s Outtype:s
( output_variable) [s,(U )] s s e$
 (print_var_info) 
VAR INFO: '                e$' gbl:0 ref:1 int:0 flt:0 str:1 ary:0 max_str:0 max_ary:0 num_ind:0
 (scan_atom) scan_atom:ret1
(scan_expression) n commas now:0

 (check_eitem) check_eitem: ' '

  (check_operator) check_operator:  

   (check_literal) check_literal:lit=' ,' idx=21 ''
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=21 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_operator) ret0:is comma: 0

  (check_function) check_function: ''
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=20 ' '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=21 ''
   (check_literal) check_literal  ret0 Empty test string

   (check_literal) check_literal:lit=' "' idx=20 ' '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=21 ''
   (check_literal) check_literal  ret0 Empty test string

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: ''
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname '':
    (check_vname) check_vname ret0 '':
   (check_variable) check_variable:ret0 
  (check_atom) check_atom:ret1

  (check_sub_expr) check_sub_expr:

   (check_literal) check_literal:lit=' (' idx=20 ' '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'(' idx=21 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_sub_expr) check_sub_expr: ret0
 (check_eitem) check_eitem:ret0
(scan_expression) scan_expression: ret1 ' ' commas:0
(scan_command) scan_command: ret1 =>'PRINT'
(scan_command) 
ENDEXP
   Frst:0 T:')' exptype:s
Pop 4
Pop '('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: PRINT type:17
(op_stack_print) 
------------------

(  output_sub_end)
(token_is_function) 
token_is_function:
(token_is_function) PRINT is function
Pop 5
Pop 'PRINT'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_function) [s,(U )] v v PRINT
(  output_sub_end)
Finalise stack
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     s rq:s 'e$' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
 BE:

Type Check Stack (0)

 BE:e$
type_check_stack_push: 'e$'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'e$' type:2
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'e$' type:s (2)
 BE:

Type Check Stack (1)

000: 'e$' type:s (2)
 BE:PRINT
FN: 1 args
(function_return_type) 
function_return_type: 'PRINT' =>v
(function_return_type) 
function_return_type: 'PRINT' =>17
ret_type;17 v
typecheck_expression:Ret type of PRINT : v
type_check_stack_pop: 'e$'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (0)

(type_check_stack_print) 
------------------

FN ARG 0 ri e$ 2(s)  Arg not OK
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:17
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     s rq:s 'e$' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     s rq:s 'e$'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
(process_expression_types) 
==INFIX==

Var: e$ ary:0 NumIdx:0
infix_stack_push: 'e$'
infix_stack_pop: 'e$'
infix_stack_push: 'PRINT(e$ )'
infix_stack_pop: 'PRINT(e$ )'
(process_expression_types) ==PRINT(e$ )==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     s rq:s e$  0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N4 EXP_BUFF_ID_FUNCTION     v rq:v PRINT  0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_END      U rq:i   0:

 (check_literal) check_literal:lit=':' idx=21 ''
 (check_literal) check_literal:After drop space:':' idx=21 ''
 (check_literal) check_literal  ret0 Empty test string
(translate_file) 
cline scanned OK
*****************************************
**  AT a%,c1% :PRINT e$ :BEEP b%,10*b% **
*****************************************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'AT a%,c1% :PRINT e$ :BEEP b%,10*b% ':
     (check_vname) check_vname ret1 ' a%,c1% :PRINT e$ :BEEP b%,10*b% ':
    (check_variable) check_variable: ' a%,c1% :PRINT e$ :BEEP b%,10*b% '
    (check_variable) check_variable: Ary test ' a%,c1% :PRINT e$ :BEEP b%,10*b% '

     (check_literal) check_literal:lit='(' idx=4 ' a%,c1% :PRINT e$ :BEEP b%,10*b% '
     (check_literal) check_literal:After drop space:'(' idx=4 ' a%,c1% :PRINT e$ :BEEP b%,10*b% '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=4 ' a%,c1% :PRINT e$ :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=5 'a%,c1% :PRINT e$ :BEEP b%,10*b% '
   (check_literal)   '=' != 'a'
   (check_literal) check_literal: ret0
  (check_assignment) check_assignment:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) check_textlabel: 'AT a%,c1% :PRINT e$ :BEEP b%,10*b% '
   (check_textlabel) check_textlabel:ret0
  (check_proc_call) check_proc_call:ret0

  (check_command) check_command:
  (check_command) check_command: ret1 found=> 'AT'
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=33, ' a%,c1% :PRINT e$ :BEEP b%,10*b% '
========================================================
  AT a%,c1% :PRINT e$ :BEEP b%,10*b% 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'AT a%,c1% :PRINT e$ :BEEP b%,10*b% ':
    (check_vname) check_vname ret1 ' a%,c1% :PRINT e$ :BEEP b%,10*b% ':
   (check_variable) check_variable: ' a%,c1% :PRINT e$ :BEEP b%,10*b% '
   (check_variable) check_variable: Ary test ' a%,c1% :PRINT e$ :BEEP b%,10*b% '

    (check_literal) check_literal:lit='(' idx=4 ' a%,c1% :PRINT e$ :BEEP b%,10*b% '
    (check_literal) check_literal:After drop space:'(' idx=4 ' a%,c1% :PRINT e$ :BEEP b%,10*b% '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=4 ' a%,c1% :PRINT e$ :BEEP b%,10*b% '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=5 'a%,c1% :PRINT e$ :BEEP b%,10*b% '
  (check_literal)   '=' != 'a'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'AT a%,c1% :PRINT e$ :BEEP b%,10*b% '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'AT'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'AT' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) AT is function
 (function_return_type) 
function_return_type: 'AT' =>v
 (function_return_type) 
function_return_type: 'AT' =>17
process_token: 'AT' t=>v
 Push:'AT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: AT type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: AT type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' a%,c1% :PRINT e$ :BEEP b%,10*b% '

   (check_eitem) check_eitem: 'a%,c1% :PRINT e$ :BEEP b%,10*b% '

    (check_operator) check_operator: a%,c1% :PRINT e$ :BEEP b%,10*b% 

     (check_literal) check_literal:lit=' ,' idx=5 'a%,c1% :PRINT e$ :BEEP b%,10*b% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=5 'a%,c1% :PRINT e$ :BEEP b%,10*b% '
     (check_literal)   ',' != 'a'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'a%,c1% :PRINT e$ :BEEP b%,10*b% '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=5 'a%,c1% :PRINT e$ :BEEP b%,10*b% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=5 'a%,c1% :PRINT e$ :BEEP b%,10*b% '
     (check_literal)   '%' != 'a'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=5 'a%,c1% :PRINT e$ :BEEP b%,10*b% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=5 'a%,c1% :PRINT e$ :BEEP b%,10*b% '
     (check_literal)   '"' != 'a'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'a%,c1% :PRINT e$ :BEEP b%,10*b% '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'a%,c1% :PRINT e$ :BEEP b%,10*b% ':
      (check_vname) check_vname ret1 '%,c1% :PRINT e$ :BEEP b%,10*b% ':
     (check_variable) check_variable: '%,c1% :PRINT e$ :BEEP b%,10*b% '
     (check_variable) check_variable: Ary test ',c1% :PRINT e$ :BEEP b%,10*b% '

      (check_literal) check_literal:lit='(' idx=7 ',c1% :PRINT e$ :BEEP b%,10*b% '
      (check_literal) check_literal:After drop space:'(' idx=7 ',c1% :PRINT e$ :BEEP b%,10*b% '
      (check_literal)   '(' != ','
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator: a%,c1% :PRINT e$ :BEEP b%,10*b% 

    (check_literal) check_literal:lit=' ,' idx=5 'a%,c1% :PRINT e$ :BEEP b%,10*b% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=5 'a%,c1% :PRINT e$ :BEEP b%,10*b% '
    (check_literal)   ',' != 'a'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'a%,c1% :PRINT e$ :BEEP b%,10*b% '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=5 'a%,c1% :PRINT e$ :BEEP b%,10*b% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=5 'a%,c1% :PRINT e$ :BEEP b%,10*b% '
    (check_literal)   '%' != 'a'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=5 'a%,c1% :PRINT e$ :BEEP b%,10*b% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=5 'a%,c1% :PRINT e$ :BEEP b%,10*b% '
    (check_literal)   '"' != 'a'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'a%,c1% :PRINT e$ :BEEP b%,10*b% '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'a%,c1% :PRINT e$ :BEEP b%,10*b% ':
     (check_vname) check_vname ret1 '%,c1% :PRINT e$ :BEEP b%,10*b% ':
    (check_variable) check_variable: '%,c1% :PRINT e$ :BEEP b%,10*b% '
    (check_variable) check_variable: Ary test ',c1% :PRINT e$ :BEEP b%,10*b% '

     (check_literal) check_literal:lit='(' idx=7 ',c1% :PRINT e$ :BEEP b%,10*b% '
     (check_literal) check_literal:After drop space:'(' idx=7 ',c1% :PRINT e$ :BEEP b%,10*b% '
     (check_literal)   '(' != ','
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1

  (scan_atom) scan_atom:

   (check_literal) check_literal:lit=' %' idx=5 'a%,c1% :PRINT e$ :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=5 'a%,c1% :PRINT e$ :BEEP b%,10*b% '
   (check_literal)   '%' != 'a'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=5 'a%,c1% :PRINT e$ :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=5 'a%,c1% :PRINT e$ :BEEP b%,10*b% '
   (check_literal)   '"' != 'a'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'a%,c1% :PRINT e$ :BEEP b%,10*b% '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'a%,c1% :PRINT e$ :BEEP b%,10*b% ':
    (check_vname) check_vname ret1 '%,c1% :PRINT e$ :BEEP b%,10*b% ':
   (check_variable) check_variable: '%,c1% :PRINT e$ :BEEP b%,10*b% '
   (check_variable) check_variable: Ary test ',c1% :PRINT e$ :BEEP b%,10*b% '

    (check_literal) check_literal:lit='(' idx=7 ',c1% :PRINT e$ :BEEP b%,10*b% '
    (check_literal) check_literal:After drop space:'(' idx=7 ',c1% :PRINT e$ :BEEP b%,10*b% '
    (check_literal)   '(' != ','
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'a%,c1% :PRINT e$ :BEEP b%,10*b% '
   (scan_vname) scan_vname: ret1 'a'
  (scan_variable) scan_variable: '%,c1% :PRINT e$ :BEEP b%,10*b% ' vname='a'
  (scan_variable) scan_variable: Ary test ',c1% :PRINT e$ :BEEP b%,10*b% '

   (check_literal) check_literal:lit='(' idx=7 ',c1% :PRINT e$ :BEEP b%,10*b% '
   (check_literal) check_literal:After drop space:'(' idx=7 ',c1% :PRINT e$ :BEEP b%,10*b% '
   (check_literal)   '(' != ','
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='a%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'a%' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:a% is not function
token_is_variable: tok:'a%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:a% is not function
 (init_get_name) 
init_get_name:'a%'
 (init_get_name) 
init_get_name:'a%'
 (get_name) 
get_name:gn:'a%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,(U )] i i a%
 (print_var_info) 
VAR INFO: '                a%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
 (scan_atom) scan_atom:ret1
(scan_expression) n commas now:0

 (check_eitem) check_eitem: ',c1% :PRINT e$ :BEEP b%,10*b% '

  (check_operator) check_operator: ,c1% :PRINT e$ :BEEP b%,10*b% 

   (check_literal) check_literal:lit=' ,' idx=7 ',c1% :PRINT e$ :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=7 ',c1% :PRINT e$ :BEEP b%,10*b% '
   (check_literal) check_literal:After while():c1% :PRINT e$ :BEEP b%,10*b% 
   (check_literal) check_literal:ret1 
  (check_operator) ret1:is comma: 0
 (check_eitem) check_eitem:ret1 comma:1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: ,c1% :PRINT e$ :BEEP b%,10*b% 

   (check_literal) check_literal:lit=' ,' idx=7 ',c1% :PRINT e$ :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=7 ',c1% :PRINT e$ :BEEP b%,10*b% '
   (check_literal) check_literal:After while():c1% :PRINT e$ :BEEP b%,10*b% 
   (check_literal) check_literal:ret1 
  (check_operator) ret1:is comma: 0

  (scan_operator) scan_operator: ',c1% :PRINT e$ :BEEP b%,10*b% '

   (check_literal) check_literal:lit=' ,' idx=7 ',c1% :PRINT e$ :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=7 ',c1% :PRINT e$ :BEEP b%,10*b% '
   (check_literal) check_literal:After while():c1% :PRINT e$ :BEEP b%,10*b% 
   (check_literal) check_literal:ret1 

   (scan_literal) scan_literal:lit=' ,' ',c1% :PRINT e$ :BEEP b%,10*b% '
   (scan_literal) scan_literal:After drop space:',c1% :PRINT e$ :BEEP b%,10*b% '
   (scan_literal) scan_literal:while loop:,c1% :PRINT e$ :BEEP b%,10*b% 
   Frst:0 T:',' exptype:i
(output_sub_start)
   (scan_literal) scan_literal:ret1
  (scan_operator) ret1:is comma: 1
 (scan_eitem) Is comma;1
 (scan_expression) n commas now:1

  (check_eitem) check_eitem: 'c1% :PRINT e$ :BEEP b%,10*b% '

   (check_operator) check_operator: c1% :PRINT e$ :BEEP b%,10*b% 

    (check_literal) check_literal:lit=' ,' idx=8 'c1% :PRINT e$ :BEEP b%,10*b% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=8 'c1% :PRINT e$ :BEEP b%,10*b% '
    (check_literal)   ',' != 'c'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'c1% :PRINT e$ :BEEP b%,10*b% '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=8 'c1% :PRINT e$ :BEEP b%,10*b% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=8 'c1% :PRINT e$ :BEEP b%,10*b% '
    (check_literal)   '%' != 'c'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=8 'c1% :PRINT e$ :BEEP b%,10*b% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=8 'c1% :PRINT e$ :BEEP b%,10*b% '
    (check_literal)   '"' != 'c'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'c1% :PRINT e$ :BEEP b%,10*b% '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'c1% :PRINT e$ :BEEP b%,10*b% ':
     (check_vname) check_vname ret1 '% :PRINT e$ :BEEP b%,10*b% ':
    (check_variable) check_variable: '% :PRINT e$ :BEEP b%,10*b% '
    (check_variable) check_variable: Ary test ' :PRINT e$ :BEEP b%,10*b% '

     (check_literal) check_literal:lit='(' idx=11 ' :PRINT e$ :BEEP b%,10*b% '
     (check_literal) check_literal:After drop space:'(' idx=11 ' :PRINT e$ :BEEP b%,10*b% '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1
 (check_eitem) check_eitem:ret1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: c1% :PRINT e$ :BEEP b%,10*b% 

   (check_literal) check_literal:lit=' ,' idx=8 'c1% :PRINT e$ :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=8 'c1% :PRINT e$ :BEEP b%,10*b% '
   (check_literal)   ',' != 'c'
   (check_literal) check_literal: ret0
  (check_operator) ret0:is comma: 0

  (check_function) check_function: 'c1% :PRINT e$ :BEEP b%,10*b% '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=8 'c1% :PRINT e$ :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=8 'c1% :PRINT e$ :BEEP b%,10*b% '
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=8 'c1% :PRINT e$ :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=8 'c1% :PRINT e$ :BEEP b%,10*b% '
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c1% :PRINT e$ :BEEP b%,10*b% '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'c1% :PRINT e$ :BEEP b%,10*b% ':
    (check_vname) check_vname ret1 '% :PRINT e$ :BEEP b%,10*b% ':
   (check_variable) check_variable: '% :PRINT e$ :BEEP b%,10*b% '
   (check_variable) check_variable: Ary test ' :PRINT e$ :BEEP b%,10*b% '

    (check_literal) check_literal:lit='(' idx=11 ' :PRINT e$ :BEEP b%,10*b% '
    (check_literal) check_literal:After drop space:'(' idx=11 ' :PRINT e$ :BEEP b%,10*b% '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) check_atom:ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=8 'c1% :PRINT e$ :BEEP b%,10*b% '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=8 'c1% :PRINT e$ :BEEP b%,10*b% '
  (check_literal)   '%' != 'c'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=8 'c1% :PRINT e$ :BEEP b%,10*b% '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=8 'c1% :PRINT e$ :BEEP b%,10*b% '
  (check_literal)   '"' != 'c'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) check_float: ret0

   (check_integer) check_integer: 'c1% :PRINT e$ :BEEP b%,10*b% '
   (check_integer) check_integer:ret0
  (check_number) check_number: ret0

  (check_variable) check_variable:

   (check_vname) check_vname 'c1% :PRINT e$ :BEEP b%,10*b% ':
   (check_vname) check_vname ret1 '% :PRINT e$ :BEEP b%,10*b% ':
  (check_variable) check_variable: '% :PRINT e$ :BEEP b%,10*b% '
  (check_variable) check_variable: Ary test ' :PRINT e$ :BEEP b%,10*b% '

   (check_literal) check_literal:lit='(' idx=11 ' :PRINT e$ :BEEP b%,10*b% '
   (check_literal) check_literal:After drop space:'(' idx=11 ' :PRINT e$ :BEEP b%,10*b% '
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) scan_variable:

  (scan_vname) scan_vname: 'c1% :PRINT e$ :BEEP b%,10*b% '
  (scan_vname) scan_vname: ret1 'c1'
 (scan_variable) scan_variable: '% :PRINT e$ :BEEP b%,10*b% ' vname='c1'
 (scan_variable) scan_variable: Ary test ' :PRINT e$ :BEEP b%,10*b% '

  (check_literal) check_literal:lit='(' idx=11 ' :PRINT e$ :BEEP b%,10*b% '
  (check_literal) check_literal:After drop space:'(' idx=11 ' :PRINT e$ :BEEP b%,10*b% '
  (check_literal)   '(' != ' '
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='c1%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'c1%' exptype:U
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:c1% is not function
token_is_variable: tok:'c1%'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:c1% is not function
(init_get_name) 
init_get_name:'c1%'
(init_get_name) 
init_get_name:'c1%'
(get_name) 
get_name:gn:'c1%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,(U )] i i c1%
(print_var_info) 
VAR INFO: '               c1%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
(scan_atom) scan_atom:ret1
(scan_expression) n commas now:1

 (check_eitem) check_eitem: ' :PRINT e$ :BEEP b%,10*b% '

  (check_operator) check_operator:  :PRINT e$ :BEEP b%,10*b% 

   (check_literal) check_literal:lit=' ,' idx=12 ':PRINT e$ :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=12 ':PRINT e$ :BEEP b%,10*b% '
   (check_literal)   ',' != ':'
   (check_literal) check_literal: ret0
  (check_operator) ret0:is comma: 0

  (check_function) check_function: ':PRINT e$ :BEEP b%,10*b% '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=11 ' :PRINT e$ :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=12 ':PRINT e$ :BEEP b%,10*b% '
   (check_literal)   '%' != ':'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=11 ' :PRINT e$ :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=12 ':PRINT e$ :BEEP b%,10*b% '
   (check_literal)   '"' != ':'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: ':PRINT e$ :BEEP b%,10*b% '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname ':PRINT e$ :BEEP b%,10*b% ':
    (check_vname) check_vname ret0 ':PRINT e$ :BEEP b%,10*b% ':
   (check_variable) check_variable:ret0 
  (check_atom) check_atom:ret1

  (check_sub_expr) check_sub_expr:

   (check_literal) check_literal:lit=' (' idx=11 ' :PRINT e$ :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'(' idx=12 ':PRINT e$ :BEEP b%,10*b% '
   (check_literal)   '(' != ':'
   (check_literal) check_literal: ret0
  (check_sub_expr) check_sub_expr: ret0
 (check_eitem) check_eitem:ret0
(scan_expression) scan_expression: ret1 ' :PRINT e$ :BEEP b%,10*b% ' commas:1
(scan_command) scan_command: ret1 =>'AT'
(scan_command) 
ENDEXP
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: AT type:17
(op_stack_print) 
------------------

(  output_sub_end)
(token_is_function) 
token_is_function:
(token_is_function) AT is function
Pop 5
Pop 'AT'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_function) [i,(U )] v v AT
(  output_sub_end)
Finalise stack
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'a%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? '' nidx:-1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'c1%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'AT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
 BE:

Type Check Stack (0)

 BE:a%
type_check_stack_push: 'a%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'a%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'a%' type:i (0)
 BE:

Type Check Stack (1)

000: 'a%' type:i (0)
 BE:c1%
type_check_stack_push: 'c1%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'a%' type:0
(type_check_stack_print) 
001: 'c1%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'a%' type:i (0)
001: 'c1%' type:i (0)
 BE:

Type Check Stack (2)

000: 'a%' type:i (0)
001: 'c1%' type:i (0)
 BE:AT
FN: 2 args
(function_return_type) 
function_return_type: 'AT' =>v
(function_return_type) 
function_return_type: 'AT' =>17
ret_type;17 v
typecheck_expression:Ret type of AT : v
type_check_stack_pop: 'c1%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'a%' type:0
(type_check_stack_print) 
------------------

FN ARG 1 ri c1% 0(i)  Arg ok
type_check_stack_pop: 'a%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (0)

(type_check_stack_print) 
------------------

FN ARG 0 ri a% 0(i)  Arg ok
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:17
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'a%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? '' nidx:-1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'c1%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'AT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'a%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     i rq:i 'c1%'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_FUNCTION     v rq:v 'AT'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
(process_expression_types) 
==INFIX==

Var: a% ary:0 NumIdx:0
infix_stack_push: 'a%'
Var: c1% ary:0 NumIdx:0
infix_stack_push: 'c1%'
infix_stack_pop: 'c1%'
infix_stack_pop: 'a%'
infix_stack_push: 'AT(a% c1% )'
infix_stack_pop: 'AT(a% c1% )'
(process_expression_types) ==AT(a% c1% )==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_START    U rq:?   0:
(    output_qcode) N4 EXP_BUFF_ID_VARIABLE     i rq:i c1%  0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_FUNCTION     v rq:v AT  0:
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:i   0:

 (check_literal) check_literal:lit=':' idx=12 ':PRINT e$ :BEEP b%,10*b% '
 (check_literal) check_literal:After drop space:':' idx=12 ':PRINT e$ :BEEP b%,10*b% '
 (check_literal) check_literal:After while():PRINT e$ :BEEP b%,10*b% 
 (check_literal) check_literal:ret1 

 (scan_literal) scan_literal:lit=':' 'PRINT e$ :BEEP b%,10*b% '
 (scan_literal) scan_literal:After drop space:'PRINT e$ :BEEP b%,10*b% '
 (scan_literal) scan_literal:while loop:PRINT e$ :BEEP b%,10*b% 
 (scan_literal) scan_literal:ret1

 (check_line) check_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'PRINT e$ :BEEP b%,10*b% ':
    (check_vname) check_vname ret1 ' e$ :BEEP b%,10*b% ':
   (check_variable) check_variable: ' e$ :BEEP b%,10*b% '
   (check_variable) check_variable: Ary test ' e$ :BEEP b%,10*b% '

    (check_literal) check_literal:lit='(' idx=18 ' e$ :BEEP b%,10*b% '
    (check_literal) check_literal:After drop space:'(' idx=18 ' e$ :BEEP b%,10*b% '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=18 ' e$ :BEEP b%,10*b% '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=19 'e$ :BEEP b%,10*b% '
  (check_literal)   '=' != 'e'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'PRINT e$ :BEEP b%,10*b% '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'PRINT'
(check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=19, ' e$ :BEEP b%,10*b% '
========================================================
  AT a%,c1% :PRINT e$ :BEEP b%,10*b% 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'PRINT e$ :BEEP b%,10*b% ':
    (check_vname) check_vname ret1 ' e$ :BEEP b%,10*b% ':
   (check_variable) check_variable: ' e$ :BEEP b%,10*b% '
   (check_variable) check_variable: Ary test ' e$ :BEEP b%,10*b% '

    (check_literal) check_literal:lit='(' idx=18 ' e$ :BEEP b%,10*b% '
    (check_literal) check_literal:After drop space:'(' idx=18 ' e$ :BEEP b%,10*b% '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=18 ' e$ :BEEP b%,10*b% '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=19 'e$ :BEEP b%,10*b% '
  (check_literal)   '=' != 'e'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'PRINT e$ :BEEP b%,10*b% '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'PRINT'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'PRINT' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) PRINT is function
 (function_return_type) 
function_return_type: 'PRINT' =>v
 (function_return_type) 
function_return_type: 'PRINT' =>17
process_token: 'PRINT' t=>v
 Push:'PRINT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' e$ :BEEP b%,10*b% '

   (check_eitem) check_eitem: 'e$ :BEEP b%,10*b% '

    (check_operator) check_operator: e$ :BEEP b%,10*b% 

     (check_literal) check_literal:lit=' ,' idx=19 'e$ :BEEP b%,10*b% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=19 'e$ :BEEP b%,10*b% '
     (check_literal)   ',' != 'e'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'e$ :BEEP b%,10*b% '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=19 'e$ :BEEP b%,10*b% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=19 'e$ :BEEP b%,10*b% '
     (check_literal)   '%' != 'e'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=19 'e$ :BEEP b%,10*b% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=19 'e$ :BEEP b%,10*b% '
     (check_literal)   '"' != 'e'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'e$ :BEEP b%,10*b% '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'e$ :BEEP b%,10*b% ':
      (check_vname) check_vname ret1 '$ :BEEP b%,10*b% ':
     (check_variable) check_variable: '$ :BEEP b%,10*b% '
     (check_variable) check_variable: Ary test ' :BEEP b%,10*b% '

      (check_literal) check_literal:lit='(' idx=21 ' :BEEP b%,10*b% '
      (check_literal) check_literal:After drop space:'(' idx=21 ' :BEEP b%,10*b% '
      (check_literal)   '(' != ' '
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='$' is str:1 int:0 flt:0 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator: e$ :BEEP b%,10*b% 

    (check_literal) check_literal:lit=' ,' idx=19 'e$ :BEEP b%,10*b% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=19 'e$ :BEEP b%,10*b% '
    (check_literal)   ',' != 'e'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'e$ :BEEP b%,10*b% '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=19 'e$ :BEEP b%,10*b% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=19 'e$ :BEEP b%,10*b% '
    (check_literal)   '%' != 'e'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=19 'e$ :BEEP b%,10*b% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=19 'e$ :BEEP b%,10*b% '
    (check_literal)   '"' != 'e'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'e$ :BEEP b%,10*b% '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'e$ :BEEP b%,10*b% ':
     (check_vname) check_vname ret1 '$ :BEEP b%,10*b% ':
    (check_variable) check_variable: '$ :BEEP b%,10*b% '
    (check_variable) check_variable: Ary test ' :BEEP b%,10*b% '

     (check_literal) check_literal:lit='(' idx=21 ' :BEEP b%,10*b% '
     (check_literal) check_literal:After drop space:'(' idx=21 ' :BEEP b%,10*b% '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='$' is str:1 int:0 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1

  (scan_atom) scan_atom:

   (check_literal) check_literal:lit=' %' idx=19 'e$ :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=19 'e$ :BEEP b%,10*b% '
   (check_literal)   '%' != 'e'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=19 'e$ :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=19 'e$ :BEEP b%,10*b% '
   (check_literal)   '"' != 'e'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'e$ :BEEP b%,10*b% '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'e$ :BEEP b%,10*b% ':
    (check_vname) check_vname ret1 '$ :BEEP b%,10*b% ':
   (check_variable) check_variable: '$ :BEEP b%,10*b% '
   (check_variable) check_variable: Ary test ' :BEEP b%,10*b% '

    (check_literal) check_literal:lit='(' idx=21 ' :BEEP b%,10*b% '
    (check_literal) check_literal:After drop space:'(' idx=21 ' :BEEP b%,10*b% '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='$' is str:1 int:0 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'e$ :BEEP b%,10*b% '
   (scan_vname) scan_vname: ret1 'e'
  (scan_variable) scan_variable: '$ :BEEP b%,10*b% ' vname='e'
  (scan_variable) scan_variable: Ary test ' :BEEP b%,10*b% '

   (check_literal) check_literal:lit='(' idx=21 ' :BEEP b%,10*b% '
   (check_literal) check_literal:After drop space:'(' idx=21 ' :BEEP b%,10*b% '
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='e$' is str:1 int:0 flt:0 ary:0
   Frst:0 T:'e$' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:e$ is not function
token_is_variable: tok:'e$'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:e$ is not function
 (init_get_name) 
init_get_name:'e$'
 (init_get_name) 
init_get_name:'e$'
 (get_name) 
get_name:gn:'e$'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:s Outtype:s
( output_variable) [s,(U )] s s e$
 (print_var_info) 
VAR INFO: '                e$' gbl:0 ref:1 int:0 flt:0 str:1 ary:0 max_str:0 max_ary:0 num_ind:0
 (scan_atom) scan_atom:ret1
(scan_expression) n commas now:0

 (check_eitem) check_eitem: ' :BEEP b%,10*b% '

  (check_operator) check_operator:  :BEEP b%,10*b% 

   (check_literal) check_literal:lit=' ,' idx=22 ':BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=22 ':BEEP b%,10*b% '
   (check_literal)   ',' != ':'
   (check_literal) check_literal: ret0
  (check_operator) ret0:is comma: 0

  (check_function) check_function: ':BEEP b%,10*b% '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=21 ' :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=22 ':BEEP b%,10*b% '
   (check_literal)   '%' != ':'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=21 ' :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=22 ':BEEP b%,10*b% '
   (check_literal)   '"' != ':'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: ':BEEP b%,10*b% '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname ':BEEP b%,10*b% ':
    (check_vname) check_vname ret0 ':BEEP b%,10*b% ':
   (check_variable) check_variable:ret0 
  (check_atom) check_atom:ret1

  (check_sub_expr) check_sub_expr:

   (check_literal) check_literal:lit=' (' idx=21 ' :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'(' idx=22 ':BEEP b%,10*b% '
   (check_literal)   '(' != ':'
   (check_literal) check_literal: ret0
  (check_sub_expr) check_sub_expr: ret0
 (check_eitem) check_eitem:ret0
(scan_expression) scan_expression: ret1 ' :BEEP b%,10*b% ' commas:0
(scan_command) scan_command: ret1 =>'PRINT'
(scan_command) 
ENDEXP
   Frst:0 T:')' exptype:s
Pop 4
Pop '('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: PRINT type:17
(op_stack_print) 
------------------

(  output_sub_end)
(token_is_function) 
token_is_function:
(token_is_function) PRINT is function
Pop 5
Pop 'PRINT'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_function) [s,(U )] v v PRINT
(  output_sub_end)
Finalise stack
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     s rq:s 'e$' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
 BE:

Type Check Stack (0)

 BE:e$
type_check_stack_push: 'e$'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'e$' type:2
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'e$' type:s (2)
 BE:

Type Check Stack (1)

000: 'e$' type:s (2)
 BE:PRINT
FN: 1 args
(function_return_type) 
function_return_type: 'PRINT' =>v
(function_return_type) 
function_return_type: 'PRINT' =>17
ret_type;17 v
typecheck_expression:Ret type of PRINT : v
type_check_stack_pop: 'e$'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (0)

(type_check_stack_print) 
------------------

FN ARG 0 ri e$ 2(s)  Arg not OK
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:17
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     s rq:s 'e$' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     s rq:s 'e$'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
(process_expression_types) 
==INFIX==

Var: e$ ary:0 NumIdx:0
infix_stack_push: 'e$'
infix_stack_pop: 'e$'
infix_stack_push: 'PRINT(e$ )'
infix_stack_pop: 'PRINT(e$ )'
(process_expression_types) ==PRINT(e$ )==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     s rq:s e$  0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N4 EXP_BUFF_ID_FUNCTION     v rq:v PRINT  0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_END      U rq:i   0:

 (check_literal) check_literal:lit=':' idx=22 ':BEEP b%,10*b% '
 (check_literal) check_literal:After drop space:':' idx=22 ':BEEP b%,10*b% '
 (check_literal) check_literal:After while():BEEP b%,10*b% 
 (check_literal) check_literal:ret1 

 (scan_literal) scan_literal:lit=':' 'BEEP b%,10*b% '
 (scan_literal) scan_literal:After drop space:'BEEP b%,10*b% '
 (scan_literal) scan_literal:while loop:BEEP b%,10*b% 
 (scan_literal) scan_literal:ret1

 (check_line) check_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'BEEP b%,10*b% ':
    (check_vname) check_vname ret1 ' b%,10*b% ':
   (check_variable) check_variable: ' b%,10*b% '
   (check_variable) check_variable: Ary test ' b%,10*b% '

    (check_literal) check_literal:lit='(' idx=27 ' b%,10*b% '
    (check_literal) check_literal:After drop space:'(' idx=27 ' b%,10*b% '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=27 ' b%,10*b% '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=28 'b%,10*b% '
  (check_literal)   '=' != 'b'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'BEEP b%,10*b% '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'BEEP'
(check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=10, ' b%,10*b% '
========================================================
  AT a%,c1% :PRINT e$ :BEEP b%,10*b% 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'BEEP b%,10*b% ':
    (check_vname) check_vname ret1 ' b%,10*b% ':
   (check_variable) check_variable: ' b%,10*b% '
   (check_variable) check_variable: Ary test ' b%,10*b% '

    (check_literal) check_literal:lit='(' idx=27 ' b%,10*b% '
    (check_literal) check_literal:After drop space:'(' idx=27 ' b%,10*b% '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=27 ' b%,10*b% '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=28 'b%,10*b% '
  (check_literal)   '=' != 'b'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'BEEP b%,10*b% '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'BEEP'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'BEEP' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) BEEP is function
 (function_return_type) 
function_return_type: 'BEEP' =>v
 (function_return_type) 
function_return_type: 'BEEP' =>17
process_token: 'BEEP' t=>v
 Push:'BEEP'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: BEEP type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: BEEP type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' b%,10*b% '

   (check_eitem) check_eitem: 'b%,10*b% '

    (check_operator) check_operator: b%,10*b% 

     (check_literal) check_literal:lit=' ,' idx=28 'b%,10*b% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=28 'b%,10*b% '
     (check_literal)   ',' != 'b'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'b%,10*b% '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=28 'b%,10*b% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=28 'b%,10*b% '
     (check_literal)   '%' != 'b'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=28 'b%,10*b% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=28 'b%,10*b% '
     (check_literal)   '"' != 'b'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'b%,10*b% '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'b%,10*b% ':
      (check_vname) check_vname ret1 '%,10*b% ':
     (check_variable) check_variable: '%,10*b% '
     (check_variable) check_variable: Ary test ',10*b% '

      (check_literal) check_literal:lit='(' idx=30 ',10*b% '
      (check_literal) check_literal:After drop space:'(' idx=30 ',10*b% '
      (check_literal)   '(' != ','
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator: b%,10*b% 

    (check_literal) check_literal:lit=' ,' idx=28 'b%,10*b% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=28 'b%,10*b% '
    (check_literal)   ',' != 'b'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'b%,10*b% '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=28 'b%,10*b% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=28 'b%,10*b% '
    (check_literal)   '%' != 'b'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=28 'b%,10*b% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=28 'b%,10*b% '
    (check_literal)   '"' != 'b'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'b%,10*b% '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'b%,10*b% ':
     (check_vname) check_vname ret1 '%,10*b% ':
    (check_variable) check_variable: '%,10*b% '
    (check_variable) check_variable: Ary test ',10*b% '

     (check_literal) check_literal:lit='(' idx=30 ',10*b% '
     (check_literal) check_literal:After drop space:'(' idx=30 ',10*b% '
     (check_literal)   '(' != ','
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1

  (scan_atom) scan_atom:

   (check_literal) check_literal:lit=' %' idx=28 'b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=28 'b%,10*b% '
   (check_literal)   '%' != 'b'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=28 'b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=28 'b%,10*b% '
   (check_literal)   '"' != 'b'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'b%,10*b% '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'b%,10*b% ':
    (check_vname) check_vname ret1 '%,10*b% ':
   (check_variable) check_variable: '%,10*b% '
   (check_variable) check_variable: Ary test ',10*b% '

    (check_literal) check_literal:lit='(' idx=30 ',10*b% '
    (check_literal) check_literal:After drop space:'(' idx=30 ',10*b% '
    (check_literal)   '(' != ','
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'b%,10*b% '
   (scan_vname) scan_vname: ret1 'b'
  (scan_variable) scan_variable: '%,10*b% ' vname='b'
  (scan_variable) scan_variable: Ary test ',10*b% '

   (check_literal) check_literal:lit='(' idx=30 ',10*b% '
   (check_literal) check_literal:After drop space:'(' idx=30 ',10*b% '
   (check_literal)   '(' != ','
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='b%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'b%' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:b% is not function
token_is_variable: tok:'b%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:b% is not function
 (init_get_name) 
init_get_name:'b%'
 (init_get_name) 
init_get_name:'b%'
 (get_name) 
get_name:gn:'b%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,(U )] i i b%
 (print_var_info) 
VAR INFO: '                b%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
 (scan_atom) scan_atom:ret1
(scan_expression) n commas now:0

 (check_eitem) check_eitem: ',10*b% '

  (check_operator) check_operator: ,10*b% 

   (check_literal) check_literal:lit=' ,' idx=30 ',10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=30 ',10*b% '
   (check_literal) check_literal:After while():10*b% 
   (check_literal) check_literal:ret1 
  (check_operator) ret1:is comma: 0
 (check_eitem) check_eitem:ret1 comma:1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: ,10*b% 

   (check_literal) check_literal:lit=' ,' idx=30 ',10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=30 ',10*b% '
   (check_literal) check_literal:After while():10*b% 
   (check_literal) check_literal:ret1 
  (check_operator) ret1:is comma: 0

  (scan_operator) scan_operator: ',10*b% '

   (check_literal) check_literal:lit=' ,' idx=30 ',10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=30 ',10*b% '
   (check_literal) check_literal:After while():10*b% 
   (check_literal) check_literal:ret1 

   (scan_literal) scan_literal:lit=' ,' ',10*b% '
   (scan_literal) scan_literal:After drop space:',10*b% '
   (scan_literal) scan_literal:while loop:,10*b% 
   Frst:0 T:',' exptype:i
(output_sub_start)
   (scan_literal) scan_literal:ret1
  (scan_operator) ret1:is comma: 1
 (scan_eitem) Is comma;1
 (scan_expression) n commas now:1

  (check_eitem) check_eitem: '10*b% '

   (check_operator) check_operator: 10*b% 

    (check_literal) check_literal:lit=' ,' idx=31 '10*b% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=31 '10*b% '
    (check_literal)   ',' != '1'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: '10*b% '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=31 '10*b% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=31 '10*b% '
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=31 '10*b% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=31 '10*b% '
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '10*b% '
     (check_integer) check_integer:ret1
    (check_number) check_number: ret1
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator: 10*b% 

    (check_literal) check_literal:lit=' ,' idx=31 '10*b% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=31 '10*b% '
    (check_literal)   ',' != '1'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: '10*b% '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=31 '10*b% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=31 '10*b% '
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=31 '10*b% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=31 '10*b% '
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '10*b% '
     (check_integer) check_integer:ret1
    (check_number) check_number: ret1
   (check_atom) check_atom:ret1

   (scan_atom) scan_atom:

    (check_literal) check_literal:lit=' %' idx=31 '10*b% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=31 '10*b% '
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=31 '10*b% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=31 '10*b% '
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '10*b% '
     (check_integer) check_integer:ret1
    (check_number) check_number: ret1

    (scan_number) scan_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '10*b% '
     (check_integer) check_integer:ret1

     (scan_integer) scan_integer:
     (scan_integer) scan_integer:ret1
   Frst:0 T:'10' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U )] i i 10
    (scan_integer) scan_integer:ret1  10
   (scan_atom) scan_atom:ret1
  (scan_expression) n commas now:1

   (check_eitem) check_eitem: '*b% '

    (check_operator) check_operator: *b% 

     (check_literal) check_literal:lit=' ,' idx=33 '*b% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=33 '*b% '
     (check_literal)   ',' != '*'
     (check_literal) check_literal: ret0
    (check_operator) ret1:is comma: 0
   (check_eitem) check_eitem:ret1 comma:1

   (scan_eitem) scan_eitem:

    (check_operator) check_operator: *b% 

     (check_literal) check_literal:lit=' ,' idx=33 '*b% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=33 '*b% '
     (check_literal)   ',' != '*'
     (check_literal) check_literal: ret0
    (check_operator) ret1:is comma: 0

    (scan_operator) scan_operator: '*b% '

     (check_literal) check_literal:lit=' ,' idx=33 '*b% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=33 '*b% '
     (check_literal)   ',' != '*'
     (check_literal) check_literal: ret0
    (scan_operator) scan_operator: ret1 'b% '
   Frst:0 T:'*' exptype:i
   (operator_precedence) 
* is operator
'*' is operator
   (process_token) 
Token is operator o1 name:* o2 name:(
   (process_token) 
opr1:5 opr2:0
Push 1
 Push:'*'
   (op_stack_print) 
------------------
   (op_stack_print) 
Operator Stack     (3)

   (op_stack_print) 
000: BEEP type:17
   (op_stack_print) 
001: ( type:16
   (op_stack_print) 
002: * type:0
   (op_stack_print) 
------------------

   (scan_eitem) Is comma;0
   (scan_expression) n commas now:1

    (check_eitem) check_eitem: 'b% '

     (check_operator) check_operator: b% 

      (check_literal) check_literal:lit=' ,' idx=34 'b% '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=34 'b% '
      (check_literal)   ',' != 'b'
      (check_literal) check_literal: ret0
     (check_operator) ret0:is comma: 0

     (check_function) check_function: 'b% '
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=34 'b% '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=34 'b% '
      (check_literal)   '%' != 'b'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=34 'b% '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=34 'b% '
      (check_literal)   '"' != 'b'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: 'b% '
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname 'b% ':
       (check_vname) check_vname ret1 '% ':
      (check_variable) check_variable: '% '
      (check_variable) check_variable: Ary test ' '

       (check_literal) check_literal:lit='(' idx=36 ' '
       (check_literal) check_literal:After drop space:'(' idx=36 ' '
       (check_literal)   '(' != ' '
       (check_literal) check_literal: ret0
      (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
     (check_variable) check_variable:ret1 
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (scan_eitem) scan_eitem:

    (check_operator) check_operator: b% 

     (check_literal) check_literal:lit=' ,' idx=34 'b% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=34 'b% '
     (check_literal)   ',' != 'b'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'b% '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=34 'b% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=34 'b% '
     (check_literal)   '%' != 'b'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=34 'b% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=34 'b% '
     (check_literal)   '"' != 'b'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'b% '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'b% ':
      (check_vname) check_vname ret1 '% ':
     (check_variable) check_variable: '% '
     (check_variable) check_variable: Ary test ' '

      (check_literal) check_literal:lit='(' idx=36 ' '
      (check_literal) check_literal:After drop space:'(' idx=36 ' '
      (check_literal)   '(' != ' '
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1

   (scan_atom) scan_atom:

    (check_literal) check_literal:lit=' %' idx=34 'b% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=34 'b% '
    (check_literal)   '%' != 'b'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=34 'b% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=34 'b% '
    (check_literal)   '"' != 'b'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'b% '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'b% ':
     (check_vname) check_vname ret1 '% ':
    (check_variable) check_variable: '% '
    (check_variable) check_variable: Ary test ' '

     (check_literal) check_literal:lit='(' idx=36 ' '
     (check_literal) check_literal:After drop space:'(' idx=36 ' '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 

   (scan_variable) scan_variable:

    (scan_vname) scan_vname: 'b% '
    (scan_vname) scan_vname: ret1 'b'
   (scan_variable) scan_variable: '% ' vname='b'
   (scan_variable) scan_variable: Ary test ' '

    (check_literal) check_literal:lit='(' idx=36 ' '
    (check_literal) check_literal:After drop space:'(' idx=36 ' '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (scan_variable) scan_variable:ret1 vname='b%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'b%' exptype:i
  (operator_precedence) 
* is operator
  (token_is_function) 
token_is_function:
  (token_is_function) 
token_is_function:b% is not function
token_is_variable: tok:'b%'
  (token_is_function) 
token_is_function:
  (token_is_function) 
token_is_function:b% is not function
  (init_get_name) 
init_get_name:'b%'
  (init_get_name) 
init_get_name:'b%'
  (get_name) 
get_name:gn:'b%'
process_token:type:i req_type:i
modify_expression_type:Inittype:i Intype:i Outtype:i
( output_variable) [i,(U )] i i b%
  (print_var_info) 
VAR INFO: '                b%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
  (scan_atom) scan_atom:ret1
 (scan_expression) n commas now:1

  (check_eitem) check_eitem: ' '

   (check_operator) check_operator:  

    (check_literal) check_literal:lit=' ,' idx=37 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=37 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_operator) ret0:is comma: 0

   (check_function) check_function: ''
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=36 ' '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=37 ''
    (check_literal) check_literal  ret0 Empty test string

    (check_literal) check_literal:lit=' "' idx=36 ' '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=37 ''
    (check_literal) check_literal  ret0 Empty test string

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: ''
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname '':
     (check_vname) check_vname ret0 '':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret1

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=36 ' '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=37 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_sub_expr) check_sub_expr: ret0
  (check_eitem) check_eitem:ret0
 (scan_expression) scan_expression: ret1 ' ' commas:1
(scan_command) scan_command: ret1 =>'BEEP'
(scan_command) 
ENDEXP
   Frst:0 T:')' exptype:i
(operator_precedence) 
* is operator
(process_token) 
Pop 3
Pop '*'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (2)

(op_stack_print) 
000: BEEP type:17
(op_stack_print) 
001: ( type:16
(op_stack_print) 
------------------

( output_operator) [i,(U )] i i *
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:* is not function
Pop 4
Pop '('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: BEEP type:17
(op_stack_print) 
------------------

(  output_sub_end)
(token_is_function) 
token_is_function:
(token_is_function) BEEP is function
Pop 5
Pop 'BEEP'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_function) [i,(U )] v v BEEP
(  output_sub_end)
Finalise stack
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'b%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? '' nidx:-1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '10' nidx:33  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'b%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '*' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'BEEP' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
 BE:

Type Check Stack (0)

 BE:b%
type_check_stack_push: 'b%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'b%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'b%' type:i (0)
 BE:

Type Check Stack (1)

000: 'b%' type:i (0)
 BE:10
type_check_stack_push: '10'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'b%' type:0
(type_check_stack_print) 
001: '10' type:0
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'b%' type:i (0)
001: '10' type:i (0)
 BE:b%
type_check_stack_push: 'b%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (3)

(type_check_stack_print) 
000: 'b%' type:0
(type_check_stack_print) 
001: '10' type:0
(type_check_stack_print) 
002: 'b%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (3)

000: 'b%' type:i (0)
001: '10' type:i (0)
002: 'b%' type:i (0)
 BE:*
BUFF_ID_OPERATOR
Found operator *
type_check_stack_pop: 'b%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'b%' type:0
(type_check_stack_print) 
001: '10' type:0
(type_check_stack_print) 
------------------

type_check_stack_pop: '10'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'b%' type:0
(type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'b%' type:0
(type_check_stack_print) 
001: '000' type:0
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'b%' type:i (0)
001: '000' type:i (0)
 BE:

Type Check Stack (2)

000: 'b%' type:i (0)
001: '000' type:i (0)
 BE:BEEP
FN: 2 args
(function_return_type) 
function_return_type: 'BEEP' =>v
(function_return_type) 
function_return_type: 'BEEP' =>17
ret_type;17 v
typecheck_expression:Ret type of BEEP : v
type_check_stack_pop: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'b%' type:0
(type_check_stack_print) 
------------------

FN ARG 1 ri 000 0(i)  Arg ok
type_check_stack_pop: 'b%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (0)

(type_check_stack_print) 
------------------

FN ARG 0 ri b% 0(i)  Arg ok
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:17
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'b%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? '' nidx:-1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '10' nidx:33  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'b%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '*' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'BEEP' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'b%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_INTEGER      i rq:i '10'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_VARIABLE     i rq:i 'b%'  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 5 4
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_FUNCTION     v rq:v 'BEEP'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
(process_expression_types) 
==INFIX==

Var: b% ary:0 NumIdx:0
infix_stack_push: 'b%'
infix_stack_push: '10'
Var: b% ary:0 NumIdx:0
infix_stack_push: 'b%'
infix_stack_pop: 'b%'
infix_stack_pop: '10'
infix_stack_push: '(10 * b%)'
infix_stack_pop: '(10 * b%)'
infix_stack_pop: 'b%'
infix_stack_push: 'BEEP(b% (10 * b%) )'
infix_stack_pop: 'BEEP(b% (10 * b%) )'
(process_expression_types) ==BEEP(b% (10 * b%) )==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_START    U rq:?   0:
(    output_qcode) N4 EXP_BUFF_ID_INTEGER      i rq:i 10  0:
(    output_qcode) N5 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
(    output_qcode) N6 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 5 4
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N8 EXP_BUFF_ID_FUNCTION     v rq:v BEEP  0:
(    output_qcode) N9 EXP_BUFF_ID_SUB_END      U rq:i   0:

 (check_literal) check_literal:lit=':' idx=37 ''
 (check_literal) check_literal:After drop space:':' idx=37 ''
 (check_literal) check_literal  ret0 Empty test string
(translate_file) 
cline scanned OK
******************************
**  AT a%,c% :PRINT CHR$(5) **
******************************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'AT a%,c% :PRINT CHR$(5) ':
     (check_vname) check_vname ret1 ' a%,c% :PRINT CHR$(5) ':
    (check_variable) check_variable: ' a%,c% :PRINT CHR$(5) '
    (check_variable) check_variable: Ary test ' a%,c% :PRINT CHR$(5) '

     (check_literal) check_literal:lit='(' idx=4 ' a%,c% :PRINT CHR$(5) '
     (check_literal) check_literal:After drop space:'(' idx=4 ' a%,c% :PRINT CHR$(5) '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=4 ' a%,c% :PRINT CHR$(5) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=5 'a%,c% :PRINT CHR$(5) '
   (check_literal)   '=' != 'a'
   (check_literal) check_literal: ret0
  (check_assignment) check_assignment:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) check_textlabel: 'AT a%,c% :PRINT CHR$(5) '
   (check_textlabel) check_textlabel:ret0
  (check_proc_call) check_proc_call:ret0

  (check_command) check_command:
  (check_command) check_command: ret1 found=> 'AT'
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=22, ' a%,c% :PRINT CHR$(5) '
========================================================
  AT a%,c% :PRINT CHR$(5) 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'AT a%,c% :PRINT CHR$(5) ':
    (check_vname) check_vname ret1 ' a%,c% :PRINT CHR$(5) ':
   (check_variable) check_variable: ' a%,c% :PRINT CHR$(5) '
   (check_variable) check_variable: Ary test ' a%,c% :PRINT CHR$(5) '

    (check_literal) check_literal:lit='(' idx=4 ' a%,c% :PRINT CHR$(5) '
    (check_literal) check_literal:After drop space:'(' idx=4 ' a%,c% :PRINT CHR$(5) '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=4 ' a%,c% :PRINT CHR$(5) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=5 'a%,c% :PRINT CHR$(5) '
  (check_literal)   '=' != 'a'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'AT a%,c% :PRINT CHR$(5) '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'AT'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'AT' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) AT is function
 (function_return_type) 
function_return_type: 'AT' =>v
 (function_return_type) 
function_return_type: 'AT' =>17
process_token: 'AT' t=>v
 Push:'AT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: AT type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: AT type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' a%,c% :PRINT CHR$(5) '

   (check_eitem) check_eitem: 'a%,c% :PRINT CHR$(5) '

    (check_operator) check_operator: a%,c% :PRINT CHR$(5) 

     (check_literal) check_literal:lit=' ,' idx=5 'a%,c% :PRINT CHR$(5) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=5 'a%,c% :PRINT CHR$(5) '
     (check_literal)   ',' != 'a'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'a%,c% :PRINT CHR$(5) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=5 'a%,c% :PRINT CHR$(5) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=5 'a%,c% :PRINT CHR$(5) '
     (check_literal)   '%' != 'a'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=5 'a%,c% :PRINT CHR$(5) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=5 'a%,c% :PRINT CHR$(5) '
     (check_literal)   '"' != 'a'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'a%,c% :PRINT CHR$(5) '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'a%,c% :PRINT CHR$(5) ':
      (check_vname) check_vname ret1 '%,c% :PRINT CHR$(5) ':
     (check_variable) check_variable: '%,c% :PRINT CHR$(5) '
     (check_variable) check_variable: Ary test ',c% :PRINT CHR$(5) '

      (check_literal) check_literal:lit='(' idx=7 ',c% :PRINT CHR$(5) '
      (check_literal) check_literal:After drop space:'(' idx=7 ',c% :PRINT CHR$(5) '
      (check_literal)   '(' != ','
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator: a%,c% :PRINT CHR$(5) 

    (check_literal) check_literal:lit=' ,' idx=5 'a%,c% :PRINT CHR$(5) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=5 'a%,c% :PRINT CHR$(5) '
    (check_literal)   ',' != 'a'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'a%,c% :PRINT CHR$(5) '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=5 'a%,c% :PRINT CHR$(5) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=5 'a%,c% :PRINT CHR$(5) '
    (check_literal)   '%' != 'a'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=5 'a%,c% :PRINT CHR$(5) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=5 'a%,c% :PRINT CHR$(5) '
    (check_literal)   '"' != 'a'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'a%,c% :PRINT CHR$(5) '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'a%,c% :PRINT CHR$(5) ':
     (check_vname) check_vname ret1 '%,c% :PRINT CHR$(5) ':
    (check_variable) check_variable: '%,c% :PRINT CHR$(5) '
    (check_variable) check_variable: Ary test ',c% :PRINT CHR$(5) '

     (check_literal) check_literal:lit='(' idx=7 ',c% :PRINT CHR$(5) '
     (check_literal) check_literal:After drop space:'(' idx=7 ',c% :PRINT CHR$(5) '
     (check_literal)   '(' != ','
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1

  (scan_atom) scan_atom:

   (check_literal) check_literal:lit=' %' idx=5 'a%,c% :PRINT CHR$(5) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=5 'a%,c% :PRINT CHR$(5) '
   (check_literal)   '%' != 'a'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=5 'a%,c% :PRINT CHR$(5) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=5 'a%,c% :PRINT CHR$(5) '
   (check_literal)   '"' != 'a'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'a%,c% :PRINT CHR$(5) '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'a%,c% :PRINT CHR$(5) ':
    (check_vname) check_vname ret1 '%,c% :PRINT CHR$(5) ':
   (check_variable) check_variable: '%,c% :PRINT CHR$(5) '
   (check_variable) check_variable: Ary test ',c% :PRINT CHR$(5) '

    (check_literal) check_literal:lit='(' idx=7 ',c% :PRINT CHR$(5) '
    (check_literal) check_literal:After drop space:'(' idx=7 ',c% :PRINT CHR$(5) '
    (check_literal)   '(' != ','
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'a%,c% :PRINT CHR$(5) '
   (scan_vname) scan_vname: ret1 'a'
  (scan_variable) scan_variable: '%,c% :PRINT CHR$(5) ' vname='a'
  (scan_variable) scan_variable: Ary test ',c% :PRINT CHR$(5) '

   (check_literal) check_literal:lit='(' idx=7 ',c% :PRINT CHR$(5) '
   (check_literal) check_literal:After drop space:'(' idx=7 ',c% :PRINT CHR$(5) '
   (check_literal)   '(' != ','
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='a%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'a%' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:a% is not function
token_is_variable: tok:'a%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:a% is not function
 (init_get_name) 
init_get_name:'a%'
 (init_get_name) 
init_get_name:'a%'
 (get_name) 
get_name:gn:'a%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,(U )] i i a%
 (print_var_info) 
VAR INFO: '                a%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
 (scan_atom) scan_atom:ret1
(scan_expression) n commas now:0

 (check_eitem) check_eitem: ',c% :PRINT CHR$(5) '

  (check_operator) check_operator: ,c% :PRINT CHR$(5) 

   (check_literal) check_literal:lit=' ,' idx=7 ',c% :PRINT CHR$(5) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=7 ',c% :PRINT CHR$(5) '
   (check_literal) check_literal:After while():c% :PRINT CHR$(5) 
   (check_literal) check_literal:ret1 
  (check_operator) ret1:is comma: 0
 (check_eitem) check_eitem:ret1 comma:1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: ,c% :PRINT CHR$(5) 

   (check_literal) check_literal:lit=' ,' idx=7 ',c% :PRINT CHR$(5) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=7 ',c% :PRINT CHR$(5) '
   (check_literal) check_literal:After while():c% :PRINT CHR$(5) 
   (check_literal) check_literal:ret1 
  (check_operator) ret1:is comma: 0

  (scan_operator) scan_operator: ',c% :PRINT CHR$(5) '

   (check_literal) check_literal:lit=' ,' idx=7 ',c% :PRINT CHR$(5) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=7 ',c% :PRINT CHR$(5) '
   (check_literal) check_literal:After while():c% :PRINT CHR$(5) 
   (check_literal) check_literal:ret1 

   (scan_literal) scan_literal:lit=' ,' ',c% :PRINT CHR$(5) '
   (scan_literal) scan_literal:After drop space:',c% :PRINT CHR$(5) '
   (scan_literal) scan_literal:while loop:,c% :PRINT CHR$(5) 
   Frst:0 T:',' exptype:i
(output_sub_start)
   (scan_literal) scan_literal:ret1
  (scan_operator) ret1:is comma: 1
 (scan_eitem) Is comma;1
 (scan_expression) n commas now:1

  (check_eitem) check_eitem: 'c% :PRINT CHR$(5) '

   (check_operator) check_operator: c% :PRINT CHR$(5) 

    (check_literal) check_literal:lit=' ,' idx=8 'c% :PRINT CHR$(5) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=8 'c% :PRINT CHR$(5) '
    (check_literal)   ',' != 'c'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'c% :PRINT CHR$(5) '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=8 'c% :PRINT CHR$(5) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=8 'c% :PRINT CHR$(5) '
    (check_literal)   '%' != 'c'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=8 'c% :PRINT CHR$(5) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=8 'c% :PRINT CHR$(5) '
    (check_literal)   '"' != 'c'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'c% :PRINT CHR$(5) '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'c% :PRINT CHR$(5) ':
     (check_vname) check_vname ret1 '% :PRINT CHR$(5) ':
    (check_variable) check_variable: '% :PRINT CHR$(5) '
    (check_variable) check_variable: Ary test ' :PRINT CHR$(5) '

     (check_literal) check_literal:lit='(' idx=10 ' :PRINT CHR$(5) '
     (check_literal) check_literal:After drop space:'(' idx=10 ' :PRINT CHR$(5) '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1
 (check_eitem) check_eitem:ret1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: c% :PRINT CHR$(5) 

   (check_literal) check_literal:lit=' ,' idx=8 'c% :PRINT CHR$(5) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=8 'c% :PRINT CHR$(5) '
   (check_literal)   ',' != 'c'
   (check_literal) check_literal: ret0
  (check_operator) ret0:is comma: 0

  (check_function) check_function: 'c% :PRINT CHR$(5) '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=8 'c% :PRINT CHR$(5) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=8 'c% :PRINT CHR$(5) '
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=8 'c% :PRINT CHR$(5) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=8 'c% :PRINT CHR$(5) '
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c% :PRINT CHR$(5) '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'c% :PRINT CHR$(5) ':
    (check_vname) check_vname ret1 '% :PRINT CHR$(5) ':
   (check_variable) check_variable: '% :PRINT CHR$(5) '
   (check_variable) check_variable: Ary test ' :PRINT CHR$(5) '

    (check_literal) check_literal:lit='(' idx=10 ' :PRINT CHR$(5) '
    (check_literal) check_literal:After drop space:'(' idx=10 ' :PRINT CHR$(5) '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) check_atom:ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=8 'c% :PRINT CHR$(5) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=8 'c% :PRINT CHR$(5) '
  (check_literal)   '%' != 'c'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=8 'c% :PRINT CHR$(5) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=8 'c% :PRINT CHR$(5) '
  (check_literal)   '"' != 'c'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) check_float: ret0

   (check_integer) check_integer: 'c% :PRINT CHR$(5) '
   (check_integer) check_integer:ret0
  (check_number) check_number: ret0

  (check_variable) check_variable:

   (check_vname) check_vname 'c% :PRINT CHR$(5) ':
   (check_vname) check_vname ret1 '% :PRINT CHR$(5) ':
  (check_variable) check_variable: '% :PRINT CHR$(5) '
  (check_variable) check_variable: Ary test ' :PRINT CHR$(5) '

   (check_literal) check_literal:lit='(' idx=10 ' :PRINT CHR$(5) '
   (check_literal) check_literal:After drop space:'(' idx=10 ' :PRINT CHR$(5) '
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) scan_variable:

  (scan_vname) scan_vname: 'c% :PRINT CHR$(5) '
  (scan_vname) scan_vname: ret1 'c'
 (scan_variable) scan_variable: '% :PRINT CHR$(5) ' vname='c'
 (scan_variable) scan_variable: Ary test ' :PRINT CHR$(5) '

  (check_literal) check_literal:lit='(' idx=10 ' :PRINT CHR$(5) '
  (check_literal) check_literal:After drop space:'(' idx=10 ' :PRINT CHR$(5) '
  (check_literal)   '(' != ' '
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='c%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'c%' exptype:U
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:c% is not function
token_is_variable: tok:'c%'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:c% is not function
(init_get_name) 
init_get_name:'c%'
(init_get_name) 
init_get_name:'c%'
(get_name) 
get_name:gn:'c%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,(U )] i i c%
(print_var_info) 
VAR INFO: '                c%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
(scan_atom) scan_atom:ret1
(scan_expression) n commas now:1

 (check_eitem) check_eitem: ' :PRINT CHR$(5) '

  (check_operator) check_operator:  :PRINT CHR$(5) 

   (check_literal) check_literal:lit=' ,' idx=11 ':PRINT CHR$(5) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=11 ':PRINT CHR$(5) '
   (check_literal)   ',' != ':'
   (check_literal) check_literal: ret0
  (check_operator) ret0:is comma: 0

  (check_function) check_function: ':PRINT CHR$(5) '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=10 ' :PRINT CHR$(5) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=11 ':PRINT CHR$(5) '
   (check_literal)   '%' != ':'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=10 ' :PRINT CHR$(5) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=11 ':PRINT CHR$(5) '
   (check_literal)   '"' != ':'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: ':PRINT CHR$(5) '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname ':PRINT CHR$(5) ':
    (check_vname) check_vname ret0 ':PRINT CHR$(5) ':
   (check_variable) check_variable:ret0 
  (check_atom) check_atom:ret1

  (check_sub_expr) check_sub_expr:

   (check_literal) check_literal:lit=' (' idx=10 ' :PRINT CHR$(5) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'(' idx=11 ':PRINT CHR$(5) '
   (check_literal)   '(' != ':'
   (check_literal) check_literal: ret0
  (check_sub_expr) check_sub_expr: ret0
 (check_eitem) check_eitem:ret0
(scan_expression) scan_expression: ret1 ' :PRINT CHR$(5) ' commas:1
(scan_command) scan_command: ret1 =>'AT'
(scan_command) 
ENDEXP
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: AT type:17
(op_stack_print) 
------------------

(  output_sub_end)
(token_is_function) 
token_is_function:
(token_is_function) AT is function
Pop 5
Pop 'AT'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_function) [i,(U )] v v AT
(  output_sub_end)
Finalise stack
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'a%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? '' nidx:-1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'c%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'AT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
 BE:

Type Check Stack (0)

 BE:a%
type_check_stack_push: 'a%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'a%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'a%' type:i (0)
 BE:

Type Check Stack (1)

000: 'a%' type:i (0)
 BE:c%
type_check_stack_push: 'c%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'a%' type:0
(type_check_stack_print) 
001: 'c%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'a%' type:i (0)
001: 'c%' type:i (0)
 BE:

Type Check Stack (2)

000: 'a%' type:i (0)
001: 'c%' type:i (0)
 BE:AT
FN: 2 args
(function_return_type) 
function_return_type: 'AT' =>v
(function_return_type) 
function_return_type: 'AT' =>17
ret_type;17 v
typecheck_expression:Ret type of AT : v
type_check_stack_pop: 'c%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'a%' type:0
(type_check_stack_print) 
------------------

FN ARG 1 ri c% 0(i)  Arg ok
type_check_stack_pop: 'a%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (0)

(type_check_stack_print) 
------------------

FN ARG 0 ri a% 0(i)  Arg ok
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:17
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'a%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? '' nidx:-1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'c%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'AT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'a%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     i rq:i 'c%'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_FUNCTION     v rq:v 'AT'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
(process_expression_types) 
==INFIX==

Var: a% ary:0 NumIdx:0
infix_stack_push: 'a%'
Var: c% ary:0 NumIdx:0
infix_stack_push: 'c%'
infix_stack_pop: 'c%'
infix_stack_pop: 'a%'
infix_stack_push: 'AT(a% c% )'
infix_stack_pop: 'AT(a% c% )'
(process_expression_types) ==AT(a% c% )==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_START    U rq:?   0:
(    output_qcode) N4 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_FUNCTION     v rq:v AT  0:
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:i   0:

 (check_literal) check_literal:lit=':' idx=11 ':PRINT CHR$(5) '
 (check_literal) check_literal:After drop space:':' idx=11 ':PRINT CHR$(5) '
 (check_literal) check_literal:After while():PRINT CHR$(5) 
 (check_literal) check_literal:ret1 

 (scan_literal) scan_literal:lit=':' 'PRINT CHR$(5) '
 (scan_literal) scan_literal:After drop space:'PRINT CHR$(5) '
 (scan_literal) scan_literal:while loop:PRINT CHR$(5) 
 (scan_literal) scan_literal:ret1

 (check_line) check_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'PRINT CHR$(5) ':
    (check_vname) check_vname ret1 ' CHR$(5) ':
   (check_variable) check_variable: ' CHR$(5) '
   (check_variable) check_variable: Ary test ' CHR$(5) '

    (check_literal) check_literal:lit='(' idx=17 ' CHR$(5) '
    (check_literal) check_literal:After drop space:'(' idx=17 ' CHR$(5) '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=17 ' CHR$(5) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=18 'CHR$(5) '
  (check_literal)   '=' != 'C'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'PRINT CHR$(5) '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'PRINT'
(check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=9, ' CHR$(5) '
========================================================
  AT a%,c% :PRINT CHR$(5) 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'PRINT CHR$(5) ':
    (check_vname) check_vname ret1 ' CHR$(5) ':
   (check_variable) check_variable: ' CHR$(5) '
   (check_variable) check_variable: Ary test ' CHR$(5) '

    (check_literal) check_literal:lit='(' idx=17 ' CHR$(5) '
    (check_literal) check_literal:After drop space:'(' idx=17 ' CHR$(5) '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=17 ' CHR$(5) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=18 'CHR$(5) '
  (check_literal)   '=' != 'C'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'PRINT CHR$(5) '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'PRINT'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'PRINT' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) PRINT is function
 (function_return_type) 
function_return_type: 'PRINT' =>v
 (function_return_type) 
function_return_type: 'PRINT' =>17
process_token: 'PRINT' t=>v
 Push:'PRINT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' CHR$(5) '

   (check_eitem) check_eitem: 'CHR$(5) '

    (check_operator) check_operator: CHR$(5) 

     (check_literal) check_literal:lit=' ,' idx=18 'CHR$(5) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=18 'CHR$(5) '
     (check_literal)   ',' != 'C'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'CHR$(5) '
    (check_function) check_function: ret1 Found fn=>'CHR$'
   (check_eitem) check_eitem:ret1

   (scan_eitem) scan_eitem:

    (check_operator) check_operator: CHR$(5) 

     (check_literal) check_literal:lit=' ,' idx=18 'CHR$(5) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=18 'CHR$(5) '
     (check_literal)   ',' != 'C'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'CHR$(5) '
    (check_function) check_function: ret1 Found fn=>'CHR$'

    (scan_function) scan_function:
   Frst:0 T:'CHR$' exptype:U
    (token_is_function) 
token_is_function:
    (token_is_function) CHR$ is function
    (function_return_type) 
function_return_type: 'CHR$' =>s
    (function_return_type) 
function_return_type: 'CHR$' =>2
process_token: 'CHR$' t=>s
 Push:'CHR$'
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (3)

    (op_stack_print) 
000: PRINT type:17
    (op_stack_print) 
001: ( type:16
    (op_stack_print) 
002: CHR$ type:2
    (op_stack_print) 
------------------

    (scan_expression) n commas now:0

     (check_eitem) check_eitem: '(5) '

      (check_operator) check_operator: (5) 

       (check_literal) check_literal:lit=' ,' idx=22 '(5) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=22 '(5) '
       (check_literal)   ',' != '('
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: '(5) '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=22 '(5) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=22 '(5) '
       (check_literal)   '%' != '('
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=22 '(5) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=22 '(5) '
       (check_literal)   '"' != '('
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '(5) '
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname '(5) ':
        (check_vname) check_vname ret0 '(5) ':
       (check_variable) check_variable:ret0 
      (check_atom) check_atom:ret1

      (check_sub_expr) check_sub_expr:

       (check_literal) check_literal:lit=' (' idx=22 '(5) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'(' idx=22 '(5) '
       (check_literal) check_literal:After while():5) 
       (check_literal) check_literal:ret1 
      (check_sub_expr) check_sub_expr: ret1
     (check_eitem) check_eitem:ret1

     (scan_eitem) scan_eitem:

      (check_operator) check_operator: (5) 

       (check_literal) check_literal:lit=' ,' idx=22 '(5) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=22 '(5) '
       (check_literal)   ',' != '('
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: '(5) '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=22 '(5) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=22 '(5) '
       (check_literal)   '%' != '('
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=22 '(5) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=22 '(5) '
       (check_literal)   '"' != '('
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '(5) '
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname '(5) ':
        (check_vname) check_vname ret0 '(5) ':
       (check_variable) check_variable:ret0 
      (check_atom) check_atom:ret1

      (check_sub_expr) check_sub_expr:

       (check_literal) check_literal:lit=' (' idx=22 '(5) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'(' idx=22 '(5) '
       (check_literal) check_literal:After while():5) 
       (check_literal) check_literal:ret1 
      (check_sub_expr) check_sub_expr: ret1

      (scan_sub_expr) scan_sub_expr:

       (scan_literal) scan_literal:lit=' (' '(5) '
       (scan_literal) scan_literal:After drop space:'(5) '
       (scan_literal) scan_literal:while loop:(5) 
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (4)

       (op_stack_print) 
000: PRINT type:17
       (op_stack_print) 
001: ( type:16
       (op_stack_print) 
002: CHR$ type:2
       (op_stack_print) 
003: ( type:16
       (op_stack_print) 
------------------

       (scan_literal) scan_literal:ret1
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (5)

      (op_stack_print) 
000: PRINT type:17
      (op_stack_print) 
001: ( type:16
      (op_stack_print) 
002: CHR$ type:2
      (op_stack_print) 
003: ( type:16
      (op_stack_print) 
004: ( type:16
      (op_stack_print) 
------------------


       (scan_expression) scan_expression: '5) '

        (check_eitem) check_eitem: '5) '

         (check_operator) check_operator: 5) 

          (check_literal) check_literal:lit=' ,' idx=23 '5) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:',' idx=23 '5) '
          (check_literal)   ',' != '5'
          (check_literal) check_literal: ret0
         (check_operator) ret0:is comma: 0

         (check_function) check_function: '5) '
         (check_function) check_function: ret0

         (check_atom) check_atom:

          (check_literal) check_literal:lit=' %' idx=23 '5) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=23 '5) '
          (check_literal)   '%' != '5'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=23 '5) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=23 '5) '
          (check_literal)   '"' != '5'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '5) '
           (check_integer) check_integer:ret1
          (check_number) check_number: ret1
         (check_atom) check_atom:ret1
        (check_eitem) check_eitem:ret1

        (scan_eitem) scan_eitem:

         (check_operator) check_operator: 5) 

          (check_literal) check_literal:lit=' ,' idx=23 '5) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:',' idx=23 '5) '
          (check_literal)   ',' != '5'
          (check_literal) check_literal: ret0
         (check_operator) ret0:is comma: 0

         (check_function) check_function: '5) '
         (check_function) check_function: ret0

         (check_atom) check_atom:

          (check_literal) check_literal:lit=' %' idx=23 '5) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=23 '5) '
          (check_literal)   '%' != '5'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=23 '5) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=23 '5) '
          (check_literal)   '"' != '5'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '5) '
           (check_integer) check_integer:ret1
          (check_number) check_number: ret1
         (check_atom) check_atom:ret1

         (scan_atom) scan_atom:

          (check_literal) check_literal:lit=' %' idx=23 '5) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=23 '5) '
          (check_literal)   '%' != '5'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=23 '5) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=23 '5) '
          (check_literal)   '"' != '5'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '5) '
           (check_integer) check_integer:ret1
          (check_number) check_number: ret1

          (scan_number) scan_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '5) '
           (check_integer) check_integer:ret1

           (scan_integer) scan_integer:
           (scan_integer) scan_integer:ret1
   Frst:0 T:'5' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U U U )] i i 5
          (scan_integer) scan_integer:ret1  5
         (scan_atom) scan_atom:ret1
        (scan_expression) n commas now:0

         (check_eitem) check_eitem: ') '

          (check_operator) check_operator: ) 

           (check_literal) check_literal:lit=' ,' idx=24 ') '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:',' idx=24 ') '
           (check_literal)   ',' != ')'
           (check_literal) check_literal: ret0
          (check_operator) ret0:is comma: 0

          (check_function) check_function: ') '
          (check_function) check_function: ret0

          (check_atom) check_atom:

           (check_literal) check_literal:lit=' %' idx=24 ') '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'%' idx=24 ') '
           (check_literal)   '%' != ')'
           (check_literal) check_literal: ret0

           (check_literal) check_literal:lit=' "' idx=24 ') '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'"' idx=24 ') '
           (check_literal)   '"' != ')'
           (check_literal) check_literal: ret0

           (check_number) check_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret0

            (check_integer) check_integer: ') '
            (check_integer) check_integer:ret0
           (check_number) check_number: ret0

           (check_variable) check_variable:

            (check_vname) check_vname ') ':
            (check_vname) check_vname ret0 ') ':
           (check_variable) check_variable:ret0 
          (check_atom) check_atom:ret1

          (check_sub_expr) check_sub_expr:

           (check_literal) check_literal:lit=' (' idx=24 ') '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'(' idx=24 ') '
           (check_literal)   '(' != ')'
           (check_literal) check_literal: ret0
          (check_sub_expr) check_sub_expr: ret0
         (check_eitem) check_eitem:ret0
        (scan_expression) scan_expression: ret1 ') ' commas:0

        (scan_literal) scan_literal:lit=' )' ') '
        (scan_literal) scan_literal:After drop space:') '
        (scan_literal) scan_literal:while loop:) 
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
        (op_stack_print) 
------------------
        (op_stack_print) 
Operator Stack     (4)

        (op_stack_print) 
000: PRINT type:17
        (op_stack_print) 
001: ( type:16
        (op_stack_print) 
002: CHR$ type:2
        (op_stack_print) 
003: ( type:16
        (op_stack_print) 
------------------

(  output_sub_end)
        (token_is_function) 
token_is_function:
        (token_is_function) 
token_is_function:( is not function
(  output_sub_end)
        (scan_literal) scan_literal:ret1
   Frst:0 T:')' exptype:U
Pop 4
Pop '('
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (3)

       (op_stack_print) 
000: PRINT type:17
       (op_stack_print) 
001: ( type:16
       (op_stack_print) 
002: CHR$ type:2
       (op_stack_print) 
------------------

(  output_sub_end)
       (token_is_function) 
token_is_function:
       (token_is_function) CHR$ is function
Pop 5
Pop 'CHR$'
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (2)

       (op_stack_print) 
000: PRINT type:17
       (op_stack_print) 
001: ( type:16
       (op_stack_print) 
------------------

( output_function) [U,(U U )] s s CHR$
(  output_sub_end)
       (scan_sub_expr) scan_sub_expr:ret1
      (scan_expression) n commas now:0

       (check_eitem) check_eitem: ' '

        (check_operator) check_operator:  

         (check_literal) check_literal:lit=' ,' idx=26 ''
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:',' idx=26 ''
         (check_literal) check_literal  ret0 Empty test string
        (check_operator) ret0:is comma: 0

        (check_function) check_function: ''
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=25 ' '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=26 ''
         (check_literal) check_literal  ret0 Empty test string

         (check_literal) check_literal:lit=' "' idx=25 ' '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=26 ''
         (check_literal) check_literal  ret0 Empty test string

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: ''
          (check_integer) check_integer:ret0
         (check_number) check_number: ret0

         (check_variable) check_variable:

          (check_vname) check_vname '':
          (check_vname) check_vname ret0 '':
         (check_variable) check_variable:ret0 
        (check_atom) check_atom:ret1

        (check_sub_expr) check_sub_expr:

         (check_literal) check_literal:lit=' (' idx=25 ' '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'(' idx=26 ''
         (check_literal) check_literal  ret0 Empty test string
        (check_sub_expr) check_sub_expr: ret0
       (check_eitem) check_eitem:ret0
      (scan_expression) scan_expression: ret1 ' ' commas:0
     (scan_command) scan_command: ret1 =>'PRINT'
    (scan_command) 
ENDEXP
   Frst:0 T:')' exptype:U
Pop 4
Pop '('
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (1)

    (op_stack_print) 
000: PRINT type:17
    (op_stack_print) 
------------------

(  output_sub_end)
    (token_is_function) 
token_is_function:
    (token_is_function) PRINT is function
Pop 5
Pop 'PRINT'
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (0)

    (op_stack_print) 
------------------

( output_function) [U,(U )] v v PRINT
(  output_sub_end)
Finalise stack
    (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '5' nidx:24  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     s rq:s 'CHR$' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
 BE:

Type Check Stack (0)

 BE:

Type Check Stack (0)

 BE:

Type Check Stack (0)

 BE:5
type_check_stack_push: '5'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (1)

    (type_check_stack_print) 
000: '5' type:0
    (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '5' type:i (0)
 BE:

Type Check Stack (1)

000: '5' type:i (0)
 BE:

Type Check Stack (1)

000: '5' type:i (0)
 BE:

Type Check Stack (1)

000: '5' type:i (0)
 BE:CHR$
FN: 1 args
    (function_return_type) 
function_return_type: 'CHR$' =>s
    (function_return_type) 
function_return_type: 'CHR$' =>2
ret_type;2 s
typecheck_expression:Ret type of CHR$ : s
type_check_stack_pop: '5'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (0)

    (type_check_stack_print) 
------------------

FN ARG 0 ri 5 0(i)  Arg ok
type_check_stack_push: '000'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (1)

    (type_check_stack_print) 
000: '000' type:2
    (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:s (2)
 BE:

Type Check Stack (1)

000: '000' type:s (2)
 BE:

Type Check Stack (1)

000: '000' type:s (2)
 BE:PRINT
FN: 1 args
    (function_return_type) 
function_return_type: 'PRINT' =>v
    (function_return_type) 
function_return_type: 'PRINT' =>17
ret_type;17 v
typecheck_expression:Ret type of PRINT : v
type_check_stack_pop: '000'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (0)

    (type_check_stack_print) 
------------------

FN ARG 0 ri 000 2(s)  Arg not OK
type_check_stack_push: '000'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (1)

    (type_check_stack_print) 
000: '000' type:17
    (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '5' nidx:24  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     s rq:s 'CHR$' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_INTEGER      i rq:i '5'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_FUNCTION     s rq:s 'CHR$'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
(dump_exp_buffer2) N12 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
    (process_expression_types) 
==INFIX==

infix_stack_push: '5'
infix_stack_pop: '5'
infix_stack_push: 'CHR$(5 )'
infix_stack_pop: 'CHR$(5 )'
infix_stack_push: 'PRINT(CHR$(5 ) )'
infix_stack_pop: 'PRINT(CHR$(5 ) )'
    (process_expression_types) ==PRINT(CHR$(5 ) )==
    (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N4 EXP_BUFF_ID_INTEGER      i rq:i 5  0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N8 EXP_BUFF_ID_FUNCTION     s rq:s CHR$  0:
(    output_qcode) N9 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N10 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N11 EXP_BUFF_ID_FUNCTION     v rq:v PRINT  0:
(    output_qcode) N12 EXP_BUFF_ID_SUB_END      U rq:i   0:

     (check_literal) check_literal:lit=':' idx=26 ''
     (check_literal) check_literal:After drop space:':' idx=26 ''
     (check_literal) check_literal  ret0 Empty test string
    (translate_file) 
cline scanned OK
**********************************************
**  AT a%,c1% :PRINT CHR$(5) :BEEP b%,10*b% **
**********************************************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'AT a%,c1% :PRINT CHR$(5) :BEEP b%,10*b% ':
     (check_vname) check_vname ret1 ' a%,c1% :PRINT CHR$(5) :BEEP b%,10*b% ':
    (check_variable) check_variable: ' a%,c1% :PRINT CHR$(5) :BEEP b%,10*b% '
    (check_variable) check_variable: Ary test ' a%,c1% :PRINT CHR$(5) :BEEP b%,10*b% '

     (check_literal) check_literal:lit='(' idx=4 ' a%,c1% :PRINT CHR$(5) :BEEP b%,10*b% '
     (check_literal) check_literal:After drop space:'(' idx=4 ' a%,c1% :PRINT CHR$(5) :BEEP b%,10*b% '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=4 ' a%,c1% :PRINT CHR$(5) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=5 'a%,c1% :PRINT CHR$(5) :BEEP b%,10*b% '
   (check_literal)   '=' != 'a'
   (check_literal) check_literal: ret0
  (check_assignment) check_assignment:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) check_textlabel: 'AT a%,c1% :PRINT CHR$(5) :BEEP b%,10*b% '
   (check_textlabel) check_textlabel:ret0
  (check_proc_call) check_proc_call:ret0

  (check_command) check_command:
  (check_command) check_command: ret1 found=> 'AT'
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=38, ' a%,c1% :PRINT CHR$(5) :BEEP b%,10*b% '
========================================================
  AT a%,c1% :PRINT CHR$(5) :BEEP b%,10*b% 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'AT a%,c1% :PRINT CHR$(5) :BEEP b%,10*b% ':
    (check_vname) check_vname ret1 ' a%,c1% :PRINT CHR$(5) :BEEP b%,10*b% ':
   (check_variable) check_variable: ' a%,c1% :PRINT CHR$(5) :BEEP b%,10*b% '
   (check_variable) check_variable: Ary test ' a%,c1% :PRINT CHR$(5) :BEEP b%,10*b% '

    (check_literal) check_literal:lit='(' idx=4 ' a%,c1% :PRINT CHR$(5) :BEEP b%,10*b% '
    (check_literal) check_literal:After drop space:'(' idx=4 ' a%,c1% :PRINT CHR$(5) :BEEP b%,10*b% '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=4 ' a%,c1% :PRINT CHR$(5) :BEEP b%,10*b% '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=5 'a%,c1% :PRINT CHR$(5) :BEEP b%,10*b% '
  (check_literal)   '=' != 'a'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'AT a%,c1% :PRINT CHR$(5) :BEEP b%,10*b% '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'AT'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'AT' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) AT is function
 (function_return_type) 
function_return_type: 'AT' =>v
 (function_return_type) 
function_return_type: 'AT' =>17
process_token: 'AT' t=>v
 Push:'AT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: AT type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: AT type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' a%,c1% :PRINT CHR$(5) :BEEP b%,10*b% '

   (check_eitem) check_eitem: 'a%,c1% :PRINT CHR$(5) :BEEP b%,10*b% '

    (check_operator) check_operator: a%,c1% :PRINT CHR$(5) :BEEP b%,10*b% 

     (check_literal) check_literal:lit=' ,' idx=5 'a%,c1% :PRINT CHR$(5) :BEEP b%,10*b% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=5 'a%,c1% :PRINT CHR$(5) :BEEP b%,10*b% '
     (check_literal)   ',' != 'a'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'a%,c1% :PRINT CHR$(5) :BEEP b%,10*b% '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=5 'a%,c1% :PRINT CHR$(5) :BEEP b%,10*b% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=5 'a%,c1% :PRINT CHR$(5) :BEEP b%,10*b% '
     (check_literal)   '%' != 'a'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=5 'a%,c1% :PRINT CHR$(5) :BEEP b%,10*b% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=5 'a%,c1% :PRINT CHR$(5) :BEEP b%,10*b% '
     (check_literal)   '"' != 'a'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'a%,c1% :PRINT CHR$(5) :BEEP b%,10*b% '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'a%,c1% :PRINT CHR$(5) :BEEP b%,10*b% ':
      (check_vname) check_vname ret1 '%,c1% :PRINT CHR$(5) :BEEP b%,10*b% ':
     (check_variable) check_variable: '%,c1% :PRINT CHR$(5) :BEEP b%,10*b% '
     (check_variable) check_variable: Ary test ',c1% :PRINT CHR$(5) :BEEP b%,10*b% '

      (check_literal) check_literal:lit='(' idx=7 ',c1% :PRINT CHR$(5) :BEEP b%,10*b% '
      (check_literal) check_literal:After drop space:'(' idx=7 ',c1% :PRINT CHR$(5) :BEEP b%,10*b% '
      (check_literal)   '(' != ','
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator: a%,c1% :PRINT CHR$(5) :BEEP b%,10*b% 

    (check_literal) check_literal:lit=' ,' idx=5 'a%,c1% :PRINT CHR$(5) :BEEP b%,10*b% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=5 'a%,c1% :PRINT CHR$(5) :BEEP b%,10*b% '
    (check_literal)   ',' != 'a'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'a%,c1% :PRINT CHR$(5) :BEEP b%,10*b% '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=5 'a%,c1% :PRINT CHR$(5) :BEEP b%,10*b% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=5 'a%,c1% :PRINT CHR$(5) :BEEP b%,10*b% '
    (check_literal)   '%' != 'a'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=5 'a%,c1% :PRINT CHR$(5) :BEEP b%,10*b% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=5 'a%,c1% :PRINT CHR$(5) :BEEP b%,10*b% '
    (check_literal)   '"' != 'a'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'a%,c1% :PRINT CHR$(5) :BEEP b%,10*b% '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'a%,c1% :PRINT CHR$(5) :BEEP b%,10*b% ':
     (check_vname) check_vname ret1 '%,c1% :PRINT CHR$(5) :BEEP b%,10*b% ':
    (check_variable) check_variable: '%,c1% :PRINT CHR$(5) :BEEP b%,10*b% '
    (check_variable) check_variable: Ary test ',c1% :PRINT CHR$(5) :BEEP b%,10*b% '

     (check_literal) check_literal:lit='(' idx=7 ',c1% :PRINT CHR$(5) :BEEP b%,10*b% '
     (check_literal) check_literal:After drop space:'(' idx=7 ',c1% :PRINT CHR$(5) :BEEP b%,10*b% '
     (check_literal)   '(' != ','
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1

  (scan_atom) scan_atom:

   (check_literal) check_literal:lit=' %' idx=5 'a%,c1% :PRINT CHR$(5) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=5 'a%,c1% :PRINT CHR$(5) :BEEP b%,10*b% '
   (check_literal)   '%' != 'a'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=5 'a%,c1% :PRINT CHR$(5) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=5 'a%,c1% :PRINT CHR$(5) :BEEP b%,10*b% '
   (check_literal)   '"' != 'a'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'a%,c1% :PRINT CHR$(5) :BEEP b%,10*b% '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'a%,c1% :PRINT CHR$(5) :BEEP b%,10*b% ':
    (check_vname) check_vname ret1 '%,c1% :PRINT CHR$(5) :BEEP b%,10*b% ':
   (check_variable) check_variable: '%,c1% :PRINT CHR$(5) :BEEP b%,10*b% '
   (check_variable) check_variable: Ary test ',c1% :PRINT CHR$(5) :BEEP b%,10*b% '

    (check_literal) check_literal:lit='(' idx=7 ',c1% :PRINT CHR$(5) :BEEP b%,10*b% '
    (check_literal) check_literal:After drop space:'(' idx=7 ',c1% :PRINT CHR$(5) :BEEP b%,10*b% '
    (check_literal)   '(' != ','
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'a%,c1% :PRINT CHR$(5) :BEEP b%,10*b% '
   (scan_vname) scan_vname: ret1 'a'
  (scan_variable) scan_variable: '%,c1% :PRINT CHR$(5) :BEEP b%,10*b% ' vname='a'
  (scan_variable) scan_variable: Ary test ',c1% :PRINT CHR$(5) :BEEP b%,10*b% '

   (check_literal) check_literal:lit='(' idx=7 ',c1% :PRINT CHR$(5) :BEEP b%,10*b% '
   (check_literal) check_literal:After drop space:'(' idx=7 ',c1% :PRINT CHR$(5) :BEEP b%,10*b% '
   (check_literal)   '(' != ','
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='a%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'a%' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:a% is not function
token_is_variable: tok:'a%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:a% is not function
 (init_get_name) 
init_get_name:'a%'
 (init_get_name) 
init_get_name:'a%'
 (get_name) 
get_name:gn:'a%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,(U )] i i a%
 (print_var_info) 
VAR INFO: '                a%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
 (scan_atom) scan_atom:ret1
(scan_expression) n commas now:0

 (check_eitem) check_eitem: ',c1% :PRINT CHR$(5) :BEEP b%,10*b% '

  (check_operator) check_operator: ,c1% :PRINT CHR$(5) :BEEP b%,10*b% 

   (check_literal) check_literal:lit=' ,' idx=7 ',c1% :PRINT CHR$(5) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=7 ',c1% :PRINT CHR$(5) :BEEP b%,10*b% '
   (check_literal) check_literal:After while():c1% :PRINT CHR$(5) :BEEP b%,10*b% 
   (check_literal) check_literal:ret1 
  (check_operator) ret1:is comma: 0
 (check_eitem) check_eitem:ret1 comma:1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: ,c1% :PRINT CHR$(5) :BEEP b%,10*b% 

   (check_literal) check_literal:lit=' ,' idx=7 ',c1% :PRINT CHR$(5) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=7 ',c1% :PRINT CHR$(5) :BEEP b%,10*b% '
   (check_literal) check_literal:After while():c1% :PRINT CHR$(5) :BEEP b%,10*b% 
   (check_literal) check_literal:ret1 
  (check_operator) ret1:is comma: 0

  (scan_operator) scan_operator: ',c1% :PRINT CHR$(5) :BEEP b%,10*b% '

   (check_literal) check_literal:lit=' ,' idx=7 ',c1% :PRINT CHR$(5) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=7 ',c1% :PRINT CHR$(5) :BEEP b%,10*b% '
   (check_literal) check_literal:After while():c1% :PRINT CHR$(5) :BEEP b%,10*b% 
   (check_literal) check_literal:ret1 

   (scan_literal) scan_literal:lit=' ,' ',c1% :PRINT CHR$(5) :BEEP b%,10*b% '
   (scan_literal) scan_literal:After drop space:',c1% :PRINT CHR$(5) :BEEP b%,10*b% '
   (scan_literal) scan_literal:while loop:,c1% :PRINT CHR$(5) :BEEP b%,10*b% 
   Frst:0 T:',' exptype:i
(output_sub_start)
   (scan_literal) scan_literal:ret1
  (scan_operator) ret1:is comma: 1
 (scan_eitem) Is comma;1
 (scan_expression) n commas now:1

  (check_eitem) check_eitem: 'c1% :PRINT CHR$(5) :BEEP b%,10*b% '

   (check_operator) check_operator: c1% :PRINT CHR$(5) :BEEP b%,10*b% 

    (check_literal) check_literal:lit=' ,' idx=8 'c1% :PRINT CHR$(5) :BEEP b%,10*b% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=8 'c1% :PRINT CHR$(5) :BEEP b%,10*b% '
    (check_literal)   ',' != 'c'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'c1% :PRINT CHR$(5) :BEEP b%,10*b% '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=8 'c1% :PRINT CHR$(5) :BEEP b%,10*b% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=8 'c1% :PRINT CHR$(5) :BEEP b%,10*b% '
    (check_literal)   '%' != 'c'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=8 'c1% :PRINT CHR$(5) :BEEP b%,10*b% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=8 'c1% :PRINT CHR$(5) :BEEP b%,10*b% '
    (check_literal)   '"' != 'c'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'c1% :PRINT CHR$(5) :BEEP b%,10*b% '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'c1% :PRINT CHR$(5) :BEEP b%,10*b% ':
     (check_vname) check_vname ret1 '% :PRINT CHR$(5) :BEEP b%,10*b% ':
    (check_variable) check_variable: '% :PRINT CHR$(5) :BEEP b%,10*b% '
    (check_variable) check_variable: Ary test ' :PRINT CHR$(5) :BEEP b%,10*b% '

     (check_literal) check_literal:lit='(' idx=11 ' :PRINT CHR$(5) :BEEP b%,10*b% '
     (check_literal) check_literal:After drop space:'(' idx=11 ' :PRINT CHR$(5) :BEEP b%,10*b% '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1
 (check_eitem) check_eitem:ret1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: c1% :PRINT CHR$(5) :BEEP b%,10*b% 

   (check_literal) check_literal:lit=' ,' idx=8 'c1% :PRINT CHR$(5) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=8 'c1% :PRINT CHR$(5) :BEEP b%,10*b% '
   (check_literal)   ',' != 'c'
   (check_literal) check_literal: ret0
  (check_operator) ret0:is comma: 0

  (check_function) check_function: 'c1% :PRINT CHR$(5) :BEEP b%,10*b% '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=8 'c1% :PRINT CHR$(5) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=8 'c1% :PRINT CHR$(5) :BEEP b%,10*b% '
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=8 'c1% :PRINT CHR$(5) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=8 'c1% :PRINT CHR$(5) :BEEP b%,10*b% '
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c1% :PRINT CHR$(5) :BEEP b%,10*b% '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'c1% :PRINT CHR$(5) :BEEP b%,10*b% ':
    (check_vname) check_vname ret1 '% :PRINT CHR$(5) :BEEP b%,10*b% ':
   (check_variable) check_variable: '% :PRINT CHR$(5) :BEEP b%,10*b% '
   (check_variable) check_variable: Ary test ' :PRINT CHR$(5) :BEEP b%,10*b% '

    (check_literal) check_literal:lit='(' idx=11 ' :PRINT CHR$(5) :BEEP b%,10*b% '
    (check_literal) check_literal:After drop space:'(' idx=11 ' :PRINT CHR$(5) :BEEP b%,10*b% '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) check_atom:ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=8 'c1% :PRINT CHR$(5) :BEEP b%,10*b% '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=8 'c1% :PRINT CHR$(5) :BEEP b%,10*b% '
  (check_literal)   '%' != 'c'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=8 'c1% :PRINT CHR$(5) :BEEP b%,10*b% '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=8 'c1% :PRINT CHR$(5) :BEEP b%,10*b% '
  (check_literal)   '"' != 'c'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) check_float: ret0

   (check_integer) check_integer: 'c1% :PRINT CHR$(5) :BEEP b%,10*b% '
   (check_integer) check_integer:ret0
  (check_number) check_number: ret0

  (check_variable) check_variable:

   (check_vname) check_vname 'c1% :PRINT CHR$(5) :BEEP b%,10*b% ':
   (check_vname) check_vname ret1 '% :PRINT CHR$(5) :BEEP b%,10*b% ':
  (check_variable) check_variable: '% :PRINT CHR$(5) :BEEP b%,10*b% '
  (check_variable) check_variable: Ary test ' :PRINT CHR$(5) :BEEP b%,10*b% '

   (check_literal) check_literal:lit='(' idx=11 ' :PRINT CHR$(5) :BEEP b%,10*b% '
   (check_literal) check_literal:After drop space:'(' idx=11 ' :PRINT CHR$(5) :BEEP b%,10*b% '
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) scan_variable:

  (scan_vname) scan_vname: 'c1% :PRINT CHR$(5) :BEEP b%,10*b% '
  (scan_vname) scan_vname: ret1 'c1'
 (scan_variable) scan_variable: '% :PRINT CHR$(5) :BEEP b%,10*b% ' vname='c1'
 (scan_variable) scan_variable: Ary test ' :PRINT CHR$(5) :BEEP b%,10*b% '

  (check_literal) check_literal:lit='(' idx=11 ' :PRINT CHR$(5) :BEEP b%,10*b% '
  (check_literal) check_literal:After drop space:'(' idx=11 ' :PRINT CHR$(5) :BEEP b%,10*b% '
  (check_literal)   '(' != ' '
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='c1%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'c1%' exptype:U
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:c1% is not function
token_is_variable: tok:'c1%'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:c1% is not function
(init_get_name) 
init_get_name:'c1%'
(init_get_name) 
init_get_name:'c1%'
(get_name) 
get_name:gn:'c1%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,(U )] i i c1%
(print_var_info) 
VAR INFO: '               c1%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
(scan_atom) scan_atom:ret1
(scan_expression) n commas now:1

 (check_eitem) check_eitem: ' :PRINT CHR$(5) :BEEP b%,10*b% '

  (check_operator) check_operator:  :PRINT CHR$(5) :BEEP b%,10*b% 

   (check_literal) check_literal:lit=' ,' idx=12 ':PRINT CHR$(5) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=12 ':PRINT CHR$(5) :BEEP b%,10*b% '
   (check_literal)   ',' != ':'
   (check_literal) check_literal: ret0
  (check_operator) ret0:is comma: 0

  (check_function) check_function: ':PRINT CHR$(5) :BEEP b%,10*b% '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=11 ' :PRINT CHR$(5) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=12 ':PRINT CHR$(5) :BEEP b%,10*b% '
   (check_literal)   '%' != ':'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=11 ' :PRINT CHR$(5) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=12 ':PRINT CHR$(5) :BEEP b%,10*b% '
   (check_literal)   '"' != ':'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: ':PRINT CHR$(5) :BEEP b%,10*b% '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname ':PRINT CHR$(5) :BEEP b%,10*b% ':
    (check_vname) check_vname ret0 ':PRINT CHR$(5) :BEEP b%,10*b% ':
   (check_variable) check_variable:ret0 
  (check_atom) check_atom:ret1

  (check_sub_expr) check_sub_expr:

   (check_literal) check_literal:lit=' (' idx=11 ' :PRINT CHR$(5) :BEEP b%,10*b% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'(' idx=12 ':PRINT CHR$(5) :BEEP b%,10*b% '
   (check_literal)   '(' != ':'
   (check_literal) check_literal: ret0
  (check_sub_expr) check_sub_expr: ret0
 (check_eitem) check_eitem:ret0
(scan_expression) scan_expression: ret1 ' :PRINT CHR$(5) :BEEP b%,10*b% ' commas:1
(scan_command) scan_command: ret1 =>'AT'
(scan_command) 
ENDEXP
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: AT type:17
(op_stack_print) 
------------------

(  output_sub_end)
(token_is_function) 
token_is_function:
(token_is_function) AT is function
Pop 5
Pop 'AT'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_function) [i,(U )] v v AT
(  output_sub_end)
Finalise stack
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'a%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? '' nidx:-1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'c1%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'AT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
 BE:

Type Check Stack (0)

 BE:a%
type_check_stack_push: 'a%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'a%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'a%' type:i (0)
 BE:

Type Check Stack (1)

000: 'a%' type:i (0)
 BE:c1%
type_check_stack_push: 'c1%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'a%' type:0
(type_check_stack_print) 
001: 'c1%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'a%' type:i (0)
001: 'c1%' type:i (0)
 BE:

Type Check Stack (2)

000: 'a%' type:i (0)
001: 'c1%' type:i (0)
 BE:AT
FN: 2 args
(function_return_type) 
function_return_type: 'AT' =>v
(function_return_type) 
function_return_type: 'AT' =>17
ret_type;17 v
typecheck_expression:Ret type of AT : v
type_check_stack_pop: 'c1%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'a%' type:0
(type_check_stack_print) 
------------------

FN ARG 1 ri c1% 0(i)  Arg ok
type_check_stack_pop: 'a%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (0)

(type_check_stack_print) 
------------------

FN ARG 0 ri a% 0(i)  Arg ok
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:17
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'a%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? '' nidx:-1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'c1%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'AT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'a%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     i rq:i 'c1%'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_FUNCTION     v rq:v 'AT'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
(process_expression_types) 
==INFIX==

Var: a% ary:0 NumIdx:0
infix_stack_push: 'a%'
Var: c1% ary:0 NumIdx:0
infix_stack_push: 'c1%'
infix_stack_pop: 'c1%'
infix_stack_pop: 'a%'
infix_stack_push: 'AT(a% c1% )'
infix_stack_pop: 'AT(a% c1% )'
(process_expression_types) ==AT(a% c1% )==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_START    U rq:?   0:
(    output_qcode) N4 EXP_BUFF_ID_VARIABLE     i rq:i c1%  0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_FUNCTION     v rq:v AT  0:
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:i   0:

 (check_literal) check_literal:lit=':' idx=12 ':PRINT CHR$(5) :BEEP b%,10*b% '
 (check_literal) check_literal:After drop space:':' idx=12 ':PRINT CHR$(5) :BEEP b%,10*b% '
 (check_literal) check_literal:After while():PRINT CHR$(5) :BEEP b%,10*b% 
 (check_literal) check_literal:ret1 

 (scan_literal) scan_literal:lit=':' 'PRINT CHR$(5) :BEEP b%,10*b% '
 (scan_literal) scan_literal:After drop space:'PRINT CHR$(5) :BEEP b%,10*b% '
 (scan_literal) scan_literal:while loop:PRINT CHR$(5) :BEEP b%,10*b% 
 (scan_literal) scan_literal:ret1

 (check_line) check_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'PRINT CHR$(5) :BEEP b%,10*b% ':
    (check_vname) check_vname ret1 ' CHR$(5) :BEEP b%,10*b% ':
   (check_variable) check_variable: ' CHR$(5) :BEEP b%,10*b% '
   (check_variable) check_variable: Ary test ' CHR$(5) :BEEP b%,10*b% '

    (check_literal) check_literal:lit='(' idx=18 ' CHR$(5) :BEEP b%,10*b% '
    (check_literal) check_literal:After drop space:'(' idx=18 ' CHR$(5) :BEEP b%,10*b% '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=18 ' CHR$(5) :BEEP b%,10*b% '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=19 'CHR$(5) :BEEP b%,10*b% '
  (check_literal)   '=' != 'C'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'PRINT CHR$(5) :BEEP b%,10*b% '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'PRINT'
(check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=24, ' CHR$(5) :BEEP b%,10*b% '
========================================================
  AT a%,c1% :PRINT CHR$(5) :BEEP b%,10*b% 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'PRINT CHR$(5) :BEEP b%,10*b% ':
    (check_vname) check_vname ret1 ' CHR$(5) :BEEP b%,10*b% ':
   (check_variable) check_variable: ' CHR$(5) :BEEP b%,10*b% '
   (check_variable) check_variable: Ary test ' CHR$(5) :BEEP b%,10*b% '

    (check_literal) check_literal:lit='(' idx=18 ' CHR$(5) :BEEP b%,10*b% '
    (check_literal) check_literal:After drop space:'(' idx=18 ' CHR$(5) :BEEP b%,10*b% '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=18 ' CHR$(5) :BEEP b%,10*b% '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=19 'CHR$(5) :BEEP b%,10*b% '
  (check_literal)   '=' != 'C'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'PRINT CHR$(5) :BEEP b%,10*b% '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'PRINT'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'PRINT' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) PRINT is function
 (function_return_type) 
function_return_type: 'PRINT' =>v
 (function_return_type) 
function_return_type: 'PRINT' =>17
process_token: 'PRINT' t=>v
 Push:'PRINT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' CHR$(5) :BEEP b%,10*b% '

   (check_eitem) check_eitem: 'CHR$(5) :BEEP b%,10*b% '

    (check_operator) check_operator: CHR$(5) :BEEP b%,10*b% 

     (check_literal) check_literal:lit=' ,' idx=19 'CHR$(5) :BEEP b%,10*b% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=19 'CHR$(5) :BEEP b%,10*b% '
     (check_literal)   ',' != 'C'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'CHR$(5) :BEEP b%,10*b% '
    (check_function) check_function: ret1 Found fn=>'CHR$'
   (check_eitem) check_eitem:ret1

   (scan_eitem) scan_eitem:

    (check_operator) check_operator: CHR$(5) :BEEP b%,10*b% 

     (check_literal) check_literal:lit=' ,' idx=19 'CHR$(5) :BEEP b%,10*b% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=19 'CHR$(5) :BEEP b%,10*b% '
     (check_literal)   ',' != 'C'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'CHR$(5) :BEEP b%,10*b% '
    (check_function) check_function: ret1 Found fn=>'CHR$'

    (scan_function) scan_function:
   Frst:0 T:'CHR$' exptype:U
    (token_is_function) 
token_is_function:
    (token_is_function) CHR$ is function
    (function_return_type) 
function_return_type: 'CHR$' =>s
    (function_return_type) 
function_return_type: 'CHR$' =>2
process_token: 'CHR$' t=>s
 Push:'CHR$'
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (3)

    (op_stack_print) 
000: PRINT type:17
    (op_stack_print) 
001: ( type:16
    (op_stack_print) 
002: CHR$ type:2
    (op_stack_print) 
------------------

    (scan_expression) n commas now:0

     (check_eitem) check_eitem: '(5) :BEEP b%,10*b% '

      (check_operator) check_operator: (5) :BEEP b%,10*b% 

       (check_literal) check_literal:lit=' ,' idx=23 '(5) :BEEP b%,10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=23 '(5) :BEEP b%,10*b% '
       (check_literal)   ',' != '('
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: '(5) :BEEP b%,10*b% '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=23 '(5) :BEEP b%,10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=23 '(5) :BEEP b%,10*b% '
       (check_literal)   '%' != '('
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=23 '(5) :BEEP b%,10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=23 '(5) :BEEP b%,10*b% '
       (check_literal)   '"' != '('
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '(5) :BEEP b%,10*b% '
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname '(5) :BEEP b%,10*b% ':
        (check_vname) check_vname ret0 '(5) :BEEP b%,10*b% ':
       (check_variable) check_variable:ret0 
      (check_atom) check_atom:ret1

      (check_sub_expr) check_sub_expr:

       (check_literal) check_literal:lit=' (' idx=23 '(5) :BEEP b%,10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'(' idx=23 '(5) :BEEP b%,10*b% '
       (check_literal) check_literal:After while():5) :BEEP b%,10*b% 
       (check_literal) check_literal:ret1 
      (check_sub_expr) check_sub_expr: ret1
     (check_eitem) check_eitem:ret1

     (scan_eitem) scan_eitem:

      (check_operator) check_operator: (5) :BEEP b%,10*b% 

       (check_literal) check_literal:lit=' ,' idx=23 '(5) :BEEP b%,10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=23 '(5) :BEEP b%,10*b% '
       (check_literal)   ',' != '('
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: '(5) :BEEP b%,10*b% '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=23 '(5) :BEEP b%,10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=23 '(5) :BEEP b%,10*b% '
       (check_literal)   '%' != '('
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=23 '(5) :BEEP b%,10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=23 '(5) :BEEP b%,10*b% '
       (check_literal)   '"' != '('
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '(5) :BEEP b%,10*b% '
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname '(5) :BEEP b%,10*b% ':
        (check_vname) check_vname ret0 '(5) :BEEP b%,10*b% ':
       (check_variable) check_variable:ret0 
      (check_atom) check_atom:ret1

      (check_sub_expr) check_sub_expr:

       (check_literal) check_literal:lit=' (' idx=23 '(5) :BEEP b%,10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'(' idx=23 '(5) :BEEP b%,10*b% '
       (check_literal) check_literal:After while():5) :BEEP b%,10*b% 
       (check_literal) check_literal:ret1 
      (check_sub_expr) check_sub_expr: ret1

      (scan_sub_expr) scan_sub_expr:

       (scan_literal) scan_literal:lit=' (' '(5) :BEEP b%,10*b% '
       (scan_literal) scan_literal:After drop space:'(5) :BEEP b%,10*b% '
       (scan_literal) scan_literal:while loop:(5) :BEEP b%,10*b% 
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (4)

       (op_stack_print) 
000: PRINT type:17
       (op_stack_print) 
001: ( type:16
       (op_stack_print) 
002: CHR$ type:2
       (op_stack_print) 
003: ( type:16
       (op_stack_print) 
------------------

       (scan_literal) scan_literal:ret1
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (5)

      (op_stack_print) 
000: PRINT type:17
      (op_stack_print) 
001: ( type:16
      (op_stack_print) 
002: CHR$ type:2
      (op_stack_print) 
003: ( type:16
      (op_stack_print) 
004: ( type:16
      (op_stack_print) 
------------------


       (scan_expression) scan_expression: '5) :BEEP b%,10*b% '

        (check_eitem) check_eitem: '5) :BEEP b%,10*b% '

         (check_operator) check_operator: 5) :BEEP b%,10*b% 

          (check_literal) check_literal:lit=' ,' idx=24 '5) :BEEP b%,10*b% '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:',' idx=24 '5) :BEEP b%,10*b% '
          (check_literal)   ',' != '5'
          (check_literal) check_literal: ret0
         (check_operator) ret0:is comma: 0

         (check_function) check_function: '5) :BEEP b%,10*b% '
         (check_function) check_function: ret0

         (check_atom) check_atom:

          (check_literal) check_literal:lit=' %' idx=24 '5) :BEEP b%,10*b% '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=24 '5) :BEEP b%,10*b% '
          (check_literal)   '%' != '5'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=24 '5) :BEEP b%,10*b% '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=24 '5) :BEEP b%,10*b% '
          (check_literal)   '"' != '5'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '5) :BEEP b%,10*b% '
           (check_integer) check_integer:ret1
          (check_number) check_number: ret1
         (check_atom) check_atom:ret1
        (check_eitem) check_eitem:ret1

        (scan_eitem) scan_eitem:

         (check_operator) check_operator: 5) :BEEP b%,10*b% 

          (check_literal) check_literal:lit=' ,' idx=24 '5) :BEEP b%,10*b% '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:',' idx=24 '5) :BEEP b%,10*b% '
          (check_literal)   ',' != '5'
          (check_literal) check_literal: ret0
         (check_operator) ret0:is comma: 0

         (check_function) check_function: '5) :BEEP b%,10*b% '
         (check_function) check_function: ret0

         (check_atom) check_atom:

          (check_literal) check_literal:lit=' %' idx=24 '5) :BEEP b%,10*b% '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=24 '5) :BEEP b%,10*b% '
          (check_literal)   '%' != '5'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=24 '5) :BEEP b%,10*b% '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=24 '5) :BEEP b%,10*b% '
          (check_literal)   '"' != '5'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '5) :BEEP b%,10*b% '
           (check_integer) check_integer:ret1
          (check_number) check_number: ret1
         (check_atom) check_atom:ret1

         (scan_atom) scan_atom:

          (check_literal) check_literal:lit=' %' idx=24 '5) :BEEP b%,10*b% '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=24 '5) :BEEP b%,10*b% '
          (check_literal)   '%' != '5'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=24 '5) :BEEP b%,10*b% '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=24 '5) :BEEP b%,10*b% '
          (check_literal)   '"' != '5'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '5) :BEEP b%,10*b% '
           (check_integer) check_integer:ret1
          (check_number) check_number: ret1

          (scan_number) scan_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '5) :BEEP b%,10*b% '
           (check_integer) check_integer:ret1

           (scan_integer) scan_integer:
           (scan_integer) scan_integer:ret1
   Frst:0 T:'5' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U U U )] i i 5
          (scan_integer) scan_integer:ret1  5
         (scan_atom) scan_atom:ret1
        (scan_expression) n commas now:0

         (check_eitem) check_eitem: ') :BEEP b%,10*b% '

          (check_operator) check_operator: ) :BEEP b%,10*b% 

           (check_literal) check_literal:lit=' ,' idx=25 ') :BEEP b%,10*b% '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:',' idx=25 ') :BEEP b%,10*b% '
           (check_literal)   ',' != ')'
           (check_literal) check_literal: ret0
          (check_operator) ret0:is comma: 0

          (check_function) check_function: ') :BEEP b%,10*b% '
          (check_function) check_function: ret0

          (check_atom) check_atom:

           (check_literal) check_literal:lit=' %' idx=25 ') :BEEP b%,10*b% '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'%' idx=25 ') :BEEP b%,10*b% '
           (check_literal)   '%' != ')'
           (check_literal) check_literal: ret0

           (check_literal) check_literal:lit=' "' idx=25 ') :BEEP b%,10*b% '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'"' idx=25 ') :BEEP b%,10*b% '
           (check_literal)   '"' != ')'
           (check_literal) check_literal: ret0

           (check_number) check_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret0

            (check_integer) check_integer: ') :BEEP b%,10*b% '
            (check_integer) check_integer:ret0
           (check_number) check_number: ret0

           (check_variable) check_variable:

            (check_vname) check_vname ') :BEEP b%,10*b% ':
            (check_vname) check_vname ret0 ') :BEEP b%,10*b% ':
           (check_variable) check_variable:ret0 
          (check_atom) check_atom:ret1

          (check_sub_expr) check_sub_expr:

           (check_literal) check_literal:lit=' (' idx=25 ') :BEEP b%,10*b% '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'(' idx=25 ') :BEEP b%,10*b% '
           (check_literal)   '(' != ')'
           (check_literal) check_literal: ret0
          (check_sub_expr) check_sub_expr: ret0
         (check_eitem) check_eitem:ret0
        (scan_expression) scan_expression: ret1 ') :BEEP b%,10*b% ' commas:0

        (scan_literal) scan_literal:lit=' )' ') :BEEP b%,10*b% '
        (scan_literal) scan_literal:After drop space:') :BEEP b%,10*b% '
        (scan_literal) scan_literal:while loop:) :BEEP b%,10*b% 
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
        (op_stack_print) 
------------------
        (op_stack_print) 
Operator Stack     (4)

        (op_stack_print) 
000: PRINT type:17
        (op_stack_print) 
001: ( type:16
        (op_stack_print) 
002: CHR$ type:2
        (op_stack_print) 
003: ( type:16
        (op_stack_print) 
------------------

(  output_sub_end)
        (token_is_function) 
token_is_function:
        (token_is_function) 
token_is_function:( is not function
(  output_sub_end)
        (scan_literal) scan_literal:ret1
   Frst:0 T:')' exptype:U
Pop 4
Pop '('
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (3)

       (op_stack_print) 
000: PRINT type:17
       (op_stack_print) 
001: ( type:16
       (op_stack_print) 
002: CHR$ type:2
       (op_stack_print) 
------------------

(  output_sub_end)
       (token_is_function) 
token_is_function:
       (token_is_function) CHR$ is function
Pop 5
Pop 'CHR$'
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (2)

       (op_stack_print) 
000: PRINT type:17
       (op_stack_print) 
001: ( type:16
       (op_stack_print) 
------------------

( output_function) [U,(U U )] s s CHR$
(  output_sub_end)
       (scan_sub_expr) scan_sub_expr:ret1
      (scan_expression) n commas now:0

       (check_eitem) check_eitem: ' :BEEP b%,10*b% '

        (check_operator) check_operator:  :BEEP b%,10*b% 

         (check_literal) check_literal:lit=' ,' idx=27 ':BEEP b%,10*b% '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:',' idx=27 ':BEEP b%,10*b% '
         (check_literal)   ',' != ':'
         (check_literal) check_literal: ret0
        (check_operator) ret0:is comma: 0

        (check_function) check_function: ':BEEP b%,10*b% '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=26 ' :BEEP b%,10*b% '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=27 ':BEEP b%,10*b% '
         (check_literal)   '%' != ':'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=26 ' :BEEP b%,10*b% '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=27 ':BEEP b%,10*b% '
         (check_literal)   '"' != ':'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: ':BEEP b%,10*b% '
          (check_integer) check_integer:ret0
         (check_number) check_number: ret0

         (check_variable) check_variable:

          (check_vname) check_vname ':BEEP b%,10*b% ':
          (check_vname) check_vname ret0 ':BEEP b%,10*b% ':
         (check_variable) check_variable:ret0 
        (check_atom) check_atom:ret1

        (check_sub_expr) check_sub_expr:

         (check_literal) check_literal:lit=' (' idx=26 ' :BEEP b%,10*b% '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'(' idx=27 ':BEEP b%,10*b% '
         (check_literal)   '(' != ':'
         (check_literal) check_literal: ret0
        (check_sub_expr) check_sub_expr: ret0
       (check_eitem) check_eitem:ret0
      (scan_expression) scan_expression: ret1 ' :BEEP b%,10*b% ' commas:0
     (scan_command) scan_command: ret1 =>'PRINT'
    (scan_command) 
ENDEXP
   Frst:0 T:')' exptype:U
Pop 4
Pop '('
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (1)

    (op_stack_print) 
000: PRINT type:17
    (op_stack_print) 
------------------

(  output_sub_end)
    (token_is_function) 
token_is_function:
    (token_is_function) PRINT is function
Pop 5
Pop 'PRINT'
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (0)

    (op_stack_print) 
------------------

( output_function) [U,(U )] v v PRINT
(  output_sub_end)
Finalise stack
    (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '5' nidx:25  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     s rq:s 'CHR$' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
 BE:

Type Check Stack (0)

 BE:

Type Check Stack (0)

 BE:

Type Check Stack (0)

 BE:5
type_check_stack_push: '5'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (1)

    (type_check_stack_print) 
000: '5' type:0
    (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '5' type:i (0)
 BE:

Type Check Stack (1)

000: '5' type:i (0)
 BE:

Type Check Stack (1)

000: '5' type:i (0)
 BE:

Type Check Stack (1)

000: '5' type:i (0)
 BE:CHR$
FN: 1 args
    (function_return_type) 
function_return_type: 'CHR$' =>s
    (function_return_type) 
function_return_type: 'CHR$' =>2
ret_type;2 s
typecheck_expression:Ret type of CHR$ : s
type_check_stack_pop: '5'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (0)

    (type_check_stack_print) 
------------------

FN ARG 0 ri 5 0(i)  Arg ok
type_check_stack_push: '000'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (1)

    (type_check_stack_print) 
000: '000' type:2
    (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:s (2)
 BE:

Type Check Stack (1)

000: '000' type:s (2)
 BE:

Type Check Stack (1)

000: '000' type:s (2)
 BE:PRINT
FN: 1 args
    (function_return_type) 
function_return_type: 'PRINT' =>v
    (function_return_type) 
function_return_type: 'PRINT' =>17
ret_type;17 v
typecheck_expression:Ret type of PRINT : v
type_check_stack_pop: '000'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (0)

    (type_check_stack_print) 
------------------

FN ARG 0 ri 000 2(s)  Arg not OK
type_check_stack_push: '000'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (1)

    (type_check_stack_print) 
000: '000' type:17
    (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '5' nidx:25  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     s rq:s 'CHR$' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_INTEGER      i rq:i '5'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_FUNCTION     s rq:s 'CHR$'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
(dump_exp_buffer2) N12 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
    (process_expression_types) 
==INFIX==

infix_stack_push: '5'
infix_stack_pop: '5'
infix_stack_push: 'CHR$(5 )'
infix_stack_pop: 'CHR$(5 )'
infix_stack_push: 'PRINT(CHR$(5 ) )'
infix_stack_pop: 'PRINT(CHR$(5 ) )'
    (process_expression_types) ==PRINT(CHR$(5 ) )==
    (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N4 EXP_BUFF_ID_INTEGER      i rq:i 5  0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N8 EXP_BUFF_ID_FUNCTION     s rq:s CHR$  0:
(    output_qcode) N9 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N10 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N11 EXP_BUFF_ID_FUNCTION     v rq:v PRINT  0:
(    output_qcode) N12 EXP_BUFF_ID_SUB_END      U rq:i   0:

     (check_literal) check_literal:lit=':' idx=27 ':BEEP b%,10*b% '
     (check_literal) check_literal:After drop space:':' idx=27 ':BEEP b%,10*b% '
     (check_literal) check_literal:After while():BEEP b%,10*b% 
     (check_literal) check_literal:ret1 

     (scan_literal) scan_literal:lit=':' 'BEEP b%,10*b% '
     (scan_literal) scan_literal:After drop space:'BEEP b%,10*b% '
     (scan_literal) scan_literal:while loop:BEEP b%,10*b% 
     (scan_literal) scan_literal:ret1

     (check_line) check_line:

      (check_assignment) check_assignment:

       (check_variable) check_variable:

        (check_vname) check_vname 'BEEP b%,10*b% ':
        (check_vname) check_vname ret1 ' b%,10*b% ':
       (check_variable) check_variable: ' b%,10*b% '
       (check_variable) check_variable: Ary test ' b%,10*b% '

        (check_literal) check_literal:lit='(' idx=32 ' b%,10*b% '
        (check_literal) check_literal:After drop space:'(' idx=32 ' b%,10*b% '
        (check_literal)   '(' != ' '
        (check_literal) check_literal: ret0
       (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
      (check_variable) check_variable:ret1 

      (check_literal) check_literal:lit=' =' idx=32 ' b%,10*b% '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'=' idx=33 'b%,10*b% '
      (check_literal)   '=' != 'b'
      (check_literal) check_literal: ret0
     (check_assignment) check_assignment:ret0

     (check_proc_call) check_proc_call:

      (check_textlabel) check_textlabel: 'BEEP b%,10*b% '
      (check_textlabel) check_textlabel:ret0
     (check_proc_call) check_proc_call:ret0

     (check_command) check_command:
     (check_command) check_command: ret1 found=> 'BEEP'
    (check_line) check_line:ret1
   (scan_cline) scan_cline: Checked len=10, ' b%,10*b% '
========================================================
  AT a%,c1% :PRINT CHR$(5) :BEEP b%,10*b% 
========================================================
(output_expression_start)

    (scan_line) scan_line:

     (check_assignment) check_assignment:

      (check_variable) check_variable:

       (check_vname) check_vname 'BEEP b%,10*b% ':
       (check_vname) check_vname ret1 ' b%,10*b% ':
      (check_variable) check_variable: ' b%,10*b% '
      (check_variable) check_variable: Ary test ' b%,10*b% '

       (check_literal) check_literal:lit='(' idx=32 ' b%,10*b% '
       (check_literal) check_literal:After drop space:'(' idx=32 ' b%,10*b% '
       (check_literal)   '(' != ' '
       (check_literal) check_literal: ret0
      (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
     (check_variable) check_variable:ret1 

     (check_literal) check_literal:lit=' =' idx=32 ' b%,10*b% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'=' idx=33 'b%,10*b% '
     (check_literal)   '=' != 'b'
     (check_literal) check_literal: ret0
    (check_assignment) check_assignment:ret0

    (check_proc_call) check_proc_call:

     (check_textlabel) check_textlabel: 'BEEP b%,10*b% '
     (check_textlabel) check_textlabel:ret0
    (check_proc_call) check_proc_call:ret0

    (check_command) check_command:
    (check_command) check_command: ret1 found=> 'BEEP'
   (scan_line) scan_line:check_command: 

    (scan_command) scan_command:
   Frst:1 T:'BEEP' exptype:U
    (token_is_function) 
token_is_function:
    (token_is_function) BEEP is function
    (function_return_type) 
function_return_type: 'BEEP' =>v
    (function_return_type) 
function_return_type: 'BEEP' =>17
process_token: 'BEEP' t=>v
 Push:'BEEP'
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (1)

    (op_stack_print) 
000: BEEP type:17
    (op_stack_print) 
------------------

    (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (2)

    (op_stack_print) 
000: BEEP type:17
    (op_stack_print) 
001: ( type:16
    (op_stack_print) 
------------------


     (scan_expression) scan_expression: ' b%,10*b% '

      (check_eitem) check_eitem: 'b%,10*b% '

       (check_operator) check_operator: b%,10*b% 

        (check_literal) check_literal:lit=' ,' idx=33 'b%,10*b% '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:',' idx=33 'b%,10*b% '
        (check_literal)   ',' != 'b'
        (check_literal) check_literal: ret0
       (check_operator) ret0:is comma: 0

       (check_function) check_function: 'b%,10*b% '
       (check_function) check_function: ret0

       (check_atom) check_atom:

        (check_literal) check_literal:lit=' %' idx=33 'b%,10*b% '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'%' idx=33 'b%,10*b% '
        (check_literal)   '%' != 'b'
        (check_literal) check_literal: ret0

        (check_literal) check_literal:lit=' "' idx=33 'b%,10*b% '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'"' idx=33 'b%,10*b% '
        (check_literal)   '"' != 'b'
        (check_literal) check_literal: ret0

        (check_number) check_number:

         (check_float) check_float:
         (isfloatdigit) isfloatdigit:
         (check_float) check_float: ret0

         (check_integer) check_integer: 'b%,10*b% '
         (check_integer) check_integer:ret0
        (check_number) check_number: ret0

        (check_variable) check_variable:

         (check_vname) check_vname 'b%,10*b% ':
         (check_vname) check_vname ret1 '%,10*b% ':
        (check_variable) check_variable: '%,10*b% '
        (check_variable) check_variable: Ary test ',10*b% '

         (check_literal) check_literal:lit='(' idx=35 ',10*b% '
         (check_literal) check_literal:After drop space:'(' idx=35 ',10*b% '
         (check_literal)   '(' != ','
         (check_literal) check_literal: ret0
        (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
       (check_variable) check_variable:ret1 
      (check_atom) check_atom:ret1
     (check_eitem) check_eitem:ret1

     (scan_eitem) scan_eitem:

      (check_operator) check_operator: b%,10*b% 

       (check_literal) check_literal:lit=' ,' idx=33 'b%,10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=33 'b%,10*b% '
       (check_literal)   ',' != 'b'
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: 'b%,10*b% '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=33 'b%,10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=33 'b%,10*b% '
       (check_literal)   '%' != 'b'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=33 'b%,10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=33 'b%,10*b% '
       (check_literal)   '"' != 'b'
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: 'b%,10*b% '
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname 'b%,10*b% ':
        (check_vname) check_vname ret1 '%,10*b% ':
       (check_variable) check_variable: '%,10*b% '
       (check_variable) check_variable: Ary test ',10*b% '

        (check_literal) check_literal:lit='(' idx=35 ',10*b% '
        (check_literal) check_literal:After drop space:'(' idx=35 ',10*b% '
        (check_literal)   '(' != ','
        (check_literal) check_literal: ret0
       (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
      (check_variable) check_variable:ret1 
     (check_atom) check_atom:ret1

     (scan_atom) scan_atom:

      (check_literal) check_literal:lit=' %' idx=33 'b%,10*b% '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=33 'b%,10*b% '
      (check_literal)   '%' != 'b'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=33 'b%,10*b% '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=33 'b%,10*b% '
      (check_literal)   '"' != 'b'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: 'b%,10*b% '
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname 'b%,10*b% ':
       (check_vname) check_vname ret1 '%,10*b% ':
      (check_variable) check_variable: '%,10*b% '
      (check_variable) check_variable: Ary test ',10*b% '

       (check_literal) check_literal:lit='(' idx=35 ',10*b% '
       (check_literal) check_literal:After drop space:'(' idx=35 ',10*b% '
       (check_literal)   '(' != ','
       (check_literal) check_literal: ret0
      (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
     (check_variable) check_variable:ret1 

     (scan_variable) scan_variable:

      (scan_vname) scan_vname: 'b%,10*b% '
      (scan_vname) scan_vname: ret1 'b'
     (scan_variable) scan_variable: '%,10*b% ' vname='b'
     (scan_variable) scan_variable: Ary test ',10*b% '

      (check_literal) check_literal:lit='(' idx=35 ',10*b% '
      (check_literal) check_literal:After drop space:'(' idx=35 ',10*b% '
      (check_literal)   '(' != ','
      (check_literal) check_literal: ret0
     (scan_variable) scan_variable:ret1 vname='b%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'b%' exptype:U
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:b% is not function
token_is_variable: tok:'b%'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:b% is not function
    (init_get_name) 
init_get_name:'b%'
    (init_get_name) 
init_get_name:'b%'
    (get_name) 
get_name:gn:'b%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,(U )] i i b%
    (print_var_info) 
VAR INFO: '                b%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
    (scan_atom) scan_atom:ret1
   (scan_expression) n commas now:0

    (check_eitem) check_eitem: ',10*b% '

     (check_operator) check_operator: ,10*b% 

      (check_literal) check_literal:lit=' ,' idx=35 ',10*b% '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=35 ',10*b% '
      (check_literal) check_literal:After while():10*b% 
      (check_literal) check_literal:ret1 
     (check_operator) ret1:is comma: 0
    (check_eitem) check_eitem:ret1 comma:1

    (scan_eitem) scan_eitem:

     (check_operator) check_operator: ,10*b% 

      (check_literal) check_literal:lit=' ,' idx=35 ',10*b% '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=35 ',10*b% '
      (check_literal) check_literal:After while():10*b% 
      (check_literal) check_literal:ret1 
     (check_operator) ret1:is comma: 0

     (scan_operator) scan_operator: ',10*b% '

      (check_literal) check_literal:lit=' ,' idx=35 ',10*b% '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=35 ',10*b% '
      (check_literal) check_literal:After while():10*b% 
      (check_literal) check_literal:ret1 

      (scan_literal) scan_literal:lit=' ,' ',10*b% '
      (scan_literal) scan_literal:After drop space:',10*b% '
      (scan_literal) scan_literal:while loop:,10*b% 
   Frst:0 T:',' exptype:i
(output_sub_start)
      (scan_literal) scan_literal:ret1
     (scan_operator) ret1:is comma: 1
    (scan_eitem) Is comma;1
    (scan_expression) n commas now:1

     (check_eitem) check_eitem: '10*b% '

      (check_operator) check_operator: 10*b% 

       (check_literal) check_literal:lit=' ,' idx=36 '10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=36 '10*b% '
       (check_literal)   ',' != '1'
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: '10*b% '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=36 '10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=36 '10*b% '
       (check_literal)   '%' != '1'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=36 '10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=36 '10*b% '
       (check_literal)   '"' != '1'
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '10*b% '
        (check_integer) check_integer:ret1
       (check_number) check_number: ret1
      (check_atom) check_atom:ret1
     (check_eitem) check_eitem:ret1

     (scan_eitem) scan_eitem:

      (check_operator) check_operator: 10*b% 

       (check_literal) check_literal:lit=' ,' idx=36 '10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=36 '10*b% '
       (check_literal)   ',' != '1'
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: '10*b% '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=36 '10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=36 '10*b% '
       (check_literal)   '%' != '1'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=36 '10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=36 '10*b% '
       (check_literal)   '"' != '1'
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '10*b% '
        (check_integer) check_integer:ret1
       (check_number) check_number: ret1
      (check_atom) check_atom:ret1

      (scan_atom) scan_atom:

       (check_literal) check_literal:lit=' %' idx=36 '10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=36 '10*b% '
       (check_literal)   '%' != '1'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=36 '10*b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=36 '10*b% '
       (check_literal)   '"' != '1'
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '10*b% '
        (check_integer) check_integer:ret1
       (check_number) check_number: ret1

       (scan_number) scan_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '10*b% '
        (check_integer) check_integer:ret1

        (scan_integer) scan_integer:
        (scan_integer) scan_integer:ret1
   Frst:0 T:'10' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U )] i i 10
       (scan_integer) scan_integer:ret1  10
      (scan_atom) scan_atom:ret1
     (scan_expression) n commas now:1

      (check_eitem) check_eitem: '*b% '

       (check_operator) check_operator: *b% 

        (check_literal) check_literal:lit=' ,' idx=38 '*b% '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:',' idx=38 '*b% '
        (check_literal)   ',' != '*'
        (check_literal) check_literal: ret0
       (check_operator) ret1:is comma: 0
      (check_eitem) check_eitem:ret1 comma:1

      (scan_eitem) scan_eitem:

       (check_operator) check_operator: *b% 

        (check_literal) check_literal:lit=' ,' idx=38 '*b% '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:',' idx=38 '*b% '
        (check_literal)   ',' != '*'
        (check_literal) check_literal: ret0
       (check_operator) ret1:is comma: 0

       (scan_operator) scan_operator: '*b% '

        (check_literal) check_literal:lit=' ,' idx=38 '*b% '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:',' idx=38 '*b% '
        (check_literal)   ',' != '*'
        (check_literal) check_literal: ret0
       (scan_operator) scan_operator: ret1 'b% '
   Frst:0 T:'*' exptype:i
      (operator_precedence) 
* is operator
'*' is operator
      (process_token) 
Token is operator o1 name:* o2 name:(
      (process_token) 
opr1:5 opr2:0
Push 1
 Push:'*'
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (3)

      (op_stack_print) 
000: BEEP type:17
      (op_stack_print) 
001: ( type:16
      (op_stack_print) 
002: * type:0
      (op_stack_print) 
------------------

      (scan_eitem) Is comma;0
      (scan_expression) n commas now:1

       (check_eitem) check_eitem: 'b% '

        (check_operator) check_operator: b% 

         (check_literal) check_literal:lit=' ,' idx=39 'b% '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:',' idx=39 'b% '
         (check_literal)   ',' != 'b'
         (check_literal) check_literal: ret0
        (check_operator) ret0:is comma: 0

        (check_function) check_function: 'b% '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=39 'b% '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=39 'b% '
         (check_literal)   '%' != 'b'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=39 'b% '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=39 'b% '
         (check_literal)   '"' != 'b'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: 'b% '
          (check_integer) check_integer:ret0
         (check_number) check_number: ret0

         (check_variable) check_variable:

          (check_vname) check_vname 'b% ':
          (check_vname) check_vname ret1 '% ':
         (check_variable) check_variable: '% '
         (check_variable) check_variable: Ary test ' '

          (check_literal) check_literal:lit='(' idx=41 ' '
          (check_literal) check_literal:After drop space:'(' idx=41 ' '
          (check_literal)   '(' != ' '
          (check_literal) check_literal: ret0
         (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
        (check_variable) check_variable:ret1 
       (check_atom) check_atom:ret1
      (check_eitem) check_eitem:ret1

      (scan_eitem) scan_eitem:

       (check_operator) check_operator: b% 

        (check_literal) check_literal:lit=' ,' idx=39 'b% '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:',' idx=39 'b% '
        (check_literal)   ',' != 'b'
        (check_literal) check_literal: ret0
       (check_operator) ret0:is comma: 0

       (check_function) check_function: 'b% '
       (check_function) check_function: ret0

       (check_atom) check_atom:

        (check_literal) check_literal:lit=' %' idx=39 'b% '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'%' idx=39 'b% '
        (check_literal)   '%' != 'b'
        (check_literal) check_literal: ret0

        (check_literal) check_literal:lit=' "' idx=39 'b% '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'"' idx=39 'b% '
        (check_literal)   '"' != 'b'
        (check_literal) check_literal: ret0

        (check_number) check_number:

         (check_float) check_float:
         (isfloatdigit) isfloatdigit:
         (check_float) check_float: ret0

         (check_integer) check_integer: 'b% '
         (check_integer) check_integer:ret0
        (check_number) check_number: ret0

        (check_variable) check_variable:

         (check_vname) check_vname 'b% ':
         (check_vname) check_vname ret1 '% ':
        (check_variable) check_variable: '% '
        (check_variable) check_variable: Ary test ' '

         (check_literal) check_literal:lit='(' idx=41 ' '
         (check_literal) check_literal:After drop space:'(' idx=41 ' '
         (check_literal)   '(' != ' '
         (check_literal) check_literal: ret0
        (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
       (check_variable) check_variable:ret1 
      (check_atom) check_atom:ret1

      (scan_atom) scan_atom:

       (check_literal) check_literal:lit=' %' idx=39 'b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=39 'b% '
       (check_literal)   '%' != 'b'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=39 'b% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=39 'b% '
       (check_literal)   '"' != 'b'
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: 'b% '
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname 'b% ':
        (check_vname) check_vname ret1 '% ':
       (check_variable) check_variable: '% '
       (check_variable) check_variable: Ary test ' '

        (check_literal) check_literal:lit='(' idx=41 ' '
        (check_literal) check_literal:After drop space:'(' idx=41 ' '
        (check_literal)   '(' != ' '
        (check_literal) check_literal: ret0
       (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
      (check_variable) check_variable:ret1 

      (scan_variable) scan_variable:

       (scan_vname) scan_vname: 'b% '
       (scan_vname) scan_vname: ret1 'b'
      (scan_variable) scan_variable: '% ' vname='b'
      (scan_variable) scan_variable: Ary test ' '

       (check_literal) check_literal:lit='(' idx=41 ' '
       (check_literal) check_literal:After drop space:'(' idx=41 ' '
       (check_literal)   '(' != ' '
       (check_literal) check_literal: ret0
      (scan_variable) scan_variable:ret1 vname='b%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'b%' exptype:i
     (operator_precedence) 
* is operator
     (token_is_function) 
token_is_function:
     (token_is_function) 
token_is_function:b% is not function
token_is_variable: tok:'b%'
     (token_is_function) 
token_is_function:
     (token_is_function) 
token_is_function:b% is not function
     (init_get_name) 
init_get_name:'b%'
     (init_get_name) 
init_get_name:'b%'
     (get_name) 
get_name:gn:'b%'
process_token:type:i req_type:i
modify_expression_type:Inittype:i Intype:i Outtype:i
( output_variable) [i,(U )] i i b%
     (print_var_info) 
VAR INFO: '                b%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
     (scan_atom) scan_atom:ret1
    (scan_expression) n commas now:1

     (check_eitem) check_eitem: ' '

      (check_operator) check_operator:  

       (check_literal) check_literal:lit=' ,' idx=42 ''
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=42 ''
       (check_literal) check_literal  ret0 Empty test string
      (check_operator) ret0:is comma: 0

      (check_function) check_function: ''
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=41 ' '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=42 ''
       (check_literal) check_literal  ret0 Empty test string

       (check_literal) check_literal:lit=' "' idx=41 ' '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=42 ''
       (check_literal) check_literal  ret0 Empty test string

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: ''
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname '':
        (check_vname) check_vname ret0 '':
       (check_variable) check_variable:ret0 
      (check_atom) check_atom:ret1

      (check_sub_expr) check_sub_expr:

       (check_literal) check_literal:lit=' (' idx=41 ' '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'(' idx=42 ''
       (check_literal) check_literal  ret0 Empty test string
      (check_sub_expr) check_sub_expr: ret0
     (check_eitem) check_eitem:ret0
    (scan_expression) scan_expression: ret1 ' ' commas:1
   (scan_command) scan_command: ret1 =>'BEEP'
  (scan_command) 
ENDEXP
   Frst:0 T:')' exptype:i
  (operator_precedence) 
* is operator
  (process_token) 
Pop 3
Pop '*'
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (2)

  (op_stack_print) 
000: BEEP type:17
  (op_stack_print) 
001: ( type:16
  (op_stack_print) 
------------------

( output_operator) [i,(U )] i i *
  (token_is_function) 
token_is_function:
  (token_is_function) 
token_is_function:* is not function
Pop 4
Pop '('
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (1)

  (op_stack_print) 
000: BEEP type:17
  (op_stack_print) 
------------------

(  output_sub_end)
  (token_is_function) 
token_is_function:
  (token_is_function) BEEP is function
Pop 5
Pop 'BEEP'
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (0)

  (op_stack_print) 
------------------

( output_function) [i,(U )] v v BEEP
(  output_sub_end)
Finalise stack
  (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'b%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? '' nidx:-1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '10' nidx:38  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'b%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '*' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'BEEP' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
 BE:

Type Check Stack (0)

 BE:b%
type_check_stack_push: 'b%'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (1)

  (type_check_stack_print) 
000: 'b%' type:0
  (type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'b%' type:i (0)
 BE:

Type Check Stack (1)

000: 'b%' type:i (0)
 BE:10
type_check_stack_push: '10'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (2)

  (type_check_stack_print) 
000: 'b%' type:0
  (type_check_stack_print) 
001: '10' type:0
  (type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'b%' type:i (0)
001: '10' type:i (0)
 BE:b%
type_check_stack_push: 'b%'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (3)

  (type_check_stack_print) 
000: 'b%' type:0
  (type_check_stack_print) 
001: '10' type:0
  (type_check_stack_print) 
002: 'b%' type:0
  (type_check_stack_print) 
------------------


Type Check Stack (3)

000: 'b%' type:i (0)
001: '10' type:i (0)
002: 'b%' type:i (0)
 BE:*
BUFF_ID_OPERATOR
Found operator *
type_check_stack_pop: 'b%'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (2)

  (type_check_stack_print) 
000: 'b%' type:0
  (type_check_stack_print) 
001: '10' type:0
  (type_check_stack_print) 
------------------

type_check_stack_pop: '10'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (1)

  (type_check_stack_print) 
000: 'b%' type:0
  (type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (2)

  (type_check_stack_print) 
000: 'b%' type:0
  (type_check_stack_print) 
001: '000' type:0
  (type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'b%' type:i (0)
001: '000' type:i (0)
 BE:

Type Check Stack (2)

000: 'b%' type:i (0)
001: '000' type:i (0)
 BE:BEEP
FN: 2 args
  (function_return_type) 
function_return_type: 'BEEP' =>v
  (function_return_type) 
function_return_type: 'BEEP' =>17
ret_type;17 v
typecheck_expression:Ret type of BEEP : v
type_check_stack_pop: '000'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (1)

  (type_check_stack_print) 
000: 'b%' type:0
  (type_check_stack_print) 
------------------

FN ARG 1 ri 000 0(i)  Arg ok
type_check_stack_pop: 'b%'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (0)

  (type_check_stack_print) 
------------------

FN ARG 0 ri b% 0(i)  Arg ok
type_check_stack_push: '000'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (1)

  (type_check_stack_print) 
000: '000' type:17
  (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'b%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? '' nidx:-1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '10' nidx:38  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'b%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '*' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'BEEP' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'b%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_INTEGER      i rq:i '10'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_VARIABLE     i rq:i 'b%'  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_OPERATOR     i rq:i '*'  2: 5 4
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_FUNCTION     v rq:v 'BEEP'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
  (process_expression_types) 
==INFIX==

Var: b% ary:0 NumIdx:0
infix_stack_push: 'b%'
infix_stack_push: '10'
Var: b% ary:0 NumIdx:0
infix_stack_push: 'b%'
infix_stack_pop: 'b%'
infix_stack_pop: '10'
infix_stack_push: '(10 * b%)'
infix_stack_pop: '(10 * b%)'
infix_stack_pop: 'b%'
infix_stack_push: 'BEEP(b% (10 * b%) )'
infix_stack_pop: 'BEEP(b% (10 * b%) )'
  (process_expression_types) ==BEEP(b% (10 * b%) )==
  (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_START    U rq:?   0:
(    output_qcode) N4 EXP_BUFF_ID_INTEGER      i rq:i 10  0:
(    output_qcode) N5 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
(    output_qcode) N6 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 5 4
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N8 EXP_BUFF_ID_FUNCTION     v rq:v BEEP  0:
(    output_qcode) N9 EXP_BUFF_ID_SUB_END      U rq:i   0:

   (check_literal) check_literal:lit=':' idx=42 ''
   (check_literal) check_literal:After drop space:':' idx=42 ''
   (check_literal) check_literal  ret0 Empty test string
  (translate_file) 
cline scanned OK
************************************************
**  AT a%,c% :PRINT " " :AT a%,c1% :PRINT " " **
************************************************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'AT a%,c% :PRINT " " :AT a%,c1% :PRINT " " ':
     (check_vname) check_vname ret1 ' a%,c% :PRINT " " :AT a%,c1% :PRINT " " ':
    (check_variable) check_variable: ' a%,c% :PRINT " " :AT a%,c1% :PRINT " " '
    (check_variable) check_variable: Ary test ' a%,c% :PRINT " " :AT a%,c1% :PRINT " " '

     (check_literal) check_literal:lit='(' idx=4 ' a%,c% :PRINT " " :AT a%,c1% :PRINT " " '
     (check_literal) check_literal:After drop space:'(' idx=4 ' a%,c% :PRINT " " :AT a%,c1% :PRINT " " '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=4 ' a%,c% :PRINT " " :AT a%,c1% :PRINT " " '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=5 'a%,c% :PRINT " " :AT a%,c1% :PRINT " " '
   (check_literal)   '=' != 'a'
   (check_literal) check_literal: ret0
  (check_assignment) check_assignment:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) check_textlabel: 'AT a%,c% :PRINT " " :AT a%,c1% :PRINT " " '
   (check_textlabel) check_textlabel:ret0
  (check_proc_call) check_proc_call:ret0

  (check_command) check_command:
  (check_command) check_command: ret1 found=> 'AT'
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=40, ' a%,c% :PRINT " " :AT a%,c1% :PRINT " " '
========================================================
  AT a%,c% :PRINT " " :AT a%,c1% :PRINT " " 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'AT a%,c% :PRINT " " :AT a%,c1% :PRINT " " ':
    (check_vname) check_vname ret1 ' a%,c% :PRINT " " :AT a%,c1% :PRINT " " ':
   (check_variable) check_variable: ' a%,c% :PRINT " " :AT a%,c1% :PRINT " " '
   (check_variable) check_variable: Ary test ' a%,c% :PRINT " " :AT a%,c1% :PRINT " " '

    (check_literal) check_literal:lit='(' idx=4 ' a%,c% :PRINT " " :AT a%,c1% :PRINT " " '
    (check_literal) check_literal:After drop space:'(' idx=4 ' a%,c% :PRINT " " :AT a%,c1% :PRINT " " '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=4 ' a%,c% :PRINT " " :AT a%,c1% :PRINT " " '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=5 'a%,c% :PRINT " " :AT a%,c1% :PRINT " " '
  (check_literal)   '=' != 'a'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'AT a%,c% :PRINT " " :AT a%,c1% :PRINT " " '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'AT'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'AT' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) AT is function
 (function_return_type) 
function_return_type: 'AT' =>v
 (function_return_type) 
function_return_type: 'AT' =>17
process_token: 'AT' t=>v
 Push:'AT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: AT type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: AT type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' a%,c% :PRINT " " :AT a%,c1% :PRINT " " '

   (check_eitem) check_eitem: 'a%,c% :PRINT " " :AT a%,c1% :PRINT " " '

    (check_operator) check_operator: a%,c% :PRINT " " :AT a%,c1% :PRINT " " 

     (check_literal) check_literal:lit=' ,' idx=5 'a%,c% :PRINT " " :AT a%,c1% :PRINT " " '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=5 'a%,c% :PRINT " " :AT a%,c1% :PRINT " " '
     (check_literal)   ',' != 'a'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'a%,c% :PRINT " " :AT a%,c1% :PRINT " " '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=5 'a%,c% :PRINT " " :AT a%,c1% :PRINT " " '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=5 'a%,c% :PRINT " " :AT a%,c1% :PRINT " " '
     (check_literal)   '%' != 'a'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=5 'a%,c% :PRINT " " :AT a%,c1% :PRINT " " '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=5 'a%,c% :PRINT " " :AT a%,c1% :PRINT " " '
     (check_literal)   '"' != 'a'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'a%,c% :PRINT " " :AT a%,c1% :PRINT " " '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'a%,c% :PRINT " " :AT a%,c1% :PRINT " " ':
      (check_vname) check_vname ret1 '%,c% :PRINT " " :AT a%,c1% :PRINT " " ':
     (check_variable) check_variable: '%,c% :PRINT " " :AT a%,c1% :PRINT " " '
     (check_variable) check_variable: Ary test ',c% :PRINT " " :AT a%,c1% :PRINT " " '

      (check_literal) check_literal:lit='(' idx=7 ',c% :PRINT " " :AT a%,c1% :PRINT " " '
      (check_literal) check_literal:After drop space:'(' idx=7 ',c% :PRINT " " :AT a%,c1% :PRINT " " '
      (check_literal)   '(' != ','
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator: a%,c% :PRINT " " :AT a%,c1% :PRINT " " 

    (check_literal) check_literal:lit=' ,' idx=5 'a%,c% :PRINT " " :AT a%,c1% :PRINT " " '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=5 'a%,c% :PRINT " " :AT a%,c1% :PRINT " " '
    (check_literal)   ',' != 'a'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'a%,c% :PRINT " " :AT a%,c1% :PRINT " " '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=5 'a%,c% :PRINT " " :AT a%,c1% :PRINT " " '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=5 'a%,c% :PRINT " " :AT a%,c1% :PRINT " " '
    (check_literal)   '%' != 'a'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=5 'a%,c% :PRINT " " :AT a%,c1% :PRINT " " '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=5 'a%,c% :PRINT " " :AT a%,c1% :PRINT " " '
    (check_literal)   '"' != 'a'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'a%,c% :PRINT " " :AT a%,c1% :PRINT " " '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'a%,c% :PRINT " " :AT a%,c1% :PRINT " " ':
     (check_vname) check_vname ret1 '%,c% :PRINT " " :AT a%,c1% :PRINT " " ':
    (check_variable) check_variable: '%,c% :PRINT " " :AT a%,c1% :PRINT " " '
    (check_variable) check_variable: Ary test ',c% :PRINT " " :AT a%,c1% :PRINT " " '

     (check_literal) check_literal:lit='(' idx=7 ',c% :PRINT " " :AT a%,c1% :PRINT " " '
     (check_literal) check_literal:After drop space:'(' idx=7 ',c% :PRINT " " :AT a%,c1% :PRINT " " '
     (check_literal)   '(' != ','
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1

  (scan_atom) scan_atom:

   (check_literal) check_literal:lit=' %' idx=5 'a%,c% :PRINT " " :AT a%,c1% :PRINT " " '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=5 'a%,c% :PRINT " " :AT a%,c1% :PRINT " " '
   (check_literal)   '%' != 'a'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=5 'a%,c% :PRINT " " :AT a%,c1% :PRINT " " '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=5 'a%,c% :PRINT " " :AT a%,c1% :PRINT " " '
   (check_literal)   '"' != 'a'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'a%,c% :PRINT " " :AT a%,c1% :PRINT " " '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'a%,c% :PRINT " " :AT a%,c1% :PRINT " " ':
    (check_vname) check_vname ret1 '%,c% :PRINT " " :AT a%,c1% :PRINT " " ':
   (check_variable) check_variable: '%,c% :PRINT " " :AT a%,c1% :PRINT " " '
   (check_variable) check_variable: Ary test ',c% :PRINT " " :AT a%,c1% :PRINT " " '

    (check_literal) check_literal:lit='(' idx=7 ',c% :PRINT " " :AT a%,c1% :PRINT " " '
    (check_literal) check_literal:After drop space:'(' idx=7 ',c% :PRINT " " :AT a%,c1% :PRINT " " '
    (check_literal)   '(' != ','
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'a%,c% :PRINT " " :AT a%,c1% :PRINT " " '
   (scan_vname) scan_vname: ret1 'a'
  (scan_variable) scan_variable: '%,c% :PRINT " " :AT a%,c1% :PRINT " " ' vname='a'
  (scan_variable) scan_variable: Ary test ',c% :PRINT " " :AT a%,c1% :PRINT " " '

   (check_literal) check_literal:lit='(' idx=7 ',c% :PRINT " " :AT a%,c1% :PRINT " " '
   (check_literal) check_literal:After drop space:'(' idx=7 ',c% :PRINT " " :AT a%,c1% :PRINT " " '
   (check_literal)   '(' != ','
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='a%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'a%' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:a% is not function
token_is_variable: tok:'a%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:a% is not function
 (init_get_name) 
init_get_name:'a%'
 (init_get_name) 
init_get_name:'a%'
 (get_name) 
get_name:gn:'a%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,(U )] i i a%
 (print_var_info) 
VAR INFO: '                a%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
 (scan_atom) scan_atom:ret1
(scan_expression) n commas now:0

 (check_eitem) check_eitem: ',c% :PRINT " " :AT a%,c1% :PRINT " " '

  (check_operator) check_operator: ,c% :PRINT " " :AT a%,c1% :PRINT " " 

   (check_literal) check_literal:lit=' ,' idx=7 ',c% :PRINT " " :AT a%,c1% :PRINT " " '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=7 ',c% :PRINT " " :AT a%,c1% :PRINT " " '
   (check_literal) check_literal:After while():c% :PRINT " " :AT a%,c1% :PRINT " " 
   (check_literal) check_literal:ret1 
  (check_operator) ret1:is comma: 0
 (check_eitem) check_eitem:ret1 comma:1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: ,c% :PRINT " " :AT a%,c1% :PRINT " " 

   (check_literal) check_literal:lit=' ,' idx=7 ',c% :PRINT " " :AT a%,c1% :PRINT " " '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=7 ',c% :PRINT " " :AT a%,c1% :PRINT " " '
   (check_literal) check_literal:After while():c% :PRINT " " :AT a%,c1% :PRINT " " 
   (check_literal) check_literal:ret1 
  (check_operator) ret1:is comma: 0

  (scan_operator) scan_operator: ',c% :PRINT " " :AT a%,c1% :PRINT " " '

   (check_literal) check_literal:lit=' ,' idx=7 ',c% :PRINT " " :AT a%,c1% :PRINT " " '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=7 ',c% :PRINT " " :AT a%,c1% :PRINT " " '
   (check_literal) check_literal:After while():c% :PRINT " " :AT a%,c1% :PRINT " " 
   (check_literal) check_literal:ret1 

   (scan_literal) scan_literal:lit=' ,' ',c% :PRINT " " :AT a%,c1% :PRINT " " '
   (scan_literal) scan_literal:After drop space:',c% :PRINT " " :AT a%,c1% :PRINT " " '
   (scan_literal) scan_literal:while loop:,c% :PRINT " " :AT a%,c1% :PRINT " " 
   Frst:0 T:',' exptype:i
(output_sub_start)
   (scan_literal) scan_literal:ret1
  (scan_operator) ret1:is comma: 1
 (scan_eitem) Is comma;1
 (scan_expression) n commas now:1

  (check_eitem) check_eitem: 'c% :PRINT " " :AT a%,c1% :PRINT " " '

   (check_operator) check_operator: c% :PRINT " " :AT a%,c1% :PRINT " " 

    (check_literal) check_literal:lit=' ,' idx=8 'c% :PRINT " " :AT a%,c1% :PRINT " " '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=8 'c% :PRINT " " :AT a%,c1% :PRINT " " '
    (check_literal)   ',' != 'c'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'c% :PRINT " " :AT a%,c1% :PRINT " " '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=8 'c% :PRINT " " :AT a%,c1% :PRINT " " '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=8 'c% :PRINT " " :AT a%,c1% :PRINT " " '
    (check_literal)   '%' != 'c'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=8 'c% :PRINT " " :AT a%,c1% :PRINT " " '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=8 'c% :PRINT " " :AT a%,c1% :PRINT " " '
    (check_literal)   '"' != 'c'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'c% :PRINT " " :AT a%,c1% :PRINT " " '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'c% :PRINT " " :AT a%,c1% :PRINT " " ':
     (check_vname) check_vname ret1 '% :PRINT " " :AT a%,c1% :PRINT " " ':
    (check_variable) check_variable: '% :PRINT " " :AT a%,c1% :PRINT " " '
    (check_variable) check_variable: Ary test ' :PRINT " " :AT a%,c1% :PRINT " " '

     (check_literal) check_literal:lit='(' idx=10 ' :PRINT " " :AT a%,c1% :PRINT " " '
     (check_literal) check_literal:After drop space:'(' idx=10 ' :PRINT " " :AT a%,c1% :PRINT " " '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1
 (check_eitem) check_eitem:ret1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: c% :PRINT " " :AT a%,c1% :PRINT " " 

   (check_literal) check_literal:lit=' ,' idx=8 'c% :PRINT " " :AT a%,c1% :PRINT " " '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=8 'c% :PRINT " " :AT a%,c1% :PRINT " " '
   (check_literal)   ',' != 'c'
   (check_literal) check_literal: ret0
  (check_operator) ret0:is comma: 0

  (check_function) check_function: 'c% :PRINT " " :AT a%,c1% :PRINT " " '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=8 'c% :PRINT " " :AT a%,c1% :PRINT " " '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=8 'c% :PRINT " " :AT a%,c1% :PRINT " " '
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=8 'c% :PRINT " " :AT a%,c1% :PRINT " " '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=8 'c% :PRINT " " :AT a%,c1% :PRINT " " '
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c% :PRINT " " :AT a%,c1% :PRINT " " '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'c% :PRINT " " :AT a%,c1% :PRINT " " ':
    (check_vname) check_vname ret1 '% :PRINT " " :AT a%,c1% :PRINT " " ':
   (check_variable) check_variable: '% :PRINT " " :AT a%,c1% :PRINT " " '
   (check_variable) check_variable: Ary test ' :PRINT " " :AT a%,c1% :PRINT " " '

    (check_literal) check_literal:lit='(' idx=10 ' :PRINT " " :AT a%,c1% :PRINT " " '
    (check_literal) check_literal:After drop space:'(' idx=10 ' :PRINT " " :AT a%,c1% :PRINT " " '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) check_atom:ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=8 'c% :PRINT " " :AT a%,c1% :PRINT " " '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=8 'c% :PRINT " " :AT a%,c1% :PRINT " " '
  (check_literal)   '%' != 'c'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=8 'c% :PRINT " " :AT a%,c1% :PRINT " " '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=8 'c% :PRINT " " :AT a%,c1% :PRINT " " '
  (check_literal)   '"' != 'c'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) check_float: ret0

   (check_integer) check_integer: 'c% :PRINT " " :AT a%,c1% :PRINT " " '
   (check_integer) check_integer:ret0
  (check_number) check_number: ret0

  (check_variable) check_variable:

   (check_vname) check_vname 'c% :PRINT " " :AT a%,c1% :PRINT " " ':
   (check_vname) check_vname ret1 '% :PRINT " " :AT a%,c1% :PRINT " " ':
  (check_variable) check_variable: '% :PRINT " " :AT a%,c1% :PRINT " " '
  (check_variable) check_variable: Ary test ' :PRINT " " :AT a%,c1% :PRINT " " '

   (check_literal) check_literal:lit='(' idx=10 ' :PRINT " " :AT a%,c1% :PRINT " " '
   (check_literal) check_literal:After drop space:'(' idx=10 ' :PRINT " " :AT a%,c1% :PRINT " " '
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) scan_variable:

  (scan_vname) scan_vname: 'c% :PRINT " " :AT a%,c1% :PRINT " " '
  (scan_vname) scan_vname: ret1 'c'
 (scan_variable) scan_variable: '% :PRINT " " :AT a%,c1% :PRINT " " ' vname='c'
 (scan_variable) scan_variable: Ary test ' :PRINT " " :AT a%,c1% :PRINT " " '

  (check_literal) check_literal:lit='(' idx=10 ' :PRINT " " :AT a%,c1% :PRINT " " '
  (check_literal) check_literal:After drop space:'(' idx=10 ' :PRINT " " :AT a%,c1% :PRINT " " '
  (check_literal)   '(' != ' '
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='c%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'c%' exptype:U
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:c% is not function
token_is_variable: tok:'c%'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:c% is not function
(init_get_name) 
init_get_name:'c%'
(init_get_name) 
init_get_name:'c%'
(get_name) 
get_name:gn:'c%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,(U )] i i c%
(print_var_info) 
VAR INFO: '                c%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
(scan_atom) scan_atom:ret1
(scan_expression) n commas now:1

 (check_eitem) check_eitem: ' :PRINT " " :AT a%,c1% :PRINT " " '

  (check_operator) check_operator:  :PRINT " " :AT a%,c1% :PRINT " " 

   (check_literal) check_literal:lit=' ,' idx=11 ':PRINT " " :AT a%,c1% :PRINT " " '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=11 ':PRINT " " :AT a%,c1% :PRINT " " '
   (check_literal)   ',' != ':'
   (check_literal) check_literal: ret0
  (check_operator) ret0:is comma: 0

  (check_function) check_function: ':PRINT " " :AT a%,c1% :PRINT " " '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=10 ' :PRINT " " :AT a%,c1% :PRINT " " '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=11 ':PRINT " " :AT a%,c1% :PRINT " " '
   (check_literal)   '%' != ':'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=10 ' :PRINT " " :AT a%,c1% :PRINT " " '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=11 ':PRINT " " :AT a%,c1% :PRINT " " '
   (check_literal)   '"' != ':'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: ':PRINT " " :AT a%,c1% :PRINT " " '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname ':PRINT " " :AT a%,c1% :PRINT " " ':
    (check_vname) check_vname ret0 ':PRINT " " :AT a%,c1% :PRINT " " ':
   (check_variable) check_variable:ret0 
  (check_atom) check_atom:ret1

  (check_sub_expr) check_sub_expr:

   (check_literal) check_literal:lit=' (' idx=10 ' :PRINT " " :AT a%,c1% :PRINT " " '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'(' idx=11 ':PRINT " " :AT a%,c1% :PRINT " " '
   (check_literal)   '(' != ':'
   (check_literal) check_literal: ret0
  (check_sub_expr) check_sub_expr: ret0
 (check_eitem) check_eitem:ret0
(scan_expression) scan_expression: ret1 ' :PRINT " " :AT a%,c1% :PRINT " " ' commas:1
(scan_command) scan_command: ret1 =>'AT'
(scan_command) 
ENDEXP
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: AT type:17
(op_stack_print) 
------------------

(  output_sub_end)
(token_is_function) 
token_is_function:
(token_is_function) AT is function
Pop 5
Pop 'AT'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_function) [i,(U )] v v AT
(  output_sub_end)
Finalise stack
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'a%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? '' nidx:-1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'c%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'AT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
 BE:

Type Check Stack (0)

 BE:a%
type_check_stack_push: 'a%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'a%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'a%' type:i (0)
 BE:

Type Check Stack (1)

000: 'a%' type:i (0)
 BE:c%
type_check_stack_push: 'c%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'a%' type:0
(type_check_stack_print) 
001: 'c%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'a%' type:i (0)
001: 'c%' type:i (0)
 BE:

Type Check Stack (2)

000: 'a%' type:i (0)
001: 'c%' type:i (0)
 BE:AT
FN: 2 args
(function_return_type) 
function_return_type: 'AT' =>v
(function_return_type) 
function_return_type: 'AT' =>17
ret_type;17 v
typecheck_expression:Ret type of AT : v
type_check_stack_pop: 'c%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'a%' type:0
(type_check_stack_print) 
------------------

FN ARG 1 ri c% 0(i)  Arg ok
type_check_stack_pop: 'a%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (0)

(type_check_stack_print) 
------------------

FN ARG 0 ri a% 0(i)  Arg ok
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:17
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'a%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? '' nidx:-1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'c%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'AT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'a%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     i rq:i 'c%'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_FUNCTION     v rq:v 'AT'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
(process_expression_types) 
==INFIX==

Var: a% ary:0 NumIdx:0
infix_stack_push: 'a%'
Var: c% ary:0 NumIdx:0
infix_stack_push: 'c%'
infix_stack_pop: 'c%'
infix_stack_pop: 'a%'
infix_stack_push: 'AT(a% c% )'
infix_stack_pop: 'AT(a% c% )'
(process_expression_types) ==AT(a% c% )==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_START    U rq:?   0:
(    output_qcode) N4 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_FUNCTION     v rq:v AT  0:
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:i   0:

 (check_literal) check_literal:lit=':' idx=11 ':PRINT " " :AT a%,c1% :PRINT " " '
 (check_literal) check_literal:After drop space:':' idx=11 ':PRINT " " :AT a%,c1% :PRINT " " '
 (check_literal) check_literal:After while():PRINT " " :AT a%,c1% :PRINT " " 
 (check_literal) check_literal:ret1 

 (scan_literal) scan_literal:lit=':' 'PRINT " " :AT a%,c1% :PRINT " " '
 (scan_literal) scan_literal:After drop space:'PRINT " " :AT a%,c1% :PRINT " " '
 (scan_literal) scan_literal:while loop:PRINT " " :AT a%,c1% :PRINT " " 
 (scan_literal) scan_literal:ret1

 (check_line) check_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'PRINT " " :AT a%,c1% :PRINT " " ':
    (check_vname) check_vname ret1 ' " " :AT a%,c1% :PRINT " " ':
   (check_variable) check_variable: ' " " :AT a%,c1% :PRINT " " '
   (check_variable) check_variable: Ary test ' " " :AT a%,c1% :PRINT " " '

    (check_literal) check_literal:lit='(' idx=17 ' " " :AT a%,c1% :PRINT " " '
    (check_literal) check_literal:After drop space:'(' idx=17 ' " " :AT a%,c1% :PRINT " " '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=17 ' " " :AT a%,c1% :PRINT " " '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=18 '" " :AT a%,c1% :PRINT " " '
  (check_literal)   '=' != '"'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'PRINT " " :AT a%,c1% :PRINT " " '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'PRINT'
(check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=27, ' " " :AT a%,c1% :PRINT " " '
========================================================
  AT a%,c% :PRINT " " :AT a%,c1% :PRINT " " 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'PRINT " " :AT a%,c1% :PRINT " " ':
    (check_vname) check_vname ret1 ' " " :AT a%,c1% :PRINT " " ':
   (check_variable) check_variable: ' " " :AT a%,c1% :PRINT " " '
   (check_variable) check_variable: Ary test ' " " :AT a%,c1% :PRINT " " '

    (check_literal) check_literal:lit='(' idx=17 ' " " :AT a%,c1% :PRINT " " '
    (check_literal) check_literal:After drop space:'(' idx=17 ' " " :AT a%,c1% :PRINT " " '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=17 ' " " :AT a%,c1% :PRINT " " '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=18 '" " :AT a%,c1% :PRINT " " '
  (check_literal)   '=' != '"'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'PRINT " " :AT a%,c1% :PRINT " " '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'PRINT'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'PRINT' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) PRINT is function
 (function_return_type) 
function_return_type: 'PRINT' =>v
 (function_return_type) 
function_return_type: 'PRINT' =>17
process_token: 'PRINT' t=>v
 Push:'PRINT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' " " :AT a%,c1% :PRINT " " '

   (check_eitem) check_eitem: '" " :AT a%,c1% :PRINT " " '

    (check_operator) check_operator: " " :AT a%,c1% :PRINT " " 

     (check_literal) check_literal:lit=' ,' idx=18 '" " :AT a%,c1% :PRINT " " '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=18 '" " :AT a%,c1% :PRINT " " '
     (check_literal)   ',' != '"'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: '" " :AT a%,c1% :PRINT " " '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=18 '" " :AT a%,c1% :PRINT " " '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=18 '" " :AT a%,c1% :PRINT " " '
     (check_literal)   '%' != '"'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=18 '" " :AT a%,c1% :PRINT " " '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=18 '" " :AT a%,c1% :PRINT " " '
     (check_literal) check_literal:After while(): " :AT a%,c1% :PRINT " " 
     (check_literal) check_literal:ret1 
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (scan_eitem) scan_eitem:

    (check_operator) check_operator: " " :AT a%,c1% :PRINT " " 

     (check_literal) check_literal:lit=' ,' idx=18 '" " :AT a%,c1% :PRINT " " '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=18 '" " :AT a%,c1% :PRINT " " '
     (check_literal)   ',' != '"'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: '" " :AT a%,c1% :PRINT " " '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=18 '" " :AT a%,c1% :PRINT " " '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=18 '" " :AT a%,c1% :PRINT " " '
     (check_literal)   '%' != '"'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=18 '" " :AT a%,c1% :PRINT " " '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=18 '" " :AT a%,c1% :PRINT " " '
     (check_literal) check_literal:After while(): " :AT a%,c1% :PRINT " " 
     (check_literal) check_literal:ret1 
    (check_atom) check_atom:ret1

    (scan_atom) scan_atom:

     (check_literal) check_literal:lit=' %' idx=18 '" " :AT a%,c1% :PRINT " " '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=18 '" " :AT a%,c1% :PRINT " " '
     (check_literal)   '%' != '"'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=18 '" " :AT a%,c1% :PRINT " " '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=18 '" " :AT a%,c1% :PRINT " " '
     (check_literal) check_literal:After while(): " :AT a%,c1% :PRINT " " 
     (check_literal) check_literal:ret1 

     (scan_string) scan_string:

      (check_literal) check_literal:lit=' "' idx=18 '" " :AT a%,c1% :PRINT " " '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=18 '" " :AT a%,c1% :PRINT " " '
      (check_literal) check_literal:After while(): " :AT a%,c1% :PRINT " " 
      (check_literal) check_literal:ret1 
     (scan_string)   (in if) ' " :AT a%,c1% :PRINT " " '
     (scan_string)   (in wh) ' " :AT a%,c1% :PRINT " " '
     (scan_string)   (in wh) '" :AT a%,c1% :PRINT " " '
     (scan_string) scan_string: ret1
   Frst:0 T:'" "' exptype:U
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:" " is not function
token_is_variable: tok:'" "'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:" " is not function
(   output_string) [U,(U )] s ? " "
modify_expression_type:Inittype:U Intype:s Outtype:s
    (scan_atom) scan_atom:ret1
   (scan_expression) n commas now:0

    (check_eitem) check_eitem: ' :AT a%,c1% :PRINT " " '

     (check_operator) check_operator:  :AT a%,c1% :PRINT " " 

      (check_literal) check_literal:lit=' ,' idx=22 ':AT a%,c1% :PRINT " " '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=22 ':AT a%,c1% :PRINT " " '
      (check_literal)   ',' != ':'
      (check_literal) check_literal: ret0
     (check_operator) ret0:is comma: 0

     (check_function) check_function: ':AT a%,c1% :PRINT " " '
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=21 ' :AT a%,c1% :PRINT " " '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=22 ':AT a%,c1% :PRINT " " '
      (check_literal)   '%' != ':'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=21 ' :AT a%,c1% :PRINT " " '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=22 ':AT a%,c1% :PRINT " " '
      (check_literal)   '"' != ':'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: ':AT a%,c1% :PRINT " " '
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname ':AT a%,c1% :PRINT " " ':
       (check_vname) check_vname ret0 ':AT a%,c1% :PRINT " " ':
      (check_variable) check_variable:ret0 
     (check_atom) check_atom:ret1

     (check_sub_expr) check_sub_expr:

      (check_literal) check_literal:lit=' (' idx=21 ' :AT a%,c1% :PRINT " " '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'(' idx=22 ':AT a%,c1% :PRINT " " '
      (check_literal)   '(' != ':'
      (check_literal) check_literal: ret0
     (check_sub_expr) check_sub_expr: ret0
    (check_eitem) check_eitem:ret0
   (scan_expression) scan_expression: ret1 ' :AT a%,c1% :PRINT " " ' commas:0
  (scan_command) scan_command: ret1 =>'PRINT'
 (scan_command) 
ENDEXP
   Frst:0 T:')' exptype:s
Pop 4
Pop '('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
------------------

(  output_sub_end)
 (token_is_function) 
token_is_function:
 (token_is_function) PRINT is function
Pop 5
Pop 'PRINT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (0)

 (op_stack_print) 
------------------

( output_function) [s,(U )] v v PRINT
(  output_sub_end)
Finalise stack
 (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_STR          s rq:? '" "' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
 BE:

Type Check Stack (0)

 BE:" "
type_check_stack_push: '" "'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (1)

 (type_check_stack_print) 
000: '" "' type:2
 (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '" "' type:s (2)
 BE:

Type Check Stack (1)

000: '" "' type:s (2)
 BE:PRINT
FN: 1 args
 (function_return_type) 
function_return_type: 'PRINT' =>v
 (function_return_type) 
function_return_type: 'PRINT' =>17
ret_type;17 v
typecheck_expression:Ret type of PRINT : v
type_check_stack_pop: '" "'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (0)

 (type_check_stack_print) 
------------------

FN ARG 0 ri " " 2(s)  Arg not OK
type_check_stack_push: '000'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (1)

 (type_check_stack_print) 
000: '000' type:17
 (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_STR          s rq:? '" "' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_STR          s rq:? '" "'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
 (process_expression_types) 
==INFIX==

infix_stack_push: '" "'
infix_stack_pop: '" "'
infix_stack_push: 'PRINT(" " )'
infix_stack_pop: 'PRINT(" " )'
 (process_expression_types) ==PRINT(" " )==
 (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_STR          s rq:? " "  0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N4 EXP_BUFF_ID_FUNCTION     v rq:v PRINT  0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_END      U rq:i   0:

  (check_literal) check_literal:lit=':' idx=22 ':AT a%,c1% :PRINT " " '
  (check_literal) check_literal:After drop space:':' idx=22 ':AT a%,c1% :PRINT " " '
  (check_literal) check_literal:After while():AT a%,c1% :PRINT " " 
  (check_literal) check_literal:ret1 

  (scan_literal) scan_literal:lit=':' 'AT a%,c1% :PRINT " " '
  (scan_literal) scan_literal:After drop space:'AT a%,c1% :PRINT " " '
  (scan_literal) scan_literal:while loop:AT a%,c1% :PRINT " " 
  (scan_literal) scan_literal:ret1

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'AT a%,c1% :PRINT " " ':
     (check_vname) check_vname ret1 ' a%,c1% :PRINT " " ':
    (check_variable) check_variable: ' a%,c1% :PRINT " " '
    (check_variable) check_variable: Ary test ' a%,c1% :PRINT " " '

     (check_literal) check_literal:lit='(' idx=25 ' a%,c1% :PRINT " " '
     (check_literal) check_literal:After drop space:'(' idx=25 ' a%,c1% :PRINT " " '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=25 ' a%,c1% :PRINT " " '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=26 'a%,c1% :PRINT " " '
   (check_literal)   '=' != 'a'
   (check_literal) check_literal: ret0
  (check_assignment) check_assignment:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) check_textlabel: 'AT a%,c1% :PRINT " " '
   (check_textlabel) check_textlabel:ret0
  (check_proc_call) check_proc_call:ret0

  (check_command) check_command:
  (check_command) check_command: ret1 found=> 'AT'
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=19, ' a%,c1% :PRINT " " '
========================================================
  AT a%,c% :PRINT " " :AT a%,c1% :PRINT " " 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'AT a%,c1% :PRINT " " ':
    (check_vname) check_vname ret1 ' a%,c1% :PRINT " " ':
   (check_variable) check_variable: ' a%,c1% :PRINT " " '
   (check_variable) check_variable: Ary test ' a%,c1% :PRINT " " '

    (check_literal) check_literal:lit='(' idx=25 ' a%,c1% :PRINT " " '
    (check_literal) check_literal:After drop space:'(' idx=25 ' a%,c1% :PRINT " " '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=25 ' a%,c1% :PRINT " " '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=26 'a%,c1% :PRINT " " '
  (check_literal)   '=' != 'a'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'AT a%,c1% :PRINT " " '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'AT'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'AT' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) AT is function
 (function_return_type) 
function_return_type: 'AT' =>v
 (function_return_type) 
function_return_type: 'AT' =>17
process_token: 'AT' t=>v
 Push:'AT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: AT type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: AT type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' a%,c1% :PRINT " " '

   (check_eitem) check_eitem: 'a%,c1% :PRINT " " '

    (check_operator) check_operator: a%,c1% :PRINT " " 

     (check_literal) check_literal:lit=' ,' idx=26 'a%,c1% :PRINT " " '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=26 'a%,c1% :PRINT " " '
     (check_literal)   ',' != 'a'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'a%,c1% :PRINT " " '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=26 'a%,c1% :PRINT " " '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=26 'a%,c1% :PRINT " " '
     (check_literal)   '%' != 'a'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=26 'a%,c1% :PRINT " " '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=26 'a%,c1% :PRINT " " '
     (check_literal)   '"' != 'a'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'a%,c1% :PRINT " " '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'a%,c1% :PRINT " " ':
      (check_vname) check_vname ret1 '%,c1% :PRINT " " ':
     (check_variable) check_variable: '%,c1% :PRINT " " '
     (check_variable) check_variable: Ary test ',c1% :PRINT " " '

      (check_literal) check_literal:lit='(' idx=28 ',c1% :PRINT " " '
      (check_literal) check_literal:After drop space:'(' idx=28 ',c1% :PRINT " " '
      (check_literal)   '(' != ','
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator: a%,c1% :PRINT " " 

    (check_literal) check_literal:lit=' ,' idx=26 'a%,c1% :PRINT " " '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=26 'a%,c1% :PRINT " " '
    (check_literal)   ',' != 'a'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'a%,c1% :PRINT " " '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=26 'a%,c1% :PRINT " " '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=26 'a%,c1% :PRINT " " '
    (check_literal)   '%' != 'a'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=26 'a%,c1% :PRINT " " '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=26 'a%,c1% :PRINT " " '
    (check_literal)   '"' != 'a'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'a%,c1% :PRINT " " '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'a%,c1% :PRINT " " ':
     (check_vname) check_vname ret1 '%,c1% :PRINT " " ':
    (check_variable) check_variable: '%,c1% :PRINT " " '
    (check_variable) check_variable: Ary test ',c1% :PRINT " " '

     (check_literal) check_literal:lit='(' idx=28 ',c1% :PRINT " " '
     (check_literal) check_literal:After drop space:'(' idx=28 ',c1% :PRINT " " '
     (check_literal)   '(' != ','
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1

  (scan_atom) scan_atom:

   (check_literal) check_literal:lit=' %' idx=26 'a%,c1% :PRINT " " '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=26 'a%,c1% :PRINT " " '
   (check_literal)   '%' != 'a'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=26 'a%,c1% :PRINT " " '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=26 'a%,c1% :PRINT " " '
   (check_literal)   '"' != 'a'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'a%,c1% :PRINT " " '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'a%,c1% :PRINT " " ':
    (check_vname) check_vname ret1 '%,c1% :PRINT " " ':
   (check_variable) check_variable: '%,c1% :PRINT " " '
   (check_variable) check_variable: Ary test ',c1% :PRINT " " '

    (check_literal) check_literal:lit='(' idx=28 ',c1% :PRINT " " '
    (check_literal) check_literal:After drop space:'(' idx=28 ',c1% :PRINT " " '
    (check_literal)   '(' != ','
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'a%,c1% :PRINT " " '
   (scan_vname) scan_vname: ret1 'a'
  (scan_variable) scan_variable: '%,c1% :PRINT " " ' vname='a'
  (scan_variable) scan_variable: Ary test ',c1% :PRINT " " '

   (check_literal) check_literal:lit='(' idx=28 ',c1% :PRINT " " '
   (check_literal) check_literal:After drop space:'(' idx=28 ',c1% :PRINT " " '
   (check_literal)   '(' != ','
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='a%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'a%' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:a% is not function
token_is_variable: tok:'a%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:a% is not function
 (init_get_name) 
init_get_name:'a%'
 (init_get_name) 
init_get_name:'a%'
 (get_name) 
get_name:gn:'a%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,(U )] i i a%
 (print_var_info) 
VAR INFO: '                a%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
 (scan_atom) scan_atom:ret1
(scan_expression) n commas now:0

 (check_eitem) check_eitem: ',c1% :PRINT " " '

  (check_operator) check_operator: ,c1% :PRINT " " 

   (check_literal) check_literal:lit=' ,' idx=28 ',c1% :PRINT " " '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=28 ',c1% :PRINT " " '
   (check_literal) check_literal:After while():c1% :PRINT " " 
   (check_literal) check_literal:ret1 
  (check_operator) ret1:is comma: 0
 (check_eitem) check_eitem:ret1 comma:1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: ,c1% :PRINT " " 

   (check_literal) check_literal:lit=' ,' idx=28 ',c1% :PRINT " " '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=28 ',c1% :PRINT " " '
   (check_literal) check_literal:After while():c1% :PRINT " " 
   (check_literal) check_literal:ret1 
  (check_operator) ret1:is comma: 0

  (scan_operator) scan_operator: ',c1% :PRINT " " '

   (check_literal) check_literal:lit=' ,' idx=28 ',c1% :PRINT " " '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=28 ',c1% :PRINT " " '
   (check_literal) check_literal:After while():c1% :PRINT " " 
   (check_literal) check_literal:ret1 

   (scan_literal) scan_literal:lit=' ,' ',c1% :PRINT " " '
   (scan_literal) scan_literal:After drop space:',c1% :PRINT " " '
   (scan_literal) scan_literal:while loop:,c1% :PRINT " " 
   Frst:0 T:',' exptype:i
(output_sub_start)
   (scan_literal) scan_literal:ret1
  (scan_operator) ret1:is comma: 1
 (scan_eitem) Is comma;1
 (scan_expression) n commas now:1

  (check_eitem) check_eitem: 'c1% :PRINT " " '

   (check_operator) check_operator: c1% :PRINT " " 

    (check_literal) check_literal:lit=' ,' idx=29 'c1% :PRINT " " '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=29 'c1% :PRINT " " '
    (check_literal)   ',' != 'c'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'c1% :PRINT " " '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=29 'c1% :PRINT " " '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=29 'c1% :PRINT " " '
    (check_literal)   '%' != 'c'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=29 'c1% :PRINT " " '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=29 'c1% :PRINT " " '
    (check_literal)   '"' != 'c'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'c1% :PRINT " " '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'c1% :PRINT " " ':
     (check_vname) check_vname ret1 '% :PRINT " " ':
    (check_variable) check_variable: '% :PRINT " " '
    (check_variable) check_variable: Ary test ' :PRINT " " '

     (check_literal) check_literal:lit='(' idx=32 ' :PRINT " " '
     (check_literal) check_literal:After drop space:'(' idx=32 ' :PRINT " " '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1
 (check_eitem) check_eitem:ret1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: c1% :PRINT " " 

   (check_literal) check_literal:lit=' ,' idx=29 'c1% :PRINT " " '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=29 'c1% :PRINT " " '
   (check_literal)   ',' != 'c'
   (check_literal) check_literal: ret0
  (check_operator) ret0:is comma: 0

  (check_function) check_function: 'c1% :PRINT " " '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=29 'c1% :PRINT " " '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=29 'c1% :PRINT " " '
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=29 'c1% :PRINT " " '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=29 'c1% :PRINT " " '
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c1% :PRINT " " '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'c1% :PRINT " " ':
    (check_vname) check_vname ret1 '% :PRINT " " ':
   (check_variable) check_variable: '% :PRINT " " '
   (check_variable) check_variable: Ary test ' :PRINT " " '

    (check_literal) check_literal:lit='(' idx=32 ' :PRINT " " '
    (check_literal) check_literal:After drop space:'(' idx=32 ' :PRINT " " '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) check_atom:ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=29 'c1% :PRINT " " '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=29 'c1% :PRINT " " '
  (check_literal)   '%' != 'c'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=29 'c1% :PRINT " " '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=29 'c1% :PRINT " " '
  (check_literal)   '"' != 'c'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) check_float: ret0

   (check_integer) check_integer: 'c1% :PRINT " " '
   (check_integer) check_integer:ret0
  (check_number) check_number: ret0

  (check_variable) check_variable:

   (check_vname) check_vname 'c1% :PRINT " " ':
   (check_vname) check_vname ret1 '% :PRINT " " ':
  (check_variable) check_variable: '% :PRINT " " '
  (check_variable) check_variable: Ary test ' :PRINT " " '

   (check_literal) check_literal:lit='(' idx=32 ' :PRINT " " '
   (check_literal) check_literal:After drop space:'(' idx=32 ' :PRINT " " '
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) scan_variable:

  (scan_vname) scan_vname: 'c1% :PRINT " " '
  (scan_vname) scan_vname: ret1 'c1'
 (scan_variable) scan_variable: '% :PRINT " " ' vname='c1'
 (scan_variable) scan_variable: Ary test ' :PRINT " " '

  (check_literal) check_literal:lit='(' idx=32 ' :PRINT " " '
  (check_literal) check_literal:After drop space:'(' idx=32 ' :PRINT " " '
  (check_literal)   '(' != ' '
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='c1%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'c1%' exptype:U
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:c1% is not function
token_is_variable: tok:'c1%'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:c1% is not function
(init_get_name) 
init_get_name:'c1%'
(init_get_name) 
init_get_name:'c1%'
(get_name) 
get_name:gn:'c1%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,(U )] i i c1%
(print_var_info) 
VAR INFO: '               c1%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
(scan_atom) scan_atom:ret1
(scan_expression) n commas now:1

 (check_eitem) check_eitem: ' :PRINT " " '

  (check_operator) check_operator:  :PRINT " " 

   (check_literal) check_literal:lit=' ,' idx=33 ':PRINT " " '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=33 ':PRINT " " '
   (check_literal)   ',' != ':'
   (check_literal) check_literal: ret0
  (check_operator) ret0:is comma: 0

  (check_function) check_function: ':PRINT " " '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=32 ' :PRINT " " '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=33 ':PRINT " " '
   (check_literal)   '%' != ':'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=32 ' :PRINT " " '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=33 ':PRINT " " '
   (check_literal)   '"' != ':'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: ':PRINT " " '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname ':PRINT " " ':
    (check_vname) check_vname ret0 ':PRINT " " ':
   (check_variable) check_variable:ret0 
  (check_atom) check_atom:ret1

  (check_sub_expr) check_sub_expr:

   (check_literal) check_literal:lit=' (' idx=32 ' :PRINT " " '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'(' idx=33 ':PRINT " " '
   (check_literal)   '(' != ':'
   (check_literal) check_literal: ret0
  (check_sub_expr) check_sub_expr: ret0
 (check_eitem) check_eitem:ret0
(scan_expression) scan_expression: ret1 ' :PRINT " " ' commas:1
(scan_command) scan_command: ret1 =>'AT'
(scan_command) 
ENDEXP
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: AT type:17
(op_stack_print) 
------------------

(  output_sub_end)
(token_is_function) 
token_is_function:
(token_is_function) AT is function
Pop 5
Pop 'AT'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_function) [i,(U )] v v AT
(  output_sub_end)
Finalise stack
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'a%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? '' nidx:-1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'c1%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'AT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
 BE:

Type Check Stack (0)

 BE:a%
type_check_stack_push: 'a%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'a%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'a%' type:i (0)
 BE:

Type Check Stack (1)

000: 'a%' type:i (0)
 BE:c1%
type_check_stack_push: 'c1%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'a%' type:0
(type_check_stack_print) 
001: 'c1%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'a%' type:i (0)
001: 'c1%' type:i (0)
 BE:

Type Check Stack (2)

000: 'a%' type:i (0)
001: 'c1%' type:i (0)
 BE:AT
FN: 2 args
(function_return_type) 
function_return_type: 'AT' =>v
(function_return_type) 
function_return_type: 'AT' =>17
ret_type;17 v
typecheck_expression:Ret type of AT : v
type_check_stack_pop: 'c1%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'a%' type:0
(type_check_stack_print) 
------------------

FN ARG 1 ri c1% 0(i)  Arg ok
type_check_stack_pop: 'a%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (0)

(type_check_stack_print) 
------------------

FN ARG 0 ri a% 0(i)  Arg ok
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:17
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'a%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? '' nidx:-1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'c1%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'AT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'a%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     i rq:i 'c1%'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_FUNCTION     v rq:v 'AT'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
(process_expression_types) 
==INFIX==

Var: a% ary:0 NumIdx:0
infix_stack_push: 'a%'
Var: c1% ary:0 NumIdx:0
infix_stack_push: 'c1%'
infix_stack_pop: 'c1%'
infix_stack_pop: 'a%'
infix_stack_push: 'AT(a% c1% )'
infix_stack_pop: 'AT(a% c1% )'
(process_expression_types) ==AT(a% c1% )==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_START    U rq:?   0:
(    output_qcode) N4 EXP_BUFF_ID_VARIABLE     i rq:i c1%  0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_FUNCTION     v rq:v AT  0:
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:i   0:

 (check_literal) check_literal:lit=':' idx=33 ':PRINT " " '
 (check_literal) check_literal:After drop space:':' idx=33 ':PRINT " " '
 (check_literal) check_literal:After while():PRINT " " 
 (check_literal) check_literal:ret1 

 (scan_literal) scan_literal:lit=':' 'PRINT " " '
 (scan_literal) scan_literal:After drop space:'PRINT " " '
 (scan_literal) scan_literal:while loop:PRINT " " 
 (scan_literal) scan_literal:ret1

 (check_line) check_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'PRINT " " ':
    (check_vname) check_vname ret1 ' " " ':
   (check_variable) check_variable: ' " " '
   (check_variable) check_variable: Ary test ' " " '

    (check_literal) check_literal:lit='(' idx=39 ' " " '
    (check_literal) check_literal:After drop space:'(' idx=39 ' " " '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=39 ' " " '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=40 '" " '
  (check_literal)   '=' != '"'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'PRINT " " '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'PRINT'
(check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=5, ' " " '
========================================================
  AT a%,c% :PRINT " " :AT a%,c1% :PRINT " " 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'PRINT " " ':
    (check_vname) check_vname ret1 ' " " ':
   (check_variable) check_variable: ' " " '
   (check_variable) check_variable: Ary test ' " " '

    (check_literal) check_literal:lit='(' idx=39 ' " " '
    (check_literal) check_literal:After drop space:'(' idx=39 ' " " '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=39 ' " " '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=40 '" " '
  (check_literal)   '=' != '"'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'PRINT " " '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'PRINT'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'PRINT' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) PRINT is function
 (function_return_type) 
function_return_type: 'PRINT' =>v
 (function_return_type) 
function_return_type: 'PRINT' =>17
process_token: 'PRINT' t=>v
 Push:'PRINT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' " " '

   (check_eitem) check_eitem: '" " '

    (check_operator) check_operator: " " 

     (check_literal) check_literal:lit=' ,' idx=40 '" " '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=40 '" " '
     (check_literal)   ',' != '"'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: '" " '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=40 '" " '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=40 '" " '
     (check_literal)   '%' != '"'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=40 '" " '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=40 '" " '
     (check_literal) check_literal:After while(): " 
     (check_literal) check_literal:ret1 
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (scan_eitem) scan_eitem:

    (check_operator) check_operator: " " 

     (check_literal) check_literal:lit=' ,' idx=40 '" " '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=40 '" " '
     (check_literal)   ',' != '"'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: '" " '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=40 '" " '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=40 '" " '
     (check_literal)   '%' != '"'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=40 '" " '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=40 '" " '
     (check_literal) check_literal:After while(): " 
     (check_literal) check_literal:ret1 
    (check_atom) check_atom:ret1

    (scan_atom) scan_atom:

     (check_literal) check_literal:lit=' %' idx=40 '" " '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=40 '" " '
     (check_literal)   '%' != '"'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=40 '" " '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=40 '" " '
     (check_literal) check_literal:After while(): " 
     (check_literal) check_literal:ret1 

     (scan_string) scan_string:

      (check_literal) check_literal:lit=' "' idx=40 '" " '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=40 '" " '
      (check_literal) check_literal:After while(): " 
      (check_literal) check_literal:ret1 
     (scan_string)   (in if) ' " '
     (scan_string)   (in wh) ' " '
     (scan_string)   (in wh) '" '
     (scan_string) scan_string: ret1
   Frst:0 T:'" "' exptype:U
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:" " is not function
token_is_variable: tok:'" "'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:" " is not function
(   output_string) [U,(U )] s ? " "
modify_expression_type:Inittype:U Intype:s Outtype:s
    (scan_atom) scan_atom:ret1
   (scan_expression) n commas now:0

    (check_eitem) check_eitem: ' '

     (check_operator) check_operator:  

      (check_literal) check_literal:lit=' ,' idx=44 ''
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=44 ''
      (check_literal) check_literal  ret0 Empty test string
     (check_operator) ret0:is comma: 0

     (check_function) check_function: ''
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=43 ' '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=44 ''
      (check_literal) check_literal  ret0 Empty test string

      (check_literal) check_literal:lit=' "' idx=43 ' '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=44 ''
      (check_literal) check_literal  ret0 Empty test string

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: ''
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname '':
       (check_vname) check_vname ret0 '':
      (check_variable) check_variable:ret0 
     (check_atom) check_atom:ret1

     (check_sub_expr) check_sub_expr:

      (check_literal) check_literal:lit=' (' idx=43 ' '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'(' idx=44 ''
      (check_literal) check_literal  ret0 Empty test string
     (check_sub_expr) check_sub_expr: ret0
    (check_eitem) check_eitem:ret0
   (scan_expression) scan_expression: ret1 ' ' commas:0
  (scan_command) scan_command: ret1 =>'PRINT'
 (scan_command) 
ENDEXP
   Frst:0 T:')' exptype:s
Pop 4
Pop '('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
------------------

(  output_sub_end)
 (token_is_function) 
token_is_function:
 (token_is_function) PRINT is function
Pop 5
Pop 'PRINT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (0)

 (op_stack_print) 
------------------

( output_function) [s,(U )] v v PRINT
(  output_sub_end)
Finalise stack
 (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_STR          s rq:? '" "' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
 BE:

Type Check Stack (0)

 BE:" "
type_check_stack_push: '" "'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (1)

 (type_check_stack_print) 
000: '" "' type:2
 (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '" "' type:s (2)
 BE:

Type Check Stack (1)

000: '" "' type:s (2)
 BE:PRINT
FN: 1 args
 (function_return_type) 
function_return_type: 'PRINT' =>v
 (function_return_type) 
function_return_type: 'PRINT' =>17
ret_type;17 v
typecheck_expression:Ret type of PRINT : v
type_check_stack_pop: '" "'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (0)

 (type_check_stack_print) 
------------------

FN ARG 0 ri " " 2(s)  Arg not OK
type_check_stack_push: '000'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (1)

 (type_check_stack_print) 
000: '000' type:17
 (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_STR          s rq:? '" "' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_STR          s rq:? '" "'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
 (process_expression_types) 
==INFIX==

infix_stack_push: '" "'
infix_stack_pop: '" "'
infix_stack_push: 'PRINT(" " )'
infix_stack_pop: 'PRINT(" " )'
 (process_expression_types) ==PRINT(" " )==
 (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_STR          s rq:? " "  0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N4 EXP_BUFF_ID_FUNCTION     v rq:v PRINT  0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_END      U rq:i   0:

  (check_literal) check_literal:lit=':' idx=44 ''
  (check_literal) check_literal:After drop space:':' idx=44 ''
  (check_literal) check_literal  ret0 Empty test string
 (translate_file) 
cline scanned OK
*************
**  i%=KEY **
*************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'i%=KEY ':
     (check_vname) check_vname ret1 '%=KEY ':
    (check_variable) check_variable: '%=KEY '
    (check_variable) check_variable: Ary test '=KEY '

     (check_literal) check_literal:lit='(' idx=4 '=KEY '
     (check_literal) check_literal:After drop space:'(' idx=4 '=KEY '
     (check_literal)   '(' != '='
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=4 '=KEY '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=4 '=KEY '
   (check_literal) check_literal:After while():KEY 
   (check_literal) check_literal:ret1 

   (check_expression) check_expression: 'KEY '

    (check_eitem) check_eitem: 'KEY '

     (check_operator) check_operator: KEY 

      (check_literal) check_literal:lit=' ,' idx=5 'KEY '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=5 'KEY '
      (check_literal)   ',' != 'K'
      (check_literal) check_literal: ret0
     (check_operator) ret0:is comma: 0

     (check_function) check_function: 'KEY '
     (check_function) check_function: ret1 Found fn=>'KEY'
    (check_eitem) check_eitem:ret1

    (check_eitem) check_eitem: ' '

     (check_operator) check_operator:  

      (check_literal) check_literal:lit=' ,' idx=9 ''
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=9 ''
      (check_literal) check_literal  ret0 Empty test string
     (check_operator) ret0:is comma: 0

     (check_function) check_function: ''
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=8 ' '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=9 ''
      (check_literal) check_literal  ret0 Empty test string

      (check_literal) check_literal:lit=' "' idx=8 ' '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=9 ''
      (check_literal) check_literal  ret0 Empty test string

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: ''
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname '':
       (check_vname) check_vname ret0 '':
      (check_variable) check_variable:ret0 
     (check_atom) check_atom:ret1

     (check_sub_expr) check_sub_expr:

      (check_literal) check_literal:lit=' (' idx=8 ' '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'(' idx=9 ''
      (check_literal) check_literal  ret0 Empty test string
     (check_sub_expr) check_sub_expr: ret0
    (check_eitem) check_eitem:ret0
   (check_expression) check_expression:ret1 ' '
  (check_assignment) check_assignment:ret1
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=1, ' '
========================================================
  i%=KEY 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'i%=KEY ':
    (check_vname) check_vname ret1 '%=KEY ':
   (check_variable) check_variable: '%=KEY '
   (check_variable) check_variable: Ary test '=KEY '

    (check_literal) check_literal:lit='(' idx=4 '=KEY '
    (check_literal) check_literal:After drop space:'(' idx=4 '=KEY '
    (check_literal)   '(' != '='
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=4 '=KEY '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=4 '=KEY '
  (check_literal) check_literal:After while():KEY 
  (check_literal) check_literal:ret1 

  (check_expression) check_expression: 'KEY '

   (check_eitem) check_eitem: 'KEY '

    (check_operator) check_operator: KEY 

     (check_literal) check_literal:lit=' ,' idx=5 'KEY '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=5 'KEY '
     (check_literal)   ',' != 'K'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'KEY '
    (check_function) check_function: ret1 Found fn=>'KEY'
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: ' '

    (check_operator) check_operator:  

     (check_literal) check_literal:lit=' ,' idx=9 ''
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=9 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_operator) ret0:is comma: 0

    (check_function) check_function: ''
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=8 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=9 ''
     (check_literal) check_literal  ret0 Empty test string

     (check_literal) check_literal:lit=' "' idx=8 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=9 ''
     (check_literal) check_literal  ret0 Empty test string

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: ''
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname '':
      (check_vname) check_vname ret0 '':
     (check_variable) check_variable:ret0 
    (check_atom) check_atom:ret1

    (check_sub_expr) check_sub_expr:

     (check_literal) check_literal:lit=' (' idx=8 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'(' idx=9 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_sub_expr) check_sub_expr: ret0
   (check_eitem) check_eitem:ret0
  (check_expression) check_expression:ret1 ' '
 (check_assignment) check_assignment:ret1

 (scan_assignment) scan_assignment:

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'i%=KEY '
   (scan_vname) scan_vname: ret1 'i'
  (scan_variable) scan_variable: '%=KEY ' vname='i'
  (scan_variable) scan_variable: Ary test '=KEY '

   (check_literal) check_literal:lit='(' idx=4 '=KEY '
   (check_literal) check_literal:After drop space:'(' idx=4 '=KEY '
   (check_literal)   '(' != '='
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='i%' is str:0 int:1 flt:0 ary:0
   Frst:1 T:'i%' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:i% is not function
token_is_variable: tok:'i%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:i% is not function
 (init_get_name) 
init_get_name:'i%'
 (init_get_name) 
init_get_name:'i%'
 (get_name) 
get_name:gn:'i%'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] i i i%
 (print_var_info) 
VAR INFO: '                i%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0

  (scan_assignment_equals) scan_assignment_equals:lit=' =' '=KEY '
  (scan_assignment_equals) scan_assignment_equals:After drop space:'=KEY '
  (scan_assignment_equals) scan_assignment_equals:while loop:=KEY 
   Frst:0 T:':=' exptype:i
  (operator_precedence) 
:= is operator
':=' is operator
  (process_token) 
Token is operator o1 name::= o2 name:
  (process_token) 
opr1:1 opr2:0
Push 1
 Push:':='
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (1)

  (op_stack_print) 
000: := type:0
  (op_stack_print) 
------------------

  (scan_assignment_equals) scan_assignment_equals:ret1

  (scan_expression) scan_expression: 'KEY '

   (check_eitem) check_eitem: 'KEY '

    (check_operator) check_operator: KEY 

     (check_literal) check_literal:lit=' ,' idx=5 'KEY '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=5 'KEY '
     (check_literal)   ',' != 'K'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'KEY '
    (check_function) check_function: ret1 Found fn=>'KEY'
   (check_eitem) check_eitem:ret1

   (scan_eitem) scan_eitem:

    (check_operator) check_operator: KEY 

     (check_literal) check_literal:lit=' ,' idx=5 'KEY '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=5 'KEY '
     (check_literal)   ',' != 'K'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'KEY '
    (check_function) check_function: ret1 Found fn=>'KEY'

    (scan_function) scan_function:
   Frst:0 T:'KEY' exptype:i
    (operator_precedence) 
:= is operator
    (token_is_function) 
token_is_function:
    (token_is_function) KEY is function
    (function_return_type) 
function_return_type: 'KEY' =>i
    (function_return_type) 
function_return_type: 'KEY' =>0
process_token: 'KEY' t=>i
 Push:'KEY'
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (2)

    (op_stack_print) 
000: := type:0
    (op_stack_print) 
001: KEY type:0
    (op_stack_print) 
------------------

Dummy argument expression added
   Frst:0 T:'(' exptype:i
(output_sub_start)
 Push:'('
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (3)

    (op_stack_print) 
000: := type:0
    (op_stack_print) 
001: KEY type:0
    (op_stack_print) 
002: ( type:16
    (op_stack_print) 
------------------

   Frst:0 T:')' exptype:U
Pop 4
Pop '('
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (2)

    (op_stack_print) 
000: := type:0
    (op_stack_print) 
001: KEY type:0
    (op_stack_print) 
------------------

(  output_sub_end)
    (token_is_function) 
token_is_function:
    (token_is_function) KEY is function
Pop 5
Pop 'KEY'
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (1)

    (op_stack_print) 
000: := type:0
    (op_stack_print) 
------------------

( output_function) [U,(i )] i i KEY
(  output_sub_end)
    (scan_expression) n commas now:0

     (check_eitem) check_eitem: ' '

      (check_operator) check_operator:  

       (check_literal) check_literal:lit=' ,' idx=9 ''
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=9 ''
       (check_literal) check_literal  ret0 Empty test string
      (check_operator) ret0:is comma: 0

      (check_function) check_function: ''
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=8 ' '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=9 ''
       (check_literal) check_literal  ret0 Empty test string

       (check_literal) check_literal:lit=' "' idx=8 ' '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=9 ''
       (check_literal) check_literal  ret0 Empty test string

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: ''
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname '':
        (check_vname) check_vname ret0 '':
       (check_variable) check_variable:ret0 
      (check_atom) check_atom:ret1

      (check_sub_expr) check_sub_expr:

       (check_literal) check_literal:lit=' (' idx=8 ' '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'(' idx=9 ''
       (check_literal) check_literal  ret0 Empty test string
      (check_sub_expr) check_sub_expr: ret0
     (check_eitem) check_eitem:ret0
    (scan_expression) scan_expression: ret1 ' ' commas:0
   (scan_assignment) scan_assignment: ret1
Finalise stack
Pop ':='
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (0)

  (op_stack_print) 
------------------

( output_operator) [i,()] i i :=
  (token_is_function) 
token_is_function:
  (token_is_function) 
token_is_function::= is not function
  (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'i%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     i rq:i 'KEY' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i ':=' nidx:0  0:
=================
 BE:i%
type_check_stack_push: 'i%'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (1)

  (type_check_stack_print) 
000: 'i%' type:0
  (type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'i%' type:i (0)
 BE:

Type Check Stack (1)

000: 'i%' type:i (0)
 BE:

Type Check Stack (1)

000: 'i%' type:i (0)
 BE:KEY
FN: 0 args
  (function_return_type) 
function_return_type: 'KEY' =>i
  (function_return_type) 
function_return_type: 'KEY' =>0
ret_type;0 i
typecheck_expression:Ret type of KEY : i
type_check_stack_push: '000'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (2)

  (type_check_stack_print) 
000: 'i%' type:0
  (type_check_stack_print) 
001: '000' type:0
  (type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'i%' type:i (0)
001: '000' type:i (0)
 BE:

Type Check Stack (2)

000: 'i%' type:i (0)
001: '000' type:i (0)
 BE::=
BUFF_ID_OPERATOR
Found operator :=
type_check_stack_pop: '000'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (1)

  (type_check_stack_print) 
000: 'i%' type:0
  (type_check_stack_print) 
------------------

type_check_stack_pop: 'i%'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (0)

  (type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (1)

  (type_check_stack_print) 
000: '000' type:0
  (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'i%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     i rq:i 'KEY' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i ':=' nidx:0  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i 'i%'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_FUNCTION     i rq:i 'KEY'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_OPERATOR     i rq:i ':='  2: 4 1
=================
  (process_expression_types) 
==INFIX==

Var: i% ary:0 NumIdx:0
infix_stack_push: 'i%'
infix_stack_push: 'KEY()'
infix_stack_pop: 'KEY()'
infix_stack_pop: 'i%'
infix_stack_push: '(i% := KEY())'
infix_stack_pop: '(i% := KEY())'
  (process_expression_types) ==(i% := KEY())==
  (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i i%  0:
(    output_qcode) N2 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N4 EXP_BUFF_ID_FUNCTION     i rq:i KEY  0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_OPERATOR     i rq:i :=  2: 4 1

   (check_literal) check_literal:lit=':' idx=9 ''
   (check_literal) check_literal:After drop space:':' idx=9 ''
   (check_literal) check_literal  ret0 Empty test string
  (translate_file) 
cline scanned OK
************
**  IF i% **
************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'IF i% ':
     (check_vname) check_vname ret1 ' i% ':
    (check_variable) check_variable: ' i% '
    (check_variable) check_variable: Ary test ' i% '

     (check_literal) check_literal:lit='(' idx=4 ' i% '
     (check_literal) check_literal:After drop space:'(' idx=4 ' i% '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=4 ' i% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=5 'i% '
   (check_literal)   '=' != 'i'
   (check_literal) check_literal: ret0
  (check_assignment) check_assignment:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) check_textlabel: 'IF i% '
   (check_textlabel) check_textlabel:ret0
  (check_proc_call) check_proc_call:ret0

  (check_command) check_command:
  (check_command) check_command: ret0

  (check_function) check_function: 'IF i% '
  (check_function) check_function: ret0

  (check_literal) check_literal:lit=' IF' idx=0 '  IF i% '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'IF' idx=2 'IF i% '
  (check_literal) check_literal:After while(): i% 
  (check_literal) check_literal:ret1 
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=4, ' i% '
========================================================
  IF i% 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'IF i% ':
    (check_vname) check_vname ret1 ' i% ':
   (check_variable) check_variable: ' i% '
   (check_variable) check_variable: Ary test ' i% '

    (check_literal) check_literal:lit='(' idx=4 ' i% '
    (check_literal) check_literal:After drop space:'(' idx=4 ' i% '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=4 ' i% '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=5 'i% '
  (check_literal)   '=' != 'i'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'IF i% '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret0

 (check_function) check_function: 'IF i% '
 (check_function) check_function: ret0

 (check_literal) check_literal:lit=' IF' idx=2 'IF i% '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'IF' idx=2 'IF i% '
 (check_literal) check_literal:After while(): i% 
 (check_literal) check_literal:ret1 

 (scan_literal) scan_literal:lit=' IF' 'IF i% '
 (scan_literal) scan_literal:After drop space:'IF i% '
 (scan_literal) scan_literal:while loop:IF i% 
 (scan_literal) scan_literal:while loop:F i% 
   Frst:1 T:'IF' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:IF is not function
token_is_variable: tok:'IF'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:IF is not function
 (init_get_name) 
init_get_name:'IF'
 (init_get_name) 
init_get_name:'IF'
 (get_name) 
get_name:gn:'IF'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] f f IF
 (scan_literal) scan_literal:ret1

 (scan_expression) scan_expression: ' i% '

  (check_eitem) check_eitem: 'i% '

   (check_operator) check_operator: i% 

    (check_literal) check_literal:lit=' ,' idx=5 'i% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=5 'i% '
    (check_literal)   ',' != 'i'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'i% '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=5 'i% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=5 'i% '
    (check_literal)   '%' != 'i'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=5 'i% '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=5 'i% '
    (check_literal)   '"' != 'i'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'i% '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'i% ':
     (check_vname) check_vname ret1 '% ':
    (check_variable) check_variable: '% '
    (check_variable) check_variable: Ary test ' '

     (check_literal) check_literal:lit='(' idx=7 ' '
     (check_literal) check_literal:After drop space:'(' idx=7 ' '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1
 (check_eitem) check_eitem:ret1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: i% 

   (check_literal) check_literal:lit=' ,' idx=5 'i% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=5 'i% '
   (check_literal)   ',' != 'i'
   (check_literal) check_literal: ret0
  (check_operator) ret0:is comma: 0

  (check_function) check_function: 'i% '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=5 'i% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=5 'i% '
   (check_literal)   '%' != 'i'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=5 'i% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=5 'i% '
   (check_literal)   '"' != 'i'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'i% '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'i% ':
    (check_vname) check_vname ret1 '% ':
   (check_variable) check_variable: '% '
   (check_variable) check_variable: Ary test ' '

    (check_literal) check_literal:lit='(' idx=7 ' '
    (check_literal) check_literal:After drop space:'(' idx=7 ' '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) check_atom:ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=5 'i% '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=5 'i% '
  (check_literal)   '%' != 'i'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=5 'i% '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=5 'i% '
  (check_literal)   '"' != 'i'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) check_float: ret0

   (check_integer) check_integer: 'i% '
   (check_integer) check_integer:ret0
  (check_number) check_number: ret0

  (check_variable) check_variable:

   (check_vname) check_vname 'i% ':
   (check_vname) check_vname ret1 '% ':
  (check_variable) check_variable: '% '
  (check_variable) check_variable: Ary test ' '

   (check_literal) check_literal:lit='(' idx=7 ' '
   (check_literal) check_literal:After drop space:'(' idx=7 ' '
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) scan_variable:

  (scan_vname) scan_vname: 'i% '
  (scan_vname) scan_vname: ret1 'i'
 (scan_variable) scan_variable: '% ' vname='i'
 (scan_variable) scan_variable: Ary test ' '

  (check_literal) check_literal:lit='(' idx=7 ' '
  (check_literal) check_literal:After drop space:'(' idx=7 ' '
  (check_literal)   '(' != ' '
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='i%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'i%' exptype:i
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:i% is not function
token_is_variable: tok:'i%'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:i% is not function
(init_get_name) 
init_get_name:'i%'
(init_get_name) 
init_get_name:'i%'
(get_name) 
get_name:gn:'i%'
process_token:type:i req_type:i
modify_expression_type:Inittype:i Intype:i Outtype:i
( output_variable) [i,()] i i i%
(print_var_info) 
VAR INFO: '                i%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
(scan_atom) scan_atom:ret1
(scan_expression) n commas now:0

 (check_eitem) check_eitem: ' '

  (check_operator) check_operator:  

   (check_literal) check_literal:lit=' ,' idx=8 ''
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=8 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_operator) ret0:is comma: 0

  (check_function) check_function: ''
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=7 ' '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=8 ''
   (check_literal) check_literal  ret0 Empty test string

   (check_literal) check_literal:lit=' "' idx=7 ' '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=8 ''
   (check_literal) check_literal  ret0 Empty test string

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: ''
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname '':
    (check_vname) check_vname ret0 '':
   (check_variable) check_variable:ret0 
  (check_atom) check_atom:ret1

  (check_sub_expr) check_sub_expr:

   (check_literal) check_literal:lit=' (' idx=7 ' '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'(' idx=8 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_sub_expr) check_sub_expr: ret0
 (check_eitem) check_eitem:ret0
(scan_expression) scan_expression: ret1 ' ' commas:0
Finalise stack
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'IF' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'i%' nidx:0  0:
=================
 BE:IF
type_check_stack_push: 'IF'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'IF' type:1
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'IF' type:f (1)
 BE:i%
type_check_stack_push: 'i%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'IF' type:1
(type_check_stack_print) 
001: 'i%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'IF' type:f (1)
001: 'i%' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'IF' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'i%' nidx:0  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f 'IF'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'i%'  0:
=================
(process_expression_types) 
==INFIX==

Var: IF ary:2 NumIdx:0
infix_stack_push: 'IF()'
Var: i% ary:0 NumIdx:0
infix_stack_push: 'i%'
infix_stack_pop: 'i%'
(process_expression_types) ==i%==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     f rq:f IF  0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     i rq:i i%  0:

 (check_literal) check_literal:lit=':' idx=8 ''
 (check_literal) check_literal:After drop space:':' idx=8 ''
 (check_literal) check_literal  ret0 Empty test string
(translate_file) 
cline scanned OK
*************************
**   IF i%=%S AND y%>1 **
*************************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'IF i%=%S AND y%>1 ':
     (check_vname) check_vname ret1 ' i%=%S AND y%>1 ':
    (check_variable) check_variable: ' i%=%S AND y%>1 '
    (check_variable) check_variable: Ary test ' i%=%S AND y%>1 '

     (check_literal) check_literal:lit='(' idx=5 ' i%=%S AND y%>1 '
     (check_literal) check_literal:After drop space:'(' idx=5 ' i%=%S AND y%>1 '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=5 ' i%=%S AND y%>1 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=6 'i%=%S AND y%>1 '
   (check_literal)   '=' != 'i'
   (check_literal) check_literal: ret0
  (check_assignment) check_assignment:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) check_textlabel: 'IF i%=%S AND y%>1 '
   (check_textlabel) check_textlabel:ret0
  (check_proc_call) check_proc_call:ret0

  (check_command) check_command:
  (check_command) check_command: ret0

  (check_function) check_function: 'IF i%=%S AND y%>1 '
  (check_function) check_function: ret0

  (check_literal) check_literal:lit=' IF' idx=0 '   IF i%=%S AND y%>1 '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'IF' idx=3 'IF i%=%S AND y%>1 '
  (check_literal) check_literal:After while(): i%=%S AND y%>1 
  (check_literal) check_literal:ret1 
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=16, ' i%=%S AND y%>1 '
========================================================
   IF i%=%S AND y%>1 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'IF i%=%S AND y%>1 ':
    (check_vname) check_vname ret1 ' i%=%S AND y%>1 ':
   (check_variable) check_variable: ' i%=%S AND y%>1 '
   (check_variable) check_variable: Ary test ' i%=%S AND y%>1 '

    (check_literal) check_literal:lit='(' idx=5 ' i%=%S AND y%>1 '
    (check_literal) check_literal:After drop space:'(' idx=5 ' i%=%S AND y%>1 '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=5 ' i%=%S AND y%>1 '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=6 'i%=%S AND y%>1 '
  (check_literal)   '=' != 'i'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'IF i%=%S AND y%>1 '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret0

 (check_function) check_function: 'IF i%=%S AND y%>1 '
 (check_function) check_function: ret0

 (check_literal) check_literal:lit=' IF' idx=3 'IF i%=%S AND y%>1 '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'IF' idx=3 'IF i%=%S AND y%>1 '
 (check_literal) check_literal:After while(): i%=%S AND y%>1 
 (check_literal) check_literal:ret1 

 (scan_literal) scan_literal:lit=' IF' 'IF i%=%S AND y%>1 '
 (scan_literal) scan_literal:After drop space:'IF i%=%S AND y%>1 '
 (scan_literal) scan_literal:while loop:IF i%=%S AND y%>1 
 (scan_literal) scan_literal:while loop:F i%=%S AND y%>1 
   Frst:1 T:'IF' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:IF is not function
token_is_variable: tok:'IF'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:IF is not function
 (init_get_name) 
init_get_name:'IF'
 (init_get_name) 
init_get_name:'IF'
 (get_name) 
get_name:gn:'IF'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] f f IF
 (scan_literal) scan_literal:ret1

 (scan_expression) scan_expression: ' i%=%S AND y%>1 '

  (check_eitem) check_eitem: 'i%=%S AND y%>1 '

   (check_operator) check_operator: i%=%S AND y%>1 

    (check_literal) check_literal:lit=' ,' idx=6 'i%=%S AND y%>1 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=6 'i%=%S AND y%>1 '
    (check_literal)   ',' != 'i'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'i%=%S AND y%>1 '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=6 'i%=%S AND y%>1 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=6 'i%=%S AND y%>1 '
    (check_literal)   '%' != 'i'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=6 'i%=%S AND y%>1 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=6 'i%=%S AND y%>1 '
    (check_literal)   '"' != 'i'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'i%=%S AND y%>1 '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'i%=%S AND y%>1 ':
     (check_vname) check_vname ret1 '%=%S AND y%>1 ':
    (check_variable) check_variable: '%=%S AND y%>1 '
    (check_variable) check_variable: Ary test '=%S AND y%>1 '

     (check_literal) check_literal:lit='(' idx=8 '=%S AND y%>1 '
     (check_literal) check_literal:After drop space:'(' idx=8 '=%S AND y%>1 '
     (check_literal)   '(' != '='
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1
 (check_eitem) check_eitem:ret1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: i%=%S AND y%>1 

   (check_literal) check_literal:lit=' ,' idx=6 'i%=%S AND y%>1 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=6 'i%=%S AND y%>1 '
   (check_literal)   ',' != 'i'
   (check_literal) check_literal: ret0
  (check_operator) ret0:is comma: 0

  (check_function) check_function: 'i%=%S AND y%>1 '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=6 'i%=%S AND y%>1 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=6 'i%=%S AND y%>1 '
   (check_literal)   '%' != 'i'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=6 'i%=%S AND y%>1 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=6 'i%=%S AND y%>1 '
   (check_literal)   '"' != 'i'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'i%=%S AND y%>1 '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'i%=%S AND y%>1 ':
    (check_vname) check_vname ret1 '%=%S AND y%>1 ':
   (check_variable) check_variable: '%=%S AND y%>1 '
   (check_variable) check_variable: Ary test '=%S AND y%>1 '

    (check_literal) check_literal:lit='(' idx=8 '=%S AND y%>1 '
    (check_literal) check_literal:After drop space:'(' idx=8 '=%S AND y%>1 '
    (check_literal)   '(' != '='
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) check_atom:ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=6 'i%=%S AND y%>1 '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=6 'i%=%S AND y%>1 '
  (check_literal)   '%' != 'i'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=6 'i%=%S AND y%>1 '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=6 'i%=%S AND y%>1 '
  (check_literal)   '"' != 'i'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) check_float: ret0

   (check_integer) check_integer: 'i%=%S AND y%>1 '
   (check_integer) check_integer:ret0
  (check_number) check_number: ret0

  (check_variable) check_variable:

   (check_vname) check_vname 'i%=%S AND y%>1 ':
   (check_vname) check_vname ret1 '%=%S AND y%>1 ':
  (check_variable) check_variable: '%=%S AND y%>1 '
  (check_variable) check_variable: Ary test '=%S AND y%>1 '

   (check_literal) check_literal:lit='(' idx=8 '=%S AND y%>1 '
   (check_literal) check_literal:After drop space:'(' idx=8 '=%S AND y%>1 '
   (check_literal)   '(' != '='
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) scan_variable:

  (scan_vname) scan_vname: 'i%=%S AND y%>1 '
  (scan_vname) scan_vname: ret1 'i'
 (scan_variable) scan_variable: '%=%S AND y%>1 ' vname='i'
 (scan_variable) scan_variable: Ary test '=%S AND y%>1 '

  (check_literal) check_literal:lit='(' idx=8 '=%S AND y%>1 '
  (check_literal) check_literal:After drop space:'(' idx=8 '=%S AND y%>1 '
  (check_literal)   '(' != '='
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='i%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'i%' exptype:i
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:i% is not function
token_is_variable: tok:'i%'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:i% is not function
(init_get_name) 
init_get_name:'i%'
(init_get_name) 
init_get_name:'i%'
(get_name) 
get_name:gn:'i%'
process_token:type:i req_type:i
modify_expression_type:Inittype:i Intype:i Outtype:i
( output_variable) [i,()] i i i%
(print_var_info) 
VAR INFO: '                i%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
(scan_atom) scan_atom:ret1
(scan_expression) n commas now:0

 (check_eitem) check_eitem: '=%S AND y%>1 '

  (check_operator) check_operator: =%S AND y%>1 

   (check_literal) check_literal:lit=' ,' idx=8 '=%S AND y%>1 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=8 '=%S AND y%>1 '
   (check_literal)   ',' != '='
   (check_literal) check_literal: ret0
  (check_operator) ret1:is comma: 0
 (check_eitem) check_eitem:ret1 comma:1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: =%S AND y%>1 

   (check_literal) check_literal:lit=' ,' idx=8 '=%S AND y%>1 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=8 '=%S AND y%>1 '
   (check_literal)   ',' != '='
   (check_literal) check_literal: ret0
  (check_operator) ret1:is comma: 0

  (scan_operator) scan_operator: '=%S AND y%>1 '

   (check_literal) check_literal:lit=' ,' idx=8 '=%S AND y%>1 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=8 '=%S AND y%>1 '
   (check_literal)   ',' != '='
   (check_literal) check_literal: ret0
  (scan_operator) scan_operator: ret1 '%S AND y%>1 '
   Frst:0 T:'=' exptype:i
 (operator_precedence) 
= is operator
'=' is operator
 (process_token) 
Token is operator o1 name:= o2 name:
 (process_token) 
opr1:1 opr2:0
Push 1
 Push:'='
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: = type:0
 (op_stack_print) 
------------------

 (scan_eitem) Is comma;0
 (scan_expression) n commas now:0

  (check_eitem) check_eitem: '%S AND y%>1 '

   (check_operator) check_operator: %S AND y%>1 

    (check_literal) check_literal:lit=' ,' idx=9 '%S AND y%>1 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=9 '%S AND y%>1 '
    (check_literal)   ',' != '%'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: '%S AND y%>1 '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=9 '%S AND y%>1 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=9 '%S AND y%>1 '
    (check_literal) check_literal:After while():S AND y%>1 
    (check_literal) check_literal:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator: %S AND y%>1 

    (check_literal) check_literal:lit=' ,' idx=9 '%S AND y%>1 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=9 '%S AND y%>1 '
    (check_literal)   ',' != '%'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: '%S AND y%>1 '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=9 '%S AND y%>1 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=9 '%S AND y%>1 '
    (check_literal) check_literal:After while():S AND y%>1 
    (check_literal) check_literal:ret1 
   (check_atom) check_atom:ret1

   (scan_atom) scan_atom:

    (check_literal) check_literal:lit=' %' idx=9 '%S AND y%>1 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=9 '%S AND y%>1 '
    (check_literal) check_literal:After while():S AND y%>1 
    (check_literal) check_literal:ret1 

    (scan_literal) scan_literal:lit=' %' '%S AND y%>1 '
    (scan_literal) scan_literal:After drop space:'%S AND y%>1 '
    (scan_literal) scan_literal:while loop:%S AND y%>1 
   Frst:0 T:'%' exptype:i
    (operator_precedence) 
= is operator
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:% is not function
token_is_variable: tok:'%'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:% is not function
    (scan_literal) scan_literal:ret1
   (scan_atom) scan_atom:ret1
  (scan_expression) n commas now:0

   (check_eitem) check_eitem: 'S AND y%>1 '

    (check_operator) check_operator: S AND y%>1 

     (check_literal) check_literal:lit=' ,' idx=10 'S AND y%>1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=10 'S AND y%>1 '
     (check_literal)   ',' != 'S'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'S AND y%>1 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=10 'S AND y%>1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=10 'S AND y%>1 '
     (check_literal)   '%' != 'S'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=10 'S AND y%>1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=10 'S AND y%>1 '
     (check_literal)   '"' != 'S'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'S AND y%>1 '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'S AND y%>1 ':
      (check_vname) check_vname ret1 ' AND y%>1 ':
     (check_variable) check_variable: ' AND y%>1 '
     (check_variable) check_variable: Ary test ' AND y%>1 '

      (check_literal) check_literal:lit='(' idx=11 ' AND y%>1 '
      (check_literal) check_literal:After drop space:'(' idx=11 ' AND y%>1 '
      (check_literal)   '(' != ' '
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator: S AND y%>1 

    (check_literal) check_literal:lit=' ,' idx=10 'S AND y%>1 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=10 'S AND y%>1 '
    (check_literal)   ',' != 'S'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'S AND y%>1 '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=10 'S AND y%>1 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=10 'S AND y%>1 '
    (check_literal)   '%' != 'S'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=10 'S AND y%>1 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=10 'S AND y%>1 '
    (check_literal)   '"' != 'S'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'S AND y%>1 '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'S AND y%>1 ':
     (check_vname) check_vname ret1 ' AND y%>1 ':
    (check_variable) check_variable: ' AND y%>1 '
    (check_variable) check_variable: Ary test ' AND y%>1 '

     (check_literal) check_literal:lit='(' idx=11 ' AND y%>1 '
     (check_literal) check_literal:After drop space:'(' idx=11 ' AND y%>1 '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1

  (scan_atom) scan_atom:

   (check_literal) check_literal:lit=' %' idx=10 'S AND y%>1 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=10 'S AND y%>1 '
   (check_literal)   '%' != 'S'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=10 'S AND y%>1 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=10 'S AND y%>1 '
   (check_literal)   '"' != 'S'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'S AND y%>1 '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'S AND y%>1 ':
    (check_vname) check_vname ret1 ' AND y%>1 ':
   (check_variable) check_variable: ' AND y%>1 '
   (check_variable) check_variable: Ary test ' AND y%>1 '

    (check_literal) check_literal:lit='(' idx=11 ' AND y%>1 '
    (check_literal) check_literal:After drop space:'(' idx=11 ' AND y%>1 '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'S AND y%>1 '
   (scan_vname) scan_vname: ret1 'S'
  (scan_variable) scan_variable: ' AND y%>1 ' vname='S'
  (scan_variable) scan_variable: Ary test ' AND y%>1 '

   (check_literal) check_literal:lit='(' idx=11 ' AND y%>1 '
   (check_literal) check_literal:After drop space:'(' idx=11 ' AND y%>1 '
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='S' is str:0 int:0 flt:1 ary:0
   Frst:0 T:'S' exptype:i
 (operator_precedence) 
= is operator
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:S is not function
token_is_variable: tok:'S'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:S is not function
 (init_get_name) 
init_get_name:'S'
 (init_get_name) 
init_get_name:'S'
 (get_name) 
get_name:gn:'S'
process_token:type:i req_type:i
modify_expression_type:Inittype:i Intype:f Outtype:f
( output_variable) [f,()] f f S
 (print_var_info) 
VAR INFO: '                 S' gbl:0 ref:1 int:0 flt:1 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
 (scan_atom) scan_atom:ret1
(scan_expression) n commas now:0

 (check_eitem) check_eitem: ' AND y%>1 '

  (check_operator) check_operator:  AND y%>1 

   (check_literal) check_literal:lit=' ,' idx=12 'AND y%>1 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=12 'AND y%>1 '
   (check_literal)   ',' != 'A'
   (check_literal) check_literal: ret0
  (check_operator) ret1:is comma: 0
 (check_eitem) check_eitem:ret1 comma:1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator:  AND y%>1 

   (check_literal) check_literal:lit=' ,' idx=12 'AND y%>1 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=12 'AND y%>1 '
   (check_literal)   ',' != 'A'
   (check_literal) check_literal: ret0
  (check_operator) ret1:is comma: 0

  (scan_operator) scan_operator: ' AND y%>1 '

   (check_literal) check_literal:lit=' ,' idx=12 'AND y%>1 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=12 'AND y%>1 '
   (check_literal)   ',' != 'A'
   (check_literal) check_literal: ret0
  (scan_operator) scan_operator: ret1 ' y%>1 '
   Frst:0 T:'AND' exptype:f
 (operator_precedence) 
AND is operator
 (operator_precedence) 
= is operator
'AND' is operator
 (process_token) 
Token is operator o1 name:AND o2 name:=
 (process_token) 
opr1:5 opr2:1
 (operator_precedence) 
= is operator
 (operator_precedence) 
= is operator
Push 1
 Push:'AND'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: = type:0
 (op_stack_print) 
001: AND type:1
 (op_stack_print) 
------------------

 (scan_eitem) Is comma;0
 (scan_expression) n commas now:0

  (check_eitem) check_eitem: ' y%>1 '

   (check_operator) check_operator:  y%>1 

    (check_literal) check_literal:lit=' ,' idx=16 'y%>1 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=16 'y%>1 '
    (check_literal)   ',' != 'y'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'y%>1 '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=15 ' y%>1 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=16 'y%>1 '
    (check_literal)   '%' != 'y'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=15 ' y%>1 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=16 'y%>1 '
    (check_literal)   '"' != 'y'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'y%>1 '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'y%>1 ':
     (check_vname) check_vname ret1 '%>1 ':
    (check_variable) check_variable: '%>1 '
    (check_variable) check_variable: Ary test '>1 '

     (check_literal) check_literal:lit='(' idx=18 '>1 '
     (check_literal) check_literal:After drop space:'(' idx=18 '>1 '
     (check_literal)   '(' != '>'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1
 (check_eitem) check_eitem:ret1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator:  y%>1 

   (check_literal) check_literal:lit=' ,' idx=16 'y%>1 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=16 'y%>1 '
   (check_literal)   ',' != 'y'
   (check_literal) check_literal: ret0
  (check_operator) ret0:is comma: 0

  (check_function) check_function: 'y%>1 '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=15 ' y%>1 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=16 'y%>1 '
   (check_literal)   '%' != 'y'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=15 ' y%>1 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=16 'y%>1 '
   (check_literal)   '"' != 'y'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'y%>1 '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'y%>1 ':
    (check_vname) check_vname ret1 '%>1 ':
   (check_variable) check_variable: '%>1 '
   (check_variable) check_variable: Ary test '>1 '

    (check_literal) check_literal:lit='(' idx=18 '>1 '
    (check_literal) check_literal:After drop space:'(' idx=18 '>1 '
    (check_literal)   '(' != '>'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) check_atom:ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=15 ' y%>1 '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=16 'y%>1 '
  (check_literal)   '%' != 'y'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=15 ' y%>1 '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=16 'y%>1 '
  (check_literal)   '"' != 'y'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) check_float: ret0

   (check_integer) check_integer: 'y%>1 '
   (check_integer) check_integer:ret0
  (check_number) check_number: ret0

  (check_variable) check_variable:

   (check_vname) check_vname 'y%>1 ':
   (check_vname) check_vname ret1 '%>1 ':
  (check_variable) check_variable: '%>1 '
  (check_variable) check_variable: Ary test '>1 '

   (check_literal) check_literal:lit='(' idx=18 '>1 '
   (check_literal) check_literal:After drop space:'(' idx=18 '>1 '
   (check_literal)   '(' != '>'
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) scan_variable:

  (scan_vname) scan_vname: ' y%>1 '
  (scan_vname) scan_vname: ret1 'y'
 (scan_variable) scan_variable: '%>1 ' vname='y'
 (scan_variable) scan_variable: Ary test '>1 '

  (check_literal) check_literal:lit='(' idx=18 '>1 '
  (check_literal) check_literal:After drop space:'(' idx=18 '>1 '
  (check_literal)   '(' != '>'
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='y%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'y%' exptype:f
(operator_precedence) 
AND is operator
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:y% is not function
token_is_variable: tok:'y%'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:y% is not function
(init_get_name) 
init_get_name:'y%'
(init_get_name) 
init_get_name:'y%'
(get_name) 
get_name:gn:'y%'
process_token:type:f req_type:i
modify_expression_type:Inittype:f Intype:i Outtype:f
( output_variable) [f,()] f f y%
(print_var_info) 
VAR INFO: '                y%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
(scan_atom) scan_atom:ret1
(scan_expression) n commas now:0

 (check_eitem) check_eitem: '>1 '

  (check_operator) check_operator: >1 

   (check_literal) check_literal:lit=' ,' idx=18 '>1 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=18 '>1 '
   (check_literal)   ',' != '>'
   (check_literal) check_literal: ret0
  (check_operator) ret1:is comma: 0
 (check_eitem) check_eitem:ret1 comma:1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: >1 

   (check_literal) check_literal:lit=' ,' idx=18 '>1 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=18 '>1 '
   (check_literal)   ',' != '>'
   (check_literal) check_literal: ret0
  (check_operator) ret1:is comma: 0

  (scan_operator) scan_operator: '>1 '

   (check_literal) check_literal:lit=' ,' idx=18 '>1 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=18 '>1 '
   (check_literal)   ',' != '>'
   (check_literal) check_literal: ret0
  (scan_operator) scan_operator: ret1 '1 '
   Frst:0 T:'>' exptype:f
 (operator_precedence) 
> is operator
 (operator_precedence) 
AND is operator
'>' is operator
 (process_token) 
Token is operator o1 name:> o2 name:AND
 (process_token) 
opr1:5 opr2:5
 (operator_precedence) 
AND is operator
 (operator_precedence) 
AND is operator
 (operator_left_assoc) 
> is operator
Pop 1
Pop 'AND'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: = type:0
 (op_stack_print) 
------------------

 (operator_precedence) 
> is operator
 (operator_precedence) 
AND is operator
( output_operator) [f,()] f f AND
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:AND is not function
 (operator_precedence) 
= is operator
 (operator_precedence) 
= is operator
Push 1
 Push:'>'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: = type:0
 (op_stack_print) 
001: > type:1
 (op_stack_print) 
------------------

 (scan_eitem) Is comma;0
 (scan_expression) n commas now:0

  (check_eitem) check_eitem: '1 '

   (check_operator) check_operator: 1 

    (check_literal) check_literal:lit=' ,' idx=19 '1 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=19 '1 '
    (check_literal)   ',' != '1'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: '1 '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=19 '1 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=19 '1 '
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=19 '1 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=19 '1 '
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '1 '
     (check_integer) check_integer:ret1
    (check_number) check_number: ret1
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator: 1 

    (check_literal) check_literal:lit=' ,' idx=19 '1 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=19 '1 '
    (check_literal)   ',' != '1'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: '1 '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=19 '1 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=19 '1 '
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=19 '1 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=19 '1 '
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '1 '
     (check_integer) check_integer:ret1
    (check_number) check_number: ret1
   (check_atom) check_atom:ret1

   (scan_atom) scan_atom:

    (check_literal) check_literal:lit=' %' idx=19 '1 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=19 '1 '
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=19 '1 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=19 '1 '
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '1 '
     (check_integer) check_integer:ret1
    (check_number) check_number: ret1

    (scan_number) scan_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '1 '
     (check_integer) check_integer:ret1

     (scan_integer) scan_integer:
     (scan_integer) scan_integer:ret1
   Frst:0 T:'1' exptype:f
    (operator_precedence) 
> is operator
modify_expression_type:Inittype:f Intype:i Outtype:f
(  output_integer) [f,()] i f 1
    (scan_integer) scan_integer:ret1  1
   (scan_atom) scan_atom:ret1
  (scan_expression) n commas now:0

   (check_eitem) check_eitem: ' '

    (check_operator) check_operator:  

     (check_literal) check_literal:lit=' ,' idx=21 ''
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=21 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_operator) ret0:is comma: 0

    (check_function) check_function: ''
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=20 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=21 ''
     (check_literal) check_literal  ret0 Empty test string

     (check_literal) check_literal:lit=' "' idx=20 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=21 ''
     (check_literal) check_literal  ret0 Empty test string

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: ''
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname '':
      (check_vname) check_vname ret0 '':
     (check_variable) check_variable:ret0 
    (check_atom) check_atom:ret1

    (check_sub_expr) check_sub_expr:

     (check_literal) check_literal:lit=' (' idx=20 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'(' idx=21 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_sub_expr) check_sub_expr: ret0
   (check_eitem) check_eitem:ret0
  (scan_expression) scan_expression: ret1 ' ' commas:0
Finalise stack
Pop '>'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: = type:0
 (op_stack_print) 
------------------

( output_operator) [f,()] f f >
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:> is not function
Pop '='
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (0)

 (op_stack_print) 
------------------

( output_operator) [f,()] f f =
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:= is not function
 (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'IF' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'i%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'S' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'y%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f 'AND' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f '1' nidx:20  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f '>' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f '=' nidx:32766  0:
=================
 BE:IF
type_check_stack_push: 'IF'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (1)

 (type_check_stack_print) 
000: 'IF' type:1
 (type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'IF' type:f (1)
 BE:i%
type_check_stack_push: 'i%'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (2)

 (type_check_stack_print) 
000: 'IF' type:1
 (type_check_stack_print) 
001: 'i%' type:0
 (type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'IF' type:f (1)
001: 'i%' type:i (0)
 BE:S
type_check_stack_push: 'S'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (3)

 (type_check_stack_print) 
000: 'IF' type:1
 (type_check_stack_print) 
001: 'i%' type:0
 (type_check_stack_print) 
002: 'S' type:1
 (type_check_stack_print) 
------------------


Type Check Stack (3)

000: 'IF' type:f (1)
001: 'i%' type:i (0)
002: 'S' type:f (1)
 BE:y%
type_check_stack_push: 'y%'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (4)

 (type_check_stack_print) 
000: 'IF' type:1
 (type_check_stack_print) 
001: 'i%' type:0
 (type_check_stack_print) 
002: 'S' type:1
 (type_check_stack_print) 
003: 'y%' type:1
 (type_check_stack_print) 
------------------


Type Check Stack (4)

000: 'IF' type:f (1)
001: 'i%' type:i (0)
002: 'S' type:f (1)
003: 'y%' type:f (1)
 BE:AND
BUFF_ID_OPERATOR
Found operator AND
type_check_stack_pop: 'y%'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (3)

 (type_check_stack_print) 
000: 'IF' type:1
 (type_check_stack_print) 
001: 'i%' type:0
 (type_check_stack_print) 
002: 'S' type:1
 (type_check_stack_print) 
------------------

type_check_stack_pop: 'S'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (2)

 (type_check_stack_print) 
000: 'IF' type:1
 (type_check_stack_print) 
001: 'i%' type:0
 (type_check_stack_print) 
------------------

 Mutable type 1 1
 Same type
type_check_stack_push: '000'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (3)

 (type_check_stack_print) 
000: 'IF' type:1
 (type_check_stack_print) 
001: 'i%' type:0
 (type_check_stack_print) 
002: '000' type:1
 (type_check_stack_print) 
------------------


Type Check Stack (3)

000: 'IF' type:f (1)
001: 'i%' type:i (0)
002: '000' type:f (1)
 BE:1
type_check_stack_push: '1'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (4)

 (type_check_stack_print) 
000: 'IF' type:1
 (type_check_stack_print) 
001: 'i%' type:0
 (type_check_stack_print) 
002: '000' type:1
 (type_check_stack_print) 
003: '1' type:0
 (type_check_stack_print) 
------------------


Type Check Stack (4)

000: 'IF' type:f (1)
001: 'i%' type:i (0)
002: '000' type:f (1)
003: '1' type:i (0)
 BE:>
BUFF_ID_OPERATOR
Found operator >
type_check_stack_pop: '1'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (3)

 (type_check_stack_print) 
000: 'IF' type:1
 (type_check_stack_print) 
001: 'i%' type:0
 (type_check_stack_print) 
002: '000' type:1
 (type_check_stack_print) 
------------------

type_check_stack_pop: '000'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (2)

 (type_check_stack_print) 
000: 'IF' type:1
 (type_check_stack_print) 
001: 'i%' type:0
 (type_check_stack_print) 
------------------

 Mutable type 0 1
 Autoconversion
 --------------
 Op1: type:0 req type:1
 Op2: type:1 req type:1
 BE:  type:1 req type:1
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f 'IF'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'i%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     f rq:f 'S'  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     f rq:f 'y%'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_OPERATOR     f rq:f 'AND'  2: 4 3
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:f '1'  0:
=================
 Insert after 6 exp_buffer2_i:6
   Found at i:5
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f 'IF'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'i%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     f rq:f 'S'  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     f rq:f 'y%'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_OPERATOR     f rq:f 'AND'  2: 4 3
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:f '1'  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 6 5
=================
type_check_stack_push: '000'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (3)

 (type_check_stack_print) 
000: 'IF' type:1
 (type_check_stack_print) 
001: 'i%' type:0
 (type_check_stack_print) 
002: '000' type:1
 (type_check_stack_print) 
------------------


Type Check Stack (3)

000: 'IF' type:f (1)
001: 'i%' type:i (0)
002: '000' type:f (1)
 BE::=
BUFF_ID_OPERATOR
Found operator :=
type_check_stack_pop: '000'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (2)

 (type_check_stack_print) 
000: 'IF' type:1
 (type_check_stack_print) 
001: 'i%' type:0
 (type_check_stack_print) 
------------------

type_check_stack_pop: 'i%'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (1)

 (type_check_stack_print) 
000: 'IF' type:1
 (type_check_stack_print) 
------------------

 Mutable type 1 0
 Autoconversion
 --------------
 Op1: type:1 req type:1
 Op2: type:0 req type:0
 BE:  type:1 req type:1
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f 'IF'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'i%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     f rq:f 'S'  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     f rq:f 'y%'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_OPERATOR     f rq:f 'AND'  2: 4 3
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:f '1'  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 6 5
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     f rq:f '>'  2: 6 5
=================
 Insert after 7 exp_buffer2_i:8
   Found at i:7
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f 'IF'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'i%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     f rq:f 'S'  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     f rq:f 'y%'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_OPERATOR     f rq:f 'AND'  2: 4 3
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:f '1'  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 6 5
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     f rq:f '>'  2: 6 5
(dump_exp_buffer2) N10 EXP_BUFF_ID_AUTOCON      i rq:i 'autocon f->i'  2: 7 2
=================
type_check_stack_push: '000'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (2)

 (type_check_stack_print) 
000: 'IF' type:1
 (type_check_stack_print) 
001: '000' type:0
 (type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'IF' type:f (1)
001: '000' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'IF' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'i%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'S' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'y%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f 'AND' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f '1' nidx:20  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f '>' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f ':=' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f 'IF'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'i%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     f rq:f 'S'  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     f rq:f 'y%'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_OPERATOR     f rq:f 'AND'  2: 4 3
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:f '1'  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 6 5
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     f rq:f '>'  2: 6 5
(dump_exp_buffer2) N10 EXP_BUFF_ID_AUTOCON      i rq:i 'autocon f->i'  2: 7 2
(dump_exp_buffer2) N9 EXP_BUFF_ID_OPERATOR     i rq:i ':='  2: 7 2
=================
 (process_expression_types) 
==INFIX==

Var: IF ary:3 NumIdx:0
infix_stack_push: 'IF()'
Var: i% ary:0 NumIdx:0
infix_stack_push: 'i%'
Var: S ary:0 NumIdx:0
infix_stack_push: 'S'
Var: y% ary:0 NumIdx:0
infix_stack_push: 'y%'
infix_stack_pop: 'y%'
infix_stack_pop: 'S'
infix_stack_push: '(S AND y%)'
infix_stack_push: '1'
infix_stack_pop: '1'
infix_stack_pop: '(S AND y%)'
infix_stack_push: '((S AND y%) > 1)'
infix_stack_pop: '((S AND y%) > 1)'
infix_stack_pop: 'i%'
infix_stack_push: '(i% := ((S AND y%) > 1))'
infix_stack_pop: '(i% := ((S AND y%) > 1))'
 (process_expression_types) ==(i% := ((S AND y%) > 1))==
 (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     f rq:f IF  0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     i rq:i i%  0:
(    output_qcode) N3 EXP_BUFF_ID_VARIABLE     f rq:f S  0:
(    output_qcode) N4 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
(    output_qcode) N5 EXP_BUFF_ID_OPERATOR     f rq:f AND  2: 4 3
(    output_qcode) N6 EXP_BUFF_ID_INTEGER      i rq:f 1  0:
(    output_qcode) N8 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 6 5
(    output_qcode) N7 EXP_BUFF_ID_OPERATOR     f rq:f >  2: 6 5
(    output_qcode) N10 EXP_BUFF_ID_AUTOCON      i rq:i autocon f->i  2: 7 2
(    output_qcode) N9 EXP_BUFF_ID_OPERATOR     i rq:i :=  2: 7 2

  (check_literal) check_literal:lit=':' idx=21 ''
  (check_literal) check_literal:After drop space:':' idx=21 ''
  (check_literal) check_literal  ret0 Empty test string
 (translate_file) 
cline scanned OK
**********************************
**    AT x%,y% :PRINT CHR$(158) **
**********************************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'AT x%,y% :PRINT CHR$(158) ':
     (check_vname) check_vname ret1 ' x%,y% :PRINT CHR$(158) ':
    (check_variable) check_variable: ' x%,y% :PRINT CHR$(158) '
    (check_variable) check_variable: Ary test ' x%,y% :PRINT CHR$(158) '

     (check_literal) check_literal:lit='(' idx=6 ' x%,y% :PRINT CHR$(158) '
     (check_literal) check_literal:After drop space:'(' idx=6 ' x%,y% :PRINT CHR$(158) '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=6 ' x%,y% :PRINT CHR$(158) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=7 'x%,y% :PRINT CHR$(158) '
   (check_literal)   '=' != 'x'
   (check_literal) check_literal: ret0
  (check_assignment) check_assignment:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) check_textlabel: 'AT x%,y% :PRINT CHR$(158) '
   (check_textlabel) check_textlabel:ret0
  (check_proc_call) check_proc_call:ret0

  (check_command) check_command:
  (check_command) check_command: ret1 found=> 'AT'
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=24, ' x%,y% :PRINT CHR$(158) '
========================================================
    AT x%,y% :PRINT CHR$(158) 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'AT x%,y% :PRINT CHR$(158) ':
    (check_vname) check_vname ret1 ' x%,y% :PRINT CHR$(158) ':
   (check_variable) check_variable: ' x%,y% :PRINT CHR$(158) '
   (check_variable) check_variable: Ary test ' x%,y% :PRINT CHR$(158) '

    (check_literal) check_literal:lit='(' idx=6 ' x%,y% :PRINT CHR$(158) '
    (check_literal) check_literal:After drop space:'(' idx=6 ' x%,y% :PRINT CHR$(158) '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=6 ' x%,y% :PRINT CHR$(158) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=7 'x%,y% :PRINT CHR$(158) '
  (check_literal)   '=' != 'x'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'AT x%,y% :PRINT CHR$(158) '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'AT'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'AT' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) AT is function
 (function_return_type) 
function_return_type: 'AT' =>v
 (function_return_type) 
function_return_type: 'AT' =>17
process_token: 'AT' t=>v
 Push:'AT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: AT type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: AT type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' x%,y% :PRINT CHR$(158) '

   (check_eitem) check_eitem: 'x%,y% :PRINT CHR$(158) '

    (check_operator) check_operator: x%,y% :PRINT CHR$(158) 

     (check_literal) check_literal:lit=' ,' idx=7 'x%,y% :PRINT CHR$(158) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=7 'x%,y% :PRINT CHR$(158) '
     (check_literal)   ',' != 'x'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'x%,y% :PRINT CHR$(158) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=7 'x%,y% :PRINT CHR$(158) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=7 'x%,y% :PRINT CHR$(158) '
     (check_literal)   '%' != 'x'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=7 'x%,y% :PRINT CHR$(158) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=7 'x%,y% :PRINT CHR$(158) '
     (check_literal)   '"' != 'x'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'x%,y% :PRINT CHR$(158) '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'x%,y% :PRINT CHR$(158) ':
      (check_vname) check_vname ret1 '%,y% :PRINT CHR$(158) ':
     (check_variable) check_variable: '%,y% :PRINT CHR$(158) '
     (check_variable) check_variable: Ary test ',y% :PRINT CHR$(158) '

      (check_literal) check_literal:lit='(' idx=9 ',y% :PRINT CHR$(158) '
      (check_literal) check_literal:After drop space:'(' idx=9 ',y% :PRINT CHR$(158) '
      (check_literal)   '(' != ','
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator: x%,y% :PRINT CHR$(158) 

    (check_literal) check_literal:lit=' ,' idx=7 'x%,y% :PRINT CHR$(158) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=7 'x%,y% :PRINT CHR$(158) '
    (check_literal)   ',' != 'x'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'x%,y% :PRINT CHR$(158) '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=7 'x%,y% :PRINT CHR$(158) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=7 'x%,y% :PRINT CHR$(158) '
    (check_literal)   '%' != 'x'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=7 'x%,y% :PRINT CHR$(158) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=7 'x%,y% :PRINT CHR$(158) '
    (check_literal)   '"' != 'x'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'x%,y% :PRINT CHR$(158) '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'x%,y% :PRINT CHR$(158) ':
     (check_vname) check_vname ret1 '%,y% :PRINT CHR$(158) ':
    (check_variable) check_variable: '%,y% :PRINT CHR$(158) '
    (check_variable) check_variable: Ary test ',y% :PRINT CHR$(158) '

     (check_literal) check_literal:lit='(' idx=9 ',y% :PRINT CHR$(158) '
     (check_literal) check_literal:After drop space:'(' idx=9 ',y% :PRINT CHR$(158) '
     (check_literal)   '(' != ','
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1

  (scan_atom) scan_atom:

   (check_literal) check_literal:lit=' %' idx=7 'x%,y% :PRINT CHR$(158) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=7 'x%,y% :PRINT CHR$(158) '
   (check_literal)   '%' != 'x'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=7 'x%,y% :PRINT CHR$(158) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=7 'x%,y% :PRINT CHR$(158) '
   (check_literal)   '"' != 'x'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'x%,y% :PRINT CHR$(158) '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'x%,y% :PRINT CHR$(158) ':
    (check_vname) check_vname ret1 '%,y% :PRINT CHR$(158) ':
   (check_variable) check_variable: '%,y% :PRINT CHR$(158) '
   (check_variable) check_variable: Ary test ',y% :PRINT CHR$(158) '

    (check_literal) check_literal:lit='(' idx=9 ',y% :PRINT CHR$(158) '
    (check_literal) check_literal:After drop space:'(' idx=9 ',y% :PRINT CHR$(158) '
    (check_literal)   '(' != ','
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'x%,y% :PRINT CHR$(158) '
   (scan_vname) scan_vname: ret1 'x'
  (scan_variable) scan_variable: '%,y% :PRINT CHR$(158) ' vname='x'
  (scan_variable) scan_variable: Ary test ',y% :PRINT CHR$(158) '

   (check_literal) check_literal:lit='(' idx=9 ',y% :PRINT CHR$(158) '
   (check_literal) check_literal:After drop space:'(' idx=9 ',y% :PRINT CHR$(158) '
   (check_literal)   '(' != ','
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='x%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'x%' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:x% is not function
token_is_variable: tok:'x%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:x% is not function
 (init_get_name) 
init_get_name:'x%'
 (init_get_name) 
init_get_name:'x%'
 (get_name) 
get_name:gn:'x%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,(U )] i i x%
 (print_var_info) 
VAR INFO: '                x%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
 (scan_atom) scan_atom:ret1
(scan_expression) n commas now:0

 (check_eitem) check_eitem: ',y% :PRINT CHR$(158) '

  (check_operator) check_operator: ,y% :PRINT CHR$(158) 

   (check_literal) check_literal:lit=' ,' idx=9 ',y% :PRINT CHR$(158) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=9 ',y% :PRINT CHR$(158) '
   (check_literal) check_literal:After while():y% :PRINT CHR$(158) 
   (check_literal) check_literal:ret1 
  (check_operator) ret1:is comma: 0
 (check_eitem) check_eitem:ret1 comma:1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: ,y% :PRINT CHR$(158) 

   (check_literal) check_literal:lit=' ,' idx=9 ',y% :PRINT CHR$(158) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=9 ',y% :PRINT CHR$(158) '
   (check_literal) check_literal:After while():y% :PRINT CHR$(158) 
   (check_literal) check_literal:ret1 
  (check_operator) ret1:is comma: 0

  (scan_operator) scan_operator: ',y% :PRINT CHR$(158) '

   (check_literal) check_literal:lit=' ,' idx=9 ',y% :PRINT CHR$(158) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=9 ',y% :PRINT CHR$(158) '
   (check_literal) check_literal:After while():y% :PRINT CHR$(158) 
   (check_literal) check_literal:ret1 

   (scan_literal) scan_literal:lit=' ,' ',y% :PRINT CHR$(158) '
   (scan_literal) scan_literal:After drop space:',y% :PRINT CHR$(158) '
   (scan_literal) scan_literal:while loop:,y% :PRINT CHR$(158) 
   Frst:0 T:',' exptype:i
(output_sub_start)
   (scan_literal) scan_literal:ret1
  (scan_operator) ret1:is comma: 1
 (scan_eitem) Is comma;1
 (scan_expression) n commas now:1

  (check_eitem) check_eitem: 'y% :PRINT CHR$(158) '

   (check_operator) check_operator: y% :PRINT CHR$(158) 

    (check_literal) check_literal:lit=' ,' idx=10 'y% :PRINT CHR$(158) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=10 'y% :PRINT CHR$(158) '
    (check_literal)   ',' != 'y'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'y% :PRINT CHR$(158) '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=10 'y% :PRINT CHR$(158) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=10 'y% :PRINT CHR$(158) '
    (check_literal)   '%' != 'y'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=10 'y% :PRINT CHR$(158) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=10 'y% :PRINT CHR$(158) '
    (check_literal)   '"' != 'y'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'y% :PRINT CHR$(158) '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'y% :PRINT CHR$(158) ':
     (check_vname) check_vname ret1 '% :PRINT CHR$(158) ':
    (check_variable) check_variable: '% :PRINT CHR$(158) '
    (check_variable) check_variable: Ary test ' :PRINT CHR$(158) '

     (check_literal) check_literal:lit='(' idx=12 ' :PRINT CHR$(158) '
     (check_literal) check_literal:After drop space:'(' idx=12 ' :PRINT CHR$(158) '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1
 (check_eitem) check_eitem:ret1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: y% :PRINT CHR$(158) 

   (check_literal) check_literal:lit=' ,' idx=10 'y% :PRINT CHR$(158) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=10 'y% :PRINT CHR$(158) '
   (check_literal)   ',' != 'y'
   (check_literal) check_literal: ret0
  (check_operator) ret0:is comma: 0

  (check_function) check_function: 'y% :PRINT CHR$(158) '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=10 'y% :PRINT CHR$(158) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=10 'y% :PRINT CHR$(158) '
   (check_literal)   '%' != 'y'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=10 'y% :PRINT CHR$(158) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=10 'y% :PRINT CHR$(158) '
   (check_literal)   '"' != 'y'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'y% :PRINT CHR$(158) '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'y% :PRINT CHR$(158) ':
    (check_vname) check_vname ret1 '% :PRINT CHR$(158) ':
   (check_variable) check_variable: '% :PRINT CHR$(158) '
   (check_variable) check_variable: Ary test ' :PRINT CHR$(158) '

    (check_literal) check_literal:lit='(' idx=12 ' :PRINT CHR$(158) '
    (check_literal) check_literal:After drop space:'(' idx=12 ' :PRINT CHR$(158) '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) check_atom:ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=10 'y% :PRINT CHR$(158) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=10 'y% :PRINT CHR$(158) '
  (check_literal)   '%' != 'y'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=10 'y% :PRINT CHR$(158) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=10 'y% :PRINT CHR$(158) '
  (check_literal)   '"' != 'y'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) check_float: ret0

   (check_integer) check_integer: 'y% :PRINT CHR$(158) '
   (check_integer) check_integer:ret0
  (check_number) check_number: ret0

  (check_variable) check_variable:

   (check_vname) check_vname 'y% :PRINT CHR$(158) ':
   (check_vname) check_vname ret1 '% :PRINT CHR$(158) ':
  (check_variable) check_variable: '% :PRINT CHR$(158) '
  (check_variable) check_variable: Ary test ' :PRINT CHR$(158) '

   (check_literal) check_literal:lit='(' idx=12 ' :PRINT CHR$(158) '
   (check_literal) check_literal:After drop space:'(' idx=12 ' :PRINT CHR$(158) '
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) scan_variable:

  (scan_vname) scan_vname: 'y% :PRINT CHR$(158) '
  (scan_vname) scan_vname: ret1 'y'
 (scan_variable) scan_variable: '% :PRINT CHR$(158) ' vname='y'
 (scan_variable) scan_variable: Ary test ' :PRINT CHR$(158) '

  (check_literal) check_literal:lit='(' idx=12 ' :PRINT CHR$(158) '
  (check_literal) check_literal:After drop space:'(' idx=12 ' :PRINT CHR$(158) '
  (check_literal)   '(' != ' '
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='y%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'y%' exptype:U
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:y% is not function
token_is_variable: tok:'y%'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:y% is not function
(init_get_name) 
init_get_name:'y%'
(init_get_name) 
init_get_name:'y%'
(get_name) 
get_name:gn:'y%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,(U )] i i y%
(print_var_info) 
VAR INFO: '                y%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
(scan_atom) scan_atom:ret1
(scan_expression) n commas now:1

 (check_eitem) check_eitem: ' :PRINT CHR$(158) '

  (check_operator) check_operator:  :PRINT CHR$(158) 

   (check_literal) check_literal:lit=' ,' idx=13 ':PRINT CHR$(158) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=13 ':PRINT CHR$(158) '
   (check_literal)   ',' != ':'
   (check_literal) check_literal: ret0
  (check_operator) ret0:is comma: 0

  (check_function) check_function: ':PRINT CHR$(158) '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=12 ' :PRINT CHR$(158) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=13 ':PRINT CHR$(158) '
   (check_literal)   '%' != ':'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=12 ' :PRINT CHR$(158) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=13 ':PRINT CHR$(158) '
   (check_literal)   '"' != ':'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: ':PRINT CHR$(158) '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname ':PRINT CHR$(158) ':
    (check_vname) check_vname ret0 ':PRINT CHR$(158) ':
   (check_variable) check_variable:ret0 
  (check_atom) check_atom:ret1

  (check_sub_expr) check_sub_expr:

   (check_literal) check_literal:lit=' (' idx=12 ' :PRINT CHR$(158) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'(' idx=13 ':PRINT CHR$(158) '
   (check_literal)   '(' != ':'
   (check_literal) check_literal: ret0
  (check_sub_expr) check_sub_expr: ret0
 (check_eitem) check_eitem:ret0
(scan_expression) scan_expression: ret1 ' :PRINT CHR$(158) ' commas:1
(scan_command) scan_command: ret1 =>'AT'
(scan_command) 
ENDEXP
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: AT type:17
(op_stack_print) 
------------------

(  output_sub_end)
(token_is_function) 
token_is_function:
(token_is_function) AT is function
Pop 5
Pop 'AT'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_function) [i,(U )] v v AT
(  output_sub_end)
Finalise stack
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'x%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? '' nidx:-1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'y%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'AT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
 BE:

Type Check Stack (0)

 BE:x%
type_check_stack_push: 'x%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'x%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'x%' type:i (0)
 BE:

Type Check Stack (1)

000: 'x%' type:i (0)
 BE:y%
type_check_stack_push: 'y%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'x%' type:0
(type_check_stack_print) 
001: 'y%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'x%' type:i (0)
001: 'y%' type:i (0)
 BE:

Type Check Stack (2)

000: 'x%' type:i (0)
001: 'y%' type:i (0)
 BE:AT
FN: 2 args
(function_return_type) 
function_return_type: 'AT' =>v
(function_return_type) 
function_return_type: 'AT' =>17
ret_type;17 v
typecheck_expression:Ret type of AT : v
type_check_stack_pop: 'y%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'x%' type:0
(type_check_stack_print) 
------------------

FN ARG 1 ri y% 0(i)  Arg ok
type_check_stack_pop: 'x%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (0)

(type_check_stack_print) 
------------------

FN ARG 0 ri x% 0(i)  Arg ok
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:17
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'x%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? '' nidx:-1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'y%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'AT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'x%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     i rq:i 'y%'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_FUNCTION     v rq:v 'AT'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
(process_expression_types) 
==INFIX==

Var: x% ary:0 NumIdx:0
infix_stack_push: 'x%'
Var: y% ary:0 NumIdx:0
infix_stack_push: 'y%'
infix_stack_pop: 'y%'
infix_stack_pop: 'x%'
infix_stack_push: 'AT(x% y% )'
infix_stack_pop: 'AT(x% y% )'
(process_expression_types) ==AT(x% y% )==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     i rq:i x%  0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_START    U rq:?   0:
(    output_qcode) N4 EXP_BUFF_ID_VARIABLE     i rq:i y%  0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_FUNCTION     v rq:v AT  0:
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:i   0:

 (check_literal) check_literal:lit=':' idx=13 ':PRINT CHR$(158) '
 (check_literal) check_literal:After drop space:':' idx=13 ':PRINT CHR$(158) '
 (check_literal) check_literal:After while():PRINT CHR$(158) 
 (check_literal) check_literal:ret1 

 (scan_literal) scan_literal:lit=':' 'PRINT CHR$(158) '
 (scan_literal) scan_literal:After drop space:'PRINT CHR$(158) '
 (scan_literal) scan_literal:while loop:PRINT CHR$(158) 
 (scan_literal) scan_literal:ret1

 (check_line) check_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'PRINT CHR$(158) ':
    (check_vname) check_vname ret1 ' CHR$(158) ':
   (check_variable) check_variable: ' CHR$(158) '
   (check_variable) check_variable: Ary test ' CHR$(158) '

    (check_literal) check_literal:lit='(' idx=19 ' CHR$(158) '
    (check_literal) check_literal:After drop space:'(' idx=19 ' CHR$(158) '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=19 ' CHR$(158) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=20 'CHR$(158) '
  (check_literal)   '=' != 'C'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'PRINT CHR$(158) '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'PRINT'
(check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=11, ' CHR$(158) '
========================================================
    AT x%,y% :PRINT CHR$(158) 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'PRINT CHR$(158) ':
    (check_vname) check_vname ret1 ' CHR$(158) ':
   (check_variable) check_variable: ' CHR$(158) '
   (check_variable) check_variable: Ary test ' CHR$(158) '

    (check_literal) check_literal:lit='(' idx=19 ' CHR$(158) '
    (check_literal) check_literal:After drop space:'(' idx=19 ' CHR$(158) '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=19 ' CHR$(158) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=20 'CHR$(158) '
  (check_literal)   '=' != 'C'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'PRINT CHR$(158) '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'PRINT'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'PRINT' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) PRINT is function
 (function_return_type) 
function_return_type: 'PRINT' =>v
 (function_return_type) 
function_return_type: 'PRINT' =>17
process_token: 'PRINT' t=>v
 Push:'PRINT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' CHR$(158) '

   (check_eitem) check_eitem: 'CHR$(158) '

    (check_operator) check_operator: CHR$(158) 

     (check_literal) check_literal:lit=' ,' idx=20 'CHR$(158) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=20 'CHR$(158) '
     (check_literal)   ',' != 'C'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'CHR$(158) '
    (check_function) check_function: ret1 Found fn=>'CHR$'
   (check_eitem) check_eitem:ret1

   (scan_eitem) scan_eitem:

    (check_operator) check_operator: CHR$(158) 

     (check_literal) check_literal:lit=' ,' idx=20 'CHR$(158) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=20 'CHR$(158) '
     (check_literal)   ',' != 'C'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'CHR$(158) '
    (check_function) check_function: ret1 Found fn=>'CHR$'

    (scan_function) scan_function:
   Frst:0 T:'CHR$' exptype:U
    (token_is_function) 
token_is_function:
    (token_is_function) CHR$ is function
    (function_return_type) 
function_return_type: 'CHR$' =>s
    (function_return_type) 
function_return_type: 'CHR$' =>2
process_token: 'CHR$' t=>s
 Push:'CHR$'
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (3)

    (op_stack_print) 
000: PRINT type:17
    (op_stack_print) 
001: ( type:16
    (op_stack_print) 
002: CHR$ type:2
    (op_stack_print) 
------------------

    (scan_expression) n commas now:0

     (check_eitem) check_eitem: '(158) '

      (check_operator) check_operator: (158) 

       (check_literal) check_literal:lit=' ,' idx=24 '(158) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=24 '(158) '
       (check_literal)   ',' != '('
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: '(158) '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=24 '(158) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=24 '(158) '
       (check_literal)   '%' != '('
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=24 '(158) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=24 '(158) '
       (check_literal)   '"' != '('
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '(158) '
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname '(158) ':
        (check_vname) check_vname ret0 '(158) ':
       (check_variable) check_variable:ret0 
      (check_atom) check_atom:ret1

      (check_sub_expr) check_sub_expr:

       (check_literal) check_literal:lit=' (' idx=24 '(158) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'(' idx=24 '(158) '
       (check_literal) check_literal:After while():158) 
       (check_literal) check_literal:ret1 
      (check_sub_expr) check_sub_expr: ret1
     (check_eitem) check_eitem:ret1

     (scan_eitem) scan_eitem:

      (check_operator) check_operator: (158) 

       (check_literal) check_literal:lit=' ,' idx=24 '(158) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=24 '(158) '
       (check_literal)   ',' != '('
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: '(158) '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=24 '(158) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=24 '(158) '
       (check_literal)   '%' != '('
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=24 '(158) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=24 '(158) '
       (check_literal)   '"' != '('
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '(158) '
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname '(158) ':
        (check_vname) check_vname ret0 '(158) ':
       (check_variable) check_variable:ret0 
      (check_atom) check_atom:ret1

      (check_sub_expr) check_sub_expr:

       (check_literal) check_literal:lit=' (' idx=24 '(158) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'(' idx=24 '(158) '
       (check_literal) check_literal:After while():158) 
       (check_literal) check_literal:ret1 
      (check_sub_expr) check_sub_expr: ret1

      (scan_sub_expr) scan_sub_expr:

       (scan_literal) scan_literal:lit=' (' '(158) '
       (scan_literal) scan_literal:After drop space:'(158) '
       (scan_literal) scan_literal:while loop:(158) 
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (4)

       (op_stack_print) 
000: PRINT type:17
       (op_stack_print) 
001: ( type:16
       (op_stack_print) 
002: CHR$ type:2
       (op_stack_print) 
003: ( type:16
       (op_stack_print) 
------------------

       (scan_literal) scan_literal:ret1
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (5)

      (op_stack_print) 
000: PRINT type:17
      (op_stack_print) 
001: ( type:16
      (op_stack_print) 
002: CHR$ type:2
      (op_stack_print) 
003: ( type:16
      (op_stack_print) 
004: ( type:16
      (op_stack_print) 
------------------


       (scan_expression) scan_expression: '158) '

        (check_eitem) check_eitem: '158) '

         (check_operator) check_operator: 158) 

          (check_literal) check_literal:lit=' ,' idx=25 '158) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:',' idx=25 '158) '
          (check_literal)   ',' != '1'
          (check_literal) check_literal: ret0
         (check_operator) ret0:is comma: 0

         (check_function) check_function: '158) '
         (check_function) check_function: ret0

         (check_atom) check_atom:

          (check_literal) check_literal:lit=' %' idx=25 '158) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=25 '158) '
          (check_literal)   '%' != '1'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=25 '158) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=25 '158) '
          (check_literal)   '"' != '1'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '158) '
           (check_integer) check_integer:ret1
          (check_number) check_number: ret1
         (check_atom) check_atom:ret1
        (check_eitem) check_eitem:ret1

        (scan_eitem) scan_eitem:

         (check_operator) check_operator: 158) 

          (check_literal) check_literal:lit=' ,' idx=25 '158) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:',' idx=25 '158) '
          (check_literal)   ',' != '1'
          (check_literal) check_literal: ret0
         (check_operator) ret0:is comma: 0

         (check_function) check_function: '158) '
         (check_function) check_function: ret0

         (check_atom) check_atom:

          (check_literal) check_literal:lit=' %' idx=25 '158) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=25 '158) '
          (check_literal)   '%' != '1'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=25 '158) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=25 '158) '
          (check_literal)   '"' != '1'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '158) '
           (check_integer) check_integer:ret1
          (check_number) check_number: ret1
         (check_atom) check_atom:ret1

         (scan_atom) scan_atom:

          (check_literal) check_literal:lit=' %' idx=25 '158) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=25 '158) '
          (check_literal)   '%' != '1'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=25 '158) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=25 '158) '
          (check_literal)   '"' != '1'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '158) '
           (check_integer) check_integer:ret1
          (check_number) check_number: ret1

          (scan_number) scan_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '158) '
           (check_integer) check_integer:ret1

           (scan_integer) scan_integer:
           (scan_integer) scan_integer:ret1
   Frst:0 T:'158' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U U U )] i i 158
          (scan_integer) scan_integer:ret1  158
         (scan_atom) scan_atom:ret1
        (scan_expression) n commas now:0

         (check_eitem) check_eitem: ') '

          (check_operator) check_operator: ) 

           (check_literal) check_literal:lit=' ,' idx=28 ') '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:',' idx=28 ') '
           (check_literal)   ',' != ')'
           (check_literal) check_literal: ret0
          (check_operator) ret0:is comma: 0

          (check_function) check_function: ') '
          (check_function) check_function: ret0

          (check_atom) check_atom:

           (check_literal) check_literal:lit=' %' idx=28 ') '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'%' idx=28 ') '
           (check_literal)   '%' != ')'
           (check_literal) check_literal: ret0

           (check_literal) check_literal:lit=' "' idx=28 ') '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'"' idx=28 ') '
           (check_literal)   '"' != ')'
           (check_literal) check_literal: ret0

           (check_number) check_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret0

            (check_integer) check_integer: ') '
            (check_integer) check_integer:ret0
           (check_number) check_number: ret0

           (check_variable) check_variable:

            (check_vname) check_vname ') ':
            (check_vname) check_vname ret0 ') ':
           (check_variable) check_variable:ret0 
          (check_atom) check_atom:ret1

          (check_sub_expr) check_sub_expr:

           (check_literal) check_literal:lit=' (' idx=28 ') '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'(' idx=28 ') '
           (check_literal)   '(' != ')'
           (check_literal) check_literal: ret0
          (check_sub_expr) check_sub_expr: ret0
         (check_eitem) check_eitem:ret0
        (scan_expression) scan_expression: ret1 ') ' commas:0

        (scan_literal) scan_literal:lit=' )' ') '
        (scan_literal) scan_literal:After drop space:') '
        (scan_literal) scan_literal:while loop:) 
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
        (op_stack_print) 
------------------
        (op_stack_print) 
Operator Stack     (4)

        (op_stack_print) 
000: PRINT type:17
        (op_stack_print) 
001: ( type:16
        (op_stack_print) 
002: CHR$ type:2
        (op_stack_print) 
003: ( type:16
        (op_stack_print) 
------------------

(  output_sub_end)
        (token_is_function) 
token_is_function:
        (token_is_function) 
token_is_function:( is not function
(  output_sub_end)
        (scan_literal) scan_literal:ret1
   Frst:0 T:')' exptype:U
Pop 4
Pop '('
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (3)

       (op_stack_print) 
000: PRINT type:17
       (op_stack_print) 
001: ( type:16
       (op_stack_print) 
002: CHR$ type:2
       (op_stack_print) 
------------------

(  output_sub_end)
       (token_is_function) 
token_is_function:
       (token_is_function) CHR$ is function
Pop 5
Pop 'CHR$'
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (2)

       (op_stack_print) 
000: PRINT type:17
       (op_stack_print) 
001: ( type:16
       (op_stack_print) 
------------------

( output_function) [U,(U U )] s s CHR$
(  output_sub_end)
       (scan_sub_expr) scan_sub_expr:ret1
      (scan_expression) n commas now:0

       (check_eitem) check_eitem: ' '

        (check_operator) check_operator:  

         (check_literal) check_literal:lit=' ,' idx=30 ''
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:',' idx=30 ''
         (check_literal) check_literal  ret0 Empty test string
        (check_operator) ret0:is comma: 0

        (check_function) check_function: ''
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=29 ' '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=30 ''
         (check_literal) check_literal  ret0 Empty test string

         (check_literal) check_literal:lit=' "' idx=29 ' '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=30 ''
         (check_literal) check_literal  ret0 Empty test string

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: ''
          (check_integer) check_integer:ret0
         (check_number) check_number: ret0

         (check_variable) check_variable:

          (check_vname) check_vname '':
          (check_vname) check_vname ret0 '':
         (check_variable) check_variable:ret0 
        (check_atom) check_atom:ret1

        (check_sub_expr) check_sub_expr:

         (check_literal) check_literal:lit=' (' idx=29 ' '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'(' idx=30 ''
         (check_literal) check_literal  ret0 Empty test string
        (check_sub_expr) check_sub_expr: ret0
       (check_eitem) check_eitem:ret0
      (scan_expression) scan_expression: ret1 ' ' commas:0
     (scan_command) scan_command: ret1 =>'PRINT'
    (scan_command) 
ENDEXP
   Frst:0 T:')' exptype:U
Pop 4
Pop '('
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (1)

    (op_stack_print) 
000: PRINT type:17
    (op_stack_print) 
------------------

(  output_sub_end)
    (token_is_function) 
token_is_function:
    (token_is_function) PRINT is function
Pop 5
Pop 'PRINT'
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (0)

    (op_stack_print) 
------------------

( output_function) [U,(U )] v v PRINT
(  output_sub_end)
Finalise stack
    (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '158' nidx:28  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     s rq:s 'CHR$' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
 BE:

Type Check Stack (0)

 BE:

Type Check Stack (0)

 BE:

Type Check Stack (0)

 BE:158
type_check_stack_push: '158'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (1)

    (type_check_stack_print) 
000: '158' type:0
    (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '158' type:i (0)
 BE:

Type Check Stack (1)

000: '158' type:i (0)
 BE:

Type Check Stack (1)

000: '158' type:i (0)
 BE:

Type Check Stack (1)

000: '158' type:i (0)
 BE:CHR$
FN: 1 args
    (function_return_type) 
function_return_type: 'CHR$' =>s
    (function_return_type) 
function_return_type: 'CHR$' =>2
ret_type;2 s
typecheck_expression:Ret type of CHR$ : s
type_check_stack_pop: '158'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (0)

    (type_check_stack_print) 
------------------

FN ARG 0 ri 158 0(i)  Arg ok
type_check_stack_push: '000'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (1)

    (type_check_stack_print) 
000: '000' type:2
    (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:s (2)
 BE:

Type Check Stack (1)

000: '000' type:s (2)
 BE:

Type Check Stack (1)

000: '000' type:s (2)
 BE:PRINT
FN: 1 args
    (function_return_type) 
function_return_type: 'PRINT' =>v
    (function_return_type) 
function_return_type: 'PRINT' =>17
ret_type;17 v
typecheck_expression:Ret type of PRINT : v
type_check_stack_pop: '000'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (0)

    (type_check_stack_print) 
------------------

FN ARG 0 ri 000 2(s)  Arg not OK
type_check_stack_push: '000'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (1)

    (type_check_stack_print) 
000: '000' type:17
    (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '158' nidx:28  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     s rq:s 'CHR$' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_INTEGER      i rq:i '158'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_FUNCTION     s rq:s 'CHR$'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
(dump_exp_buffer2) N12 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
    (process_expression_types) 
==INFIX==

infix_stack_push: '158'
infix_stack_pop: '158'
infix_stack_push: 'CHR$(158 )'
infix_stack_pop: 'CHR$(158 )'
infix_stack_push: 'PRINT(CHR$(158 ) )'
infix_stack_pop: 'PRINT(CHR$(158 ) )'
    (process_expression_types) ==PRINT(CHR$(158 ) )==
    (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N4 EXP_BUFF_ID_INTEGER      i rq:i 158  0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N8 EXP_BUFF_ID_FUNCTION     s rq:s CHR$  0:
(    output_qcode) N9 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N10 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N11 EXP_BUFF_ID_FUNCTION     v rq:v PRINT  0:
(    output_qcode) N12 EXP_BUFF_ID_SUB_END      U rq:i   0:

     (check_literal) check_literal:lit=':' idx=30 ''
     (check_literal) check_literal:After drop space:':' idx=30 ''
     (check_literal) check_literal  ret0 Empty test string
    (translate_file) 
cline scanned OK
*****************************************
**    y%=y%-1 :AT x%,y% :PRINT CHR$(7) **
*****************************************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'y%=y%-1 :AT x%,y% :PRINT CHR$(7) ':
     (check_vname) check_vname ret1 '%=y%-1 :AT x%,y% :PRINT CHR$(7) ':
    (check_variable) check_variable: '%=y%-1 :AT x%,y% :PRINT CHR$(7) '
    (check_variable) check_variable: Ary test '=y%-1 :AT x%,y% :PRINT CHR$(7) '

     (check_literal) check_literal:lit='(' idx=6 '=y%-1 :AT x%,y% :PRINT CHR$(7) '
     (check_literal) check_literal:After drop space:'(' idx=6 '=y%-1 :AT x%,y% :PRINT CHR$(7) '
     (check_literal)   '(' != '='
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=6 '=y%-1 :AT x%,y% :PRINT CHR$(7) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=6 '=y%-1 :AT x%,y% :PRINT CHR$(7) '
   (check_literal) check_literal:After while():y%-1 :AT x%,y% :PRINT CHR$(7) 
   (check_literal) check_literal:ret1 

   (check_expression) check_expression: 'y%-1 :AT x%,y% :PRINT CHR$(7) '

    (check_eitem) check_eitem: 'y%-1 :AT x%,y% :PRINT CHR$(7) '

     (check_operator) check_operator: y%-1 :AT x%,y% :PRINT CHR$(7) 

      (check_literal) check_literal:lit=' ,' idx=7 'y%-1 :AT x%,y% :PRINT CHR$(7) '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=7 'y%-1 :AT x%,y% :PRINT CHR$(7) '
      (check_literal)   ',' != 'y'
      (check_literal) check_literal: ret0
     (check_operator) ret0:is comma: 0

     (check_function) check_function: 'y%-1 :AT x%,y% :PRINT CHR$(7) '
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=7 'y%-1 :AT x%,y% :PRINT CHR$(7) '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=7 'y%-1 :AT x%,y% :PRINT CHR$(7) '
      (check_literal)   '%' != 'y'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=7 'y%-1 :AT x%,y% :PRINT CHR$(7) '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=7 'y%-1 :AT x%,y% :PRINT CHR$(7) '
      (check_literal)   '"' != 'y'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: 'y%-1 :AT x%,y% :PRINT CHR$(7) '
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname 'y%-1 :AT x%,y% :PRINT CHR$(7) ':
       (check_vname) check_vname ret1 '%-1 :AT x%,y% :PRINT CHR$(7) ':
      (check_variable) check_variable: '%-1 :AT x%,y% :PRINT CHR$(7) '
      (check_variable) check_variable: Ary test '-1 :AT x%,y% :PRINT CHR$(7) '

       (check_literal) check_literal:lit='(' idx=9 '-1 :AT x%,y% :PRINT CHR$(7) '
       (check_literal) check_literal:After drop space:'(' idx=9 '-1 :AT x%,y% :PRINT CHR$(7) '
       (check_literal)   '(' != '-'
       (check_literal) check_literal: ret0
      (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
     (check_variable) check_variable:ret1 
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: '-1 :AT x%,y% :PRINT CHR$(7) '

    (check_operator) check_operator: -1 :AT x%,y% :PRINT CHR$(7) 

     (check_literal) check_literal:lit=' ,' idx=9 '-1 :AT x%,y% :PRINT CHR$(7) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=9 '-1 :AT x%,y% :PRINT CHR$(7) '
     (check_literal)   ',' != '-'
     (check_literal) check_literal: ret0
    (check_operator) ret1:is comma: 0
   (check_eitem) check_eitem:ret1 comma:1

   (check_eitem) check_eitem: '1 :AT x%,y% :PRINT CHR$(7) '

    (check_operator) check_operator: 1 :AT x%,y% :PRINT CHR$(7) 

     (check_literal) check_literal:lit=' ,' idx=10 '1 :AT x%,y% :PRINT CHR$(7) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=10 '1 :AT x%,y% :PRINT CHR$(7) '
     (check_literal)   ',' != '1'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: '1 :AT x%,y% :PRINT CHR$(7) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=10 '1 :AT x%,y% :PRINT CHR$(7) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=10 '1 :AT x%,y% :PRINT CHR$(7) '
     (check_literal)   '%' != '1'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=10 '1 :AT x%,y% :PRINT CHR$(7) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=10 '1 :AT x%,y% :PRINT CHR$(7) '
     (check_literal)   '"' != '1'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '1 :AT x%,y% :PRINT CHR$(7) '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: ' :AT x%,y% :PRINT CHR$(7) '

    (check_operator) check_operator:  :AT x%,y% :PRINT CHR$(7) 

     (check_literal) check_literal:lit=' ,' idx=12 ':AT x%,y% :PRINT CHR$(7) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=12 ':AT x%,y% :PRINT CHR$(7) '
     (check_literal)   ',' != ':'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: ':AT x%,y% :PRINT CHR$(7) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=11 ' :AT x%,y% :PRINT CHR$(7) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=12 ':AT x%,y% :PRINT CHR$(7) '
     (check_literal)   '%' != ':'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=11 ' :AT x%,y% :PRINT CHR$(7) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=12 ':AT x%,y% :PRINT CHR$(7) '
     (check_literal)   '"' != ':'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: ':AT x%,y% :PRINT CHR$(7) '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname ':AT x%,y% :PRINT CHR$(7) ':
      (check_vname) check_vname ret0 ':AT x%,y% :PRINT CHR$(7) ':
     (check_variable) check_variable:ret0 
    (check_atom) check_atom:ret1

    (check_sub_expr) check_sub_expr:

     (check_literal) check_literal:lit=' (' idx=11 ' :AT x%,y% :PRINT CHR$(7) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'(' idx=12 ':AT x%,y% :PRINT CHR$(7) '
     (check_literal)   '(' != ':'
     (check_literal) check_literal: ret0
    (check_sub_expr) check_sub_expr: ret0
   (check_eitem) check_eitem:ret0
  (check_expression) check_expression:ret1 ' :AT x%,y% :PRINT CHR$(7) '
 (check_assignment) check_assignment:ret1
(check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=26, ' :AT x%,y% :PRINT CHR$(7) '
========================================================
    y%=y%-1 :AT x%,y% :PRINT CHR$(7) 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'y%=y%-1 :AT x%,y% :PRINT CHR$(7) ':
    (check_vname) check_vname ret1 '%=y%-1 :AT x%,y% :PRINT CHR$(7) ':
   (check_variable) check_variable: '%=y%-1 :AT x%,y% :PRINT CHR$(7) '
   (check_variable) check_variable: Ary test '=y%-1 :AT x%,y% :PRINT CHR$(7) '

    (check_literal) check_literal:lit='(' idx=6 '=y%-1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal) check_literal:After drop space:'(' idx=6 '=y%-1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal)   '(' != '='
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=6 '=y%-1 :AT x%,y% :PRINT CHR$(7) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=6 '=y%-1 :AT x%,y% :PRINT CHR$(7) '
  (check_literal) check_literal:After while():y%-1 :AT x%,y% :PRINT CHR$(7) 
  (check_literal) check_literal:ret1 

  (check_expression) check_expression: 'y%-1 :AT x%,y% :PRINT CHR$(7) '

   (check_eitem) check_eitem: 'y%-1 :AT x%,y% :PRINT CHR$(7) '

    (check_operator) check_operator: y%-1 :AT x%,y% :PRINT CHR$(7) 

     (check_literal) check_literal:lit=' ,' idx=7 'y%-1 :AT x%,y% :PRINT CHR$(7) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=7 'y%-1 :AT x%,y% :PRINT CHR$(7) '
     (check_literal)   ',' != 'y'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'y%-1 :AT x%,y% :PRINT CHR$(7) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=7 'y%-1 :AT x%,y% :PRINT CHR$(7) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=7 'y%-1 :AT x%,y% :PRINT CHR$(7) '
     (check_literal)   '%' != 'y'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=7 'y%-1 :AT x%,y% :PRINT CHR$(7) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=7 'y%-1 :AT x%,y% :PRINT CHR$(7) '
     (check_literal)   '"' != 'y'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'y%-1 :AT x%,y% :PRINT CHR$(7) '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'y%-1 :AT x%,y% :PRINT CHR$(7) ':
      (check_vname) check_vname ret1 '%-1 :AT x%,y% :PRINT CHR$(7) ':
     (check_variable) check_variable: '%-1 :AT x%,y% :PRINT CHR$(7) '
     (check_variable) check_variable: Ary test '-1 :AT x%,y% :PRINT CHR$(7) '

      (check_literal) check_literal:lit='(' idx=9 '-1 :AT x%,y% :PRINT CHR$(7) '
      (check_literal) check_literal:After drop space:'(' idx=9 '-1 :AT x%,y% :PRINT CHR$(7) '
      (check_literal)   '(' != '-'
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (check_eitem) check_eitem: '-1 :AT x%,y% :PRINT CHR$(7) '

   (check_operator) check_operator: -1 :AT x%,y% :PRINT CHR$(7) 

    (check_literal) check_literal:lit=' ,' idx=9 '-1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=9 '-1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal)   ',' != '-'
    (check_literal) check_literal: ret0
   (check_operator) ret1:is comma: 0
  (check_eitem) check_eitem:ret1 comma:1

  (check_eitem) check_eitem: '1 :AT x%,y% :PRINT CHR$(7) '

   (check_operator) check_operator: 1 :AT x%,y% :PRINT CHR$(7) 

    (check_literal) check_literal:lit=' ,' idx=10 '1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=10 '1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal)   ',' != '1'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: '1 :AT x%,y% :PRINT CHR$(7) '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=10 '1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=10 '1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=10 '1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=10 '1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '1 :AT x%,y% :PRINT CHR$(7) '
     (check_integer) check_integer:ret1
    (check_number) check_number: ret1
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (check_eitem) check_eitem: ' :AT x%,y% :PRINT CHR$(7) '

   (check_operator) check_operator:  :AT x%,y% :PRINT CHR$(7) 

    (check_literal) check_literal:lit=' ,' idx=12 ':AT x%,y% :PRINT CHR$(7) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=12 ':AT x%,y% :PRINT CHR$(7) '
    (check_literal)   ',' != ':'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: ':AT x%,y% :PRINT CHR$(7) '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=11 ' :AT x%,y% :PRINT CHR$(7) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=12 ':AT x%,y% :PRINT CHR$(7) '
    (check_literal)   '%' != ':'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=11 ' :AT x%,y% :PRINT CHR$(7) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=12 ':AT x%,y% :PRINT CHR$(7) '
    (check_literal)   '"' != ':'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: ':AT x%,y% :PRINT CHR$(7) '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname ':AT x%,y% :PRINT CHR$(7) ':
     (check_vname) check_vname ret0 ':AT x%,y% :PRINT CHR$(7) ':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret1

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=11 ' :AT x%,y% :PRINT CHR$(7) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=12 ':AT x%,y% :PRINT CHR$(7) '
    (check_literal)   '(' != ':'
    (check_literal) check_literal: ret0
   (check_sub_expr) check_sub_expr: ret0
  (check_eitem) check_eitem:ret0
 (check_expression) check_expression:ret1 ' :AT x%,y% :PRINT CHR$(7) '
(check_assignment) check_assignment:ret1

 (scan_assignment) scan_assignment:

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'y%=y%-1 :AT x%,y% :PRINT CHR$(7) '
   (scan_vname) scan_vname: ret1 'y'
  (scan_variable) scan_variable: '%=y%-1 :AT x%,y% :PRINT CHR$(7) ' vname='y'
  (scan_variable) scan_variable: Ary test '=y%-1 :AT x%,y% :PRINT CHR$(7) '

   (check_literal) check_literal:lit='(' idx=6 '=y%-1 :AT x%,y% :PRINT CHR$(7) '
   (check_literal) check_literal:After drop space:'(' idx=6 '=y%-1 :AT x%,y% :PRINT CHR$(7) '
   (check_literal)   '(' != '='
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='y%' is str:0 int:1 flt:0 ary:0
   Frst:1 T:'y%' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:y% is not function
token_is_variable: tok:'y%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:y% is not function
 (init_get_name) 
init_get_name:'y%'
 (init_get_name) 
init_get_name:'y%'
 (get_name) 
get_name:gn:'y%'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] i i y%
 (print_var_info) 
VAR INFO: '                y%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0

  (scan_assignment_equals) scan_assignment_equals:lit=' =' '=y%-1 :AT x%,y% :PRINT CHR$(7) '
  (scan_assignment_equals) scan_assignment_equals:After drop space:'=y%-1 :AT x%,y% :PRINT CHR$(7) '
  (scan_assignment_equals) scan_assignment_equals:while loop:=y%-1 :AT x%,y% :PRINT CHR$(7) 
   Frst:0 T:':=' exptype:i
  (operator_precedence) 
:= is operator
':=' is operator
  (process_token) 
Token is operator o1 name::= o2 name:
  (process_token) 
opr1:1 opr2:0
Push 1
 Push:':='
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (1)

  (op_stack_print) 
000: := type:0
  (op_stack_print) 
------------------

  (scan_assignment_equals) scan_assignment_equals:ret1

  (scan_expression) scan_expression: 'y%-1 :AT x%,y% :PRINT CHR$(7) '

   (check_eitem) check_eitem: 'y%-1 :AT x%,y% :PRINT CHR$(7) '

    (check_operator) check_operator: y%-1 :AT x%,y% :PRINT CHR$(7) 

     (check_literal) check_literal:lit=' ,' idx=7 'y%-1 :AT x%,y% :PRINT CHR$(7) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=7 'y%-1 :AT x%,y% :PRINT CHR$(7) '
     (check_literal)   ',' != 'y'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'y%-1 :AT x%,y% :PRINT CHR$(7) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=7 'y%-1 :AT x%,y% :PRINT CHR$(7) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=7 'y%-1 :AT x%,y% :PRINT CHR$(7) '
     (check_literal)   '%' != 'y'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=7 'y%-1 :AT x%,y% :PRINT CHR$(7) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=7 'y%-1 :AT x%,y% :PRINT CHR$(7) '
     (check_literal)   '"' != 'y'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'y%-1 :AT x%,y% :PRINT CHR$(7) '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'y%-1 :AT x%,y% :PRINT CHR$(7) ':
      (check_vname) check_vname ret1 '%-1 :AT x%,y% :PRINT CHR$(7) ':
     (check_variable) check_variable: '%-1 :AT x%,y% :PRINT CHR$(7) '
     (check_variable) check_variable: Ary test '-1 :AT x%,y% :PRINT CHR$(7) '

      (check_literal) check_literal:lit='(' idx=9 '-1 :AT x%,y% :PRINT CHR$(7) '
      (check_literal) check_literal:After drop space:'(' idx=9 '-1 :AT x%,y% :PRINT CHR$(7) '
      (check_literal)   '(' != '-'
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator: y%-1 :AT x%,y% :PRINT CHR$(7) 

    (check_literal) check_literal:lit=' ,' idx=7 'y%-1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=7 'y%-1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal)   ',' != 'y'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'y%-1 :AT x%,y% :PRINT CHR$(7) '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=7 'y%-1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=7 'y%-1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal)   '%' != 'y'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=7 'y%-1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=7 'y%-1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal)   '"' != 'y'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'y%-1 :AT x%,y% :PRINT CHR$(7) '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'y%-1 :AT x%,y% :PRINT CHR$(7) ':
     (check_vname) check_vname ret1 '%-1 :AT x%,y% :PRINT CHR$(7) ':
    (check_variable) check_variable: '%-1 :AT x%,y% :PRINT CHR$(7) '
    (check_variable) check_variable: Ary test '-1 :AT x%,y% :PRINT CHR$(7) '

     (check_literal) check_literal:lit='(' idx=9 '-1 :AT x%,y% :PRINT CHR$(7) '
     (check_literal) check_literal:After drop space:'(' idx=9 '-1 :AT x%,y% :PRINT CHR$(7) '
     (check_literal)   '(' != '-'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1

  (scan_atom) scan_atom:

   (check_literal) check_literal:lit=' %' idx=7 'y%-1 :AT x%,y% :PRINT CHR$(7) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=7 'y%-1 :AT x%,y% :PRINT CHR$(7) '
   (check_literal)   '%' != 'y'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=7 'y%-1 :AT x%,y% :PRINT CHR$(7) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=7 'y%-1 :AT x%,y% :PRINT CHR$(7) '
   (check_literal)   '"' != 'y'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'y%-1 :AT x%,y% :PRINT CHR$(7) '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'y%-1 :AT x%,y% :PRINT CHR$(7) ':
    (check_vname) check_vname ret1 '%-1 :AT x%,y% :PRINT CHR$(7) ':
   (check_variable) check_variable: '%-1 :AT x%,y% :PRINT CHR$(7) '
   (check_variable) check_variable: Ary test '-1 :AT x%,y% :PRINT CHR$(7) '

    (check_literal) check_literal:lit='(' idx=9 '-1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal) check_literal:After drop space:'(' idx=9 '-1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal)   '(' != '-'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'y%-1 :AT x%,y% :PRINT CHR$(7) '
   (scan_vname) scan_vname: ret1 'y'
  (scan_variable) scan_variable: '%-1 :AT x%,y% :PRINT CHR$(7) ' vname='y'
  (scan_variable) scan_variable: Ary test '-1 :AT x%,y% :PRINT CHR$(7) '

   (check_literal) check_literal:lit='(' idx=9 '-1 :AT x%,y% :PRINT CHR$(7) '
   (check_literal) check_literal:After drop space:'(' idx=9 '-1 :AT x%,y% :PRINT CHR$(7) '
   (check_literal)   '(' != '-'
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='y%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'y%' exptype:i
 (operator_precedence) 
:= is operator
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:y% is not function
token_is_variable: tok:'y%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:y% is not function
 (init_get_name) 
init_get_name:'y%'
 (init_get_name) 
init_get_name:'y%'
 (get_name) 
get_name:gn:'y%'
process_token:type:i req_type:i
modify_expression_type:Inittype:i Intype:i Outtype:i
( output_variable) [i,()] i i y%
 (print_var_info) 
VAR INFO: '                y%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
 (scan_atom) scan_atom:ret1
(scan_expression) n commas now:0

 (check_eitem) check_eitem: '-1 :AT x%,y% :PRINT CHR$(7) '

  (check_operator) check_operator: -1 :AT x%,y% :PRINT CHR$(7) 

   (check_literal) check_literal:lit=' ,' idx=9 '-1 :AT x%,y% :PRINT CHR$(7) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=9 '-1 :AT x%,y% :PRINT CHR$(7) '
   (check_literal)   ',' != '-'
   (check_literal) check_literal: ret0
  (check_operator) ret1:is comma: 0
 (check_eitem) check_eitem:ret1 comma:1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: -1 :AT x%,y% :PRINT CHR$(7) 

   (check_literal) check_literal:lit=' ,' idx=9 '-1 :AT x%,y% :PRINT CHR$(7) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=9 '-1 :AT x%,y% :PRINT CHR$(7) '
   (check_literal)   ',' != '-'
   (check_literal) check_literal: ret0
  (check_operator) ret1:is comma: 0

  (scan_operator) scan_operator: '-1 :AT x%,y% :PRINT CHR$(7) '

   (check_literal) check_literal:lit=' ,' idx=9 '-1 :AT x%,y% :PRINT CHR$(7) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=9 '-1 :AT x%,y% :PRINT CHR$(7) '
   (check_literal)   ',' != '-'
   (check_literal) check_literal: ret0
  (scan_operator) scan_operator: ret1 '1 :AT x%,y% :PRINT CHR$(7) '
   Frst:0 T:'-' exptype:i
 (operator_precedence) 
- is operator
 (operator_precedence) 
:= is operator
'-' is operator
 (process_token) 
Token is operator o1 name:- o2 name::=
 (process_token) 
opr1:3 opr2:1
 (operator_precedence) 
:= is operator
 (operator_precedence) 
:= is operator
Push 1
 Push:'-'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: := type:0
 (op_stack_print) 
001: - type:0
 (op_stack_print) 
------------------

 (scan_eitem) Is comma;0
 (scan_expression) n commas now:0

  (check_eitem) check_eitem: '1 :AT x%,y% :PRINT CHR$(7) '

   (check_operator) check_operator: 1 :AT x%,y% :PRINT CHR$(7) 

    (check_literal) check_literal:lit=' ,' idx=10 '1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=10 '1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal)   ',' != '1'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: '1 :AT x%,y% :PRINT CHR$(7) '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=10 '1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=10 '1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=10 '1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=10 '1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '1 :AT x%,y% :PRINT CHR$(7) '
     (check_integer) check_integer:ret1
    (check_number) check_number: ret1
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator: 1 :AT x%,y% :PRINT CHR$(7) 

    (check_literal) check_literal:lit=' ,' idx=10 '1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=10 '1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal)   ',' != '1'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: '1 :AT x%,y% :PRINT CHR$(7) '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=10 '1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=10 '1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=10 '1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=10 '1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '1 :AT x%,y% :PRINT CHR$(7) '
     (check_integer) check_integer:ret1
    (check_number) check_number: ret1
   (check_atom) check_atom:ret1

   (scan_atom) scan_atom:

    (check_literal) check_literal:lit=' %' idx=10 '1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=10 '1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=10 '1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=10 '1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '1 :AT x%,y% :PRINT CHR$(7) '
     (check_integer) check_integer:ret1
    (check_number) check_number: ret1

    (scan_number) scan_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '1 :AT x%,y% :PRINT CHR$(7) '
     (check_integer) check_integer:ret1

     (scan_integer) scan_integer:
     (scan_integer) scan_integer:ret1
   Frst:0 T:'1' exptype:i
    (operator_precedence) 
- is operator
modify_expression_type:Inittype:i Intype:i Outtype:i
(  output_integer) [i,()] i i 1
    (scan_integer) scan_integer:ret1  1
   (scan_atom) scan_atom:ret1
  (scan_expression) n commas now:0

   (check_eitem) check_eitem: ' :AT x%,y% :PRINT CHR$(7) '

    (check_operator) check_operator:  :AT x%,y% :PRINT CHR$(7) 

     (check_literal) check_literal:lit=' ,' idx=12 ':AT x%,y% :PRINT CHR$(7) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=12 ':AT x%,y% :PRINT CHR$(7) '
     (check_literal)   ',' != ':'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: ':AT x%,y% :PRINT CHR$(7) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=11 ' :AT x%,y% :PRINT CHR$(7) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=12 ':AT x%,y% :PRINT CHR$(7) '
     (check_literal)   '%' != ':'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=11 ' :AT x%,y% :PRINT CHR$(7) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=12 ':AT x%,y% :PRINT CHR$(7) '
     (check_literal)   '"' != ':'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: ':AT x%,y% :PRINT CHR$(7) '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname ':AT x%,y% :PRINT CHR$(7) ':
      (check_vname) check_vname ret0 ':AT x%,y% :PRINT CHR$(7) ':
     (check_variable) check_variable:ret0 
    (check_atom) check_atom:ret1

    (check_sub_expr) check_sub_expr:

     (check_literal) check_literal:lit=' (' idx=11 ' :AT x%,y% :PRINT CHR$(7) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'(' idx=12 ':AT x%,y% :PRINT CHR$(7) '
     (check_literal)   '(' != ':'
     (check_literal) check_literal: ret0
    (check_sub_expr) check_sub_expr: ret0
   (check_eitem) check_eitem:ret0
  (scan_expression) scan_expression: ret1 ' :AT x%,y% :PRINT CHR$(7) ' commas:0
 (scan_assignment) scan_assignment: ret1
Finalise stack
Pop '-'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: := type:0
(op_stack_print) 
------------------

( output_operator) [i,()] i i -
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:- is not function
Pop ':='
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_operator) [i,()] i i :=
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function::= is not function
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'y%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'y%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '1' nidx:11  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '-' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i ':=' nidx:0  0:
=================
 BE:y%
type_check_stack_push: 'y%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'y%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'y%' type:i (0)
 BE:y%
type_check_stack_push: 'y%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'y%' type:0
(type_check_stack_print) 
001: 'y%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'y%' type:i (0)
001: 'y%' type:i (0)
 BE:1
type_check_stack_push: '1'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (3)

(type_check_stack_print) 
000: 'y%' type:0
(type_check_stack_print) 
001: 'y%' type:0
(type_check_stack_print) 
002: '1' type:0
(type_check_stack_print) 
------------------


Type Check Stack (3)

000: 'y%' type:i (0)
001: 'y%' type:i (0)
002: '1' type:i (0)
 BE:-
BUFF_ID_OPERATOR
Found operator -
type_check_stack_pop: '1'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'y%' type:0
(type_check_stack_print) 
001: 'y%' type:0
(type_check_stack_print) 
------------------

type_check_stack_pop: 'y%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'y%' type:0
(type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'y%' type:0
(type_check_stack_print) 
001: '000' type:0
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'y%' type:i (0)
001: '000' type:i (0)
 BE::=
BUFF_ID_OPERATOR
Found operator :=
type_check_stack_pop: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'y%' type:0
(type_check_stack_print) 
------------------

type_check_stack_pop: 'y%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (0)

(type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'y%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'y%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '1' nidx:11  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '-' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i ':=' nidx:0  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i 'y%'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'y%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_INTEGER      i rq:i '1'  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_OPERATOR     i rq:i '-'  2: 3 2
(dump_exp_buffer2) N5 EXP_BUFF_ID_OPERATOR     i rq:i ':='  2: 4 1
=================
(process_expression_types) 
==INFIX==

Var: y% ary:0 NumIdx:0
infix_stack_push: 'y%'
Var: y% ary:0 NumIdx:0
infix_stack_push: 'y%'
infix_stack_push: '1'
infix_stack_pop: '1'
infix_stack_pop: 'y%'
infix_stack_push: '(y% - 1)'
infix_stack_pop: '(y% - 1)'
infix_stack_pop: 'y%'
infix_stack_push: '(y% := (y% - 1))'
infix_stack_pop: '(y% := (y% - 1))'
(process_expression_types) ==(y% := (y% - 1))==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i y%  0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     i rq:i y%  0:
(    output_qcode) N3 EXP_BUFF_ID_INTEGER      i rq:i 1  0:
(    output_qcode) N4 EXP_BUFF_ID_OPERATOR     i rq:i -  2: 3 2
(    output_qcode) N5 EXP_BUFF_ID_OPERATOR     i rq:i :=  2: 4 1

 (check_literal) check_literal:lit=':' idx=12 ':AT x%,y% :PRINT CHR$(7) '
 (check_literal) check_literal:After drop space:':' idx=12 ':AT x%,y% :PRINT CHR$(7) '
 (check_literal) check_literal:After while():AT x%,y% :PRINT CHR$(7) 
 (check_literal) check_literal:ret1 

 (scan_literal) scan_literal:lit=':' 'AT x%,y% :PRINT CHR$(7) '
 (scan_literal) scan_literal:After drop space:'AT x%,y% :PRINT CHR$(7) '
 (scan_literal) scan_literal:while loop:AT x%,y% :PRINT CHR$(7) 
 (scan_literal) scan_literal:ret1

 (check_line) check_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'AT x%,y% :PRINT CHR$(7) ':
    (check_vname) check_vname ret1 ' x%,y% :PRINT CHR$(7) ':
   (check_variable) check_variable: ' x%,y% :PRINT CHR$(7) '
   (check_variable) check_variable: Ary test ' x%,y% :PRINT CHR$(7) '

    (check_literal) check_literal:lit='(' idx=15 ' x%,y% :PRINT CHR$(7) '
    (check_literal) check_literal:After drop space:'(' idx=15 ' x%,y% :PRINT CHR$(7) '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=15 ' x%,y% :PRINT CHR$(7) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=16 'x%,y% :PRINT CHR$(7) '
  (check_literal)   '=' != 'x'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'AT x%,y% :PRINT CHR$(7) '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'AT'
(check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=22, ' x%,y% :PRINT CHR$(7) '
========================================================
    y%=y%-1 :AT x%,y% :PRINT CHR$(7) 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'AT x%,y% :PRINT CHR$(7) ':
    (check_vname) check_vname ret1 ' x%,y% :PRINT CHR$(7) ':
   (check_variable) check_variable: ' x%,y% :PRINT CHR$(7) '
   (check_variable) check_variable: Ary test ' x%,y% :PRINT CHR$(7) '

    (check_literal) check_literal:lit='(' idx=15 ' x%,y% :PRINT CHR$(7) '
    (check_literal) check_literal:After drop space:'(' idx=15 ' x%,y% :PRINT CHR$(7) '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=15 ' x%,y% :PRINT CHR$(7) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=16 'x%,y% :PRINT CHR$(7) '
  (check_literal)   '=' != 'x'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'AT x%,y% :PRINT CHR$(7) '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'AT'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'AT' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) AT is function
 (function_return_type) 
function_return_type: 'AT' =>v
 (function_return_type) 
function_return_type: 'AT' =>17
process_token: 'AT' t=>v
 Push:'AT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: AT type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: AT type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' x%,y% :PRINT CHR$(7) '

   (check_eitem) check_eitem: 'x%,y% :PRINT CHR$(7) '

    (check_operator) check_operator: x%,y% :PRINT CHR$(7) 

     (check_literal) check_literal:lit=' ,' idx=16 'x%,y% :PRINT CHR$(7) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=16 'x%,y% :PRINT CHR$(7) '
     (check_literal)   ',' != 'x'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'x%,y% :PRINT CHR$(7) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=16 'x%,y% :PRINT CHR$(7) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=16 'x%,y% :PRINT CHR$(7) '
     (check_literal)   '%' != 'x'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=16 'x%,y% :PRINT CHR$(7) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=16 'x%,y% :PRINT CHR$(7) '
     (check_literal)   '"' != 'x'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'x%,y% :PRINT CHR$(7) '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'x%,y% :PRINT CHR$(7) ':
      (check_vname) check_vname ret1 '%,y% :PRINT CHR$(7) ':
     (check_variable) check_variable: '%,y% :PRINT CHR$(7) '
     (check_variable) check_variable: Ary test ',y% :PRINT CHR$(7) '

      (check_literal) check_literal:lit='(' idx=18 ',y% :PRINT CHR$(7) '
      (check_literal) check_literal:After drop space:'(' idx=18 ',y% :PRINT CHR$(7) '
      (check_literal)   '(' != ','
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator: x%,y% :PRINT CHR$(7) 

    (check_literal) check_literal:lit=' ,' idx=16 'x%,y% :PRINT CHR$(7) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=16 'x%,y% :PRINT CHR$(7) '
    (check_literal)   ',' != 'x'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'x%,y% :PRINT CHR$(7) '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=16 'x%,y% :PRINT CHR$(7) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=16 'x%,y% :PRINT CHR$(7) '
    (check_literal)   '%' != 'x'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=16 'x%,y% :PRINT CHR$(7) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=16 'x%,y% :PRINT CHR$(7) '
    (check_literal)   '"' != 'x'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'x%,y% :PRINT CHR$(7) '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'x%,y% :PRINT CHR$(7) ':
     (check_vname) check_vname ret1 '%,y% :PRINT CHR$(7) ':
    (check_variable) check_variable: '%,y% :PRINT CHR$(7) '
    (check_variable) check_variable: Ary test ',y% :PRINT CHR$(7) '

     (check_literal) check_literal:lit='(' idx=18 ',y% :PRINT CHR$(7) '
     (check_literal) check_literal:After drop space:'(' idx=18 ',y% :PRINT CHR$(7) '
     (check_literal)   '(' != ','
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1

  (scan_atom) scan_atom:

   (check_literal) check_literal:lit=' %' idx=16 'x%,y% :PRINT CHR$(7) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=16 'x%,y% :PRINT CHR$(7) '
   (check_literal)   '%' != 'x'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=16 'x%,y% :PRINT CHR$(7) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=16 'x%,y% :PRINT CHR$(7) '
   (check_literal)   '"' != 'x'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'x%,y% :PRINT CHR$(7) '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'x%,y% :PRINT CHR$(7) ':
    (check_vname) check_vname ret1 '%,y% :PRINT CHR$(7) ':
   (check_variable) check_variable: '%,y% :PRINT CHR$(7) '
   (check_variable) check_variable: Ary test ',y% :PRINT CHR$(7) '

    (check_literal) check_literal:lit='(' idx=18 ',y% :PRINT CHR$(7) '
    (check_literal) check_literal:After drop space:'(' idx=18 ',y% :PRINT CHR$(7) '
    (check_literal)   '(' != ','
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'x%,y% :PRINT CHR$(7) '
   (scan_vname) scan_vname: ret1 'x'
  (scan_variable) scan_variable: '%,y% :PRINT CHR$(7) ' vname='x'
  (scan_variable) scan_variable: Ary test ',y% :PRINT CHR$(7) '

   (check_literal) check_literal:lit='(' idx=18 ',y% :PRINT CHR$(7) '
   (check_literal) check_literal:After drop space:'(' idx=18 ',y% :PRINT CHR$(7) '
   (check_literal)   '(' != ','
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='x%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'x%' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:x% is not function
token_is_variable: tok:'x%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:x% is not function
 (init_get_name) 
init_get_name:'x%'
 (init_get_name) 
init_get_name:'x%'
 (get_name) 
get_name:gn:'x%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,(U )] i i x%
 (print_var_info) 
VAR INFO: '                x%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
 (scan_atom) scan_atom:ret1
(scan_expression) n commas now:0

 (check_eitem) check_eitem: ',y% :PRINT CHR$(7) '

  (check_operator) check_operator: ,y% :PRINT CHR$(7) 

   (check_literal) check_literal:lit=' ,' idx=18 ',y% :PRINT CHR$(7) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=18 ',y% :PRINT CHR$(7) '
   (check_literal) check_literal:After while():y% :PRINT CHR$(7) 
   (check_literal) check_literal:ret1 
  (check_operator) ret1:is comma: 0
 (check_eitem) check_eitem:ret1 comma:1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: ,y% :PRINT CHR$(7) 

   (check_literal) check_literal:lit=' ,' idx=18 ',y% :PRINT CHR$(7) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=18 ',y% :PRINT CHR$(7) '
   (check_literal) check_literal:After while():y% :PRINT CHR$(7) 
   (check_literal) check_literal:ret1 
  (check_operator) ret1:is comma: 0

  (scan_operator) scan_operator: ',y% :PRINT CHR$(7) '

   (check_literal) check_literal:lit=' ,' idx=18 ',y% :PRINT CHR$(7) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=18 ',y% :PRINT CHR$(7) '
   (check_literal) check_literal:After while():y% :PRINT CHR$(7) 
   (check_literal) check_literal:ret1 

   (scan_literal) scan_literal:lit=' ,' ',y% :PRINT CHR$(7) '
   (scan_literal) scan_literal:After drop space:',y% :PRINT CHR$(7) '
   (scan_literal) scan_literal:while loop:,y% :PRINT CHR$(7) 
   Frst:0 T:',' exptype:i
(output_sub_start)
   (scan_literal) scan_literal:ret1
  (scan_operator) ret1:is comma: 1
 (scan_eitem) Is comma;1
 (scan_expression) n commas now:1

  (check_eitem) check_eitem: 'y% :PRINT CHR$(7) '

   (check_operator) check_operator: y% :PRINT CHR$(7) 

    (check_literal) check_literal:lit=' ,' idx=19 'y% :PRINT CHR$(7) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=19 'y% :PRINT CHR$(7) '
    (check_literal)   ',' != 'y'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'y% :PRINT CHR$(7) '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=19 'y% :PRINT CHR$(7) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=19 'y% :PRINT CHR$(7) '
    (check_literal)   '%' != 'y'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=19 'y% :PRINT CHR$(7) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=19 'y% :PRINT CHR$(7) '
    (check_literal)   '"' != 'y'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'y% :PRINT CHR$(7) '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'y% :PRINT CHR$(7) ':
     (check_vname) check_vname ret1 '% :PRINT CHR$(7) ':
    (check_variable) check_variable: '% :PRINT CHR$(7) '
    (check_variable) check_variable: Ary test ' :PRINT CHR$(7) '

     (check_literal) check_literal:lit='(' idx=21 ' :PRINT CHR$(7) '
     (check_literal) check_literal:After drop space:'(' idx=21 ' :PRINT CHR$(7) '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1
 (check_eitem) check_eitem:ret1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: y% :PRINT CHR$(7) 

   (check_literal) check_literal:lit=' ,' idx=19 'y% :PRINT CHR$(7) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=19 'y% :PRINT CHR$(7) '
   (check_literal)   ',' != 'y'
   (check_literal) check_literal: ret0
  (check_operator) ret0:is comma: 0

  (check_function) check_function: 'y% :PRINT CHR$(7) '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=19 'y% :PRINT CHR$(7) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=19 'y% :PRINT CHR$(7) '
   (check_literal)   '%' != 'y'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=19 'y% :PRINT CHR$(7) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=19 'y% :PRINT CHR$(7) '
   (check_literal)   '"' != 'y'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'y% :PRINT CHR$(7) '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'y% :PRINT CHR$(7) ':
    (check_vname) check_vname ret1 '% :PRINT CHR$(7) ':
   (check_variable) check_variable: '% :PRINT CHR$(7) '
   (check_variable) check_variable: Ary test ' :PRINT CHR$(7) '

    (check_literal) check_literal:lit='(' idx=21 ' :PRINT CHR$(7) '
    (check_literal) check_literal:After drop space:'(' idx=21 ' :PRINT CHR$(7) '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) check_atom:ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=19 'y% :PRINT CHR$(7) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=19 'y% :PRINT CHR$(7) '
  (check_literal)   '%' != 'y'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=19 'y% :PRINT CHR$(7) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=19 'y% :PRINT CHR$(7) '
  (check_literal)   '"' != 'y'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) check_float: ret0

   (check_integer) check_integer: 'y% :PRINT CHR$(7) '
   (check_integer) check_integer:ret0
  (check_number) check_number: ret0

  (check_variable) check_variable:

   (check_vname) check_vname 'y% :PRINT CHR$(7) ':
   (check_vname) check_vname ret1 '% :PRINT CHR$(7) ':
  (check_variable) check_variable: '% :PRINT CHR$(7) '
  (check_variable) check_variable: Ary test ' :PRINT CHR$(7) '

   (check_literal) check_literal:lit='(' idx=21 ' :PRINT CHR$(7) '
   (check_literal) check_literal:After drop space:'(' idx=21 ' :PRINT CHR$(7) '
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) scan_variable:

  (scan_vname) scan_vname: 'y% :PRINT CHR$(7) '
  (scan_vname) scan_vname: ret1 'y'
 (scan_variable) scan_variable: '% :PRINT CHR$(7) ' vname='y'
 (scan_variable) scan_variable: Ary test ' :PRINT CHR$(7) '

  (check_literal) check_literal:lit='(' idx=21 ' :PRINT CHR$(7) '
  (check_literal) check_literal:After drop space:'(' idx=21 ' :PRINT CHR$(7) '
  (check_literal)   '(' != ' '
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='y%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'y%' exptype:U
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:y% is not function
token_is_variable: tok:'y%'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:y% is not function
(init_get_name) 
init_get_name:'y%'
(init_get_name) 
init_get_name:'y%'
(get_name) 
get_name:gn:'y%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,(U )] i i y%
(print_var_info) 
VAR INFO: '                y%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
(scan_atom) scan_atom:ret1
(scan_expression) n commas now:1

 (check_eitem) check_eitem: ' :PRINT CHR$(7) '

  (check_operator) check_operator:  :PRINT CHR$(7) 

   (check_literal) check_literal:lit=' ,' idx=22 ':PRINT CHR$(7) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=22 ':PRINT CHR$(7) '
   (check_literal)   ',' != ':'
   (check_literal) check_literal: ret0
  (check_operator) ret0:is comma: 0

  (check_function) check_function: ':PRINT CHR$(7) '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=21 ' :PRINT CHR$(7) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=22 ':PRINT CHR$(7) '
   (check_literal)   '%' != ':'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=21 ' :PRINT CHR$(7) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=22 ':PRINT CHR$(7) '
   (check_literal)   '"' != ':'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: ':PRINT CHR$(7) '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname ':PRINT CHR$(7) ':
    (check_vname) check_vname ret0 ':PRINT CHR$(7) ':
   (check_variable) check_variable:ret0 
  (check_atom) check_atom:ret1

  (check_sub_expr) check_sub_expr:

   (check_literal) check_literal:lit=' (' idx=21 ' :PRINT CHR$(7) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'(' idx=22 ':PRINT CHR$(7) '
   (check_literal)   '(' != ':'
   (check_literal) check_literal: ret0
  (check_sub_expr) check_sub_expr: ret0
 (check_eitem) check_eitem:ret0
(scan_expression) scan_expression: ret1 ' :PRINT CHR$(7) ' commas:1
(scan_command) scan_command: ret1 =>'AT'
(scan_command) 
ENDEXP
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: AT type:17
(op_stack_print) 
------------------

(  output_sub_end)
(token_is_function) 
token_is_function:
(token_is_function) AT is function
Pop 5
Pop 'AT'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_function) [i,(U )] v v AT
(  output_sub_end)
Finalise stack
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'x%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? '' nidx:-1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'y%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'AT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
 BE:

Type Check Stack (0)

 BE:x%
type_check_stack_push: 'x%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'x%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'x%' type:i (0)
 BE:

Type Check Stack (1)

000: 'x%' type:i (0)
 BE:y%
type_check_stack_push: 'y%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'x%' type:0
(type_check_stack_print) 
001: 'y%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'x%' type:i (0)
001: 'y%' type:i (0)
 BE:

Type Check Stack (2)

000: 'x%' type:i (0)
001: 'y%' type:i (0)
 BE:AT
FN: 2 args
(function_return_type) 
function_return_type: 'AT' =>v
(function_return_type) 
function_return_type: 'AT' =>17
ret_type;17 v
typecheck_expression:Ret type of AT : v
type_check_stack_pop: 'y%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'x%' type:0
(type_check_stack_print) 
------------------

FN ARG 1 ri y% 0(i)  Arg ok
type_check_stack_pop: 'x%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (0)

(type_check_stack_print) 
------------------

FN ARG 0 ri x% 0(i)  Arg ok
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:17
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'x%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? '' nidx:-1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'y%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'AT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'x%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     i rq:i 'y%'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_FUNCTION     v rq:v 'AT'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
(process_expression_types) 
==INFIX==

Var: x% ary:0 NumIdx:0
infix_stack_push: 'x%'
Var: y% ary:0 NumIdx:0
infix_stack_push: 'y%'
infix_stack_pop: 'y%'
infix_stack_pop: 'x%'
infix_stack_push: 'AT(x% y% )'
infix_stack_pop: 'AT(x% y% )'
(process_expression_types) ==AT(x% y% )==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     i rq:i x%  0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_START    U rq:?   0:
(    output_qcode) N4 EXP_BUFF_ID_VARIABLE     i rq:i y%  0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_FUNCTION     v rq:v AT  0:
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:i   0:

 (check_literal) check_literal:lit=':' idx=22 ':PRINT CHR$(7) '
 (check_literal) check_literal:After drop space:':' idx=22 ':PRINT CHR$(7) '
 (check_literal) check_literal:After while():PRINT CHR$(7) 
 (check_literal) check_literal:ret1 

 (scan_literal) scan_literal:lit=':' 'PRINT CHR$(7) '
 (scan_literal) scan_literal:After drop space:'PRINT CHR$(7) '
 (scan_literal) scan_literal:while loop:PRINT CHR$(7) 
 (scan_literal) scan_literal:ret1

 (check_line) check_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'PRINT CHR$(7) ':
    (check_vname) check_vname ret1 ' CHR$(7) ':
   (check_variable) check_variable: ' CHR$(7) '
   (check_variable) check_variable: Ary test ' CHR$(7) '

    (check_literal) check_literal:lit='(' idx=28 ' CHR$(7) '
    (check_literal) check_literal:After drop space:'(' idx=28 ' CHR$(7) '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=28 ' CHR$(7) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=29 'CHR$(7) '
  (check_literal)   '=' != 'C'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'PRINT CHR$(7) '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'PRINT'
(check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=9, ' CHR$(7) '
========================================================
    y%=y%-1 :AT x%,y% :PRINT CHR$(7) 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'PRINT CHR$(7) ':
    (check_vname) check_vname ret1 ' CHR$(7) ':
   (check_variable) check_variable: ' CHR$(7) '
   (check_variable) check_variable: Ary test ' CHR$(7) '

    (check_literal) check_literal:lit='(' idx=28 ' CHR$(7) '
    (check_literal) check_literal:After drop space:'(' idx=28 ' CHR$(7) '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=28 ' CHR$(7) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=29 'CHR$(7) '
  (check_literal)   '=' != 'C'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'PRINT CHR$(7) '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'PRINT'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'PRINT' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) PRINT is function
 (function_return_type) 
function_return_type: 'PRINT' =>v
 (function_return_type) 
function_return_type: 'PRINT' =>17
process_token: 'PRINT' t=>v
 Push:'PRINT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' CHR$(7) '

   (check_eitem) check_eitem: 'CHR$(7) '

    (check_operator) check_operator: CHR$(7) 

     (check_literal) check_literal:lit=' ,' idx=29 'CHR$(7) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=29 'CHR$(7) '
     (check_literal)   ',' != 'C'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'CHR$(7) '
    (check_function) check_function: ret1 Found fn=>'CHR$'
   (check_eitem) check_eitem:ret1

   (scan_eitem) scan_eitem:

    (check_operator) check_operator: CHR$(7) 

     (check_literal) check_literal:lit=' ,' idx=29 'CHR$(7) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=29 'CHR$(7) '
     (check_literal)   ',' != 'C'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'CHR$(7) '
    (check_function) check_function: ret1 Found fn=>'CHR$'

    (scan_function) scan_function:
   Frst:0 T:'CHR$' exptype:U
    (token_is_function) 
token_is_function:
    (token_is_function) CHR$ is function
    (function_return_type) 
function_return_type: 'CHR$' =>s
    (function_return_type) 
function_return_type: 'CHR$' =>2
process_token: 'CHR$' t=>s
 Push:'CHR$'
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (3)

    (op_stack_print) 
000: PRINT type:17
    (op_stack_print) 
001: ( type:16
    (op_stack_print) 
002: CHR$ type:2
    (op_stack_print) 
------------------

    (scan_expression) n commas now:0

     (check_eitem) check_eitem: '(7) '

      (check_operator) check_operator: (7) 

       (check_literal) check_literal:lit=' ,' idx=33 '(7) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=33 '(7) '
       (check_literal)   ',' != '('
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: '(7) '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=33 '(7) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=33 '(7) '
       (check_literal)   '%' != '('
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=33 '(7) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=33 '(7) '
       (check_literal)   '"' != '('
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '(7) '
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname '(7) ':
        (check_vname) check_vname ret0 '(7) ':
       (check_variable) check_variable:ret0 
      (check_atom) check_atom:ret1

      (check_sub_expr) check_sub_expr:

       (check_literal) check_literal:lit=' (' idx=33 '(7) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'(' idx=33 '(7) '
       (check_literal) check_literal:After while():7) 
       (check_literal) check_literal:ret1 
      (check_sub_expr) check_sub_expr: ret1
     (check_eitem) check_eitem:ret1

     (scan_eitem) scan_eitem:

      (check_operator) check_operator: (7) 

       (check_literal) check_literal:lit=' ,' idx=33 '(7) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=33 '(7) '
       (check_literal)   ',' != '('
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: '(7) '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=33 '(7) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=33 '(7) '
       (check_literal)   '%' != '('
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=33 '(7) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=33 '(7) '
       (check_literal)   '"' != '('
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '(7) '
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname '(7) ':
        (check_vname) check_vname ret0 '(7) ':
       (check_variable) check_variable:ret0 
      (check_atom) check_atom:ret1

      (check_sub_expr) check_sub_expr:

       (check_literal) check_literal:lit=' (' idx=33 '(7) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'(' idx=33 '(7) '
       (check_literal) check_literal:After while():7) 
       (check_literal) check_literal:ret1 
      (check_sub_expr) check_sub_expr: ret1

      (scan_sub_expr) scan_sub_expr:

       (scan_literal) scan_literal:lit=' (' '(7) '
       (scan_literal) scan_literal:After drop space:'(7) '
       (scan_literal) scan_literal:while loop:(7) 
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (4)

       (op_stack_print) 
000: PRINT type:17
       (op_stack_print) 
001: ( type:16
       (op_stack_print) 
002: CHR$ type:2
       (op_stack_print) 
003: ( type:16
       (op_stack_print) 
------------------

       (scan_literal) scan_literal:ret1
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (5)

      (op_stack_print) 
000: PRINT type:17
      (op_stack_print) 
001: ( type:16
      (op_stack_print) 
002: CHR$ type:2
      (op_stack_print) 
003: ( type:16
      (op_stack_print) 
004: ( type:16
      (op_stack_print) 
------------------


       (scan_expression) scan_expression: '7) '

        (check_eitem) check_eitem: '7) '

         (check_operator) check_operator: 7) 

          (check_literal) check_literal:lit=' ,' idx=34 '7) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:',' idx=34 '7) '
          (check_literal)   ',' != '7'
          (check_literal) check_literal: ret0
         (check_operator) ret0:is comma: 0

         (check_function) check_function: '7) '
         (check_function) check_function: ret0

         (check_atom) check_atom:

          (check_literal) check_literal:lit=' %' idx=34 '7) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=34 '7) '
          (check_literal)   '%' != '7'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=34 '7) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=34 '7) '
          (check_literal)   '"' != '7'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '7) '
           (check_integer) check_integer:ret1
          (check_number) check_number: ret1
         (check_atom) check_atom:ret1
        (check_eitem) check_eitem:ret1

        (scan_eitem) scan_eitem:

         (check_operator) check_operator: 7) 

          (check_literal) check_literal:lit=' ,' idx=34 '7) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:',' idx=34 '7) '
          (check_literal)   ',' != '7'
          (check_literal) check_literal: ret0
         (check_operator) ret0:is comma: 0

         (check_function) check_function: '7) '
         (check_function) check_function: ret0

         (check_atom) check_atom:

          (check_literal) check_literal:lit=' %' idx=34 '7) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=34 '7) '
          (check_literal)   '%' != '7'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=34 '7) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=34 '7) '
          (check_literal)   '"' != '7'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '7) '
           (check_integer) check_integer:ret1
          (check_number) check_number: ret1
         (check_atom) check_atom:ret1

         (scan_atom) scan_atom:

          (check_literal) check_literal:lit=' %' idx=34 '7) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=34 '7) '
          (check_literal)   '%' != '7'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=34 '7) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=34 '7) '
          (check_literal)   '"' != '7'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '7) '
           (check_integer) check_integer:ret1
          (check_number) check_number: ret1

          (scan_number) scan_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '7) '
           (check_integer) check_integer:ret1

           (scan_integer) scan_integer:
           (scan_integer) scan_integer:ret1
   Frst:0 T:'7' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U U U )] i i 7
          (scan_integer) scan_integer:ret1  7
         (scan_atom) scan_atom:ret1
        (scan_expression) n commas now:0

         (check_eitem) check_eitem: ') '

          (check_operator) check_operator: ) 

           (check_literal) check_literal:lit=' ,' idx=35 ') '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:',' idx=35 ') '
           (check_literal)   ',' != ')'
           (check_literal) check_literal: ret0
          (check_operator) ret0:is comma: 0

          (check_function) check_function: ') '
          (check_function) check_function: ret0

          (check_atom) check_atom:

           (check_literal) check_literal:lit=' %' idx=35 ') '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'%' idx=35 ') '
           (check_literal)   '%' != ')'
           (check_literal) check_literal: ret0

           (check_literal) check_literal:lit=' "' idx=35 ') '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'"' idx=35 ') '
           (check_literal)   '"' != ')'
           (check_literal) check_literal: ret0

           (check_number) check_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret0

            (check_integer) check_integer: ') '
            (check_integer) check_integer:ret0
           (check_number) check_number: ret0

           (check_variable) check_variable:

            (check_vname) check_vname ') ':
            (check_vname) check_vname ret0 ') ':
           (check_variable) check_variable:ret0 
          (check_atom) check_atom:ret1

          (check_sub_expr) check_sub_expr:

           (check_literal) check_literal:lit=' (' idx=35 ') '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'(' idx=35 ') '
           (check_literal)   '(' != ')'
           (check_literal) check_literal: ret0
          (check_sub_expr) check_sub_expr: ret0
         (check_eitem) check_eitem:ret0
        (scan_expression) scan_expression: ret1 ') ' commas:0

        (scan_literal) scan_literal:lit=' )' ') '
        (scan_literal) scan_literal:After drop space:') '
        (scan_literal) scan_literal:while loop:) 
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
        (op_stack_print) 
------------------
        (op_stack_print) 
Operator Stack     (4)

        (op_stack_print) 
000: PRINT type:17
        (op_stack_print) 
001: ( type:16
        (op_stack_print) 
002: CHR$ type:2
        (op_stack_print) 
003: ( type:16
        (op_stack_print) 
------------------

(  output_sub_end)
        (token_is_function) 
token_is_function:
        (token_is_function) 
token_is_function:( is not function
(  output_sub_end)
        (scan_literal) scan_literal:ret1
   Frst:0 T:')' exptype:U
Pop 4
Pop '('
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (3)

       (op_stack_print) 
000: PRINT type:17
       (op_stack_print) 
001: ( type:16
       (op_stack_print) 
002: CHR$ type:2
       (op_stack_print) 
------------------

(  output_sub_end)
       (token_is_function) 
token_is_function:
       (token_is_function) CHR$ is function
Pop 5
Pop 'CHR$'
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (2)

       (op_stack_print) 
000: PRINT type:17
       (op_stack_print) 
001: ( type:16
       (op_stack_print) 
------------------

( output_function) [U,(U U )] s s CHR$
(  output_sub_end)
       (scan_sub_expr) scan_sub_expr:ret1
      (scan_expression) n commas now:0

       (check_eitem) check_eitem: ' '

        (check_operator) check_operator:  

         (check_literal) check_literal:lit=' ,' idx=37 ''
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:',' idx=37 ''
         (check_literal) check_literal  ret0 Empty test string
        (check_operator) ret0:is comma: 0

        (check_function) check_function: ''
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=36 ' '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=37 ''
         (check_literal) check_literal  ret0 Empty test string

         (check_literal) check_literal:lit=' "' idx=36 ' '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=37 ''
         (check_literal) check_literal  ret0 Empty test string

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: ''
          (check_integer) check_integer:ret0
         (check_number) check_number: ret0

         (check_variable) check_variable:

          (check_vname) check_vname '':
          (check_vname) check_vname ret0 '':
         (check_variable) check_variable:ret0 
        (check_atom) check_atom:ret1

        (check_sub_expr) check_sub_expr:

         (check_literal) check_literal:lit=' (' idx=36 ' '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'(' idx=37 ''
         (check_literal) check_literal  ret0 Empty test string
        (check_sub_expr) check_sub_expr: ret0
       (check_eitem) check_eitem:ret0
      (scan_expression) scan_expression: ret1 ' ' commas:0
     (scan_command) scan_command: ret1 =>'PRINT'
    (scan_command) 
ENDEXP
   Frst:0 T:')' exptype:U
Pop 4
Pop '('
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (1)

    (op_stack_print) 
000: PRINT type:17
    (op_stack_print) 
------------------

(  output_sub_end)
    (token_is_function) 
token_is_function:
    (token_is_function) PRINT is function
Pop 5
Pop 'PRINT'
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (0)

    (op_stack_print) 
------------------

( output_function) [U,(U )] v v PRINT
(  output_sub_end)
Finalise stack
    (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '7' nidx:35  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     s rq:s 'CHR$' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
 BE:

Type Check Stack (0)

 BE:

Type Check Stack (0)

 BE:

Type Check Stack (0)

 BE:7
type_check_stack_push: '7'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (1)

    (type_check_stack_print) 
000: '7' type:0
    (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '7' type:i (0)
 BE:

Type Check Stack (1)

000: '7' type:i (0)
 BE:

Type Check Stack (1)

000: '7' type:i (0)
 BE:

Type Check Stack (1)

000: '7' type:i (0)
 BE:CHR$
FN: 1 args
    (function_return_type) 
function_return_type: 'CHR$' =>s
    (function_return_type) 
function_return_type: 'CHR$' =>2
ret_type;2 s
typecheck_expression:Ret type of CHR$ : s
type_check_stack_pop: '7'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (0)

    (type_check_stack_print) 
------------------

FN ARG 0 ri 7 0(i)  Arg ok
type_check_stack_push: '000'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (1)

    (type_check_stack_print) 
000: '000' type:2
    (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:s (2)
 BE:

Type Check Stack (1)

000: '000' type:s (2)
 BE:

Type Check Stack (1)

000: '000' type:s (2)
 BE:PRINT
FN: 1 args
    (function_return_type) 
function_return_type: 'PRINT' =>v
    (function_return_type) 
function_return_type: 'PRINT' =>17
ret_type;17 v
typecheck_expression:Ret type of PRINT : v
type_check_stack_pop: '000'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (0)

    (type_check_stack_print) 
------------------

FN ARG 0 ri 000 2(s)  Arg not OK
type_check_stack_push: '000'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (1)

    (type_check_stack_print) 
000: '000' type:17
    (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '7' nidx:35  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     s rq:s 'CHR$' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_INTEGER      i rq:i '7'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_FUNCTION     s rq:s 'CHR$'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
(dump_exp_buffer2) N12 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
    (process_expression_types) 
==INFIX==

infix_stack_push: '7'
infix_stack_pop: '7'
infix_stack_push: 'CHR$(7 )'
infix_stack_pop: 'CHR$(7 )'
infix_stack_push: 'PRINT(CHR$(7 ) )'
infix_stack_pop: 'PRINT(CHR$(7 ) )'
    (process_expression_types) ==PRINT(CHR$(7 ) )==
    (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N4 EXP_BUFF_ID_INTEGER      i rq:i 7  0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N8 EXP_BUFF_ID_FUNCTION     s rq:s CHR$  0:
(    output_qcode) N9 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N10 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N11 EXP_BUFF_ID_FUNCTION     v rq:v PRINT  0:
(    output_qcode) N12 EXP_BUFF_ID_SUB_END      U rq:i   0:

     (check_literal) check_literal:lit=':' idx=37 ''
     (check_literal) check_literal:After drop space:':' idx=37 ''
     (check_literal) check_literal  ret0 Empty test string
    (translate_file) 
cline scanned OK
*************
**   ENDIF **
*************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'ENDIF ':
     (check_vname) check_vname ret1 ' ':
    (check_variable) check_variable: ' '
    (check_variable) check_variable: Ary test ' '

     (check_literal) check_literal:lit='(' idx=8 ' '
     (check_literal) check_literal:After drop space:'(' idx=8 ' '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=8 ' '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=9 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_assignment) check_assignment:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) check_textlabel: 'ENDIF '
   (check_textlabel) check_textlabel:ret0
  (check_proc_call) check_proc_call:ret0

  (check_command) check_command:
  (check_command) check_command: ret0

  (check_function) check_function: 'ENDIF '
  (check_function) check_function: ret0

  (check_literal) check_literal:lit=' IF' idx=0 '   ENDIF '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'IF' idx=3 'ENDIF '
  (check_literal)   'I' != 'E'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' ELSEIF' idx=0 '   ENDIF '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'ELSEIF' idx=3 'ENDIF '
  (check_literal)   'L' != 'N'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' ELSE' idx=0 '   ENDIF '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'ELSE' idx=3 'ENDIF '
  (check_literal)   'L' != 'N'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' ENDIF' idx=0 '   ENDIF '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'ENDIF' idx=3 'ENDIF '
  (check_literal) check_literal:After while(): 
  (check_literal) check_literal:ret1 
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=1, ' '
========================================================
   ENDIF 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'ENDIF ':
    (check_vname) check_vname ret1 ' ':
   (check_variable) check_variable: ' '
   (check_variable) check_variable: Ary test ' '

    (check_literal) check_literal:lit='(' idx=8 ' '
    (check_literal) check_literal:After drop space:'(' idx=8 ' '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=8 ' '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=9 ''
  (check_literal) check_literal  ret0 Empty test string
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'ENDIF '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret0

 (check_function) check_function: 'ENDIF '
 (check_function) check_function: ret0

 (check_literal) check_literal:lit=' IF' idx=3 'ENDIF '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'IF' idx=3 'ENDIF '
 (check_literal)   'I' != 'E'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' ELSEIF' idx=3 'ENDIF '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'ELSEIF' idx=3 'ENDIF '
 (check_literal)   'L' != 'N'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' ELSE' idx=3 'ENDIF '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'ELSE' idx=3 'ENDIF '
 (check_literal)   'L' != 'N'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' ENDIF' idx=3 'ENDIF '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'ENDIF' idx=3 'ENDIF '
 (check_literal) check_literal:After while(): 
 (check_literal) check_literal:ret1 

 (scan_literal) scan_literal:lit=' ENDIF' 'ENDIF '
 (scan_literal) scan_literal:After drop space:'ENDIF '
 (scan_literal) scan_literal:while loop:ENDIF 
 (scan_literal) scan_literal:while loop:NDIF 
 (scan_literal) scan_literal:while loop:DIF 
 (scan_literal) scan_literal:while loop:IF 
 (scan_literal) scan_literal:while loop:F 
   Frst:1 T:'ENDIF' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:ENDIF is not function
token_is_variable: tok:'ENDIF'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:ENDIF is not function
 (init_get_name) 
init_get_name:'ENDIF'
 (init_get_name) 
init_get_name:'ENDIF'
 (get_name) 
get_name:gn:'ENDIF'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] f f ENDIF
 (scan_literal) scan_literal:ret1
Finalise stack
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'ENDIF' nidx:0  0:
=================
 BE:ENDIF
type_check_stack_push: 'ENDIF'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'ENDIF' type:1
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'ENDIF' type:f (1)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'ENDIF' nidx:0  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f 'ENDIF'  0:
=================
(process_expression_types) 
==INFIX==

Var: ENDIF ary:3 NumIdx:0
infix_stack_push: 'ENDIF()'
infix_stack_pop: 'ENDIF()'
(process_expression_types) ==ENDIF()==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     f rq:f ENDIF  0:

 (check_literal) check_literal:lit=':' idx=9 ''
 (check_literal) check_literal:After drop space:':' idx=9 ''
 (check_literal) check_literal  ret0 Empty test string
(translate_file) 
cline scanned OK
*************************
**   IF i%=%X AND y%<4 **
*************************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'IF i%=%X AND y%<4 ':
     (check_vname) check_vname ret1 ' i%=%X AND y%<4 ':
    (check_variable) check_variable: ' i%=%X AND y%<4 '
    (check_variable) check_variable: Ary test ' i%=%X AND y%<4 '

     (check_literal) check_literal:lit='(' idx=5 ' i%=%X AND y%<4 '
     (check_literal) check_literal:After drop space:'(' idx=5 ' i%=%X AND y%<4 '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=5 ' i%=%X AND y%<4 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=6 'i%=%X AND y%<4 '
   (check_literal)   '=' != 'i'
   (check_literal) check_literal: ret0
  (check_assignment) check_assignment:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) check_textlabel: 'IF i%=%X AND y%<4 '
   (check_textlabel) check_textlabel:ret0
  (check_proc_call) check_proc_call:ret0

  (check_command) check_command:
  (check_command) check_command: ret0

  (check_function) check_function: 'IF i%=%X AND y%<4 '
  (check_function) check_function: ret0

  (check_literal) check_literal:lit=' IF' idx=0 '   IF i%=%X AND y%<4 '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'IF' idx=3 'IF i%=%X AND y%<4 '
  (check_literal) check_literal:After while(): i%=%X AND y%<4 
  (check_literal) check_literal:ret1 
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=16, ' i%=%X AND y%<4 '
========================================================
   IF i%=%X AND y%<4 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'IF i%=%X AND y%<4 ':
    (check_vname) check_vname ret1 ' i%=%X AND y%<4 ':
   (check_variable) check_variable: ' i%=%X AND y%<4 '
   (check_variable) check_variable: Ary test ' i%=%X AND y%<4 '

    (check_literal) check_literal:lit='(' idx=5 ' i%=%X AND y%<4 '
    (check_literal) check_literal:After drop space:'(' idx=5 ' i%=%X AND y%<4 '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=5 ' i%=%X AND y%<4 '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=6 'i%=%X AND y%<4 '
  (check_literal)   '=' != 'i'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'IF i%=%X AND y%<4 '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret0

 (check_function) check_function: 'IF i%=%X AND y%<4 '
 (check_function) check_function: ret0

 (check_literal) check_literal:lit=' IF' idx=3 'IF i%=%X AND y%<4 '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'IF' idx=3 'IF i%=%X AND y%<4 '
 (check_literal) check_literal:After while(): i%=%X AND y%<4 
 (check_literal) check_literal:ret1 

 (scan_literal) scan_literal:lit=' IF' 'IF i%=%X AND y%<4 '
 (scan_literal) scan_literal:After drop space:'IF i%=%X AND y%<4 '
 (scan_literal) scan_literal:while loop:IF i%=%X AND y%<4 
 (scan_literal) scan_literal:while loop:F i%=%X AND y%<4 
   Frst:1 T:'IF' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:IF is not function
token_is_variable: tok:'IF'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:IF is not function
 (init_get_name) 
init_get_name:'IF'
 (init_get_name) 
init_get_name:'IF'
 (get_name) 
get_name:gn:'IF'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] f f IF
 (scan_literal) scan_literal:ret1

 (scan_expression) scan_expression: ' i%=%X AND y%<4 '

  (check_eitem) check_eitem: 'i%=%X AND y%<4 '

   (check_operator) check_operator: i%=%X AND y%<4 

    (check_literal) check_literal:lit=' ,' idx=6 'i%=%X AND y%<4 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=6 'i%=%X AND y%<4 '
    (check_literal)   ',' != 'i'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'i%=%X AND y%<4 '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=6 'i%=%X AND y%<4 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=6 'i%=%X AND y%<4 '
    (check_literal)   '%' != 'i'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=6 'i%=%X AND y%<4 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=6 'i%=%X AND y%<4 '
    (check_literal)   '"' != 'i'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'i%=%X AND y%<4 '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'i%=%X AND y%<4 ':
     (check_vname) check_vname ret1 '%=%X AND y%<4 ':
    (check_variable) check_variable: '%=%X AND y%<4 '
    (check_variable) check_variable: Ary test '=%X AND y%<4 '

     (check_literal) check_literal:lit='(' idx=8 '=%X AND y%<4 '
     (check_literal) check_literal:After drop space:'(' idx=8 '=%X AND y%<4 '
     (check_literal)   '(' != '='
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1
 (check_eitem) check_eitem:ret1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: i%=%X AND y%<4 

   (check_literal) check_literal:lit=' ,' idx=6 'i%=%X AND y%<4 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=6 'i%=%X AND y%<4 '
   (check_literal)   ',' != 'i'
   (check_literal) check_literal: ret0
  (check_operator) ret0:is comma: 0

  (check_function) check_function: 'i%=%X AND y%<4 '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=6 'i%=%X AND y%<4 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=6 'i%=%X AND y%<4 '
   (check_literal)   '%' != 'i'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=6 'i%=%X AND y%<4 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=6 'i%=%X AND y%<4 '
   (check_literal)   '"' != 'i'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'i%=%X AND y%<4 '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'i%=%X AND y%<4 ':
    (check_vname) check_vname ret1 '%=%X AND y%<4 ':
   (check_variable) check_variable: '%=%X AND y%<4 '
   (check_variable) check_variable: Ary test '=%X AND y%<4 '

    (check_literal) check_literal:lit='(' idx=8 '=%X AND y%<4 '
    (check_literal) check_literal:After drop space:'(' idx=8 '=%X AND y%<4 '
    (check_literal)   '(' != '='
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) check_atom:ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=6 'i%=%X AND y%<4 '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=6 'i%=%X AND y%<4 '
  (check_literal)   '%' != 'i'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=6 'i%=%X AND y%<4 '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=6 'i%=%X AND y%<4 '
  (check_literal)   '"' != 'i'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) check_float: ret0

   (check_integer) check_integer: 'i%=%X AND y%<4 '
   (check_integer) check_integer:ret0
  (check_number) check_number: ret0

  (check_variable) check_variable:

   (check_vname) check_vname 'i%=%X AND y%<4 ':
   (check_vname) check_vname ret1 '%=%X AND y%<4 ':
  (check_variable) check_variable: '%=%X AND y%<4 '
  (check_variable) check_variable: Ary test '=%X AND y%<4 '

   (check_literal) check_literal:lit='(' idx=8 '=%X AND y%<4 '
   (check_literal) check_literal:After drop space:'(' idx=8 '=%X AND y%<4 '
   (check_literal)   '(' != '='
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) scan_variable:

  (scan_vname) scan_vname: 'i%=%X AND y%<4 '
  (scan_vname) scan_vname: ret1 'i'
 (scan_variable) scan_variable: '%=%X AND y%<4 ' vname='i'
 (scan_variable) scan_variable: Ary test '=%X AND y%<4 '

  (check_literal) check_literal:lit='(' idx=8 '=%X AND y%<4 '
  (check_literal) check_literal:After drop space:'(' idx=8 '=%X AND y%<4 '
  (check_literal)   '(' != '='
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='i%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'i%' exptype:i
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:i% is not function
token_is_variable: tok:'i%'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:i% is not function
(init_get_name) 
init_get_name:'i%'
(init_get_name) 
init_get_name:'i%'
(get_name) 
get_name:gn:'i%'
process_token:type:i req_type:i
modify_expression_type:Inittype:i Intype:i Outtype:i
( output_variable) [i,()] i i i%
(print_var_info) 
VAR INFO: '                i%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
(scan_atom) scan_atom:ret1
(scan_expression) n commas now:0

 (check_eitem) check_eitem: '=%X AND y%<4 '

  (check_operator) check_operator: =%X AND y%<4 

   (check_literal) check_literal:lit=' ,' idx=8 '=%X AND y%<4 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=8 '=%X AND y%<4 '
   (check_literal)   ',' != '='
   (check_literal) check_literal: ret0
  (check_operator) ret1:is comma: 0
 (check_eitem) check_eitem:ret1 comma:1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: =%X AND y%<4 

   (check_literal) check_literal:lit=' ,' idx=8 '=%X AND y%<4 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=8 '=%X AND y%<4 '
   (check_literal)   ',' != '='
   (check_literal) check_literal: ret0
  (check_operator) ret1:is comma: 0

  (scan_operator) scan_operator: '=%X AND y%<4 '

   (check_literal) check_literal:lit=' ,' idx=8 '=%X AND y%<4 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=8 '=%X AND y%<4 '
   (check_literal)   ',' != '='
   (check_literal) check_literal: ret0
  (scan_operator) scan_operator: ret1 '%X AND y%<4 '
   Frst:0 T:'=' exptype:i
 (operator_precedence) 
= is operator
'=' is operator
 (process_token) 
Token is operator o1 name:= o2 name:
 (process_token) 
opr1:1 opr2:0
Push 1
 Push:'='
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: = type:0
 (op_stack_print) 
------------------

 (scan_eitem) Is comma;0
 (scan_expression) n commas now:0

  (check_eitem) check_eitem: '%X AND y%<4 '

   (check_operator) check_operator: %X AND y%<4 

    (check_literal) check_literal:lit=' ,' idx=9 '%X AND y%<4 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=9 '%X AND y%<4 '
    (check_literal)   ',' != '%'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: '%X AND y%<4 '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=9 '%X AND y%<4 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=9 '%X AND y%<4 '
    (check_literal) check_literal:After while():X AND y%<4 
    (check_literal) check_literal:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator: %X AND y%<4 

    (check_literal) check_literal:lit=' ,' idx=9 '%X AND y%<4 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=9 '%X AND y%<4 '
    (check_literal)   ',' != '%'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: '%X AND y%<4 '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=9 '%X AND y%<4 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=9 '%X AND y%<4 '
    (check_literal) check_literal:After while():X AND y%<4 
    (check_literal) check_literal:ret1 
   (check_atom) check_atom:ret1

   (scan_atom) scan_atom:

    (check_literal) check_literal:lit=' %' idx=9 '%X AND y%<4 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=9 '%X AND y%<4 '
    (check_literal) check_literal:After while():X AND y%<4 
    (check_literal) check_literal:ret1 

    (scan_literal) scan_literal:lit=' %' '%X AND y%<4 '
    (scan_literal) scan_literal:After drop space:'%X AND y%<4 '
    (scan_literal) scan_literal:while loop:%X AND y%<4 
   Frst:0 T:'%' exptype:i
    (operator_precedence) 
= is operator
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:% is not function
token_is_variable: tok:'%'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:% is not function
    (scan_literal) scan_literal:ret1
   (scan_atom) scan_atom:ret1
  (scan_expression) n commas now:0

   (check_eitem) check_eitem: 'X AND y%<4 '

    (check_operator) check_operator: X AND y%<4 

     (check_literal) check_literal:lit=' ,' idx=10 'X AND y%<4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=10 'X AND y%<4 '
     (check_literal)   ',' != 'X'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'X AND y%<4 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=10 'X AND y%<4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=10 'X AND y%<4 '
     (check_literal)   '%' != 'X'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=10 'X AND y%<4 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=10 'X AND y%<4 '
     (check_literal)   '"' != 'X'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'X AND y%<4 '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'X AND y%<4 ':
      (check_vname) check_vname ret1 ' AND y%<4 ':
     (check_variable) check_variable: ' AND y%<4 '
     (check_variable) check_variable: Ary test ' AND y%<4 '

      (check_literal) check_literal:lit='(' idx=11 ' AND y%<4 '
      (check_literal) check_literal:After drop space:'(' idx=11 ' AND y%<4 '
      (check_literal)   '(' != ' '
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator: X AND y%<4 

    (check_literal) check_literal:lit=' ,' idx=10 'X AND y%<4 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=10 'X AND y%<4 '
    (check_literal)   ',' != 'X'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'X AND y%<4 '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=10 'X AND y%<4 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=10 'X AND y%<4 '
    (check_literal)   '%' != 'X'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=10 'X AND y%<4 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=10 'X AND y%<4 '
    (check_literal)   '"' != 'X'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'X AND y%<4 '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'X AND y%<4 ':
     (check_vname) check_vname ret1 ' AND y%<4 ':
    (check_variable) check_variable: ' AND y%<4 '
    (check_variable) check_variable: Ary test ' AND y%<4 '

     (check_literal) check_literal:lit='(' idx=11 ' AND y%<4 '
     (check_literal) check_literal:After drop space:'(' idx=11 ' AND y%<4 '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1

  (scan_atom) scan_atom:

   (check_literal) check_literal:lit=' %' idx=10 'X AND y%<4 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=10 'X AND y%<4 '
   (check_literal)   '%' != 'X'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=10 'X AND y%<4 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=10 'X AND y%<4 '
   (check_literal)   '"' != 'X'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'X AND y%<4 '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'X AND y%<4 ':
    (check_vname) check_vname ret1 ' AND y%<4 ':
   (check_variable) check_variable: ' AND y%<4 '
   (check_variable) check_variable: Ary test ' AND y%<4 '

    (check_literal) check_literal:lit='(' idx=11 ' AND y%<4 '
    (check_literal) check_literal:After drop space:'(' idx=11 ' AND y%<4 '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'X AND y%<4 '
   (scan_vname) scan_vname: ret1 'X'
  (scan_variable) scan_variable: ' AND y%<4 ' vname='X'
  (scan_variable) scan_variable: Ary test ' AND y%<4 '

   (check_literal) check_literal:lit='(' idx=11 ' AND y%<4 '
   (check_literal) check_literal:After drop space:'(' idx=11 ' AND y%<4 '
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='X' is str:0 int:0 flt:1 ary:0
   Frst:0 T:'X' exptype:i
 (operator_precedence) 
= is operator
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:X is not function
token_is_variable: tok:'X'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:X is not function
 (init_get_name) 
init_get_name:'X'
 (init_get_name) 
init_get_name:'X'
 (get_name) 
get_name:gn:'X'
process_token:type:i req_type:i
modify_expression_type:Inittype:i Intype:f Outtype:f
( output_variable) [f,()] f f X
 (print_var_info) 
VAR INFO: '                 X' gbl:0 ref:1 int:0 flt:1 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
 (scan_atom) scan_atom:ret1
(scan_expression) n commas now:0

 (check_eitem) check_eitem: ' AND y%<4 '

  (check_operator) check_operator:  AND y%<4 

   (check_literal) check_literal:lit=' ,' idx=12 'AND y%<4 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=12 'AND y%<4 '
   (check_literal)   ',' != 'A'
   (check_literal) check_literal: ret0
  (check_operator) ret1:is comma: 0
 (check_eitem) check_eitem:ret1 comma:1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator:  AND y%<4 

   (check_literal) check_literal:lit=' ,' idx=12 'AND y%<4 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=12 'AND y%<4 '
   (check_literal)   ',' != 'A'
   (check_literal) check_literal: ret0
  (check_operator) ret1:is comma: 0

  (scan_operator) scan_operator: ' AND y%<4 '

   (check_literal) check_literal:lit=' ,' idx=12 'AND y%<4 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=12 'AND y%<4 '
   (check_literal)   ',' != 'A'
   (check_literal) check_literal: ret0
  (scan_operator) scan_operator: ret1 ' y%<4 '
   Frst:0 T:'AND' exptype:f
 (operator_precedence) 
AND is operator
 (operator_precedence) 
= is operator
'AND' is operator
 (process_token) 
Token is operator o1 name:AND o2 name:=
 (process_token) 
opr1:5 opr2:1
 (operator_precedence) 
= is operator
 (operator_precedence) 
= is operator
Push 1
 Push:'AND'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: = type:0
 (op_stack_print) 
001: AND type:1
 (op_stack_print) 
------------------

 (scan_eitem) Is comma;0
 (scan_expression) n commas now:0

  (check_eitem) check_eitem: ' y%<4 '

   (check_operator) check_operator:  y%<4 

    (check_literal) check_literal:lit=' ,' idx=16 'y%<4 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=16 'y%<4 '
    (check_literal)   ',' != 'y'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'y%<4 '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=15 ' y%<4 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=16 'y%<4 '
    (check_literal)   '%' != 'y'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=15 ' y%<4 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=16 'y%<4 '
    (check_literal)   '"' != 'y'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'y%<4 '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'y%<4 ':
     (check_vname) check_vname ret1 '%<4 ':
    (check_variable) check_variable: '%<4 '
    (check_variable) check_variable: Ary test '<4 '

     (check_literal) check_literal:lit='(' idx=18 '<4 '
     (check_literal) check_literal:After drop space:'(' idx=18 '<4 '
     (check_literal)   '(' != '<'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1
 (check_eitem) check_eitem:ret1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator:  y%<4 

   (check_literal) check_literal:lit=' ,' idx=16 'y%<4 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=16 'y%<4 '
   (check_literal)   ',' != 'y'
   (check_literal) check_literal: ret0
  (check_operator) ret0:is comma: 0

  (check_function) check_function: 'y%<4 '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=15 ' y%<4 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=16 'y%<4 '
   (check_literal)   '%' != 'y'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=15 ' y%<4 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=16 'y%<4 '
   (check_literal)   '"' != 'y'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'y%<4 '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'y%<4 ':
    (check_vname) check_vname ret1 '%<4 ':
   (check_variable) check_variable: '%<4 '
   (check_variable) check_variable: Ary test '<4 '

    (check_literal) check_literal:lit='(' idx=18 '<4 '
    (check_literal) check_literal:After drop space:'(' idx=18 '<4 '
    (check_literal)   '(' != '<'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) check_atom:ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=15 ' y%<4 '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=16 'y%<4 '
  (check_literal)   '%' != 'y'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=15 ' y%<4 '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=16 'y%<4 '
  (check_literal)   '"' != 'y'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) check_float: ret0

   (check_integer) check_integer: 'y%<4 '
   (check_integer) check_integer:ret0
  (check_number) check_number: ret0

  (check_variable) check_variable:

   (check_vname) check_vname 'y%<4 ':
   (check_vname) check_vname ret1 '%<4 ':
  (check_variable) check_variable: '%<4 '
  (check_variable) check_variable: Ary test '<4 '

   (check_literal) check_literal:lit='(' idx=18 '<4 '
   (check_literal) check_literal:After drop space:'(' idx=18 '<4 '
   (check_literal)   '(' != '<'
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) scan_variable:

  (scan_vname) scan_vname: ' y%<4 '
  (scan_vname) scan_vname: ret1 'y'
 (scan_variable) scan_variable: '%<4 ' vname='y'
 (scan_variable) scan_variable: Ary test '<4 '

  (check_literal) check_literal:lit='(' idx=18 '<4 '
  (check_literal) check_literal:After drop space:'(' idx=18 '<4 '
  (check_literal)   '(' != '<'
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='y%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'y%' exptype:f
(operator_precedence) 
AND is operator
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:y% is not function
token_is_variable: tok:'y%'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:y% is not function
(init_get_name) 
init_get_name:'y%'
(init_get_name) 
init_get_name:'y%'
(get_name) 
get_name:gn:'y%'
process_token:type:f req_type:i
modify_expression_type:Inittype:f Intype:i Outtype:f
( output_variable) [f,()] f f y%
(print_var_info) 
VAR INFO: '                y%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
(scan_atom) scan_atom:ret1
(scan_expression) n commas now:0

 (check_eitem) check_eitem: '<4 '

  (check_operator) check_operator: <4 

   (check_literal) check_literal:lit=' ,' idx=18 '<4 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=18 '<4 '
   (check_literal)   ',' != '<'
   (check_literal) check_literal: ret0
  (check_operator) ret1:is comma: 0
 (check_eitem) check_eitem:ret1 comma:1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: <4 

   (check_literal) check_literal:lit=' ,' idx=18 '<4 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=18 '<4 '
   (check_literal)   ',' != '<'
   (check_literal) check_literal: ret0
  (check_operator) ret1:is comma: 0

  (scan_operator) scan_operator: '<4 '

   (check_literal) check_literal:lit=' ,' idx=18 '<4 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=18 '<4 '
   (check_literal)   ',' != '<'
   (check_literal) check_literal: ret0
  (scan_operator) scan_operator: ret1 '4 '
   Frst:0 T:'<' exptype:f
 (operator_precedence) 
< is operator
 (operator_precedence) 
AND is operator
'<' is operator
 (process_token) 
Token is operator o1 name:< o2 name:AND
 (process_token) 
opr1:5 opr2:5
 (operator_precedence) 
AND is operator
 (operator_precedence) 
AND is operator
 (operator_left_assoc) 
< is operator
Pop 1
Pop 'AND'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: = type:0
 (op_stack_print) 
------------------

 (operator_precedence) 
< is operator
 (operator_precedence) 
AND is operator
( output_operator) [f,()] f f AND
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:AND is not function
 (operator_precedence) 
= is operator
 (operator_precedence) 
= is operator
Push 1
 Push:'<'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: = type:0
 (op_stack_print) 
001: < type:1
 (op_stack_print) 
------------------

 (scan_eitem) Is comma;0
 (scan_expression) n commas now:0

  (check_eitem) check_eitem: '4 '

   (check_operator) check_operator: 4 

    (check_literal) check_literal:lit=' ,' idx=19 '4 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=19 '4 '
    (check_literal)   ',' != '4'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: '4 '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=19 '4 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=19 '4 '
    (check_literal)   '%' != '4'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=19 '4 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=19 '4 '
    (check_literal)   '"' != '4'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '4 '
     (check_integer) check_integer:ret1
    (check_number) check_number: ret1
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator: 4 

    (check_literal) check_literal:lit=' ,' idx=19 '4 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=19 '4 '
    (check_literal)   ',' != '4'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: '4 '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=19 '4 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=19 '4 '
    (check_literal)   '%' != '4'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=19 '4 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=19 '4 '
    (check_literal)   '"' != '4'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '4 '
     (check_integer) check_integer:ret1
    (check_number) check_number: ret1
   (check_atom) check_atom:ret1

   (scan_atom) scan_atom:

    (check_literal) check_literal:lit=' %' idx=19 '4 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=19 '4 '
    (check_literal)   '%' != '4'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=19 '4 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=19 '4 '
    (check_literal)   '"' != '4'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '4 '
     (check_integer) check_integer:ret1
    (check_number) check_number: ret1

    (scan_number) scan_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '4 '
     (check_integer) check_integer:ret1

     (scan_integer) scan_integer:
     (scan_integer) scan_integer:ret1
   Frst:0 T:'4' exptype:f
    (operator_precedence) 
< is operator
modify_expression_type:Inittype:f Intype:i Outtype:f
(  output_integer) [f,()] i f 4
    (scan_integer) scan_integer:ret1  4
   (scan_atom) scan_atom:ret1
  (scan_expression) n commas now:0

   (check_eitem) check_eitem: ' '

    (check_operator) check_operator:  

     (check_literal) check_literal:lit=' ,' idx=21 ''
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=21 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_operator) ret0:is comma: 0

    (check_function) check_function: ''
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=20 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=21 ''
     (check_literal) check_literal  ret0 Empty test string

     (check_literal) check_literal:lit=' "' idx=20 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=21 ''
     (check_literal) check_literal  ret0 Empty test string

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: ''
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname '':
      (check_vname) check_vname ret0 '':
     (check_variable) check_variable:ret0 
    (check_atom) check_atom:ret1

    (check_sub_expr) check_sub_expr:

     (check_literal) check_literal:lit=' (' idx=20 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'(' idx=21 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_sub_expr) check_sub_expr: ret0
   (check_eitem) check_eitem:ret0
  (scan_expression) scan_expression: ret1 ' ' commas:0
Finalise stack
Pop '<'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: = type:0
 (op_stack_print) 
------------------

( output_operator) [f,()] f f <
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:< is not function
Pop '='
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (0)

 (op_stack_print) 
------------------

( output_operator) [f,()] f f =
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:= is not function
 (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'IF' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'i%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'X' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'y%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f 'AND' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f '4' nidx:20  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f '<' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f '=' nidx:32766  0:
=================
 BE:IF
type_check_stack_push: 'IF'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (1)

 (type_check_stack_print) 
000: 'IF' type:1
 (type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'IF' type:f (1)
 BE:i%
type_check_stack_push: 'i%'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (2)

 (type_check_stack_print) 
000: 'IF' type:1
 (type_check_stack_print) 
001: 'i%' type:0
 (type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'IF' type:f (1)
001: 'i%' type:i (0)
 BE:X
type_check_stack_push: 'X'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (3)

 (type_check_stack_print) 
000: 'IF' type:1
 (type_check_stack_print) 
001: 'i%' type:0
 (type_check_stack_print) 
002: 'X' type:1
 (type_check_stack_print) 
------------------


Type Check Stack (3)

000: 'IF' type:f (1)
001: 'i%' type:i (0)
002: 'X' type:f (1)
 BE:y%
type_check_stack_push: 'y%'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (4)

 (type_check_stack_print) 
000: 'IF' type:1
 (type_check_stack_print) 
001: 'i%' type:0
 (type_check_stack_print) 
002: 'X' type:1
 (type_check_stack_print) 
003: 'y%' type:1
 (type_check_stack_print) 
------------------


Type Check Stack (4)

000: 'IF' type:f (1)
001: 'i%' type:i (0)
002: 'X' type:f (1)
003: 'y%' type:f (1)
 BE:AND
BUFF_ID_OPERATOR
Found operator AND
type_check_stack_pop: 'y%'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (3)

 (type_check_stack_print) 
000: 'IF' type:1
 (type_check_stack_print) 
001: 'i%' type:0
 (type_check_stack_print) 
002: 'X' type:1
 (type_check_stack_print) 
------------------

type_check_stack_pop: 'X'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (2)

 (type_check_stack_print) 
000: 'IF' type:1
 (type_check_stack_print) 
001: 'i%' type:0
 (type_check_stack_print) 
------------------

 Mutable type 1 1
 Same type
type_check_stack_push: '000'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (3)

 (type_check_stack_print) 
000: 'IF' type:1
 (type_check_stack_print) 
001: 'i%' type:0
 (type_check_stack_print) 
002: '000' type:1
 (type_check_stack_print) 
------------------


Type Check Stack (3)

000: 'IF' type:f (1)
001: 'i%' type:i (0)
002: '000' type:f (1)
 BE:4
type_check_stack_push: '4'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (4)

 (type_check_stack_print) 
000: 'IF' type:1
 (type_check_stack_print) 
001: 'i%' type:0
 (type_check_stack_print) 
002: '000' type:1
 (type_check_stack_print) 
003: '4' type:0
 (type_check_stack_print) 
------------------


Type Check Stack (4)

000: 'IF' type:f (1)
001: 'i%' type:i (0)
002: '000' type:f (1)
003: '4' type:i (0)
 BE:<
BUFF_ID_OPERATOR
Found operator <
type_check_stack_pop: '4'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (3)

 (type_check_stack_print) 
000: 'IF' type:1
 (type_check_stack_print) 
001: 'i%' type:0
 (type_check_stack_print) 
002: '000' type:1
 (type_check_stack_print) 
------------------

type_check_stack_pop: '000'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (2)

 (type_check_stack_print) 
000: 'IF' type:1
 (type_check_stack_print) 
001: 'i%' type:0
 (type_check_stack_print) 
------------------

 Mutable type 0 1
 Autoconversion
 --------------
 Op1: type:0 req type:1
 Op2: type:1 req type:1
 BE:  type:1 req type:1
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f 'IF'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'i%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     f rq:f 'X'  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     f rq:f 'y%'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_OPERATOR     f rq:f 'AND'  2: 4 3
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:f '4'  0:
=================
 Insert after 6 exp_buffer2_i:6
   Found at i:5
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f 'IF'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'i%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     f rq:f 'X'  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     f rq:f 'y%'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_OPERATOR     f rq:f 'AND'  2: 4 3
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:f '4'  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 6 5
=================
type_check_stack_push: '000'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (3)

 (type_check_stack_print) 
000: 'IF' type:1
 (type_check_stack_print) 
001: 'i%' type:0
 (type_check_stack_print) 
002: '000' type:1
 (type_check_stack_print) 
------------------


Type Check Stack (3)

000: 'IF' type:f (1)
001: 'i%' type:i (0)
002: '000' type:f (1)
 BE::=
BUFF_ID_OPERATOR
Found operator :=
type_check_stack_pop: '000'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (2)

 (type_check_stack_print) 
000: 'IF' type:1
 (type_check_stack_print) 
001: 'i%' type:0
 (type_check_stack_print) 
------------------

type_check_stack_pop: 'i%'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (1)

 (type_check_stack_print) 
000: 'IF' type:1
 (type_check_stack_print) 
------------------

 Mutable type 1 0
 Autoconversion
 --------------
 Op1: type:1 req type:1
 Op2: type:0 req type:0
 BE:  type:1 req type:1
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f 'IF'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'i%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     f rq:f 'X'  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     f rq:f 'y%'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_OPERATOR     f rq:f 'AND'  2: 4 3
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:f '4'  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 6 5
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     f rq:f '<'  2: 6 5
=================
 Insert after 7 exp_buffer2_i:8
   Found at i:7
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f 'IF'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'i%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     f rq:f 'X'  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     f rq:f 'y%'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_OPERATOR     f rq:f 'AND'  2: 4 3
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:f '4'  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 6 5
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     f rq:f '<'  2: 6 5
(dump_exp_buffer2) N10 EXP_BUFF_ID_AUTOCON      i rq:i 'autocon f->i'  2: 7 2
=================
type_check_stack_push: '000'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (2)

 (type_check_stack_print) 
000: 'IF' type:1
 (type_check_stack_print) 
001: '000' type:0
 (type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'IF' type:f (1)
001: '000' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'IF' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'i%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'X' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'y%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f 'AND' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f '4' nidx:20  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f '<' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f ':=' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f 'IF'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'i%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     f rq:f 'X'  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     f rq:f 'y%'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_OPERATOR     f rq:f 'AND'  2: 4 3
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:f '4'  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 6 5
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     f rq:f '<'  2: 6 5
(dump_exp_buffer2) N10 EXP_BUFF_ID_AUTOCON      i rq:i 'autocon f->i'  2: 7 2
(dump_exp_buffer2) N9 EXP_BUFF_ID_OPERATOR     i rq:i ':='  2: 7 2
=================
 (process_expression_types) 
==INFIX==

Var: IF ary:3 NumIdx:0
infix_stack_push: 'IF()'
Var: i% ary:0 NumIdx:0
infix_stack_push: 'i%'
Var: X ary:0 NumIdx:0
infix_stack_push: 'X'
Var: y% ary:0 NumIdx:0
infix_stack_push: 'y%'
infix_stack_pop: 'y%'
infix_stack_pop: 'X'
infix_stack_push: '(X AND y%)'
infix_stack_push: '4'
infix_stack_pop: '4'
infix_stack_pop: '(X AND y%)'
infix_stack_push: '((X AND y%) < 4)'
infix_stack_pop: '((X AND y%) < 4)'
infix_stack_pop: 'i%'
infix_stack_push: '(i% := ((X AND y%) < 4))'
infix_stack_pop: '(i% := ((X AND y%) < 4))'
 (process_expression_types) ==(i% := ((X AND y%) < 4))==
 (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     f rq:f IF  0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     i rq:i i%  0:
(    output_qcode) N3 EXP_BUFF_ID_VARIABLE     f rq:f X  0:
(    output_qcode) N4 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
(    output_qcode) N5 EXP_BUFF_ID_OPERATOR     f rq:f AND  2: 4 3
(    output_qcode) N6 EXP_BUFF_ID_INTEGER      i rq:f 4  0:
(    output_qcode) N8 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 6 5
(    output_qcode) N7 EXP_BUFF_ID_OPERATOR     f rq:f <  2: 6 5
(    output_qcode) N10 EXP_BUFF_ID_AUTOCON      i rq:i autocon f->i  2: 7 2
(    output_qcode) N9 EXP_BUFF_ID_OPERATOR     i rq:i :=  2: 7 2

  (check_literal) check_literal:lit=':' idx=21 ''
  (check_literal) check_literal:After drop space:':' idx=21 ''
  (check_literal) check_literal  ret0 Empty test string
 (translate_file) 
cline scanned OK
**********************************
**    AT x%,y% :PRINT CHR$(158) **
**********************************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'AT x%,y% :PRINT CHR$(158) ':
     (check_vname) check_vname ret1 ' x%,y% :PRINT CHR$(158) ':
    (check_variable) check_variable: ' x%,y% :PRINT CHR$(158) '
    (check_variable) check_variable: Ary test ' x%,y% :PRINT CHR$(158) '

     (check_literal) check_literal:lit='(' idx=6 ' x%,y% :PRINT CHR$(158) '
     (check_literal) check_literal:After drop space:'(' idx=6 ' x%,y% :PRINT CHR$(158) '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=6 ' x%,y% :PRINT CHR$(158) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=7 'x%,y% :PRINT CHR$(158) '
   (check_literal)   '=' != 'x'
   (check_literal) check_literal: ret0
  (check_assignment) check_assignment:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) check_textlabel: 'AT x%,y% :PRINT CHR$(158) '
   (check_textlabel) check_textlabel:ret0
  (check_proc_call) check_proc_call:ret0

  (check_command) check_command:
  (check_command) check_command: ret1 found=> 'AT'
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=24, ' x%,y% :PRINT CHR$(158) '
========================================================
    AT x%,y% :PRINT CHR$(158) 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'AT x%,y% :PRINT CHR$(158) ':
    (check_vname) check_vname ret1 ' x%,y% :PRINT CHR$(158) ':
   (check_variable) check_variable: ' x%,y% :PRINT CHR$(158) '
   (check_variable) check_variable: Ary test ' x%,y% :PRINT CHR$(158) '

    (check_literal) check_literal:lit='(' idx=6 ' x%,y% :PRINT CHR$(158) '
    (check_literal) check_literal:After drop space:'(' idx=6 ' x%,y% :PRINT CHR$(158) '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=6 ' x%,y% :PRINT CHR$(158) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=7 'x%,y% :PRINT CHR$(158) '
  (check_literal)   '=' != 'x'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'AT x%,y% :PRINT CHR$(158) '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'AT'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'AT' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) AT is function
 (function_return_type) 
function_return_type: 'AT' =>v
 (function_return_type) 
function_return_type: 'AT' =>17
process_token: 'AT' t=>v
 Push:'AT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: AT type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: AT type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' x%,y% :PRINT CHR$(158) '

   (check_eitem) check_eitem: 'x%,y% :PRINT CHR$(158) '

    (check_operator) check_operator: x%,y% :PRINT CHR$(158) 

     (check_literal) check_literal:lit=' ,' idx=7 'x%,y% :PRINT CHR$(158) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=7 'x%,y% :PRINT CHR$(158) '
     (check_literal)   ',' != 'x'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'x%,y% :PRINT CHR$(158) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=7 'x%,y% :PRINT CHR$(158) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=7 'x%,y% :PRINT CHR$(158) '
     (check_literal)   '%' != 'x'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=7 'x%,y% :PRINT CHR$(158) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=7 'x%,y% :PRINT CHR$(158) '
     (check_literal)   '"' != 'x'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'x%,y% :PRINT CHR$(158) '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'x%,y% :PRINT CHR$(158) ':
      (check_vname) check_vname ret1 '%,y% :PRINT CHR$(158) ':
     (check_variable) check_variable: '%,y% :PRINT CHR$(158) '
     (check_variable) check_variable: Ary test ',y% :PRINT CHR$(158) '

      (check_literal) check_literal:lit='(' idx=9 ',y% :PRINT CHR$(158) '
      (check_literal) check_literal:After drop space:'(' idx=9 ',y% :PRINT CHR$(158) '
      (check_literal)   '(' != ','
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator: x%,y% :PRINT CHR$(158) 

    (check_literal) check_literal:lit=' ,' idx=7 'x%,y% :PRINT CHR$(158) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=7 'x%,y% :PRINT CHR$(158) '
    (check_literal)   ',' != 'x'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'x%,y% :PRINT CHR$(158) '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=7 'x%,y% :PRINT CHR$(158) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=7 'x%,y% :PRINT CHR$(158) '
    (check_literal)   '%' != 'x'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=7 'x%,y% :PRINT CHR$(158) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=7 'x%,y% :PRINT CHR$(158) '
    (check_literal)   '"' != 'x'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'x%,y% :PRINT CHR$(158) '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'x%,y% :PRINT CHR$(158) ':
     (check_vname) check_vname ret1 '%,y% :PRINT CHR$(158) ':
    (check_variable) check_variable: '%,y% :PRINT CHR$(158) '
    (check_variable) check_variable: Ary test ',y% :PRINT CHR$(158) '

     (check_literal) check_literal:lit='(' idx=9 ',y% :PRINT CHR$(158) '
     (check_literal) check_literal:After drop space:'(' idx=9 ',y% :PRINT CHR$(158) '
     (check_literal)   '(' != ','
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1

  (scan_atom) scan_atom:

   (check_literal) check_literal:lit=' %' idx=7 'x%,y% :PRINT CHR$(158) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=7 'x%,y% :PRINT CHR$(158) '
   (check_literal)   '%' != 'x'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=7 'x%,y% :PRINT CHR$(158) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=7 'x%,y% :PRINT CHR$(158) '
   (check_literal)   '"' != 'x'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'x%,y% :PRINT CHR$(158) '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'x%,y% :PRINT CHR$(158) ':
    (check_vname) check_vname ret1 '%,y% :PRINT CHR$(158) ':
   (check_variable) check_variable: '%,y% :PRINT CHR$(158) '
   (check_variable) check_variable: Ary test ',y% :PRINT CHR$(158) '

    (check_literal) check_literal:lit='(' idx=9 ',y% :PRINT CHR$(158) '
    (check_literal) check_literal:After drop space:'(' idx=9 ',y% :PRINT CHR$(158) '
    (check_literal)   '(' != ','
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'x%,y% :PRINT CHR$(158) '
   (scan_vname) scan_vname: ret1 'x'
  (scan_variable) scan_variable: '%,y% :PRINT CHR$(158) ' vname='x'
  (scan_variable) scan_variable: Ary test ',y% :PRINT CHR$(158) '

   (check_literal) check_literal:lit='(' idx=9 ',y% :PRINT CHR$(158) '
   (check_literal) check_literal:After drop space:'(' idx=9 ',y% :PRINT CHR$(158) '
   (check_literal)   '(' != ','
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='x%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'x%' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:x% is not function
token_is_variable: tok:'x%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:x% is not function
 (init_get_name) 
init_get_name:'x%'
 (init_get_name) 
init_get_name:'x%'
 (get_name) 
get_name:gn:'x%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,(U )] i i x%
 (print_var_info) 
VAR INFO: '                x%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
 (scan_atom) scan_atom:ret1
(scan_expression) n commas now:0

 (check_eitem) check_eitem: ',y% :PRINT CHR$(158) '

  (check_operator) check_operator: ,y% :PRINT CHR$(158) 

   (check_literal) check_literal:lit=' ,' idx=9 ',y% :PRINT CHR$(158) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=9 ',y% :PRINT CHR$(158) '
   (check_literal) check_literal:After while():y% :PRINT CHR$(158) 
   (check_literal) check_literal:ret1 
  (check_operator) ret1:is comma: 0
 (check_eitem) check_eitem:ret1 comma:1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: ,y% :PRINT CHR$(158) 

   (check_literal) check_literal:lit=' ,' idx=9 ',y% :PRINT CHR$(158) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=9 ',y% :PRINT CHR$(158) '
   (check_literal) check_literal:After while():y% :PRINT CHR$(158) 
   (check_literal) check_literal:ret1 
  (check_operator) ret1:is comma: 0

  (scan_operator) scan_operator: ',y% :PRINT CHR$(158) '

   (check_literal) check_literal:lit=' ,' idx=9 ',y% :PRINT CHR$(158) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=9 ',y% :PRINT CHR$(158) '
   (check_literal) check_literal:After while():y% :PRINT CHR$(158) 
   (check_literal) check_literal:ret1 

   (scan_literal) scan_literal:lit=' ,' ',y% :PRINT CHR$(158) '
   (scan_literal) scan_literal:After drop space:',y% :PRINT CHR$(158) '
   (scan_literal) scan_literal:while loop:,y% :PRINT CHR$(158) 
   Frst:0 T:',' exptype:i
(output_sub_start)
   (scan_literal) scan_literal:ret1
  (scan_operator) ret1:is comma: 1
 (scan_eitem) Is comma;1
 (scan_expression) n commas now:1

  (check_eitem) check_eitem: 'y% :PRINT CHR$(158) '

   (check_operator) check_operator: y% :PRINT CHR$(158) 

    (check_literal) check_literal:lit=' ,' idx=10 'y% :PRINT CHR$(158) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=10 'y% :PRINT CHR$(158) '
    (check_literal)   ',' != 'y'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'y% :PRINT CHR$(158) '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=10 'y% :PRINT CHR$(158) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=10 'y% :PRINT CHR$(158) '
    (check_literal)   '%' != 'y'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=10 'y% :PRINT CHR$(158) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=10 'y% :PRINT CHR$(158) '
    (check_literal)   '"' != 'y'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'y% :PRINT CHR$(158) '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'y% :PRINT CHR$(158) ':
     (check_vname) check_vname ret1 '% :PRINT CHR$(158) ':
    (check_variable) check_variable: '% :PRINT CHR$(158) '
    (check_variable) check_variable: Ary test ' :PRINT CHR$(158) '

     (check_literal) check_literal:lit='(' idx=12 ' :PRINT CHR$(158) '
     (check_literal) check_literal:After drop space:'(' idx=12 ' :PRINT CHR$(158) '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1
 (check_eitem) check_eitem:ret1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: y% :PRINT CHR$(158) 

   (check_literal) check_literal:lit=' ,' idx=10 'y% :PRINT CHR$(158) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=10 'y% :PRINT CHR$(158) '
   (check_literal)   ',' != 'y'
   (check_literal) check_literal: ret0
  (check_operator) ret0:is comma: 0

  (check_function) check_function: 'y% :PRINT CHR$(158) '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=10 'y% :PRINT CHR$(158) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=10 'y% :PRINT CHR$(158) '
   (check_literal)   '%' != 'y'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=10 'y% :PRINT CHR$(158) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=10 'y% :PRINT CHR$(158) '
   (check_literal)   '"' != 'y'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'y% :PRINT CHR$(158) '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'y% :PRINT CHR$(158) ':
    (check_vname) check_vname ret1 '% :PRINT CHR$(158) ':
   (check_variable) check_variable: '% :PRINT CHR$(158) '
   (check_variable) check_variable: Ary test ' :PRINT CHR$(158) '

    (check_literal) check_literal:lit='(' idx=12 ' :PRINT CHR$(158) '
    (check_literal) check_literal:After drop space:'(' idx=12 ' :PRINT CHR$(158) '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) check_atom:ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=10 'y% :PRINT CHR$(158) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=10 'y% :PRINT CHR$(158) '
  (check_literal)   '%' != 'y'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=10 'y% :PRINT CHR$(158) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=10 'y% :PRINT CHR$(158) '
  (check_literal)   '"' != 'y'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) check_float: ret0

   (check_integer) check_integer: 'y% :PRINT CHR$(158) '
   (check_integer) check_integer:ret0
  (check_number) check_number: ret0

  (check_variable) check_variable:

   (check_vname) check_vname 'y% :PRINT CHR$(158) ':
   (check_vname) check_vname ret1 '% :PRINT CHR$(158) ':
  (check_variable) check_variable: '% :PRINT CHR$(158) '
  (check_variable) check_variable: Ary test ' :PRINT CHR$(158) '

   (check_literal) check_literal:lit='(' idx=12 ' :PRINT CHR$(158) '
   (check_literal) check_literal:After drop space:'(' idx=12 ' :PRINT CHR$(158) '
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) scan_variable:

  (scan_vname) scan_vname: 'y% :PRINT CHR$(158) '
  (scan_vname) scan_vname: ret1 'y'
 (scan_variable) scan_variable: '% :PRINT CHR$(158) ' vname='y'
 (scan_variable) scan_variable: Ary test ' :PRINT CHR$(158) '

  (check_literal) check_literal:lit='(' idx=12 ' :PRINT CHR$(158) '
  (check_literal) check_literal:After drop space:'(' idx=12 ' :PRINT CHR$(158) '
  (check_literal)   '(' != ' '
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='y%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'y%' exptype:U
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:y% is not function
token_is_variable: tok:'y%'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:y% is not function
(init_get_name) 
init_get_name:'y%'
(init_get_name) 
init_get_name:'y%'
(get_name) 
get_name:gn:'y%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,(U )] i i y%
(print_var_info) 
VAR INFO: '                y%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
(scan_atom) scan_atom:ret1
(scan_expression) n commas now:1

 (check_eitem) check_eitem: ' :PRINT CHR$(158) '

  (check_operator) check_operator:  :PRINT CHR$(158) 

   (check_literal) check_literal:lit=' ,' idx=13 ':PRINT CHR$(158) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=13 ':PRINT CHR$(158) '
   (check_literal)   ',' != ':'
   (check_literal) check_literal: ret0
  (check_operator) ret0:is comma: 0

  (check_function) check_function: ':PRINT CHR$(158) '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=12 ' :PRINT CHR$(158) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=13 ':PRINT CHR$(158) '
   (check_literal)   '%' != ':'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=12 ' :PRINT CHR$(158) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=13 ':PRINT CHR$(158) '
   (check_literal)   '"' != ':'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: ':PRINT CHR$(158) '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname ':PRINT CHR$(158) ':
    (check_vname) check_vname ret0 ':PRINT CHR$(158) ':
   (check_variable) check_variable:ret0 
  (check_atom) check_atom:ret1

  (check_sub_expr) check_sub_expr:

   (check_literal) check_literal:lit=' (' idx=12 ' :PRINT CHR$(158) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'(' idx=13 ':PRINT CHR$(158) '
   (check_literal)   '(' != ':'
   (check_literal) check_literal: ret0
  (check_sub_expr) check_sub_expr: ret0
 (check_eitem) check_eitem:ret0
(scan_expression) scan_expression: ret1 ' :PRINT CHR$(158) ' commas:1
(scan_command) scan_command: ret1 =>'AT'
(scan_command) 
ENDEXP
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: AT type:17
(op_stack_print) 
------------------

(  output_sub_end)
(token_is_function) 
token_is_function:
(token_is_function) AT is function
Pop 5
Pop 'AT'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_function) [i,(U )] v v AT
(  output_sub_end)
Finalise stack
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'x%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? '' nidx:-1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'y%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'AT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
 BE:

Type Check Stack (0)

 BE:x%
type_check_stack_push: 'x%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'x%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'x%' type:i (0)
 BE:

Type Check Stack (1)

000: 'x%' type:i (0)
 BE:y%
type_check_stack_push: 'y%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'x%' type:0
(type_check_stack_print) 
001: 'y%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'x%' type:i (0)
001: 'y%' type:i (0)
 BE:

Type Check Stack (2)

000: 'x%' type:i (0)
001: 'y%' type:i (0)
 BE:AT
FN: 2 args
(function_return_type) 
function_return_type: 'AT' =>v
(function_return_type) 
function_return_type: 'AT' =>17
ret_type;17 v
typecheck_expression:Ret type of AT : v
type_check_stack_pop: 'y%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'x%' type:0
(type_check_stack_print) 
------------------

FN ARG 1 ri y% 0(i)  Arg ok
type_check_stack_pop: 'x%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (0)

(type_check_stack_print) 
------------------

FN ARG 0 ri x% 0(i)  Arg ok
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:17
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'x%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? '' nidx:-1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'y%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'AT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'x%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     i rq:i 'y%'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_FUNCTION     v rq:v 'AT'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
(process_expression_types) 
==INFIX==

Var: x% ary:0 NumIdx:0
infix_stack_push: 'x%'
Var: y% ary:0 NumIdx:0
infix_stack_push: 'y%'
infix_stack_pop: 'y%'
infix_stack_pop: 'x%'
infix_stack_push: 'AT(x% y% )'
infix_stack_pop: 'AT(x% y% )'
(process_expression_types) ==AT(x% y% )==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     i rq:i x%  0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_START    U rq:?   0:
(    output_qcode) N4 EXP_BUFF_ID_VARIABLE     i rq:i y%  0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_FUNCTION     v rq:v AT  0:
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:i   0:

 (check_literal) check_literal:lit=':' idx=13 ':PRINT CHR$(158) '
 (check_literal) check_literal:After drop space:':' idx=13 ':PRINT CHR$(158) '
 (check_literal) check_literal:After while():PRINT CHR$(158) 
 (check_literal) check_literal:ret1 

 (scan_literal) scan_literal:lit=':' 'PRINT CHR$(158) '
 (scan_literal) scan_literal:After drop space:'PRINT CHR$(158) '
 (scan_literal) scan_literal:while loop:PRINT CHR$(158) 
 (scan_literal) scan_literal:ret1

 (check_line) check_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'PRINT CHR$(158) ':
    (check_vname) check_vname ret1 ' CHR$(158) ':
   (check_variable) check_variable: ' CHR$(158) '
   (check_variable) check_variable: Ary test ' CHR$(158) '

    (check_literal) check_literal:lit='(' idx=19 ' CHR$(158) '
    (check_literal) check_literal:After drop space:'(' idx=19 ' CHR$(158) '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=19 ' CHR$(158) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=20 'CHR$(158) '
  (check_literal)   '=' != 'C'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'PRINT CHR$(158) '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'PRINT'
(check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=11, ' CHR$(158) '
========================================================
    AT x%,y% :PRINT CHR$(158) 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'PRINT CHR$(158) ':
    (check_vname) check_vname ret1 ' CHR$(158) ':
   (check_variable) check_variable: ' CHR$(158) '
   (check_variable) check_variable: Ary test ' CHR$(158) '

    (check_literal) check_literal:lit='(' idx=19 ' CHR$(158) '
    (check_literal) check_literal:After drop space:'(' idx=19 ' CHR$(158) '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=19 ' CHR$(158) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=20 'CHR$(158) '
  (check_literal)   '=' != 'C'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'PRINT CHR$(158) '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'PRINT'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'PRINT' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) PRINT is function
 (function_return_type) 
function_return_type: 'PRINT' =>v
 (function_return_type) 
function_return_type: 'PRINT' =>17
process_token: 'PRINT' t=>v
 Push:'PRINT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' CHR$(158) '

   (check_eitem) check_eitem: 'CHR$(158) '

    (check_operator) check_operator: CHR$(158) 

     (check_literal) check_literal:lit=' ,' idx=20 'CHR$(158) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=20 'CHR$(158) '
     (check_literal)   ',' != 'C'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'CHR$(158) '
    (check_function) check_function: ret1 Found fn=>'CHR$'
   (check_eitem) check_eitem:ret1

   (scan_eitem) scan_eitem:

    (check_operator) check_operator: CHR$(158) 

     (check_literal) check_literal:lit=' ,' idx=20 'CHR$(158) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=20 'CHR$(158) '
     (check_literal)   ',' != 'C'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'CHR$(158) '
    (check_function) check_function: ret1 Found fn=>'CHR$'

    (scan_function) scan_function:
   Frst:0 T:'CHR$' exptype:U
    (token_is_function) 
token_is_function:
    (token_is_function) CHR$ is function
    (function_return_type) 
function_return_type: 'CHR$' =>s
    (function_return_type) 
function_return_type: 'CHR$' =>2
process_token: 'CHR$' t=>s
 Push:'CHR$'
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (3)

    (op_stack_print) 
000: PRINT type:17
    (op_stack_print) 
001: ( type:16
    (op_stack_print) 
002: CHR$ type:2
    (op_stack_print) 
------------------

    (scan_expression) n commas now:0

     (check_eitem) check_eitem: '(158) '

      (check_operator) check_operator: (158) 

       (check_literal) check_literal:lit=' ,' idx=24 '(158) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=24 '(158) '
       (check_literal)   ',' != '('
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: '(158) '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=24 '(158) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=24 '(158) '
       (check_literal)   '%' != '('
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=24 '(158) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=24 '(158) '
       (check_literal)   '"' != '('
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '(158) '
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname '(158) ':
        (check_vname) check_vname ret0 '(158) ':
       (check_variable) check_variable:ret0 
      (check_atom) check_atom:ret1

      (check_sub_expr) check_sub_expr:

       (check_literal) check_literal:lit=' (' idx=24 '(158) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'(' idx=24 '(158) '
       (check_literal) check_literal:After while():158) 
       (check_literal) check_literal:ret1 
      (check_sub_expr) check_sub_expr: ret1
     (check_eitem) check_eitem:ret1

     (scan_eitem) scan_eitem:

      (check_operator) check_operator: (158) 

       (check_literal) check_literal:lit=' ,' idx=24 '(158) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=24 '(158) '
       (check_literal)   ',' != '('
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: '(158) '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=24 '(158) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=24 '(158) '
       (check_literal)   '%' != '('
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=24 '(158) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=24 '(158) '
       (check_literal)   '"' != '('
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '(158) '
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname '(158) ':
        (check_vname) check_vname ret0 '(158) ':
       (check_variable) check_variable:ret0 
      (check_atom) check_atom:ret1

      (check_sub_expr) check_sub_expr:

       (check_literal) check_literal:lit=' (' idx=24 '(158) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'(' idx=24 '(158) '
       (check_literal) check_literal:After while():158) 
       (check_literal) check_literal:ret1 
      (check_sub_expr) check_sub_expr: ret1

      (scan_sub_expr) scan_sub_expr:

       (scan_literal) scan_literal:lit=' (' '(158) '
       (scan_literal) scan_literal:After drop space:'(158) '
       (scan_literal) scan_literal:while loop:(158) 
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (4)

       (op_stack_print) 
000: PRINT type:17
       (op_stack_print) 
001: ( type:16
       (op_stack_print) 
002: CHR$ type:2
       (op_stack_print) 
003: ( type:16
       (op_stack_print) 
------------------

       (scan_literal) scan_literal:ret1
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (5)

      (op_stack_print) 
000: PRINT type:17
      (op_stack_print) 
001: ( type:16
      (op_stack_print) 
002: CHR$ type:2
      (op_stack_print) 
003: ( type:16
      (op_stack_print) 
004: ( type:16
      (op_stack_print) 
------------------


       (scan_expression) scan_expression: '158) '

        (check_eitem) check_eitem: '158) '

         (check_operator) check_operator: 158) 

          (check_literal) check_literal:lit=' ,' idx=25 '158) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:',' idx=25 '158) '
          (check_literal)   ',' != '1'
          (check_literal) check_literal: ret0
         (check_operator) ret0:is comma: 0

         (check_function) check_function: '158) '
         (check_function) check_function: ret0

         (check_atom) check_atom:

          (check_literal) check_literal:lit=' %' idx=25 '158) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=25 '158) '
          (check_literal)   '%' != '1'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=25 '158) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=25 '158) '
          (check_literal)   '"' != '1'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '158) '
           (check_integer) check_integer:ret1
          (check_number) check_number: ret1
         (check_atom) check_atom:ret1
        (check_eitem) check_eitem:ret1

        (scan_eitem) scan_eitem:

         (check_operator) check_operator: 158) 

          (check_literal) check_literal:lit=' ,' idx=25 '158) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:',' idx=25 '158) '
          (check_literal)   ',' != '1'
          (check_literal) check_literal: ret0
         (check_operator) ret0:is comma: 0

         (check_function) check_function: '158) '
         (check_function) check_function: ret0

         (check_atom) check_atom:

          (check_literal) check_literal:lit=' %' idx=25 '158) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=25 '158) '
          (check_literal)   '%' != '1'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=25 '158) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=25 '158) '
          (check_literal)   '"' != '1'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '158) '
           (check_integer) check_integer:ret1
          (check_number) check_number: ret1
         (check_atom) check_atom:ret1

         (scan_atom) scan_atom:

          (check_literal) check_literal:lit=' %' idx=25 '158) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=25 '158) '
          (check_literal)   '%' != '1'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=25 '158) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=25 '158) '
          (check_literal)   '"' != '1'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '158) '
           (check_integer) check_integer:ret1
          (check_number) check_number: ret1

          (scan_number) scan_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '158) '
           (check_integer) check_integer:ret1

           (scan_integer) scan_integer:
           (scan_integer) scan_integer:ret1
   Frst:0 T:'158' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U U U )] i i 158
          (scan_integer) scan_integer:ret1  158
         (scan_atom) scan_atom:ret1
        (scan_expression) n commas now:0

         (check_eitem) check_eitem: ') '

          (check_operator) check_operator: ) 

           (check_literal) check_literal:lit=' ,' idx=28 ') '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:',' idx=28 ') '
           (check_literal)   ',' != ')'
           (check_literal) check_literal: ret0
          (check_operator) ret0:is comma: 0

          (check_function) check_function: ') '
          (check_function) check_function: ret0

          (check_atom) check_atom:

           (check_literal) check_literal:lit=' %' idx=28 ') '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'%' idx=28 ') '
           (check_literal)   '%' != ')'
           (check_literal) check_literal: ret0

           (check_literal) check_literal:lit=' "' idx=28 ') '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'"' idx=28 ') '
           (check_literal)   '"' != ')'
           (check_literal) check_literal: ret0

           (check_number) check_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret0

            (check_integer) check_integer: ') '
            (check_integer) check_integer:ret0
           (check_number) check_number: ret0

           (check_variable) check_variable:

            (check_vname) check_vname ') ':
            (check_vname) check_vname ret0 ') ':
           (check_variable) check_variable:ret0 
          (check_atom) check_atom:ret1

          (check_sub_expr) check_sub_expr:

           (check_literal) check_literal:lit=' (' idx=28 ') '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'(' idx=28 ') '
           (check_literal)   '(' != ')'
           (check_literal) check_literal: ret0
          (check_sub_expr) check_sub_expr: ret0
         (check_eitem) check_eitem:ret0
        (scan_expression) scan_expression: ret1 ') ' commas:0

        (scan_literal) scan_literal:lit=' )' ') '
        (scan_literal) scan_literal:After drop space:') '
        (scan_literal) scan_literal:while loop:) 
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
        (op_stack_print) 
------------------
        (op_stack_print) 
Operator Stack     (4)

        (op_stack_print) 
000: PRINT type:17
        (op_stack_print) 
001: ( type:16
        (op_stack_print) 
002: CHR$ type:2
        (op_stack_print) 
003: ( type:16
        (op_stack_print) 
------------------

(  output_sub_end)
        (token_is_function) 
token_is_function:
        (token_is_function) 
token_is_function:( is not function
(  output_sub_end)
        (scan_literal) scan_literal:ret1
   Frst:0 T:')' exptype:U
Pop 4
Pop '('
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (3)

       (op_stack_print) 
000: PRINT type:17
       (op_stack_print) 
001: ( type:16
       (op_stack_print) 
002: CHR$ type:2
       (op_stack_print) 
------------------

(  output_sub_end)
       (token_is_function) 
token_is_function:
       (token_is_function) CHR$ is function
Pop 5
Pop 'CHR$'
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (2)

       (op_stack_print) 
000: PRINT type:17
       (op_stack_print) 
001: ( type:16
       (op_stack_print) 
------------------

( output_function) [U,(U U )] s s CHR$
(  output_sub_end)
       (scan_sub_expr) scan_sub_expr:ret1
      (scan_expression) n commas now:0

       (check_eitem) check_eitem: ' '

        (check_operator) check_operator:  

         (check_literal) check_literal:lit=' ,' idx=30 ''
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:',' idx=30 ''
         (check_literal) check_literal  ret0 Empty test string
        (check_operator) ret0:is comma: 0

        (check_function) check_function: ''
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=29 ' '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=30 ''
         (check_literal) check_literal  ret0 Empty test string

         (check_literal) check_literal:lit=' "' idx=29 ' '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=30 ''
         (check_literal) check_literal  ret0 Empty test string

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: ''
          (check_integer) check_integer:ret0
         (check_number) check_number: ret0

         (check_variable) check_variable:

          (check_vname) check_vname '':
          (check_vname) check_vname ret0 '':
         (check_variable) check_variable:ret0 
        (check_atom) check_atom:ret1

        (check_sub_expr) check_sub_expr:

         (check_literal) check_literal:lit=' (' idx=29 ' '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'(' idx=30 ''
         (check_literal) check_literal  ret0 Empty test string
        (check_sub_expr) check_sub_expr: ret0
       (check_eitem) check_eitem:ret0
      (scan_expression) scan_expression: ret1 ' ' commas:0
     (scan_command) scan_command: ret1 =>'PRINT'
    (scan_command) 
ENDEXP
   Frst:0 T:')' exptype:U
Pop 4
Pop '('
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (1)

    (op_stack_print) 
000: PRINT type:17
    (op_stack_print) 
------------------

(  output_sub_end)
    (token_is_function) 
token_is_function:
    (token_is_function) PRINT is function
Pop 5
Pop 'PRINT'
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (0)

    (op_stack_print) 
------------------

( output_function) [U,(U )] v v PRINT
(  output_sub_end)
Finalise stack
    (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '158' nidx:28  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     s rq:s 'CHR$' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
 BE:

Type Check Stack (0)

 BE:

Type Check Stack (0)

 BE:

Type Check Stack (0)

 BE:158
type_check_stack_push: '158'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (1)

    (type_check_stack_print) 
000: '158' type:0
    (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '158' type:i (0)
 BE:

Type Check Stack (1)

000: '158' type:i (0)
 BE:

Type Check Stack (1)

000: '158' type:i (0)
 BE:

Type Check Stack (1)

000: '158' type:i (0)
 BE:CHR$
FN: 1 args
    (function_return_type) 
function_return_type: 'CHR$' =>s
    (function_return_type) 
function_return_type: 'CHR$' =>2
ret_type;2 s
typecheck_expression:Ret type of CHR$ : s
type_check_stack_pop: '158'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (0)

    (type_check_stack_print) 
------------------

FN ARG 0 ri 158 0(i)  Arg ok
type_check_stack_push: '000'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (1)

    (type_check_stack_print) 
000: '000' type:2
    (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:s (2)
 BE:

Type Check Stack (1)

000: '000' type:s (2)
 BE:

Type Check Stack (1)

000: '000' type:s (2)
 BE:PRINT
FN: 1 args
    (function_return_type) 
function_return_type: 'PRINT' =>v
    (function_return_type) 
function_return_type: 'PRINT' =>17
ret_type;17 v
typecheck_expression:Ret type of PRINT : v
type_check_stack_pop: '000'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (0)

    (type_check_stack_print) 
------------------

FN ARG 0 ri 000 2(s)  Arg not OK
type_check_stack_push: '000'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (1)

    (type_check_stack_print) 
000: '000' type:17
    (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '158' nidx:28  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     s rq:s 'CHR$' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_INTEGER      i rq:i '158'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_FUNCTION     s rq:s 'CHR$'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
(dump_exp_buffer2) N12 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
    (process_expression_types) 
==INFIX==

infix_stack_push: '158'
infix_stack_pop: '158'
infix_stack_push: 'CHR$(158 )'
infix_stack_pop: 'CHR$(158 )'
infix_stack_push: 'PRINT(CHR$(158 ) )'
infix_stack_pop: 'PRINT(CHR$(158 ) )'
    (process_expression_types) ==PRINT(CHR$(158 ) )==
    (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N4 EXP_BUFF_ID_INTEGER      i rq:i 158  0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N8 EXP_BUFF_ID_FUNCTION     s rq:s CHR$  0:
(    output_qcode) N9 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N10 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N11 EXP_BUFF_ID_FUNCTION     v rq:v PRINT  0:
(    output_qcode) N12 EXP_BUFF_ID_SUB_END      U rq:i   0:

     (check_literal) check_literal:lit=':' idx=30 ''
     (check_literal) check_literal:After drop space:':' idx=30 ''
     (check_literal) check_literal  ret0 Empty test string
    (translate_file) 
cline scanned OK
*****************************************
**    y%=y%+1 :AT x%,y% :PRINT CHR$(7) **
*****************************************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'y%=y%+1 :AT x%,y% :PRINT CHR$(7) ':
     (check_vname) check_vname ret1 '%=y%+1 :AT x%,y% :PRINT CHR$(7) ':
    (check_variable) check_variable: '%=y%+1 :AT x%,y% :PRINT CHR$(7) '
    (check_variable) check_variable: Ary test '=y%+1 :AT x%,y% :PRINT CHR$(7) '

     (check_literal) check_literal:lit='(' idx=6 '=y%+1 :AT x%,y% :PRINT CHR$(7) '
     (check_literal) check_literal:After drop space:'(' idx=6 '=y%+1 :AT x%,y% :PRINT CHR$(7) '
     (check_literal)   '(' != '='
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=6 '=y%+1 :AT x%,y% :PRINT CHR$(7) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=6 '=y%+1 :AT x%,y% :PRINT CHR$(7) '
   (check_literal) check_literal:After while():y%+1 :AT x%,y% :PRINT CHR$(7) 
   (check_literal) check_literal:ret1 

   (check_expression) check_expression: 'y%+1 :AT x%,y% :PRINT CHR$(7) '

    (check_eitem) check_eitem: 'y%+1 :AT x%,y% :PRINT CHR$(7) '

     (check_operator) check_operator: y%+1 :AT x%,y% :PRINT CHR$(7) 

      (check_literal) check_literal:lit=' ,' idx=7 'y%+1 :AT x%,y% :PRINT CHR$(7) '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=7 'y%+1 :AT x%,y% :PRINT CHR$(7) '
      (check_literal)   ',' != 'y'
      (check_literal) check_literal: ret0
     (check_operator) ret0:is comma: 0

     (check_function) check_function: 'y%+1 :AT x%,y% :PRINT CHR$(7) '
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=7 'y%+1 :AT x%,y% :PRINT CHR$(7) '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=7 'y%+1 :AT x%,y% :PRINT CHR$(7) '
      (check_literal)   '%' != 'y'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=7 'y%+1 :AT x%,y% :PRINT CHR$(7) '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=7 'y%+1 :AT x%,y% :PRINT CHR$(7) '
      (check_literal)   '"' != 'y'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: 'y%+1 :AT x%,y% :PRINT CHR$(7) '
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname 'y%+1 :AT x%,y% :PRINT CHR$(7) ':
       (check_vname) check_vname ret1 '%+1 :AT x%,y% :PRINT CHR$(7) ':
      (check_variable) check_variable: '%+1 :AT x%,y% :PRINT CHR$(7) '
      (check_variable) check_variable: Ary test '+1 :AT x%,y% :PRINT CHR$(7) '

       (check_literal) check_literal:lit='(' idx=9 '+1 :AT x%,y% :PRINT CHR$(7) '
       (check_literal) check_literal:After drop space:'(' idx=9 '+1 :AT x%,y% :PRINT CHR$(7) '
       (check_literal)   '(' != '+'
       (check_literal) check_literal: ret0
      (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
     (check_variable) check_variable:ret1 
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: '+1 :AT x%,y% :PRINT CHR$(7) '

    (check_operator) check_operator: +1 :AT x%,y% :PRINT CHR$(7) 

     (check_literal) check_literal:lit=' ,' idx=9 '+1 :AT x%,y% :PRINT CHR$(7) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=9 '+1 :AT x%,y% :PRINT CHR$(7) '
     (check_literal)   ',' != '+'
     (check_literal) check_literal: ret0
    (check_operator) ret1:is comma: 0
   (check_eitem) check_eitem:ret1 comma:1

   (check_eitem) check_eitem: '1 :AT x%,y% :PRINT CHR$(7) '

    (check_operator) check_operator: 1 :AT x%,y% :PRINT CHR$(7) 

     (check_literal) check_literal:lit=' ,' idx=10 '1 :AT x%,y% :PRINT CHR$(7) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=10 '1 :AT x%,y% :PRINT CHR$(7) '
     (check_literal)   ',' != '1'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: '1 :AT x%,y% :PRINT CHR$(7) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=10 '1 :AT x%,y% :PRINT CHR$(7) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=10 '1 :AT x%,y% :PRINT CHR$(7) '
     (check_literal)   '%' != '1'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=10 '1 :AT x%,y% :PRINT CHR$(7) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=10 '1 :AT x%,y% :PRINT CHR$(7) '
     (check_literal)   '"' != '1'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '1 :AT x%,y% :PRINT CHR$(7) '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: ' :AT x%,y% :PRINT CHR$(7) '

    (check_operator) check_operator:  :AT x%,y% :PRINT CHR$(7) 

     (check_literal) check_literal:lit=' ,' idx=12 ':AT x%,y% :PRINT CHR$(7) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=12 ':AT x%,y% :PRINT CHR$(7) '
     (check_literal)   ',' != ':'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: ':AT x%,y% :PRINT CHR$(7) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=11 ' :AT x%,y% :PRINT CHR$(7) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=12 ':AT x%,y% :PRINT CHR$(7) '
     (check_literal)   '%' != ':'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=11 ' :AT x%,y% :PRINT CHR$(7) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=12 ':AT x%,y% :PRINT CHR$(7) '
     (check_literal)   '"' != ':'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: ':AT x%,y% :PRINT CHR$(7) '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname ':AT x%,y% :PRINT CHR$(7) ':
      (check_vname) check_vname ret0 ':AT x%,y% :PRINT CHR$(7) ':
     (check_variable) check_variable:ret0 
    (check_atom) check_atom:ret1

    (check_sub_expr) check_sub_expr:

     (check_literal) check_literal:lit=' (' idx=11 ' :AT x%,y% :PRINT CHR$(7) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'(' idx=12 ':AT x%,y% :PRINT CHR$(7) '
     (check_literal)   '(' != ':'
     (check_literal) check_literal: ret0
    (check_sub_expr) check_sub_expr: ret0
   (check_eitem) check_eitem:ret0
  (check_expression) check_expression:ret1 ' :AT x%,y% :PRINT CHR$(7) '
 (check_assignment) check_assignment:ret1
(check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=26, ' :AT x%,y% :PRINT CHR$(7) '
========================================================
    y%=y%+1 :AT x%,y% :PRINT CHR$(7) 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'y%=y%+1 :AT x%,y% :PRINT CHR$(7) ':
    (check_vname) check_vname ret1 '%=y%+1 :AT x%,y% :PRINT CHR$(7) ':
   (check_variable) check_variable: '%=y%+1 :AT x%,y% :PRINT CHR$(7) '
   (check_variable) check_variable: Ary test '=y%+1 :AT x%,y% :PRINT CHR$(7) '

    (check_literal) check_literal:lit='(' idx=6 '=y%+1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal) check_literal:After drop space:'(' idx=6 '=y%+1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal)   '(' != '='
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=6 '=y%+1 :AT x%,y% :PRINT CHR$(7) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=6 '=y%+1 :AT x%,y% :PRINT CHR$(7) '
  (check_literal) check_literal:After while():y%+1 :AT x%,y% :PRINT CHR$(7) 
  (check_literal) check_literal:ret1 

  (check_expression) check_expression: 'y%+1 :AT x%,y% :PRINT CHR$(7) '

   (check_eitem) check_eitem: 'y%+1 :AT x%,y% :PRINT CHR$(7) '

    (check_operator) check_operator: y%+1 :AT x%,y% :PRINT CHR$(7) 

     (check_literal) check_literal:lit=' ,' idx=7 'y%+1 :AT x%,y% :PRINT CHR$(7) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=7 'y%+1 :AT x%,y% :PRINT CHR$(7) '
     (check_literal)   ',' != 'y'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'y%+1 :AT x%,y% :PRINT CHR$(7) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=7 'y%+1 :AT x%,y% :PRINT CHR$(7) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=7 'y%+1 :AT x%,y% :PRINT CHR$(7) '
     (check_literal)   '%' != 'y'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=7 'y%+1 :AT x%,y% :PRINT CHR$(7) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=7 'y%+1 :AT x%,y% :PRINT CHR$(7) '
     (check_literal)   '"' != 'y'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'y%+1 :AT x%,y% :PRINT CHR$(7) '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'y%+1 :AT x%,y% :PRINT CHR$(7) ':
      (check_vname) check_vname ret1 '%+1 :AT x%,y% :PRINT CHR$(7) ':
     (check_variable) check_variable: '%+1 :AT x%,y% :PRINT CHR$(7) '
     (check_variable) check_variable: Ary test '+1 :AT x%,y% :PRINT CHR$(7) '

      (check_literal) check_literal:lit='(' idx=9 '+1 :AT x%,y% :PRINT CHR$(7) '
      (check_literal) check_literal:After drop space:'(' idx=9 '+1 :AT x%,y% :PRINT CHR$(7) '
      (check_literal)   '(' != '+'
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (check_eitem) check_eitem: '+1 :AT x%,y% :PRINT CHR$(7) '

   (check_operator) check_operator: +1 :AT x%,y% :PRINT CHR$(7) 

    (check_literal) check_literal:lit=' ,' idx=9 '+1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=9 '+1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal)   ',' != '+'
    (check_literal) check_literal: ret0
   (check_operator) ret1:is comma: 0
  (check_eitem) check_eitem:ret1 comma:1

  (check_eitem) check_eitem: '1 :AT x%,y% :PRINT CHR$(7) '

   (check_operator) check_operator: 1 :AT x%,y% :PRINT CHR$(7) 

    (check_literal) check_literal:lit=' ,' idx=10 '1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=10 '1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal)   ',' != '1'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: '1 :AT x%,y% :PRINT CHR$(7) '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=10 '1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=10 '1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=10 '1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=10 '1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '1 :AT x%,y% :PRINT CHR$(7) '
     (check_integer) check_integer:ret1
    (check_number) check_number: ret1
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (check_eitem) check_eitem: ' :AT x%,y% :PRINT CHR$(7) '

   (check_operator) check_operator:  :AT x%,y% :PRINT CHR$(7) 

    (check_literal) check_literal:lit=' ,' idx=12 ':AT x%,y% :PRINT CHR$(7) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=12 ':AT x%,y% :PRINT CHR$(7) '
    (check_literal)   ',' != ':'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: ':AT x%,y% :PRINT CHR$(7) '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=11 ' :AT x%,y% :PRINT CHR$(7) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=12 ':AT x%,y% :PRINT CHR$(7) '
    (check_literal)   '%' != ':'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=11 ' :AT x%,y% :PRINT CHR$(7) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=12 ':AT x%,y% :PRINT CHR$(7) '
    (check_literal)   '"' != ':'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: ':AT x%,y% :PRINT CHR$(7) '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname ':AT x%,y% :PRINT CHR$(7) ':
     (check_vname) check_vname ret0 ':AT x%,y% :PRINT CHR$(7) ':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret1

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=11 ' :AT x%,y% :PRINT CHR$(7) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=12 ':AT x%,y% :PRINT CHR$(7) '
    (check_literal)   '(' != ':'
    (check_literal) check_literal: ret0
   (check_sub_expr) check_sub_expr: ret0
  (check_eitem) check_eitem:ret0
 (check_expression) check_expression:ret1 ' :AT x%,y% :PRINT CHR$(7) '
(check_assignment) check_assignment:ret1

 (scan_assignment) scan_assignment:

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'y%=y%+1 :AT x%,y% :PRINT CHR$(7) '
   (scan_vname) scan_vname: ret1 'y'
  (scan_variable) scan_variable: '%=y%+1 :AT x%,y% :PRINT CHR$(7) ' vname='y'
  (scan_variable) scan_variable: Ary test '=y%+1 :AT x%,y% :PRINT CHR$(7) '

   (check_literal) check_literal:lit='(' idx=6 '=y%+1 :AT x%,y% :PRINT CHR$(7) '
   (check_literal) check_literal:After drop space:'(' idx=6 '=y%+1 :AT x%,y% :PRINT CHR$(7) '
   (check_literal)   '(' != '='
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='y%' is str:0 int:1 flt:0 ary:0
   Frst:1 T:'y%' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:y% is not function
token_is_variable: tok:'y%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:y% is not function
 (init_get_name) 
init_get_name:'y%'
 (init_get_name) 
init_get_name:'y%'
 (get_name) 
get_name:gn:'y%'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] i i y%
 (print_var_info) 
VAR INFO: '                y%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0

  (scan_assignment_equals) scan_assignment_equals:lit=' =' '=y%+1 :AT x%,y% :PRINT CHR$(7) '
  (scan_assignment_equals) scan_assignment_equals:After drop space:'=y%+1 :AT x%,y% :PRINT CHR$(7) '
  (scan_assignment_equals) scan_assignment_equals:while loop:=y%+1 :AT x%,y% :PRINT CHR$(7) 
   Frst:0 T:':=' exptype:i
  (operator_precedence) 
:= is operator
':=' is operator
  (process_token) 
Token is operator o1 name::= o2 name:
  (process_token) 
opr1:1 opr2:0
Push 1
 Push:':='
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (1)

  (op_stack_print) 
000: := type:0
  (op_stack_print) 
------------------

  (scan_assignment_equals) scan_assignment_equals:ret1

  (scan_expression) scan_expression: 'y%+1 :AT x%,y% :PRINT CHR$(7) '

   (check_eitem) check_eitem: 'y%+1 :AT x%,y% :PRINT CHR$(7) '

    (check_operator) check_operator: y%+1 :AT x%,y% :PRINT CHR$(7) 

     (check_literal) check_literal:lit=' ,' idx=7 'y%+1 :AT x%,y% :PRINT CHR$(7) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=7 'y%+1 :AT x%,y% :PRINT CHR$(7) '
     (check_literal)   ',' != 'y'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'y%+1 :AT x%,y% :PRINT CHR$(7) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=7 'y%+1 :AT x%,y% :PRINT CHR$(7) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=7 'y%+1 :AT x%,y% :PRINT CHR$(7) '
     (check_literal)   '%' != 'y'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=7 'y%+1 :AT x%,y% :PRINT CHR$(7) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=7 'y%+1 :AT x%,y% :PRINT CHR$(7) '
     (check_literal)   '"' != 'y'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'y%+1 :AT x%,y% :PRINT CHR$(7) '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'y%+1 :AT x%,y% :PRINT CHR$(7) ':
      (check_vname) check_vname ret1 '%+1 :AT x%,y% :PRINT CHR$(7) ':
     (check_variable) check_variable: '%+1 :AT x%,y% :PRINT CHR$(7) '
     (check_variable) check_variable: Ary test '+1 :AT x%,y% :PRINT CHR$(7) '

      (check_literal) check_literal:lit='(' idx=9 '+1 :AT x%,y% :PRINT CHR$(7) '
      (check_literal) check_literal:After drop space:'(' idx=9 '+1 :AT x%,y% :PRINT CHR$(7) '
      (check_literal)   '(' != '+'
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator: y%+1 :AT x%,y% :PRINT CHR$(7) 

    (check_literal) check_literal:lit=' ,' idx=7 'y%+1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=7 'y%+1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal)   ',' != 'y'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'y%+1 :AT x%,y% :PRINT CHR$(7) '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=7 'y%+1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=7 'y%+1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal)   '%' != 'y'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=7 'y%+1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=7 'y%+1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal)   '"' != 'y'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'y%+1 :AT x%,y% :PRINT CHR$(7) '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'y%+1 :AT x%,y% :PRINT CHR$(7) ':
     (check_vname) check_vname ret1 '%+1 :AT x%,y% :PRINT CHR$(7) ':
    (check_variable) check_variable: '%+1 :AT x%,y% :PRINT CHR$(7) '
    (check_variable) check_variable: Ary test '+1 :AT x%,y% :PRINT CHR$(7) '

     (check_literal) check_literal:lit='(' idx=9 '+1 :AT x%,y% :PRINT CHR$(7) '
     (check_literal) check_literal:After drop space:'(' idx=9 '+1 :AT x%,y% :PRINT CHR$(7) '
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1

  (scan_atom) scan_atom:

   (check_literal) check_literal:lit=' %' idx=7 'y%+1 :AT x%,y% :PRINT CHR$(7) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=7 'y%+1 :AT x%,y% :PRINT CHR$(7) '
   (check_literal)   '%' != 'y'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=7 'y%+1 :AT x%,y% :PRINT CHR$(7) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=7 'y%+1 :AT x%,y% :PRINT CHR$(7) '
   (check_literal)   '"' != 'y'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'y%+1 :AT x%,y% :PRINT CHR$(7) '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'y%+1 :AT x%,y% :PRINT CHR$(7) ':
    (check_vname) check_vname ret1 '%+1 :AT x%,y% :PRINT CHR$(7) ':
   (check_variable) check_variable: '%+1 :AT x%,y% :PRINT CHR$(7) '
   (check_variable) check_variable: Ary test '+1 :AT x%,y% :PRINT CHR$(7) '

    (check_literal) check_literal:lit='(' idx=9 '+1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal) check_literal:After drop space:'(' idx=9 '+1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal)   '(' != '+'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'y%+1 :AT x%,y% :PRINT CHR$(7) '
   (scan_vname) scan_vname: ret1 'y'
  (scan_variable) scan_variable: '%+1 :AT x%,y% :PRINT CHR$(7) ' vname='y'
  (scan_variable) scan_variable: Ary test '+1 :AT x%,y% :PRINT CHR$(7) '

   (check_literal) check_literal:lit='(' idx=9 '+1 :AT x%,y% :PRINT CHR$(7) '
   (check_literal) check_literal:After drop space:'(' idx=9 '+1 :AT x%,y% :PRINT CHR$(7) '
   (check_literal)   '(' != '+'
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='y%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'y%' exptype:i
 (operator_precedence) 
:= is operator
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:y% is not function
token_is_variable: tok:'y%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:y% is not function
 (init_get_name) 
init_get_name:'y%'
 (init_get_name) 
init_get_name:'y%'
 (get_name) 
get_name:gn:'y%'
process_token:type:i req_type:i
modify_expression_type:Inittype:i Intype:i Outtype:i
( output_variable) [i,()] i i y%
 (print_var_info) 
VAR INFO: '                y%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
 (scan_atom) scan_atom:ret1
(scan_expression) n commas now:0

 (check_eitem) check_eitem: '+1 :AT x%,y% :PRINT CHR$(7) '

  (check_operator) check_operator: +1 :AT x%,y% :PRINT CHR$(7) 

   (check_literal) check_literal:lit=' ,' idx=9 '+1 :AT x%,y% :PRINT CHR$(7) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=9 '+1 :AT x%,y% :PRINT CHR$(7) '
   (check_literal)   ',' != '+'
   (check_literal) check_literal: ret0
  (check_operator) ret1:is comma: 0
 (check_eitem) check_eitem:ret1 comma:1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: +1 :AT x%,y% :PRINT CHR$(7) 

   (check_literal) check_literal:lit=' ,' idx=9 '+1 :AT x%,y% :PRINT CHR$(7) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=9 '+1 :AT x%,y% :PRINT CHR$(7) '
   (check_literal)   ',' != '+'
   (check_literal) check_literal: ret0
  (check_operator) ret1:is comma: 0

  (scan_operator) scan_operator: '+1 :AT x%,y% :PRINT CHR$(7) '

   (check_literal) check_literal:lit=' ,' idx=9 '+1 :AT x%,y% :PRINT CHR$(7) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=9 '+1 :AT x%,y% :PRINT CHR$(7) '
   (check_literal)   ',' != '+'
   (check_literal) check_literal: ret0
  (scan_operator) scan_operator: ret1 '1 :AT x%,y% :PRINT CHR$(7) '
   Frst:0 T:'+' exptype:i
 (operator_precedence) 
+ is operator
 (operator_precedence) 
:= is operator
'+' is operator
 (process_token) 
Token is operator o1 name:+ o2 name::=
 (process_token) 
opr1:3 opr2:1
 (operator_precedence) 
:= is operator
 (operator_precedence) 
:= is operator
Push 1
 Push:'+'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: := type:0
 (op_stack_print) 
001: + type:0
 (op_stack_print) 
------------------

 (scan_eitem) Is comma;0
 (scan_expression) n commas now:0

  (check_eitem) check_eitem: '1 :AT x%,y% :PRINT CHR$(7) '

   (check_operator) check_operator: 1 :AT x%,y% :PRINT CHR$(7) 

    (check_literal) check_literal:lit=' ,' idx=10 '1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=10 '1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal)   ',' != '1'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: '1 :AT x%,y% :PRINT CHR$(7) '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=10 '1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=10 '1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=10 '1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=10 '1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '1 :AT x%,y% :PRINT CHR$(7) '
     (check_integer) check_integer:ret1
    (check_number) check_number: ret1
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator: 1 :AT x%,y% :PRINT CHR$(7) 

    (check_literal) check_literal:lit=' ,' idx=10 '1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=10 '1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal)   ',' != '1'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: '1 :AT x%,y% :PRINT CHR$(7) '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=10 '1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=10 '1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=10 '1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=10 '1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '1 :AT x%,y% :PRINT CHR$(7) '
     (check_integer) check_integer:ret1
    (check_number) check_number: ret1
   (check_atom) check_atom:ret1

   (scan_atom) scan_atom:

    (check_literal) check_literal:lit=' %' idx=10 '1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=10 '1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=10 '1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=10 '1 :AT x%,y% :PRINT CHR$(7) '
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '1 :AT x%,y% :PRINT CHR$(7) '
     (check_integer) check_integer:ret1
    (check_number) check_number: ret1

    (scan_number) scan_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '1 :AT x%,y% :PRINT CHR$(7) '
     (check_integer) check_integer:ret1

     (scan_integer) scan_integer:
     (scan_integer) scan_integer:ret1
   Frst:0 T:'1' exptype:i
    (operator_precedence) 
+ is operator
modify_expression_type:Inittype:i Intype:i Outtype:i
(  output_integer) [i,()] i i 1
    (scan_integer) scan_integer:ret1  1
   (scan_atom) scan_atom:ret1
  (scan_expression) n commas now:0

   (check_eitem) check_eitem: ' :AT x%,y% :PRINT CHR$(7) '

    (check_operator) check_operator:  :AT x%,y% :PRINT CHR$(7) 

     (check_literal) check_literal:lit=' ,' idx=12 ':AT x%,y% :PRINT CHR$(7) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=12 ':AT x%,y% :PRINT CHR$(7) '
     (check_literal)   ',' != ':'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: ':AT x%,y% :PRINT CHR$(7) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=11 ' :AT x%,y% :PRINT CHR$(7) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=12 ':AT x%,y% :PRINT CHR$(7) '
     (check_literal)   '%' != ':'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=11 ' :AT x%,y% :PRINT CHR$(7) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=12 ':AT x%,y% :PRINT CHR$(7) '
     (check_literal)   '"' != ':'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: ':AT x%,y% :PRINT CHR$(7) '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname ':AT x%,y% :PRINT CHR$(7) ':
      (check_vname) check_vname ret0 ':AT x%,y% :PRINT CHR$(7) ':
     (check_variable) check_variable:ret0 
    (check_atom) check_atom:ret1

    (check_sub_expr) check_sub_expr:

     (check_literal) check_literal:lit=' (' idx=11 ' :AT x%,y% :PRINT CHR$(7) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'(' idx=12 ':AT x%,y% :PRINT CHR$(7) '
     (check_literal)   '(' != ':'
     (check_literal) check_literal: ret0
    (check_sub_expr) check_sub_expr: ret0
   (check_eitem) check_eitem:ret0
  (scan_expression) scan_expression: ret1 ' :AT x%,y% :PRINT CHR$(7) ' commas:0
 (scan_assignment) scan_assignment: ret1
Finalise stack
Pop '+'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: := type:0
(op_stack_print) 
------------------

( output_operator) [i,()] i i +
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:+ is not function
Pop ':='
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_operator) [i,()] i i :=
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function::= is not function
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'y%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'y%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '1' nidx:11  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '+' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i ':=' nidx:0  0:
=================
 BE:y%
type_check_stack_push: 'y%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'y%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'y%' type:i (0)
 BE:y%
type_check_stack_push: 'y%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'y%' type:0
(type_check_stack_print) 
001: 'y%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'y%' type:i (0)
001: 'y%' type:i (0)
 BE:1
type_check_stack_push: '1'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (3)

(type_check_stack_print) 
000: 'y%' type:0
(type_check_stack_print) 
001: 'y%' type:0
(type_check_stack_print) 
002: '1' type:0
(type_check_stack_print) 
------------------


Type Check Stack (3)

000: 'y%' type:i (0)
001: 'y%' type:i (0)
002: '1' type:i (0)
 BE:+
BUFF_ID_OPERATOR
Found operator +
type_check_stack_pop: '1'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'y%' type:0
(type_check_stack_print) 
001: 'y%' type:0
(type_check_stack_print) 
------------------

type_check_stack_pop: 'y%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'y%' type:0
(type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'y%' type:0
(type_check_stack_print) 
001: '000' type:0
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'y%' type:i (0)
001: '000' type:i (0)
 BE::=
BUFF_ID_OPERATOR
Found operator :=
type_check_stack_pop: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'y%' type:0
(type_check_stack_print) 
------------------

type_check_stack_pop: 'y%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (0)

(type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'y%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'y%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '1' nidx:11  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '+' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i ':=' nidx:0  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i 'y%'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'y%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_INTEGER      i rq:i '1'  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_OPERATOR     i rq:i '+'  2: 3 2
(dump_exp_buffer2) N5 EXP_BUFF_ID_OPERATOR     i rq:i ':='  2: 4 1
=================
(process_expression_types) 
==INFIX==

Var: y% ary:0 NumIdx:0
infix_stack_push: 'y%'
Var: y% ary:0 NumIdx:0
infix_stack_push: 'y%'
infix_stack_push: '1'
infix_stack_pop: '1'
infix_stack_pop: 'y%'
infix_stack_push: '(y% + 1)'
infix_stack_pop: '(y% + 1)'
infix_stack_pop: 'y%'
infix_stack_push: '(y% := (y% + 1))'
infix_stack_pop: '(y% := (y% + 1))'
(process_expression_types) ==(y% := (y% + 1))==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i y%  0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     i rq:i y%  0:
(    output_qcode) N3 EXP_BUFF_ID_INTEGER      i rq:i 1  0:
(    output_qcode) N4 EXP_BUFF_ID_OPERATOR     i rq:i +  2: 3 2
(    output_qcode) N5 EXP_BUFF_ID_OPERATOR     i rq:i :=  2: 4 1

 (check_literal) check_literal:lit=':' idx=12 ':AT x%,y% :PRINT CHR$(7) '
 (check_literal) check_literal:After drop space:':' idx=12 ':AT x%,y% :PRINT CHR$(7) '
 (check_literal) check_literal:After while():AT x%,y% :PRINT CHR$(7) 
 (check_literal) check_literal:ret1 

 (scan_literal) scan_literal:lit=':' 'AT x%,y% :PRINT CHR$(7) '
 (scan_literal) scan_literal:After drop space:'AT x%,y% :PRINT CHR$(7) '
 (scan_literal) scan_literal:while loop:AT x%,y% :PRINT CHR$(7) 
 (scan_literal) scan_literal:ret1

 (check_line) check_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'AT x%,y% :PRINT CHR$(7) ':
    (check_vname) check_vname ret1 ' x%,y% :PRINT CHR$(7) ':
   (check_variable) check_variable: ' x%,y% :PRINT CHR$(7) '
   (check_variable) check_variable: Ary test ' x%,y% :PRINT CHR$(7) '

    (check_literal) check_literal:lit='(' idx=15 ' x%,y% :PRINT CHR$(7) '
    (check_literal) check_literal:After drop space:'(' idx=15 ' x%,y% :PRINT CHR$(7) '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=15 ' x%,y% :PRINT CHR$(7) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=16 'x%,y% :PRINT CHR$(7) '
  (check_literal)   '=' != 'x'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'AT x%,y% :PRINT CHR$(7) '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'AT'
(check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=22, ' x%,y% :PRINT CHR$(7) '
========================================================
    y%=y%+1 :AT x%,y% :PRINT CHR$(7) 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'AT x%,y% :PRINT CHR$(7) ':
    (check_vname) check_vname ret1 ' x%,y% :PRINT CHR$(7) ':
   (check_variable) check_variable: ' x%,y% :PRINT CHR$(7) '
   (check_variable) check_variable: Ary test ' x%,y% :PRINT CHR$(7) '

    (check_literal) check_literal:lit='(' idx=15 ' x%,y% :PRINT CHR$(7) '
    (check_literal) check_literal:After drop space:'(' idx=15 ' x%,y% :PRINT CHR$(7) '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=15 ' x%,y% :PRINT CHR$(7) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=16 'x%,y% :PRINT CHR$(7) '
  (check_literal)   '=' != 'x'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'AT x%,y% :PRINT CHR$(7) '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'AT'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'AT' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) AT is function
 (function_return_type) 
function_return_type: 'AT' =>v
 (function_return_type) 
function_return_type: 'AT' =>17
process_token: 'AT' t=>v
 Push:'AT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: AT type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: AT type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' x%,y% :PRINT CHR$(7) '

   (check_eitem) check_eitem: 'x%,y% :PRINT CHR$(7) '

    (check_operator) check_operator: x%,y% :PRINT CHR$(7) 

     (check_literal) check_literal:lit=' ,' idx=16 'x%,y% :PRINT CHR$(7) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=16 'x%,y% :PRINT CHR$(7) '
     (check_literal)   ',' != 'x'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'x%,y% :PRINT CHR$(7) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=16 'x%,y% :PRINT CHR$(7) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=16 'x%,y% :PRINT CHR$(7) '
     (check_literal)   '%' != 'x'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=16 'x%,y% :PRINT CHR$(7) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=16 'x%,y% :PRINT CHR$(7) '
     (check_literal)   '"' != 'x'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'x%,y% :PRINT CHR$(7) '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'x%,y% :PRINT CHR$(7) ':
      (check_vname) check_vname ret1 '%,y% :PRINT CHR$(7) ':
     (check_variable) check_variable: '%,y% :PRINT CHR$(7) '
     (check_variable) check_variable: Ary test ',y% :PRINT CHR$(7) '

      (check_literal) check_literal:lit='(' idx=18 ',y% :PRINT CHR$(7) '
      (check_literal) check_literal:After drop space:'(' idx=18 ',y% :PRINT CHR$(7) '
      (check_literal)   '(' != ','
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator: x%,y% :PRINT CHR$(7) 

    (check_literal) check_literal:lit=' ,' idx=16 'x%,y% :PRINT CHR$(7) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=16 'x%,y% :PRINT CHR$(7) '
    (check_literal)   ',' != 'x'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'x%,y% :PRINT CHR$(7) '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=16 'x%,y% :PRINT CHR$(7) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=16 'x%,y% :PRINT CHR$(7) '
    (check_literal)   '%' != 'x'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=16 'x%,y% :PRINT CHR$(7) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=16 'x%,y% :PRINT CHR$(7) '
    (check_literal)   '"' != 'x'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'x%,y% :PRINT CHR$(7) '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'x%,y% :PRINT CHR$(7) ':
     (check_vname) check_vname ret1 '%,y% :PRINT CHR$(7) ':
    (check_variable) check_variable: '%,y% :PRINT CHR$(7) '
    (check_variable) check_variable: Ary test ',y% :PRINT CHR$(7) '

     (check_literal) check_literal:lit='(' idx=18 ',y% :PRINT CHR$(7) '
     (check_literal) check_literal:After drop space:'(' idx=18 ',y% :PRINT CHR$(7) '
     (check_literal)   '(' != ','
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1

  (scan_atom) scan_atom:

   (check_literal) check_literal:lit=' %' idx=16 'x%,y% :PRINT CHR$(7) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=16 'x%,y% :PRINT CHR$(7) '
   (check_literal)   '%' != 'x'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=16 'x%,y% :PRINT CHR$(7) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=16 'x%,y% :PRINT CHR$(7) '
   (check_literal)   '"' != 'x'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'x%,y% :PRINT CHR$(7) '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'x%,y% :PRINT CHR$(7) ':
    (check_vname) check_vname ret1 '%,y% :PRINT CHR$(7) ':
   (check_variable) check_variable: '%,y% :PRINT CHR$(7) '
   (check_variable) check_variable: Ary test ',y% :PRINT CHR$(7) '

    (check_literal) check_literal:lit='(' idx=18 ',y% :PRINT CHR$(7) '
    (check_literal) check_literal:After drop space:'(' idx=18 ',y% :PRINT CHR$(7) '
    (check_literal)   '(' != ','
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'x%,y% :PRINT CHR$(7) '
   (scan_vname) scan_vname: ret1 'x'
  (scan_variable) scan_variable: '%,y% :PRINT CHR$(7) ' vname='x'
  (scan_variable) scan_variable: Ary test ',y% :PRINT CHR$(7) '

   (check_literal) check_literal:lit='(' idx=18 ',y% :PRINT CHR$(7) '
   (check_literal) check_literal:After drop space:'(' idx=18 ',y% :PRINT CHR$(7) '
   (check_literal)   '(' != ','
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='x%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'x%' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:x% is not function
token_is_variable: tok:'x%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:x% is not function
 (init_get_name) 
init_get_name:'x%'
 (init_get_name) 
init_get_name:'x%'
 (get_name) 
get_name:gn:'x%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,(U )] i i x%
 (print_var_info) 
VAR INFO: '                x%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
 (scan_atom) scan_atom:ret1
(scan_expression) n commas now:0

 (check_eitem) check_eitem: ',y% :PRINT CHR$(7) '

  (check_operator) check_operator: ,y% :PRINT CHR$(7) 

   (check_literal) check_literal:lit=' ,' idx=18 ',y% :PRINT CHR$(7) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=18 ',y% :PRINT CHR$(7) '
   (check_literal) check_literal:After while():y% :PRINT CHR$(7) 
   (check_literal) check_literal:ret1 
  (check_operator) ret1:is comma: 0
 (check_eitem) check_eitem:ret1 comma:1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: ,y% :PRINT CHR$(7) 

   (check_literal) check_literal:lit=' ,' idx=18 ',y% :PRINT CHR$(7) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=18 ',y% :PRINT CHR$(7) '
   (check_literal) check_literal:After while():y% :PRINT CHR$(7) 
   (check_literal) check_literal:ret1 
  (check_operator) ret1:is comma: 0

  (scan_operator) scan_operator: ',y% :PRINT CHR$(7) '

   (check_literal) check_literal:lit=' ,' idx=18 ',y% :PRINT CHR$(7) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=18 ',y% :PRINT CHR$(7) '
   (check_literal) check_literal:After while():y% :PRINT CHR$(7) 
   (check_literal) check_literal:ret1 

   (scan_literal) scan_literal:lit=' ,' ',y% :PRINT CHR$(7) '
   (scan_literal) scan_literal:After drop space:',y% :PRINT CHR$(7) '
   (scan_literal) scan_literal:while loop:,y% :PRINT CHR$(7) 
   Frst:0 T:',' exptype:i
(output_sub_start)
   (scan_literal) scan_literal:ret1
  (scan_operator) ret1:is comma: 1
 (scan_eitem) Is comma;1
 (scan_expression) n commas now:1

  (check_eitem) check_eitem: 'y% :PRINT CHR$(7) '

   (check_operator) check_operator: y% :PRINT CHR$(7) 

    (check_literal) check_literal:lit=' ,' idx=19 'y% :PRINT CHR$(7) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=19 'y% :PRINT CHR$(7) '
    (check_literal)   ',' != 'y'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'y% :PRINT CHR$(7) '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=19 'y% :PRINT CHR$(7) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=19 'y% :PRINT CHR$(7) '
    (check_literal)   '%' != 'y'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=19 'y% :PRINT CHR$(7) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=19 'y% :PRINT CHR$(7) '
    (check_literal)   '"' != 'y'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'y% :PRINT CHR$(7) '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'y% :PRINT CHR$(7) ':
     (check_vname) check_vname ret1 '% :PRINT CHR$(7) ':
    (check_variable) check_variable: '% :PRINT CHR$(7) '
    (check_variable) check_variable: Ary test ' :PRINT CHR$(7) '

     (check_literal) check_literal:lit='(' idx=21 ' :PRINT CHR$(7) '
     (check_literal) check_literal:After drop space:'(' idx=21 ' :PRINT CHR$(7) '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1
 (check_eitem) check_eitem:ret1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: y% :PRINT CHR$(7) 

   (check_literal) check_literal:lit=' ,' idx=19 'y% :PRINT CHR$(7) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=19 'y% :PRINT CHR$(7) '
   (check_literal)   ',' != 'y'
   (check_literal) check_literal: ret0
  (check_operator) ret0:is comma: 0

  (check_function) check_function: 'y% :PRINT CHR$(7) '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=19 'y% :PRINT CHR$(7) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=19 'y% :PRINT CHR$(7) '
   (check_literal)   '%' != 'y'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=19 'y% :PRINT CHR$(7) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=19 'y% :PRINT CHR$(7) '
   (check_literal)   '"' != 'y'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'y% :PRINT CHR$(7) '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'y% :PRINT CHR$(7) ':
    (check_vname) check_vname ret1 '% :PRINT CHR$(7) ':
   (check_variable) check_variable: '% :PRINT CHR$(7) '
   (check_variable) check_variable: Ary test ' :PRINT CHR$(7) '

    (check_literal) check_literal:lit='(' idx=21 ' :PRINT CHR$(7) '
    (check_literal) check_literal:After drop space:'(' idx=21 ' :PRINT CHR$(7) '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) check_atom:ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=19 'y% :PRINT CHR$(7) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=19 'y% :PRINT CHR$(7) '
  (check_literal)   '%' != 'y'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=19 'y% :PRINT CHR$(7) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=19 'y% :PRINT CHR$(7) '
  (check_literal)   '"' != 'y'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) check_float: ret0

   (check_integer) check_integer: 'y% :PRINT CHR$(7) '
   (check_integer) check_integer:ret0
  (check_number) check_number: ret0

  (check_variable) check_variable:

   (check_vname) check_vname 'y% :PRINT CHR$(7) ':
   (check_vname) check_vname ret1 '% :PRINT CHR$(7) ':
  (check_variable) check_variable: '% :PRINT CHR$(7) '
  (check_variable) check_variable: Ary test ' :PRINT CHR$(7) '

   (check_literal) check_literal:lit='(' idx=21 ' :PRINT CHR$(7) '
   (check_literal) check_literal:After drop space:'(' idx=21 ' :PRINT CHR$(7) '
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) scan_variable:

  (scan_vname) scan_vname: 'y% :PRINT CHR$(7) '
  (scan_vname) scan_vname: ret1 'y'
 (scan_variable) scan_variable: '% :PRINT CHR$(7) ' vname='y'
 (scan_variable) scan_variable: Ary test ' :PRINT CHR$(7) '

  (check_literal) check_literal:lit='(' idx=21 ' :PRINT CHR$(7) '
  (check_literal) check_literal:After drop space:'(' idx=21 ' :PRINT CHR$(7) '
  (check_literal)   '(' != ' '
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='y%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'y%' exptype:U
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:y% is not function
token_is_variable: tok:'y%'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:y% is not function
(init_get_name) 
init_get_name:'y%'
(init_get_name) 
init_get_name:'y%'
(get_name) 
get_name:gn:'y%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,(U )] i i y%
(print_var_info) 
VAR INFO: '                y%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
(scan_atom) scan_atom:ret1
(scan_expression) n commas now:1

 (check_eitem) check_eitem: ' :PRINT CHR$(7) '

  (check_operator) check_operator:  :PRINT CHR$(7) 

   (check_literal) check_literal:lit=' ,' idx=22 ':PRINT CHR$(7) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=22 ':PRINT CHR$(7) '
   (check_literal)   ',' != ':'
   (check_literal) check_literal: ret0
  (check_operator) ret0:is comma: 0

  (check_function) check_function: ':PRINT CHR$(7) '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=21 ' :PRINT CHR$(7) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=22 ':PRINT CHR$(7) '
   (check_literal)   '%' != ':'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=21 ' :PRINT CHR$(7) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=22 ':PRINT CHR$(7) '
   (check_literal)   '"' != ':'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: ':PRINT CHR$(7) '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname ':PRINT CHR$(7) ':
    (check_vname) check_vname ret0 ':PRINT CHR$(7) ':
   (check_variable) check_variable:ret0 
  (check_atom) check_atom:ret1

  (check_sub_expr) check_sub_expr:

   (check_literal) check_literal:lit=' (' idx=21 ' :PRINT CHR$(7) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'(' idx=22 ':PRINT CHR$(7) '
   (check_literal)   '(' != ':'
   (check_literal) check_literal: ret0
  (check_sub_expr) check_sub_expr: ret0
 (check_eitem) check_eitem:ret0
(scan_expression) scan_expression: ret1 ' :PRINT CHR$(7) ' commas:1
(scan_command) scan_command: ret1 =>'AT'
(scan_command) 
ENDEXP
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: AT type:17
(op_stack_print) 
------------------

(  output_sub_end)
(token_is_function) 
token_is_function:
(token_is_function) AT is function
Pop 5
Pop 'AT'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_function) [i,(U )] v v AT
(  output_sub_end)
Finalise stack
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'x%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? '' nidx:-1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'y%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'AT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
 BE:

Type Check Stack (0)

 BE:x%
type_check_stack_push: 'x%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'x%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'x%' type:i (0)
 BE:

Type Check Stack (1)

000: 'x%' type:i (0)
 BE:y%
type_check_stack_push: 'y%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'x%' type:0
(type_check_stack_print) 
001: 'y%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'x%' type:i (0)
001: 'y%' type:i (0)
 BE:

Type Check Stack (2)

000: 'x%' type:i (0)
001: 'y%' type:i (0)
 BE:AT
FN: 2 args
(function_return_type) 
function_return_type: 'AT' =>v
(function_return_type) 
function_return_type: 'AT' =>17
ret_type;17 v
typecheck_expression:Ret type of AT : v
type_check_stack_pop: 'y%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'x%' type:0
(type_check_stack_print) 
------------------

FN ARG 1 ri y% 0(i)  Arg ok
type_check_stack_pop: 'x%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (0)

(type_check_stack_print) 
------------------

FN ARG 0 ri x% 0(i)  Arg ok
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:17
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'x%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? '' nidx:-1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'y%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'AT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'x%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     i rq:i 'y%'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_FUNCTION     v rq:v 'AT'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
(process_expression_types) 
==INFIX==

Var: x% ary:0 NumIdx:0
infix_stack_push: 'x%'
Var: y% ary:0 NumIdx:0
infix_stack_push: 'y%'
infix_stack_pop: 'y%'
infix_stack_pop: 'x%'
infix_stack_push: 'AT(x% y% )'
infix_stack_pop: 'AT(x% y% )'
(process_expression_types) ==AT(x% y% )==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     i rq:i x%  0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_START    U rq:?   0:
(    output_qcode) N4 EXP_BUFF_ID_VARIABLE     i rq:i y%  0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_FUNCTION     v rq:v AT  0:
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:i   0:

 (check_literal) check_literal:lit=':' idx=22 ':PRINT CHR$(7) '
 (check_literal) check_literal:After drop space:':' idx=22 ':PRINT CHR$(7) '
 (check_literal) check_literal:After while():PRINT CHR$(7) 
 (check_literal) check_literal:ret1 

 (scan_literal) scan_literal:lit=':' 'PRINT CHR$(7) '
 (scan_literal) scan_literal:After drop space:'PRINT CHR$(7) '
 (scan_literal) scan_literal:while loop:PRINT CHR$(7) 
 (scan_literal) scan_literal:ret1

 (check_line) check_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'PRINT CHR$(7) ':
    (check_vname) check_vname ret1 ' CHR$(7) ':
   (check_variable) check_variable: ' CHR$(7) '
   (check_variable) check_variable: Ary test ' CHR$(7) '

    (check_literal) check_literal:lit='(' idx=28 ' CHR$(7) '
    (check_literal) check_literal:After drop space:'(' idx=28 ' CHR$(7) '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=28 ' CHR$(7) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=29 'CHR$(7) '
  (check_literal)   '=' != 'C'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'PRINT CHR$(7) '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'PRINT'
(check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=9, ' CHR$(7) '
========================================================
    y%=y%+1 :AT x%,y% :PRINT CHR$(7) 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'PRINT CHR$(7) ':
    (check_vname) check_vname ret1 ' CHR$(7) ':
   (check_variable) check_variable: ' CHR$(7) '
   (check_variable) check_variable: Ary test ' CHR$(7) '

    (check_literal) check_literal:lit='(' idx=28 ' CHR$(7) '
    (check_literal) check_literal:After drop space:'(' idx=28 ' CHR$(7) '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=28 ' CHR$(7) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=29 'CHR$(7) '
  (check_literal)   '=' != 'C'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'PRINT CHR$(7) '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'PRINT'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'PRINT' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) PRINT is function
 (function_return_type) 
function_return_type: 'PRINT' =>v
 (function_return_type) 
function_return_type: 'PRINT' =>17
process_token: 'PRINT' t=>v
 Push:'PRINT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' CHR$(7) '

   (check_eitem) check_eitem: 'CHR$(7) '

    (check_operator) check_operator: CHR$(7) 

     (check_literal) check_literal:lit=' ,' idx=29 'CHR$(7) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=29 'CHR$(7) '
     (check_literal)   ',' != 'C'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'CHR$(7) '
    (check_function) check_function: ret1 Found fn=>'CHR$'
   (check_eitem) check_eitem:ret1

   (scan_eitem) scan_eitem:

    (check_operator) check_operator: CHR$(7) 

     (check_literal) check_literal:lit=' ,' idx=29 'CHR$(7) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=29 'CHR$(7) '
     (check_literal)   ',' != 'C'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'CHR$(7) '
    (check_function) check_function: ret1 Found fn=>'CHR$'

    (scan_function) scan_function:
   Frst:0 T:'CHR$' exptype:U
    (token_is_function) 
token_is_function:
    (token_is_function) CHR$ is function
    (function_return_type) 
function_return_type: 'CHR$' =>s
    (function_return_type) 
function_return_type: 'CHR$' =>2
process_token: 'CHR$' t=>s
 Push:'CHR$'
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (3)

    (op_stack_print) 
000: PRINT type:17
    (op_stack_print) 
001: ( type:16
    (op_stack_print) 
002: CHR$ type:2
    (op_stack_print) 
------------------

    (scan_expression) n commas now:0

     (check_eitem) check_eitem: '(7) '

      (check_operator) check_operator: (7) 

       (check_literal) check_literal:lit=' ,' idx=33 '(7) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=33 '(7) '
       (check_literal)   ',' != '('
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: '(7) '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=33 '(7) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=33 '(7) '
       (check_literal)   '%' != '('
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=33 '(7) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=33 '(7) '
       (check_literal)   '"' != '('
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '(7) '
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname '(7) ':
        (check_vname) check_vname ret0 '(7) ':
       (check_variable) check_variable:ret0 
      (check_atom) check_atom:ret1

      (check_sub_expr) check_sub_expr:

       (check_literal) check_literal:lit=' (' idx=33 '(7) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'(' idx=33 '(7) '
       (check_literal) check_literal:After while():7) 
       (check_literal) check_literal:ret1 
      (check_sub_expr) check_sub_expr: ret1
     (check_eitem) check_eitem:ret1

     (scan_eitem) scan_eitem:

      (check_operator) check_operator: (7) 

       (check_literal) check_literal:lit=' ,' idx=33 '(7) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=33 '(7) '
       (check_literal)   ',' != '('
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: '(7) '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=33 '(7) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=33 '(7) '
       (check_literal)   '%' != '('
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=33 '(7) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=33 '(7) '
       (check_literal)   '"' != '('
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '(7) '
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname '(7) ':
        (check_vname) check_vname ret0 '(7) ':
       (check_variable) check_variable:ret0 
      (check_atom) check_atom:ret1

      (check_sub_expr) check_sub_expr:

       (check_literal) check_literal:lit=' (' idx=33 '(7) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'(' idx=33 '(7) '
       (check_literal) check_literal:After while():7) 
       (check_literal) check_literal:ret1 
      (check_sub_expr) check_sub_expr: ret1

      (scan_sub_expr) scan_sub_expr:

       (scan_literal) scan_literal:lit=' (' '(7) '
       (scan_literal) scan_literal:After drop space:'(7) '
       (scan_literal) scan_literal:while loop:(7) 
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (4)

       (op_stack_print) 
000: PRINT type:17
       (op_stack_print) 
001: ( type:16
       (op_stack_print) 
002: CHR$ type:2
       (op_stack_print) 
003: ( type:16
       (op_stack_print) 
------------------

       (scan_literal) scan_literal:ret1
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (5)

      (op_stack_print) 
000: PRINT type:17
      (op_stack_print) 
001: ( type:16
      (op_stack_print) 
002: CHR$ type:2
      (op_stack_print) 
003: ( type:16
      (op_stack_print) 
004: ( type:16
      (op_stack_print) 
------------------


       (scan_expression) scan_expression: '7) '

        (check_eitem) check_eitem: '7) '

         (check_operator) check_operator: 7) 

          (check_literal) check_literal:lit=' ,' idx=34 '7) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:',' idx=34 '7) '
          (check_literal)   ',' != '7'
          (check_literal) check_literal: ret0
         (check_operator) ret0:is comma: 0

         (check_function) check_function: '7) '
         (check_function) check_function: ret0

         (check_atom) check_atom:

          (check_literal) check_literal:lit=' %' idx=34 '7) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=34 '7) '
          (check_literal)   '%' != '7'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=34 '7) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=34 '7) '
          (check_literal)   '"' != '7'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '7) '
           (check_integer) check_integer:ret1
          (check_number) check_number: ret1
         (check_atom) check_atom:ret1
        (check_eitem) check_eitem:ret1

        (scan_eitem) scan_eitem:

         (check_operator) check_operator: 7) 

          (check_literal) check_literal:lit=' ,' idx=34 '7) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:',' idx=34 '7) '
          (check_literal)   ',' != '7'
          (check_literal) check_literal: ret0
         (check_operator) ret0:is comma: 0

         (check_function) check_function: '7) '
         (check_function) check_function: ret0

         (check_atom) check_atom:

          (check_literal) check_literal:lit=' %' idx=34 '7) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=34 '7) '
          (check_literal)   '%' != '7'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=34 '7) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=34 '7) '
          (check_literal)   '"' != '7'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '7) '
           (check_integer) check_integer:ret1
          (check_number) check_number: ret1
         (check_atom) check_atom:ret1

         (scan_atom) scan_atom:

          (check_literal) check_literal:lit=' %' idx=34 '7) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=34 '7) '
          (check_literal)   '%' != '7'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=34 '7) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=34 '7) '
          (check_literal)   '"' != '7'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '7) '
           (check_integer) check_integer:ret1
          (check_number) check_number: ret1

          (scan_number) scan_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '7) '
           (check_integer) check_integer:ret1

           (scan_integer) scan_integer:
           (scan_integer) scan_integer:ret1
   Frst:0 T:'7' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U U U )] i i 7
          (scan_integer) scan_integer:ret1  7
         (scan_atom) scan_atom:ret1
        (scan_expression) n commas now:0

         (check_eitem) check_eitem: ') '

          (check_operator) check_operator: ) 

           (check_literal) check_literal:lit=' ,' idx=35 ') '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:',' idx=35 ') '
           (check_literal)   ',' != ')'
           (check_literal) check_literal: ret0
          (check_operator) ret0:is comma: 0

          (check_function) check_function: ') '
          (check_function) check_function: ret0

          (check_atom) check_atom:

           (check_literal) check_literal:lit=' %' idx=35 ') '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'%' idx=35 ') '
           (check_literal)   '%' != ')'
           (check_literal) check_literal: ret0

           (check_literal) check_literal:lit=' "' idx=35 ') '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'"' idx=35 ') '
           (check_literal)   '"' != ')'
           (check_literal) check_literal: ret0

           (check_number) check_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret0

            (check_integer) check_integer: ') '
            (check_integer) check_integer:ret0
           (check_number) check_number: ret0

           (check_variable) check_variable:

            (check_vname) check_vname ') ':
            (check_vname) check_vname ret0 ') ':
           (check_variable) check_variable:ret0 
          (check_atom) check_atom:ret1

          (check_sub_expr) check_sub_expr:

           (check_literal) check_literal:lit=' (' idx=35 ') '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'(' idx=35 ') '
           (check_literal)   '(' != ')'
           (check_literal) check_literal: ret0
          (check_sub_expr) check_sub_expr: ret0
         (check_eitem) check_eitem:ret0
        (scan_expression) scan_expression: ret1 ') ' commas:0

        (scan_literal) scan_literal:lit=' )' ') '
        (scan_literal) scan_literal:After drop space:') '
        (scan_literal) scan_literal:while loop:) 
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
        (op_stack_print) 
------------------
        (op_stack_print) 
Operator Stack     (4)

        (op_stack_print) 
000: PRINT type:17
        (op_stack_print) 
001: ( type:16
        (op_stack_print) 
002: CHR$ type:2
        (op_stack_print) 
003: ( type:16
        (op_stack_print) 
------------------

(  output_sub_end)
        (token_is_function) 
token_is_function:
        (token_is_function) 
token_is_function:( is not function
(  output_sub_end)
        (scan_literal) scan_literal:ret1
   Frst:0 T:')' exptype:U
Pop 4
Pop '('
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (3)

       (op_stack_print) 
000: PRINT type:17
       (op_stack_print) 
001: ( type:16
       (op_stack_print) 
002: CHR$ type:2
       (op_stack_print) 
------------------

(  output_sub_end)
       (token_is_function) 
token_is_function:
       (token_is_function) CHR$ is function
Pop 5
Pop 'CHR$'
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (2)

       (op_stack_print) 
000: PRINT type:17
       (op_stack_print) 
001: ( type:16
       (op_stack_print) 
------------------

( output_function) [U,(U U )] s s CHR$
(  output_sub_end)
       (scan_sub_expr) scan_sub_expr:ret1
      (scan_expression) n commas now:0

       (check_eitem) check_eitem: ' '

        (check_operator) check_operator:  

         (check_literal) check_literal:lit=' ,' idx=37 ''
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:',' idx=37 ''
         (check_literal) check_literal  ret0 Empty test string
        (check_operator) ret0:is comma: 0

        (check_function) check_function: ''
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=36 ' '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=37 ''
         (check_literal) check_literal  ret0 Empty test string

         (check_literal) check_literal:lit=' "' idx=36 ' '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=37 ''
         (check_literal) check_literal  ret0 Empty test string

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: ''
          (check_integer) check_integer:ret0
         (check_number) check_number: ret0

         (check_variable) check_variable:

          (check_vname) check_vname '':
          (check_vname) check_vname ret0 '':
         (check_variable) check_variable:ret0 
        (check_atom) check_atom:ret1

        (check_sub_expr) check_sub_expr:

         (check_literal) check_literal:lit=' (' idx=36 ' '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'(' idx=37 ''
         (check_literal) check_literal  ret0 Empty test string
        (check_sub_expr) check_sub_expr: ret0
       (check_eitem) check_eitem:ret0
      (scan_expression) scan_expression: ret1 ' ' commas:0
     (scan_command) scan_command: ret1 =>'PRINT'
    (scan_command) 
ENDEXP
   Frst:0 T:')' exptype:U
Pop 4
Pop '('
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (1)

    (op_stack_print) 
000: PRINT type:17
    (op_stack_print) 
------------------

(  output_sub_end)
    (token_is_function) 
token_is_function:
    (token_is_function) PRINT is function
Pop 5
Pop 'PRINT'
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (0)

    (op_stack_print) 
------------------

( output_function) [U,(U )] v v PRINT
(  output_sub_end)
Finalise stack
    (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '7' nidx:35  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     s rq:s 'CHR$' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
 BE:

Type Check Stack (0)

 BE:

Type Check Stack (0)

 BE:

Type Check Stack (0)

 BE:7
type_check_stack_push: '7'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (1)

    (type_check_stack_print) 
000: '7' type:0
    (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '7' type:i (0)
 BE:

Type Check Stack (1)

000: '7' type:i (0)
 BE:

Type Check Stack (1)

000: '7' type:i (0)
 BE:

Type Check Stack (1)

000: '7' type:i (0)
 BE:CHR$
FN: 1 args
    (function_return_type) 
function_return_type: 'CHR$' =>s
    (function_return_type) 
function_return_type: 'CHR$' =>2
ret_type;2 s
typecheck_expression:Ret type of CHR$ : s
type_check_stack_pop: '7'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (0)

    (type_check_stack_print) 
------------------

FN ARG 0 ri 7 0(i)  Arg ok
type_check_stack_push: '000'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (1)

    (type_check_stack_print) 
000: '000' type:2
    (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:s (2)
 BE:

Type Check Stack (1)

000: '000' type:s (2)
 BE:

Type Check Stack (1)

000: '000' type:s (2)
 BE:PRINT
FN: 1 args
    (function_return_type) 
function_return_type: 'PRINT' =>v
    (function_return_type) 
function_return_type: 'PRINT' =>17
ret_type;17 v
typecheck_expression:Ret type of PRINT : v
type_check_stack_pop: '000'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (0)

    (type_check_stack_print) 
------------------

FN ARG 0 ri 000 2(s)  Arg not OK
type_check_stack_push: '000'
    (type_check_stack_print) 
------------------
    (type_check_stack_print) 
Type Check Stack     (1)

    (type_check_stack_print) 
000: '000' type:17
    (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '7' nidx:35  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     s rq:s 'CHR$' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_INTEGER      i rq:i '7'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_FUNCTION     s rq:s 'CHR$'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
(dump_exp_buffer2) N12 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
    (process_expression_types) 
==INFIX==

infix_stack_push: '7'
infix_stack_pop: '7'
infix_stack_push: 'CHR$(7 )'
infix_stack_pop: 'CHR$(7 )'
infix_stack_push: 'PRINT(CHR$(7 ) )'
infix_stack_pop: 'PRINT(CHR$(7 ) )'
    (process_expression_types) ==PRINT(CHR$(7 ) )==
    (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N4 EXP_BUFF_ID_INTEGER      i rq:i 7  0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N8 EXP_BUFF_ID_FUNCTION     s rq:s CHR$  0:
(    output_qcode) N9 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N10 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N11 EXP_BUFF_ID_FUNCTION     v rq:v PRINT  0:
(    output_qcode) N12 EXP_BUFF_ID_SUB_END      U rq:i   0:

     (check_literal) check_literal:lit=':' idx=37 ''
     (check_literal) check_literal:After drop space:':' idx=37 ''
     (check_literal) check_literal  ret0 Empty test string
    (translate_file) 
cline scanned OK
*************
**   ENDIF **
*************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'ENDIF ':
     (check_vname) check_vname ret1 ' ':
    (check_variable) check_variable: ' '
    (check_variable) check_variable: Ary test ' '

     (check_literal) check_literal:lit='(' idx=8 ' '
     (check_literal) check_literal:After drop space:'(' idx=8 ' '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=8 ' '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=9 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_assignment) check_assignment:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) check_textlabel: 'ENDIF '
   (check_textlabel) check_textlabel:ret0
  (check_proc_call) check_proc_call:ret0

  (check_command) check_command:
  (check_command) check_command: ret0

  (check_function) check_function: 'ENDIF '
  (check_function) check_function: ret0

  (check_literal) check_literal:lit=' IF' idx=0 '   ENDIF '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'IF' idx=3 'ENDIF '
  (check_literal)   'I' != 'E'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' ELSEIF' idx=0 '   ENDIF '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'ELSEIF' idx=3 'ENDIF '
  (check_literal)   'L' != 'N'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' ELSE' idx=0 '   ENDIF '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'ELSE' idx=3 'ENDIF '
  (check_literal)   'L' != 'N'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' ENDIF' idx=0 '   ENDIF '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'ENDIF' idx=3 'ENDIF '
  (check_literal) check_literal:After while(): 
  (check_literal) check_literal:ret1 
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=1, ' '
========================================================
   ENDIF 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'ENDIF ':
    (check_vname) check_vname ret1 ' ':
   (check_variable) check_variable: ' '
   (check_variable) check_variable: Ary test ' '

    (check_literal) check_literal:lit='(' idx=8 ' '
    (check_literal) check_literal:After drop space:'(' idx=8 ' '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=8 ' '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=9 ''
  (check_literal) check_literal  ret0 Empty test string
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'ENDIF '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret0

 (check_function) check_function: 'ENDIF '
 (check_function) check_function: ret0

 (check_literal) check_literal:lit=' IF' idx=3 'ENDIF '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'IF' idx=3 'ENDIF '
 (check_literal)   'I' != 'E'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' ELSEIF' idx=3 'ENDIF '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'ELSEIF' idx=3 'ENDIF '
 (check_literal)   'L' != 'N'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' ELSE' idx=3 'ENDIF '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'ELSE' idx=3 'ENDIF '
 (check_literal)   'L' != 'N'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' ENDIF' idx=3 'ENDIF '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'ENDIF' idx=3 'ENDIF '
 (check_literal) check_literal:After while(): 
 (check_literal) check_literal:ret1 

 (scan_literal) scan_literal:lit=' ENDIF' 'ENDIF '
 (scan_literal) scan_literal:After drop space:'ENDIF '
 (scan_literal) scan_literal:while loop:ENDIF 
 (scan_literal) scan_literal:while loop:NDIF 
 (scan_literal) scan_literal:while loop:DIF 
 (scan_literal) scan_literal:while loop:IF 
 (scan_literal) scan_literal:while loop:F 
   Frst:1 T:'ENDIF' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:ENDIF is not function
token_is_variable: tok:'ENDIF'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:ENDIF is not function
 (init_get_name) 
init_get_name:'ENDIF'
 (init_get_name) 
init_get_name:'ENDIF'
 (get_name) 
get_name:gn:'ENDIF'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] f f ENDIF
 (scan_literal) scan_literal:ret1
Finalise stack
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'ENDIF' nidx:0  0:
=================
 BE:ENDIF
type_check_stack_push: 'ENDIF'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'ENDIF' type:1
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'ENDIF' type:f (1)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'ENDIF' nidx:0  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f 'ENDIF'  0:
=================
(process_expression_types) 
==INFIX==

Var: ENDIF ary:3 NumIdx:0
infix_stack_push: 'ENDIF()'
infix_stack_pop: 'ENDIF()'
(process_expression_types) ==ENDIF()==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     f rq:f ENDIF  0:

 (check_literal) check_literal:lit=':' idx=9 ''
 (check_literal) check_literal:After drop space:':' idx=9 ''
 (check_literal) check_literal  ret0 Empty test string
(translate_file) 
cline scanned OK
************
**  ENDIF **
************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'ENDIF ':
     (check_vname) check_vname ret1 ' ':
    (check_variable) check_variable: ' '
    (check_variable) check_variable: Ary test ' '

     (check_literal) check_literal:lit='(' idx=7 ' '
     (check_literal) check_literal:After drop space:'(' idx=7 ' '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=7 ' '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=8 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_assignment) check_assignment:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) check_textlabel: 'ENDIF '
   (check_textlabel) check_textlabel:ret0
  (check_proc_call) check_proc_call:ret0

  (check_command) check_command:
  (check_command) check_command: ret0

  (check_function) check_function: 'ENDIF '
  (check_function) check_function: ret0

  (check_literal) check_literal:lit=' IF' idx=0 '  ENDIF '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'IF' idx=2 'ENDIF '
  (check_literal)   'I' != 'E'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' ELSEIF' idx=0 '  ENDIF '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'ELSEIF' idx=2 'ENDIF '
  (check_literal)   'L' != 'N'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' ELSE' idx=0 '  ENDIF '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'ELSE' idx=2 'ENDIF '
  (check_literal)   'L' != 'N'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' ENDIF' idx=0 '  ENDIF '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'ENDIF' idx=2 'ENDIF '
  (check_literal) check_literal:After while(): 
  (check_literal) check_literal:ret1 
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=1, ' '
========================================================
  ENDIF 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'ENDIF ':
    (check_vname) check_vname ret1 ' ':
   (check_variable) check_variable: ' '
   (check_variable) check_variable: Ary test ' '

    (check_literal) check_literal:lit='(' idx=7 ' '
    (check_literal) check_literal:After drop space:'(' idx=7 ' '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=7 ' '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=8 ''
  (check_literal) check_literal  ret0 Empty test string
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'ENDIF '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret0

 (check_function) check_function: 'ENDIF '
 (check_function) check_function: ret0

 (check_literal) check_literal:lit=' IF' idx=2 'ENDIF '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'IF' idx=2 'ENDIF '
 (check_literal)   'I' != 'E'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' ELSEIF' idx=2 'ENDIF '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'ELSEIF' idx=2 'ENDIF '
 (check_literal)   'L' != 'N'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' ELSE' idx=2 'ENDIF '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'ELSE' idx=2 'ENDIF '
 (check_literal)   'L' != 'N'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' ENDIF' idx=2 'ENDIF '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'ENDIF' idx=2 'ENDIF '
 (check_literal) check_literal:After while(): 
 (check_literal) check_literal:ret1 

 (scan_literal) scan_literal:lit=' ENDIF' 'ENDIF '
 (scan_literal) scan_literal:After drop space:'ENDIF '
 (scan_literal) scan_literal:while loop:ENDIF 
 (scan_literal) scan_literal:while loop:NDIF 
 (scan_literal) scan_literal:while loop:DIF 
 (scan_literal) scan_literal:while loop:IF 
 (scan_literal) scan_literal:while loop:F 
   Frst:1 T:'ENDIF' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:ENDIF is not function
token_is_variable: tok:'ENDIF'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:ENDIF is not function
 (init_get_name) 
init_get_name:'ENDIF'
 (init_get_name) 
init_get_name:'ENDIF'
 (get_name) 
get_name:gn:'ENDIF'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] f f ENDIF
 (scan_literal) scan_literal:ret1
Finalise stack
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'ENDIF' nidx:0  0:
=================
 BE:ENDIF
type_check_stack_push: 'ENDIF'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'ENDIF' type:1
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'ENDIF' type:f (1)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'ENDIF' nidx:0  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f 'ENDIF'  0:
=================
(process_expression_types) 
==INFIX==

Var: ENDIF ary:2 NumIdx:0
infix_stack_push: 'ENDIF()'
infix_stack_pop: 'ENDIF()'
(process_expression_types) ==ENDIF()==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     f rq:f ENDIF  0:

 (check_literal) check_literal:lit=':' idx=8 ''
 (check_literal) check_literal:After drop space:':' idx=8 ''
 (check_literal) check_literal  ret0 Empty test string
(translate_file) 
cline scanned OK
**************
**  a%=a%+1 **
**************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'a%=a%+1 ':
     (check_vname) check_vname ret1 '%=a%+1 ':
    (check_variable) check_variable: '%=a%+1 '
    (check_variable) check_variable: Ary test '=a%+1 '

     (check_literal) check_literal:lit='(' idx=4 '=a%+1 '
     (check_literal) check_literal:After drop space:'(' idx=4 '=a%+1 '
     (check_literal)   '(' != '='
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=4 '=a%+1 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=4 '=a%+1 '
   (check_literal) check_literal:After while():a%+1 
   (check_literal) check_literal:ret1 

   (check_expression) check_expression: 'a%+1 '

    (check_eitem) check_eitem: 'a%+1 '

     (check_operator) check_operator: a%+1 

      (check_literal) check_literal:lit=' ,' idx=5 'a%+1 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=5 'a%+1 '
      (check_literal)   ',' != 'a'
      (check_literal) check_literal: ret0
     (check_operator) ret0:is comma: 0

     (check_function) check_function: 'a%+1 '
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=5 'a%+1 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=5 'a%+1 '
      (check_literal)   '%' != 'a'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=5 'a%+1 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=5 'a%+1 '
      (check_literal)   '"' != 'a'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: 'a%+1 '
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname 'a%+1 ':
       (check_vname) check_vname ret1 '%+1 ':
      (check_variable) check_variable: '%+1 '
      (check_variable) check_variable: Ary test '+1 '

       (check_literal) check_literal:lit='(' idx=7 '+1 '
       (check_literal) check_literal:After drop space:'(' idx=7 '+1 '
       (check_literal)   '(' != '+'
       (check_literal) check_literal: ret0
      (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
     (check_variable) check_variable:ret1 
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: '+1 '

    (check_operator) check_operator: +1 

     (check_literal) check_literal:lit=' ,' idx=7 '+1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=7 '+1 '
     (check_literal)   ',' != '+'
     (check_literal) check_literal: ret0
    (check_operator) ret1:is comma: 0
   (check_eitem) check_eitem:ret1 comma:1

   (check_eitem) check_eitem: '1 '

    (check_operator) check_operator: 1 

     (check_literal) check_literal:lit=' ,' idx=8 '1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=8 '1 '
     (check_literal)   ',' != '1'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: '1 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=8 '1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=8 '1 '
     (check_literal)   '%' != '1'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=8 '1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=8 '1 '
     (check_literal)   '"' != '1'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '1 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: ' '

    (check_operator) check_operator:  

     (check_literal) check_literal:lit=' ,' idx=10 ''
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=10 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_operator) ret0:is comma: 0

    (check_function) check_function: ''
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=9 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=10 ''
     (check_literal) check_literal  ret0 Empty test string

     (check_literal) check_literal:lit=' "' idx=9 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=10 ''
     (check_literal) check_literal  ret0 Empty test string

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: ''
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname '':
      (check_vname) check_vname ret0 '':
     (check_variable) check_variable:ret0 
    (check_atom) check_atom:ret1

    (check_sub_expr) check_sub_expr:

     (check_literal) check_literal:lit=' (' idx=9 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'(' idx=10 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_sub_expr) check_sub_expr: ret0
   (check_eitem) check_eitem:ret0
  (check_expression) check_expression:ret1 ' '
 (check_assignment) check_assignment:ret1
(check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=1, ' '
========================================================
  a%=a%+1 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'a%=a%+1 ':
    (check_vname) check_vname ret1 '%=a%+1 ':
   (check_variable) check_variable: '%=a%+1 '
   (check_variable) check_variable: Ary test '=a%+1 '

    (check_literal) check_literal:lit='(' idx=4 '=a%+1 '
    (check_literal) check_literal:After drop space:'(' idx=4 '=a%+1 '
    (check_literal)   '(' != '='
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=4 '=a%+1 '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=4 '=a%+1 '
  (check_literal) check_literal:After while():a%+1 
  (check_literal) check_literal:ret1 

  (check_expression) check_expression: 'a%+1 '

   (check_eitem) check_eitem: 'a%+1 '

    (check_operator) check_operator: a%+1 

     (check_literal) check_literal:lit=' ,' idx=5 'a%+1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=5 'a%+1 '
     (check_literal)   ',' != 'a'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'a%+1 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=5 'a%+1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=5 'a%+1 '
     (check_literal)   '%' != 'a'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=5 'a%+1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=5 'a%+1 '
     (check_literal)   '"' != 'a'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'a%+1 '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'a%+1 ':
      (check_vname) check_vname ret1 '%+1 ':
     (check_variable) check_variable: '%+1 '
     (check_variable) check_variable: Ary test '+1 '

      (check_literal) check_literal:lit='(' idx=7 '+1 '
      (check_literal) check_literal:After drop space:'(' idx=7 '+1 '
      (check_literal)   '(' != '+'
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (check_eitem) check_eitem: '+1 '

   (check_operator) check_operator: +1 

    (check_literal) check_literal:lit=' ,' idx=7 '+1 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=7 '+1 '
    (check_literal)   ',' != '+'
    (check_literal) check_literal: ret0
   (check_operator) ret1:is comma: 0
  (check_eitem) check_eitem:ret1 comma:1

  (check_eitem) check_eitem: '1 '

   (check_operator) check_operator: 1 

    (check_literal) check_literal:lit=' ,' idx=8 '1 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=8 '1 '
    (check_literal)   ',' != '1'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: '1 '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=8 '1 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=8 '1 '
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=8 '1 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=8 '1 '
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '1 '
     (check_integer) check_integer:ret1
    (check_number) check_number: ret1
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (check_eitem) check_eitem: ' '

   (check_operator) check_operator:  

    (check_literal) check_literal:lit=' ,' idx=10 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=10 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_operator) ret0:is comma: 0

   (check_function) check_function: ''
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=9 ' '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=10 ''
    (check_literal) check_literal  ret0 Empty test string

    (check_literal) check_literal:lit=' "' idx=9 ' '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=10 ''
    (check_literal) check_literal  ret0 Empty test string

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: ''
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname '':
     (check_vname) check_vname ret0 '':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret1

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=9 ' '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=10 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_sub_expr) check_sub_expr: ret0
  (check_eitem) check_eitem:ret0
 (check_expression) check_expression:ret1 ' '
(check_assignment) check_assignment:ret1

 (scan_assignment) scan_assignment:

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'a%=a%+1 '
   (scan_vname) scan_vname: ret1 'a'
  (scan_variable) scan_variable: '%=a%+1 ' vname='a'
  (scan_variable) scan_variable: Ary test '=a%+1 '

   (check_literal) check_literal:lit='(' idx=4 '=a%+1 '
   (check_literal) check_literal:After drop space:'(' idx=4 '=a%+1 '
   (check_literal)   '(' != '='
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='a%' is str:0 int:1 flt:0 ary:0
   Frst:1 T:'a%' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:a% is not function
token_is_variable: tok:'a%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:a% is not function
 (init_get_name) 
init_get_name:'a%'
 (init_get_name) 
init_get_name:'a%'
 (get_name) 
get_name:gn:'a%'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] i i a%
 (print_var_info) 
VAR INFO: '                a%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0

  (scan_assignment_equals) scan_assignment_equals:lit=' =' '=a%+1 '
  (scan_assignment_equals) scan_assignment_equals:After drop space:'=a%+1 '
  (scan_assignment_equals) scan_assignment_equals:while loop:=a%+1 
   Frst:0 T:':=' exptype:i
  (operator_precedence) 
:= is operator
':=' is operator
  (process_token) 
Token is operator o1 name::= o2 name:
  (process_token) 
opr1:1 opr2:0
Push 1
 Push:':='
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (1)

  (op_stack_print) 
000: := type:0
  (op_stack_print) 
------------------

  (scan_assignment_equals) scan_assignment_equals:ret1

  (scan_expression) scan_expression: 'a%+1 '

   (check_eitem) check_eitem: 'a%+1 '

    (check_operator) check_operator: a%+1 

     (check_literal) check_literal:lit=' ,' idx=5 'a%+1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=5 'a%+1 '
     (check_literal)   ',' != 'a'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'a%+1 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=5 'a%+1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=5 'a%+1 '
     (check_literal)   '%' != 'a'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=5 'a%+1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=5 'a%+1 '
     (check_literal)   '"' != 'a'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'a%+1 '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'a%+1 ':
      (check_vname) check_vname ret1 '%+1 ':
     (check_variable) check_variable: '%+1 '
     (check_variable) check_variable: Ary test '+1 '

      (check_literal) check_literal:lit='(' idx=7 '+1 '
      (check_literal) check_literal:After drop space:'(' idx=7 '+1 '
      (check_literal)   '(' != '+'
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator: a%+1 

    (check_literal) check_literal:lit=' ,' idx=5 'a%+1 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=5 'a%+1 '
    (check_literal)   ',' != 'a'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'a%+1 '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=5 'a%+1 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=5 'a%+1 '
    (check_literal)   '%' != 'a'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=5 'a%+1 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=5 'a%+1 '
    (check_literal)   '"' != 'a'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'a%+1 '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'a%+1 ':
     (check_vname) check_vname ret1 '%+1 ':
    (check_variable) check_variable: '%+1 '
    (check_variable) check_variable: Ary test '+1 '

     (check_literal) check_literal:lit='(' idx=7 '+1 '
     (check_literal) check_literal:After drop space:'(' idx=7 '+1 '
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1

  (scan_atom) scan_atom:

   (check_literal) check_literal:lit=' %' idx=5 'a%+1 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=5 'a%+1 '
   (check_literal)   '%' != 'a'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=5 'a%+1 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=5 'a%+1 '
   (check_literal)   '"' != 'a'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'a%+1 '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'a%+1 ':
    (check_vname) check_vname ret1 '%+1 ':
   (check_variable) check_variable: '%+1 '
   (check_variable) check_variable: Ary test '+1 '

    (check_literal) check_literal:lit='(' idx=7 '+1 '
    (check_literal) check_literal:After drop space:'(' idx=7 '+1 '
    (check_literal)   '(' != '+'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'a%+1 '
   (scan_vname) scan_vname: ret1 'a'
  (scan_variable) scan_variable: '%+1 ' vname='a'
  (scan_variable) scan_variable: Ary test '+1 '

   (check_literal) check_literal:lit='(' idx=7 '+1 '
   (check_literal) check_literal:After drop space:'(' idx=7 '+1 '
   (check_literal)   '(' != '+'
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='a%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'a%' exptype:i
 (operator_precedence) 
:= is operator
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:a% is not function
token_is_variable: tok:'a%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:a% is not function
 (init_get_name) 
init_get_name:'a%'
 (init_get_name) 
init_get_name:'a%'
 (get_name) 
get_name:gn:'a%'
process_token:type:i req_type:i
modify_expression_type:Inittype:i Intype:i Outtype:i
( output_variable) [i,()] i i a%
 (print_var_info) 
VAR INFO: '                a%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
 (scan_atom) scan_atom:ret1
(scan_expression) n commas now:0

 (check_eitem) check_eitem: '+1 '

  (check_operator) check_operator: +1 

   (check_literal) check_literal:lit=' ,' idx=7 '+1 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=7 '+1 '
   (check_literal)   ',' != '+'
   (check_literal) check_literal: ret0
  (check_operator) ret1:is comma: 0
 (check_eitem) check_eitem:ret1 comma:1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: +1 

   (check_literal) check_literal:lit=' ,' idx=7 '+1 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=7 '+1 '
   (check_literal)   ',' != '+'
   (check_literal) check_literal: ret0
  (check_operator) ret1:is comma: 0

  (scan_operator) scan_operator: '+1 '

   (check_literal) check_literal:lit=' ,' idx=7 '+1 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=7 '+1 '
   (check_literal)   ',' != '+'
   (check_literal) check_literal: ret0
  (scan_operator) scan_operator: ret1 '1 '
   Frst:0 T:'+' exptype:i
 (operator_precedence) 
+ is operator
 (operator_precedence) 
:= is operator
'+' is operator
 (process_token) 
Token is operator o1 name:+ o2 name::=
 (process_token) 
opr1:3 opr2:1
 (operator_precedence) 
:= is operator
 (operator_precedence) 
:= is operator
Push 1
 Push:'+'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: := type:0
 (op_stack_print) 
001: + type:0
 (op_stack_print) 
------------------

 (scan_eitem) Is comma;0
 (scan_expression) n commas now:0

  (check_eitem) check_eitem: '1 '

   (check_operator) check_operator: 1 

    (check_literal) check_literal:lit=' ,' idx=8 '1 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=8 '1 '
    (check_literal)   ',' != '1'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: '1 '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=8 '1 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=8 '1 '
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=8 '1 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=8 '1 '
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '1 '
     (check_integer) check_integer:ret1
    (check_number) check_number: ret1
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator: 1 

    (check_literal) check_literal:lit=' ,' idx=8 '1 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=8 '1 '
    (check_literal)   ',' != '1'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: '1 '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=8 '1 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=8 '1 '
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=8 '1 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=8 '1 '
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '1 '
     (check_integer) check_integer:ret1
    (check_number) check_number: ret1
   (check_atom) check_atom:ret1

   (scan_atom) scan_atom:

    (check_literal) check_literal:lit=' %' idx=8 '1 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=8 '1 '
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=8 '1 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=8 '1 '
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '1 '
     (check_integer) check_integer:ret1
    (check_number) check_number: ret1

    (scan_number) scan_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '1 '
     (check_integer) check_integer:ret1

     (scan_integer) scan_integer:
     (scan_integer) scan_integer:ret1
   Frst:0 T:'1' exptype:i
    (operator_precedence) 
+ is operator
modify_expression_type:Inittype:i Intype:i Outtype:i
(  output_integer) [i,()] i i 1
    (scan_integer) scan_integer:ret1  1
   (scan_atom) scan_atom:ret1
  (scan_expression) n commas now:0

   (check_eitem) check_eitem: ' '

    (check_operator) check_operator:  

     (check_literal) check_literal:lit=' ,' idx=10 ''
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=10 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_operator) ret0:is comma: 0

    (check_function) check_function: ''
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=9 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=10 ''
     (check_literal) check_literal  ret0 Empty test string

     (check_literal) check_literal:lit=' "' idx=9 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=10 ''
     (check_literal) check_literal  ret0 Empty test string

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: ''
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname '':
      (check_vname) check_vname ret0 '':
     (check_variable) check_variable:ret0 
    (check_atom) check_atom:ret1

    (check_sub_expr) check_sub_expr:

     (check_literal) check_literal:lit=' (' idx=9 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'(' idx=10 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_sub_expr) check_sub_expr: ret0
   (check_eitem) check_eitem:ret0
  (scan_expression) scan_expression: ret1 ' ' commas:0
 (scan_assignment) scan_assignment: ret1
Finalise stack
Pop '+'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: := type:0
(op_stack_print) 
------------------

( output_operator) [i,()] i i +
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:+ is not function
Pop ':='
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_operator) [i,()] i i :=
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function::= is not function
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'a%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'a%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '1' nidx:9  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '+' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i ':=' nidx:0  0:
=================
 BE:a%
type_check_stack_push: 'a%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'a%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'a%' type:i (0)
 BE:a%
type_check_stack_push: 'a%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'a%' type:0
(type_check_stack_print) 
001: 'a%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'a%' type:i (0)
001: 'a%' type:i (0)
 BE:1
type_check_stack_push: '1'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (3)

(type_check_stack_print) 
000: 'a%' type:0
(type_check_stack_print) 
001: 'a%' type:0
(type_check_stack_print) 
002: '1' type:0
(type_check_stack_print) 
------------------


Type Check Stack (3)

000: 'a%' type:i (0)
001: 'a%' type:i (0)
002: '1' type:i (0)
 BE:+
BUFF_ID_OPERATOR
Found operator +
type_check_stack_pop: '1'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'a%' type:0
(type_check_stack_print) 
001: 'a%' type:0
(type_check_stack_print) 
------------------

type_check_stack_pop: 'a%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'a%' type:0
(type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'a%' type:0
(type_check_stack_print) 
001: '000' type:0
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'a%' type:i (0)
001: '000' type:i (0)
 BE::=
BUFF_ID_OPERATOR
Found operator :=
type_check_stack_pop: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'a%' type:0
(type_check_stack_print) 
------------------

type_check_stack_pop: 'a%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (0)

(type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'a%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'a%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '1' nidx:9  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '+' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i ':=' nidx:0  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i 'a%'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'a%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_INTEGER      i rq:i '1'  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_OPERATOR     i rq:i '+'  2: 3 2
(dump_exp_buffer2) N5 EXP_BUFF_ID_OPERATOR     i rq:i ':='  2: 4 1
=================
(process_expression_types) 
==INFIX==

Var: a% ary:0 NumIdx:0
infix_stack_push: 'a%'
Var: a% ary:0 NumIdx:0
infix_stack_push: 'a%'
infix_stack_push: '1'
infix_stack_pop: '1'
infix_stack_pop: 'a%'
infix_stack_push: '(a% + 1)'
infix_stack_pop: '(a% + 1)'
infix_stack_pop: 'a%'
infix_stack_push: '(a% := (a% + 1))'
infix_stack_pop: '(a% := (a% + 1))'
(process_expression_types) ==(a% := (a% + 1))==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
(    output_qcode) N3 EXP_BUFF_ID_INTEGER      i rq:i 1  0:
(    output_qcode) N4 EXP_BUFF_ID_OPERATOR     i rq:i +  2: 3 2
(    output_qcode) N5 EXP_BUFF_ID_OPERATOR     i rq:i :=  2: 4 1

 (check_literal) check_literal:lit=':' idx=10 ''
 (check_literal) check_literal:After drop space:':' idx=10 ''
 (check_literal) check_literal  ret0 Empty test string
(translate_file) 
cline scanned OK
**********************************************
**  IF a%=x% AND (c%=y% OR c1%=y%) :REM Hit **
**********************************************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'IF a%=x% AND (c%=y% OR c1%=y%) :REM Hit ':
     (check_vname) check_vname ret1 ' a%=x% AND (c%=y% OR c1%=y%) :REM Hit ':
    (check_variable) check_variable: ' a%=x% AND (c%=y% OR c1%=y%) :REM Hit '
    (check_variable) check_variable: Ary test ' a%=x% AND (c%=y% OR c1%=y%) :REM Hit '

     (check_literal) check_literal:lit='(' idx=4 ' a%=x% AND (c%=y% OR c1%=y%) :REM Hit '
     (check_literal) check_literal:After drop space:'(' idx=4 ' a%=x% AND (c%=y% OR c1%=y%) :REM Hit '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=4 ' a%=x% AND (c%=y% OR c1%=y%) :REM Hit '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=5 'a%=x% AND (c%=y% OR c1%=y%) :REM Hit '
   (check_literal)   '=' != 'a'
   (check_literal) check_literal: ret0
  (check_assignment) check_assignment:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) check_textlabel: 'IF a%=x% AND (c%=y% OR c1%=y%) :REM Hit '
   (check_textlabel) check_textlabel:ret0
  (check_proc_call) check_proc_call:ret0

  (check_command) check_command:
  (check_command) check_command: ret0

  (check_function) check_function: 'IF a%=x% AND (c%=y% OR c1%=y%) :REM Hit '
  (check_function) check_function: ret0

  (check_literal) check_literal:lit=' IF' idx=0 '  IF a%=x% AND (c%=y% OR c1%=y%) :REM Hit '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'IF' idx=2 'IF a%=x% AND (c%=y% OR c1%=y%) :REM Hit '
  (check_literal) check_literal:After while(): a%=x% AND (c%=y% OR c1%=y%) :REM Hit 
  (check_literal) check_literal:ret1 
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=38, ' a%=x% AND (c%=y% OR c1%=y%) :REM Hit '
========================================================
  IF a%=x% AND (c%=y% OR c1%=y%) :REM Hit 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'IF a%=x% AND (c%=y% OR c1%=y%) :REM Hit ':
    (check_vname) check_vname ret1 ' a%=x% AND (c%=y% OR c1%=y%) :REM Hit ':
   (check_variable) check_variable: ' a%=x% AND (c%=y% OR c1%=y%) :REM Hit '
   (check_variable) check_variable: Ary test ' a%=x% AND (c%=y% OR c1%=y%) :REM Hit '

    (check_literal) check_literal:lit='(' idx=4 ' a%=x% AND (c%=y% OR c1%=y%) :REM Hit '
    (check_literal) check_literal:After drop space:'(' idx=4 ' a%=x% AND (c%=y% OR c1%=y%) :REM Hit '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=4 ' a%=x% AND (c%=y% OR c1%=y%) :REM Hit '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=5 'a%=x% AND (c%=y% OR c1%=y%) :REM Hit '
  (check_literal)   '=' != 'a'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'IF a%=x% AND (c%=y% OR c1%=y%) :REM Hit '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret0

 (check_function) check_function: 'IF a%=x% AND (c%=y% OR c1%=y%) :REM Hit '
 (check_function) check_function: ret0

 (check_literal) check_literal:lit=' IF' idx=2 'IF a%=x% AND (c%=y% OR c1%=y%) :REM Hit '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'IF' idx=2 'IF a%=x% AND (c%=y% OR c1%=y%) :REM Hit '
 (check_literal) check_literal:After while(): a%=x% AND (c%=y% OR c1%=y%) :REM Hit 
 (check_literal) check_literal:ret1 

 (scan_literal) scan_literal:lit=' IF' 'IF a%=x% AND (c%=y% OR c1%=y%) :REM Hit '
 (scan_literal) scan_literal:After drop space:'IF a%=x% AND (c%=y% OR c1%=y%) :REM Hit '
 (scan_literal) scan_literal:while loop:IF a%=x% AND (c%=y% OR c1%=y%) :REM Hit 
 (scan_literal) scan_literal:while loop:F a%=x% AND (c%=y% OR c1%=y%) :REM Hit 
   Frst:1 T:'IF' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:IF is not function
token_is_variable: tok:'IF'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:IF is not function
 (init_get_name) 
init_get_name:'IF'
 (init_get_name) 
init_get_name:'IF'
 (get_name) 
get_name:gn:'IF'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] f f IF
 (scan_literal) scan_literal:ret1

 (scan_expression) scan_expression: ' a%=x% AND (c%=y% OR c1%=y%) :REM Hit '

  (check_eitem) check_eitem: 'a%=x% AND (c%=y% OR c1%=y%) :REM Hit '

   (check_operator) check_operator: a%=x% AND (c%=y% OR c1%=y%) :REM Hit 

    (check_literal) check_literal:lit=' ,' idx=5 'a%=x% AND (c%=y% OR c1%=y%) :REM Hit '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=5 'a%=x% AND (c%=y% OR c1%=y%) :REM Hit '
    (check_literal)   ',' != 'a'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'a%=x% AND (c%=y% OR c1%=y%) :REM Hit '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=5 'a%=x% AND (c%=y% OR c1%=y%) :REM Hit '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=5 'a%=x% AND (c%=y% OR c1%=y%) :REM Hit '
    (check_literal)   '%' != 'a'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=5 'a%=x% AND (c%=y% OR c1%=y%) :REM Hit '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=5 'a%=x% AND (c%=y% OR c1%=y%) :REM Hit '
    (check_literal)   '"' != 'a'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'a%=x% AND (c%=y% OR c1%=y%) :REM Hit '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'a%=x% AND (c%=y% OR c1%=y%) :REM Hit ':
     (check_vname) check_vname ret1 '%=x% AND (c%=y% OR c1%=y%) :REM Hit ':
    (check_variable) check_variable: '%=x% AND (c%=y% OR c1%=y%) :REM Hit '
    (check_variable) check_variable: Ary test '=x% AND (c%=y% OR c1%=y%) :REM Hit '

     (check_literal) check_literal:lit='(' idx=7 '=x% AND (c%=y% OR c1%=y%) :REM Hit '
     (check_literal) check_literal:After drop space:'(' idx=7 '=x% AND (c%=y% OR c1%=y%) :REM Hit '
     (check_literal)   '(' != '='
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1
 (check_eitem) check_eitem:ret1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: a%=x% AND (c%=y% OR c1%=y%) :REM Hit 

   (check_literal) check_literal:lit=' ,' idx=5 'a%=x% AND (c%=y% OR c1%=y%) :REM Hit '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=5 'a%=x% AND (c%=y% OR c1%=y%) :REM Hit '
   (check_literal)   ',' != 'a'
   (check_literal) check_literal: ret0
  (check_operator) ret0:is comma: 0

  (check_function) check_function: 'a%=x% AND (c%=y% OR c1%=y%) :REM Hit '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=5 'a%=x% AND (c%=y% OR c1%=y%) :REM Hit '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=5 'a%=x% AND (c%=y% OR c1%=y%) :REM Hit '
   (check_literal)   '%' != 'a'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=5 'a%=x% AND (c%=y% OR c1%=y%) :REM Hit '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=5 'a%=x% AND (c%=y% OR c1%=y%) :REM Hit '
   (check_literal)   '"' != 'a'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'a%=x% AND (c%=y% OR c1%=y%) :REM Hit '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'a%=x% AND (c%=y% OR c1%=y%) :REM Hit ':
    (check_vname) check_vname ret1 '%=x% AND (c%=y% OR c1%=y%) :REM Hit ':
   (check_variable) check_variable: '%=x% AND (c%=y% OR c1%=y%) :REM Hit '
   (check_variable) check_variable: Ary test '=x% AND (c%=y% OR c1%=y%) :REM Hit '

    (check_literal) check_literal:lit='(' idx=7 '=x% AND (c%=y% OR c1%=y%) :REM Hit '
    (check_literal) check_literal:After drop space:'(' idx=7 '=x% AND (c%=y% OR c1%=y%) :REM Hit '
    (check_literal)   '(' != '='
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) check_atom:ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=5 'a%=x% AND (c%=y% OR c1%=y%) :REM Hit '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=5 'a%=x% AND (c%=y% OR c1%=y%) :REM Hit '
  (check_literal)   '%' != 'a'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=5 'a%=x% AND (c%=y% OR c1%=y%) :REM Hit '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=5 'a%=x% AND (c%=y% OR c1%=y%) :REM Hit '
  (check_literal)   '"' != 'a'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) check_float: ret0

   (check_integer) check_integer: 'a%=x% AND (c%=y% OR c1%=y%) :REM Hit '
   (check_integer) check_integer:ret0
  (check_number) check_number: ret0

  (check_variable) check_variable:

   (check_vname) check_vname 'a%=x% AND (c%=y% OR c1%=y%) :REM Hit ':
   (check_vname) check_vname ret1 '%=x% AND (c%=y% OR c1%=y%) :REM Hit ':
  (check_variable) check_variable: '%=x% AND (c%=y% OR c1%=y%) :REM Hit '
  (check_variable) check_variable: Ary test '=x% AND (c%=y% OR c1%=y%) :REM Hit '

   (check_literal) check_literal:lit='(' idx=7 '=x% AND (c%=y% OR c1%=y%) :REM Hit '
   (check_literal) check_literal:After drop space:'(' idx=7 '=x% AND (c%=y% OR c1%=y%) :REM Hit '
   (check_literal)   '(' != '='
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) scan_variable:

  (scan_vname) scan_vname: 'a%=x% AND (c%=y% OR c1%=y%) :REM Hit '
  (scan_vname) scan_vname: ret1 'a'
 (scan_variable) scan_variable: '%=x% AND (c%=y% OR c1%=y%) :REM Hit ' vname='a'
 (scan_variable) scan_variable: Ary test '=x% AND (c%=y% OR c1%=y%) :REM Hit '

  (check_literal) check_literal:lit='(' idx=7 '=x% AND (c%=y% OR c1%=y%) :REM Hit '
  (check_literal) check_literal:After drop space:'(' idx=7 '=x% AND (c%=y% OR c1%=y%) :REM Hit '
  (check_literal)   '(' != '='
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='a%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'a%' exptype:i
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:a% is not function
token_is_variable: tok:'a%'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:a% is not function
(init_get_name) 
init_get_name:'a%'
(init_get_name) 
init_get_name:'a%'
(get_name) 
get_name:gn:'a%'
process_token:type:i req_type:i
modify_expression_type:Inittype:i Intype:i Outtype:i
( output_variable) [i,()] i i a%
(print_var_info) 
VAR INFO: '                a%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
(scan_atom) scan_atom:ret1
(scan_expression) n commas now:0

 (check_eitem) check_eitem: '=x% AND (c%=y% OR c1%=y%) :REM Hit '

  (check_operator) check_operator: =x% AND (c%=y% OR c1%=y%) :REM Hit 

   (check_literal) check_literal:lit=' ,' idx=7 '=x% AND (c%=y% OR c1%=y%) :REM Hit '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=7 '=x% AND (c%=y% OR c1%=y%) :REM Hit '
   (check_literal)   ',' != '='
   (check_literal) check_literal: ret0
  (check_operator) ret1:is comma: 0
 (check_eitem) check_eitem:ret1 comma:1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: =x% AND (c%=y% OR c1%=y%) :REM Hit 

   (check_literal) check_literal:lit=' ,' idx=7 '=x% AND (c%=y% OR c1%=y%) :REM Hit '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=7 '=x% AND (c%=y% OR c1%=y%) :REM Hit '
   (check_literal)   ',' != '='
   (check_literal) check_literal: ret0
  (check_operator) ret1:is comma: 0

  (scan_operator) scan_operator: '=x% AND (c%=y% OR c1%=y%) :REM Hit '

   (check_literal) check_literal:lit=' ,' idx=7 '=x% AND (c%=y% OR c1%=y%) :REM Hit '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=7 '=x% AND (c%=y% OR c1%=y%) :REM Hit '
   (check_literal)   ',' != '='
   (check_literal) check_literal: ret0
  (scan_operator) scan_operator: ret1 'x% AND (c%=y% OR c1%=y%) :REM Hit '
   Frst:0 T:'=' exptype:i
 (operator_precedence) 
= is operator
'=' is operator
 (process_token) 
Token is operator o1 name:= o2 name:
 (process_token) 
opr1:1 opr2:0
Push 1
 Push:'='
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: = type:0
 (op_stack_print) 
------------------

 (scan_eitem) Is comma;0
 (scan_expression) n commas now:0

  (check_eitem) check_eitem: 'x% AND (c%=y% OR c1%=y%) :REM Hit '

   (check_operator) check_operator: x% AND (c%=y% OR c1%=y%) :REM Hit 

    (check_literal) check_literal:lit=' ,' idx=8 'x% AND (c%=y% OR c1%=y%) :REM Hit '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=8 'x% AND (c%=y% OR c1%=y%) :REM Hit '
    (check_literal)   ',' != 'x'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'x% AND (c%=y% OR c1%=y%) :REM Hit '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=8 'x% AND (c%=y% OR c1%=y%) :REM Hit '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=8 'x% AND (c%=y% OR c1%=y%) :REM Hit '
    (check_literal)   '%' != 'x'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=8 'x% AND (c%=y% OR c1%=y%) :REM Hit '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=8 'x% AND (c%=y% OR c1%=y%) :REM Hit '
    (check_literal)   '"' != 'x'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'x% AND (c%=y% OR c1%=y%) :REM Hit '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'x% AND (c%=y% OR c1%=y%) :REM Hit ':
     (check_vname) check_vname ret1 '% AND (c%=y% OR c1%=y%) :REM Hit ':
    (check_variable) check_variable: '% AND (c%=y% OR c1%=y%) :REM Hit '
    (check_variable) check_variable: Ary test ' AND (c%=y% OR c1%=y%) :REM Hit '

     (check_literal) check_literal:lit='(' idx=10 ' AND (c%=y% OR c1%=y%) :REM Hit '
     (check_literal) check_literal:After drop space:'(' idx=10 ' AND (c%=y% OR c1%=y%) :REM Hit '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1
 (check_eitem) check_eitem:ret1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: x% AND (c%=y% OR c1%=y%) :REM Hit 

   (check_literal) check_literal:lit=' ,' idx=8 'x% AND (c%=y% OR c1%=y%) :REM Hit '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=8 'x% AND (c%=y% OR c1%=y%) :REM Hit '
   (check_literal)   ',' != 'x'
   (check_literal) check_literal: ret0
  (check_operator) ret0:is comma: 0

  (check_function) check_function: 'x% AND (c%=y% OR c1%=y%) :REM Hit '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=8 'x% AND (c%=y% OR c1%=y%) :REM Hit '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=8 'x% AND (c%=y% OR c1%=y%) :REM Hit '
   (check_literal)   '%' != 'x'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=8 'x% AND (c%=y% OR c1%=y%) :REM Hit '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=8 'x% AND (c%=y% OR c1%=y%) :REM Hit '
   (check_literal)   '"' != 'x'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'x% AND (c%=y% OR c1%=y%) :REM Hit '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'x% AND (c%=y% OR c1%=y%) :REM Hit ':
    (check_vname) check_vname ret1 '% AND (c%=y% OR c1%=y%) :REM Hit ':
   (check_variable) check_variable: '% AND (c%=y% OR c1%=y%) :REM Hit '
   (check_variable) check_variable: Ary test ' AND (c%=y% OR c1%=y%) :REM Hit '

    (check_literal) check_literal:lit='(' idx=10 ' AND (c%=y% OR c1%=y%) :REM Hit '
    (check_literal) check_literal:After drop space:'(' idx=10 ' AND (c%=y% OR c1%=y%) :REM Hit '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) check_atom:ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=8 'x% AND (c%=y% OR c1%=y%) :REM Hit '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=8 'x% AND (c%=y% OR c1%=y%) :REM Hit '
  (check_literal)   '%' != 'x'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=8 'x% AND (c%=y% OR c1%=y%) :REM Hit '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=8 'x% AND (c%=y% OR c1%=y%) :REM Hit '
  (check_literal)   '"' != 'x'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) check_float: ret0

   (check_integer) check_integer: 'x% AND (c%=y% OR c1%=y%) :REM Hit '
   (check_integer) check_integer:ret0
  (check_number) check_number: ret0

  (check_variable) check_variable:

   (check_vname) check_vname 'x% AND (c%=y% OR c1%=y%) :REM Hit ':
   (check_vname) check_vname ret1 '% AND (c%=y% OR c1%=y%) :REM Hit ':
  (check_variable) check_variable: '% AND (c%=y% OR c1%=y%) :REM Hit '
  (check_variable) check_variable: Ary test ' AND (c%=y% OR c1%=y%) :REM Hit '

   (check_literal) check_literal:lit='(' idx=10 ' AND (c%=y% OR c1%=y%) :REM Hit '
   (check_literal) check_literal:After drop space:'(' idx=10 ' AND (c%=y% OR c1%=y%) :REM Hit '
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) scan_variable:

  (scan_vname) scan_vname: 'x% AND (c%=y% OR c1%=y%) :REM Hit '
  (scan_vname) scan_vname: ret1 'x'
 (scan_variable) scan_variable: '% AND (c%=y% OR c1%=y%) :REM Hit ' vname='x'
 (scan_variable) scan_variable: Ary test ' AND (c%=y% OR c1%=y%) :REM Hit '

  (check_literal) check_literal:lit='(' idx=10 ' AND (c%=y% OR c1%=y%) :REM Hit '
  (check_literal) check_literal:After drop space:'(' idx=10 ' AND (c%=y% OR c1%=y%) :REM Hit '
  (check_literal)   '(' != ' '
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='x%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'x%' exptype:i
(operator_precedence) 
= is operator
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:x% is not function
token_is_variable: tok:'x%'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:x% is not function
(init_get_name) 
init_get_name:'x%'
(init_get_name) 
init_get_name:'x%'
(get_name) 
get_name:gn:'x%'
process_token:type:i req_type:i
modify_expression_type:Inittype:i Intype:i Outtype:i
( output_variable) [i,()] i i x%
(print_var_info) 
VAR INFO: '                x%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
(scan_atom) scan_atom:ret1
(scan_expression) n commas now:0

 (check_eitem) check_eitem: ' AND (c%=y% OR c1%=y%) :REM Hit '

  (check_operator) check_operator:  AND (c%=y% OR c1%=y%) :REM Hit 

   (check_literal) check_literal:lit=' ,' idx=11 'AND (c%=y% OR c1%=y%) :REM Hit '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=11 'AND (c%=y% OR c1%=y%) :REM Hit '
   (check_literal)   ',' != 'A'
   (check_literal) check_literal: ret0
  (check_operator) ret1:is comma: 0
 (check_eitem) check_eitem:ret1 comma:1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator:  AND (c%=y% OR c1%=y%) :REM Hit 

   (check_literal) check_literal:lit=' ,' idx=11 'AND (c%=y% OR c1%=y%) :REM Hit '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=11 'AND (c%=y% OR c1%=y%) :REM Hit '
   (check_literal)   ',' != 'A'
   (check_literal) check_literal: ret0
  (check_operator) ret1:is comma: 0

  (scan_operator) scan_operator: ' AND (c%=y% OR c1%=y%) :REM Hit '

   (check_literal) check_literal:lit=' ,' idx=11 'AND (c%=y% OR c1%=y%) :REM Hit '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=11 'AND (c%=y% OR c1%=y%) :REM Hit '
   (check_literal)   ',' != 'A'
   (check_literal) check_literal: ret0
  (scan_operator) scan_operator: ret1 ' (c%=y% OR c1%=y%) :REM Hit '
   Frst:0 T:'AND' exptype:i
 (operator_precedence) 
AND is operator
 (operator_precedence) 
= is operator
'AND' is operator
 (process_token) 
Token is operator o1 name:AND o2 name:=
 (process_token) 
opr1:5 opr2:1
 (operator_precedence) 
= is operator
 (operator_precedence) 
= is operator
Push 1
 Push:'AND'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: = type:0
 (op_stack_print) 
001: AND type:0
 (op_stack_print) 
------------------

 (scan_eitem) Is comma;0
 (scan_expression) n commas now:0

  (check_eitem) check_eitem: ' (c%=y% OR c1%=y%) :REM Hit '

   (check_operator) check_operator:  (c%=y% OR c1%=y%) :REM Hit 

    (check_literal) check_literal:lit=' ,' idx=15 '(c%=y% OR c1%=y%) :REM Hit '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=15 '(c%=y% OR c1%=y%) :REM Hit '
    (check_literal)   ',' != '('
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: '(c%=y% OR c1%=y%) :REM Hit '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=14 ' (c%=y% OR c1%=y%) :REM Hit '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=15 '(c%=y% OR c1%=y%) :REM Hit '
    (check_literal)   '%' != '('
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=14 ' (c%=y% OR c1%=y%) :REM Hit '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=15 '(c%=y% OR c1%=y%) :REM Hit '
    (check_literal)   '"' != '('
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '(c%=y% OR c1%=y%) :REM Hit '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname '(c%=y% OR c1%=y%) :REM Hit ':
     (check_vname) check_vname ret0 '(c%=y% OR c1%=y%) :REM Hit ':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret1

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=14 ' (c%=y% OR c1%=y%) :REM Hit '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=15 '(c%=y% OR c1%=y%) :REM Hit '
    (check_literal) check_literal:After while():c%=y% OR c1%=y%) :REM Hit 
    (check_literal) check_literal:ret1 
   (check_sub_expr) check_sub_expr: ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator:  (c%=y% OR c1%=y%) :REM Hit 

    (check_literal) check_literal:lit=' ,' idx=15 '(c%=y% OR c1%=y%) :REM Hit '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=15 '(c%=y% OR c1%=y%) :REM Hit '
    (check_literal)   ',' != '('
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: '(c%=y% OR c1%=y%) :REM Hit '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=14 ' (c%=y% OR c1%=y%) :REM Hit '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=15 '(c%=y% OR c1%=y%) :REM Hit '
    (check_literal)   '%' != '('
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=14 ' (c%=y% OR c1%=y%) :REM Hit '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=15 '(c%=y% OR c1%=y%) :REM Hit '
    (check_literal)   '"' != '('
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '(c%=y% OR c1%=y%) :REM Hit '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname '(c%=y% OR c1%=y%) :REM Hit ':
     (check_vname) check_vname ret0 '(c%=y% OR c1%=y%) :REM Hit ':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret1

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=14 ' (c%=y% OR c1%=y%) :REM Hit '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=15 '(c%=y% OR c1%=y%) :REM Hit '
    (check_literal) check_literal:After while():c%=y% OR c1%=y%) :REM Hit 
    (check_literal) check_literal:ret1 
   (check_sub_expr) check_sub_expr: ret1

   (scan_sub_expr) scan_sub_expr:

    (scan_literal) scan_literal:lit=' (' ' (c%=y% OR c1%=y%) :REM Hit '
    (scan_literal) scan_literal:After drop space:'(c%=y% OR c1%=y%) :REM Hit '
    (scan_literal) scan_literal:while loop:(c%=y% OR c1%=y%) :REM Hit 
   Frst:0 T:'(' exptype:i
    (operator_precedence) 
AND is operator
(output_sub_start)
 Push:'('
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (3)

    (op_stack_print) 
000: = type:0
    (op_stack_print) 
001: AND type:0
    (op_stack_print) 
002: ( type:16
    (op_stack_print) 
------------------

    (scan_literal) scan_literal:ret1
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
   (op_stack_print) 
------------------
   (op_stack_print) 
Operator Stack     (4)

   (op_stack_print) 
000: = type:0
   (op_stack_print) 
001: AND type:0
   (op_stack_print) 
002: ( type:16
   (op_stack_print) 
003: ( type:16
   (op_stack_print) 
------------------


    (scan_expression) scan_expression: 'c%=y% OR c1%=y%) :REM Hit '

     (check_eitem) check_eitem: 'c%=y% OR c1%=y%) :REM Hit '

      (check_operator) check_operator: c%=y% OR c1%=y%) :REM Hit 

       (check_literal) check_literal:lit=' ,' idx=16 'c%=y% OR c1%=y%) :REM Hit '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=16 'c%=y% OR c1%=y%) :REM Hit '
       (check_literal)   ',' != 'c'
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: 'c%=y% OR c1%=y%) :REM Hit '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=16 'c%=y% OR c1%=y%) :REM Hit '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=16 'c%=y% OR c1%=y%) :REM Hit '
       (check_literal)   '%' != 'c'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=16 'c%=y% OR c1%=y%) :REM Hit '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=16 'c%=y% OR c1%=y%) :REM Hit '
       (check_literal)   '"' != 'c'
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: 'c%=y% OR c1%=y%) :REM Hit '
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname 'c%=y% OR c1%=y%) :REM Hit ':
        (check_vname) check_vname ret1 '%=y% OR c1%=y%) :REM Hit ':
       (check_variable) check_variable: '%=y% OR c1%=y%) :REM Hit '
       (check_variable) check_variable: Ary test '=y% OR c1%=y%) :REM Hit '

        (check_literal) check_literal:lit='(' idx=18 '=y% OR c1%=y%) :REM Hit '
        (check_literal) check_literal:After drop space:'(' idx=18 '=y% OR c1%=y%) :REM Hit '
        (check_literal)   '(' != '='
        (check_literal) check_literal: ret0
       (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
      (check_variable) check_variable:ret1 
     (check_atom) check_atom:ret1
    (check_eitem) check_eitem:ret1

    (scan_eitem) scan_eitem:

     (check_operator) check_operator: c%=y% OR c1%=y%) :REM Hit 

      (check_literal) check_literal:lit=' ,' idx=16 'c%=y% OR c1%=y%) :REM Hit '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=16 'c%=y% OR c1%=y%) :REM Hit '
      (check_literal)   ',' != 'c'
      (check_literal) check_literal: ret0
     (check_operator) ret0:is comma: 0

     (check_function) check_function: 'c%=y% OR c1%=y%) :REM Hit '
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=16 'c%=y% OR c1%=y%) :REM Hit '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=16 'c%=y% OR c1%=y%) :REM Hit '
      (check_literal)   '%' != 'c'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=16 'c%=y% OR c1%=y%) :REM Hit '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=16 'c%=y% OR c1%=y%) :REM Hit '
      (check_literal)   '"' != 'c'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: 'c%=y% OR c1%=y%) :REM Hit '
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname 'c%=y% OR c1%=y%) :REM Hit ':
       (check_vname) check_vname ret1 '%=y% OR c1%=y%) :REM Hit ':
      (check_variable) check_variable: '%=y% OR c1%=y%) :REM Hit '
      (check_variable) check_variable: Ary test '=y% OR c1%=y%) :REM Hit '

       (check_literal) check_literal:lit='(' idx=18 '=y% OR c1%=y%) :REM Hit '
       (check_literal) check_literal:After drop space:'(' idx=18 '=y% OR c1%=y%) :REM Hit '
       (check_literal)   '(' != '='
       (check_literal) check_literal: ret0
      (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
     (check_variable) check_variable:ret1 
    (check_atom) check_atom:ret1

    (scan_atom) scan_atom:

     (check_literal) check_literal:lit=' %' idx=16 'c%=y% OR c1%=y%) :REM Hit '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=16 'c%=y% OR c1%=y%) :REM Hit '
     (check_literal)   '%' != 'c'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=16 'c%=y% OR c1%=y%) :REM Hit '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=16 'c%=y% OR c1%=y%) :REM Hit '
     (check_literal)   '"' != 'c'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'c%=y% OR c1%=y%) :REM Hit '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'c%=y% OR c1%=y%) :REM Hit ':
      (check_vname) check_vname ret1 '%=y% OR c1%=y%) :REM Hit ':
     (check_variable) check_variable: '%=y% OR c1%=y%) :REM Hit '
     (check_variable) check_variable: Ary test '=y% OR c1%=y%) :REM Hit '

      (check_literal) check_literal:lit='(' idx=18 '=y% OR c1%=y%) :REM Hit '
      (check_literal) check_literal:After drop space:'(' idx=18 '=y% OR c1%=y%) :REM Hit '
      (check_literal)   '(' != '='
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
    (check_variable) check_variable:ret1 

    (scan_variable) scan_variable:

     (scan_vname) scan_vname: 'c%=y% OR c1%=y%) :REM Hit '
     (scan_vname) scan_vname: ret1 'c'
    (scan_variable) scan_variable: '%=y% OR c1%=y%) :REM Hit ' vname='c'
    (scan_variable) scan_variable: Ary test '=y% OR c1%=y%) :REM Hit '

     (check_literal) check_literal:lit='(' idx=18 '=y% OR c1%=y%) :REM Hit '
     (check_literal) check_literal:After drop space:'(' idx=18 '=y% OR c1%=y%) :REM Hit '
     (check_literal)   '(' != '='
     (check_literal) check_literal: ret0
    (scan_variable) scan_variable:ret1 vname='c%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'c%' exptype:U
   (token_is_function) 
token_is_function:
   (token_is_function) 
token_is_function:c% is not function
token_is_variable: tok:'c%'
   (token_is_function) 
token_is_function:
   (token_is_function) 
token_is_function:c% is not function
   (init_get_name) 
init_get_name:'c%'
   (init_get_name) 
init_get_name:'c%'
   (get_name) 
get_name:gn:'c%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,(i U )] i i c%
   (print_var_info) 
VAR INFO: '                c%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
   (scan_atom) scan_atom:ret1
  (scan_expression) n commas now:0

   (check_eitem) check_eitem: '=y% OR c1%=y%) :REM Hit '

    (check_operator) check_operator: =y% OR c1%=y%) :REM Hit 

     (check_literal) check_literal:lit=' ,' idx=18 '=y% OR c1%=y%) :REM Hit '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=18 '=y% OR c1%=y%) :REM Hit '
     (check_literal)   ',' != '='
     (check_literal) check_literal: ret0
    (check_operator) ret1:is comma: 0
   (check_eitem) check_eitem:ret1 comma:1

   (scan_eitem) scan_eitem:

    (check_operator) check_operator: =y% OR c1%=y%) :REM Hit 

     (check_literal) check_literal:lit=' ,' idx=18 '=y% OR c1%=y%) :REM Hit '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=18 '=y% OR c1%=y%) :REM Hit '
     (check_literal)   ',' != '='
     (check_literal) check_literal: ret0
    (check_operator) ret1:is comma: 0

    (scan_operator) scan_operator: '=y% OR c1%=y%) :REM Hit '

     (check_literal) check_literal:lit=' ,' idx=18 '=y% OR c1%=y%) :REM Hit '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=18 '=y% OR c1%=y%) :REM Hit '
     (check_literal)   ',' != '='
     (check_literal) check_literal: ret0
    (scan_operator) scan_operator: ret1 'y% OR c1%=y%) :REM Hit '
   Frst:0 T:'=' exptype:i
   (operator_precedence) 
= is operator
'=' is operator
   (process_token) 
Token is operator o1 name:= o2 name:(
   (process_token) 
opr1:1 opr2:0
Push 1
 Push:'='
   (op_stack_print) 
------------------
   (op_stack_print) 
Operator Stack     (5)

   (op_stack_print) 
000: = type:0
   (op_stack_print) 
001: AND type:0
   (op_stack_print) 
002: ( type:16
   (op_stack_print) 
003: ( type:16
   (op_stack_print) 
004: = type:0
   (op_stack_print) 
------------------

   (scan_eitem) Is comma;0
   (scan_expression) n commas now:0

    (check_eitem) check_eitem: 'y% OR c1%=y%) :REM Hit '

     (check_operator) check_operator: y% OR c1%=y%) :REM Hit 

      (check_literal) check_literal:lit=' ,' idx=19 'y% OR c1%=y%) :REM Hit '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=19 'y% OR c1%=y%) :REM Hit '
      (check_literal)   ',' != 'y'
      (check_literal) check_literal: ret0
     (check_operator) ret0:is comma: 0

     (check_function) check_function: 'y% OR c1%=y%) :REM Hit '
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=19 'y% OR c1%=y%) :REM Hit '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=19 'y% OR c1%=y%) :REM Hit '
      (check_literal)   '%' != 'y'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=19 'y% OR c1%=y%) :REM Hit '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=19 'y% OR c1%=y%) :REM Hit '
      (check_literal)   '"' != 'y'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: 'y% OR c1%=y%) :REM Hit '
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname 'y% OR c1%=y%) :REM Hit ':
       (check_vname) check_vname ret1 '% OR c1%=y%) :REM Hit ':
      (check_variable) check_variable: '% OR c1%=y%) :REM Hit '
      (check_variable) check_variable: Ary test ' OR c1%=y%) :REM Hit '

       (check_literal) check_literal:lit='(' idx=21 ' OR c1%=y%) :REM Hit '
       (check_literal) check_literal:After drop space:'(' idx=21 ' OR c1%=y%) :REM Hit '
       (check_literal)   '(' != ' '
       (check_literal) check_literal: ret0
      (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
     (check_variable) check_variable:ret1 
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (scan_eitem) scan_eitem:

    (check_operator) check_operator: y% OR c1%=y%) :REM Hit 

     (check_literal) check_literal:lit=' ,' idx=19 'y% OR c1%=y%) :REM Hit '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=19 'y% OR c1%=y%) :REM Hit '
     (check_literal)   ',' != 'y'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'y% OR c1%=y%) :REM Hit '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=19 'y% OR c1%=y%) :REM Hit '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=19 'y% OR c1%=y%) :REM Hit '
     (check_literal)   '%' != 'y'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=19 'y% OR c1%=y%) :REM Hit '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=19 'y% OR c1%=y%) :REM Hit '
     (check_literal)   '"' != 'y'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'y% OR c1%=y%) :REM Hit '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'y% OR c1%=y%) :REM Hit ':
      (check_vname) check_vname ret1 '% OR c1%=y%) :REM Hit ':
     (check_variable) check_variable: '% OR c1%=y%) :REM Hit '
     (check_variable) check_variable: Ary test ' OR c1%=y%) :REM Hit '

      (check_literal) check_literal:lit='(' idx=21 ' OR c1%=y%) :REM Hit '
      (check_literal) check_literal:After drop space:'(' idx=21 ' OR c1%=y%) :REM Hit '
      (check_literal)   '(' != ' '
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1

   (scan_atom) scan_atom:

    (check_literal) check_literal:lit=' %' idx=19 'y% OR c1%=y%) :REM Hit '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=19 'y% OR c1%=y%) :REM Hit '
    (check_literal)   '%' != 'y'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=19 'y% OR c1%=y%) :REM Hit '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=19 'y% OR c1%=y%) :REM Hit '
    (check_literal)   '"' != 'y'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'y% OR c1%=y%) :REM Hit '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'y% OR c1%=y%) :REM Hit ':
     (check_vname) check_vname ret1 '% OR c1%=y%) :REM Hit ':
    (check_variable) check_variable: '% OR c1%=y%) :REM Hit '
    (check_variable) check_variable: Ary test ' OR c1%=y%) :REM Hit '

     (check_literal) check_literal:lit='(' idx=21 ' OR c1%=y%) :REM Hit '
     (check_literal) check_literal:After drop space:'(' idx=21 ' OR c1%=y%) :REM Hit '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 

   (scan_variable) scan_variable:

    (scan_vname) scan_vname: 'y% OR c1%=y%) :REM Hit '
    (scan_vname) scan_vname: ret1 'y'
   (scan_variable) scan_variable: '% OR c1%=y%) :REM Hit ' vname='y'
   (scan_variable) scan_variable: Ary test ' OR c1%=y%) :REM Hit '

    (check_literal) check_literal:lit='(' idx=21 ' OR c1%=y%) :REM Hit '
    (check_literal) check_literal:After drop space:'(' idx=21 ' OR c1%=y%) :REM Hit '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (scan_variable) scan_variable:ret1 vname='y%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'y%' exptype:i
  (operator_precedence) 
= is operator
  (token_is_function) 
token_is_function:
  (token_is_function) 
token_is_function:y% is not function
token_is_variable: tok:'y%'
  (token_is_function) 
token_is_function:
  (token_is_function) 
token_is_function:y% is not function
  (init_get_name) 
init_get_name:'y%'
  (init_get_name) 
init_get_name:'y%'
  (get_name) 
get_name:gn:'y%'
process_token:type:i req_type:i
modify_expression_type:Inittype:i Intype:i Outtype:i
( output_variable) [i,(i U )] i i y%
  (print_var_info) 
VAR INFO: '                y%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
  (scan_atom) scan_atom:ret1
 (scan_expression) n commas now:0

  (check_eitem) check_eitem: ' OR c1%=y%) :REM Hit '

   (check_operator) check_operator:  OR c1%=y%) :REM Hit 

    (check_literal) check_literal:lit=' ,' idx=22 'OR c1%=y%) :REM Hit '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=22 'OR c1%=y%) :REM Hit '
    (check_literal)   ',' != 'O'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'OR c1%=y%) :REM Hit '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=21 ' OR c1%=y%) :REM Hit '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=22 'OR c1%=y%) :REM Hit '
    (check_literal)   '%' != 'O'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=21 ' OR c1%=y%) :REM Hit '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=22 'OR c1%=y%) :REM Hit '
    (check_literal)   '"' != 'O'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'OR c1%=y%) :REM Hit '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'OR c1%=y%) :REM Hit ':
     (check_vname) check_vname ret1 ' c1%=y%) :REM Hit ':
    (check_variable) check_variable: ' c1%=y%) :REM Hit '
    (check_variable) check_variable: Ary test ' c1%=y%) :REM Hit '

     (check_literal) check_literal:lit='(' idx=24 ' c1%=y%) :REM Hit '
     (check_literal) check_literal:After drop space:'(' idx=24 ' c1%=y%) :REM Hit '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1
 (check_eitem) check_eitem:ret1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator:  OR c1%=y%) :REM Hit 

   (check_literal) check_literal:lit=' ,' idx=22 'OR c1%=y%) :REM Hit '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=22 'OR c1%=y%) :REM Hit '
   (check_literal)   ',' != 'O'
   (check_literal) check_literal: ret0
  (check_operator) ret0:is comma: 0

  (check_function) check_function: 'OR c1%=y%) :REM Hit '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=21 ' OR c1%=y%) :REM Hit '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=22 'OR c1%=y%) :REM Hit '
   (check_literal)   '%' != 'O'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=21 ' OR c1%=y%) :REM Hit '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=22 'OR c1%=y%) :REM Hit '
   (check_literal)   '"' != 'O'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'OR c1%=y%) :REM Hit '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'OR c1%=y%) :REM Hit ':
    (check_vname) check_vname ret1 ' c1%=y%) :REM Hit ':
   (check_variable) check_variable: ' c1%=y%) :REM Hit '
   (check_variable) check_variable: Ary test ' c1%=y%) :REM Hit '

    (check_literal) check_literal:lit='(' idx=24 ' c1%=y%) :REM Hit '
    (check_literal) check_literal:After drop space:'(' idx=24 ' c1%=y%) :REM Hit '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) check_atom:ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=21 ' OR c1%=y%) :REM Hit '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=22 'OR c1%=y%) :REM Hit '
  (check_literal)   '%' != 'O'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=21 ' OR c1%=y%) :REM Hit '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=22 'OR c1%=y%) :REM Hit '
  (check_literal)   '"' != 'O'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) check_float: ret0

   (check_integer) check_integer: 'OR c1%=y%) :REM Hit '
   (check_integer) check_integer:ret0
  (check_number) check_number: ret0

  (check_variable) check_variable:

   (check_vname) check_vname 'OR c1%=y%) :REM Hit ':
   (check_vname) check_vname ret1 ' c1%=y%) :REM Hit ':
  (check_variable) check_variable: ' c1%=y%) :REM Hit '
  (check_variable) check_variable: Ary test ' c1%=y%) :REM Hit '

   (check_literal) check_literal:lit='(' idx=24 ' c1%=y%) :REM Hit '
   (check_literal) check_literal:After drop space:'(' idx=24 ' c1%=y%) :REM Hit '
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) scan_variable:

  (scan_vname) scan_vname: ' OR c1%=y%) :REM Hit '
  (scan_vname) scan_vname: ret1 'OR'
 (scan_variable) scan_variable: ' c1%=y%) :REM Hit ' vname='OR'
 (scan_variable) scan_variable: Ary test ' c1%=y%) :REM Hit '

  (check_literal) check_literal:lit='(' idx=24 ' c1%=y%) :REM Hit '
  (check_literal) check_literal:After drop space:'(' idx=24 ' c1%=y%) :REM Hit '
  (check_literal)   '(' != ' '
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='OR' is str:0 int:0 flt:1 ary:0
   Frst:0 T:'OR' exptype:i
(operator_precedence) 
= is operator
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:OR is not function
token_is_variable: tok:'OR'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:OR is not function
(init_get_name) 
init_get_name:'OR'
(init_get_name) 
init_get_name:'OR'
(get_name) 
get_name:gn:'OR'
process_token:type:i req_type:i
modify_expression_type:Inittype:i Intype:f Outtype:f
( output_variable) [f,(i U )] f f OR
(print_var_info) 
VAR INFO: '                OR' gbl:0 ref:1 int:0 flt:1 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
(scan_atom) scan_atom:ret1
(scan_expression) n commas now:0

 (check_eitem) check_eitem: ' c1%=y%) :REM Hit '

  (check_operator) check_operator:  c1%=y%) :REM Hit 

   (check_literal) check_literal:lit=' ,' idx=25 'c1%=y%) :REM Hit '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=25 'c1%=y%) :REM Hit '
   (check_literal)   ',' != 'c'
   (check_literal) check_literal: ret0
  (check_operator) ret0:is comma: 0

  (check_function) check_function: 'c1%=y%) :REM Hit '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=24 ' c1%=y%) :REM Hit '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=25 'c1%=y%) :REM Hit '
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=24 ' c1%=y%) :REM Hit '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=25 'c1%=y%) :REM Hit '
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c1%=y%) :REM Hit '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'c1%=y%) :REM Hit ':
    (check_vname) check_vname ret1 '%=y%) :REM Hit ':
   (check_variable) check_variable: '%=y%) :REM Hit '
   (check_variable) check_variable: Ary test '=y%) :REM Hit '

    (check_literal) check_literal:lit='(' idx=28 '=y%) :REM Hit '
    (check_literal) check_literal:After drop space:'(' idx=28 '=y%) :REM Hit '
    (check_literal)   '(' != '='
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) check_atom:ret1
(check_eitem) check_eitem:ret1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator:  c1%=y%) :REM Hit 

   (check_literal) check_literal:lit=' ,' idx=25 'c1%=y%) :REM Hit '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=25 'c1%=y%) :REM Hit '
   (check_literal)   ',' != 'c'
   (check_literal) check_literal: ret0
  (check_operator) ret0:is comma: 0

  (check_function) check_function: 'c1%=y%) :REM Hit '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=24 ' c1%=y%) :REM Hit '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=25 'c1%=y%) :REM Hit '
   (check_literal)   '%' != 'c'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=24 ' c1%=y%) :REM Hit '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=25 'c1%=y%) :REM Hit '
   (check_literal)   '"' != 'c'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'c1%=y%) :REM Hit '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'c1%=y%) :REM Hit ':
    (check_vname) check_vname ret1 '%=y%) :REM Hit ':
   (check_variable) check_variable: '%=y%) :REM Hit '
   (check_variable) check_variable: Ary test '=y%) :REM Hit '

    (check_literal) check_literal:lit='(' idx=28 '=y%) :REM Hit '
    (check_literal) check_literal:After drop space:'(' idx=28 '=y%) :REM Hit '
    (check_literal)   '(' != '='
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) check_atom:ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=24 ' c1%=y%) :REM Hit '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=25 'c1%=y%) :REM Hit '
  (check_literal)   '%' != 'c'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=24 ' c1%=y%) :REM Hit '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=25 'c1%=y%) :REM Hit '
  (check_literal)   '"' != 'c'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) check_float: ret0

   (check_integer) check_integer: 'c1%=y%) :REM Hit '
   (check_integer) check_integer:ret0
  (check_number) check_number: ret0

  (check_variable) check_variable:

   (check_vname) check_vname 'c1%=y%) :REM Hit ':
   (check_vname) check_vname ret1 '%=y%) :REM Hit ':
  (check_variable) check_variable: '%=y%) :REM Hit '
  (check_variable) check_variable: Ary test '=y%) :REM Hit '

   (check_literal) check_literal:lit='(' idx=28 '=y%) :REM Hit '
   (check_literal) check_literal:After drop space:'(' idx=28 '=y%) :REM Hit '
   (check_literal)   '(' != '='
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) scan_variable:

  (scan_vname) scan_vname: ' c1%=y%) :REM Hit '
  (scan_vname) scan_vname: ret1 'c1'
 (scan_variable) scan_variable: '%=y%) :REM Hit ' vname='c1'
 (scan_variable) scan_variable: Ary test '=y%) :REM Hit '

  (check_literal) check_literal:lit='(' idx=28 '=y%) :REM Hit '
  (check_literal) check_literal:After drop space:'(' idx=28 '=y%) :REM Hit '
  (check_literal)   '(' != '='
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='c1%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'c1%' exptype:f
(operator_precedence) 
= is operator
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:c1% is not function
token_is_variable: tok:'c1%'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:c1% is not function
(init_get_name) 
init_get_name:'c1%'
(init_get_name) 
init_get_name:'c1%'
(get_name) 
get_name:gn:'c1%'
process_token:type:f req_type:i
modify_expression_type:Inittype:f Intype:i Outtype:f
( output_variable) [f,(i U )] f f c1%
(print_var_info) 
VAR INFO: '               c1%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
(scan_atom) scan_atom:ret1
(scan_expression) n commas now:0

 (check_eitem) check_eitem: '=y%) :REM Hit '

  (check_operator) check_operator: =y%) :REM Hit 

   (check_literal) check_literal:lit=' ,' idx=28 '=y%) :REM Hit '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=28 '=y%) :REM Hit '
   (check_literal)   ',' != '='
   (check_literal) check_literal: ret0
  (check_operator) ret1:is comma: 0
 (check_eitem) check_eitem:ret1 comma:1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: =y%) :REM Hit 

   (check_literal) check_literal:lit=' ,' idx=28 '=y%) :REM Hit '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=28 '=y%) :REM Hit '
   (check_literal)   ',' != '='
   (check_literal) check_literal: ret0
  (check_operator) ret1:is comma: 0

  (scan_operator) scan_operator: '=y%) :REM Hit '

   (check_literal) check_literal:lit=' ,' idx=28 '=y%) :REM Hit '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=28 '=y%) :REM Hit '
   (check_literal)   ',' != '='
   (check_literal) check_literal: ret0
  (scan_operator) scan_operator: ret1 'y%) :REM Hit '
   Frst:0 T:'=' exptype:f
 (operator_precedence) 
= is operator
 (operator_precedence) 
= is operator
'=' is operator
 (process_token) 
Token is operator o1 name:= o2 name:=
 (process_token) 
opr1:1 opr2:1
 (operator_precedence) 
= is operator
 (operator_precedence) 
= is operator
 (operator_left_assoc) 
= is operator
Push 1
 Push:'='
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (6)

 (op_stack_print) 
000: = type:0
 (op_stack_print) 
001: AND type:0
 (op_stack_print) 
002: ( type:16
 (op_stack_print) 
003: ( type:16
 (op_stack_print) 
004: = type:0
 (op_stack_print) 
005: = type:1
 (op_stack_print) 
------------------

 (scan_eitem) Is comma;0
 (scan_expression) n commas now:0

  (check_eitem) check_eitem: 'y%) :REM Hit '

   (check_operator) check_operator: y%) :REM Hit 

    (check_literal) check_literal:lit=' ,' idx=29 'y%) :REM Hit '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=29 'y%) :REM Hit '
    (check_literal)   ',' != 'y'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'y%) :REM Hit '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=29 'y%) :REM Hit '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=29 'y%) :REM Hit '
    (check_literal)   '%' != 'y'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=29 'y%) :REM Hit '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=29 'y%) :REM Hit '
    (check_literal)   '"' != 'y'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'y%) :REM Hit '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'y%) :REM Hit ':
     (check_vname) check_vname ret1 '%) :REM Hit ':
    (check_variable) check_variable: '%) :REM Hit '
    (check_variable) check_variable: Ary test ') :REM Hit '

     (check_literal) check_literal:lit='(' idx=31 ') :REM Hit '
     (check_literal) check_literal:After drop space:'(' idx=31 ') :REM Hit '
     (check_literal)   '(' != ')'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1
 (check_eitem) check_eitem:ret1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: y%) :REM Hit 

   (check_literal) check_literal:lit=' ,' idx=29 'y%) :REM Hit '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=29 'y%) :REM Hit '
   (check_literal)   ',' != 'y'
   (check_literal) check_literal: ret0
  (check_operator) ret0:is comma: 0

  (check_function) check_function: 'y%) :REM Hit '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=29 'y%) :REM Hit '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=29 'y%) :REM Hit '
   (check_literal)   '%' != 'y'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=29 'y%) :REM Hit '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=29 'y%) :REM Hit '
   (check_literal)   '"' != 'y'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'y%) :REM Hit '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'y%) :REM Hit ':
    (check_vname) check_vname ret1 '%) :REM Hit ':
   (check_variable) check_variable: '%) :REM Hit '
   (check_variable) check_variable: Ary test ') :REM Hit '

    (check_literal) check_literal:lit='(' idx=31 ') :REM Hit '
    (check_literal) check_literal:After drop space:'(' idx=31 ') :REM Hit '
    (check_literal)   '(' != ')'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) check_atom:ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=29 'y%) :REM Hit '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=29 'y%) :REM Hit '
  (check_literal)   '%' != 'y'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=29 'y%) :REM Hit '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=29 'y%) :REM Hit '
  (check_literal)   '"' != 'y'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) check_float: ret0

   (check_integer) check_integer: 'y%) :REM Hit '
   (check_integer) check_integer:ret0
  (check_number) check_number: ret0

  (check_variable) check_variable:

   (check_vname) check_vname 'y%) :REM Hit ':
   (check_vname) check_vname ret1 '%) :REM Hit ':
  (check_variable) check_variable: '%) :REM Hit '
  (check_variable) check_variable: Ary test ') :REM Hit '

   (check_literal) check_literal:lit='(' idx=31 ') :REM Hit '
   (check_literal) check_literal:After drop space:'(' idx=31 ') :REM Hit '
   (check_literal)   '(' != ')'
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) scan_variable:

  (scan_vname) scan_vname: 'y%) :REM Hit '
  (scan_vname) scan_vname: ret1 'y'
 (scan_variable) scan_variable: '%) :REM Hit ' vname='y'
 (scan_variable) scan_variable: Ary test ') :REM Hit '

  (check_literal) check_literal:lit='(' idx=31 ') :REM Hit '
  (check_literal) check_literal:After drop space:'(' idx=31 ') :REM Hit '
  (check_literal)   '(' != ')'
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='y%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'y%' exptype:f
(operator_precedence) 
= is operator
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:y% is not function
token_is_variable: tok:'y%'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:y% is not function
(init_get_name) 
init_get_name:'y%'
(init_get_name) 
init_get_name:'y%'
(get_name) 
get_name:gn:'y%'
process_token:type:f req_type:i
modify_expression_type:Inittype:f Intype:i Outtype:f
( output_variable) [f,(i U )] f f y%
(print_var_info) 
VAR INFO: '                y%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
(scan_atom) scan_atom:ret1
(scan_expression) n commas now:0

 (check_eitem) check_eitem: ') :REM Hit '

  (check_operator) check_operator: ) :REM Hit 

   (check_literal) check_literal:lit=' ,' idx=31 ') :REM Hit '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=31 ') :REM Hit '
   (check_literal)   ',' != ')'
   (check_literal) check_literal: ret0
  (check_operator) ret0:is comma: 0

  (check_function) check_function: ') :REM Hit '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=31 ') :REM Hit '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=31 ') :REM Hit '
   (check_literal)   '%' != ')'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=31 ') :REM Hit '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=31 ') :REM Hit '
   (check_literal)   '"' != ')'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: ') :REM Hit '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname ') :REM Hit ':
    (check_vname) check_vname ret0 ') :REM Hit ':
   (check_variable) check_variable:ret0 
  (check_atom) check_atom:ret1

  (check_sub_expr) check_sub_expr:

   (check_literal) check_literal:lit=' (' idx=31 ') :REM Hit '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'(' idx=31 ') :REM Hit '
   (check_literal)   '(' != ')'
   (check_literal) check_literal: ret0
  (check_sub_expr) check_sub_expr: ret0
 (check_eitem) check_eitem:ret0
(scan_expression) scan_expression: ret1 ') :REM Hit ' commas:0

 (scan_literal) scan_literal:lit=' )' ') :REM Hit '
 (scan_literal) scan_literal:After drop space:') :REM Hit '
 (scan_literal) scan_literal:while loop:) :REM Hit 
   Frst:0 T:')' exptype:f
 (operator_precedence) 
= is operator
 (process_token) 
Pop 3
Pop '='
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (5)

 (op_stack_print) 
000: = type:0
 (op_stack_print) 
001: AND type:0
 (op_stack_print) 
002: ( type:16
 (op_stack_print) 
003: ( type:16
 (op_stack_print) 
004: = type:0
 (op_stack_print) 
------------------

( output_operator) [f,(i U )] f f =
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:= is not function
 (process_token) 
Pop 3
Pop '='
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (4)

 (op_stack_print) 
000: = type:0
 (op_stack_print) 
001: AND type:0
 (op_stack_print) 
002: ( type:16
 (op_stack_print) 
003: ( type:16
 (op_stack_print) 
------------------

( output_operator) [f,(i U )] i i =
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:= is not function
Pop 4
Pop '('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (3)

 (op_stack_print) 
000: = type:0
 (op_stack_print) 
001: AND type:0
 (op_stack_print) 
002: ( type:16
 (op_stack_print) 
------------------

(  output_sub_end)
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:( is not function
(  output_sub_end)
 (scan_literal) scan_literal:ret1
   Frst:0 T:')' exptype:U
Pop 4
Pop '('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (2)

(op_stack_print) 
000: = type:0
(op_stack_print) 
001: AND type:0
(op_stack_print) 
------------------

(  output_sub_end)
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:AND is not function
(  output_sub_end)
(scan_sub_expr) scan_sub_expr:ret1
(scan_expression) n commas now:0

 (check_eitem) check_eitem: ' :REM Hit '

  (check_operator) check_operator:  :REM Hit 

   (check_literal) check_literal:lit=' ,' idx=33 ':REM Hit '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=33 ':REM Hit '
   (check_literal)   ',' != ':'
   (check_literal) check_literal: ret0
  (check_operator) ret0:is comma: 0

  (check_function) check_function: ':REM Hit '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=32 ' :REM Hit '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=33 ':REM Hit '
   (check_literal)   '%' != ':'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=32 ' :REM Hit '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=33 ':REM Hit '
   (check_literal)   '"' != ':'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: ':REM Hit '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname ':REM Hit ':
    (check_vname) check_vname ret0 ':REM Hit ':
   (check_variable) check_variable:ret0 
  (check_atom) check_atom:ret1

  (check_sub_expr) check_sub_expr:

   (check_literal) check_literal:lit=' (' idx=32 ' :REM Hit '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'(' idx=33 ':REM Hit '
   (check_literal)   '(' != ':'
   (check_literal) check_literal: ret0
  (check_sub_expr) check_sub_expr: ret0
 (check_eitem) check_eitem:ret0
(scan_expression) scan_expression: ret1 ' :REM Hit ' commas:0
Finalise stack
Pop 'AND'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: = type:0
(op_stack_print) 
------------------

( output_operator) [i,()] i i AND
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:AND is not function
Pop '='
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_operator) [i,()] i i =
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:= is not function
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'IF' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'a%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'x%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'c%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'y%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'OR' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'c1%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'y%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f '=' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '=' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i 'AND' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '=' nidx:32766  0:
=================
 BE:IF
type_check_stack_push: 'IF'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'IF' type:1
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'IF' type:f (1)
 BE:a%
type_check_stack_push: 'a%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'IF' type:1
(type_check_stack_print) 
001: 'a%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'IF' type:f (1)
001: 'a%' type:i (0)
 BE:x%
type_check_stack_push: 'x%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (3)

(type_check_stack_print) 
000: 'IF' type:1
(type_check_stack_print) 
001: 'a%' type:0
(type_check_stack_print) 
002: 'x%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (3)

000: 'IF' type:f (1)
001: 'a%' type:i (0)
002: 'x%' type:i (0)
 BE:

Type Check Stack (3)

000: 'IF' type:f (1)
001: 'a%' type:i (0)
002: 'x%' type:i (0)
 BE:

Type Check Stack (3)

000: 'IF' type:f (1)
001: 'a%' type:i (0)
002: 'x%' type:i (0)
 BE:c%
type_check_stack_push: 'c%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (4)

(type_check_stack_print) 
000: 'IF' type:1
(type_check_stack_print) 
001: 'a%' type:0
(type_check_stack_print) 
002: 'x%' type:0
(type_check_stack_print) 
003: 'c%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (4)

000: 'IF' type:f (1)
001: 'a%' type:i (0)
002: 'x%' type:i (0)
003: 'c%' type:i (0)
 BE:y%
type_check_stack_push: 'y%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (5)

(type_check_stack_print) 
000: 'IF' type:1
(type_check_stack_print) 
001: 'a%' type:0
(type_check_stack_print) 
002: 'x%' type:0
(type_check_stack_print) 
003: 'c%' type:0
(type_check_stack_print) 
004: 'y%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (5)

000: 'IF' type:f (1)
001: 'a%' type:i (0)
002: 'x%' type:i (0)
003: 'c%' type:i (0)
004: 'y%' type:i (0)
 BE:OR
type_check_stack_push: 'OR'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (6)

(type_check_stack_print) 
000: 'IF' type:1
(type_check_stack_print) 
001: 'a%' type:0
(type_check_stack_print) 
002: 'x%' type:0
(type_check_stack_print) 
003: 'c%' type:0
(type_check_stack_print) 
004: 'y%' type:0
(type_check_stack_print) 
005: 'OR' type:1
(type_check_stack_print) 
------------------


Type Check Stack (6)

000: 'IF' type:f (1)
001: 'a%' type:i (0)
002: 'x%' type:i (0)
003: 'c%' type:i (0)
004: 'y%' type:i (0)
005: 'OR' type:f (1)
 BE:c1%
type_check_stack_push: 'c1%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (7)

(type_check_stack_print) 
000: 'IF' type:1
(type_check_stack_print) 
001: 'a%' type:0
(type_check_stack_print) 
002: 'x%' type:0
(type_check_stack_print) 
003: 'c%' type:0
(type_check_stack_print) 
004: 'y%' type:0
(type_check_stack_print) 
005: 'OR' type:1
(type_check_stack_print) 
006: 'c1%' type:1
(type_check_stack_print) 
------------------


Type Check Stack (7)

000: 'IF' type:f (1)
001: 'a%' type:i (0)
002: 'x%' type:i (0)
003: 'c%' type:i (0)
004: 'y%' type:i (0)
005: 'OR' type:f (1)
006: 'c1%' type:f (1)
 BE:y%
type_check_stack_push: 'y%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (8)

(type_check_stack_print) 
000: 'IF' type:1
(type_check_stack_print) 
001: 'a%' type:0
(type_check_stack_print) 
002: 'x%' type:0
(type_check_stack_print) 
003: 'c%' type:0
(type_check_stack_print) 
004: 'y%' type:0
(type_check_stack_print) 
005: 'OR' type:1
(type_check_stack_print) 
006: 'c1%' type:1
(type_check_stack_print) 
007: 'y%' type:1
(type_check_stack_print) 
------------------


Type Check Stack (8)

000: 'IF' type:f (1)
001: 'a%' type:i (0)
002: 'x%' type:i (0)
003: 'c%' type:i (0)
004: 'y%' type:i (0)
005: 'OR' type:f (1)
006: 'c1%' type:f (1)
007: 'y%' type:f (1)
 BE:=
BUFF_ID_OPERATOR
Found operator =
type_check_stack_pop: 'y%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (7)

(type_check_stack_print) 
000: 'IF' type:1
(type_check_stack_print) 
001: 'a%' type:0
(type_check_stack_print) 
002: 'x%' type:0
(type_check_stack_print) 
003: 'c%' type:0
(type_check_stack_print) 
004: 'y%' type:0
(type_check_stack_print) 
005: 'OR' type:1
(type_check_stack_print) 
006: 'c1%' type:1
(type_check_stack_print) 
------------------

type_check_stack_pop: 'c1%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (6)

(type_check_stack_print) 
000: 'IF' type:1
(type_check_stack_print) 
001: 'a%' type:0
(type_check_stack_print) 
002: 'x%' type:0
(type_check_stack_print) 
003: 'c%' type:0
(type_check_stack_print) 
004: 'y%' type:0
(type_check_stack_print) 
005: 'OR' type:1
(type_check_stack_print) 
------------------

 Mutable type 1 1
 Same type
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (7)

(type_check_stack_print) 
000: 'IF' type:1
(type_check_stack_print) 
001: 'a%' type:0
(type_check_stack_print) 
002: 'x%' type:0
(type_check_stack_print) 
003: 'c%' type:0
(type_check_stack_print) 
004: 'y%' type:0
(type_check_stack_print) 
005: 'OR' type:1
(type_check_stack_print) 
006: '000' type:1
(type_check_stack_print) 
------------------


Type Check Stack (7)

000: 'IF' type:f (1)
001: 'a%' type:i (0)
002: 'x%' type:i (0)
003: 'c%' type:i (0)
004: 'y%' type:i (0)
005: 'OR' type:f (1)
006: '000' type:f (1)
 BE:=
BUFF_ID_OPERATOR
Found operator =
type_check_stack_pop: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (6)

(type_check_stack_print) 
000: 'IF' type:1
(type_check_stack_print) 
001: 'a%' type:0
(type_check_stack_print) 
002: 'x%' type:0
(type_check_stack_print) 
003: 'c%' type:0
(type_check_stack_print) 
004: 'y%' type:0
(type_check_stack_print) 
005: 'OR' type:1
(type_check_stack_print) 
------------------

type_check_stack_pop: 'OR'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (5)

(type_check_stack_print) 
000: 'IF' type:1
(type_check_stack_print) 
001: 'a%' type:0
(type_check_stack_print) 
002: 'x%' type:0
(type_check_stack_print) 
003: 'c%' type:0
(type_check_stack_print) 
004: 'y%' type:0
(type_check_stack_print) 
------------------

 Mutable type 1 1
type_with_least_conversion_from: f f => f
type_with_least_conversion_from: f f => f
 Same type
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (6)

(type_check_stack_print) 
000: 'IF' type:1
(type_check_stack_print) 
001: 'a%' type:0
(type_check_stack_print) 
002: 'x%' type:0
(type_check_stack_print) 
003: 'c%' type:0
(type_check_stack_print) 
004: 'y%' type:0
(type_check_stack_print) 
005: '000' type:1
(type_check_stack_print) 
------------------


Type Check Stack (6)

000: 'IF' type:f (1)
001: 'a%' type:i (0)
002: 'x%' type:i (0)
003: 'c%' type:i (0)
004: 'y%' type:i (0)
005: '000' type:f (1)
 BE:

Type Check Stack (6)

000: 'IF' type:f (1)
001: 'a%' type:i (0)
002: 'x%' type:i (0)
003: 'c%' type:i (0)
004: 'y%' type:i (0)
005: '000' type:f (1)
 BE:

Type Check Stack (6)

000: 'IF' type:f (1)
001: 'a%' type:i (0)
002: 'x%' type:i (0)
003: 'c%' type:i (0)
004: 'y%' type:i (0)
005: '000' type:f (1)
 BE:

Type Check Stack (6)

000: 'IF' type:f (1)
001: 'a%' type:i (0)
002: 'x%' type:i (0)
003: 'c%' type:i (0)
004: 'y%' type:i (0)
005: '000' type:f (1)
 BE:

Type Check Stack (6)

000: 'IF' type:f (1)
001: 'a%' type:i (0)
002: 'x%' type:i (0)
003: 'c%' type:i (0)
004: 'y%' type:i (0)
005: '000' type:f (1)
 BE:AND
BUFF_ID_OPERATOR
Found operator AND
type_check_stack_pop: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (5)

(type_check_stack_print) 
000: 'IF' type:1
(type_check_stack_print) 
001: 'a%' type:0
(type_check_stack_print) 
002: 'x%' type:0
(type_check_stack_print) 
003: 'c%' type:0
(type_check_stack_print) 
004: 'y%' type:0
(type_check_stack_print) 
------------------

type_check_stack_pop: 'y%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (4)

(type_check_stack_print) 
000: 'IF' type:1
(type_check_stack_print) 
001: 'a%' type:0
(type_check_stack_print) 
002: 'x%' type:0
(type_check_stack_print) 
003: 'c%' type:0
(type_check_stack_print) 
------------------

 Mutable type 1 0
type_with_least_conversion_from: f i => f
type_with_least_conversion_from: f i => f
 Autoconversion
 --------------
 Op1: type:1 req type:1
 Op2: type:0 req type:0
 BE:  type:1 req type:1
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f 'IF'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'a%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     i rq:i 'x%'  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_VARIABLE     i rq:i 'c%'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_VARIABLE     i rq:i 'y%'  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_VARIABLE     f rq:f 'OR'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_VARIABLE     f rq:f 'c1%'  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_VARIABLE     f rq:f 'y%'  0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_OPERATOR     f rq:f '='  2: 10 9
(dump_exp_buffer2) N12 EXP_BUFF_ID_OPERATOR     f rq:f '='  2: 11 8
(dump_exp_buffer2) N13 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N15 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N16 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
 Insert after 7 exp_buffer2_i:16
   Found at i:6
   Copied 15 to 16:
   Copied 14 to 15:
   Copied 13 to 14:
   Copied 12 to 13:
   Copied 11 to 12:
   Copied 10 to 11:
   Copied 9 to 10:
   Copied 8 to 9:
   Copied 7 to 8:
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f 'IF'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'a%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     i rq:i 'x%'  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_VARIABLE     i rq:i 'c%'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_VARIABLE     i rq:i 'y%'  0:
(dump_exp_buffer2) N18 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 12 7
(dump_exp_buffer2) N8 EXP_BUFF_ID_VARIABLE     f rq:f 'OR'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_VARIABLE     f rq:f 'c1%'  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_VARIABLE     f rq:f 'y%'  0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_OPERATOR     f rq:f '='  2: 10 9
(dump_exp_buffer2) N12 EXP_BUFF_ID_OPERATOR     f rq:f '='  2: 11 8
(dump_exp_buffer2) N13 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N15 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N16 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (5)

(type_check_stack_print) 
000: 'IF' type:1
(type_check_stack_print) 
001: 'a%' type:0
(type_check_stack_print) 
002: 'x%' type:0
(type_check_stack_print) 
003: 'c%' type:0
(type_check_stack_print) 
004: '000' type:1
(type_check_stack_print) 
------------------


Type Check Stack (5)

000: 'IF' type:f (1)
001: 'a%' type:i (0)
002: 'x%' type:i (0)
003: 'c%' type:i (0)
004: '000' type:f (1)
 BE::=
BUFF_ID_OPERATOR
Found operator :=
type_check_stack_pop: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (4)

(type_check_stack_print) 
000: 'IF' type:1
(type_check_stack_print) 
001: 'a%' type:0
(type_check_stack_print) 
002: 'x%' type:0
(type_check_stack_print) 
003: 'c%' type:0
(type_check_stack_print) 
------------------

type_check_stack_pop: 'c%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (3)

(type_check_stack_print) 
000: 'IF' type:1
(type_check_stack_print) 
001: 'a%' type:0
(type_check_stack_print) 
002: 'x%' type:0
(type_check_stack_print) 
------------------

 Mutable type 1 0
type_with_least_conversion_from: f i => f
type_with_least_conversion_from: f i => f
 Autoconversion
 --------------
 Op1: type:1 req type:1
 Op2: type:0 req type:0
 BE:  type:1 req type:1
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f 'IF'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'a%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     i rq:i 'x%'  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_VARIABLE     i rq:i 'c%'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_VARIABLE     i rq:i 'y%'  0:
(dump_exp_buffer2) N18 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 12 7
(dump_exp_buffer2) N8 EXP_BUFF_ID_VARIABLE     f rq:f 'OR'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_VARIABLE     f rq:f 'c1%'  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_VARIABLE     f rq:f 'y%'  0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_OPERATOR     f rq:f '='  2: 10 9
(dump_exp_buffer2) N12 EXP_BUFF_ID_OPERATOR     f rq:f '='  2: 11 8
(dump_exp_buffer2) N13 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N15 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N16 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N17 EXP_BUFF_ID_OPERATOR     f rq:f 'AND'  2: 12 7
=================
 Insert after 17 exp_buffer2_i:18
   Found at i:17
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f 'IF'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'a%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     i rq:i 'x%'  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_VARIABLE     i rq:i 'c%'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_VARIABLE     i rq:i 'y%'  0:
(dump_exp_buffer2) N18 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 12 7
(dump_exp_buffer2) N8 EXP_BUFF_ID_VARIABLE     f rq:f 'OR'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_VARIABLE     f rq:f 'c1%'  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_VARIABLE     f rq:f 'y%'  0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_OPERATOR     f rq:f '='  2: 10 9
(dump_exp_buffer2) N12 EXP_BUFF_ID_OPERATOR     f rq:f '='  2: 11 8
(dump_exp_buffer2) N13 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N15 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N16 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N17 EXP_BUFF_ID_OPERATOR     f rq:f 'AND'  2: 12 7
(dump_exp_buffer2) N20 EXP_BUFF_ID_AUTOCON      i rq:i 'autocon f->i'  2: 17 6
=================
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (4)

(type_check_stack_print) 
000: 'IF' type:1
(type_check_stack_print) 
001: 'a%' type:0
(type_check_stack_print) 
002: 'x%' type:0
(type_check_stack_print) 
003: '000' type:0
(type_check_stack_print) 
------------------


Type Check Stack (4)

000: 'IF' type:f (1)
001: 'a%' type:i (0)
002: 'x%' type:i (0)
003: '000' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'IF' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'a%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'x%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'c%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'y%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'OR' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'c1%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'y%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f '=' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '=' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i 'AND' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i ':=' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f 'IF'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'a%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     i rq:i 'x%'  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_VARIABLE     i rq:i 'c%'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_VARIABLE     i rq:i 'y%'  0:
(dump_exp_buffer2) N18 EXP_BUFF_ID_AUTOCON      f rq:f 'autocon i->f'  2: 12 7
(dump_exp_buffer2) N8 EXP_BUFF_ID_VARIABLE     f rq:f 'OR'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_VARIABLE     f rq:f 'c1%'  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_VARIABLE     f rq:f 'y%'  0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_OPERATOR     f rq:f '='  2: 10 9
(dump_exp_buffer2) N12 EXP_BUFF_ID_OPERATOR     f rq:f '='  2: 11 8
(dump_exp_buffer2) N13 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N15 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N16 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N17 EXP_BUFF_ID_OPERATOR     f rq:f 'AND'  2: 12 7
(dump_exp_buffer2) N20 EXP_BUFF_ID_AUTOCON      i rq:i 'autocon f->i'  2: 17 6
(dump_exp_buffer2) N19 EXP_BUFF_ID_OPERATOR     i rq:i ':='  2: 17 6
=================
(process_expression_types) 
==INFIX==

Var: IF ary:2 NumIdx:0
infix_stack_push: 'IF()'
Var: a% ary:0 NumIdx:0
infix_stack_push: 'a%'
Var: x% ary:0 NumIdx:0
infix_stack_push: 'x%'
Var: c% ary:0 NumIdx:0
infix_stack_push: 'c%'
Var: y% ary:0 NumIdx:0
infix_stack_push: 'y%'
Var: OR ary:0 NumIdx:0
infix_stack_push: 'OR'
Var: c1% ary:0 NumIdx:0
infix_stack_push: 'c1%'
Var: y% ary:0 NumIdx:0
infix_stack_push: 'y%'
infix_stack_pop: 'y%'
infix_stack_pop: 'c1%'
infix_stack_push: '(c1% = y%)'
infix_stack_pop: '(c1% = y%)'
infix_stack_pop: 'OR'
infix_stack_push: '(OR = (c1% = y%))'
infix_stack_pop: '(OR = (c1% = y%))'
infix_stack_pop: 'y%'
infix_stack_push: '(y% AND (OR = (c1% = y%)))'
infix_stack_pop: '(y% AND (OR = (c1% = y%)))'
infix_stack_pop: 'c%'
infix_stack_push: '(c% := (y% AND (OR = (c1% = y%))))'
infix_stack_pop: '(c% := (y% AND (OR = (c1% = y%))))'
(process_expression_types) ==(c% := (y% AND (OR = (c1% = y%))))==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     f rq:f IF  0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
(    output_qcode) N3 EXP_BUFF_ID_VARIABLE     i rq:i x%  0:
(    output_qcode) N4 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
(    output_qcode) N7 EXP_BUFF_ID_VARIABLE     i rq:i y%  0:
(    output_qcode) N18 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 12 7
(    output_qcode) N8 EXP_BUFF_ID_VARIABLE     f rq:f OR  0:
(    output_qcode) N9 EXP_BUFF_ID_VARIABLE     f rq:f c1%  0:
(    output_qcode) N10 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
(    output_qcode) N11 EXP_BUFF_ID_OPERATOR     f rq:f =  2: 10 9
(    output_qcode) N12 EXP_BUFF_ID_OPERATOR     f rq:f =  2: 11 8
(    output_qcode) N13 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N14 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N15 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N16 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N17 EXP_BUFF_ID_OPERATOR     f rq:f AND  2: 12 7
(    output_qcode) N20 EXP_BUFF_ID_AUTOCON      i rq:i autocon f->i  2: 17 6
(    output_qcode) N19 EXP_BUFF_ID_OPERATOR     i rq:i :=  2: 17 6

 (check_literal) check_literal:lit=':' idx=33 ':REM Hit '
 (check_literal) check_literal:After drop space:':' idx=33 ':REM Hit '
 (check_literal) check_literal:After while():REM Hit 
 (check_literal) check_literal:ret1 

 (scan_literal) scan_literal:lit=':' 'REM Hit '
 (scan_literal) scan_literal:After drop space:'REM Hit '
 (scan_literal) scan_literal:while loop:REM Hit 
 (scan_literal) scan_literal:ret1

 (check_line) check_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'REM Hit ':
    (check_vname) check_vname ret1 ' Hit ':
   (check_variable) check_variable: ' Hit '
   (check_variable) check_variable: Ary test ' Hit '

    (check_literal) check_literal:lit='(' idx=37 ' Hit '
    (check_literal) check_literal:After drop space:'(' idx=37 ' Hit '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=37 ' Hit '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=38 'Hit '
  (check_literal)   '=' != 'H'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'REM Hit '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'REM'
(check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=5, ' Hit '
========================================================
  IF a%=x% AND (c%=y% OR c1%=y%) :REM Hit 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'REM Hit ':
    (check_vname) check_vname ret1 ' Hit ':
   (check_variable) check_variable: ' Hit '
   (check_variable) check_variable: Ary test ' Hit '

    (check_literal) check_literal:lit='(' idx=37 ' Hit '
    (check_literal) check_literal:After drop space:'(' idx=37 ' Hit '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=37 ' Hit '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=38 'Hit '
  (check_literal)   '=' != 'H'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'REM Hit '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'REM'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'REM' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) REM is function
 (function_return_type) 
function_return_type: 'REM' =>v
 (function_return_type) 
function_return_type: 'REM' =>17
process_token: 'REM' t=>v
 Push:'REM'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: REM type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: REM type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' Hit '

   (check_eitem) check_eitem: 'Hit '

    (check_operator) check_operator: Hit 

     (check_literal) check_literal:lit=' ,' idx=38 'Hit '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=38 'Hit '
     (check_literal)   ',' != 'H'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'Hit '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=38 'Hit '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=38 'Hit '
     (check_literal)   '%' != 'H'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=38 'Hit '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=38 'Hit '
     (check_literal)   '"' != 'H'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'Hit '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'Hit ':
      (check_vname) check_vname ret1 ' ':
     (check_variable) check_variable: ' '
     (check_variable) check_variable: Ary test ' '

      (check_literal) check_literal:lit='(' idx=41 ' '
      (check_literal) check_literal:After drop space:'(' idx=41 ' '
      (check_literal)   '(' != ' '
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator: Hit 

    (check_literal) check_literal:lit=' ,' idx=38 'Hit '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=38 'Hit '
    (check_literal)   ',' != 'H'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'Hit '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=38 'Hit '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=38 'Hit '
    (check_literal)   '%' != 'H'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=38 'Hit '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=38 'Hit '
    (check_literal)   '"' != 'H'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'Hit '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'Hit ':
     (check_vname) check_vname ret1 ' ':
    (check_variable) check_variable: ' '
    (check_variable) check_variable: Ary test ' '

     (check_literal) check_literal:lit='(' idx=41 ' '
     (check_literal) check_literal:After drop space:'(' idx=41 ' '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1

  (scan_atom) scan_atom:

   (check_literal) check_literal:lit=' %' idx=38 'Hit '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=38 'Hit '
   (check_literal)   '%' != 'H'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=38 'Hit '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=38 'Hit '
   (check_literal)   '"' != 'H'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'Hit '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'Hit ':
    (check_vname) check_vname ret1 ' ':
   (check_variable) check_variable: ' '
   (check_variable) check_variable: Ary test ' '

    (check_literal) check_literal:lit='(' idx=41 ' '
    (check_literal) check_literal:After drop space:'(' idx=41 ' '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'Hit '
   (scan_vname) scan_vname: ret1 'Hit'
  (scan_variable) scan_variable: ' ' vname='Hit'
  (scan_variable) scan_variable: Ary test ' '

   (check_literal) check_literal:lit='(' idx=41 ' '
   (check_literal) check_literal:After drop space:'(' idx=41 ' '
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='Hit' is str:0 int:0 flt:1 ary:0
   Frst:0 T:'Hit' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:Hit is not function
token_is_variable: tok:'Hit'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:Hit is not function
 (init_get_name) 
init_get_name:'Hit'
 (init_get_name) 
init_get_name:'Hit'
 (get_name) 
get_name:gn:'Hit'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:f Outtype:f
( output_variable) [f,(U )] f f Hit
 (print_var_info) 
VAR INFO: '               Hit' gbl:0 ref:1 int:0 flt:1 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
 (scan_atom) scan_atom:ret1
(scan_expression) n commas now:0

 (check_eitem) check_eitem: ' '

  (check_operator) check_operator:  

   (check_literal) check_literal:lit=' ,' idx=42 ''
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=42 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_operator) ret0:is comma: 0

  (check_function) check_function: ''
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=41 ' '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=42 ''
   (check_literal) check_literal  ret0 Empty test string

   (check_literal) check_literal:lit=' "' idx=41 ' '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=42 ''
   (check_literal) check_literal  ret0 Empty test string

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: ''
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname '':
    (check_vname) check_vname ret0 '':
   (check_variable) check_variable:ret0 
  (check_atom) check_atom:ret1

  (check_sub_expr) check_sub_expr:

   (check_literal) check_literal:lit=' (' idx=41 ' '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'(' idx=42 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_sub_expr) check_sub_expr: ret0
 (check_eitem) check_eitem:ret0
(scan_expression) scan_expression: ret1 ' ' commas:0
(scan_command) scan_command: ret1 =>'REM'
(scan_command) 
ENDEXP
   Frst:0 T:')' exptype:f
Pop 4
Pop '('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: REM type:17
(op_stack_print) 
------------------

(  output_sub_end)
(token_is_function) 
token_is_function:
(token_is_function) REM is function
Pop 5
Pop 'REM'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_function) [f,(U )] v v REM
(  output_sub_end)
Finalise stack
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'Hit' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'REM' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
 BE:

Type Check Stack (0)

 BE:Hit
type_check_stack_push: 'Hit'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'Hit' type:1
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'Hit' type:f (1)
 BE:

Type Check Stack (1)

000: 'Hit' type:f (1)
 BE:REM
FN: 0 args
(function_return_type) 
function_return_type: 'REM' =>v
(function_return_type) 
function_return_type: 'REM' =>17
ret_type;17 v
typecheck_expression:Ret type of REM : v
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'Hit' type:1
(type_check_stack_print) 
001: '000' type:17
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'Hit' type:f (1)
001: '000' type:v (17)
 BE:

Type Check Stack (2)

000: 'Hit' type:f (1)
001: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'Hit' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'REM' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     f rq:f 'Hit'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_FUNCTION     v rq:v 'REM'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
(process_expression_types) 
==INFIX==

Var: Hit ary:0 NumIdx:0
infix_stack_push: 'Hit'
infix_stack_push: 'REM()'
infix_stack_pop: 'REM()'
(process_expression_types) ==REM()==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     f rq:f Hit  0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N4 EXP_BUFF_ID_FUNCTION     v rq:v REM  0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_END      U rq:i   0:

 (check_literal) check_literal:lit=':' idx=42 ''
 (check_literal) check_literal:After drop space:':' idx=42 ''
 (check_literal) check_literal  ret0 Empty test string
(translate_file) 
cline scanned OK
************
**   i%=0 **
************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'i%=0 ':
     (check_vname) check_vname ret1 '%=0 ':
    (check_variable) check_variable: '%=0 '
    (check_variable) check_variable: Ary test '=0 '

     (check_literal) check_literal:lit='(' idx=5 '=0 '
     (check_literal) check_literal:After drop space:'(' idx=5 '=0 '
     (check_literal)   '(' != '='
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=5 '=0 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=5 '=0 '
   (check_literal) check_literal:After while():0 
   (check_literal) check_literal:ret1 

   (check_expression) check_expression: '0 '

    (check_eitem) check_eitem: '0 '

     (check_operator) check_operator: 0 

      (check_literal) check_literal:lit=' ,' idx=6 '0 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=6 '0 '
      (check_literal)   ',' != '0'
      (check_literal) check_literal: ret0
     (check_operator) ret0:is comma: 0

     (check_function) check_function: '0 '
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=6 '0 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 '0 '
      (check_literal)   '%' != '0'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=6 '0 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 '0 '
      (check_literal)   '"' != '0'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: '0 '
       (check_integer) check_integer:ret1
      (check_number) check_number: ret1
     (check_atom) check_atom:ret1
    (check_eitem) check_eitem:ret1

    (check_eitem) check_eitem: ' '

     (check_operator) check_operator:  

      (check_literal) check_literal:lit=' ,' idx=8 ''
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=8 ''
      (check_literal) check_literal  ret0 Empty test string
     (check_operator) ret0:is comma: 0

     (check_function) check_function: ''
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=7 ' '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=8 ''
      (check_literal) check_literal  ret0 Empty test string

      (check_literal) check_literal:lit=' "' idx=7 ' '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=8 ''
      (check_literal) check_literal  ret0 Empty test string

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: ''
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname '':
       (check_vname) check_vname ret0 '':
      (check_variable) check_variable:ret0 
     (check_atom) check_atom:ret1

     (check_sub_expr) check_sub_expr:

      (check_literal) check_literal:lit=' (' idx=7 ' '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'(' idx=8 ''
      (check_literal) check_literal  ret0 Empty test string
     (check_sub_expr) check_sub_expr: ret0
    (check_eitem) check_eitem:ret0
   (check_expression) check_expression:ret1 ' '
  (check_assignment) check_assignment:ret1
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=1, ' '
========================================================
   i%=0 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'i%=0 ':
    (check_vname) check_vname ret1 '%=0 ':
   (check_variable) check_variable: '%=0 '
   (check_variable) check_variable: Ary test '=0 '

    (check_literal) check_literal:lit='(' idx=5 '=0 '
    (check_literal) check_literal:After drop space:'(' idx=5 '=0 '
    (check_literal)   '(' != '='
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=5 '=0 '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=5 '=0 '
  (check_literal) check_literal:After while():0 
  (check_literal) check_literal:ret1 

  (check_expression) check_expression: '0 '

   (check_eitem) check_eitem: '0 '

    (check_operator) check_operator: 0 

     (check_literal) check_literal:lit=' ,' idx=6 '0 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=6 '0 '
     (check_literal)   ',' != '0'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: '0 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=6 '0 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=6 '0 '
     (check_literal)   '%' != '0'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=6 '0 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=6 '0 '
     (check_literal)   '"' != '0'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '0 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: ' '

    (check_operator) check_operator:  

     (check_literal) check_literal:lit=' ,' idx=8 ''
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=8 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_operator) ret0:is comma: 0

    (check_function) check_function: ''
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=7 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=8 ''
     (check_literal) check_literal  ret0 Empty test string

     (check_literal) check_literal:lit=' "' idx=7 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=8 ''
     (check_literal) check_literal  ret0 Empty test string

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: ''
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname '':
      (check_vname) check_vname ret0 '':
     (check_variable) check_variable:ret0 
    (check_atom) check_atom:ret1

    (check_sub_expr) check_sub_expr:

     (check_literal) check_literal:lit=' (' idx=7 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'(' idx=8 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_sub_expr) check_sub_expr: ret0
   (check_eitem) check_eitem:ret0
  (check_expression) check_expression:ret1 ' '
 (check_assignment) check_assignment:ret1

 (scan_assignment) scan_assignment:

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'i%=0 '
   (scan_vname) scan_vname: ret1 'i'
  (scan_variable) scan_variable: '%=0 ' vname='i'
  (scan_variable) scan_variable: Ary test '=0 '

   (check_literal) check_literal:lit='(' idx=5 '=0 '
   (check_literal) check_literal:After drop space:'(' idx=5 '=0 '
   (check_literal)   '(' != '='
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='i%' is str:0 int:1 flt:0 ary:0
   Frst:1 T:'i%' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:i% is not function
token_is_variable: tok:'i%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:i% is not function
 (init_get_name) 
init_get_name:'i%'
 (init_get_name) 
init_get_name:'i%'
 (get_name) 
get_name:gn:'i%'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] i i i%
 (print_var_info) 
VAR INFO: '                i%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0

  (scan_assignment_equals) scan_assignment_equals:lit=' =' '=0 '
  (scan_assignment_equals) scan_assignment_equals:After drop space:'=0 '
  (scan_assignment_equals) scan_assignment_equals:while loop:=0 
   Frst:0 T:':=' exptype:i
  (operator_precedence) 
:= is operator
':=' is operator
  (process_token) 
Token is operator o1 name::= o2 name:
  (process_token) 
opr1:1 opr2:0
Push 1
 Push:':='
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (1)

  (op_stack_print) 
000: := type:0
  (op_stack_print) 
------------------

  (scan_assignment_equals) scan_assignment_equals:ret1

  (scan_expression) scan_expression: '0 '

   (check_eitem) check_eitem: '0 '

    (check_operator) check_operator: 0 

     (check_literal) check_literal:lit=' ,' idx=6 '0 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=6 '0 '
     (check_literal)   ',' != '0'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: '0 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=6 '0 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=6 '0 '
     (check_literal)   '%' != '0'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=6 '0 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=6 '0 '
     (check_literal)   '"' != '0'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '0 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (scan_eitem) scan_eitem:

    (check_operator) check_operator: 0 

     (check_literal) check_literal:lit=' ,' idx=6 '0 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=6 '0 '
     (check_literal)   ',' != '0'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: '0 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=6 '0 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=6 '0 '
     (check_literal)   '%' != '0'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=6 '0 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=6 '0 '
     (check_literal)   '"' != '0'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '0 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1

    (scan_atom) scan_atom:

     (check_literal) check_literal:lit=' %' idx=6 '0 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=6 '0 '
     (check_literal)   '%' != '0'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=6 '0 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=6 '0 '
     (check_literal)   '"' != '0'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '0 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1

     (scan_number) scan_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '0 '
      (check_integer) check_integer:ret1

      (scan_integer) scan_integer:
      (scan_integer) scan_integer:ret1
   Frst:0 T:'0' exptype:i
     (operator_precedence) 
:= is operator
modify_expression_type:Inittype:i Intype:i Outtype:i
(  output_integer) [i,()] i i 0
     (scan_integer) scan_integer:ret1  0
    (scan_atom) scan_atom:ret1
   (scan_expression) n commas now:0

    (check_eitem) check_eitem: ' '

     (check_operator) check_operator:  

      (check_literal) check_literal:lit=' ,' idx=8 ''
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=8 ''
      (check_literal) check_literal  ret0 Empty test string
     (check_operator) ret0:is comma: 0

     (check_function) check_function: ''
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=7 ' '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=8 ''
      (check_literal) check_literal  ret0 Empty test string

      (check_literal) check_literal:lit=' "' idx=7 ' '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=8 ''
      (check_literal) check_literal  ret0 Empty test string

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: ''
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname '':
       (check_vname) check_vname ret0 '':
      (check_variable) check_variable:ret0 
     (check_atom) check_atom:ret1

     (check_sub_expr) check_sub_expr:

      (check_literal) check_literal:lit=' (' idx=7 ' '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'(' idx=8 ''
      (check_literal) check_literal  ret0 Empty test string
     (check_sub_expr) check_sub_expr: ret0
    (check_eitem) check_eitem:ret0
   (scan_expression) scan_expression: ret1 ' ' commas:0
  (scan_assignment) scan_assignment: ret1
Finalise stack
Pop ':='
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (0)

 (op_stack_print) 
------------------

( output_operator) [i,()] i i :=
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function::= is not function
 (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'i%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '0' nidx:7  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i ':=' nidx:0  0:
=================
 BE:i%
type_check_stack_push: 'i%'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (1)

 (type_check_stack_print) 
000: 'i%' type:0
 (type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'i%' type:i (0)
 BE:0
type_check_stack_push: '0'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (2)

 (type_check_stack_print) 
000: 'i%' type:0
 (type_check_stack_print) 
001: '0' type:0
 (type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'i%' type:i (0)
001: '0' type:i (0)
 BE::=
BUFF_ID_OPERATOR
Found operator :=
type_check_stack_pop: '0'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (1)

 (type_check_stack_print) 
000: 'i%' type:0
 (type_check_stack_print) 
------------------

type_check_stack_pop: 'i%'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (0)

 (type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (1)

 (type_check_stack_print) 
000: '000' type:0
 (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'i%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '0' nidx:7  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i ':=' nidx:0  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i 'i%'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i '0'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_OPERATOR     i rq:i ':='  2: 2 1
=================
 (process_expression_types) 
==INFIX==

Var: i% ary:0 NumIdx:0
infix_stack_push: 'i%'
infix_stack_push: '0'
infix_stack_pop: '0'
infix_stack_pop: 'i%'
infix_stack_push: '(i% := 0)'
infix_stack_pop: '(i% := 0)'
 (process_expression_types) ==(i% := 0)==
 (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i i%  0:
(    output_qcode) N2 EXP_BUFF_ID_INTEGER      i rq:i 0  0:
(    output_qcode) N3 EXP_BUFF_ID_OPERATOR     i rq:i :=  2: 2 1

  (check_literal) check_literal:lit=':' idx=8 ''
  (check_literal) check_literal:After drop space:':' idx=8 ''
  (check_literal) check_literal  ret0 Empty test string
 (translate_file) 
cline scanned OK
**********
**   DO **
**********


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'DO ':
     (check_vname) check_vname ret1 ' ':
    (check_variable) check_variable: ' '
    (check_variable) check_variable: Ary test ' '

     (check_literal) check_literal:lit='(' idx=5 ' '
     (check_literal) check_literal:After drop space:'(' idx=5 ' '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=5 ' '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=6 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_assignment) check_assignment:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) check_textlabel: 'DO '
   (check_textlabel) check_textlabel:ret0
  (check_proc_call) check_proc_call:ret0

  (check_command) check_command:
  (check_command) check_command: ret0

  (check_function) check_function: 'DO '
  (check_function) check_function: ret0

  (check_literal) check_literal:lit=' IF' idx=0 '   DO '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'IF' idx=3 'DO '
  (check_literal)   'I' != 'D'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' ELSEIF' idx=0 '   DO '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'ELSEIF' idx=3 'DO '
  (check_literal)   'E' != 'D'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' ELSE' idx=0 '   DO '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'ELSE' idx=3 'DO '
  (check_literal)   'E' != 'D'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' ENDIF' idx=0 '   DO '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'ENDIF' idx=3 'DO '
  (check_literal)   'E' != 'D'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' DO' idx=0 '   DO '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'DO' idx=3 'DO '
  (check_literal) check_literal:After while(): 
  (check_literal) check_literal:ret1 
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=1, ' '
========================================================
   DO 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'DO ':
    (check_vname) check_vname ret1 ' ':
   (check_variable) check_variable: ' '
   (check_variable) check_variable: Ary test ' '

    (check_literal) check_literal:lit='(' idx=5 ' '
    (check_literal) check_literal:After drop space:'(' idx=5 ' '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=5 ' '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=6 ''
  (check_literal) check_literal  ret0 Empty test string
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'DO '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret0

 (check_function) check_function: 'DO '
 (check_function) check_function: ret0

 (check_literal) check_literal:lit=' IF' idx=3 'DO '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'IF' idx=3 'DO '
 (check_literal)   'I' != 'D'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' ELSEIF' idx=3 'DO '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'ELSEIF' idx=3 'DO '
 (check_literal)   'E' != 'D'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' ELSE' idx=3 'DO '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'ELSE' idx=3 'DO '
 (check_literal)   'E' != 'D'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' ENDIF' idx=3 'DO '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'ENDIF' idx=3 'DO '
 (check_literal)   'E' != 'D'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' DO' idx=3 'DO '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'DO' idx=3 'DO '
 (check_literal) check_literal:After while(): 
 (check_literal) check_literal:ret1 

 (scan_literal) scan_literal:lit=' DO' 'DO '
 (scan_literal) scan_literal:After drop space:'DO '
 (scan_literal) scan_literal:while loop:DO 
 (scan_literal) scan_literal:while loop:O 
   Frst:1 T:'DO' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:DO is not function
token_is_variable: tok:'DO'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:DO is not function
 (init_get_name) 
init_get_name:'DO'
 (init_get_name) 
init_get_name:'DO'
 (get_name) 
get_name:gn:'DO'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] f f DO
 (scan_literal) scan_literal:ret1
Finalise stack
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'DO' nidx:0  0:
=================
 BE:DO
type_check_stack_push: 'DO'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'DO' type:1
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'DO' type:f (1)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'DO' nidx:0  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f 'DO'  0:
=================
(process_expression_types) 
==INFIX==

Var: DO ary:3 NumIdx:0
infix_stack_push: 'DO()'
infix_stack_pop: 'DO()'
(process_expression_types) ==DO()==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     f rq:f DO  0:

 (check_literal) check_literal:lit=':' idx=6 ''
 (check_literal) check_literal:After drop space:':' idx=6 ''
 (check_literal) check_literal  ret0 Empty test string
(translate_file) 
cline scanned OK
*************************************
**    AT x%,y% :PRINT CHR$(170+i%) **
*************************************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'AT x%,y% :PRINT CHR$(170+i%) ':
     (check_vname) check_vname ret1 ' x%,y% :PRINT CHR$(170+i%) ':
    (check_variable) check_variable: ' x%,y% :PRINT CHR$(170+i%) '
    (check_variable) check_variable: Ary test ' x%,y% :PRINT CHR$(170+i%) '

     (check_literal) check_literal:lit='(' idx=6 ' x%,y% :PRINT CHR$(170+i%) '
     (check_literal) check_literal:After drop space:'(' idx=6 ' x%,y% :PRINT CHR$(170+i%) '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=6 ' x%,y% :PRINT CHR$(170+i%) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=7 'x%,y% :PRINT CHR$(170+i%) '
   (check_literal)   '=' != 'x'
   (check_literal) check_literal: ret0
  (check_assignment) check_assignment:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) check_textlabel: 'AT x%,y% :PRINT CHR$(170+i%) '
   (check_textlabel) check_textlabel:ret0
  (check_proc_call) check_proc_call:ret0

  (check_command) check_command:
  (check_command) check_command: ret1 found=> 'AT'
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=27, ' x%,y% :PRINT CHR$(170+i%) '
========================================================
    AT x%,y% :PRINT CHR$(170+i%) 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'AT x%,y% :PRINT CHR$(170+i%) ':
    (check_vname) check_vname ret1 ' x%,y% :PRINT CHR$(170+i%) ':
   (check_variable) check_variable: ' x%,y% :PRINT CHR$(170+i%) '
   (check_variable) check_variable: Ary test ' x%,y% :PRINT CHR$(170+i%) '

    (check_literal) check_literal:lit='(' idx=6 ' x%,y% :PRINT CHR$(170+i%) '
    (check_literal) check_literal:After drop space:'(' idx=6 ' x%,y% :PRINT CHR$(170+i%) '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=6 ' x%,y% :PRINT CHR$(170+i%) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=7 'x%,y% :PRINT CHR$(170+i%) '
  (check_literal)   '=' != 'x'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'AT x%,y% :PRINT CHR$(170+i%) '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'AT'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'AT' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) AT is function
 (function_return_type) 
function_return_type: 'AT' =>v
 (function_return_type) 
function_return_type: 'AT' =>17
process_token: 'AT' t=>v
 Push:'AT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: AT type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: AT type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' x%,y% :PRINT CHR$(170+i%) '

   (check_eitem) check_eitem: 'x%,y% :PRINT CHR$(170+i%) '

    (check_operator) check_operator: x%,y% :PRINT CHR$(170+i%) 

     (check_literal) check_literal:lit=' ,' idx=7 'x%,y% :PRINT CHR$(170+i%) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=7 'x%,y% :PRINT CHR$(170+i%) '
     (check_literal)   ',' != 'x'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'x%,y% :PRINT CHR$(170+i%) '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=7 'x%,y% :PRINT CHR$(170+i%) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=7 'x%,y% :PRINT CHR$(170+i%) '
     (check_literal)   '%' != 'x'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=7 'x%,y% :PRINT CHR$(170+i%) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=7 'x%,y% :PRINT CHR$(170+i%) '
     (check_literal)   '"' != 'x'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'x%,y% :PRINT CHR$(170+i%) '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'x%,y% :PRINT CHR$(170+i%) ':
      (check_vname) check_vname ret1 '%,y% :PRINT CHR$(170+i%) ':
     (check_variable) check_variable: '%,y% :PRINT CHR$(170+i%) '
     (check_variable) check_variable: Ary test ',y% :PRINT CHR$(170+i%) '

      (check_literal) check_literal:lit='(' idx=9 ',y% :PRINT CHR$(170+i%) '
      (check_literal) check_literal:After drop space:'(' idx=9 ',y% :PRINT CHR$(170+i%) '
      (check_literal)   '(' != ','
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator: x%,y% :PRINT CHR$(170+i%) 

    (check_literal) check_literal:lit=' ,' idx=7 'x%,y% :PRINT CHR$(170+i%) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=7 'x%,y% :PRINT CHR$(170+i%) '
    (check_literal)   ',' != 'x'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'x%,y% :PRINT CHR$(170+i%) '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=7 'x%,y% :PRINT CHR$(170+i%) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=7 'x%,y% :PRINT CHR$(170+i%) '
    (check_literal)   '%' != 'x'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=7 'x%,y% :PRINT CHR$(170+i%) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=7 'x%,y% :PRINT CHR$(170+i%) '
    (check_literal)   '"' != 'x'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'x%,y% :PRINT CHR$(170+i%) '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'x%,y% :PRINT CHR$(170+i%) ':
     (check_vname) check_vname ret1 '%,y% :PRINT CHR$(170+i%) ':
    (check_variable) check_variable: '%,y% :PRINT CHR$(170+i%) '
    (check_variable) check_variable: Ary test ',y% :PRINT CHR$(170+i%) '

     (check_literal) check_literal:lit='(' idx=9 ',y% :PRINT CHR$(170+i%) '
     (check_literal) check_literal:After drop space:'(' idx=9 ',y% :PRINT CHR$(170+i%) '
     (check_literal)   '(' != ','
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1

  (scan_atom) scan_atom:

   (check_literal) check_literal:lit=' %' idx=7 'x%,y% :PRINT CHR$(170+i%) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=7 'x%,y% :PRINT CHR$(170+i%) '
   (check_literal)   '%' != 'x'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=7 'x%,y% :PRINT CHR$(170+i%) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=7 'x%,y% :PRINT CHR$(170+i%) '
   (check_literal)   '"' != 'x'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'x%,y% :PRINT CHR$(170+i%) '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'x%,y% :PRINT CHR$(170+i%) ':
    (check_vname) check_vname ret1 '%,y% :PRINT CHR$(170+i%) ':
   (check_variable) check_variable: '%,y% :PRINT CHR$(170+i%) '
   (check_variable) check_variable: Ary test ',y% :PRINT CHR$(170+i%) '

    (check_literal) check_literal:lit='(' idx=9 ',y% :PRINT CHR$(170+i%) '
    (check_literal) check_literal:After drop space:'(' idx=9 ',y% :PRINT CHR$(170+i%) '
    (check_literal)   '(' != ','
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'x%,y% :PRINT CHR$(170+i%) '
   (scan_vname) scan_vname: ret1 'x'
  (scan_variable) scan_variable: '%,y% :PRINT CHR$(170+i%) ' vname='x'
  (scan_variable) scan_variable: Ary test ',y% :PRINT CHR$(170+i%) '

   (check_literal) check_literal:lit='(' idx=9 ',y% :PRINT CHR$(170+i%) '
   (check_literal) check_literal:After drop space:'(' idx=9 ',y% :PRINT CHR$(170+i%) '
   (check_literal)   '(' != ','
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='x%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'x%' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:x% is not function
token_is_variable: tok:'x%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:x% is not function
 (init_get_name) 
init_get_name:'x%'
 (init_get_name) 
init_get_name:'x%'
 (get_name) 
get_name:gn:'x%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,(U )] i i x%
 (print_var_info) 
VAR INFO: '                x%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
 (scan_atom) scan_atom:ret1
(scan_expression) n commas now:0

 (check_eitem) check_eitem: ',y% :PRINT CHR$(170+i%) '

  (check_operator) check_operator: ,y% :PRINT CHR$(170+i%) 

   (check_literal) check_literal:lit=' ,' idx=9 ',y% :PRINT CHR$(170+i%) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=9 ',y% :PRINT CHR$(170+i%) '
   (check_literal) check_literal:After while():y% :PRINT CHR$(170+i%) 
   (check_literal) check_literal:ret1 
  (check_operator) ret1:is comma: 0
 (check_eitem) check_eitem:ret1 comma:1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: ,y% :PRINT CHR$(170+i%) 

   (check_literal) check_literal:lit=' ,' idx=9 ',y% :PRINT CHR$(170+i%) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=9 ',y% :PRINT CHR$(170+i%) '
   (check_literal) check_literal:After while():y% :PRINT CHR$(170+i%) 
   (check_literal) check_literal:ret1 
  (check_operator) ret1:is comma: 0

  (scan_operator) scan_operator: ',y% :PRINT CHR$(170+i%) '

   (check_literal) check_literal:lit=' ,' idx=9 ',y% :PRINT CHR$(170+i%) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=9 ',y% :PRINT CHR$(170+i%) '
   (check_literal) check_literal:After while():y% :PRINT CHR$(170+i%) 
   (check_literal) check_literal:ret1 

   (scan_literal) scan_literal:lit=' ,' ',y% :PRINT CHR$(170+i%) '
   (scan_literal) scan_literal:After drop space:',y% :PRINT CHR$(170+i%) '
   (scan_literal) scan_literal:while loop:,y% :PRINT CHR$(170+i%) 
   Frst:0 T:',' exptype:i
(output_sub_start)
   (scan_literal) scan_literal:ret1
  (scan_operator) ret1:is comma: 1
 (scan_eitem) Is comma;1
 (scan_expression) n commas now:1

  (check_eitem) check_eitem: 'y% :PRINT CHR$(170+i%) '

   (check_operator) check_operator: y% :PRINT CHR$(170+i%) 

    (check_literal) check_literal:lit=' ,' idx=10 'y% :PRINT CHR$(170+i%) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=10 'y% :PRINT CHR$(170+i%) '
    (check_literal)   ',' != 'y'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'y% :PRINT CHR$(170+i%) '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=10 'y% :PRINT CHR$(170+i%) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=10 'y% :PRINT CHR$(170+i%) '
    (check_literal)   '%' != 'y'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=10 'y% :PRINT CHR$(170+i%) '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=10 'y% :PRINT CHR$(170+i%) '
    (check_literal)   '"' != 'y'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'y% :PRINT CHR$(170+i%) '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'y% :PRINT CHR$(170+i%) ':
     (check_vname) check_vname ret1 '% :PRINT CHR$(170+i%) ':
    (check_variable) check_variable: '% :PRINT CHR$(170+i%) '
    (check_variable) check_variable: Ary test ' :PRINT CHR$(170+i%) '

     (check_literal) check_literal:lit='(' idx=12 ' :PRINT CHR$(170+i%) '
     (check_literal) check_literal:After drop space:'(' idx=12 ' :PRINT CHR$(170+i%) '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1
 (check_eitem) check_eitem:ret1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: y% :PRINT CHR$(170+i%) 

   (check_literal) check_literal:lit=' ,' idx=10 'y% :PRINT CHR$(170+i%) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=10 'y% :PRINT CHR$(170+i%) '
   (check_literal)   ',' != 'y'
   (check_literal) check_literal: ret0
  (check_operator) ret0:is comma: 0

  (check_function) check_function: 'y% :PRINT CHR$(170+i%) '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=10 'y% :PRINT CHR$(170+i%) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=10 'y% :PRINT CHR$(170+i%) '
   (check_literal)   '%' != 'y'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=10 'y% :PRINT CHR$(170+i%) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=10 'y% :PRINT CHR$(170+i%) '
   (check_literal)   '"' != 'y'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'y% :PRINT CHR$(170+i%) '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'y% :PRINT CHR$(170+i%) ':
    (check_vname) check_vname ret1 '% :PRINT CHR$(170+i%) ':
   (check_variable) check_variable: '% :PRINT CHR$(170+i%) '
   (check_variable) check_variable: Ary test ' :PRINT CHR$(170+i%) '

    (check_literal) check_literal:lit='(' idx=12 ' :PRINT CHR$(170+i%) '
    (check_literal) check_literal:After drop space:'(' idx=12 ' :PRINT CHR$(170+i%) '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) check_atom:ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=10 'y% :PRINT CHR$(170+i%) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=10 'y% :PRINT CHR$(170+i%) '
  (check_literal)   '%' != 'y'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=10 'y% :PRINT CHR$(170+i%) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=10 'y% :PRINT CHR$(170+i%) '
  (check_literal)   '"' != 'y'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) check_float: ret0

   (check_integer) check_integer: 'y% :PRINT CHR$(170+i%) '
   (check_integer) check_integer:ret0
  (check_number) check_number: ret0

  (check_variable) check_variable:

   (check_vname) check_vname 'y% :PRINT CHR$(170+i%) ':
   (check_vname) check_vname ret1 '% :PRINT CHR$(170+i%) ':
  (check_variable) check_variable: '% :PRINT CHR$(170+i%) '
  (check_variable) check_variable: Ary test ' :PRINT CHR$(170+i%) '

   (check_literal) check_literal:lit='(' idx=12 ' :PRINT CHR$(170+i%) '
   (check_literal) check_literal:After drop space:'(' idx=12 ' :PRINT CHR$(170+i%) '
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) scan_variable:

  (scan_vname) scan_vname: 'y% :PRINT CHR$(170+i%) '
  (scan_vname) scan_vname: ret1 'y'
 (scan_variable) scan_variable: '% :PRINT CHR$(170+i%) ' vname='y'
 (scan_variable) scan_variable: Ary test ' :PRINT CHR$(170+i%) '

  (check_literal) check_literal:lit='(' idx=12 ' :PRINT CHR$(170+i%) '
  (check_literal) check_literal:After drop space:'(' idx=12 ' :PRINT CHR$(170+i%) '
  (check_literal)   '(' != ' '
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='y%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'y%' exptype:U
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:y% is not function
token_is_variable: tok:'y%'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:y% is not function
(init_get_name) 
init_get_name:'y%'
(init_get_name) 
init_get_name:'y%'
(get_name) 
get_name:gn:'y%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,(U )] i i y%
(print_var_info) 
VAR INFO: '                y%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
(scan_atom) scan_atom:ret1
(scan_expression) n commas now:1

 (check_eitem) check_eitem: ' :PRINT CHR$(170+i%) '

  (check_operator) check_operator:  :PRINT CHR$(170+i%) 

   (check_literal) check_literal:lit=' ,' idx=13 ':PRINT CHR$(170+i%) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=13 ':PRINT CHR$(170+i%) '
   (check_literal)   ',' != ':'
   (check_literal) check_literal: ret0
  (check_operator) ret0:is comma: 0

  (check_function) check_function: ':PRINT CHR$(170+i%) '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=12 ' :PRINT CHR$(170+i%) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=13 ':PRINT CHR$(170+i%) '
   (check_literal)   '%' != ':'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=12 ' :PRINT CHR$(170+i%) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=13 ':PRINT CHR$(170+i%) '
   (check_literal)   '"' != ':'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: ':PRINT CHR$(170+i%) '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname ':PRINT CHR$(170+i%) ':
    (check_vname) check_vname ret0 ':PRINT CHR$(170+i%) ':
   (check_variable) check_variable:ret0 
  (check_atom) check_atom:ret1

  (check_sub_expr) check_sub_expr:

   (check_literal) check_literal:lit=' (' idx=12 ' :PRINT CHR$(170+i%) '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'(' idx=13 ':PRINT CHR$(170+i%) '
   (check_literal)   '(' != ':'
   (check_literal) check_literal: ret0
  (check_sub_expr) check_sub_expr: ret0
 (check_eitem) check_eitem:ret0
(scan_expression) scan_expression: ret1 ' :PRINT CHR$(170+i%) ' commas:1
(scan_command) scan_command: ret1 =>'AT'
(scan_command) 
ENDEXP
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: AT type:17
(op_stack_print) 
------------------

(  output_sub_end)
(token_is_function) 
token_is_function:
(token_is_function) AT is function
Pop 5
Pop 'AT'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_function) [i,(U )] v v AT
(  output_sub_end)
Finalise stack
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'x%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? '' nidx:-1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'y%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'AT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
 BE:

Type Check Stack (0)

 BE:x%
type_check_stack_push: 'x%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'x%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'x%' type:i (0)
 BE:

Type Check Stack (1)

000: 'x%' type:i (0)
 BE:y%
type_check_stack_push: 'y%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'x%' type:0
(type_check_stack_print) 
001: 'y%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'x%' type:i (0)
001: 'y%' type:i (0)
 BE:

Type Check Stack (2)

000: 'x%' type:i (0)
001: 'y%' type:i (0)
 BE:AT
FN: 2 args
(function_return_type) 
function_return_type: 'AT' =>v
(function_return_type) 
function_return_type: 'AT' =>17
ret_type;17 v
typecheck_expression:Ret type of AT : v
type_check_stack_pop: 'y%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'x%' type:0
(type_check_stack_print) 
------------------

FN ARG 1 ri y% 0(i)  Arg ok
type_check_stack_pop: 'x%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (0)

(type_check_stack_print) 
------------------

FN ARG 0 ri x% 0(i)  Arg ok
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:17
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'x%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? '' nidx:-1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'y%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'AT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'x%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     i rq:i 'y%'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_FUNCTION     v rq:v 'AT'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
(process_expression_types) 
==INFIX==

Var: x% ary:0 NumIdx:0
infix_stack_push: 'x%'
Var: y% ary:0 NumIdx:0
infix_stack_push: 'y%'
infix_stack_pop: 'y%'
infix_stack_pop: 'x%'
infix_stack_push: 'AT(x% y% )'
infix_stack_pop: 'AT(x% y% )'
(process_expression_types) ==AT(x% y% )==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     i rq:i x%  0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_START    U rq:?   0:
(    output_qcode) N4 EXP_BUFF_ID_VARIABLE     i rq:i y%  0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_FUNCTION     v rq:v AT  0:
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:i   0:

 (check_literal) check_literal:lit=':' idx=13 ':PRINT CHR$(170+i%) '
 (check_literal) check_literal:After drop space:':' idx=13 ':PRINT CHR$(170+i%) '
 (check_literal) check_literal:After while():PRINT CHR$(170+i%) 
 (check_literal) check_literal:ret1 

 (scan_literal) scan_literal:lit=':' 'PRINT CHR$(170+i%) '
 (scan_literal) scan_literal:After drop space:'PRINT CHR$(170+i%) '
 (scan_literal) scan_literal:while loop:PRINT CHR$(170+i%) 
 (scan_literal) scan_literal:ret1

 (check_line) check_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'PRINT CHR$(170+i%) ':
    (check_vname) check_vname ret1 ' CHR$(170+i%) ':
   (check_variable) check_variable: ' CHR$(170+i%) '
   (check_variable) check_variable: Ary test ' CHR$(170+i%) '

    (check_literal) check_literal:lit='(' idx=19 ' CHR$(170+i%) '
    (check_literal) check_literal:After drop space:'(' idx=19 ' CHR$(170+i%) '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=19 ' CHR$(170+i%) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=20 'CHR$(170+i%) '
  (check_literal)   '=' != 'C'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'PRINT CHR$(170+i%) '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'PRINT'
(check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=14, ' CHR$(170+i%) '
========================================================
    AT x%,y% :PRINT CHR$(170+i%) 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'PRINT CHR$(170+i%) ':
    (check_vname) check_vname ret1 ' CHR$(170+i%) ':
   (check_variable) check_variable: ' CHR$(170+i%) '
   (check_variable) check_variable: Ary test ' CHR$(170+i%) '

    (check_literal) check_literal:lit='(' idx=19 ' CHR$(170+i%) '
    (check_literal) check_literal:After drop space:'(' idx=19 ' CHR$(170+i%) '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=19 ' CHR$(170+i%) '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=20 'CHR$(170+i%) '
  (check_literal)   '=' != 'C'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'PRINT CHR$(170+i%) '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'PRINT'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'PRINT' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) PRINT is function
 (function_return_type) 
function_return_type: 'PRINT' =>v
 (function_return_type) 
function_return_type: 'PRINT' =>17
process_token: 'PRINT' t=>v
 Push:'PRINT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' CHR$(170+i%) '

   (check_eitem) check_eitem: 'CHR$(170+i%) '

    (check_operator) check_operator: CHR$(170+i%) 

     (check_literal) check_literal:lit=' ,' idx=20 'CHR$(170+i%) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=20 'CHR$(170+i%) '
     (check_literal)   ',' != 'C'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'CHR$(170+i%) '
    (check_function) check_function: ret1 Found fn=>'CHR$'
   (check_eitem) check_eitem:ret1

   (scan_eitem) scan_eitem:

    (check_operator) check_operator: CHR$(170+i%) 

     (check_literal) check_literal:lit=' ,' idx=20 'CHR$(170+i%) '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=20 'CHR$(170+i%) '
     (check_literal)   ',' != 'C'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'CHR$(170+i%) '
    (check_function) check_function: ret1 Found fn=>'CHR$'

    (scan_function) scan_function:
   Frst:0 T:'CHR$' exptype:U
    (token_is_function) 
token_is_function:
    (token_is_function) CHR$ is function
    (function_return_type) 
function_return_type: 'CHR$' =>s
    (function_return_type) 
function_return_type: 'CHR$' =>2
process_token: 'CHR$' t=>s
 Push:'CHR$'
    (op_stack_print) 
------------------
    (op_stack_print) 
Operator Stack     (3)

    (op_stack_print) 
000: PRINT type:17
    (op_stack_print) 
001: ( type:16
    (op_stack_print) 
002: CHR$ type:2
    (op_stack_print) 
------------------

    (scan_expression) n commas now:0

     (check_eitem) check_eitem: '(170+i%) '

      (check_operator) check_operator: (170+i%) 

       (check_literal) check_literal:lit=' ,' idx=24 '(170+i%) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=24 '(170+i%) '
       (check_literal)   ',' != '('
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: '(170+i%) '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=24 '(170+i%) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=24 '(170+i%) '
       (check_literal)   '%' != '('
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=24 '(170+i%) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=24 '(170+i%) '
       (check_literal)   '"' != '('
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '(170+i%) '
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname '(170+i%) ':
        (check_vname) check_vname ret0 '(170+i%) ':
       (check_variable) check_variable:ret0 
      (check_atom) check_atom:ret1

      (check_sub_expr) check_sub_expr:

       (check_literal) check_literal:lit=' (' idx=24 '(170+i%) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'(' idx=24 '(170+i%) '
       (check_literal) check_literal:After while():170+i%) 
       (check_literal) check_literal:ret1 
      (check_sub_expr) check_sub_expr: ret1
     (check_eitem) check_eitem:ret1

     (scan_eitem) scan_eitem:

      (check_operator) check_operator: (170+i%) 

       (check_literal) check_literal:lit=' ,' idx=24 '(170+i%) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=24 '(170+i%) '
       (check_literal)   ',' != '('
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: '(170+i%) '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=24 '(170+i%) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=24 '(170+i%) '
       (check_literal)   '%' != '('
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=24 '(170+i%) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=24 '(170+i%) '
       (check_literal)   '"' != '('
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '(170+i%) '
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname '(170+i%) ':
        (check_vname) check_vname ret0 '(170+i%) ':
       (check_variable) check_variable:ret0 
      (check_atom) check_atom:ret1

      (check_sub_expr) check_sub_expr:

       (check_literal) check_literal:lit=' (' idx=24 '(170+i%) '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'(' idx=24 '(170+i%) '
       (check_literal) check_literal:After while():170+i%) 
       (check_literal) check_literal:ret1 
      (check_sub_expr) check_sub_expr: ret1

      (scan_sub_expr) scan_sub_expr:

       (scan_literal) scan_literal:lit=' (' '(170+i%) '
       (scan_literal) scan_literal:After drop space:'(170+i%) '
       (scan_literal) scan_literal:while loop:(170+i%) 
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (4)

       (op_stack_print) 
000: PRINT type:17
       (op_stack_print) 
001: ( type:16
       (op_stack_print) 
002: CHR$ type:2
       (op_stack_print) 
003: ( type:16
       (op_stack_print) 
------------------

       (scan_literal) scan_literal:ret1
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (5)

      (op_stack_print) 
000: PRINT type:17
      (op_stack_print) 
001: ( type:16
      (op_stack_print) 
002: CHR$ type:2
      (op_stack_print) 
003: ( type:16
      (op_stack_print) 
004: ( type:16
      (op_stack_print) 
------------------


       (scan_expression) scan_expression: '170+i%) '

        (check_eitem) check_eitem: '170+i%) '

         (check_operator) check_operator: 170+i%) 

          (check_literal) check_literal:lit=' ,' idx=25 '170+i%) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:',' idx=25 '170+i%) '
          (check_literal)   ',' != '1'
          (check_literal) check_literal: ret0
         (check_operator) ret0:is comma: 0

         (check_function) check_function: '170+i%) '
         (check_function) check_function: ret0

         (check_atom) check_atom:

          (check_literal) check_literal:lit=' %' idx=25 '170+i%) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=25 '170+i%) '
          (check_literal)   '%' != '1'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=25 '170+i%) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=25 '170+i%) '
          (check_literal)   '"' != '1'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '170+i%) '
           (check_integer) check_integer:ret1
          (check_number) check_number: ret1
         (check_atom) check_atom:ret1
        (check_eitem) check_eitem:ret1

        (scan_eitem) scan_eitem:

         (check_operator) check_operator: 170+i%) 

          (check_literal) check_literal:lit=' ,' idx=25 '170+i%) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:',' idx=25 '170+i%) '
          (check_literal)   ',' != '1'
          (check_literal) check_literal: ret0
         (check_operator) ret0:is comma: 0

         (check_function) check_function: '170+i%) '
         (check_function) check_function: ret0

         (check_atom) check_atom:

          (check_literal) check_literal:lit=' %' idx=25 '170+i%) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=25 '170+i%) '
          (check_literal)   '%' != '1'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=25 '170+i%) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=25 '170+i%) '
          (check_literal)   '"' != '1'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '170+i%) '
           (check_integer) check_integer:ret1
          (check_number) check_number: ret1
         (check_atom) check_atom:ret1

         (scan_atom) scan_atom:

          (check_literal) check_literal:lit=' %' idx=25 '170+i%) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=25 '170+i%) '
          (check_literal)   '%' != '1'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=25 '170+i%) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=25 '170+i%) '
          (check_literal)   '"' != '1'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '170+i%) '
           (check_integer) check_integer:ret1
          (check_number) check_number: ret1

          (scan_number) scan_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: '170+i%) '
           (check_integer) check_integer:ret1

           (scan_integer) scan_integer:
           (scan_integer) scan_integer:ret1
   Frst:0 T:'170' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U U U )] i i 170
          (scan_integer) scan_integer:ret1  170
         (scan_atom) scan_atom:ret1
        (scan_expression) n commas now:0

         (check_eitem) check_eitem: '+i%) '

          (check_operator) check_operator: +i%) 

           (check_literal) check_literal:lit=' ,' idx=28 '+i%) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:',' idx=28 '+i%) '
           (check_literal)   ',' != '+'
           (check_literal) check_literal: ret0
          (check_operator) ret1:is comma: 0
         (check_eitem) check_eitem:ret1 comma:1

         (scan_eitem) scan_eitem:

          (check_operator) check_operator: +i%) 

           (check_literal) check_literal:lit=' ,' idx=28 '+i%) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:',' idx=28 '+i%) '
           (check_literal)   ',' != '+'
           (check_literal) check_literal: ret0
          (check_operator) ret1:is comma: 0

          (scan_operator) scan_operator: '+i%) '

           (check_literal) check_literal:lit=' ,' idx=28 '+i%) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:',' idx=28 '+i%) '
           (check_literal)   ',' != '+'
           (check_literal) check_literal: ret0
          (scan_operator) scan_operator: ret1 'i%) '
   Frst:0 T:'+' exptype:i
         (operator_precedence) 
+ is operator
'+' is operator
         (process_token) 
Token is operator o1 name:+ o2 name:(
         (process_token) 
opr1:3 opr2:0
Push 1
 Push:'+'
         (op_stack_print) 
------------------
         (op_stack_print) 
Operator Stack     (6)

         (op_stack_print) 
000: PRINT type:17
         (op_stack_print) 
001: ( type:16
         (op_stack_print) 
002: CHR$ type:2
         (op_stack_print) 
003: ( type:16
         (op_stack_print) 
004: ( type:16
         (op_stack_print) 
005: + type:0
         (op_stack_print) 
------------------

         (scan_eitem) Is comma;0
         (scan_expression) n commas now:0

          (check_eitem) check_eitem: 'i%) '

           (check_operator) check_operator: i%) 

            (check_literal) check_literal:lit=' ,' idx=29 'i%) '
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:',' idx=29 'i%) '
            (check_literal)   ',' != 'i'
            (check_literal) check_literal: ret0
           (check_operator) ret0:is comma: 0

           (check_function) check_function: 'i%) '
           (check_function) check_function: ret0

           (check_atom) check_atom:

            (check_literal) check_literal:lit=' %' idx=29 'i%) '
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:'%' idx=29 'i%) '
            (check_literal)   '%' != 'i'
            (check_literal) check_literal: ret0

            (check_literal) check_literal:lit=' "' idx=29 'i%) '
            (check_literal) dropping space
            (check_literal) check_literal:After drop space:'"' idx=29 'i%) '
            (check_literal)   '"' != 'i'
            (check_literal) check_literal: ret0

            (check_number) check_number:

             (check_float) check_float:
             (isfloatdigit) isfloatdigit:
             (check_float) check_float: ret0

             (check_integer) check_integer: 'i%) '
             (check_integer) check_integer:ret0
            (check_number) check_number: ret0

            (check_variable) check_variable:

             (check_vname) check_vname 'i%) ':
             (check_vname) check_vname ret1 '%) ':
            (check_variable) check_variable: '%) '
            (check_variable) check_variable: Ary test ') '

             (check_literal) check_literal:lit='(' idx=31 ') '
             (check_literal) check_literal:After drop space:'(' idx=31 ') '
             (check_literal)   '(' != ')'
             (check_literal) check_literal: ret0
            (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
           (check_variable) check_variable:ret1 
          (check_atom) check_atom:ret1
         (check_eitem) check_eitem:ret1

         (scan_eitem) scan_eitem:

          (check_operator) check_operator: i%) 

           (check_literal) check_literal:lit=' ,' idx=29 'i%) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:',' idx=29 'i%) '
           (check_literal)   ',' != 'i'
           (check_literal) check_literal: ret0
          (check_operator) ret0:is comma: 0

          (check_function) check_function: 'i%) '
          (check_function) check_function: ret0

          (check_atom) check_atom:

           (check_literal) check_literal:lit=' %' idx=29 'i%) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'%' idx=29 'i%) '
           (check_literal)   '%' != 'i'
           (check_literal) check_literal: ret0

           (check_literal) check_literal:lit=' "' idx=29 'i%) '
           (check_literal) dropping space
           (check_literal) check_literal:After drop space:'"' idx=29 'i%) '
           (check_literal)   '"' != 'i'
           (check_literal) check_literal: ret0

           (check_number) check_number:

            (check_float) check_float:
            (isfloatdigit) isfloatdigit:
            (check_float) check_float: ret0

            (check_integer) check_integer: 'i%) '
            (check_integer) check_integer:ret0
           (check_number) check_number: ret0

           (check_variable) check_variable:

            (check_vname) check_vname 'i%) ':
            (check_vname) check_vname ret1 '%) ':
           (check_variable) check_variable: '%) '
           (check_variable) check_variable: Ary test ') '

            (check_literal) check_literal:lit='(' idx=31 ') '
            (check_literal) check_literal:After drop space:'(' idx=31 ') '
            (check_literal)   '(' != ')'
            (check_literal) check_literal: ret0
           (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
          (check_variable) check_variable:ret1 
         (check_atom) check_atom:ret1

         (scan_atom) scan_atom:

          (check_literal) check_literal:lit=' %' idx=29 'i%) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=29 'i%) '
          (check_literal)   '%' != 'i'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=29 'i%) '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=29 'i%) '
          (check_literal)   '"' != 'i'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: 'i%) '
           (check_integer) check_integer:ret0
          (check_number) check_number: ret0

          (check_variable) check_variable:

           (check_vname) check_vname 'i%) ':
           (check_vname) check_vname ret1 '%) ':
          (check_variable) check_variable: '%) '
          (check_variable) check_variable: Ary test ') '

           (check_literal) check_literal:lit='(' idx=31 ') '
           (check_literal) check_literal:After drop space:'(' idx=31 ') '
           (check_literal)   '(' != ')'
           (check_literal) check_literal: ret0
          (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
         (check_variable) check_variable:ret1 

         (scan_variable) scan_variable:

          (scan_vname) scan_vname: 'i%) '
          (scan_vname) scan_vname: ret1 'i'
         (scan_variable) scan_variable: '%) ' vname='i'
         (scan_variable) scan_variable: Ary test ') '

          (check_literal) check_literal:lit='(' idx=31 ') '
          (check_literal) check_literal:After drop space:'(' idx=31 ') '
          (check_literal)   '(' != ')'
          (check_literal) check_literal: ret0
         (scan_variable) scan_variable:ret1 vname='i%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'i%' exptype:i
        (operator_precedence) 
+ is operator
        (token_is_function) 
token_is_function:
        (token_is_function) 
token_is_function:i% is not function
token_is_variable: tok:'i%'
        (token_is_function) 
token_is_function:
        (token_is_function) 
token_is_function:i% is not function
        (init_get_name) 
init_get_name:'i%'
        (init_get_name) 
init_get_name:'i%'
        (get_name) 
get_name:gn:'i%'
process_token:type:i req_type:i
modify_expression_type:Inittype:i Intype:i Outtype:i
( output_variable) [i,(U U U )] i i i%
        (print_var_info) 
VAR INFO: '                i%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
        (scan_atom) scan_atom:ret1
       (scan_expression) n commas now:0

        (check_eitem) check_eitem: ') '

         (check_operator) check_operator: ) 

          (check_literal) check_literal:lit=' ,' idx=31 ') '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:',' idx=31 ') '
          (check_literal)   ',' != ')'
          (check_literal) check_literal: ret0
         (check_operator) ret0:is comma: 0

         (check_function) check_function: ') '
         (check_function) check_function: ret0

         (check_atom) check_atom:

          (check_literal) check_literal:lit=' %' idx=31 ') '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'%' idx=31 ') '
          (check_literal)   '%' != ')'
          (check_literal) check_literal: ret0

          (check_literal) check_literal:lit=' "' idx=31 ') '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'"' idx=31 ') '
          (check_literal)   '"' != ')'
          (check_literal) check_literal: ret0

          (check_number) check_number:

           (check_float) check_float:
           (isfloatdigit) isfloatdigit:
           (check_float) check_float: ret0

           (check_integer) check_integer: ') '
           (check_integer) check_integer:ret0
          (check_number) check_number: ret0

          (check_variable) check_variable:

           (check_vname) check_vname ') ':
           (check_vname) check_vname ret0 ') ':
          (check_variable) check_variable:ret0 
         (check_atom) check_atom:ret1

         (check_sub_expr) check_sub_expr:

          (check_literal) check_literal:lit=' (' idx=31 ') '
          (check_literal) dropping space
          (check_literal) check_literal:After drop space:'(' idx=31 ') '
          (check_literal)   '(' != ')'
          (check_literal) check_literal: ret0
         (check_sub_expr) check_sub_expr: ret0
        (check_eitem) check_eitem:ret0
       (scan_expression) scan_expression: ret1 ') ' commas:0

       (scan_literal) scan_literal:lit=' )' ') '
       (scan_literal) scan_literal:After drop space:') '
       (scan_literal) scan_literal:while loop:) 
   Frst:0 T:')' exptype:i
       (operator_precedence) 
+ is operator
       (process_token) 
Pop 3
Pop '+'
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (5)

       (op_stack_print) 
000: PRINT type:17
       (op_stack_print) 
001: ( type:16
       (op_stack_print) 
002: CHR$ type:2
       (op_stack_print) 
003: ( type:16
       (op_stack_print) 
004: ( type:16
       (op_stack_print) 
------------------

( output_operator) [i,(U U U )] i i +
       (token_is_function) 
token_is_function:
       (token_is_function) 
token_is_function:+ is not function
Pop 4
Pop '('
       (op_stack_print) 
------------------
       (op_stack_print) 
Operator Stack     (4)

       (op_stack_print) 
000: PRINT type:17
       (op_stack_print) 
001: ( type:16
       (op_stack_print) 
002: CHR$ type:2
       (op_stack_print) 
003: ( type:16
       (op_stack_print) 
------------------

(  output_sub_end)
       (token_is_function) 
token_is_function:
       (token_is_function) 
token_is_function:( is not function
(  output_sub_end)
       (scan_literal) scan_literal:ret1
   Frst:0 T:')' exptype:U
Pop 4
Pop '('
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (3)

      (op_stack_print) 
000: PRINT type:17
      (op_stack_print) 
001: ( type:16
      (op_stack_print) 
002: CHR$ type:2
      (op_stack_print) 
------------------

(  output_sub_end)
      (token_is_function) 
token_is_function:
      (token_is_function) CHR$ is function
Pop 5
Pop 'CHR$'
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (2)

      (op_stack_print) 
000: PRINT type:17
      (op_stack_print) 
001: ( type:16
      (op_stack_print) 
------------------

( output_function) [U,(U U )] s s CHR$
(  output_sub_end)
      (scan_sub_expr) scan_sub_expr:ret1
     (scan_expression) n commas now:0

      (check_eitem) check_eitem: ' '

       (check_operator) check_operator:  

        (check_literal) check_literal:lit=' ,' idx=33 ''
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:',' idx=33 ''
        (check_literal) check_literal  ret0 Empty test string
       (check_operator) ret0:is comma: 0

       (check_function) check_function: ''
       (check_function) check_function: ret0

       (check_atom) check_atom:

        (check_literal) check_literal:lit=' %' idx=32 ' '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'%' idx=33 ''
        (check_literal) check_literal  ret0 Empty test string

        (check_literal) check_literal:lit=' "' idx=32 ' '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'"' idx=33 ''
        (check_literal) check_literal  ret0 Empty test string

        (check_number) check_number:

         (check_float) check_float:
         (isfloatdigit) isfloatdigit:
         (check_float) check_float: ret0

         (check_integer) check_integer: ''
         (check_integer) check_integer:ret0
        (check_number) check_number: ret0

        (check_variable) check_variable:

         (check_vname) check_vname '':
         (check_vname) check_vname ret0 '':
        (check_variable) check_variable:ret0 
       (check_atom) check_atom:ret1

       (check_sub_expr) check_sub_expr:

        (check_literal) check_literal:lit=' (' idx=32 ' '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'(' idx=33 ''
        (check_literal) check_literal  ret0 Empty test string
       (check_sub_expr) check_sub_expr: ret0
      (check_eitem) check_eitem:ret0
     (scan_expression) scan_expression: ret1 ' ' commas:0
    (scan_command) scan_command: ret1 =>'PRINT'
   (scan_command) 
ENDEXP
   Frst:0 T:')' exptype:U
Pop 4
Pop '('
   (op_stack_print) 
------------------
   (op_stack_print) 
Operator Stack     (1)

   (op_stack_print) 
000: PRINT type:17
   (op_stack_print) 
------------------

(  output_sub_end)
   (token_is_function) 
token_is_function:
   (token_is_function) PRINT is function
Pop 5
Pop 'PRINT'
   (op_stack_print) 
------------------
   (op_stack_print) 
Operator Stack     (0)

   (op_stack_print) 
------------------

( output_function) [U,(U )] v v PRINT
(  output_sub_end)
Finalise stack
   (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '170' nidx:28  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'i%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '+' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     s rq:s 'CHR$' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
 BE:

Type Check Stack (0)

 BE:

Type Check Stack (0)

 BE:

Type Check Stack (0)

 BE:170
type_check_stack_push: '170'
   (type_check_stack_print) 
------------------
   (type_check_stack_print) 
Type Check Stack     (1)

   (type_check_stack_print) 
000: '170' type:0
   (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '170' type:i (0)
 BE:i%
type_check_stack_push: 'i%'
   (type_check_stack_print) 
------------------
   (type_check_stack_print) 
Type Check Stack     (2)

   (type_check_stack_print) 
000: '170' type:0
   (type_check_stack_print) 
001: 'i%' type:0
   (type_check_stack_print) 
------------------


Type Check Stack (2)

000: '170' type:i (0)
001: 'i%' type:i (0)
 BE:+
BUFF_ID_OPERATOR
Found operator +
type_check_stack_pop: 'i%'
   (type_check_stack_print) 
------------------
   (type_check_stack_print) 
Type Check Stack     (1)

   (type_check_stack_print) 
000: '170' type:0
   (type_check_stack_print) 
------------------

type_check_stack_pop: '170'
   (type_check_stack_print) 
------------------
   (type_check_stack_print) 
Type Check Stack     (0)

   (type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
   (type_check_stack_print) 
------------------
   (type_check_stack_print) 
Type Check Stack     (1)

   (type_check_stack_print) 
000: '000' type:0
   (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:i (0)
 BE:

Type Check Stack (1)

000: '000' type:i (0)
 BE:

Type Check Stack (1)

000: '000' type:i (0)
 BE:

Type Check Stack (1)

000: '000' type:i (0)
 BE:CHR$
FN: 1 args
   (function_return_type) 
function_return_type: 'CHR$' =>s
   (function_return_type) 
function_return_type: 'CHR$' =>2
ret_type;2 s
typecheck_expression:Ret type of CHR$ : s
type_check_stack_pop: '000'
   (type_check_stack_print) 
------------------
   (type_check_stack_print) 
Type Check Stack     (0)

   (type_check_stack_print) 
------------------

FN ARG 0 ri 000 0(i)  Arg ok
type_check_stack_push: '000'
   (type_check_stack_print) 
------------------
   (type_check_stack_print) 
Type Check Stack     (1)

   (type_check_stack_print) 
000: '000' type:2
   (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:s (2)
 BE:

Type Check Stack (1)

000: '000' type:s (2)
 BE:

Type Check Stack (1)

000: '000' type:s (2)
 BE:PRINT
FN: 1 args
   (function_return_type) 
function_return_type: 'PRINT' =>v
   (function_return_type) 
function_return_type: 'PRINT' =>17
ret_type;17 v
typecheck_expression:Ret type of PRINT : v
type_check_stack_pop: '000'
   (type_check_stack_print) 
------------------
   (type_check_stack_print) 
Type Check Stack     (0)

   (type_check_stack_print) 
------------------

FN ARG 0 ri 000 2(s)  Arg not OK
type_check_stack_push: '000'
   (type_check_stack_print) 
------------------
   (type_check_stack_print) 
Type Check Stack     (1)

   (type_check_stack_print) 
000: '000' type:17
   (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '170' nidx:28  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'i%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '+' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1048576  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     s rq:s 'CHR$' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_INTEGER      i rq:i '170'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_VARIABLE     i rq:i 'i%'  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_OPERATOR     i rq:i '+'  2: 5 4
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_FUNCTION     s rq:s 'CHR$'  0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N12 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
   (process_expression_types) 
==INFIX==

infix_stack_push: '170'
Var: i% ary:0 NumIdx:0
infix_stack_push: 'i%'
infix_stack_pop: 'i%'
infix_stack_pop: '170'
infix_stack_push: '(170 + i%)'
infix_stack_pop: '(170 + i%)'
infix_stack_push: 'CHR$((170 + i%) )'
infix_stack_pop: 'CHR$((170 + i%) )'
infix_stack_push: 'PRINT(CHR$((170 + i%) ) )'
infix_stack_pop: 'PRINT(CHR$((170 + i%) ) )'
   (process_expression_types) ==PRINT(CHR$((170 + i%) ) )==
   (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N4 EXP_BUFF_ID_INTEGER      i rq:i 170  0:
(    output_qcode) N5 EXP_BUFF_ID_VARIABLE     i rq:i i%  0:
(    output_qcode) N6 EXP_BUFF_ID_OPERATOR     i rq:i +  2: 5 4
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N8 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N9 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N10 EXP_BUFF_ID_FUNCTION     s rq:s CHR$  0:
(    output_qcode) N11 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N12 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N13 EXP_BUFF_ID_FUNCTION     v rq:v PRINT  0:
(    output_qcode) N14 EXP_BUFF_ID_SUB_END      U rq:i   0:

    (check_literal) check_literal:lit=':' idx=33 ''
    (check_literal) check_literal:After drop space:':' idx=33 ''
    (check_literal) check_literal  ret0 Empty test string
   (translate_file) 
cline scanned OK
***********************
**    BEEP 10,100+i% **
***********************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'BEEP 10,100+i% ':
     (check_vname) check_vname ret1 ' 10,100+i% ':
    (check_variable) check_variable: ' 10,100+i% '
    (check_variable) check_variable: Ary test ' 10,100+i% '

     (check_literal) check_literal:lit='(' idx=8 ' 10,100+i% '
     (check_literal) check_literal:After drop space:'(' idx=8 ' 10,100+i% '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=8 ' 10,100+i% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=9 '10,100+i% '
   (check_literal)   '=' != '1'
   (check_literal) check_literal: ret0
  (check_assignment) check_assignment:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) check_textlabel: 'BEEP 10,100+i% '
   (check_textlabel) check_textlabel:ret0
  (check_proc_call) check_proc_call:ret0

  (check_command) check_command:
  (check_command) check_command: ret1 found=> 'BEEP'
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=11, ' 10,100+i% '
========================================================
    BEEP 10,100+i% 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'BEEP 10,100+i% ':
    (check_vname) check_vname ret1 ' 10,100+i% ':
   (check_variable) check_variable: ' 10,100+i% '
   (check_variable) check_variable: Ary test ' 10,100+i% '

    (check_literal) check_literal:lit='(' idx=8 ' 10,100+i% '
    (check_literal) check_literal:After drop space:'(' idx=8 ' 10,100+i% '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=8 ' 10,100+i% '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=9 '10,100+i% '
  (check_literal)   '=' != '1'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'BEEP 10,100+i% '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'BEEP'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'BEEP' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) BEEP is function
 (function_return_type) 
function_return_type: 'BEEP' =>v
 (function_return_type) 
function_return_type: 'BEEP' =>17
process_token: 'BEEP' t=>v
 Push:'BEEP'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: BEEP type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: BEEP type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' 10,100+i% '

   (check_eitem) check_eitem: '10,100+i% '

    (check_operator) check_operator: 10,100+i% 

     (check_literal) check_literal:lit=' ,' idx=9 '10,100+i% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=9 '10,100+i% '
     (check_literal)   ',' != '1'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: '10,100+i% '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=9 '10,100+i% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=9 '10,100+i% '
     (check_literal)   '%' != '1'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=9 '10,100+i% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=9 '10,100+i% '
     (check_literal)   '"' != '1'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '10,100+i% '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (scan_eitem) scan_eitem:

    (check_operator) check_operator: 10,100+i% 

     (check_literal) check_literal:lit=' ,' idx=9 '10,100+i% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=9 '10,100+i% '
     (check_literal)   ',' != '1'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: '10,100+i% '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=9 '10,100+i% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=9 '10,100+i% '
     (check_literal)   '%' != '1'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=9 '10,100+i% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=9 '10,100+i% '
     (check_literal)   '"' != '1'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '10,100+i% '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1

    (scan_atom) scan_atom:

     (check_literal) check_literal:lit=' %' idx=9 '10,100+i% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=9 '10,100+i% '
     (check_literal)   '%' != '1'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=9 '10,100+i% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=9 '10,100+i% '
     (check_literal)   '"' != '1'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '10,100+i% '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1

     (scan_number) scan_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '10,100+i% '
      (check_integer) check_integer:ret1

      (scan_integer) scan_integer:
      (scan_integer) scan_integer:ret1
   Frst:0 T:'10' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U )] i i 10
     (scan_integer) scan_integer:ret1  10
    (scan_atom) scan_atom:ret1
   (scan_expression) n commas now:0

    (check_eitem) check_eitem: ',100+i% '

     (check_operator) check_operator: ,100+i% 

      (check_literal) check_literal:lit=' ,' idx=11 ',100+i% '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=11 ',100+i% '
      (check_literal) check_literal:After while():100+i% 
      (check_literal) check_literal:ret1 
     (check_operator) ret1:is comma: 0
    (check_eitem) check_eitem:ret1 comma:1

    (scan_eitem) scan_eitem:

     (check_operator) check_operator: ,100+i% 

      (check_literal) check_literal:lit=' ,' idx=11 ',100+i% '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=11 ',100+i% '
      (check_literal) check_literal:After while():100+i% 
      (check_literal) check_literal:ret1 
     (check_operator) ret1:is comma: 0

     (scan_operator) scan_operator: ',100+i% '

      (check_literal) check_literal:lit=' ,' idx=11 ',100+i% '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=11 ',100+i% '
      (check_literal) check_literal:After while():100+i% 
      (check_literal) check_literal:ret1 

      (scan_literal) scan_literal:lit=' ,' ',100+i% '
      (scan_literal) scan_literal:After drop space:',100+i% '
      (scan_literal) scan_literal:while loop:,100+i% 
   Frst:0 T:',' exptype:i
(output_sub_start)
      (scan_literal) scan_literal:ret1
     (scan_operator) ret1:is comma: 1
    (scan_eitem) Is comma;1
    (scan_expression) n commas now:1

     (check_eitem) check_eitem: '100+i% '

      (check_operator) check_operator: 100+i% 

       (check_literal) check_literal:lit=' ,' idx=12 '100+i% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=12 '100+i% '
       (check_literal)   ',' != '1'
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: '100+i% '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=12 '100+i% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=12 '100+i% '
       (check_literal)   '%' != '1'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=12 '100+i% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=12 '100+i% '
       (check_literal)   '"' != '1'
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '100+i% '
        (check_integer) check_integer:ret1
       (check_number) check_number: ret1
      (check_atom) check_atom:ret1
     (check_eitem) check_eitem:ret1

     (scan_eitem) scan_eitem:

      (check_operator) check_operator: 100+i% 

       (check_literal) check_literal:lit=' ,' idx=12 '100+i% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=12 '100+i% '
       (check_literal)   ',' != '1'
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: '100+i% '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=12 '100+i% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=12 '100+i% '
       (check_literal)   '%' != '1'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=12 '100+i% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=12 '100+i% '
       (check_literal)   '"' != '1'
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '100+i% '
        (check_integer) check_integer:ret1
       (check_number) check_number: ret1
      (check_atom) check_atom:ret1

      (scan_atom) scan_atom:

       (check_literal) check_literal:lit=' %' idx=12 '100+i% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=12 '100+i% '
       (check_literal)   '%' != '1'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=12 '100+i% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=12 '100+i% '
       (check_literal)   '"' != '1'
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '100+i% '
        (check_integer) check_integer:ret1
       (check_number) check_number: ret1

       (scan_number) scan_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '100+i% '
        (check_integer) check_integer:ret1

        (scan_integer) scan_integer:
        (scan_integer) scan_integer:ret1
   Frst:0 T:'100' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U )] i i 100
       (scan_integer) scan_integer:ret1  100
      (scan_atom) scan_atom:ret1
     (scan_expression) n commas now:1

      (check_eitem) check_eitem: '+i% '

       (check_operator) check_operator: +i% 

        (check_literal) check_literal:lit=' ,' idx=15 '+i% '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:',' idx=15 '+i% '
        (check_literal)   ',' != '+'
        (check_literal) check_literal: ret0
       (check_operator) ret1:is comma: 0
      (check_eitem) check_eitem:ret1 comma:1

      (scan_eitem) scan_eitem:

       (check_operator) check_operator: +i% 

        (check_literal) check_literal:lit=' ,' idx=15 '+i% '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:',' idx=15 '+i% '
        (check_literal)   ',' != '+'
        (check_literal) check_literal: ret0
       (check_operator) ret1:is comma: 0

       (scan_operator) scan_operator: '+i% '

        (check_literal) check_literal:lit=' ,' idx=15 '+i% '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:',' idx=15 '+i% '
        (check_literal)   ',' != '+'
        (check_literal) check_literal: ret0
       (scan_operator) scan_operator: ret1 'i% '
   Frst:0 T:'+' exptype:i
      (operator_precedence) 
+ is operator
'+' is operator
      (process_token) 
Token is operator o1 name:+ o2 name:(
      (process_token) 
opr1:3 opr2:0
Push 1
 Push:'+'
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (3)

      (op_stack_print) 
000: BEEP type:17
      (op_stack_print) 
001: ( type:16
      (op_stack_print) 
002: + type:0
      (op_stack_print) 
------------------

      (scan_eitem) Is comma;0
      (scan_expression) n commas now:1

       (check_eitem) check_eitem: 'i% '

        (check_operator) check_operator: i% 

         (check_literal) check_literal:lit=' ,' idx=16 'i% '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:',' idx=16 'i% '
         (check_literal)   ',' != 'i'
         (check_literal) check_literal: ret0
        (check_operator) ret0:is comma: 0

        (check_function) check_function: 'i% '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=16 'i% '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=16 'i% '
         (check_literal)   '%' != 'i'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=16 'i% '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=16 'i% '
         (check_literal)   '"' != 'i'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: 'i% '
          (check_integer) check_integer:ret0
         (check_number) check_number: ret0

         (check_variable) check_variable:

          (check_vname) check_vname 'i% ':
          (check_vname) check_vname ret1 '% ':
         (check_variable) check_variable: '% '
         (check_variable) check_variable: Ary test ' '

          (check_literal) check_literal:lit='(' idx=18 ' '
          (check_literal) check_literal:After drop space:'(' idx=18 ' '
          (check_literal)   '(' != ' '
          (check_literal) check_literal: ret0
         (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
        (check_variable) check_variable:ret1 
       (check_atom) check_atom:ret1
      (check_eitem) check_eitem:ret1

      (scan_eitem) scan_eitem:

       (check_operator) check_operator: i% 

        (check_literal) check_literal:lit=' ,' idx=16 'i% '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:',' idx=16 'i% '
        (check_literal)   ',' != 'i'
        (check_literal) check_literal: ret0
       (check_operator) ret0:is comma: 0

       (check_function) check_function: 'i% '
       (check_function) check_function: ret0

       (check_atom) check_atom:

        (check_literal) check_literal:lit=' %' idx=16 'i% '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'%' idx=16 'i% '
        (check_literal)   '%' != 'i'
        (check_literal) check_literal: ret0

        (check_literal) check_literal:lit=' "' idx=16 'i% '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'"' idx=16 'i% '
        (check_literal)   '"' != 'i'
        (check_literal) check_literal: ret0

        (check_number) check_number:

         (check_float) check_float:
         (isfloatdigit) isfloatdigit:
         (check_float) check_float: ret0

         (check_integer) check_integer: 'i% '
         (check_integer) check_integer:ret0
        (check_number) check_number: ret0

        (check_variable) check_variable:

         (check_vname) check_vname 'i% ':
         (check_vname) check_vname ret1 '% ':
        (check_variable) check_variable: '% '
        (check_variable) check_variable: Ary test ' '

         (check_literal) check_literal:lit='(' idx=18 ' '
         (check_literal) check_literal:After drop space:'(' idx=18 ' '
         (check_literal)   '(' != ' '
         (check_literal) check_literal: ret0
        (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
       (check_variable) check_variable:ret1 
      (check_atom) check_atom:ret1

      (scan_atom) scan_atom:

       (check_literal) check_literal:lit=' %' idx=16 'i% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=16 'i% '
       (check_literal)   '%' != 'i'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=16 'i% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=16 'i% '
       (check_literal)   '"' != 'i'
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: 'i% '
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname 'i% ':
        (check_vname) check_vname ret1 '% ':
       (check_variable) check_variable: '% '
       (check_variable) check_variable: Ary test ' '

        (check_literal) check_literal:lit='(' idx=18 ' '
        (check_literal) check_literal:After drop space:'(' idx=18 ' '
        (check_literal)   '(' != ' '
        (check_literal) check_literal: ret0
       (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
      (check_variable) check_variable:ret1 

      (scan_variable) scan_variable:

       (scan_vname) scan_vname: 'i% '
       (scan_vname) scan_vname: ret1 'i'
      (scan_variable) scan_variable: '% ' vname='i'
      (scan_variable) scan_variable: Ary test ' '

       (check_literal) check_literal:lit='(' idx=18 ' '
       (check_literal) check_literal:After drop space:'(' idx=18 ' '
       (check_literal)   '(' != ' '
       (check_literal) check_literal: ret0
      (scan_variable) scan_variable:ret1 vname='i%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'i%' exptype:i
     (operator_precedence) 
+ is operator
     (token_is_function) 
token_is_function:
     (token_is_function) 
token_is_function:i% is not function
token_is_variable: tok:'i%'
     (token_is_function) 
token_is_function:
     (token_is_function) 
token_is_function:i% is not function
     (init_get_name) 
init_get_name:'i%'
     (init_get_name) 
init_get_name:'i%'
     (get_name) 
get_name:gn:'i%'
process_token:type:i req_type:i
modify_expression_type:Inittype:i Intype:i Outtype:i
( output_variable) [i,(U )] i i i%
     (print_var_info) 
VAR INFO: '                i%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
     (scan_atom) scan_atom:ret1
    (scan_expression) n commas now:1

     (check_eitem) check_eitem: ' '

      (check_operator) check_operator:  

       (check_literal) check_literal:lit=' ,' idx=19 ''
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=19 ''
       (check_literal) check_literal  ret0 Empty test string
      (check_operator) ret0:is comma: 0

      (check_function) check_function: ''
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=18 ' '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=19 ''
       (check_literal) check_literal  ret0 Empty test string

       (check_literal) check_literal:lit=' "' idx=18 ' '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=19 ''
       (check_literal) check_literal  ret0 Empty test string

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: ''
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname '':
        (check_vname) check_vname ret0 '':
       (check_variable) check_variable:ret0 
      (check_atom) check_atom:ret1

      (check_sub_expr) check_sub_expr:

       (check_literal) check_literal:lit=' (' idx=18 ' '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'(' idx=19 ''
       (check_literal) check_literal  ret0 Empty test string
      (check_sub_expr) check_sub_expr: ret0
     (check_eitem) check_eitem:ret0
    (scan_expression) scan_expression: ret1 ' ' commas:1
   (scan_command) scan_command: ret1 =>'BEEP'
  (scan_command) 
ENDEXP
   Frst:0 T:')' exptype:i
  (operator_precedence) 
+ is operator
  (process_token) 
Pop 3
Pop '+'
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (2)

  (op_stack_print) 
000: BEEP type:17
  (op_stack_print) 
001: ( type:16
  (op_stack_print) 
------------------

( output_operator) [i,(U )] i i +
  (token_is_function) 
token_is_function:
  (token_is_function) 
token_is_function:+ is not function
Pop 4
Pop '('
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (1)

  (op_stack_print) 
000: BEEP type:17
  (op_stack_print) 
------------------

(  output_sub_end)
  (token_is_function) 
token_is_function:
  (token_is_function) BEEP is function
Pop 5
Pop 'BEEP'
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (0)

  (op_stack_print) 
------------------

( output_function) [i,(U )] v v BEEP
(  output_sub_end)
Finalise stack
  (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '10' nidx:11  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? '' nidx:-1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '100' nidx:15  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'i%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '+' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'BEEP' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
 BE:

Type Check Stack (0)

 BE:10
type_check_stack_push: '10'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (1)

  (type_check_stack_print) 
000: '10' type:0
  (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '10' type:i (0)
 BE:

Type Check Stack (1)

000: '10' type:i (0)
 BE:100
type_check_stack_push: '100'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (2)

  (type_check_stack_print) 
000: '10' type:0
  (type_check_stack_print) 
001: '100' type:0
  (type_check_stack_print) 
------------------


Type Check Stack (2)

000: '10' type:i (0)
001: '100' type:i (0)
 BE:i%
type_check_stack_push: 'i%'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (3)

  (type_check_stack_print) 
000: '10' type:0
  (type_check_stack_print) 
001: '100' type:0
  (type_check_stack_print) 
002: 'i%' type:0
  (type_check_stack_print) 
------------------


Type Check Stack (3)

000: '10' type:i (0)
001: '100' type:i (0)
002: 'i%' type:i (0)
 BE:+
BUFF_ID_OPERATOR
Found operator +
type_check_stack_pop: 'i%'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (2)

  (type_check_stack_print) 
000: '10' type:0
  (type_check_stack_print) 
001: '100' type:0
  (type_check_stack_print) 
------------------

type_check_stack_pop: '100'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (1)

  (type_check_stack_print) 
000: '10' type:0
  (type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (2)

  (type_check_stack_print) 
000: '10' type:0
  (type_check_stack_print) 
001: '000' type:0
  (type_check_stack_print) 
------------------


Type Check Stack (2)

000: '10' type:i (0)
001: '000' type:i (0)
 BE:

Type Check Stack (2)

000: '10' type:i (0)
001: '000' type:i (0)
 BE:BEEP
FN: 2 args
  (function_return_type) 
function_return_type: 'BEEP' =>v
  (function_return_type) 
function_return_type: 'BEEP' =>17
ret_type;17 v
typecheck_expression:Ret type of BEEP : v
type_check_stack_pop: '000'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (1)

  (type_check_stack_print) 
000: '10' type:0
  (type_check_stack_print) 
------------------

FN ARG 1 ri 000 0(i)  Arg ok
type_check_stack_pop: '10'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (0)

  (type_check_stack_print) 
------------------

FN ARG 0 ri 10 0(i)  Arg ok
type_check_stack_push: '000'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (1)

  (type_check_stack_print) 
000: '000' type:17
  (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '10' nidx:11  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? '' nidx:-1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '100' nidx:15  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'i%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '+' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'BEEP' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i '10'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_INTEGER      i rq:i '100'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_VARIABLE     i rq:i 'i%'  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_OPERATOR     i rq:i '+'  2: 5 4
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_FUNCTION     v rq:v 'BEEP'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
  (process_expression_types) 
==INFIX==

infix_stack_push: '10'
infix_stack_push: '100'
Var: i% ary:0 NumIdx:0
infix_stack_push: 'i%'
infix_stack_pop: 'i%'
infix_stack_pop: '100'
infix_stack_push: '(100 + i%)'
infix_stack_pop: '(100 + i%)'
infix_stack_pop: '10'
infix_stack_push: 'BEEP(10 (100 + i%) )'
infix_stack_pop: 'BEEP(10 (100 + i%) )'
  (process_expression_types) ==BEEP(10 (100 + i%) )==
  (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_INTEGER      i rq:i 10  0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_START    U rq:?   0:
(    output_qcode) N4 EXP_BUFF_ID_INTEGER      i rq:i 100  0:
(    output_qcode) N5 EXP_BUFF_ID_VARIABLE     i rq:i i%  0:
(    output_qcode) N6 EXP_BUFF_ID_OPERATOR     i rq:i +  2: 5 4
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N8 EXP_BUFF_ID_FUNCTION     v rq:v BEEP  0:
(    output_qcode) N9 EXP_BUFF_ID_SUB_END      U rq:i   0:

   (check_literal) check_literal:lit=':' idx=19 ''
   (check_literal) check_literal:After drop space:':' idx=19 ''
   (check_literal) check_literal  ret0 Empty test string
  (translate_file) 
cline scanned OK
****************
**    i%=i%+1 **
****************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'i%=i%+1 ':
     (check_vname) check_vname ret1 '%=i%+1 ':
    (check_variable) check_variable: '%=i%+1 '
    (check_variable) check_variable: Ary test '=i%+1 '

     (check_literal) check_literal:lit='(' idx=6 '=i%+1 '
     (check_literal) check_literal:After drop space:'(' idx=6 '=i%+1 '
     (check_literal)   '(' != '='
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=6 '=i%+1 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=6 '=i%+1 '
   (check_literal) check_literal:After while():i%+1 
   (check_literal) check_literal:ret1 

   (check_expression) check_expression: 'i%+1 '

    (check_eitem) check_eitem: 'i%+1 '

     (check_operator) check_operator: i%+1 

      (check_literal) check_literal:lit=' ,' idx=7 'i%+1 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=7 'i%+1 '
      (check_literal)   ',' != 'i'
      (check_literal) check_literal: ret0
     (check_operator) ret0:is comma: 0

     (check_function) check_function: 'i%+1 '
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=7 'i%+1 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=7 'i%+1 '
      (check_literal)   '%' != 'i'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=7 'i%+1 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=7 'i%+1 '
      (check_literal)   '"' != 'i'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: 'i%+1 '
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname 'i%+1 ':
       (check_vname) check_vname ret1 '%+1 ':
      (check_variable) check_variable: '%+1 '
      (check_variable) check_variable: Ary test '+1 '

       (check_literal) check_literal:lit='(' idx=9 '+1 '
       (check_literal) check_literal:After drop space:'(' idx=9 '+1 '
       (check_literal)   '(' != '+'
       (check_literal) check_literal: ret0
      (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
     (check_variable) check_variable:ret1 
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: '+1 '

    (check_operator) check_operator: +1 

     (check_literal) check_literal:lit=' ,' idx=9 '+1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=9 '+1 '
     (check_literal)   ',' != '+'
     (check_literal) check_literal: ret0
    (check_operator) ret1:is comma: 0
   (check_eitem) check_eitem:ret1 comma:1

   (check_eitem) check_eitem: '1 '

    (check_operator) check_operator: 1 

     (check_literal) check_literal:lit=' ,' idx=10 '1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=10 '1 '
     (check_literal)   ',' != '1'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: '1 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=10 '1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=10 '1 '
     (check_literal)   '%' != '1'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=10 '1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=10 '1 '
     (check_literal)   '"' != '1'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '1 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: ' '

    (check_operator) check_operator:  

     (check_literal) check_literal:lit=' ,' idx=12 ''
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=12 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_operator) ret0:is comma: 0

    (check_function) check_function: ''
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=11 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=12 ''
     (check_literal) check_literal  ret0 Empty test string

     (check_literal) check_literal:lit=' "' idx=11 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=12 ''
     (check_literal) check_literal  ret0 Empty test string

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: ''
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname '':
      (check_vname) check_vname ret0 '':
     (check_variable) check_variable:ret0 
    (check_atom) check_atom:ret1

    (check_sub_expr) check_sub_expr:

     (check_literal) check_literal:lit=' (' idx=11 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'(' idx=12 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_sub_expr) check_sub_expr: ret0
   (check_eitem) check_eitem:ret0
  (check_expression) check_expression:ret1 ' '
 (check_assignment) check_assignment:ret1
(check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=1, ' '
========================================================
    i%=i%+1 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'i%=i%+1 ':
    (check_vname) check_vname ret1 '%=i%+1 ':
   (check_variable) check_variable: '%=i%+1 '
   (check_variable) check_variable: Ary test '=i%+1 '

    (check_literal) check_literal:lit='(' idx=6 '=i%+1 '
    (check_literal) check_literal:After drop space:'(' idx=6 '=i%+1 '
    (check_literal)   '(' != '='
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=6 '=i%+1 '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=6 '=i%+1 '
  (check_literal) check_literal:After while():i%+1 
  (check_literal) check_literal:ret1 

  (check_expression) check_expression: 'i%+1 '

   (check_eitem) check_eitem: 'i%+1 '

    (check_operator) check_operator: i%+1 

     (check_literal) check_literal:lit=' ,' idx=7 'i%+1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=7 'i%+1 '
     (check_literal)   ',' != 'i'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'i%+1 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=7 'i%+1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=7 'i%+1 '
     (check_literal)   '%' != 'i'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=7 'i%+1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=7 'i%+1 '
     (check_literal)   '"' != 'i'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'i%+1 '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'i%+1 ':
      (check_vname) check_vname ret1 '%+1 ':
     (check_variable) check_variable: '%+1 '
     (check_variable) check_variable: Ary test '+1 '

      (check_literal) check_literal:lit='(' idx=9 '+1 '
      (check_literal) check_literal:After drop space:'(' idx=9 '+1 '
      (check_literal)   '(' != '+'
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (check_eitem) check_eitem: '+1 '

   (check_operator) check_operator: +1 

    (check_literal) check_literal:lit=' ,' idx=9 '+1 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=9 '+1 '
    (check_literal)   ',' != '+'
    (check_literal) check_literal: ret0
   (check_operator) ret1:is comma: 0
  (check_eitem) check_eitem:ret1 comma:1

  (check_eitem) check_eitem: '1 '

   (check_operator) check_operator: 1 

    (check_literal) check_literal:lit=' ,' idx=10 '1 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=10 '1 '
    (check_literal)   ',' != '1'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: '1 '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=10 '1 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=10 '1 '
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=10 '1 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=10 '1 '
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '1 '
     (check_integer) check_integer:ret1
    (check_number) check_number: ret1
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (check_eitem) check_eitem: ' '

   (check_operator) check_operator:  

    (check_literal) check_literal:lit=' ,' idx=12 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=12 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_operator) ret0:is comma: 0

   (check_function) check_function: ''
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=11 ' '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=12 ''
    (check_literal) check_literal  ret0 Empty test string

    (check_literal) check_literal:lit=' "' idx=11 ' '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=12 ''
    (check_literal) check_literal  ret0 Empty test string

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: ''
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname '':
     (check_vname) check_vname ret0 '':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret1

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=11 ' '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=12 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_sub_expr) check_sub_expr: ret0
  (check_eitem) check_eitem:ret0
 (check_expression) check_expression:ret1 ' '
(check_assignment) check_assignment:ret1

 (scan_assignment) scan_assignment:

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'i%=i%+1 '
   (scan_vname) scan_vname: ret1 'i'
  (scan_variable) scan_variable: '%=i%+1 ' vname='i'
  (scan_variable) scan_variable: Ary test '=i%+1 '

   (check_literal) check_literal:lit='(' idx=6 '=i%+1 '
   (check_literal) check_literal:After drop space:'(' idx=6 '=i%+1 '
   (check_literal)   '(' != '='
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='i%' is str:0 int:1 flt:0 ary:0
   Frst:1 T:'i%' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:i% is not function
token_is_variable: tok:'i%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:i% is not function
 (init_get_name) 
init_get_name:'i%'
 (init_get_name) 
init_get_name:'i%'
 (get_name) 
get_name:gn:'i%'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] i i i%
 (print_var_info) 
VAR INFO: '                i%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0

  (scan_assignment_equals) scan_assignment_equals:lit=' =' '=i%+1 '
  (scan_assignment_equals) scan_assignment_equals:After drop space:'=i%+1 '
  (scan_assignment_equals) scan_assignment_equals:while loop:=i%+1 
   Frst:0 T:':=' exptype:i
  (operator_precedence) 
:= is operator
':=' is operator
  (process_token) 
Token is operator o1 name::= o2 name:
  (process_token) 
opr1:1 opr2:0
Push 1
 Push:':='
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (1)

  (op_stack_print) 
000: := type:0
  (op_stack_print) 
------------------

  (scan_assignment_equals) scan_assignment_equals:ret1

  (scan_expression) scan_expression: 'i%+1 '

   (check_eitem) check_eitem: 'i%+1 '

    (check_operator) check_operator: i%+1 

     (check_literal) check_literal:lit=' ,' idx=7 'i%+1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=7 'i%+1 '
     (check_literal)   ',' != 'i'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'i%+1 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=7 'i%+1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=7 'i%+1 '
     (check_literal)   '%' != 'i'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=7 'i%+1 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=7 'i%+1 '
     (check_literal)   '"' != 'i'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'i%+1 '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'i%+1 ':
      (check_vname) check_vname ret1 '%+1 ':
     (check_variable) check_variable: '%+1 '
     (check_variable) check_variable: Ary test '+1 '

      (check_literal) check_literal:lit='(' idx=9 '+1 '
      (check_literal) check_literal:After drop space:'(' idx=9 '+1 '
      (check_literal)   '(' != '+'
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator: i%+1 

    (check_literal) check_literal:lit=' ,' idx=7 'i%+1 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=7 'i%+1 '
    (check_literal)   ',' != 'i'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'i%+1 '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=7 'i%+1 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=7 'i%+1 '
    (check_literal)   '%' != 'i'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=7 'i%+1 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=7 'i%+1 '
    (check_literal)   '"' != 'i'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'i%+1 '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'i%+1 ':
     (check_vname) check_vname ret1 '%+1 ':
    (check_variable) check_variable: '%+1 '
    (check_variable) check_variable: Ary test '+1 '

     (check_literal) check_literal:lit='(' idx=9 '+1 '
     (check_literal) check_literal:After drop space:'(' idx=9 '+1 '
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1

  (scan_atom) scan_atom:

   (check_literal) check_literal:lit=' %' idx=7 'i%+1 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=7 'i%+1 '
   (check_literal)   '%' != 'i'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=7 'i%+1 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=7 'i%+1 '
   (check_literal)   '"' != 'i'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'i%+1 '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'i%+1 ':
    (check_vname) check_vname ret1 '%+1 ':
   (check_variable) check_variable: '%+1 '
   (check_variable) check_variable: Ary test '+1 '

    (check_literal) check_literal:lit='(' idx=9 '+1 '
    (check_literal) check_literal:After drop space:'(' idx=9 '+1 '
    (check_literal)   '(' != '+'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'i%+1 '
   (scan_vname) scan_vname: ret1 'i'
  (scan_variable) scan_variable: '%+1 ' vname='i'
  (scan_variable) scan_variable: Ary test '+1 '

   (check_literal) check_literal:lit='(' idx=9 '+1 '
   (check_literal) check_literal:After drop space:'(' idx=9 '+1 '
   (check_literal)   '(' != '+'
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='i%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'i%' exptype:i
 (operator_precedence) 
:= is operator
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:i% is not function
token_is_variable: tok:'i%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:i% is not function
 (init_get_name) 
init_get_name:'i%'
 (init_get_name) 
init_get_name:'i%'
 (get_name) 
get_name:gn:'i%'
process_token:type:i req_type:i
modify_expression_type:Inittype:i Intype:i Outtype:i
( output_variable) [i,()] i i i%
 (print_var_info) 
VAR INFO: '                i%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
 (scan_atom) scan_atom:ret1
(scan_expression) n commas now:0

 (check_eitem) check_eitem: '+1 '

  (check_operator) check_operator: +1 

   (check_literal) check_literal:lit=' ,' idx=9 '+1 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=9 '+1 '
   (check_literal)   ',' != '+'
   (check_literal) check_literal: ret0
  (check_operator) ret1:is comma: 0
 (check_eitem) check_eitem:ret1 comma:1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: +1 

   (check_literal) check_literal:lit=' ,' idx=9 '+1 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=9 '+1 '
   (check_literal)   ',' != '+'
   (check_literal) check_literal: ret0
  (check_operator) ret1:is comma: 0

  (scan_operator) scan_operator: '+1 '

   (check_literal) check_literal:lit=' ,' idx=9 '+1 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=9 '+1 '
   (check_literal)   ',' != '+'
   (check_literal) check_literal: ret0
  (scan_operator) scan_operator: ret1 '1 '
   Frst:0 T:'+' exptype:i
 (operator_precedence) 
+ is operator
 (operator_precedence) 
:= is operator
'+' is operator
 (process_token) 
Token is operator o1 name:+ o2 name::=
 (process_token) 
opr1:3 opr2:1
 (operator_precedence) 
:= is operator
 (operator_precedence) 
:= is operator
Push 1
 Push:'+'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: := type:0
 (op_stack_print) 
001: + type:0
 (op_stack_print) 
------------------

 (scan_eitem) Is comma;0
 (scan_expression) n commas now:0

  (check_eitem) check_eitem: '1 '

   (check_operator) check_operator: 1 

    (check_literal) check_literal:lit=' ,' idx=10 '1 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=10 '1 '
    (check_literal)   ',' != '1'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: '1 '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=10 '1 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=10 '1 '
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=10 '1 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=10 '1 '
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '1 '
     (check_integer) check_integer:ret1
    (check_number) check_number: ret1
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator: 1 

    (check_literal) check_literal:lit=' ,' idx=10 '1 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=10 '1 '
    (check_literal)   ',' != '1'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: '1 '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=10 '1 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=10 '1 '
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=10 '1 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=10 '1 '
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '1 '
     (check_integer) check_integer:ret1
    (check_number) check_number: ret1
   (check_atom) check_atom:ret1

   (scan_atom) scan_atom:

    (check_literal) check_literal:lit=' %' idx=10 '1 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=10 '1 '
    (check_literal)   '%' != '1'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=10 '1 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=10 '1 '
    (check_literal)   '"' != '1'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '1 '
     (check_integer) check_integer:ret1
    (check_number) check_number: ret1

    (scan_number) scan_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '1 '
     (check_integer) check_integer:ret1

     (scan_integer) scan_integer:
     (scan_integer) scan_integer:ret1
   Frst:0 T:'1' exptype:i
    (operator_precedence) 
+ is operator
modify_expression_type:Inittype:i Intype:i Outtype:i
(  output_integer) [i,()] i i 1
    (scan_integer) scan_integer:ret1  1
   (scan_atom) scan_atom:ret1
  (scan_expression) n commas now:0

   (check_eitem) check_eitem: ' '

    (check_operator) check_operator:  

     (check_literal) check_literal:lit=' ,' idx=12 ''
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=12 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_operator) ret0:is comma: 0

    (check_function) check_function: ''
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=11 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=12 ''
     (check_literal) check_literal  ret0 Empty test string

     (check_literal) check_literal:lit=' "' idx=11 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=12 ''
     (check_literal) check_literal  ret0 Empty test string

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: ''
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname '':
      (check_vname) check_vname ret0 '':
     (check_variable) check_variable:ret0 
    (check_atom) check_atom:ret1

    (check_sub_expr) check_sub_expr:

     (check_literal) check_literal:lit=' (' idx=11 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'(' idx=12 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_sub_expr) check_sub_expr: ret0
   (check_eitem) check_eitem:ret0
  (scan_expression) scan_expression: ret1 ' ' commas:0
 (scan_assignment) scan_assignment: ret1
Finalise stack
Pop '+'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: := type:0
(op_stack_print) 
------------------

( output_operator) [i,()] i i +
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:+ is not function
Pop ':='
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_operator) [i,()] i i :=
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function::= is not function
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'i%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'i%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '1' nidx:11  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '+' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i ':=' nidx:0  0:
=================
 BE:i%
type_check_stack_push: 'i%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'i%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'i%' type:i (0)
 BE:i%
type_check_stack_push: 'i%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'i%' type:0
(type_check_stack_print) 
001: 'i%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'i%' type:i (0)
001: 'i%' type:i (0)
 BE:1
type_check_stack_push: '1'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (3)

(type_check_stack_print) 
000: 'i%' type:0
(type_check_stack_print) 
001: 'i%' type:0
(type_check_stack_print) 
002: '1' type:0
(type_check_stack_print) 
------------------


Type Check Stack (3)

000: 'i%' type:i (0)
001: 'i%' type:i (0)
002: '1' type:i (0)
 BE:+
BUFF_ID_OPERATOR
Found operator +
type_check_stack_pop: '1'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'i%' type:0
(type_check_stack_print) 
001: 'i%' type:0
(type_check_stack_print) 
------------------

type_check_stack_pop: 'i%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'i%' type:0
(type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'i%' type:0
(type_check_stack_print) 
001: '000' type:0
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'i%' type:i (0)
001: '000' type:i (0)
 BE::=
BUFF_ID_OPERATOR
Found operator :=
type_check_stack_pop: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'i%' type:0
(type_check_stack_print) 
------------------

type_check_stack_pop: 'i%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (0)

(type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'i%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'i%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '1' nidx:11  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '+' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i ':=' nidx:0  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i 'i%'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'i%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_INTEGER      i rq:i '1'  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_OPERATOR     i rq:i '+'  2: 3 2
(dump_exp_buffer2) N5 EXP_BUFF_ID_OPERATOR     i rq:i ':='  2: 4 1
=================
(process_expression_types) 
==INFIX==

Var: i% ary:0 NumIdx:0
infix_stack_push: 'i%'
Var: i% ary:0 NumIdx:0
infix_stack_push: 'i%'
infix_stack_push: '1'
infix_stack_pop: '1'
infix_stack_pop: 'i%'
infix_stack_push: '(i% + 1)'
infix_stack_pop: '(i% + 1)'
infix_stack_pop: 'i%'
infix_stack_push: '(i% := (i% + 1))'
infix_stack_pop: '(i% := (i% + 1))'
(process_expression_types) ==(i% := (i% + 1))==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i i%  0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     i rq:i i%  0:
(    output_qcode) N3 EXP_BUFF_ID_INTEGER      i rq:i 1  0:
(    output_qcode) N4 EXP_BUFF_ID_OPERATOR     i rq:i +  2: 3 2
(    output_qcode) N5 EXP_BUFF_ID_OPERATOR     i rq:i :=  2: 4 1

 (check_literal) check_literal:lit=':' idx=12 ''
 (check_literal) check_literal:After drop space:':' idx=12 ''
 (check_literal) check_literal  ret0 Empty test string
(translate_file) 
cline scanned OK
***********************
**    BEEP 10,100-i% **
***********************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'BEEP 10,100-i% ':
     (check_vname) check_vname ret1 ' 10,100-i% ':
    (check_variable) check_variable: ' 10,100-i% '
    (check_variable) check_variable: Ary test ' 10,100-i% '

     (check_literal) check_literal:lit='(' idx=8 ' 10,100-i% '
     (check_literal) check_literal:After drop space:'(' idx=8 ' 10,100-i% '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=8 ' 10,100-i% '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=9 '10,100-i% '
   (check_literal)   '=' != '1'
   (check_literal) check_literal: ret0
  (check_assignment) check_assignment:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) check_textlabel: 'BEEP 10,100-i% '
   (check_textlabel) check_textlabel:ret0
  (check_proc_call) check_proc_call:ret0

  (check_command) check_command:
  (check_command) check_command: ret1 found=> 'BEEP'
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=11, ' 10,100-i% '
========================================================
    BEEP 10,100-i% 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'BEEP 10,100-i% ':
    (check_vname) check_vname ret1 ' 10,100-i% ':
   (check_variable) check_variable: ' 10,100-i% '
   (check_variable) check_variable: Ary test ' 10,100-i% '

    (check_literal) check_literal:lit='(' idx=8 ' 10,100-i% '
    (check_literal) check_literal:After drop space:'(' idx=8 ' 10,100-i% '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=8 ' 10,100-i% '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=9 '10,100-i% '
  (check_literal)   '=' != '1'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'BEEP 10,100-i% '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'BEEP'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'BEEP' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) BEEP is function
 (function_return_type) 
function_return_type: 'BEEP' =>v
 (function_return_type) 
function_return_type: 'BEEP' =>17
process_token: 'BEEP' t=>v
 Push:'BEEP'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: BEEP type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: BEEP type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' 10,100-i% '

   (check_eitem) check_eitem: '10,100-i% '

    (check_operator) check_operator: 10,100-i% 

     (check_literal) check_literal:lit=' ,' idx=9 '10,100-i% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=9 '10,100-i% '
     (check_literal)   ',' != '1'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: '10,100-i% '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=9 '10,100-i% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=9 '10,100-i% '
     (check_literal)   '%' != '1'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=9 '10,100-i% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=9 '10,100-i% '
     (check_literal)   '"' != '1'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '10,100-i% '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (scan_eitem) scan_eitem:

    (check_operator) check_operator: 10,100-i% 

     (check_literal) check_literal:lit=' ,' idx=9 '10,100-i% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=9 '10,100-i% '
     (check_literal)   ',' != '1'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: '10,100-i% '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=9 '10,100-i% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=9 '10,100-i% '
     (check_literal)   '%' != '1'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=9 '10,100-i% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=9 '10,100-i% '
     (check_literal)   '"' != '1'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '10,100-i% '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1

    (scan_atom) scan_atom:

     (check_literal) check_literal:lit=' %' idx=9 '10,100-i% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=9 '10,100-i% '
     (check_literal)   '%' != '1'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=9 '10,100-i% '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=9 '10,100-i% '
     (check_literal)   '"' != '1'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '10,100-i% '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1

     (scan_number) scan_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '10,100-i% '
      (check_integer) check_integer:ret1

      (scan_integer) scan_integer:
      (scan_integer) scan_integer:ret1
   Frst:0 T:'10' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U )] i i 10
     (scan_integer) scan_integer:ret1  10
    (scan_atom) scan_atom:ret1
   (scan_expression) n commas now:0

    (check_eitem) check_eitem: ',100-i% '

     (check_operator) check_operator: ,100-i% 

      (check_literal) check_literal:lit=' ,' idx=11 ',100-i% '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=11 ',100-i% '
      (check_literal) check_literal:After while():100-i% 
      (check_literal) check_literal:ret1 
     (check_operator) ret1:is comma: 0
    (check_eitem) check_eitem:ret1 comma:1

    (scan_eitem) scan_eitem:

     (check_operator) check_operator: ,100-i% 

      (check_literal) check_literal:lit=' ,' idx=11 ',100-i% '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=11 ',100-i% '
      (check_literal) check_literal:After while():100-i% 
      (check_literal) check_literal:ret1 
     (check_operator) ret1:is comma: 0

     (scan_operator) scan_operator: ',100-i% '

      (check_literal) check_literal:lit=' ,' idx=11 ',100-i% '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=11 ',100-i% '
      (check_literal) check_literal:After while():100-i% 
      (check_literal) check_literal:ret1 

      (scan_literal) scan_literal:lit=' ,' ',100-i% '
      (scan_literal) scan_literal:After drop space:',100-i% '
      (scan_literal) scan_literal:while loop:,100-i% 
   Frst:0 T:',' exptype:i
(output_sub_start)
      (scan_literal) scan_literal:ret1
     (scan_operator) ret1:is comma: 1
    (scan_eitem) Is comma;1
    (scan_expression) n commas now:1

     (check_eitem) check_eitem: '100-i% '

      (check_operator) check_operator: 100-i% 

       (check_literal) check_literal:lit=' ,' idx=12 '100-i% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=12 '100-i% '
       (check_literal)   ',' != '1'
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: '100-i% '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=12 '100-i% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=12 '100-i% '
       (check_literal)   '%' != '1'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=12 '100-i% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=12 '100-i% '
       (check_literal)   '"' != '1'
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '100-i% '
        (check_integer) check_integer:ret1
       (check_number) check_number: ret1
      (check_atom) check_atom:ret1
     (check_eitem) check_eitem:ret1

     (scan_eitem) scan_eitem:

      (check_operator) check_operator: 100-i% 

       (check_literal) check_literal:lit=' ,' idx=12 '100-i% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=12 '100-i% '
       (check_literal)   ',' != '1'
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: '100-i% '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=12 '100-i% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=12 '100-i% '
       (check_literal)   '%' != '1'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=12 '100-i% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=12 '100-i% '
       (check_literal)   '"' != '1'
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '100-i% '
        (check_integer) check_integer:ret1
       (check_number) check_number: ret1
      (check_atom) check_atom:ret1

      (scan_atom) scan_atom:

       (check_literal) check_literal:lit=' %' idx=12 '100-i% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=12 '100-i% '
       (check_literal)   '%' != '1'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=12 '100-i% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=12 '100-i% '
       (check_literal)   '"' != '1'
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '100-i% '
        (check_integer) check_integer:ret1
       (check_number) check_number: ret1

       (scan_number) scan_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: '100-i% '
        (check_integer) check_integer:ret1

        (scan_integer) scan_integer:
        (scan_integer) scan_integer:ret1
   Frst:0 T:'100' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U )] i i 100
       (scan_integer) scan_integer:ret1  100
      (scan_atom) scan_atom:ret1
     (scan_expression) n commas now:1

      (check_eitem) check_eitem: '-i% '

       (check_operator) check_operator: -i% 

        (check_literal) check_literal:lit=' ,' idx=15 '-i% '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:',' idx=15 '-i% '
        (check_literal)   ',' != '-'
        (check_literal) check_literal: ret0
       (check_operator) ret1:is comma: 0
      (check_eitem) check_eitem:ret1 comma:1

      (scan_eitem) scan_eitem:

       (check_operator) check_operator: -i% 

        (check_literal) check_literal:lit=' ,' idx=15 '-i% '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:',' idx=15 '-i% '
        (check_literal)   ',' != '-'
        (check_literal) check_literal: ret0
       (check_operator) ret1:is comma: 0

       (scan_operator) scan_operator: '-i% '

        (check_literal) check_literal:lit=' ,' idx=15 '-i% '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:',' idx=15 '-i% '
        (check_literal)   ',' != '-'
        (check_literal) check_literal: ret0
       (scan_operator) scan_operator: ret1 'i% '
   Frst:0 T:'-' exptype:i
      (operator_precedence) 
- is operator
'-' is operator
      (process_token) 
Token is operator o1 name:- o2 name:(
      (process_token) 
opr1:3 opr2:0
Push 1
 Push:'-'
      (op_stack_print) 
------------------
      (op_stack_print) 
Operator Stack     (3)

      (op_stack_print) 
000: BEEP type:17
      (op_stack_print) 
001: ( type:16
      (op_stack_print) 
002: - type:0
      (op_stack_print) 
------------------

      (scan_eitem) Is comma;0
      (scan_expression) n commas now:1

       (check_eitem) check_eitem: 'i% '

        (check_operator) check_operator: i% 

         (check_literal) check_literal:lit=' ,' idx=16 'i% '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:',' idx=16 'i% '
         (check_literal)   ',' != 'i'
         (check_literal) check_literal: ret0
        (check_operator) ret0:is comma: 0

        (check_function) check_function: 'i% '
        (check_function) check_function: ret0

        (check_atom) check_atom:

         (check_literal) check_literal:lit=' %' idx=16 'i% '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'%' idx=16 'i% '
         (check_literal)   '%' != 'i'
         (check_literal) check_literal: ret0

         (check_literal) check_literal:lit=' "' idx=16 'i% '
         (check_literal) dropping space
         (check_literal) check_literal:After drop space:'"' idx=16 'i% '
         (check_literal)   '"' != 'i'
         (check_literal) check_literal: ret0

         (check_number) check_number:

          (check_float) check_float:
          (isfloatdigit) isfloatdigit:
          (check_float) check_float: ret0

          (check_integer) check_integer: 'i% '
          (check_integer) check_integer:ret0
         (check_number) check_number: ret0

         (check_variable) check_variable:

          (check_vname) check_vname 'i% ':
          (check_vname) check_vname ret1 '% ':
         (check_variable) check_variable: '% '
         (check_variable) check_variable: Ary test ' '

          (check_literal) check_literal:lit='(' idx=18 ' '
          (check_literal) check_literal:After drop space:'(' idx=18 ' '
          (check_literal)   '(' != ' '
          (check_literal) check_literal: ret0
         (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
        (check_variable) check_variable:ret1 
       (check_atom) check_atom:ret1
      (check_eitem) check_eitem:ret1

      (scan_eitem) scan_eitem:

       (check_operator) check_operator: i% 

        (check_literal) check_literal:lit=' ,' idx=16 'i% '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:',' idx=16 'i% '
        (check_literal)   ',' != 'i'
        (check_literal) check_literal: ret0
       (check_operator) ret0:is comma: 0

       (check_function) check_function: 'i% '
       (check_function) check_function: ret0

       (check_atom) check_atom:

        (check_literal) check_literal:lit=' %' idx=16 'i% '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'%' idx=16 'i% '
        (check_literal)   '%' != 'i'
        (check_literal) check_literal: ret0

        (check_literal) check_literal:lit=' "' idx=16 'i% '
        (check_literal) dropping space
        (check_literal) check_literal:After drop space:'"' idx=16 'i% '
        (check_literal)   '"' != 'i'
        (check_literal) check_literal: ret0

        (check_number) check_number:

         (check_float) check_float:
         (isfloatdigit) isfloatdigit:
         (check_float) check_float: ret0

         (check_integer) check_integer: 'i% '
         (check_integer) check_integer:ret0
        (check_number) check_number: ret0

        (check_variable) check_variable:

         (check_vname) check_vname 'i% ':
         (check_vname) check_vname ret1 '% ':
        (check_variable) check_variable: '% '
        (check_variable) check_variable: Ary test ' '

         (check_literal) check_literal:lit='(' idx=18 ' '
         (check_literal) check_literal:After drop space:'(' idx=18 ' '
         (check_literal)   '(' != ' '
         (check_literal) check_literal: ret0
        (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
       (check_variable) check_variable:ret1 
      (check_atom) check_atom:ret1

      (scan_atom) scan_atom:

       (check_literal) check_literal:lit=' %' idx=16 'i% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=16 'i% '
       (check_literal)   '%' != 'i'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=16 'i% '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=16 'i% '
       (check_literal)   '"' != 'i'
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: 'i% '
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname 'i% ':
        (check_vname) check_vname ret1 '% ':
       (check_variable) check_variable: '% '
       (check_variable) check_variable: Ary test ' '

        (check_literal) check_literal:lit='(' idx=18 ' '
        (check_literal) check_literal:After drop space:'(' idx=18 ' '
        (check_literal)   '(' != ' '
        (check_literal) check_literal: ret0
       (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
      (check_variable) check_variable:ret1 

      (scan_variable) scan_variable:

       (scan_vname) scan_vname: 'i% '
       (scan_vname) scan_vname: ret1 'i'
      (scan_variable) scan_variable: '% ' vname='i'
      (scan_variable) scan_variable: Ary test ' '

       (check_literal) check_literal:lit='(' idx=18 ' '
       (check_literal) check_literal:After drop space:'(' idx=18 ' '
       (check_literal)   '(' != ' '
       (check_literal) check_literal: ret0
      (scan_variable) scan_variable:ret1 vname='i%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'i%' exptype:i
     (operator_precedence) 
- is operator
     (token_is_function) 
token_is_function:
     (token_is_function) 
token_is_function:i% is not function
token_is_variable: tok:'i%'
     (token_is_function) 
token_is_function:
     (token_is_function) 
token_is_function:i% is not function
     (init_get_name) 
init_get_name:'i%'
     (init_get_name) 
init_get_name:'i%'
     (get_name) 
get_name:gn:'i%'
process_token:type:i req_type:i
modify_expression_type:Inittype:i Intype:i Outtype:i
( output_variable) [i,(U )] i i i%
     (print_var_info) 
VAR INFO: '                i%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
     (scan_atom) scan_atom:ret1
    (scan_expression) n commas now:1

     (check_eitem) check_eitem: ' '

      (check_operator) check_operator:  

       (check_literal) check_literal:lit=' ,' idx=19 ''
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=19 ''
       (check_literal) check_literal  ret0 Empty test string
      (check_operator) ret0:is comma: 0

      (check_function) check_function: ''
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=18 ' '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=19 ''
       (check_literal) check_literal  ret0 Empty test string

       (check_literal) check_literal:lit=' "' idx=18 ' '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=19 ''
       (check_literal) check_literal  ret0 Empty test string

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: ''
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname '':
        (check_vname) check_vname ret0 '':
       (check_variable) check_variable:ret0 
      (check_atom) check_atom:ret1

      (check_sub_expr) check_sub_expr:

       (check_literal) check_literal:lit=' (' idx=18 ' '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'(' idx=19 ''
       (check_literal) check_literal  ret0 Empty test string
      (check_sub_expr) check_sub_expr: ret0
     (check_eitem) check_eitem:ret0
    (scan_expression) scan_expression: ret1 ' ' commas:1
   (scan_command) scan_command: ret1 =>'BEEP'
  (scan_command) 
ENDEXP
   Frst:0 T:')' exptype:i
  (operator_precedence) 
- is operator
  (process_token) 
Pop 3
Pop '-'
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (2)

  (op_stack_print) 
000: BEEP type:17
  (op_stack_print) 
001: ( type:16
  (op_stack_print) 
------------------

( output_operator) [i,(U )] i i -
  (token_is_function) 
token_is_function:
  (token_is_function) 
token_is_function:- is not function
Pop 4
Pop '('
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (1)

  (op_stack_print) 
000: BEEP type:17
  (op_stack_print) 
------------------

(  output_sub_end)
  (token_is_function) 
token_is_function:
  (token_is_function) BEEP is function
Pop 5
Pop 'BEEP'
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (0)

  (op_stack_print) 
------------------

( output_function) [i,(U )] v v BEEP
(  output_sub_end)
Finalise stack
  (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '10' nidx:11  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? '' nidx:-1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '100' nidx:15  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'i%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '-' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'BEEP' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
 BE:

Type Check Stack (0)

 BE:10
type_check_stack_push: '10'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (1)

  (type_check_stack_print) 
000: '10' type:0
  (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '10' type:i (0)
 BE:

Type Check Stack (1)

000: '10' type:i (0)
 BE:100
type_check_stack_push: '100'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (2)

  (type_check_stack_print) 
000: '10' type:0
  (type_check_stack_print) 
001: '100' type:0
  (type_check_stack_print) 
------------------


Type Check Stack (2)

000: '10' type:i (0)
001: '100' type:i (0)
 BE:i%
type_check_stack_push: 'i%'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (3)

  (type_check_stack_print) 
000: '10' type:0
  (type_check_stack_print) 
001: '100' type:0
  (type_check_stack_print) 
002: 'i%' type:0
  (type_check_stack_print) 
------------------


Type Check Stack (3)

000: '10' type:i (0)
001: '100' type:i (0)
002: 'i%' type:i (0)
 BE:-
BUFF_ID_OPERATOR
Found operator -
type_check_stack_pop: 'i%'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (2)

  (type_check_stack_print) 
000: '10' type:0
  (type_check_stack_print) 
001: '100' type:0
  (type_check_stack_print) 
------------------

type_check_stack_pop: '100'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (1)

  (type_check_stack_print) 
000: '10' type:0
  (type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (2)

  (type_check_stack_print) 
000: '10' type:0
  (type_check_stack_print) 
001: '000' type:0
  (type_check_stack_print) 
------------------


Type Check Stack (2)

000: '10' type:i (0)
001: '000' type:i (0)
 BE:

Type Check Stack (2)

000: '10' type:i (0)
001: '000' type:i (0)
 BE:BEEP
FN: 2 args
  (function_return_type) 
function_return_type: 'BEEP' =>v
  (function_return_type) 
function_return_type: 'BEEP' =>17
ret_type;17 v
typecheck_expression:Ret type of BEEP : v
type_check_stack_pop: '000'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (1)

  (type_check_stack_print) 
000: '10' type:0
  (type_check_stack_print) 
------------------

FN ARG 1 ri 000 0(i)  Arg ok
type_check_stack_pop: '10'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (0)

  (type_check_stack_print) 
------------------

FN ARG 0 ri 10 0(i)  Arg ok
type_check_stack_push: '000'
  (type_check_stack_print) 
------------------
  (type_check_stack_print) 
Type Check Stack     (1)

  (type_check_stack_print) 
000: '000' type:17
  (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '10' nidx:11  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? '' nidx:-1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '100' nidx:15  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'i%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '-' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'BEEP' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i '10'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_INTEGER      i rq:i '100'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_VARIABLE     i rq:i 'i%'  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_OPERATOR     i rq:i '-'  2: 5 4
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_FUNCTION     v rq:v 'BEEP'  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
  (process_expression_types) 
==INFIX==

infix_stack_push: '10'
infix_stack_push: '100'
Var: i% ary:0 NumIdx:0
infix_stack_push: 'i%'
infix_stack_pop: 'i%'
infix_stack_pop: '100'
infix_stack_push: '(100 - i%)'
infix_stack_pop: '(100 - i%)'
infix_stack_pop: '10'
infix_stack_push: 'BEEP(10 (100 - i%) )'
infix_stack_pop: 'BEEP(10 (100 - i%) )'
  (process_expression_types) ==BEEP(10 (100 - i%) )==
  (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_INTEGER      i rq:i 10  0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_START    U rq:?   0:
(    output_qcode) N4 EXP_BUFF_ID_INTEGER      i rq:i 100  0:
(    output_qcode) N5 EXP_BUFF_ID_VARIABLE     i rq:i i%  0:
(    output_qcode) N6 EXP_BUFF_ID_OPERATOR     i rq:i -  2: 5 4
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N8 EXP_BUFF_ID_FUNCTION     v rq:v BEEP  0:
(    output_qcode) N9 EXP_BUFF_ID_SUB_END      U rq:i   0:

   (check_literal) check_literal:lit=':' idx=19 ''
   (check_literal) check_literal:After drop space:':' idx=19 ''
   (check_literal) check_literal  ret0 Empty test string
  (translate_file) 
cline scanned OK
*******************
**   UNTIL i%=30 **
*******************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'UNTIL i%=30 ':
     (check_vname) check_vname ret1 ' i%=30 ':
    (check_variable) check_variable: ' i%=30 '
    (check_variable) check_variable: Ary test ' i%=30 '

     (check_literal) check_literal:lit='(' idx=8 ' i%=30 '
     (check_literal) check_literal:After drop space:'(' idx=8 ' i%=30 '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=8 ' i%=30 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=9 'i%=30 '
   (check_literal)   '=' != 'i'
   (check_literal) check_literal: ret0
  (check_assignment) check_assignment:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) check_textlabel: 'UNTIL i%=30 '
   (check_textlabel) check_textlabel:ret0
  (check_proc_call) check_proc_call:ret0

  (check_command) check_command:
  (check_command) check_command: ret0

  (check_function) check_function: 'UNTIL i%=30 '
  (check_function) check_function: ret0

  (check_literal) check_literal:lit=' IF' idx=0 '   UNTIL i%=30 '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'IF' idx=3 'UNTIL i%=30 '
  (check_literal)   'I' != 'U'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' ELSEIF' idx=0 '   UNTIL i%=30 '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'ELSEIF' idx=3 'UNTIL i%=30 '
  (check_literal)   'E' != 'U'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' ELSE' idx=0 '   UNTIL i%=30 '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'ELSE' idx=3 'UNTIL i%=30 '
  (check_literal)   'E' != 'U'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' ENDIF' idx=0 '   UNTIL i%=30 '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'ENDIF' idx=3 'UNTIL i%=30 '
  (check_literal)   'E' != 'U'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' DO' idx=0 '   UNTIL i%=30 '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'DO' idx=3 'UNTIL i%=30 '
  (check_literal)   'D' != 'U'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' WHILE' idx=0 '   UNTIL i%=30 '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'WHILE' idx=3 'UNTIL i%=30 '
  (check_literal)   'W' != 'U'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' ENDWH' idx=0 '   UNTIL i%=30 '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'ENDWH' idx=3 'UNTIL i%=30 '
  (check_literal)   'E' != 'U'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' REPEAT' idx=0 '   UNTIL i%=30 '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'REPEAT' idx=3 'UNTIL i%=30 '
  (check_literal)   'R' != 'U'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' UNTIL' idx=0 '   UNTIL i%=30 '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'UNTIL' idx=3 'UNTIL i%=30 '
  (check_literal) check_literal:After while(): i%=30 
  (check_literal) check_literal:ret1 

  (check_expression) check_expression: 'i%=30 '

   (check_eitem) check_eitem: 'i%=30 '

    (check_operator) check_operator: i%=30 

     (check_literal) check_literal:lit=' ,' idx=9 'i%=30 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=9 'i%=30 '
     (check_literal)   ',' != 'i'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'i%=30 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=9 'i%=30 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=9 'i%=30 '
     (check_literal)   '%' != 'i'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=9 'i%=30 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=9 'i%=30 '
     (check_literal)   '"' != 'i'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'i%=30 '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'i%=30 ':
      (check_vname) check_vname ret1 '%=30 ':
     (check_variable) check_variable: '%=30 '
     (check_variable) check_variable: Ary test '=30 '

      (check_literal) check_literal:lit='(' idx=11 '=30 '
      (check_literal) check_literal:After drop space:'(' idx=11 '=30 '
      (check_literal)   '(' != '='
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (check_eitem) check_eitem: '=30 '

   (check_operator) check_operator: =30 

    (check_literal) check_literal:lit=' ,' idx=11 '=30 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=11 '=30 '
    (check_literal)   ',' != '='
    (check_literal) check_literal: ret0
   (check_operator) ret1:is comma: 0
  (check_eitem) check_eitem:ret1 comma:1

  (check_eitem) check_eitem: '30 '

   (check_operator) check_operator: 30 

    (check_literal) check_literal:lit=' ,' idx=12 '30 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=12 '30 '
    (check_literal)   ',' != '3'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: '30 '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=12 '30 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=12 '30 '
    (check_literal)   '%' != '3'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=12 '30 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=12 '30 '
    (check_literal)   '"' != '3'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '30 '
     (check_integer) check_integer:ret1
    (check_number) check_number: ret1
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (check_eitem) check_eitem: ' '

   (check_operator) check_operator:  

    (check_literal) check_literal:lit=' ,' idx=15 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=15 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_operator) ret0:is comma: 0

   (check_function) check_function: ''
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=14 ' '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=15 ''
    (check_literal) check_literal  ret0 Empty test string

    (check_literal) check_literal:lit=' "' idx=14 ' '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=15 ''
    (check_literal) check_literal  ret0 Empty test string

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: ''
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname '':
     (check_vname) check_vname ret0 '':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret1

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=14 ' '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=15 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_sub_expr) check_sub_expr: ret0
  (check_eitem) check_eitem:ret0
 (check_expression) check_expression:ret1 ' '
(check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=1, ' '
========================================================
   UNTIL i%=30 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'UNTIL i%=30 ':
    (check_vname) check_vname ret1 ' i%=30 ':
   (check_variable) check_variable: ' i%=30 '
   (check_variable) check_variable: Ary test ' i%=30 '

    (check_literal) check_literal:lit='(' idx=8 ' i%=30 '
    (check_literal) check_literal:After drop space:'(' idx=8 ' i%=30 '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=8 ' i%=30 '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=9 'i%=30 '
  (check_literal)   '=' != 'i'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'UNTIL i%=30 '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret0

 (check_function) check_function: 'UNTIL i%=30 '
 (check_function) check_function: ret0

 (check_literal) check_literal:lit=' IF' idx=3 'UNTIL i%=30 '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'IF' idx=3 'UNTIL i%=30 '
 (check_literal)   'I' != 'U'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' ELSEIF' idx=3 'UNTIL i%=30 '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'ELSEIF' idx=3 'UNTIL i%=30 '
 (check_literal)   'E' != 'U'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' ELSE' idx=3 'UNTIL i%=30 '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'ELSE' idx=3 'UNTIL i%=30 '
 (check_literal)   'E' != 'U'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' ENDIF' idx=3 'UNTIL i%=30 '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'ENDIF' idx=3 'UNTIL i%=30 '
 (check_literal)   'E' != 'U'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' DO' idx=3 'UNTIL i%=30 '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'DO' idx=3 'UNTIL i%=30 '
 (check_literal)   'D' != 'U'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' WHILE' idx=3 'UNTIL i%=30 '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'WHILE' idx=3 'UNTIL i%=30 '
 (check_literal)   'W' != 'U'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' ENDWH' idx=3 'UNTIL i%=30 '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'ENDWH' idx=3 'UNTIL i%=30 '
 (check_literal)   'E' != 'U'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' REPEAT' idx=3 'UNTIL i%=30 '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'REPEAT' idx=3 'UNTIL i%=30 '
 (check_literal)   'R' != 'U'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' UNTIL' idx=3 'UNTIL i%=30 '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'UNTIL' idx=3 'UNTIL i%=30 '
 (check_literal) check_literal:After while(): i%=30 
 (check_literal) check_literal:ret1 

 (scan_literal) scan_literal:lit=' UNTIL' 'UNTIL i%=30 '
 (scan_literal) scan_literal:After drop space:'UNTIL i%=30 '
 (scan_literal) scan_literal:while loop:UNTIL i%=30 
 (scan_literal) scan_literal:while loop:NTIL i%=30 
 (scan_literal) scan_literal:while loop:TIL i%=30 
 (scan_literal) scan_literal:while loop:IL i%=30 
 (scan_literal) scan_literal:while loop:L i%=30 
   Frst:1 T:'UNTIL' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:UNTIL is not function
token_is_variable: tok:'UNTIL'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:UNTIL is not function
 (init_get_name) 
init_get_name:'UNTIL'
 (init_get_name) 
init_get_name:'UNTIL'
 (get_name) 
get_name:gn:'UNTIL'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] f f UNTIL
 (scan_literal) scan_literal:ret1

 (scan_expression) scan_expression: ' i%=30 '

  (check_eitem) check_eitem: 'i%=30 '

   (check_operator) check_operator: i%=30 

    (check_literal) check_literal:lit=' ,' idx=9 'i%=30 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=9 'i%=30 '
    (check_literal)   ',' != 'i'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'i%=30 '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=9 'i%=30 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=9 'i%=30 '
    (check_literal)   '%' != 'i'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=9 'i%=30 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=9 'i%=30 '
    (check_literal)   '"' != 'i'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'i%=30 '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'i%=30 ':
     (check_vname) check_vname ret1 '%=30 ':
    (check_variable) check_variable: '%=30 '
    (check_variable) check_variable: Ary test '=30 '

     (check_literal) check_literal:lit='(' idx=11 '=30 '
     (check_literal) check_literal:After drop space:'(' idx=11 '=30 '
     (check_literal)   '(' != '='
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1
 (check_eitem) check_eitem:ret1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: i%=30 

   (check_literal) check_literal:lit=' ,' idx=9 'i%=30 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=9 'i%=30 '
   (check_literal)   ',' != 'i'
   (check_literal) check_literal: ret0
  (check_operator) ret0:is comma: 0

  (check_function) check_function: 'i%=30 '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=9 'i%=30 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=9 'i%=30 '
   (check_literal)   '%' != 'i'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=9 'i%=30 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=9 'i%=30 '
   (check_literal)   '"' != 'i'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'i%=30 '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'i%=30 ':
    (check_vname) check_vname ret1 '%=30 ':
   (check_variable) check_variable: '%=30 '
   (check_variable) check_variable: Ary test '=30 '

    (check_literal) check_literal:lit='(' idx=11 '=30 '
    (check_literal) check_literal:After drop space:'(' idx=11 '=30 '
    (check_literal)   '(' != '='
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) check_atom:ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=9 'i%=30 '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=9 'i%=30 '
  (check_literal)   '%' != 'i'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=9 'i%=30 '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=9 'i%=30 '
  (check_literal)   '"' != 'i'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) check_float: ret0

   (check_integer) check_integer: 'i%=30 '
   (check_integer) check_integer:ret0
  (check_number) check_number: ret0

  (check_variable) check_variable:

   (check_vname) check_vname 'i%=30 ':
   (check_vname) check_vname ret1 '%=30 ':
  (check_variable) check_variable: '%=30 '
  (check_variable) check_variable: Ary test '=30 '

   (check_literal) check_literal:lit='(' idx=11 '=30 '
   (check_literal) check_literal:After drop space:'(' idx=11 '=30 '
   (check_literal)   '(' != '='
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) scan_variable:

  (scan_vname) scan_vname: 'i%=30 '
  (scan_vname) scan_vname: ret1 'i'
 (scan_variable) scan_variable: '%=30 ' vname='i'
 (scan_variable) scan_variable: Ary test '=30 '

  (check_literal) check_literal:lit='(' idx=11 '=30 '
  (check_literal) check_literal:After drop space:'(' idx=11 '=30 '
  (check_literal)   '(' != '='
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='i%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'i%' exptype:i
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:i% is not function
token_is_variable: tok:'i%'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:i% is not function
(init_get_name) 
init_get_name:'i%'
(init_get_name) 
init_get_name:'i%'
(get_name) 
get_name:gn:'i%'
process_token:type:i req_type:i
modify_expression_type:Inittype:i Intype:i Outtype:i
( output_variable) [i,()] i i i%
(print_var_info) 
VAR INFO: '                i%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
(scan_atom) scan_atom:ret1
(scan_expression) n commas now:0

 (check_eitem) check_eitem: '=30 '

  (check_operator) check_operator: =30 

   (check_literal) check_literal:lit=' ,' idx=11 '=30 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=11 '=30 '
   (check_literal)   ',' != '='
   (check_literal) check_literal: ret0
  (check_operator) ret1:is comma: 0
 (check_eitem) check_eitem:ret1 comma:1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: =30 

   (check_literal) check_literal:lit=' ,' idx=11 '=30 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=11 '=30 '
   (check_literal)   ',' != '='
   (check_literal) check_literal: ret0
  (check_operator) ret1:is comma: 0

  (scan_operator) scan_operator: '=30 '

   (check_literal) check_literal:lit=' ,' idx=11 '=30 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=11 '=30 '
   (check_literal)   ',' != '='
   (check_literal) check_literal: ret0
  (scan_operator) scan_operator: ret1 '30 '
   Frst:0 T:'=' exptype:i
 (operator_precedence) 
= is operator
'=' is operator
 (process_token) 
Token is operator o1 name:= o2 name:
 (process_token) 
opr1:1 opr2:0
Push 1
 Push:'='
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: = type:0
 (op_stack_print) 
------------------

 (scan_eitem) Is comma;0
 (scan_expression) n commas now:0

  (check_eitem) check_eitem: '30 '

   (check_operator) check_operator: 30 

    (check_literal) check_literal:lit=' ,' idx=12 '30 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=12 '30 '
    (check_literal)   ',' != '3'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: '30 '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=12 '30 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=12 '30 '
    (check_literal)   '%' != '3'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=12 '30 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=12 '30 '
    (check_literal)   '"' != '3'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '30 '
     (check_integer) check_integer:ret1
    (check_number) check_number: ret1
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator: 30 

    (check_literal) check_literal:lit=' ,' idx=12 '30 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=12 '30 '
    (check_literal)   ',' != '3'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: '30 '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=12 '30 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=12 '30 '
    (check_literal)   '%' != '3'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=12 '30 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=12 '30 '
    (check_literal)   '"' != '3'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '30 '
     (check_integer) check_integer:ret1
    (check_number) check_number: ret1
   (check_atom) check_atom:ret1

   (scan_atom) scan_atom:

    (check_literal) check_literal:lit=' %' idx=12 '30 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=12 '30 '
    (check_literal)   '%' != '3'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=12 '30 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=12 '30 '
    (check_literal)   '"' != '3'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '30 '
     (check_integer) check_integer:ret1
    (check_number) check_number: ret1

    (scan_number) scan_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '30 '
     (check_integer) check_integer:ret1

     (scan_integer) scan_integer:
     (scan_integer) scan_integer:ret1
   Frst:0 T:'30' exptype:i
    (operator_precedence) 
= is operator
modify_expression_type:Inittype:i Intype:i Outtype:i
(  output_integer) [i,()] i i 30
    (scan_integer) scan_integer:ret1  30
   (scan_atom) scan_atom:ret1
  (scan_expression) n commas now:0

   (check_eitem) check_eitem: ' '

    (check_operator) check_operator:  

     (check_literal) check_literal:lit=' ,' idx=15 ''
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=15 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_operator) ret0:is comma: 0

    (check_function) check_function: ''
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=14 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=15 ''
     (check_literal) check_literal  ret0 Empty test string

     (check_literal) check_literal:lit=' "' idx=14 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=15 ''
     (check_literal) check_literal  ret0 Empty test string

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: ''
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname '':
      (check_vname) check_vname ret0 '':
     (check_variable) check_variable:ret0 
    (check_atom) check_atom:ret1

    (check_sub_expr) check_sub_expr:

     (check_literal) check_literal:lit=' (' idx=14 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'(' idx=15 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_sub_expr) check_sub_expr: ret0
   (check_eitem) check_eitem:ret0
  (scan_expression) scan_expression: ret1 ' ' commas:0
 (scan_line) scan_line: ret1
Finalise stack
Pop '='
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_operator) [i,()] i i =
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:= is not function
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'UNTIL' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'i%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '30' nidx:14  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '=' nidx:32766  0:
=================
 BE:UNTIL
type_check_stack_push: 'UNTIL'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'UNTIL' type:1
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'UNTIL' type:f (1)
 BE:i%
type_check_stack_push: 'i%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'UNTIL' type:1
(type_check_stack_print) 
001: 'i%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'UNTIL' type:f (1)
001: 'i%' type:i (0)
 BE:30
type_check_stack_push: '30'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (3)

(type_check_stack_print) 
000: 'UNTIL' type:1
(type_check_stack_print) 
001: 'i%' type:0
(type_check_stack_print) 
002: '30' type:0
(type_check_stack_print) 
------------------


Type Check Stack (3)

000: 'UNTIL' type:f (1)
001: 'i%' type:i (0)
002: '30' type:i (0)
 BE::=
BUFF_ID_OPERATOR
Found operator :=
type_check_stack_pop: '30'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'UNTIL' type:1
(type_check_stack_print) 
001: 'i%' type:0
(type_check_stack_print) 
------------------

type_check_stack_pop: 'i%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'UNTIL' type:1
(type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'UNTIL' type:1
(type_check_stack_print) 
001: '000' type:0
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'UNTIL' type:f (1)
001: '000' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'UNTIL' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'i%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '30' nidx:14  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i ':=' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f 'UNTIL'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'i%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_INTEGER      i rq:i '30'  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_OPERATOR     i rq:i ':='  2: 3 2
=================
(process_expression_types) 
==INFIX==

Var: UNTIL ary:3 NumIdx:0
infix_stack_push: 'UNTIL()'
Var: i% ary:0 NumIdx:0
infix_stack_push: 'i%'
infix_stack_push: '30'
infix_stack_pop: '30'
infix_stack_pop: 'i%'
infix_stack_push: '(i% := 30)'
infix_stack_pop: '(i% := 30)'
(process_expression_types) ==(i% := 30)==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     f rq:f UNTIL  0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     i rq:i i%  0:
(    output_qcode) N3 EXP_BUFF_ID_INTEGER      i rq:i 30  0:
(    output_qcode) N4 EXP_BUFF_ID_OPERATOR     i rq:i :=  2: 3 2

 (check_literal) check_literal:lit=':' idx=15 ''
 (check_literal) check_literal:After drop space:':' idx=15 ''
 (check_literal) check_literal  ret0 Empty test string
(translate_file) 
cline scanned OK
*******************************
**   b%=b%+5 :a%=20 :x%=x%+2 **
*******************************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'b%=b%+5 :a%=20 :x%=x%+2 ':
     (check_vname) check_vname ret1 '%=b%+5 :a%=20 :x%=x%+2 ':
    (check_variable) check_variable: '%=b%+5 :a%=20 :x%=x%+2 '
    (check_variable) check_variable: Ary test '=b%+5 :a%=20 :x%=x%+2 '

     (check_literal) check_literal:lit='(' idx=5 '=b%+5 :a%=20 :x%=x%+2 '
     (check_literal) check_literal:After drop space:'(' idx=5 '=b%+5 :a%=20 :x%=x%+2 '
     (check_literal)   '(' != '='
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=5 '=b%+5 :a%=20 :x%=x%+2 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=5 '=b%+5 :a%=20 :x%=x%+2 '
   (check_literal) check_literal:After while():b%+5 :a%=20 :x%=x%+2 
   (check_literal) check_literal:ret1 

   (check_expression) check_expression: 'b%+5 :a%=20 :x%=x%+2 '

    (check_eitem) check_eitem: 'b%+5 :a%=20 :x%=x%+2 '

     (check_operator) check_operator: b%+5 :a%=20 :x%=x%+2 

      (check_literal) check_literal:lit=' ,' idx=6 'b%+5 :a%=20 :x%=x%+2 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=6 'b%+5 :a%=20 :x%=x%+2 '
      (check_literal)   ',' != 'b'
      (check_literal) check_literal: ret0
     (check_operator) ret0:is comma: 0

     (check_function) check_function: 'b%+5 :a%=20 :x%=x%+2 '
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=6 'b%+5 :a%=20 :x%=x%+2 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=6 'b%+5 :a%=20 :x%=x%+2 '
      (check_literal)   '%' != 'b'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=6 'b%+5 :a%=20 :x%=x%+2 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=6 'b%+5 :a%=20 :x%=x%+2 '
      (check_literal)   '"' != 'b'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: 'b%+5 :a%=20 :x%=x%+2 '
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname 'b%+5 :a%=20 :x%=x%+2 ':
       (check_vname) check_vname ret1 '%+5 :a%=20 :x%=x%+2 ':
      (check_variable) check_variable: '%+5 :a%=20 :x%=x%+2 '
      (check_variable) check_variable: Ary test '+5 :a%=20 :x%=x%+2 '

       (check_literal) check_literal:lit='(' idx=8 '+5 :a%=20 :x%=x%+2 '
       (check_literal) check_literal:After drop space:'(' idx=8 '+5 :a%=20 :x%=x%+2 '
       (check_literal)   '(' != '+'
       (check_literal) check_literal: ret0
      (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
     (check_variable) check_variable:ret1 
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: '+5 :a%=20 :x%=x%+2 '

    (check_operator) check_operator: +5 :a%=20 :x%=x%+2 

     (check_literal) check_literal:lit=' ,' idx=8 '+5 :a%=20 :x%=x%+2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=8 '+5 :a%=20 :x%=x%+2 '
     (check_literal)   ',' != '+'
     (check_literal) check_literal: ret0
    (check_operator) ret1:is comma: 0
   (check_eitem) check_eitem:ret1 comma:1

   (check_eitem) check_eitem: '5 :a%=20 :x%=x%+2 '

    (check_operator) check_operator: 5 :a%=20 :x%=x%+2 

     (check_literal) check_literal:lit=' ,' idx=9 '5 :a%=20 :x%=x%+2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=9 '5 :a%=20 :x%=x%+2 '
     (check_literal)   ',' != '5'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: '5 :a%=20 :x%=x%+2 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=9 '5 :a%=20 :x%=x%+2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=9 '5 :a%=20 :x%=x%+2 '
     (check_literal)   '%' != '5'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=9 '5 :a%=20 :x%=x%+2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=9 '5 :a%=20 :x%=x%+2 '
     (check_literal)   '"' != '5'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '5 :a%=20 :x%=x%+2 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: ' :a%=20 :x%=x%+2 '

    (check_operator) check_operator:  :a%=20 :x%=x%+2 

     (check_literal) check_literal:lit=' ,' idx=11 ':a%=20 :x%=x%+2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=11 ':a%=20 :x%=x%+2 '
     (check_literal)   ',' != ':'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: ':a%=20 :x%=x%+2 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=10 ' :a%=20 :x%=x%+2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=11 ':a%=20 :x%=x%+2 '
     (check_literal)   '%' != ':'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=10 ' :a%=20 :x%=x%+2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=11 ':a%=20 :x%=x%+2 '
     (check_literal)   '"' != ':'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: ':a%=20 :x%=x%+2 '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname ':a%=20 :x%=x%+2 ':
      (check_vname) check_vname ret0 ':a%=20 :x%=x%+2 ':
     (check_variable) check_variable:ret0 
    (check_atom) check_atom:ret1

    (check_sub_expr) check_sub_expr:

     (check_literal) check_literal:lit=' (' idx=10 ' :a%=20 :x%=x%+2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'(' idx=11 ':a%=20 :x%=x%+2 '
     (check_literal)   '(' != ':'
     (check_literal) check_literal: ret0
    (check_sub_expr) check_sub_expr: ret0
   (check_eitem) check_eitem:ret0
  (check_expression) check_expression:ret1 ' :a%=20 :x%=x%+2 '
 (check_assignment) check_assignment:ret1
(check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=17, ' :a%=20 :x%=x%+2 '
========================================================
   b%=b%+5 :a%=20 :x%=x%+2 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'b%=b%+5 :a%=20 :x%=x%+2 ':
    (check_vname) check_vname ret1 '%=b%+5 :a%=20 :x%=x%+2 ':
   (check_variable) check_variable: '%=b%+5 :a%=20 :x%=x%+2 '
   (check_variable) check_variable: Ary test '=b%+5 :a%=20 :x%=x%+2 '

    (check_literal) check_literal:lit='(' idx=5 '=b%+5 :a%=20 :x%=x%+2 '
    (check_literal) check_literal:After drop space:'(' idx=5 '=b%+5 :a%=20 :x%=x%+2 '
    (check_literal)   '(' != '='
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=5 '=b%+5 :a%=20 :x%=x%+2 '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=5 '=b%+5 :a%=20 :x%=x%+2 '
  (check_literal) check_literal:After while():b%+5 :a%=20 :x%=x%+2 
  (check_literal) check_literal:ret1 

  (check_expression) check_expression: 'b%+5 :a%=20 :x%=x%+2 '

   (check_eitem) check_eitem: 'b%+5 :a%=20 :x%=x%+2 '

    (check_operator) check_operator: b%+5 :a%=20 :x%=x%+2 

     (check_literal) check_literal:lit=' ,' idx=6 'b%+5 :a%=20 :x%=x%+2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=6 'b%+5 :a%=20 :x%=x%+2 '
     (check_literal)   ',' != 'b'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'b%+5 :a%=20 :x%=x%+2 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=6 'b%+5 :a%=20 :x%=x%+2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=6 'b%+5 :a%=20 :x%=x%+2 '
     (check_literal)   '%' != 'b'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=6 'b%+5 :a%=20 :x%=x%+2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=6 'b%+5 :a%=20 :x%=x%+2 '
     (check_literal)   '"' != 'b'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'b%+5 :a%=20 :x%=x%+2 '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'b%+5 :a%=20 :x%=x%+2 ':
      (check_vname) check_vname ret1 '%+5 :a%=20 :x%=x%+2 ':
     (check_variable) check_variable: '%+5 :a%=20 :x%=x%+2 '
     (check_variable) check_variable: Ary test '+5 :a%=20 :x%=x%+2 '

      (check_literal) check_literal:lit='(' idx=8 '+5 :a%=20 :x%=x%+2 '
      (check_literal) check_literal:After drop space:'(' idx=8 '+5 :a%=20 :x%=x%+2 '
      (check_literal)   '(' != '+'
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (check_eitem) check_eitem: '+5 :a%=20 :x%=x%+2 '

   (check_operator) check_operator: +5 :a%=20 :x%=x%+2 

    (check_literal) check_literal:lit=' ,' idx=8 '+5 :a%=20 :x%=x%+2 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=8 '+5 :a%=20 :x%=x%+2 '
    (check_literal)   ',' != '+'
    (check_literal) check_literal: ret0
   (check_operator) ret1:is comma: 0
  (check_eitem) check_eitem:ret1 comma:1

  (check_eitem) check_eitem: '5 :a%=20 :x%=x%+2 '

   (check_operator) check_operator: 5 :a%=20 :x%=x%+2 

    (check_literal) check_literal:lit=' ,' idx=9 '5 :a%=20 :x%=x%+2 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=9 '5 :a%=20 :x%=x%+2 '
    (check_literal)   ',' != '5'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: '5 :a%=20 :x%=x%+2 '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=9 '5 :a%=20 :x%=x%+2 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=9 '5 :a%=20 :x%=x%+2 '
    (check_literal)   '%' != '5'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=9 '5 :a%=20 :x%=x%+2 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=9 '5 :a%=20 :x%=x%+2 '
    (check_literal)   '"' != '5'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '5 :a%=20 :x%=x%+2 '
     (check_integer) check_integer:ret1
    (check_number) check_number: ret1
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (check_eitem) check_eitem: ' :a%=20 :x%=x%+2 '

   (check_operator) check_operator:  :a%=20 :x%=x%+2 

    (check_literal) check_literal:lit=' ,' idx=11 ':a%=20 :x%=x%+2 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=11 ':a%=20 :x%=x%+2 '
    (check_literal)   ',' != ':'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: ':a%=20 :x%=x%+2 '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=10 ' :a%=20 :x%=x%+2 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=11 ':a%=20 :x%=x%+2 '
    (check_literal)   '%' != ':'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=10 ' :a%=20 :x%=x%+2 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=11 ':a%=20 :x%=x%+2 '
    (check_literal)   '"' != ':'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: ':a%=20 :x%=x%+2 '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname ':a%=20 :x%=x%+2 ':
     (check_vname) check_vname ret0 ':a%=20 :x%=x%+2 ':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret1

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=10 ' :a%=20 :x%=x%+2 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=11 ':a%=20 :x%=x%+2 '
    (check_literal)   '(' != ':'
    (check_literal) check_literal: ret0
   (check_sub_expr) check_sub_expr: ret0
  (check_eitem) check_eitem:ret0
 (check_expression) check_expression:ret1 ' :a%=20 :x%=x%+2 '
(check_assignment) check_assignment:ret1

 (scan_assignment) scan_assignment:

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'b%=b%+5 :a%=20 :x%=x%+2 '
   (scan_vname) scan_vname: ret1 'b'
  (scan_variable) scan_variable: '%=b%+5 :a%=20 :x%=x%+2 ' vname='b'
  (scan_variable) scan_variable: Ary test '=b%+5 :a%=20 :x%=x%+2 '

   (check_literal) check_literal:lit='(' idx=5 '=b%+5 :a%=20 :x%=x%+2 '
   (check_literal) check_literal:After drop space:'(' idx=5 '=b%+5 :a%=20 :x%=x%+2 '
   (check_literal)   '(' != '='
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='b%' is str:0 int:1 flt:0 ary:0
   Frst:1 T:'b%' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:b% is not function
token_is_variable: tok:'b%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:b% is not function
 (init_get_name) 
init_get_name:'b%'
 (init_get_name) 
init_get_name:'b%'
 (get_name) 
get_name:gn:'b%'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] i i b%
 (print_var_info) 
VAR INFO: '                b%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0

  (scan_assignment_equals) scan_assignment_equals:lit=' =' '=b%+5 :a%=20 :x%=x%+2 '
  (scan_assignment_equals) scan_assignment_equals:After drop space:'=b%+5 :a%=20 :x%=x%+2 '
  (scan_assignment_equals) scan_assignment_equals:while loop:=b%+5 :a%=20 :x%=x%+2 
   Frst:0 T:':=' exptype:i
  (operator_precedence) 
:= is operator
':=' is operator
  (process_token) 
Token is operator o1 name::= o2 name:
  (process_token) 
opr1:1 opr2:0
Push 1
 Push:':='
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (1)

  (op_stack_print) 
000: := type:0
  (op_stack_print) 
------------------

  (scan_assignment_equals) scan_assignment_equals:ret1

  (scan_expression) scan_expression: 'b%+5 :a%=20 :x%=x%+2 '

   (check_eitem) check_eitem: 'b%+5 :a%=20 :x%=x%+2 '

    (check_operator) check_operator: b%+5 :a%=20 :x%=x%+2 

     (check_literal) check_literal:lit=' ,' idx=6 'b%+5 :a%=20 :x%=x%+2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=6 'b%+5 :a%=20 :x%=x%+2 '
     (check_literal)   ',' != 'b'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'b%+5 :a%=20 :x%=x%+2 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=6 'b%+5 :a%=20 :x%=x%+2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=6 'b%+5 :a%=20 :x%=x%+2 '
     (check_literal)   '%' != 'b'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=6 'b%+5 :a%=20 :x%=x%+2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=6 'b%+5 :a%=20 :x%=x%+2 '
     (check_literal)   '"' != 'b'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'b%+5 :a%=20 :x%=x%+2 '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'b%+5 :a%=20 :x%=x%+2 ':
      (check_vname) check_vname ret1 '%+5 :a%=20 :x%=x%+2 ':
     (check_variable) check_variable: '%+5 :a%=20 :x%=x%+2 '
     (check_variable) check_variable: Ary test '+5 :a%=20 :x%=x%+2 '

      (check_literal) check_literal:lit='(' idx=8 '+5 :a%=20 :x%=x%+2 '
      (check_literal) check_literal:After drop space:'(' idx=8 '+5 :a%=20 :x%=x%+2 '
      (check_literal)   '(' != '+'
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator: b%+5 :a%=20 :x%=x%+2 

    (check_literal) check_literal:lit=' ,' idx=6 'b%+5 :a%=20 :x%=x%+2 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=6 'b%+5 :a%=20 :x%=x%+2 '
    (check_literal)   ',' != 'b'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'b%+5 :a%=20 :x%=x%+2 '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=6 'b%+5 :a%=20 :x%=x%+2 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=6 'b%+5 :a%=20 :x%=x%+2 '
    (check_literal)   '%' != 'b'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=6 'b%+5 :a%=20 :x%=x%+2 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=6 'b%+5 :a%=20 :x%=x%+2 '
    (check_literal)   '"' != 'b'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'b%+5 :a%=20 :x%=x%+2 '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'b%+5 :a%=20 :x%=x%+2 ':
     (check_vname) check_vname ret1 '%+5 :a%=20 :x%=x%+2 ':
    (check_variable) check_variable: '%+5 :a%=20 :x%=x%+2 '
    (check_variable) check_variable: Ary test '+5 :a%=20 :x%=x%+2 '

     (check_literal) check_literal:lit='(' idx=8 '+5 :a%=20 :x%=x%+2 '
     (check_literal) check_literal:After drop space:'(' idx=8 '+5 :a%=20 :x%=x%+2 '
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1

  (scan_atom) scan_atom:

   (check_literal) check_literal:lit=' %' idx=6 'b%+5 :a%=20 :x%=x%+2 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=6 'b%+5 :a%=20 :x%=x%+2 '
   (check_literal)   '%' != 'b'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=6 'b%+5 :a%=20 :x%=x%+2 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=6 'b%+5 :a%=20 :x%=x%+2 '
   (check_literal)   '"' != 'b'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'b%+5 :a%=20 :x%=x%+2 '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'b%+5 :a%=20 :x%=x%+2 ':
    (check_vname) check_vname ret1 '%+5 :a%=20 :x%=x%+2 ':
   (check_variable) check_variable: '%+5 :a%=20 :x%=x%+2 '
   (check_variable) check_variable: Ary test '+5 :a%=20 :x%=x%+2 '

    (check_literal) check_literal:lit='(' idx=8 '+5 :a%=20 :x%=x%+2 '
    (check_literal) check_literal:After drop space:'(' idx=8 '+5 :a%=20 :x%=x%+2 '
    (check_literal)   '(' != '+'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'b%+5 :a%=20 :x%=x%+2 '
   (scan_vname) scan_vname: ret1 'b'
  (scan_variable) scan_variable: '%+5 :a%=20 :x%=x%+2 ' vname='b'
  (scan_variable) scan_variable: Ary test '+5 :a%=20 :x%=x%+2 '

   (check_literal) check_literal:lit='(' idx=8 '+5 :a%=20 :x%=x%+2 '
   (check_literal) check_literal:After drop space:'(' idx=8 '+5 :a%=20 :x%=x%+2 '
   (check_literal)   '(' != '+'
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='b%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'b%' exptype:i
 (operator_precedence) 
:= is operator
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:b% is not function
token_is_variable: tok:'b%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:b% is not function
 (init_get_name) 
init_get_name:'b%'
 (init_get_name) 
init_get_name:'b%'
 (get_name) 
get_name:gn:'b%'
process_token:type:i req_type:i
modify_expression_type:Inittype:i Intype:i Outtype:i
( output_variable) [i,()] i i b%
 (print_var_info) 
VAR INFO: '                b%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
 (scan_atom) scan_atom:ret1
(scan_expression) n commas now:0

 (check_eitem) check_eitem: '+5 :a%=20 :x%=x%+2 '

  (check_operator) check_operator: +5 :a%=20 :x%=x%+2 

   (check_literal) check_literal:lit=' ,' idx=8 '+5 :a%=20 :x%=x%+2 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=8 '+5 :a%=20 :x%=x%+2 '
   (check_literal)   ',' != '+'
   (check_literal) check_literal: ret0
  (check_operator) ret1:is comma: 0
 (check_eitem) check_eitem:ret1 comma:1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: +5 :a%=20 :x%=x%+2 

   (check_literal) check_literal:lit=' ,' idx=8 '+5 :a%=20 :x%=x%+2 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=8 '+5 :a%=20 :x%=x%+2 '
   (check_literal)   ',' != '+'
   (check_literal) check_literal: ret0
  (check_operator) ret1:is comma: 0

  (scan_operator) scan_operator: '+5 :a%=20 :x%=x%+2 '

   (check_literal) check_literal:lit=' ,' idx=8 '+5 :a%=20 :x%=x%+2 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=8 '+5 :a%=20 :x%=x%+2 '
   (check_literal)   ',' != '+'
   (check_literal) check_literal: ret0
  (scan_operator) scan_operator: ret1 '5 :a%=20 :x%=x%+2 '
   Frst:0 T:'+' exptype:i
 (operator_precedence) 
+ is operator
 (operator_precedence) 
:= is operator
'+' is operator
 (process_token) 
Token is operator o1 name:+ o2 name::=
 (process_token) 
opr1:3 opr2:1
 (operator_precedence) 
:= is operator
 (operator_precedence) 
:= is operator
Push 1
 Push:'+'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: := type:0
 (op_stack_print) 
001: + type:0
 (op_stack_print) 
------------------

 (scan_eitem) Is comma;0
 (scan_expression) n commas now:0

  (check_eitem) check_eitem: '5 :a%=20 :x%=x%+2 '

   (check_operator) check_operator: 5 :a%=20 :x%=x%+2 

    (check_literal) check_literal:lit=' ,' idx=9 '5 :a%=20 :x%=x%+2 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=9 '5 :a%=20 :x%=x%+2 '
    (check_literal)   ',' != '5'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: '5 :a%=20 :x%=x%+2 '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=9 '5 :a%=20 :x%=x%+2 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=9 '5 :a%=20 :x%=x%+2 '
    (check_literal)   '%' != '5'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=9 '5 :a%=20 :x%=x%+2 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=9 '5 :a%=20 :x%=x%+2 '
    (check_literal)   '"' != '5'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '5 :a%=20 :x%=x%+2 '
     (check_integer) check_integer:ret1
    (check_number) check_number: ret1
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator: 5 :a%=20 :x%=x%+2 

    (check_literal) check_literal:lit=' ,' idx=9 '5 :a%=20 :x%=x%+2 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=9 '5 :a%=20 :x%=x%+2 '
    (check_literal)   ',' != '5'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: '5 :a%=20 :x%=x%+2 '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=9 '5 :a%=20 :x%=x%+2 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=9 '5 :a%=20 :x%=x%+2 '
    (check_literal)   '%' != '5'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=9 '5 :a%=20 :x%=x%+2 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=9 '5 :a%=20 :x%=x%+2 '
    (check_literal)   '"' != '5'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '5 :a%=20 :x%=x%+2 '
     (check_integer) check_integer:ret1
    (check_number) check_number: ret1
   (check_atom) check_atom:ret1

   (scan_atom) scan_atom:

    (check_literal) check_literal:lit=' %' idx=9 '5 :a%=20 :x%=x%+2 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=9 '5 :a%=20 :x%=x%+2 '
    (check_literal)   '%' != '5'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=9 '5 :a%=20 :x%=x%+2 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=9 '5 :a%=20 :x%=x%+2 '
    (check_literal)   '"' != '5'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '5 :a%=20 :x%=x%+2 '
     (check_integer) check_integer:ret1
    (check_number) check_number: ret1

    (scan_number) scan_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '5 :a%=20 :x%=x%+2 '
     (check_integer) check_integer:ret1

     (scan_integer) scan_integer:
     (scan_integer) scan_integer:ret1
   Frst:0 T:'5' exptype:i
    (operator_precedence) 
+ is operator
modify_expression_type:Inittype:i Intype:i Outtype:i
(  output_integer) [i,()] i i 5
    (scan_integer) scan_integer:ret1  5
   (scan_atom) scan_atom:ret1
  (scan_expression) n commas now:0

   (check_eitem) check_eitem: ' :a%=20 :x%=x%+2 '

    (check_operator) check_operator:  :a%=20 :x%=x%+2 

     (check_literal) check_literal:lit=' ,' idx=11 ':a%=20 :x%=x%+2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=11 ':a%=20 :x%=x%+2 '
     (check_literal)   ',' != ':'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: ':a%=20 :x%=x%+2 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=10 ' :a%=20 :x%=x%+2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=11 ':a%=20 :x%=x%+2 '
     (check_literal)   '%' != ':'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=10 ' :a%=20 :x%=x%+2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=11 ':a%=20 :x%=x%+2 '
     (check_literal)   '"' != ':'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: ':a%=20 :x%=x%+2 '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname ':a%=20 :x%=x%+2 ':
      (check_vname) check_vname ret0 ':a%=20 :x%=x%+2 ':
     (check_variable) check_variable:ret0 
    (check_atom) check_atom:ret1

    (check_sub_expr) check_sub_expr:

     (check_literal) check_literal:lit=' (' idx=10 ' :a%=20 :x%=x%+2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'(' idx=11 ':a%=20 :x%=x%+2 '
     (check_literal)   '(' != ':'
     (check_literal) check_literal: ret0
    (check_sub_expr) check_sub_expr: ret0
   (check_eitem) check_eitem:ret0
  (scan_expression) scan_expression: ret1 ' :a%=20 :x%=x%+2 ' commas:0
 (scan_assignment) scan_assignment: ret1
Finalise stack
Pop '+'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: := type:0
(op_stack_print) 
------------------

( output_operator) [i,()] i i +
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:+ is not function
Pop ':='
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_operator) [i,()] i i :=
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function::= is not function
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'b%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'b%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '5' nidx:10  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '+' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i ':=' nidx:0  0:
=================
 BE:b%
type_check_stack_push: 'b%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'b%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'b%' type:i (0)
 BE:b%
type_check_stack_push: 'b%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'b%' type:0
(type_check_stack_print) 
001: 'b%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'b%' type:i (0)
001: 'b%' type:i (0)
 BE:5
type_check_stack_push: '5'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (3)

(type_check_stack_print) 
000: 'b%' type:0
(type_check_stack_print) 
001: 'b%' type:0
(type_check_stack_print) 
002: '5' type:0
(type_check_stack_print) 
------------------


Type Check Stack (3)

000: 'b%' type:i (0)
001: 'b%' type:i (0)
002: '5' type:i (0)
 BE:+
BUFF_ID_OPERATOR
Found operator +
type_check_stack_pop: '5'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'b%' type:0
(type_check_stack_print) 
001: 'b%' type:0
(type_check_stack_print) 
------------------

type_check_stack_pop: 'b%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'b%' type:0
(type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'b%' type:0
(type_check_stack_print) 
001: '000' type:0
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'b%' type:i (0)
001: '000' type:i (0)
 BE::=
BUFF_ID_OPERATOR
Found operator :=
type_check_stack_pop: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'b%' type:0
(type_check_stack_print) 
------------------

type_check_stack_pop: 'b%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (0)

(type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'b%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'b%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '5' nidx:10  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '+' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i ':=' nidx:0  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i 'b%'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'b%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_INTEGER      i rq:i '5'  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_OPERATOR     i rq:i '+'  2: 3 2
(dump_exp_buffer2) N5 EXP_BUFF_ID_OPERATOR     i rq:i ':='  2: 4 1
=================
(process_expression_types) 
==INFIX==

Var: b% ary:0 NumIdx:0
infix_stack_push: 'b%'
Var: b% ary:0 NumIdx:0
infix_stack_push: 'b%'
infix_stack_push: '5'
infix_stack_pop: '5'
infix_stack_pop: 'b%'
infix_stack_push: '(b% + 5)'
infix_stack_pop: '(b% + 5)'
infix_stack_pop: 'b%'
infix_stack_push: '(b% := (b% + 5))'
infix_stack_pop: '(b% := (b% + 5))'
(process_expression_types) ==(b% := (b% + 5))==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
(    output_qcode) N3 EXP_BUFF_ID_INTEGER      i rq:i 5  0:
(    output_qcode) N4 EXP_BUFF_ID_OPERATOR     i rq:i +  2: 3 2
(    output_qcode) N5 EXP_BUFF_ID_OPERATOR     i rq:i :=  2: 4 1

 (check_literal) check_literal:lit=':' idx=11 ':a%=20 :x%=x%+2 '
 (check_literal) check_literal:After drop space:':' idx=11 ':a%=20 :x%=x%+2 '
 (check_literal) check_literal:After while():a%=20 :x%=x%+2 
 (check_literal) check_literal:ret1 

 (scan_literal) scan_literal:lit=':' 'a%=20 :x%=x%+2 '
 (scan_literal) scan_literal:After drop space:'a%=20 :x%=x%+2 '
 (scan_literal) scan_literal:while loop:a%=20 :x%=x%+2 
 (scan_literal) scan_literal:ret1

 (check_line) check_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'a%=20 :x%=x%+2 ':
    (check_vname) check_vname ret1 '%=20 :x%=x%+2 ':
   (check_variable) check_variable: '%=20 :x%=x%+2 '
   (check_variable) check_variable: Ary test '=20 :x%=x%+2 '

    (check_literal) check_literal:lit='(' idx=14 '=20 :x%=x%+2 '
    (check_literal) check_literal:After drop space:'(' idx=14 '=20 :x%=x%+2 '
    (check_literal)   '(' != '='
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=14 '=20 :x%=x%+2 '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=14 '=20 :x%=x%+2 '
  (check_literal) check_literal:After while():20 :x%=x%+2 
  (check_literal) check_literal:ret1 

  (check_expression) check_expression: '20 :x%=x%+2 '

   (check_eitem) check_eitem: '20 :x%=x%+2 '

    (check_operator) check_operator: 20 :x%=x%+2 

     (check_literal) check_literal:lit=' ,' idx=15 '20 :x%=x%+2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=15 '20 :x%=x%+2 '
     (check_literal)   ',' != '2'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: '20 :x%=x%+2 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=15 '20 :x%=x%+2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=15 '20 :x%=x%+2 '
     (check_literal)   '%' != '2'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=15 '20 :x%=x%+2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=15 '20 :x%=x%+2 '
     (check_literal)   '"' != '2'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '20 :x%=x%+2 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: ' :x%=x%+2 '

    (check_operator) check_operator:  :x%=x%+2 

     (check_literal) check_literal:lit=' ,' idx=18 ':x%=x%+2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=18 ':x%=x%+2 '
     (check_literal)   ',' != ':'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: ':x%=x%+2 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=17 ' :x%=x%+2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=18 ':x%=x%+2 '
     (check_literal)   '%' != ':'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=17 ' :x%=x%+2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=18 ':x%=x%+2 '
     (check_literal)   '"' != ':'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: ':x%=x%+2 '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname ':x%=x%+2 ':
      (check_vname) check_vname ret0 ':x%=x%+2 ':
     (check_variable) check_variable:ret0 
    (check_atom) check_atom:ret1

    (check_sub_expr) check_sub_expr:

     (check_literal) check_literal:lit=' (' idx=17 ' :x%=x%+2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'(' idx=18 ':x%=x%+2 '
     (check_literal)   '(' != ':'
     (check_literal) check_literal: ret0
    (check_sub_expr) check_sub_expr: ret0
   (check_eitem) check_eitem:ret0
  (check_expression) check_expression:ret1 ' :x%=x%+2 '
 (check_assignment) check_assignment:ret1
(check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=10, ' :x%=x%+2 '
========================================================
   b%=b%+5 :a%=20 :x%=x%+2 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'a%=20 :x%=x%+2 ':
    (check_vname) check_vname ret1 '%=20 :x%=x%+2 ':
   (check_variable) check_variable: '%=20 :x%=x%+2 '
   (check_variable) check_variable: Ary test '=20 :x%=x%+2 '

    (check_literal) check_literal:lit='(' idx=14 '=20 :x%=x%+2 '
    (check_literal) check_literal:After drop space:'(' idx=14 '=20 :x%=x%+2 '
    (check_literal)   '(' != '='
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=14 '=20 :x%=x%+2 '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=14 '=20 :x%=x%+2 '
  (check_literal) check_literal:After while():20 :x%=x%+2 
  (check_literal) check_literal:ret1 

  (check_expression) check_expression: '20 :x%=x%+2 '

   (check_eitem) check_eitem: '20 :x%=x%+2 '

    (check_operator) check_operator: 20 :x%=x%+2 

     (check_literal) check_literal:lit=' ,' idx=15 '20 :x%=x%+2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=15 '20 :x%=x%+2 '
     (check_literal)   ',' != '2'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: '20 :x%=x%+2 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=15 '20 :x%=x%+2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=15 '20 :x%=x%+2 '
     (check_literal)   '%' != '2'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=15 '20 :x%=x%+2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=15 '20 :x%=x%+2 '
     (check_literal)   '"' != '2'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '20 :x%=x%+2 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: ' :x%=x%+2 '

    (check_operator) check_operator:  :x%=x%+2 

     (check_literal) check_literal:lit=' ,' idx=18 ':x%=x%+2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=18 ':x%=x%+2 '
     (check_literal)   ',' != ':'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: ':x%=x%+2 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=17 ' :x%=x%+2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=18 ':x%=x%+2 '
     (check_literal)   '%' != ':'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=17 ' :x%=x%+2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=18 ':x%=x%+2 '
     (check_literal)   '"' != ':'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: ':x%=x%+2 '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname ':x%=x%+2 ':
      (check_vname) check_vname ret0 ':x%=x%+2 ':
     (check_variable) check_variable:ret0 
    (check_atom) check_atom:ret1

    (check_sub_expr) check_sub_expr:

     (check_literal) check_literal:lit=' (' idx=17 ' :x%=x%+2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'(' idx=18 ':x%=x%+2 '
     (check_literal)   '(' != ':'
     (check_literal) check_literal: ret0
    (check_sub_expr) check_sub_expr: ret0
   (check_eitem) check_eitem:ret0
  (check_expression) check_expression:ret1 ' :x%=x%+2 '
 (check_assignment) check_assignment:ret1

 (scan_assignment) scan_assignment:

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'a%=20 :x%=x%+2 '
   (scan_vname) scan_vname: ret1 'a'
  (scan_variable) scan_variable: '%=20 :x%=x%+2 ' vname='a'
  (scan_variable) scan_variable: Ary test '=20 :x%=x%+2 '

   (check_literal) check_literal:lit='(' idx=14 '=20 :x%=x%+2 '
   (check_literal) check_literal:After drop space:'(' idx=14 '=20 :x%=x%+2 '
   (check_literal)   '(' != '='
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='a%' is str:0 int:1 flt:0 ary:0
   Frst:1 T:'a%' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:a% is not function
token_is_variable: tok:'a%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:a% is not function
 (init_get_name) 
init_get_name:'a%'
 (init_get_name) 
init_get_name:'a%'
 (get_name) 
get_name:gn:'a%'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] i i a%
 (print_var_info) 
VAR INFO: '                a%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0

  (scan_assignment_equals) scan_assignment_equals:lit=' =' '=20 :x%=x%+2 '
  (scan_assignment_equals) scan_assignment_equals:After drop space:'=20 :x%=x%+2 '
  (scan_assignment_equals) scan_assignment_equals:while loop:=20 :x%=x%+2 
   Frst:0 T:':=' exptype:i
  (operator_precedence) 
:= is operator
':=' is operator
  (process_token) 
Token is operator o1 name::= o2 name:
  (process_token) 
opr1:1 opr2:0
Push 1
 Push:':='
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (1)

  (op_stack_print) 
000: := type:0
  (op_stack_print) 
------------------

  (scan_assignment_equals) scan_assignment_equals:ret1

  (scan_expression) scan_expression: '20 :x%=x%+2 '

   (check_eitem) check_eitem: '20 :x%=x%+2 '

    (check_operator) check_operator: 20 :x%=x%+2 

     (check_literal) check_literal:lit=' ,' idx=15 '20 :x%=x%+2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=15 '20 :x%=x%+2 '
     (check_literal)   ',' != '2'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: '20 :x%=x%+2 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=15 '20 :x%=x%+2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=15 '20 :x%=x%+2 '
     (check_literal)   '%' != '2'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=15 '20 :x%=x%+2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=15 '20 :x%=x%+2 '
     (check_literal)   '"' != '2'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '20 :x%=x%+2 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (scan_eitem) scan_eitem:

    (check_operator) check_operator: 20 :x%=x%+2 

     (check_literal) check_literal:lit=' ,' idx=15 '20 :x%=x%+2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=15 '20 :x%=x%+2 '
     (check_literal)   ',' != '2'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: '20 :x%=x%+2 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=15 '20 :x%=x%+2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=15 '20 :x%=x%+2 '
     (check_literal)   '%' != '2'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=15 '20 :x%=x%+2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=15 '20 :x%=x%+2 '
     (check_literal)   '"' != '2'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '20 :x%=x%+2 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1

    (scan_atom) scan_atom:

     (check_literal) check_literal:lit=' %' idx=15 '20 :x%=x%+2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=15 '20 :x%=x%+2 '
     (check_literal)   '%' != '2'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=15 '20 :x%=x%+2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=15 '20 :x%=x%+2 '
     (check_literal)   '"' != '2'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '20 :x%=x%+2 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1

     (scan_number) scan_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '20 :x%=x%+2 '
      (check_integer) check_integer:ret1

      (scan_integer) scan_integer:
      (scan_integer) scan_integer:ret1
   Frst:0 T:'20' exptype:i
     (operator_precedence) 
:= is operator
modify_expression_type:Inittype:i Intype:i Outtype:i
(  output_integer) [i,()] i i 20
     (scan_integer) scan_integer:ret1  20
    (scan_atom) scan_atom:ret1
   (scan_expression) n commas now:0

    (check_eitem) check_eitem: ' :x%=x%+2 '

     (check_operator) check_operator:  :x%=x%+2 

      (check_literal) check_literal:lit=' ,' idx=18 ':x%=x%+2 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=18 ':x%=x%+2 '
      (check_literal)   ',' != ':'
      (check_literal) check_literal: ret0
     (check_operator) ret0:is comma: 0

     (check_function) check_function: ':x%=x%+2 '
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=17 ' :x%=x%+2 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=18 ':x%=x%+2 '
      (check_literal)   '%' != ':'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=17 ' :x%=x%+2 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=18 ':x%=x%+2 '
      (check_literal)   '"' != ':'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: ':x%=x%+2 '
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname ':x%=x%+2 ':
       (check_vname) check_vname ret0 ':x%=x%+2 ':
      (check_variable) check_variable:ret0 
     (check_atom) check_atom:ret1

     (check_sub_expr) check_sub_expr:

      (check_literal) check_literal:lit=' (' idx=17 ' :x%=x%+2 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'(' idx=18 ':x%=x%+2 '
      (check_literal)   '(' != ':'
      (check_literal) check_literal: ret0
     (check_sub_expr) check_sub_expr: ret0
    (check_eitem) check_eitem:ret0
   (scan_expression) scan_expression: ret1 ' :x%=x%+2 ' commas:0
  (scan_assignment) scan_assignment: ret1
Finalise stack
Pop ':='
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (0)

 (op_stack_print) 
------------------

( output_operator) [i,()] i i :=
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function::= is not function
 (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'a%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '20' nidx:17  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i ':=' nidx:0  0:
=================
 BE:a%
type_check_stack_push: 'a%'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (1)

 (type_check_stack_print) 
000: 'a%' type:0
 (type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'a%' type:i (0)
 BE:20
type_check_stack_push: '20'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (2)

 (type_check_stack_print) 
000: 'a%' type:0
 (type_check_stack_print) 
001: '20' type:0
 (type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'a%' type:i (0)
001: '20' type:i (0)
 BE::=
BUFF_ID_OPERATOR
Found operator :=
type_check_stack_pop: '20'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (1)

 (type_check_stack_print) 
000: 'a%' type:0
 (type_check_stack_print) 
------------------

type_check_stack_pop: 'a%'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (0)

 (type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (1)

 (type_check_stack_print) 
000: '000' type:0
 (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'a%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '20' nidx:17  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i ':=' nidx:0  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i 'a%'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i '20'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_OPERATOR     i rq:i ':='  2: 2 1
=================
 (process_expression_types) 
==INFIX==

Var: a% ary:0 NumIdx:0
infix_stack_push: 'a%'
infix_stack_push: '20'
infix_stack_pop: '20'
infix_stack_pop: 'a%'
infix_stack_push: '(a% := 20)'
infix_stack_pop: '(a% := 20)'
 (process_expression_types) ==(a% := 20)==
 (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
(    output_qcode) N2 EXP_BUFF_ID_INTEGER      i rq:i 20  0:
(    output_qcode) N3 EXP_BUFF_ID_OPERATOR     i rq:i :=  2: 2 1

  (check_literal) check_literal:lit=':' idx=18 ':x%=x%+2 '
  (check_literal) check_literal:After drop space:':' idx=18 ':x%=x%+2 '
  (check_literal) check_literal:After while():x%=x%+2 
  (check_literal) check_literal:ret1 

  (scan_literal) scan_literal:lit=':' 'x%=x%+2 '
  (scan_literal) scan_literal:After drop space:'x%=x%+2 '
  (scan_literal) scan_literal:while loop:x%=x%+2 
  (scan_literal) scan_literal:ret1

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'x%=x%+2 ':
     (check_vname) check_vname ret1 '%=x%+2 ':
    (check_variable) check_variable: '%=x%+2 '
    (check_variable) check_variable: Ary test '=x%+2 '

     (check_literal) check_literal:lit='(' idx=21 '=x%+2 '
     (check_literal) check_literal:After drop space:'(' idx=21 '=x%+2 '
     (check_literal)   '(' != '='
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=21 '=x%+2 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=21 '=x%+2 '
   (check_literal) check_literal:After while():x%+2 
   (check_literal) check_literal:ret1 

   (check_expression) check_expression: 'x%+2 '

    (check_eitem) check_eitem: 'x%+2 '

     (check_operator) check_operator: x%+2 

      (check_literal) check_literal:lit=' ,' idx=22 'x%+2 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=22 'x%+2 '
      (check_literal)   ',' != 'x'
      (check_literal) check_literal: ret0
     (check_operator) ret0:is comma: 0

     (check_function) check_function: 'x%+2 '
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=22 'x%+2 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=22 'x%+2 '
      (check_literal)   '%' != 'x'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=22 'x%+2 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=22 'x%+2 '
      (check_literal)   '"' != 'x'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: 'x%+2 '
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname 'x%+2 ':
       (check_vname) check_vname ret1 '%+2 ':
      (check_variable) check_variable: '%+2 '
      (check_variable) check_variable: Ary test '+2 '

       (check_literal) check_literal:lit='(' idx=24 '+2 '
       (check_literal) check_literal:After drop space:'(' idx=24 '+2 '
       (check_literal)   '(' != '+'
       (check_literal) check_literal: ret0
      (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
     (check_variable) check_variable:ret1 
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: '+2 '

    (check_operator) check_operator: +2 

     (check_literal) check_literal:lit=' ,' idx=24 '+2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=24 '+2 '
     (check_literal)   ',' != '+'
     (check_literal) check_literal: ret0
    (check_operator) ret1:is comma: 0
   (check_eitem) check_eitem:ret1 comma:1

   (check_eitem) check_eitem: '2 '

    (check_operator) check_operator: 2 

     (check_literal) check_literal:lit=' ,' idx=25 '2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=25 '2 '
     (check_literal)   ',' != '2'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: '2 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=25 '2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=25 '2 '
     (check_literal)   '%' != '2'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=25 '2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=25 '2 '
     (check_literal)   '"' != '2'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '2 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (check_eitem) check_eitem: ' '

    (check_operator) check_operator:  

     (check_literal) check_literal:lit=' ,' idx=27 ''
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=27 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_operator) ret0:is comma: 0

    (check_function) check_function: ''
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=26 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=27 ''
     (check_literal) check_literal  ret0 Empty test string

     (check_literal) check_literal:lit=' "' idx=26 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=27 ''
     (check_literal) check_literal  ret0 Empty test string

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: ''
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname '':
      (check_vname) check_vname ret0 '':
     (check_variable) check_variable:ret0 
    (check_atom) check_atom:ret1

    (check_sub_expr) check_sub_expr:

     (check_literal) check_literal:lit=' (' idx=26 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'(' idx=27 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_sub_expr) check_sub_expr: ret0
   (check_eitem) check_eitem:ret0
  (check_expression) check_expression:ret1 ' '
 (check_assignment) check_assignment:ret1
(check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=1, ' '
========================================================
   b%=b%+5 :a%=20 :x%=x%+2 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'x%=x%+2 ':
    (check_vname) check_vname ret1 '%=x%+2 ':
   (check_variable) check_variable: '%=x%+2 '
   (check_variable) check_variable: Ary test '=x%+2 '

    (check_literal) check_literal:lit='(' idx=21 '=x%+2 '
    (check_literal) check_literal:After drop space:'(' idx=21 '=x%+2 '
    (check_literal)   '(' != '='
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=21 '=x%+2 '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=21 '=x%+2 '
  (check_literal) check_literal:After while():x%+2 
  (check_literal) check_literal:ret1 

  (check_expression) check_expression: 'x%+2 '

   (check_eitem) check_eitem: 'x%+2 '

    (check_operator) check_operator: x%+2 

     (check_literal) check_literal:lit=' ,' idx=22 'x%+2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=22 'x%+2 '
     (check_literal)   ',' != 'x'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'x%+2 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=22 'x%+2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=22 'x%+2 '
     (check_literal)   '%' != 'x'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=22 'x%+2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=22 'x%+2 '
     (check_literal)   '"' != 'x'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'x%+2 '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'x%+2 ':
      (check_vname) check_vname ret1 '%+2 ':
     (check_variable) check_variable: '%+2 '
     (check_variable) check_variable: Ary test '+2 '

      (check_literal) check_literal:lit='(' idx=24 '+2 '
      (check_literal) check_literal:After drop space:'(' idx=24 '+2 '
      (check_literal)   '(' != '+'
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (check_eitem) check_eitem: '+2 '

   (check_operator) check_operator: +2 

    (check_literal) check_literal:lit=' ,' idx=24 '+2 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=24 '+2 '
    (check_literal)   ',' != '+'
    (check_literal) check_literal: ret0
   (check_operator) ret1:is comma: 0
  (check_eitem) check_eitem:ret1 comma:1

  (check_eitem) check_eitem: '2 '

   (check_operator) check_operator: 2 

    (check_literal) check_literal:lit=' ,' idx=25 '2 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=25 '2 '
    (check_literal)   ',' != '2'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: '2 '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=25 '2 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=25 '2 '
    (check_literal)   '%' != '2'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=25 '2 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=25 '2 '
    (check_literal)   '"' != '2'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '2 '
     (check_integer) check_integer:ret1
    (check_number) check_number: ret1
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (check_eitem) check_eitem: ' '

   (check_operator) check_operator:  

    (check_literal) check_literal:lit=' ,' idx=27 ''
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=27 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_operator) ret0:is comma: 0

   (check_function) check_function: ''
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=26 ' '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=27 ''
    (check_literal) check_literal  ret0 Empty test string

    (check_literal) check_literal:lit=' "' idx=26 ' '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=27 ''
    (check_literal) check_literal  ret0 Empty test string

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: ''
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname '':
     (check_vname) check_vname ret0 '':
    (check_variable) check_variable:ret0 
   (check_atom) check_atom:ret1

   (check_sub_expr) check_sub_expr:

    (check_literal) check_literal:lit=' (' idx=26 ' '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'(' idx=27 ''
    (check_literal) check_literal  ret0 Empty test string
   (check_sub_expr) check_sub_expr: ret0
  (check_eitem) check_eitem:ret0
 (check_expression) check_expression:ret1 ' '
(check_assignment) check_assignment:ret1

 (scan_assignment) scan_assignment:

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'x%=x%+2 '
   (scan_vname) scan_vname: ret1 'x'
  (scan_variable) scan_variable: '%=x%+2 ' vname='x'
  (scan_variable) scan_variable: Ary test '=x%+2 '

   (check_literal) check_literal:lit='(' idx=21 '=x%+2 '
   (check_literal) check_literal:After drop space:'(' idx=21 '=x%+2 '
   (check_literal)   '(' != '='
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='x%' is str:0 int:1 flt:0 ary:0
   Frst:1 T:'x%' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:x% is not function
token_is_variable: tok:'x%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:x% is not function
 (init_get_name) 
init_get_name:'x%'
 (init_get_name) 
init_get_name:'x%'
 (get_name) 
get_name:gn:'x%'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] i i x%
 (print_var_info) 
VAR INFO: '                x%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0

  (scan_assignment_equals) scan_assignment_equals:lit=' =' '=x%+2 '
  (scan_assignment_equals) scan_assignment_equals:After drop space:'=x%+2 '
  (scan_assignment_equals) scan_assignment_equals:while loop:=x%+2 
   Frst:0 T:':=' exptype:i
  (operator_precedence) 
:= is operator
':=' is operator
  (process_token) 
Token is operator o1 name::= o2 name:
  (process_token) 
opr1:1 opr2:0
Push 1
 Push:':='
  (op_stack_print) 
------------------
  (op_stack_print) 
Operator Stack     (1)

  (op_stack_print) 
000: := type:0
  (op_stack_print) 
------------------

  (scan_assignment_equals) scan_assignment_equals:ret1

  (scan_expression) scan_expression: 'x%+2 '

   (check_eitem) check_eitem: 'x%+2 '

    (check_operator) check_operator: x%+2 

     (check_literal) check_literal:lit=' ,' idx=22 'x%+2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=22 'x%+2 '
     (check_literal)   ',' != 'x'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'x%+2 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=22 'x%+2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=22 'x%+2 '
     (check_literal)   '%' != 'x'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=22 'x%+2 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=22 'x%+2 '
     (check_literal)   '"' != 'x'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'x%+2 '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'x%+2 ':
      (check_vname) check_vname ret1 '%+2 ':
     (check_variable) check_variable: '%+2 '
     (check_variable) check_variable: Ary test '+2 '

      (check_literal) check_literal:lit='(' idx=24 '+2 '
      (check_literal) check_literal:After drop space:'(' idx=24 '+2 '
      (check_literal)   '(' != '+'
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator: x%+2 

    (check_literal) check_literal:lit=' ,' idx=22 'x%+2 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=22 'x%+2 '
    (check_literal)   ',' != 'x'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'x%+2 '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=22 'x%+2 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=22 'x%+2 '
    (check_literal)   '%' != 'x'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=22 'x%+2 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=22 'x%+2 '
    (check_literal)   '"' != 'x'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'x%+2 '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'x%+2 ':
     (check_vname) check_vname ret1 '%+2 ':
    (check_variable) check_variable: '%+2 '
    (check_variable) check_variable: Ary test '+2 '

     (check_literal) check_literal:lit='(' idx=24 '+2 '
     (check_literal) check_literal:After drop space:'(' idx=24 '+2 '
     (check_literal)   '(' != '+'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1

  (scan_atom) scan_atom:

   (check_literal) check_literal:lit=' %' idx=22 'x%+2 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=22 'x%+2 '
   (check_literal)   '%' != 'x'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=22 'x%+2 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=22 'x%+2 '
   (check_literal)   '"' != 'x'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'x%+2 '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'x%+2 ':
    (check_vname) check_vname ret1 '%+2 ':
   (check_variable) check_variable: '%+2 '
   (check_variable) check_variable: Ary test '+2 '

    (check_literal) check_literal:lit='(' idx=24 '+2 '
    (check_literal) check_literal:After drop space:'(' idx=24 '+2 '
    (check_literal)   '(' != '+'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'x%+2 '
   (scan_vname) scan_vname: ret1 'x'
  (scan_variable) scan_variable: '%+2 ' vname='x'
  (scan_variable) scan_variable: Ary test '+2 '

   (check_literal) check_literal:lit='(' idx=24 '+2 '
   (check_literal) check_literal:After drop space:'(' idx=24 '+2 '
   (check_literal)   '(' != '+'
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='x%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'x%' exptype:i
 (operator_precedence) 
:= is operator
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:x% is not function
token_is_variable: tok:'x%'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:x% is not function
 (init_get_name) 
init_get_name:'x%'
 (init_get_name) 
init_get_name:'x%'
 (get_name) 
get_name:gn:'x%'
process_token:type:i req_type:i
modify_expression_type:Inittype:i Intype:i Outtype:i
( output_variable) [i,()] i i x%
 (print_var_info) 
VAR INFO: '                x%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
 (scan_atom) scan_atom:ret1
(scan_expression) n commas now:0

 (check_eitem) check_eitem: '+2 '

  (check_operator) check_operator: +2 

   (check_literal) check_literal:lit=' ,' idx=24 '+2 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=24 '+2 '
   (check_literal)   ',' != '+'
   (check_literal) check_literal: ret0
  (check_operator) ret1:is comma: 0
 (check_eitem) check_eitem:ret1 comma:1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: +2 

   (check_literal) check_literal:lit=' ,' idx=24 '+2 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=24 '+2 '
   (check_literal)   ',' != '+'
   (check_literal) check_literal: ret0
  (check_operator) ret1:is comma: 0

  (scan_operator) scan_operator: '+2 '

   (check_literal) check_literal:lit=' ,' idx=24 '+2 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=24 '+2 '
   (check_literal)   ',' != '+'
   (check_literal) check_literal: ret0
  (scan_operator) scan_operator: ret1 '2 '
   Frst:0 T:'+' exptype:i
 (operator_precedence) 
+ is operator
 (operator_precedence) 
:= is operator
'+' is operator
 (process_token) 
Token is operator o1 name:+ o2 name::=
 (process_token) 
opr1:3 opr2:1
 (operator_precedence) 
:= is operator
 (operator_precedence) 
:= is operator
Push 1
 Push:'+'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: := type:0
 (op_stack_print) 
001: + type:0
 (op_stack_print) 
------------------

 (scan_eitem) Is comma;0
 (scan_expression) n commas now:0

  (check_eitem) check_eitem: '2 '

   (check_operator) check_operator: 2 

    (check_literal) check_literal:lit=' ,' idx=25 '2 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=25 '2 '
    (check_literal)   ',' != '2'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: '2 '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=25 '2 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=25 '2 '
    (check_literal)   '%' != '2'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=25 '2 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=25 '2 '
    (check_literal)   '"' != '2'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '2 '
     (check_integer) check_integer:ret1
    (check_number) check_number: ret1
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator: 2 

    (check_literal) check_literal:lit=' ,' idx=25 '2 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=25 '2 '
    (check_literal)   ',' != '2'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: '2 '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=25 '2 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=25 '2 '
    (check_literal)   '%' != '2'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=25 '2 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=25 '2 '
    (check_literal)   '"' != '2'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '2 '
     (check_integer) check_integer:ret1
    (check_number) check_number: ret1
   (check_atom) check_atom:ret1

   (scan_atom) scan_atom:

    (check_literal) check_literal:lit=' %' idx=25 '2 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=25 '2 '
    (check_literal)   '%' != '2'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=25 '2 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=25 '2 '
    (check_literal)   '"' != '2'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '2 '
     (check_integer) check_integer:ret1
    (check_number) check_number: ret1

    (scan_number) scan_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '2 '
     (check_integer) check_integer:ret1

     (scan_integer) scan_integer:
     (scan_integer) scan_integer:ret1
   Frst:0 T:'2' exptype:i
    (operator_precedence) 
+ is operator
modify_expression_type:Inittype:i Intype:i Outtype:i
(  output_integer) [i,()] i i 2
    (scan_integer) scan_integer:ret1  2
   (scan_atom) scan_atom:ret1
  (scan_expression) n commas now:0

   (check_eitem) check_eitem: ' '

    (check_operator) check_operator:  

     (check_literal) check_literal:lit=' ,' idx=27 ''
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=27 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_operator) ret0:is comma: 0

    (check_function) check_function: ''
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=26 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=27 ''
     (check_literal) check_literal  ret0 Empty test string

     (check_literal) check_literal:lit=' "' idx=26 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=27 ''
     (check_literal) check_literal  ret0 Empty test string

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: ''
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname '':
      (check_vname) check_vname ret0 '':
     (check_variable) check_variable:ret0 
    (check_atom) check_atom:ret1

    (check_sub_expr) check_sub_expr:

     (check_literal) check_literal:lit=' (' idx=26 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'(' idx=27 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_sub_expr) check_sub_expr: ret0
   (check_eitem) check_eitem:ret0
  (scan_expression) scan_expression: ret1 ' ' commas:0
 (scan_assignment) scan_assignment: ret1
Finalise stack
Pop '+'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: := type:0
(op_stack_print) 
------------------

( output_operator) [i,()] i i +
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:+ is not function
Pop ':='
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_operator) [i,()] i i :=
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function::= is not function
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'x%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'x%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '2' nidx:26  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '+' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i ':=' nidx:0  0:
=================
 BE:x%
type_check_stack_push: 'x%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'x%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'x%' type:i (0)
 BE:x%
type_check_stack_push: 'x%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'x%' type:0
(type_check_stack_print) 
001: 'x%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'x%' type:i (0)
001: 'x%' type:i (0)
 BE:2
type_check_stack_push: '2'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (3)

(type_check_stack_print) 
000: 'x%' type:0
(type_check_stack_print) 
001: 'x%' type:0
(type_check_stack_print) 
002: '2' type:0
(type_check_stack_print) 
------------------


Type Check Stack (3)

000: 'x%' type:i (0)
001: 'x%' type:i (0)
002: '2' type:i (0)
 BE:+
BUFF_ID_OPERATOR
Found operator +
type_check_stack_pop: '2'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'x%' type:0
(type_check_stack_print) 
001: 'x%' type:0
(type_check_stack_print) 
------------------

type_check_stack_pop: 'x%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'x%' type:0
(type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'x%' type:0
(type_check_stack_print) 
001: '000' type:0
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'x%' type:i (0)
001: '000' type:i (0)
 BE::=
BUFF_ID_OPERATOR
Found operator :=
type_check_stack_pop: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'x%' type:0
(type_check_stack_print) 
------------------

type_check_stack_pop: 'x%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (0)

(type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:0
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'x%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'x%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '2' nidx:26  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '+' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i ':=' nidx:0  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i 'x%'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'x%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_INTEGER      i rq:i '2'  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_OPERATOR     i rq:i '+'  2: 3 2
(dump_exp_buffer2) N5 EXP_BUFF_ID_OPERATOR     i rq:i ':='  2: 4 1
=================
(process_expression_types) 
==INFIX==

Var: x% ary:0 NumIdx:0
infix_stack_push: 'x%'
Var: x% ary:0 NumIdx:0
infix_stack_push: 'x%'
infix_stack_push: '2'
infix_stack_pop: '2'
infix_stack_pop: 'x%'
infix_stack_push: '(x% + 2)'
infix_stack_pop: '(x% + 2)'
infix_stack_pop: 'x%'
infix_stack_push: '(x% := (x% + 2))'
infix_stack_pop: '(x% := (x% + 2))'
(process_expression_types) ==(x% := (x% + 2))==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i x%  0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     i rq:i x%  0:
(    output_qcode) N3 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
(    output_qcode) N4 EXP_BUFF_ID_OPERATOR     i rq:i +  2: 3 2
(    output_qcode) N5 EXP_BUFF_ID_OPERATOR     i rq:i :=  2: 4 1

 (check_literal) check_literal:lit=':' idx=27 ''
 (check_literal) check_literal:After drop space:':' idx=27 ''
 (check_literal) check_literal  ret0 Empty test string
(translate_file) 
cline scanned OK
****************
**   IF x%>20 **
****************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'IF x%>20 ':
     (check_vname) check_vname ret1 ' x%>20 ':
    (check_variable) check_variable: ' x%>20 '
    (check_variable) check_variable: Ary test ' x%>20 '

     (check_literal) check_literal:lit='(' idx=5 ' x%>20 '
     (check_literal) check_literal:After drop space:'(' idx=5 ' x%>20 '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=5 ' x%>20 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=6 'x%>20 '
   (check_literal)   '=' != 'x'
   (check_literal) check_literal: ret0
  (check_assignment) check_assignment:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) check_textlabel: 'IF x%>20 '
   (check_textlabel) check_textlabel:ret0
  (check_proc_call) check_proc_call:ret0

  (check_command) check_command:
  (check_command) check_command: ret0

  (check_function) check_function: 'IF x%>20 '
  (check_function) check_function: ret0

  (check_literal) check_literal:lit=' IF' idx=0 '   IF x%>20 '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'IF' idx=3 'IF x%>20 '
  (check_literal) check_literal:After while(): x%>20 
  (check_literal) check_literal:ret1 
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=7, ' x%>20 '
========================================================
   IF x%>20 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'IF x%>20 ':
    (check_vname) check_vname ret1 ' x%>20 ':
   (check_variable) check_variable: ' x%>20 '
   (check_variable) check_variable: Ary test ' x%>20 '

    (check_literal) check_literal:lit='(' idx=5 ' x%>20 '
    (check_literal) check_literal:After drop space:'(' idx=5 ' x%>20 '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=5 ' x%>20 '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=6 'x%>20 '
  (check_literal)   '=' != 'x'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'IF x%>20 '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret0

 (check_function) check_function: 'IF x%>20 '
 (check_function) check_function: ret0

 (check_literal) check_literal:lit=' IF' idx=3 'IF x%>20 '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'IF' idx=3 'IF x%>20 '
 (check_literal) check_literal:After while(): x%>20 
 (check_literal) check_literal:ret1 

 (scan_literal) scan_literal:lit=' IF' 'IF x%>20 '
 (scan_literal) scan_literal:After drop space:'IF x%>20 '
 (scan_literal) scan_literal:while loop:IF x%>20 
 (scan_literal) scan_literal:while loop:F x%>20 
   Frst:1 T:'IF' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:IF is not function
token_is_variable: tok:'IF'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:IF is not function
 (init_get_name) 
init_get_name:'IF'
 (init_get_name) 
init_get_name:'IF'
 (get_name) 
get_name:gn:'IF'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] f f IF
 (scan_literal) scan_literal:ret1

 (scan_expression) scan_expression: ' x%>20 '

  (check_eitem) check_eitem: 'x%>20 '

   (check_operator) check_operator: x%>20 

    (check_literal) check_literal:lit=' ,' idx=6 'x%>20 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=6 'x%>20 '
    (check_literal)   ',' != 'x'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'x%>20 '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=6 'x%>20 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=6 'x%>20 '
    (check_literal)   '%' != 'x'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=6 'x%>20 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=6 'x%>20 '
    (check_literal)   '"' != 'x'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'x%>20 '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'x%>20 ':
     (check_vname) check_vname ret1 '%>20 ':
    (check_variable) check_variable: '%>20 '
    (check_variable) check_variable: Ary test '>20 '

     (check_literal) check_literal:lit='(' idx=8 '>20 '
     (check_literal) check_literal:After drop space:'(' idx=8 '>20 '
     (check_literal)   '(' != '>'
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1
 (check_eitem) check_eitem:ret1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: x%>20 

   (check_literal) check_literal:lit=' ,' idx=6 'x%>20 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=6 'x%>20 '
   (check_literal)   ',' != 'x'
   (check_literal) check_literal: ret0
  (check_operator) ret0:is comma: 0

  (check_function) check_function: 'x%>20 '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=6 'x%>20 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=6 'x%>20 '
   (check_literal)   '%' != 'x'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=6 'x%>20 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=6 'x%>20 '
   (check_literal)   '"' != 'x'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'x%>20 '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'x%>20 ':
    (check_vname) check_vname ret1 '%>20 ':
   (check_variable) check_variable: '%>20 '
   (check_variable) check_variable: Ary test '>20 '

    (check_literal) check_literal:lit='(' idx=8 '>20 '
    (check_literal) check_literal:After drop space:'(' idx=8 '>20 '
    (check_literal)   '(' != '>'
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) check_atom:ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=6 'x%>20 '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=6 'x%>20 '
  (check_literal)   '%' != 'x'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=6 'x%>20 '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=6 'x%>20 '
  (check_literal)   '"' != 'x'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) check_float: ret0

   (check_integer) check_integer: 'x%>20 '
   (check_integer) check_integer:ret0
  (check_number) check_number: ret0

  (check_variable) check_variable:

   (check_vname) check_vname 'x%>20 ':
   (check_vname) check_vname ret1 '%>20 ':
  (check_variable) check_variable: '%>20 '
  (check_variable) check_variable: Ary test '>20 '

   (check_literal) check_literal:lit='(' idx=8 '>20 '
   (check_literal) check_literal:After drop space:'(' idx=8 '>20 '
   (check_literal)   '(' != '>'
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) scan_variable:

  (scan_vname) scan_vname: 'x%>20 '
  (scan_vname) scan_vname: ret1 'x'
 (scan_variable) scan_variable: '%>20 ' vname='x'
 (scan_variable) scan_variable: Ary test '>20 '

  (check_literal) check_literal:lit='(' idx=8 '>20 '
  (check_literal) check_literal:After drop space:'(' idx=8 '>20 '
  (check_literal)   '(' != '>'
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='x%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'x%' exptype:i
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:x% is not function
token_is_variable: tok:'x%'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:x% is not function
(init_get_name) 
init_get_name:'x%'
(init_get_name) 
init_get_name:'x%'
(get_name) 
get_name:gn:'x%'
process_token:type:i req_type:i
modify_expression_type:Inittype:i Intype:i Outtype:i
( output_variable) [i,()] i i x%
(print_var_info) 
VAR INFO: '                x%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
(scan_atom) scan_atom:ret1
(scan_expression) n commas now:0

 (check_eitem) check_eitem: '>20 '

  (check_operator) check_operator: >20 

   (check_literal) check_literal:lit=' ,' idx=8 '>20 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=8 '>20 '
   (check_literal)   ',' != '>'
   (check_literal) check_literal: ret0
  (check_operator) ret1:is comma: 0
 (check_eitem) check_eitem:ret1 comma:1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator: >20 

   (check_literal) check_literal:lit=' ,' idx=8 '>20 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=8 '>20 '
   (check_literal)   ',' != '>'
   (check_literal) check_literal: ret0
  (check_operator) ret1:is comma: 0

  (scan_operator) scan_operator: '>20 '

   (check_literal) check_literal:lit=' ,' idx=8 '>20 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=8 '>20 '
   (check_literal)   ',' != '>'
   (check_literal) check_literal: ret0
  (scan_operator) scan_operator: ret1 '20 '
   Frst:0 T:'>' exptype:i
 (operator_precedence) 
> is operator
'>' is operator
 (process_token) 
Token is operator o1 name:> o2 name:
 (process_token) 
opr1:5 opr2:0
Push 1
 Push:'>'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: > type:0
 (op_stack_print) 
------------------

 (scan_eitem) Is comma;0
 (scan_expression) n commas now:0

  (check_eitem) check_eitem: '20 '

   (check_operator) check_operator: 20 

    (check_literal) check_literal:lit=' ,' idx=9 '20 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=9 '20 '
    (check_literal)   ',' != '2'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: '20 '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=9 '20 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=9 '20 '
    (check_literal)   '%' != '2'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=9 '20 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=9 '20 '
    (check_literal)   '"' != '2'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '20 '
     (check_integer) check_integer:ret1
    (check_number) check_number: ret1
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator: 20 

    (check_literal) check_literal:lit=' ,' idx=9 '20 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=9 '20 '
    (check_literal)   ',' != '2'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: '20 '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=9 '20 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=9 '20 '
    (check_literal)   '%' != '2'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=9 '20 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=9 '20 '
    (check_literal)   '"' != '2'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '20 '
     (check_integer) check_integer:ret1
    (check_number) check_number: ret1
   (check_atom) check_atom:ret1

   (scan_atom) scan_atom:

    (check_literal) check_literal:lit=' %' idx=9 '20 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=9 '20 '
    (check_literal)   '%' != '2'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=9 '20 '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=9 '20 '
    (check_literal)   '"' != '2'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '20 '
     (check_integer) check_integer:ret1
    (check_number) check_number: ret1

    (scan_number) scan_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: '20 '
     (check_integer) check_integer:ret1

     (scan_integer) scan_integer:
     (scan_integer) scan_integer:ret1
   Frst:0 T:'20' exptype:i
    (operator_precedence) 
> is operator
modify_expression_type:Inittype:i Intype:i Outtype:i
(  output_integer) [i,()] i i 20
    (scan_integer) scan_integer:ret1  20
   (scan_atom) scan_atom:ret1
  (scan_expression) n commas now:0

   (check_eitem) check_eitem: ' '

    (check_operator) check_operator:  

     (check_literal) check_literal:lit=' ,' idx=12 ''
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=12 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_operator) ret0:is comma: 0

    (check_function) check_function: ''
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=11 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=12 ''
     (check_literal) check_literal  ret0 Empty test string

     (check_literal) check_literal:lit=' "' idx=11 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=12 ''
     (check_literal) check_literal  ret0 Empty test string

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: ''
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname '':
      (check_vname) check_vname ret0 '':
     (check_variable) check_variable:ret0 
    (check_atom) check_atom:ret1

    (check_sub_expr) check_sub_expr:

     (check_literal) check_literal:lit=' (' idx=11 ' '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'(' idx=12 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_sub_expr) check_sub_expr: ret0
   (check_eitem) check_eitem:ret0
  (scan_expression) scan_expression: ret1 ' ' commas:0
Finalise stack
Pop '>'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (0)

 (op_stack_print) 
------------------

( output_operator) [i,()] i i >
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:> is not function
 (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'IF' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'x%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '20' nidx:11  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '>' nidx:32766  0:
=================
 BE:IF
type_check_stack_push: 'IF'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (1)

 (type_check_stack_print) 
000: 'IF' type:1
 (type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'IF' type:f (1)
 BE:x%
type_check_stack_push: 'x%'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (2)

 (type_check_stack_print) 
000: 'IF' type:1
 (type_check_stack_print) 
001: 'x%' type:0
 (type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'IF' type:f (1)
001: 'x%' type:i (0)
 BE:20
type_check_stack_push: '20'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (3)

 (type_check_stack_print) 
000: 'IF' type:1
 (type_check_stack_print) 
001: 'x%' type:0
 (type_check_stack_print) 
002: '20' type:0
 (type_check_stack_print) 
------------------


Type Check Stack (3)

000: 'IF' type:f (1)
001: 'x%' type:i (0)
002: '20' type:i (0)
 BE:>
BUFF_ID_OPERATOR
Found operator >
type_check_stack_pop: '20'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (2)

 (type_check_stack_print) 
000: 'IF' type:1
 (type_check_stack_print) 
001: 'x%' type:0
 (type_check_stack_print) 
------------------

type_check_stack_pop: 'x%'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (1)

 (type_check_stack_print) 
000: 'IF' type:1
 (type_check_stack_print) 
------------------

 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (2)

 (type_check_stack_print) 
000: 'IF' type:1
 (type_check_stack_print) 
001: '000' type:0
 (type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'IF' type:f (1)
001: '000' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'IF' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'x%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '20' nidx:11  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i '>' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f 'IF'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i 'x%'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_INTEGER      i rq:i '20'  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_OPERATOR     i rq:i '>'  2: 3 2
=================
 (process_expression_types) 
==INFIX==

Var: IF ary:3 NumIdx:0
infix_stack_push: 'IF()'
Var: x% ary:0 NumIdx:0
infix_stack_push: 'x%'
infix_stack_push: '20'
infix_stack_pop: '20'
infix_stack_pop: 'x%'
infix_stack_push: '(x% > 20)'
infix_stack_pop: '(x% > 20)'
 (process_expression_types) ==(x% > 20)==
 (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     f rq:f IF  0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     i rq:i x%  0:
(    output_qcode) N3 EXP_BUFF_ID_INTEGER      i rq:i 20  0:
(    output_qcode) N4 EXP_BUFF_ID_OPERATOR     i rq:i >  2: 3 2

  (check_literal) check_literal:lit=':' idx=12 ''
  (check_literal) check_literal:After drop space:':' idx=12 ''
  (check_literal) check_literal  ret0 Empty test string
 (translate_file) 
cline scanned OK
********************************
**    CLS : PRINT "GAME OVER" **
********************************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'CLS : PRINT "GAME OVER" ':
     (check_vname) check_vname ret1 ' : PRINT "GAME OVER" ':
    (check_variable) check_variable: ' : PRINT "GAME OVER" '
    (check_variable) check_variable: Ary test ' : PRINT "GAME OVER" '

     (check_literal) check_literal:lit='(' idx=7 ' : PRINT "GAME OVER" '
     (check_literal) check_literal:After drop space:'(' idx=7 ' : PRINT "GAME OVER" '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=7 ' : PRINT "GAME OVER" '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=8 ': PRINT "GAME OVER" '
   (check_literal)   '=' != ':'
   (check_literal) check_literal: ret0
  (check_assignment) check_assignment:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) check_textlabel: 'CLS : PRINT "GAME OVER" '
   (check_textlabel) check_textlabel:ret0
  (check_proc_call) check_proc_call:ret0

  (check_command) check_command:
  (check_command) check_command: ret1 found=> 'CLS'
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=21, ' : PRINT "GAME OVER" '
========================================================
    CLS : PRINT "GAME OVER" 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'CLS : PRINT "GAME OVER" ':
    (check_vname) check_vname ret1 ' : PRINT "GAME OVER" ':
   (check_variable) check_variable: ' : PRINT "GAME OVER" '
   (check_variable) check_variable: Ary test ' : PRINT "GAME OVER" '

    (check_literal) check_literal:lit='(' idx=7 ' : PRINT "GAME OVER" '
    (check_literal) check_literal:After drop space:'(' idx=7 ' : PRINT "GAME OVER" '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=7 ' : PRINT "GAME OVER" '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=8 ': PRINT "GAME OVER" '
  (check_literal)   '=' != ':'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'CLS : PRINT "GAME OVER" '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'CLS'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'CLS' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) CLS is function
 (function_return_type) 
function_return_type: 'CLS' =>v
 (function_return_type) 
function_return_type: 'CLS' =>17
process_token: 'CLS' t=>v
 Push:'CLS'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: CLS type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: CLS type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' : PRINT "GAME OVER" '

   (check_eitem) check_eitem: ': PRINT "GAME OVER" '

    (check_operator) check_operator: : PRINT "GAME OVER" 

     (check_literal) check_literal:lit=' ,' idx=8 ': PRINT "GAME OVER" '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=8 ': PRINT "GAME OVER" '
     (check_literal)   ',' != ':'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: ': PRINT "GAME OVER" '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=8 ': PRINT "GAME OVER" '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=8 ': PRINT "GAME OVER" '
     (check_literal)   '%' != ':'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=8 ': PRINT "GAME OVER" '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=8 ': PRINT "GAME OVER" '
     (check_literal)   '"' != ':'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: ': PRINT "GAME OVER" '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname ': PRINT "GAME OVER" ':
      (check_vname) check_vname ret0 ': PRINT "GAME OVER" ':
     (check_variable) check_variable:ret0 
    (check_atom) check_atom:ret1

    (check_sub_expr) check_sub_expr:

     (check_literal) check_literal:lit=' (' idx=8 ': PRINT "GAME OVER" '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'(' idx=8 ': PRINT "GAME OVER" '
     (check_literal)   '(' != ':'
     (check_literal) check_literal: ret0
    (check_sub_expr) check_sub_expr: ret0
   (check_eitem) check_eitem:ret0
  (scan_expression) scan_expression: ret1 ': PRINT "GAME OVER" ' commas:0
 (scan_command) scan_command: ret1 =>'CLS'
(scan_command) 
ENDEXP
   Frst:0 T:')' exptype:U
Pop 4
Pop '('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: CLS type:17
(op_stack_print) 
------------------

(  output_sub_end)
(token_is_function) 
token_is_function:
(token_is_function) CLS is function
Pop 5
Pop 'CLS'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_function) [U,(U )] v v CLS
(  output_sub_end)
Finalise stack
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'CLS' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
 BE:

Type Check Stack (0)

 BE:

Type Check Stack (0)

 BE:CLS
FN: 0 args
(function_return_type) 
function_return_type: 'CLS' =>v
(function_return_type) 
function_return_type: 'CLS' =>17
ret_type;17 v
typecheck_expression:Ret type of CLS : v
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '000' type:17
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'CLS' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_FUNCTION     v rq:v 'CLS'  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
(process_expression_types) 
==INFIX==

infix_stack_push: 'CLS()'
infix_stack_pop: 'CLS()'
(process_expression_types) ==CLS()==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N3 EXP_BUFF_ID_FUNCTION     v rq:v CLS  0:
(    output_qcode) N4 EXP_BUFF_ID_SUB_END      U rq:i   0:

 (check_literal) check_literal:lit=':' idx=8 ': PRINT "GAME OVER" '
 (check_literal) check_literal:After drop space:':' idx=8 ': PRINT "GAME OVER" '
 (check_literal) check_literal:After while(): PRINT "GAME OVER" 
 (check_literal) check_literal:ret1 

 (scan_literal) scan_literal:lit=':' ' PRINT "GAME OVER" '
 (scan_literal) scan_literal:After drop space:' PRINT "GAME OVER" '
 (scan_literal) scan_literal:while loop: PRINT "GAME OVER" 
 (scan_literal) scan_literal:ret1

 (check_line) check_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'PRINT "GAME OVER" ':
    (check_vname) check_vname ret1 ' "GAME OVER" ':
   (check_variable) check_variable: ' "GAME OVER" '
   (check_variable) check_variable: Ary test ' "GAME OVER" '

    (check_literal) check_literal:lit='(' idx=15 ' "GAME OVER" '
    (check_literal) check_literal:After drop space:'(' idx=15 ' "GAME OVER" '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=15 ' "GAME OVER" '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=16 '"GAME OVER" '
  (check_literal)   '=' != '"'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'PRINT "GAME OVER" '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'PRINT'
(check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=13, ' "GAME OVER" '
========================================================
    CLS : PRINT "GAME OVER" 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'PRINT "GAME OVER" ':
    (check_vname) check_vname ret1 ' "GAME OVER" ':
   (check_variable) check_variable: ' "GAME OVER" '
   (check_variable) check_variable: Ary test ' "GAME OVER" '

    (check_literal) check_literal:lit='(' idx=15 ' "GAME OVER" '
    (check_literal) check_literal:After drop space:'(' idx=15 ' "GAME OVER" '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=15 ' "GAME OVER" '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=16 '"GAME OVER" '
  (check_literal)   '=' != '"'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'PRINT "GAME OVER" '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'PRINT'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'PRINT' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) PRINT is function
 (function_return_type) 
function_return_type: 'PRINT' =>v
 (function_return_type) 
function_return_type: 'PRINT' =>17
process_token: 'PRINT' t=>v
 Push:'PRINT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' "GAME OVER" '

   (check_eitem) check_eitem: '"GAME OVER" '

    (check_operator) check_operator: "GAME OVER" 

     (check_literal) check_literal:lit=' ,' idx=16 '"GAME OVER" '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=16 '"GAME OVER" '
     (check_literal)   ',' != '"'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: '"GAME OVER" '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=16 '"GAME OVER" '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=16 '"GAME OVER" '
     (check_literal)   '%' != '"'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=16 '"GAME OVER" '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=16 '"GAME OVER" '
     (check_literal) check_literal:After while():GAME OVER" 
     (check_literal) check_literal:ret1 
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (scan_eitem) scan_eitem:

    (check_operator) check_operator: "GAME OVER" 

     (check_literal) check_literal:lit=' ,' idx=16 '"GAME OVER" '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=16 '"GAME OVER" '
     (check_literal)   ',' != '"'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: '"GAME OVER" '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=16 '"GAME OVER" '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=16 '"GAME OVER" '
     (check_literal)   '%' != '"'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=16 '"GAME OVER" '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=16 '"GAME OVER" '
     (check_literal) check_literal:After while():GAME OVER" 
     (check_literal) check_literal:ret1 
    (check_atom) check_atom:ret1

    (scan_atom) scan_atom:

     (check_literal) check_literal:lit=' %' idx=16 '"GAME OVER" '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=16 '"GAME OVER" '
     (check_literal)   '%' != '"'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=16 '"GAME OVER" '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=16 '"GAME OVER" '
     (check_literal) check_literal:After while():GAME OVER" 
     (check_literal) check_literal:ret1 

     (scan_string) scan_string:

      (check_literal) check_literal:lit=' "' idx=16 '"GAME OVER" '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=16 '"GAME OVER" '
      (check_literal) check_literal:After while():GAME OVER" 
      (check_literal) check_literal:ret1 
     (scan_string)   (in if) 'GAME OVER" '
     (scan_string)   (in wh) 'GAME OVER" '
     (scan_string)   (in wh) 'AME OVER" '
     (scan_string)   (in wh) 'AME OVER" '
     (scan_string)   (in wh) 'ME OVER" '
     (scan_string)   (in wh) 'ME OVER" '
     (scan_string)   (in wh) 'E OVER" '
     (scan_string)   (in wh) 'E OVER" '
     (scan_string)   (in wh) ' OVER" '
     (scan_string)   (in wh) ' OVER" '
     (scan_string)   (in wh) 'OVER" '
     (scan_string)   (in wh) 'OVER" '
     (scan_string)   (in wh) 'VER" '
     (scan_string)   (in wh) 'VER" '
     (scan_string)   (in wh) 'ER" '
     (scan_string)   (in wh) 'ER" '
     (scan_string)   (in wh) 'R" '
     (scan_string)   (in wh) 'R" '
     (scan_string)   (in wh) '" '
     (scan_string) scan_string: ret1
   Frst:0 T:'"GAME OVER"' exptype:U
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"GAME OVER" is not function
token_is_variable: tok:'"GAME OVER"'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"GAME OVER" is not function
(   output_string) [U,(U )] s ? "GAME OVER"
modify_expression_type:Inittype:U Intype:s Outtype:s
    (scan_atom) scan_atom:ret1
   (scan_expression) n commas now:0

    (check_eitem) check_eitem: ' '

     (check_operator) check_operator:  

      (check_literal) check_literal:lit=' ,' idx=28 ''
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=28 ''
      (check_literal) check_literal  ret0 Empty test string
     (check_operator) ret0:is comma: 0

     (check_function) check_function: ''
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=27 ' '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=28 ''
      (check_literal) check_literal  ret0 Empty test string

      (check_literal) check_literal:lit=' "' idx=27 ' '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=28 ''
      (check_literal) check_literal  ret0 Empty test string

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: ''
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname '':
       (check_vname) check_vname ret0 '':
      (check_variable) check_variable:ret0 
     (check_atom) check_atom:ret1

     (check_sub_expr) check_sub_expr:

      (check_literal) check_literal:lit=' (' idx=27 ' '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'(' idx=28 ''
      (check_literal) check_literal  ret0 Empty test string
     (check_sub_expr) check_sub_expr: ret0
    (check_eitem) check_eitem:ret0
   (scan_expression) scan_expression: ret1 ' ' commas:0
  (scan_command) scan_command: ret1 =>'PRINT'
 (scan_command) 
ENDEXP
   Frst:0 T:')' exptype:s
Pop 4
Pop '('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
------------------

(  output_sub_end)
 (token_is_function) 
token_is_function:
 (token_is_function) PRINT is function
Pop 5
Pop 'PRINT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (0)

 (op_stack_print) 
------------------

( output_function) [s,(U )] v v PRINT
(  output_sub_end)
Finalise stack
 (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_STR          s rq:? '"GAME OVER"' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
 BE:

Type Check Stack (0)

 BE:"GAME OVER"
type_check_stack_push: '"GAME OVER"'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (1)

 (type_check_stack_print) 
000: '"GAME OVER"' type:2
 (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '"GAME OVER"' type:s (2)
 BE:

Type Check Stack (1)

000: '"GAME OVER"' type:s (2)
 BE:PRINT
FN: 1 args
 (function_return_type) 
function_return_type: 'PRINT' =>v
 (function_return_type) 
function_return_type: 'PRINT' =>17
ret_type;17 v
typecheck_expression:Ret type of PRINT : v
type_check_stack_pop: '"GAME OVER"'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (0)

 (type_check_stack_print) 
------------------

FN ARG 0 ri "GAME OVER" 2(s)  Arg not OK
type_check_stack_push: '000'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (1)

 (type_check_stack_print) 
000: '000' type:17
 (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_STR          s rq:? '"GAME OVER"' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_STR          s rq:? '"GAME OVER"'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
 (process_expression_types) 
==INFIX==

infix_stack_push: '"GAME OVER"'
infix_stack_pop: '"GAME OVER"'
infix_stack_push: 'PRINT("GAME OVER" )'
infix_stack_pop: 'PRINT("GAME OVER" )'
 (process_expression_types) ==PRINT("GAME OVER" )==
 (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_STR          s rq:? "GAME OVER"  0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N4 EXP_BUFF_ID_FUNCTION     v rq:v PRINT  0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_END      U rq:i   0:

  (check_literal) check_literal:lit=':' idx=28 ''
  (check_literal) check_literal:After drop space:':' idx=28 ''
  (check_literal) check_literal  ret0 Empty test string
 (translate_file) 
cline scanned OK
*************************************
**    PRINT "SCORE:",sc% :PAUSE 40 **
*************************************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'PRINT "SCORE:",sc% :PAUSE 40 ':
     (check_vname) check_vname ret1 ' "SCORE:",sc% :PAUSE 40 ':
    (check_variable) check_variable: ' "SCORE:",sc% :PAUSE 40 '
    (check_variable) check_variable: Ary test ' "SCORE:",sc% :PAUSE 40 '

     (check_literal) check_literal:lit='(' idx=9 ' "SCORE:",sc% :PAUSE 40 '
     (check_literal) check_literal:After drop space:'(' idx=9 ' "SCORE:",sc% :PAUSE 40 '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=9 ' "SCORE:",sc% :PAUSE 40 '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=10 '"SCORE:",sc% :PAUSE 40 '
   (check_literal)   '=' != '"'
   (check_literal) check_literal: ret0
  (check_assignment) check_assignment:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) check_textlabel: 'PRINT "SCORE:",sc% :PAUSE 40 '
   (check_textlabel) check_textlabel:ret0
  (check_proc_call) check_proc_call:ret0

  (check_command) check_command:
  (check_command) check_command: ret1 found=> 'PRINT'
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=24, ' "SCORE:",sc% :PAUSE 40 '
========================================================
    PRINT "SCORE:",sc% :PAUSE 40 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'PRINT "SCORE:",sc% :PAUSE 40 ':
    (check_vname) check_vname ret1 ' "SCORE:",sc% :PAUSE 40 ':
   (check_variable) check_variable: ' "SCORE:",sc% :PAUSE 40 '
   (check_variable) check_variable: Ary test ' "SCORE:",sc% :PAUSE 40 '

    (check_literal) check_literal:lit='(' idx=9 ' "SCORE:",sc% :PAUSE 40 '
    (check_literal) check_literal:After drop space:'(' idx=9 ' "SCORE:",sc% :PAUSE 40 '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=9 ' "SCORE:",sc% :PAUSE 40 '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=10 '"SCORE:",sc% :PAUSE 40 '
  (check_literal)   '=' != '"'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'PRINT "SCORE:",sc% :PAUSE 40 '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'PRINT'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'PRINT' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) PRINT is function
 (function_return_type) 
function_return_type: 'PRINT' =>v
 (function_return_type) 
function_return_type: 'PRINT' =>17
process_token: 'PRINT' t=>v
 Push:'PRINT'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: PRINT type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' "SCORE:",sc% :PAUSE 40 '

   (check_eitem) check_eitem: '"SCORE:",sc% :PAUSE 40 '

    (check_operator) check_operator: "SCORE:",sc% :PAUSE 40 

     (check_literal) check_literal:lit=' ,' idx=10 '"SCORE:",sc% :PAUSE 40 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=10 '"SCORE:",sc% :PAUSE 40 '
     (check_literal)   ',' != '"'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: '"SCORE:",sc% :PAUSE 40 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=10 '"SCORE:",sc% :PAUSE 40 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=10 '"SCORE:",sc% :PAUSE 40 '
     (check_literal)   '%' != '"'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=10 '"SCORE:",sc% :PAUSE 40 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=10 '"SCORE:",sc% :PAUSE 40 '
     (check_literal) check_literal:After while():SCORE:",sc% :PAUSE 40 
     (check_literal) check_literal:ret1 
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (scan_eitem) scan_eitem:

    (check_operator) check_operator: "SCORE:",sc% :PAUSE 40 

     (check_literal) check_literal:lit=' ,' idx=10 '"SCORE:",sc% :PAUSE 40 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=10 '"SCORE:",sc% :PAUSE 40 '
     (check_literal)   ',' != '"'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: '"SCORE:",sc% :PAUSE 40 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=10 '"SCORE:",sc% :PAUSE 40 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=10 '"SCORE:",sc% :PAUSE 40 '
     (check_literal)   '%' != '"'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=10 '"SCORE:",sc% :PAUSE 40 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=10 '"SCORE:",sc% :PAUSE 40 '
     (check_literal) check_literal:After while():SCORE:",sc% :PAUSE 40 
     (check_literal) check_literal:ret1 
    (check_atom) check_atom:ret1

    (scan_atom) scan_atom:

     (check_literal) check_literal:lit=' %' idx=10 '"SCORE:",sc% :PAUSE 40 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=10 '"SCORE:",sc% :PAUSE 40 '
     (check_literal)   '%' != '"'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=10 '"SCORE:",sc% :PAUSE 40 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=10 '"SCORE:",sc% :PAUSE 40 '
     (check_literal) check_literal:After while():SCORE:",sc% :PAUSE 40 
     (check_literal) check_literal:ret1 

     (scan_string) scan_string:

      (check_literal) check_literal:lit=' "' idx=10 '"SCORE:",sc% :PAUSE 40 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=10 '"SCORE:",sc% :PAUSE 40 '
      (check_literal) check_literal:After while():SCORE:",sc% :PAUSE 40 
      (check_literal) check_literal:ret1 
     (scan_string)   (in if) 'SCORE:",sc% :PAUSE 40 '
     (scan_string)   (in wh) 'SCORE:",sc% :PAUSE 40 '
     (scan_string)   (in wh) 'CORE:",sc% :PAUSE 40 '
     (scan_string)   (in wh) 'CORE:",sc% :PAUSE 40 '
     (scan_string)   (in wh) 'ORE:",sc% :PAUSE 40 '
     (scan_string)   (in wh) 'ORE:",sc% :PAUSE 40 '
     (scan_string)   (in wh) 'RE:",sc% :PAUSE 40 '
     (scan_string)   (in wh) 'RE:",sc% :PAUSE 40 '
     (scan_string)   (in wh) 'E:",sc% :PAUSE 40 '
     (scan_string)   (in wh) 'E:",sc% :PAUSE 40 '
     (scan_string)   (in wh) ':",sc% :PAUSE 40 '
     (scan_string)   (in wh) ':",sc% :PAUSE 40 '
     (scan_string)   (in wh) '",sc% :PAUSE 40 '
     (scan_string) scan_string: ret1
   Frst:0 T:'"SCORE:"' exptype:U
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"SCORE:" is not function
token_is_variable: tok:'"SCORE:"'
    (token_is_function) 
token_is_function:
    (token_is_function) 
token_is_function:"SCORE:" is not function
(   output_string) [U,(U )] s ? "SCORE:"
modify_expression_type:Inittype:U Intype:s Outtype:s
    (scan_atom) scan_atom:ret1
   (scan_expression) n commas now:0

    (check_eitem) check_eitem: ',sc% :PAUSE 40 '

     (check_operator) check_operator: ,sc% :PAUSE 40 

      (check_literal) check_literal:lit=' ,' idx=18 ',sc% :PAUSE 40 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=18 ',sc% :PAUSE 40 '
      (check_literal) check_literal:After while():sc% :PAUSE 40 
      (check_literal) check_literal:ret1 
     (check_operator) ret1:is comma: 0
    (check_eitem) check_eitem:ret1 comma:1

    (scan_eitem) scan_eitem:

     (check_operator) check_operator: ,sc% :PAUSE 40 

      (check_literal) check_literal:lit=' ,' idx=18 ',sc% :PAUSE 40 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=18 ',sc% :PAUSE 40 '
      (check_literal) check_literal:After while():sc% :PAUSE 40 
      (check_literal) check_literal:ret1 
     (check_operator) ret1:is comma: 0

     (scan_operator) scan_operator: ',sc% :PAUSE 40 '

      (check_literal) check_literal:lit=' ,' idx=18 ',sc% :PAUSE 40 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=18 ',sc% :PAUSE 40 '
      (check_literal) check_literal:After while():sc% :PAUSE 40 
      (check_literal) check_literal:ret1 

      (scan_literal) scan_literal:lit=' ,' ',sc% :PAUSE 40 '
      (scan_literal) scan_literal:After drop space:',sc% :PAUSE 40 '
      (scan_literal) scan_literal:while loop:,sc% :PAUSE 40 
   Frst:0 T:',' exptype:s
(output_sub_start)
      (scan_literal) scan_literal:ret1
     (scan_operator) ret1:is comma: 1
    (scan_eitem) Is comma;1
    (scan_expression) n commas now:1

     (check_eitem) check_eitem: 'sc% :PAUSE 40 '

      (check_operator) check_operator: sc% :PAUSE 40 

       (check_literal) check_literal:lit=' ,' idx=19 'sc% :PAUSE 40 '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:',' idx=19 'sc% :PAUSE 40 '
       (check_literal)   ',' != 's'
       (check_literal) check_literal: ret0
      (check_operator) ret0:is comma: 0

      (check_function) check_function: 'sc% :PAUSE 40 '
      (check_function) check_function: ret0

      (check_atom) check_atom:

       (check_literal) check_literal:lit=' %' idx=19 'sc% :PAUSE 40 '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'%' idx=19 'sc% :PAUSE 40 '
       (check_literal)   '%' != 's'
       (check_literal) check_literal: ret0

       (check_literal) check_literal:lit=' "' idx=19 'sc% :PAUSE 40 '
       (check_literal) dropping space
       (check_literal) check_literal:After drop space:'"' idx=19 'sc% :PAUSE 40 '
       (check_literal)   '"' != 's'
       (check_literal) check_literal: ret0

       (check_number) check_number:

        (check_float) check_float:
        (isfloatdigit) isfloatdigit:
        (check_float) check_float: ret0

        (check_integer) check_integer: 'sc% :PAUSE 40 '
        (check_integer) check_integer:ret0
       (check_number) check_number: ret0

       (check_variable) check_variable:

        (check_vname) check_vname 'sc% :PAUSE 40 ':
        (check_vname) check_vname ret1 '% :PAUSE 40 ':
       (check_variable) check_variable: '% :PAUSE 40 '
       (check_variable) check_variable: Ary test ' :PAUSE 40 '

        (check_literal) check_literal:lit='(' idx=22 ' :PAUSE 40 '
        (check_literal) check_literal:After drop space:'(' idx=22 ' :PAUSE 40 '
        (check_literal)   '(' != ' '
        (check_literal) check_literal: ret0
       (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
      (check_variable) check_variable:ret1 
     (check_atom) check_atom:ret1
    (check_eitem) check_eitem:ret1

    (scan_eitem) scan_eitem:

     (check_operator) check_operator: sc% :PAUSE 40 

      (check_literal) check_literal:lit=' ,' idx=19 'sc% :PAUSE 40 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=19 'sc% :PAUSE 40 '
      (check_literal)   ',' != 's'
      (check_literal) check_literal: ret0
     (check_operator) ret0:is comma: 0

     (check_function) check_function: 'sc% :PAUSE 40 '
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=19 'sc% :PAUSE 40 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=19 'sc% :PAUSE 40 '
      (check_literal)   '%' != 's'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=19 'sc% :PAUSE 40 '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=19 'sc% :PAUSE 40 '
      (check_literal)   '"' != 's'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: 'sc% :PAUSE 40 '
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname 'sc% :PAUSE 40 ':
       (check_vname) check_vname ret1 '% :PAUSE 40 ':
      (check_variable) check_variable: '% :PAUSE 40 '
      (check_variable) check_variable: Ary test ' :PAUSE 40 '

       (check_literal) check_literal:lit='(' idx=22 ' :PAUSE 40 '
       (check_literal) check_literal:After drop space:'(' idx=22 ' :PAUSE 40 '
       (check_literal)   '(' != ' '
       (check_literal) check_literal: ret0
      (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
     (check_variable) check_variable:ret1 
    (check_atom) check_atom:ret1

    (scan_atom) scan_atom:

     (check_literal) check_literal:lit=' %' idx=19 'sc% :PAUSE 40 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=19 'sc% :PAUSE 40 '
     (check_literal)   '%' != 's'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=19 'sc% :PAUSE 40 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=19 'sc% :PAUSE 40 '
     (check_literal)   '"' != 's'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'sc% :PAUSE 40 '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'sc% :PAUSE 40 ':
      (check_vname) check_vname ret1 '% :PAUSE 40 ':
     (check_variable) check_variable: '% :PAUSE 40 '
     (check_variable) check_variable: Ary test ' :PAUSE 40 '

      (check_literal) check_literal:lit='(' idx=22 ' :PAUSE 40 '
      (check_literal) check_literal:After drop space:'(' idx=22 ' :PAUSE 40 '
      (check_literal)   '(' != ' '
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='%' is str:0 int:1 flt:0 ary:0
    (check_variable) check_variable:ret1 

    (scan_variable) scan_variable:

     (scan_vname) scan_vname: 'sc% :PAUSE 40 '
     (scan_vname) scan_vname: ret1 'sc'
    (scan_variable) scan_variable: '% :PAUSE 40 ' vname='sc'
    (scan_variable) scan_variable: Ary test ' :PAUSE 40 '

     (check_literal) check_literal:lit='(' idx=22 ' :PAUSE 40 '
     (check_literal) check_literal:After drop space:'(' idx=22 ' :PAUSE 40 '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (scan_variable) scan_variable:ret1 vname='sc%' is str:0 int:1 flt:0 ary:0
   Frst:0 T:'sc%' exptype:U
   (token_is_function) 
token_is_function:
   (token_is_function) 
token_is_function:sc% is not function
token_is_variable: tok:'sc%'
   (token_is_function) 
token_is_function:
   (token_is_function) 
token_is_function:sc% is not function
   (init_get_name) 
init_get_name:'sc%'
   (init_get_name) 
init_get_name:'sc%'
   (get_name) 
get_name:gn:'sc%'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,(U )] i i sc%
   (print_var_info) 
VAR INFO: '               sc%' gbl:0 ref:1 int:1 flt:0 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
   (scan_atom) scan_atom:ret1
  (scan_expression) n commas now:1

   (check_eitem) check_eitem: ' :PAUSE 40 '

    (check_operator) check_operator:  :PAUSE 40 

     (check_literal) check_literal:lit=' ,' idx=23 ':PAUSE 40 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=23 ':PAUSE 40 '
     (check_literal)   ',' != ':'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: ':PAUSE 40 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=22 ' :PAUSE 40 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=23 ':PAUSE 40 '
     (check_literal)   '%' != ':'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=22 ' :PAUSE 40 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=23 ':PAUSE 40 '
     (check_literal)   '"' != ':'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: ':PAUSE 40 '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname ':PAUSE 40 ':
      (check_vname) check_vname ret0 ':PAUSE 40 ':
     (check_variable) check_variable:ret0 
    (check_atom) check_atom:ret1

    (check_sub_expr) check_sub_expr:

     (check_literal) check_literal:lit=' (' idx=22 ' :PAUSE 40 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'(' idx=23 ':PAUSE 40 '
     (check_literal)   '(' != ':'
     (check_literal) check_literal: ret0
    (check_sub_expr) check_sub_expr: ret0
   (check_eitem) check_eitem:ret0
  (scan_expression) scan_expression: ret1 ' :PAUSE 40 ' commas:1
 (scan_command) scan_command: ret1 =>'PRINT'
(scan_command) 
ENDEXP
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: PRINT type:17
(op_stack_print) 
------------------

(  output_sub_end)
(token_is_function) 
token_is_function:
(token_is_function) PRINT is function
Pop 5
Pop 'PRINT'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_function) [i,(U )] v v PRINT
(  output_sub_end)
Finalise stack
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_STR          s rq:? '"SCORE:"' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? '' nidx:-1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'sc%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
 BE:

Type Check Stack (0)

 BE:"SCORE:"
type_check_stack_push: '"SCORE:"'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '"SCORE:"' type:2
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: '"SCORE:"' type:s (2)
 BE:

Type Check Stack (1)

000: '"SCORE:"' type:s (2)
 BE:sc%
type_check_stack_push: 'sc%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: '"SCORE:"' type:2
(type_check_stack_print) 
001: 'sc%' type:0
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: '"SCORE:"' type:s (2)
001: 'sc%' type:i (0)
 BE:

Type Check Stack (2)

000: '"SCORE:"' type:s (2)
001: 'sc%' type:i (0)
 BE:PRINT
FN: 1 args
(function_return_type) 
function_return_type: 'PRINT' =>v
(function_return_type) 
function_return_type: 'PRINT' =>17
ret_type;17 v
typecheck_expression:Ret type of PRINT : v
type_check_stack_pop: 'sc%'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: '"SCORE:"' type:2
(type_check_stack_print) 
------------------

FN ARG 0 ri sc% 0(i)  Arg ok
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: '"SCORE:"' type:2
(type_check_stack_print) 
001: '000' type:17
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: '"SCORE:"' type:s (2)
001: '000' type:v (17)
 BE:

Type Check Stack (2)

000: '"SCORE:"' type:s (2)
001: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_STR          s rq:? '"SCORE:"' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:? '' nidx:-1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 'sc%' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_STR          s rq:? '"SCORE:"'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_START    U rq:? ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     i rq:i 'sc%'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_FUNCTION     v rq:v 'PRINT'  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
(process_expression_types) 
==INFIX==

infix_stack_push: '"SCORE:"'
Var: sc% ary:0 NumIdx:0
infix_stack_push: 'sc%'
infix_stack_pop: 'sc%'
infix_stack_push: 'PRINT(sc% )'
infix_stack_pop: 'PRINT(sc% )'
(process_expression_types) ==PRINT(sc% )==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_STR          s rq:? "SCORE:"  0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_START    U rq:?   0:
(    output_qcode) N4 EXP_BUFF_ID_VARIABLE     i rq:i sc%  0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_FUNCTION     v rq:v PRINT  0:
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:i   0:

 (check_literal) check_literal:lit=':' idx=23 ':PAUSE 40 '
 (check_literal) check_literal:After drop space:':' idx=23 ':PAUSE 40 '
 (check_literal) check_literal:After while():PAUSE 40 
 (check_literal) check_literal:ret1 

 (scan_literal) scan_literal:lit=':' 'PAUSE 40 '
 (scan_literal) scan_literal:After drop space:'PAUSE 40 '
 (scan_literal) scan_literal:while loop:PAUSE 40 
 (scan_literal) scan_literal:ret1

 (check_line) check_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'PAUSE 40 ':
    (check_vname) check_vname ret1 ' 40 ':
   (check_variable) check_variable: ' 40 '
   (check_variable) check_variable: Ary test ' 40 '

    (check_literal) check_literal:lit='(' idx=29 ' 40 '
    (check_literal) check_literal:After drop space:'(' idx=29 ' 40 '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=29 ' 40 '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=30 '40 '
  (check_literal)   '=' != '4'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'PAUSE 40 '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'PAUSE'
(check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=4, ' 40 '
========================================================
    PRINT "SCORE:",sc% :PAUSE 40 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'PAUSE 40 ':
    (check_vname) check_vname ret1 ' 40 ':
   (check_variable) check_variable: ' 40 '
   (check_variable) check_variable: Ary test ' 40 '

    (check_literal) check_literal:lit='(' idx=29 ' 40 '
    (check_literal) check_literal:After drop space:'(' idx=29 ' 40 '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=29 ' 40 '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=30 '40 '
  (check_literal)   '=' != '4'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'PAUSE 40 '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'PAUSE'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'PAUSE' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) PAUSE is function
 (function_return_type) 
function_return_type: 'PAUSE' =>v
 (function_return_type) 
function_return_type: 'PAUSE' =>17
process_token: 'PAUSE' t=>v
 Push:'PAUSE'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: PAUSE type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: PAUSE type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' 40 '

   (check_eitem) check_eitem: '40 '

    (check_operator) check_operator: 40 

     (check_literal) check_literal:lit=' ,' idx=30 '40 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=30 '40 '
     (check_literal)   ',' != '4'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: '40 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=30 '40 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=30 '40 '
     (check_literal)   '%' != '4'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=30 '40 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=30 '40 '
     (check_literal)   '"' != '4'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '40 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1
   (check_eitem) check_eitem:ret1

   (scan_eitem) scan_eitem:

    (check_operator) check_operator: 40 

     (check_literal) check_literal:lit=' ,' idx=30 '40 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=30 '40 '
     (check_literal)   ',' != '4'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: '40 '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=30 '40 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=30 '40 '
     (check_literal)   '%' != '4'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=30 '40 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=30 '40 '
     (check_literal)   '"' != '4'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '40 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1
    (check_atom) check_atom:ret1

    (scan_atom) scan_atom:

     (check_literal) check_literal:lit=' %' idx=30 '40 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=30 '40 '
     (check_literal)   '%' != '4'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=30 '40 '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=30 '40 '
     (check_literal)   '"' != '4'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '40 '
      (check_integer) check_integer:ret1
     (check_number) check_number: ret1

     (scan_number) scan_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: '40 '
      (check_integer) check_integer:ret1

      (scan_integer) scan_integer:
      (scan_integer) scan_integer:ret1
   Frst:0 T:'40' exptype:U
modify_expression_type:Inittype:U Intype:i Outtype:i
(  output_integer) [i,(U )] i i 40
     (scan_integer) scan_integer:ret1  40
    (scan_atom) scan_atom:ret1
   (scan_expression) n commas now:0

    (check_eitem) check_eitem: ' '

     (check_operator) check_operator:  

      (check_literal) check_literal:lit=' ,' idx=33 ''
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=33 ''
      (check_literal) check_literal  ret0 Empty test string
     (check_operator) ret0:is comma: 0

     (check_function) check_function: ''
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=32 ' '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=33 ''
      (check_literal) check_literal  ret0 Empty test string

      (check_literal) check_literal:lit=' "' idx=32 ' '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=33 ''
      (check_literal) check_literal  ret0 Empty test string

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: ''
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname '':
       (check_vname) check_vname ret0 '':
      (check_variable) check_variable:ret0 
     (check_atom) check_atom:ret1

     (check_sub_expr) check_sub_expr:

      (check_literal) check_literal:lit=' (' idx=32 ' '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'(' idx=33 ''
      (check_literal) check_literal  ret0 Empty test string
     (check_sub_expr) check_sub_expr: ret0
    (check_eitem) check_eitem:ret0
   (scan_expression) scan_expression: ret1 ' ' commas:0
  (scan_command) scan_command: ret1 =>'PAUSE'
 (scan_command) 
ENDEXP
   Frst:0 T:')' exptype:i
Pop 4
Pop '('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: PAUSE type:17
 (op_stack_print) 
------------------

(  output_sub_end)
 (token_is_function) 
token_is_function:
 (token_is_function) PAUSE is function
Pop 5
Pop 'PAUSE'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (0)

 (op_stack_print) 
------------------

( output_function) [i,(U )] v v PAUSE
(  output_sub_end)
Finalise stack
 (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '40' nidx:32  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PAUSE' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
 BE:

Type Check Stack (0)

 BE:40
type_check_stack_push: '40'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (1)

 (type_check_stack_print) 
000: '40' type:0
 (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '40' type:i (0)
 BE:

Type Check Stack (1)

000: '40' type:i (0)
 BE:PAUSE
FN: 1 args
 (function_return_type) 
function_return_type: 'PAUSE' =>v
 (function_return_type) 
function_return_type: 'PAUSE' =>17
ret_type;17 v
typecheck_expression:Ret type of PAUSE : v
type_check_stack_pop: '40'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (0)

 (type_check_stack_print) 
------------------

FN ARG 0 ri 40 0(i)  Arg ok
type_check_stack_push: '000'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (1)

 (type_check_stack_print) 
000: '000' type:17
 (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:v (17)
 BE:

Type Check Stack (1)

000: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i '40' nidx:32  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'PAUSE' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i '40'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_FUNCTION     v rq:v 'PAUSE'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
 (process_expression_types) 
==INFIX==

infix_stack_push: '40'
infix_stack_pop: '40'
infix_stack_push: 'PAUSE(40 )'
infix_stack_pop: 'PAUSE(40 )'
 (process_expression_types) ==PAUSE(40 )==
 (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_INTEGER      i rq:i 40  0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N4 EXP_BUFF_ID_FUNCTION     v rq:v PAUSE  0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_END      U rq:i   0:

  (check_literal) check_literal:lit=':' idx=33 ''
  (check_literal) check_literal:After drop space:':' idx=33 ''
  (check_literal) check_literal  ret0 Empty test string
 (translate_file) 
cline scanned OK
*******************************************
**    WHILE KEY :ENDWH :REM Drain buffer **
*******************************************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'WHILE KEY :ENDWH :REM Drain buffer ':
     (check_vname) check_vname ret1 ' KEY :ENDWH :REM Drain buffer ':
    (check_variable) check_variable: ' KEY :ENDWH :REM Drain buffer '
    (check_variable) check_variable: Ary test ' KEY :ENDWH :REM Drain buffer '

     (check_literal) check_literal:lit='(' idx=9 ' KEY :ENDWH :REM Drain buffer '
     (check_literal) check_literal:After drop space:'(' idx=9 ' KEY :ENDWH :REM Drain buffer '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=9 ' KEY :ENDWH :REM Drain buffer '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=10 'KEY :ENDWH :REM Drain buffer '
   (check_literal)   '=' != 'K'
   (check_literal) check_literal: ret0
  (check_assignment) check_assignment:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) check_textlabel: 'WHILE KEY :ENDWH :REM Drain buffer '
   (check_textlabel) check_textlabel:ret0
  (check_proc_call) check_proc_call:ret0

  (check_command) check_command:
  (check_command) check_command: ret0

  (check_function) check_function: 'WHILE KEY :ENDWH :REM Drain buffer '
  (check_function) check_function: ret0

  (check_literal) check_literal:lit=' IF' idx=0 '    WHILE KEY :ENDWH :REM Drain buffer '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'IF' idx=4 'WHILE KEY :ENDWH :REM Drain buffer '
  (check_literal)   'I' != 'W'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' ELSEIF' idx=0 '    WHILE KEY :ENDWH :REM Drain buffer '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'ELSEIF' idx=4 'WHILE KEY :ENDWH :REM Drain buffer '
  (check_literal)   'E' != 'W'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' ELSE' idx=0 '    WHILE KEY :ENDWH :REM Drain buffer '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'ELSE' idx=4 'WHILE KEY :ENDWH :REM Drain buffer '
  (check_literal)   'E' != 'W'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' ENDIF' idx=0 '    WHILE KEY :ENDWH :REM Drain buffer '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'ENDIF' idx=4 'WHILE KEY :ENDWH :REM Drain buffer '
  (check_literal)   'E' != 'W'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' DO' idx=0 '    WHILE KEY :ENDWH :REM Drain buffer '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'DO' idx=4 'WHILE KEY :ENDWH :REM Drain buffer '
  (check_literal)   'D' != 'W'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' WHILE' idx=0 '    WHILE KEY :ENDWH :REM Drain buffer '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'WHILE' idx=4 'WHILE KEY :ENDWH :REM Drain buffer '
  (check_literal) check_literal:After while(): KEY :ENDWH :REM Drain buffer 
  (check_literal) check_literal:ret1 
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=30, ' KEY :ENDWH :REM Drain buffer '
========================================================
    WHILE KEY :ENDWH :REM Drain buffer 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'WHILE KEY :ENDWH :REM Drain buffer ':
    (check_vname) check_vname ret1 ' KEY :ENDWH :REM Drain buffer ':
   (check_variable) check_variable: ' KEY :ENDWH :REM Drain buffer '
   (check_variable) check_variable: Ary test ' KEY :ENDWH :REM Drain buffer '

    (check_literal) check_literal:lit='(' idx=9 ' KEY :ENDWH :REM Drain buffer '
    (check_literal) check_literal:After drop space:'(' idx=9 ' KEY :ENDWH :REM Drain buffer '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=9 ' KEY :ENDWH :REM Drain buffer '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=10 'KEY :ENDWH :REM Drain buffer '
  (check_literal)   '=' != 'K'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'WHILE KEY :ENDWH :REM Drain buffer '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret0

 (check_function) check_function: 'WHILE KEY :ENDWH :REM Drain buffer '
 (check_function) check_function: ret0

 (check_literal) check_literal:lit=' IF' idx=4 'WHILE KEY :ENDWH :REM Drain buffer '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'IF' idx=4 'WHILE KEY :ENDWH :REM Drain buffer '
 (check_literal)   'I' != 'W'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' ELSEIF' idx=4 'WHILE KEY :ENDWH :REM Drain buffer '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'ELSEIF' idx=4 'WHILE KEY :ENDWH :REM Drain buffer '
 (check_literal)   'E' != 'W'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' ELSE' idx=4 'WHILE KEY :ENDWH :REM Drain buffer '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'ELSE' idx=4 'WHILE KEY :ENDWH :REM Drain buffer '
 (check_literal)   'E' != 'W'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' ENDIF' idx=4 'WHILE KEY :ENDWH :REM Drain buffer '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'ENDIF' idx=4 'WHILE KEY :ENDWH :REM Drain buffer '
 (check_literal)   'E' != 'W'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' DO' idx=4 'WHILE KEY :ENDWH :REM Drain buffer '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'DO' idx=4 'WHILE KEY :ENDWH :REM Drain buffer '
 (check_literal)   'D' != 'W'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' WHILE' idx=4 'WHILE KEY :ENDWH :REM Drain buffer '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'WHILE' idx=4 'WHILE KEY :ENDWH :REM Drain buffer '
 (check_literal) check_literal:After while(): KEY :ENDWH :REM Drain buffer 
 (check_literal) check_literal:ret1 

 (scan_literal) scan_literal:lit=' WHILE' 'WHILE KEY :ENDWH :REM Drain buffer '
 (scan_literal) scan_literal:After drop space:'WHILE KEY :ENDWH :REM Drain buffer '
 (scan_literal) scan_literal:while loop:WHILE KEY :ENDWH :REM Drain buffer 
 (scan_literal) scan_literal:while loop:HILE KEY :ENDWH :REM Drain buffer 
 (scan_literal) scan_literal:while loop:ILE KEY :ENDWH :REM Drain buffer 
 (scan_literal) scan_literal:while loop:LE KEY :ENDWH :REM Drain buffer 
 (scan_literal) scan_literal:while loop:E KEY :ENDWH :REM Drain buffer 
   Frst:1 T:'WHILE' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:WHILE is not function
token_is_variable: tok:'WHILE'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:WHILE is not function
 (init_get_name) 
init_get_name:'WHILE'
 (init_get_name) 
init_get_name:'WHILE'
 (get_name) 
get_name:gn:'WHILE'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] f f WHILE
 (scan_literal) scan_literal:ret1

 (scan_expression) scan_expression: ' KEY :ENDWH :REM Drain buffer '

  (check_eitem) check_eitem: 'KEY :ENDWH :REM Drain buffer '

   (check_operator) check_operator: KEY :ENDWH :REM Drain buffer 

    (check_literal) check_literal:lit=' ,' idx=10 'KEY :ENDWH :REM Drain buffer '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=10 'KEY :ENDWH :REM Drain buffer '
    (check_literal)   ',' != 'K'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'KEY :ENDWH :REM Drain buffer '
   (check_function) check_function: ret1 Found fn=>'KEY'
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator: KEY :ENDWH :REM Drain buffer 

    (check_literal) check_literal:lit=' ,' idx=10 'KEY :ENDWH :REM Drain buffer '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=10 'KEY :ENDWH :REM Drain buffer '
    (check_literal)   ',' != 'K'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'KEY :ENDWH :REM Drain buffer '
   (check_function) check_function: ret1 Found fn=>'KEY'

   (scan_function) scan_function:
   Frst:0 T:'KEY' exptype:i
   (token_is_function) 
token_is_function:
   (token_is_function) KEY is function
   (function_return_type) 
function_return_type: 'KEY' =>i
   (function_return_type) 
function_return_type: 'KEY' =>0
process_token: 'KEY' t=>i
 Push:'KEY'
   (op_stack_print) 
------------------
   (op_stack_print) 
Operator Stack     (1)

   (op_stack_print) 
000: KEY type:0
   (op_stack_print) 
------------------

Dummy argument expression added
   Frst:0 T:'(' exptype:i
(output_sub_start)
 Push:'('
   (op_stack_print) 
------------------
   (op_stack_print) 
Operator Stack     (2)

   (op_stack_print) 
000: KEY type:0
   (op_stack_print) 
001: ( type:16
   (op_stack_print) 
------------------

   Frst:0 T:')' exptype:U
Pop 4
Pop '('
   (op_stack_print) 
------------------
   (op_stack_print) 
Operator Stack     (1)

   (op_stack_print) 
000: KEY type:0
   (op_stack_print) 
------------------

(  output_sub_end)
   (token_is_function) 
token_is_function:
   (token_is_function) KEY is function
Pop 5
Pop 'KEY'
   (op_stack_print) 
------------------
   (op_stack_print) 
Operator Stack     (0)

   (op_stack_print) 
------------------

( output_function) [U,(i )] i i KEY
(  output_sub_end)
   (scan_expression) n commas now:0

    (check_eitem) check_eitem: ' :ENDWH :REM Drain buffer '

     (check_operator) check_operator:  :ENDWH :REM Drain buffer 

      (check_literal) check_literal:lit=' ,' idx=14 ':ENDWH :REM Drain buffer '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:',' idx=14 ':ENDWH :REM Drain buffer '
      (check_literal)   ',' != ':'
      (check_literal) check_literal: ret0
     (check_operator) ret0:is comma: 0

     (check_function) check_function: ':ENDWH :REM Drain buffer '
     (check_function) check_function: ret0

     (check_atom) check_atom:

      (check_literal) check_literal:lit=' %' idx=13 ' :ENDWH :REM Drain buffer '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'%' idx=14 ':ENDWH :REM Drain buffer '
      (check_literal)   '%' != ':'
      (check_literal) check_literal: ret0

      (check_literal) check_literal:lit=' "' idx=13 ' :ENDWH :REM Drain buffer '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'"' idx=14 ':ENDWH :REM Drain buffer '
      (check_literal)   '"' != ':'
      (check_literal) check_literal: ret0

      (check_number) check_number:

       (check_float) check_float:
       (isfloatdigit) isfloatdigit:
       (check_float) check_float: ret0

       (check_integer) check_integer: ':ENDWH :REM Drain buffer '
       (check_integer) check_integer:ret0
      (check_number) check_number: ret0

      (check_variable) check_variable:

       (check_vname) check_vname ':ENDWH :REM Drain buffer ':
       (check_vname) check_vname ret0 ':ENDWH :REM Drain buffer ':
      (check_variable) check_variable:ret0 
     (check_atom) check_atom:ret1

     (check_sub_expr) check_sub_expr:

      (check_literal) check_literal:lit=' (' idx=13 ' :ENDWH :REM Drain buffer '
      (check_literal) dropping space
      (check_literal) check_literal:After drop space:'(' idx=14 ':ENDWH :REM Drain buffer '
      (check_literal)   '(' != ':'
      (check_literal) check_literal: ret0
     (check_sub_expr) check_sub_expr: ret0
    (check_eitem) check_eitem:ret0
   (scan_expression) scan_expression: ret1 ' :ENDWH :REM Drain buffer ' commas:0
  (scan_line) scan_line: ret1
Finalise stack
 (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'WHILE' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:f '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     i rq:i 'KEY' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
 BE:WHILE
type_check_stack_push: 'WHILE'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (1)

 (type_check_stack_print) 
000: 'WHILE' type:1
 (type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'WHILE' type:f (1)
 BE:

Type Check Stack (1)

000: 'WHILE' type:f (1)
 BE:

Type Check Stack (1)

000: 'WHILE' type:f (1)
 BE:KEY
FN: 0 args
 (function_return_type) 
function_return_type: 'KEY' =>i
 (function_return_type) 
function_return_type: 'KEY' =>0
ret_type;0 i
typecheck_expression:Ret type of KEY : i
type_check_stack_push: '000'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (2)

 (type_check_stack_print) 
000: 'WHILE' type:1
 (type_check_stack_print) 
001: '000' type:0
 (type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'WHILE' type:f (1)
001: '000' type:i (0)
 BE:

Type Check Stack (2)

000: 'WHILE' type:f (1)
001: '000' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'WHILE' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:f '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     i rq:i 'KEY' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f 'WHILE'  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_SUB_END      U rq:f ''  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_FUNCTION     i rq:i 'KEY'  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
 (process_expression_types) 
==INFIX==

Var: WHILE ary:4 NumIdx:0
infix_stack_push: 'WHILE()'
infix_stack_push: 'KEY()'
infix_stack_pop: 'KEY()'
 (process_expression_types) ==KEY()==
 (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     f rq:f WHILE  0:
(    output_qcode) N2 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N3 EXP_BUFF_ID_SUB_END      U rq:f   0:
(    output_qcode) N4 EXP_BUFF_ID_FUNCTION     i rq:i KEY  0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_END      U rq:i   0:

  (check_literal) check_literal:lit=':' idx=14 ':ENDWH :REM Drain buffer '
  (check_literal) check_literal:After drop space:':' idx=14 ':ENDWH :REM Drain buffer '
  (check_literal) check_literal:After while():ENDWH :REM Drain buffer 
  (check_literal) check_literal:ret1 

  (scan_literal) scan_literal:lit=':' 'ENDWH :REM Drain buffer '
  (scan_literal) scan_literal:After drop space:'ENDWH :REM Drain buffer '
  (scan_literal) scan_literal:while loop:ENDWH :REM Drain buffer 
  (scan_literal) scan_literal:ret1

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'ENDWH :REM Drain buffer ':
     (check_vname) check_vname ret1 ' :REM Drain buffer ':
    (check_variable) check_variable: ' :REM Drain buffer '
    (check_variable) check_variable: Ary test ' :REM Drain buffer '

     (check_literal) check_literal:lit='(' idx=20 ' :REM Drain buffer '
     (check_literal) check_literal:After drop space:'(' idx=20 ' :REM Drain buffer '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=20 ' :REM Drain buffer '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=21 ':REM Drain buffer '
   (check_literal)   '=' != ':'
   (check_literal) check_literal: ret0
  (check_assignment) check_assignment:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) check_textlabel: 'ENDWH :REM Drain buffer '
   (check_textlabel) check_textlabel:ret0
  (check_proc_call) check_proc_call:ret0

  (check_command) check_command:
  (check_command) check_command: ret0

  (check_function) check_function: 'ENDWH :REM Drain buffer '
  (check_function) check_function: ret0

  (check_literal) check_literal:lit=' IF' idx=15 'ENDWH :REM Drain buffer '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'IF' idx=15 'ENDWH :REM Drain buffer '
  (check_literal)   'I' != 'E'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' ELSEIF' idx=15 'ENDWH :REM Drain buffer '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'ELSEIF' idx=15 'ENDWH :REM Drain buffer '
  (check_literal)   'L' != 'N'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' ELSE' idx=15 'ENDWH :REM Drain buffer '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'ELSE' idx=15 'ENDWH :REM Drain buffer '
  (check_literal)   'L' != 'N'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' ENDIF' idx=15 'ENDWH :REM Drain buffer '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'ENDIF' idx=15 'ENDWH :REM Drain buffer '
  (check_literal)   'I' != 'W'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' DO' idx=15 'ENDWH :REM Drain buffer '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'DO' idx=15 'ENDWH :REM Drain buffer '
  (check_literal)   'D' != 'E'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' WHILE' idx=15 'ENDWH :REM Drain buffer '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'WHILE' idx=15 'ENDWH :REM Drain buffer '
  (check_literal)   'W' != 'E'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' ENDWH' idx=15 'ENDWH :REM Drain buffer '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'ENDWH' idx=15 'ENDWH :REM Drain buffer '
  (check_literal) check_literal:After while(): :REM Drain buffer 
  (check_literal) check_literal:ret1 
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=19, ' :REM Drain buffer '
========================================================
    WHILE KEY :ENDWH :REM Drain buffer 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'ENDWH :REM Drain buffer ':
    (check_vname) check_vname ret1 ' :REM Drain buffer ':
   (check_variable) check_variable: ' :REM Drain buffer '
   (check_variable) check_variable: Ary test ' :REM Drain buffer '

    (check_literal) check_literal:lit='(' idx=20 ' :REM Drain buffer '
    (check_literal) check_literal:After drop space:'(' idx=20 ' :REM Drain buffer '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=20 ' :REM Drain buffer '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=21 ':REM Drain buffer '
  (check_literal)   '=' != ':'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'ENDWH :REM Drain buffer '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret0

 (check_function) check_function: 'ENDWH :REM Drain buffer '
 (check_function) check_function: ret0

 (check_literal) check_literal:lit=' IF' idx=15 'ENDWH :REM Drain buffer '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'IF' idx=15 'ENDWH :REM Drain buffer '
 (check_literal)   'I' != 'E'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' ELSEIF' idx=15 'ENDWH :REM Drain buffer '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'ELSEIF' idx=15 'ENDWH :REM Drain buffer '
 (check_literal)   'L' != 'N'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' ELSE' idx=15 'ENDWH :REM Drain buffer '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'ELSE' idx=15 'ENDWH :REM Drain buffer '
 (check_literal)   'L' != 'N'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' ENDIF' idx=15 'ENDWH :REM Drain buffer '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'ENDIF' idx=15 'ENDWH :REM Drain buffer '
 (check_literal)   'I' != 'W'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' DO' idx=15 'ENDWH :REM Drain buffer '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'DO' idx=15 'ENDWH :REM Drain buffer '
 (check_literal)   'D' != 'E'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' WHILE' idx=15 'ENDWH :REM Drain buffer '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'WHILE' idx=15 'ENDWH :REM Drain buffer '
 (check_literal)   'W' != 'E'
 (check_literal) check_literal: ret0

 (check_literal) check_literal:lit=' ENDWH' idx=15 'ENDWH :REM Drain buffer '
 (check_literal) dropping space
 (check_literal) check_literal:After drop space:'ENDWH' idx=15 'ENDWH :REM Drain buffer '
 (check_literal) check_literal:After while(): :REM Drain buffer 
 (check_literal) check_literal:ret1 

 (scan_literal) scan_literal:lit=' ENDWH' 'ENDWH :REM Drain buffer '
 (scan_literal) scan_literal:After drop space:'ENDWH :REM Drain buffer '
 (scan_literal) scan_literal:while loop:ENDWH :REM Drain buffer 
 (scan_literal) scan_literal:while loop:NDWH :REM Drain buffer 
 (scan_literal) scan_literal:while loop:DWH :REM Drain buffer 
 (scan_literal) scan_literal:while loop:WH :REM Drain buffer 
 (scan_literal) scan_literal:while loop:H :REM Drain buffer 
   Frst:1 T:'ENDWH' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:ENDWH is not function
token_is_variable: tok:'ENDWH'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:ENDWH is not function
 (init_get_name) 
init_get_name:'ENDWH'
 (init_get_name) 
init_get_name:'ENDWH'
 (get_name) 
get_name:gn:'ENDWH'
modify_expression_type:Inittype:U Intype:i Outtype:i
( output_variable) [i,()] f f ENDWH
 (scan_literal) scan_literal:ret1
Finalise stack
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'ENDWH' nidx:0  0:
=================
 BE:ENDWH
type_check_stack_push: 'ENDWH'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'ENDWH' type:1
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'ENDWH' type:f (1)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'ENDWH' nidx:0  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f 'ENDWH'  0:
=================
(process_expression_types) 
==INFIX==

Var: ENDWH ary:15 NumIdx:0
infix_stack_push: 'ENDWH()'
infix_stack_pop: 'ENDWH()'
(process_expression_types) ==ENDWH()==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     f rq:f ENDWH  0:

 (check_literal) check_literal:lit=':' idx=21 ':REM Drain buffer '
 (check_literal) check_literal:After drop space:':' idx=21 ':REM Drain buffer '
 (check_literal) check_literal:After while():REM Drain buffer 
 (check_literal) check_literal:ret1 

 (scan_literal) scan_literal:lit=':' 'REM Drain buffer '
 (scan_literal) scan_literal:After drop space:'REM Drain buffer '
 (scan_literal) scan_literal:while loop:REM Drain buffer 
 (scan_literal) scan_literal:ret1

 (check_line) check_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'REM Drain buffer ':
    (check_vname) check_vname ret1 ' Drain buffer ':
   (check_variable) check_variable: ' Drain buffer '
   (check_variable) check_variable: Ary test ' Drain buffer '

    (check_literal) check_literal:lit='(' idx=25 ' Drain buffer '
    (check_literal) check_literal:After drop space:'(' idx=25 ' Drain buffer '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=25 ' Drain buffer '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=26 'Drain buffer '
  (check_literal)   '=' != 'D'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'REM Drain buffer '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'REM'
(check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=14, ' Drain buffer '
========================================================
    WHILE KEY :ENDWH :REM Drain buffer 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'REM Drain buffer ':
    (check_vname) check_vname ret1 ' Drain buffer ':
   (check_variable) check_variable: ' Drain buffer '
   (check_variable) check_variable: Ary test ' Drain buffer '

    (check_literal) check_literal:lit='(' idx=25 ' Drain buffer '
    (check_literal) check_literal:After drop space:'(' idx=25 ' Drain buffer '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=25 ' Drain buffer '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=26 'Drain buffer '
  (check_literal)   '=' != 'D'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'REM Drain buffer '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'REM'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'REM' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) REM is function
 (function_return_type) 
function_return_type: 'REM' =>v
 (function_return_type) 
function_return_type: 'REM' =>17
process_token: 'REM' t=>v
 Push:'REM'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: REM type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: REM type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' Drain buffer '

   (check_eitem) check_eitem: 'Drain buffer '

    (check_operator) check_operator: Drain buffer 

     (check_literal) check_literal:lit=' ,' idx=26 'Drain buffer '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=26 'Drain buffer '
     (check_literal)   ',' != 'D'
     (check_literal) check_literal: ret0
    (check_operator) ret0:is comma: 0

    (check_function) check_function: 'Drain buffer '
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=26 'Drain buffer '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=26 'Drain buffer '
     (check_literal)   '%' != 'D'
     (check_literal) check_literal: ret0

     (check_literal) check_literal:lit=' "' idx=26 'Drain buffer '
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=26 'Drain buffer '
     (check_literal)   '"' != 'D'
     (check_literal) check_literal: ret0

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: 'Drain buffer '
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname 'Drain buffer ':
      (check_vname) check_vname ret1 ' buffer ':
     (check_variable) check_variable: ' buffer '
     (check_variable) check_variable: Ary test ' buffer '

      (check_literal) check_literal:lit='(' idx=31 ' buffer '
      (check_literal) check_literal:After drop space:'(' idx=31 ' buffer '
      (check_literal)   '(' != ' '
      (check_literal) check_literal: ret0
     (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
    (check_variable) check_variable:ret1 
   (check_atom) check_atom:ret1
  (check_eitem) check_eitem:ret1

  (scan_eitem) scan_eitem:

   (check_operator) check_operator: Drain buffer 

    (check_literal) check_literal:lit=' ,' idx=26 'Drain buffer '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:',' idx=26 'Drain buffer '
    (check_literal)   ',' != 'D'
    (check_literal) check_literal: ret0
   (check_operator) ret0:is comma: 0

   (check_function) check_function: 'Drain buffer '
   (check_function) check_function: ret0

   (check_atom) check_atom:

    (check_literal) check_literal:lit=' %' idx=26 'Drain buffer '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'%' idx=26 'Drain buffer '
    (check_literal)   '%' != 'D'
    (check_literal) check_literal: ret0

    (check_literal) check_literal:lit=' "' idx=26 'Drain buffer '
    (check_literal) dropping space
    (check_literal) check_literal:After drop space:'"' idx=26 'Drain buffer '
    (check_literal)   '"' != 'D'
    (check_literal) check_literal: ret0

    (check_number) check_number:

     (check_float) check_float:
     (isfloatdigit) isfloatdigit:
     (check_float) check_float: ret0

     (check_integer) check_integer: 'Drain buffer '
     (check_integer) check_integer:ret0
    (check_number) check_number: ret0

    (check_variable) check_variable:

     (check_vname) check_vname 'Drain buffer ':
     (check_vname) check_vname ret1 ' buffer ':
    (check_variable) check_variable: ' buffer '
    (check_variable) check_variable: Ary test ' buffer '

     (check_literal) check_literal:lit='(' idx=31 ' buffer '
     (check_literal) check_literal:After drop space:'(' idx=31 ' buffer '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 
  (check_atom) check_atom:ret1

  (scan_atom) scan_atom:

   (check_literal) check_literal:lit=' %' idx=26 'Drain buffer '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=26 'Drain buffer '
   (check_literal)   '%' != 'D'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=26 'Drain buffer '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=26 'Drain buffer '
   (check_literal)   '"' != 'D'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'Drain buffer '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'Drain buffer ':
    (check_vname) check_vname ret1 ' buffer ':
   (check_variable) check_variable: ' buffer '
   (check_variable) check_variable: Ary test ' buffer '

    (check_literal) check_literal:lit='(' idx=31 ' buffer '
    (check_literal) check_literal:After drop space:'(' idx=31 ' buffer '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (scan_variable) scan_variable:

   (scan_vname) scan_vname: 'Drain buffer '
   (scan_vname) scan_vname: ret1 'Drain'
  (scan_variable) scan_variable: ' buffer ' vname='Drain'
  (scan_variable) scan_variable: Ary test ' buffer '

   (check_literal) check_literal:lit='(' idx=31 ' buffer '
   (check_literal) check_literal:After drop space:'(' idx=31 ' buffer '
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (scan_variable) scan_variable:ret1 vname='Drain' is str:0 int:0 flt:1 ary:0
   Frst:0 T:'Drain' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:Drain is not function
token_is_variable: tok:'Drain'
 (token_is_function) 
token_is_function:
 (token_is_function) 
token_is_function:Drain is not function
 (init_get_name) 
init_get_name:'Drain'
 (init_get_name) 
init_get_name:'Drain'
 (get_name) 
get_name:gn:'Drain'
process_token:type:U req_type:i
modify_expression_type:Inittype:U Intype:f Outtype:f
( output_variable) [f,(U )] f f Drain
 (print_var_info) 
VAR INFO: '             Drain' gbl:0 ref:1 int:0 flt:1 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
 (scan_atom) scan_atom:ret1
(scan_expression) n commas now:0

 (check_eitem) check_eitem: ' buffer '

  (check_operator) check_operator:  buffer 

   (check_literal) check_literal:lit=' ,' idx=32 'buffer '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=32 'buffer '
   (check_literal)   ',' != 'b'
   (check_literal) check_literal: ret0
  (check_operator) ret0:is comma: 0

  (check_function) check_function: 'buffer '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=31 ' buffer '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=32 'buffer '
   (check_literal)   '%' != 'b'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=31 ' buffer '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=32 'buffer '
   (check_literal)   '"' != 'b'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'buffer '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'buffer ':
    (check_vname) check_vname ret1 ' ':
   (check_variable) check_variable: ' '
   (check_variable) check_variable: Ary test ' '

    (check_literal) check_literal:lit='(' idx=38 ' '
    (check_literal) check_literal:After drop space:'(' idx=38 ' '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) check_atom:ret1
(check_eitem) check_eitem:ret1

 (scan_eitem) scan_eitem:

  (check_operator) check_operator:  buffer 

   (check_literal) check_literal:lit=' ,' idx=32 'buffer '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=32 'buffer '
   (check_literal)   ',' != 'b'
   (check_literal) check_literal: ret0
  (check_operator) ret0:is comma: 0

  (check_function) check_function: 'buffer '
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=31 ' buffer '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=32 'buffer '
   (check_literal)   '%' != 'b'
   (check_literal) check_literal: ret0

   (check_literal) check_literal:lit=' "' idx=31 ' buffer '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=32 'buffer '
   (check_literal)   '"' != 'b'
   (check_literal) check_literal: ret0

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: 'buffer '
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname 'buffer ':
    (check_vname) check_vname ret1 ' ':
   (check_variable) check_variable: ' '
   (check_variable) check_variable: Ary test ' '

    (check_literal) check_literal:lit='(' idx=38 ' '
    (check_literal) check_literal:After drop space:'(' idx=38 ' '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 
 (check_atom) check_atom:ret1

 (scan_atom) scan_atom:

  (check_literal) check_literal:lit=' %' idx=31 ' buffer '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'%' idx=32 'buffer '
  (check_literal)   '%' != 'b'
  (check_literal) check_literal: ret0

  (check_literal) check_literal:lit=' "' idx=31 ' buffer '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'"' idx=32 'buffer '
  (check_literal)   '"' != 'b'
  (check_literal) check_literal: ret0

  (check_number) check_number:

   (check_float) check_float:
   (isfloatdigit) isfloatdigit:
   (check_float) check_float: ret0

   (check_integer) check_integer: 'buffer '
   (check_integer) check_integer:ret0
  (check_number) check_number: ret0

  (check_variable) check_variable:

   (check_vname) check_vname 'buffer ':
   (check_vname) check_vname ret1 ' ':
  (check_variable) check_variable: ' '
  (check_variable) check_variable: Ary test ' '

   (check_literal) check_literal:lit='(' idx=38 ' '
   (check_literal) check_literal:After drop space:'(' idx=38 ' '
   (check_literal)   '(' != ' '
   (check_literal) check_literal: ret0
  (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
 (check_variable) check_variable:ret1 

 (scan_variable) scan_variable:

  (scan_vname) scan_vname: ' buffer '
  (scan_vname) scan_vname: ret1 'buffer'
 (scan_variable) scan_variable: ' ' vname='buffer'
 (scan_variable) scan_variable: Ary test ' '

  (check_literal) check_literal:lit='(' idx=38 ' '
  (check_literal) check_literal:After drop space:'(' idx=38 ' '
  (check_literal)   '(' != ' '
  (check_literal) check_literal: ret0
 (scan_variable) scan_variable:ret1 vname='buffer' is str:0 int:0 flt:1 ary:0
   Frst:0 T:'buffer' exptype:f
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:buffer is not function
token_is_variable: tok:'buffer'
(token_is_function) 
token_is_function:
(token_is_function) 
token_is_function:buffer is not function
(init_get_name) 
init_get_name:'buffer'
(init_get_name) 
init_get_name:'buffer'
(get_name) 
get_name:gn:'buffer'
process_token:type:f req_type:i
modify_expression_type:Inittype:f Intype:f Outtype:f
( output_variable) [f,(U )] f f buffer
(print_var_info) 
VAR INFO: '            buffer' gbl:0 ref:1 int:0 flt:1 str:0 ary:0 max_str:0 max_ary:0 num_ind:0
(scan_atom) scan_atom:ret1
(scan_expression) n commas now:0

 (check_eitem) check_eitem: ' '

  (check_operator) check_operator:  

   (check_literal) check_literal:lit=' ,' idx=39 ''
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:',' idx=39 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_operator) ret0:is comma: 0

  (check_function) check_function: ''
  (check_function) check_function: ret0

  (check_atom) check_atom:

   (check_literal) check_literal:lit=' %' idx=38 ' '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'%' idx=39 ''
   (check_literal) check_literal  ret0 Empty test string

   (check_literal) check_literal:lit=' "' idx=38 ' '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'"' idx=39 ''
   (check_literal) check_literal  ret0 Empty test string

   (check_number) check_number:

    (check_float) check_float:
    (isfloatdigit) isfloatdigit:
    (check_float) check_float: ret0

    (check_integer) check_integer: ''
    (check_integer) check_integer:ret0
   (check_number) check_number: ret0

   (check_variable) check_variable:

    (check_vname) check_vname '':
    (check_vname) check_vname ret0 '':
   (check_variable) check_variable:ret0 
  (check_atom) check_atom:ret1

  (check_sub_expr) check_sub_expr:

   (check_literal) check_literal:lit=' (' idx=38 ' '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'(' idx=39 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_sub_expr) check_sub_expr: ret0
 (check_eitem) check_eitem:ret0
(scan_expression) scan_expression: ret1 ' ' commas:0
(scan_command) scan_command: ret1 =>'REM'
(scan_command) 
ENDEXP
   Frst:0 T:')' exptype:f
Pop 4
Pop '('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: REM type:17
(op_stack_print) 
------------------

(  output_sub_end)
(token_is_function) 
token_is_function:
(token_is_function) REM is function
Pop 5
Pop 'REM'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_function) [f,(U )] v v REM
(  output_sub_end)
Finalise stack
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'Drain' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'buffer' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'REM' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
 BE:

Type Check Stack (0)

 BE:Drain
type_check_stack_push: 'Drain'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (1)

(type_check_stack_print) 
000: 'Drain' type:1
(type_check_stack_print) 
------------------


Type Check Stack (1)

000: 'Drain' type:f (1)
 BE:buffer
type_check_stack_push: 'buffer'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (2)

(type_check_stack_print) 
000: 'Drain' type:1
(type_check_stack_print) 
001: 'buffer' type:1
(type_check_stack_print) 
------------------


Type Check Stack (2)

000: 'Drain' type:f (1)
001: 'buffer' type:f (1)
 BE:

Type Check Stack (2)

000: 'Drain' type:f (1)
001: 'buffer' type:f (1)
 BE:REM
FN: 0 args
(function_return_type) 
function_return_type: 'REM' =>v
(function_return_type) 
function_return_type: 'REM' =>17
ret_type;17 v
typecheck_expression:Ret type of REM : v
type_check_stack_push: '000'
(type_check_stack_print) 
------------------
(type_check_stack_print) 
Type Check Stack     (3)

(type_check_stack_print) 
000: 'Drain' type:1
(type_check_stack_print) 
001: 'buffer' type:1
(type_check_stack_print) 
002: '000' type:17
(type_check_stack_print) 
------------------


Type Check Stack (3)

000: 'Drain' type:f (1)
001: 'buffer' type:f (1)
002: '000' type:v (17)
 BE:

Type Check Stack (3)

000: 'Drain' type:f (1)
001: 'buffer' type:f (1)
002: '000' type:v (17)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'Drain' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f 'buffer' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'REM' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     f rq:f 'Drain'  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     f rq:f 'buffer'  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_FUNCTION     v rq:v 'REM'  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
(process_expression_types) 
==INFIX==

Var: Drain ary:0 NumIdx:0
infix_stack_push: 'Drain'
Var: buffer ary:0 NumIdx:0
infix_stack_push: 'buffer'
infix_stack_push: 'REM()'
infix_stack_pop: 'REM()'
(process_expression_types) ==REM()==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     f rq:f Drain  0:
(    output_qcode) N3 EXP_BUFF_ID_VARIABLE     f rq:f buffer  0:
(    output_qcode) N4 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N5 EXP_BUFF_ID_FUNCTION     v rq:v REM  0:
(    output_qcode) N6 EXP_BUFF_ID_SUB_END      U rq:i   0:

 (check_literal) check_literal:lit=':' idx=39 ''
 (check_literal) check_literal:After drop space:':' idx=39 ''
 (check_literal) check_literal  ret0 Empty test string
(translate_file) 
cline scanned OK
********************
**    GET :RETURN **
********************


 (scan_cline) scan_cline:

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'GET :RETURN ':
     (check_vname) check_vname ret1 ' :RETURN ':
    (check_variable) check_variable: ' :RETURN '
    (check_variable) check_variable: Ary test ' :RETURN '

     (check_literal) check_literal:lit='(' idx=7 ' :RETURN '
     (check_literal) check_literal:After drop space:'(' idx=7 ' :RETURN '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=7 ' :RETURN '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=8 ':RETURN '
   (check_literal)   '=' != ':'
   (check_literal) check_literal: ret0
  (check_assignment) check_assignment:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) check_textlabel: 'GET :RETURN '
   (check_textlabel) check_textlabel:ret0
  (check_proc_call) check_proc_call:ret0

  (check_command) check_command:
  (check_command) check_command: ret0

  (check_function) check_function: 'GET :RETURN '
  (check_function) check_function: ret1 Found fn=>'GET'
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=9, ' :RETURN '
========================================================
    GET :RETURN 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'GET :RETURN ':
    (check_vname) check_vname ret1 ' :RETURN ':
   (check_variable) check_variable: ' :RETURN '
   (check_variable) check_variable: Ary test ' :RETURN '

    (check_literal) check_literal:lit='(' idx=7 ' :RETURN '
    (check_literal) check_literal:After drop space:'(' idx=7 ' :RETURN '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=7 ' :RETURN '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=8 ':RETURN '
  (check_literal)   '=' != ':'
  (check_literal) check_literal: ret0
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'GET :RETURN '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret0

 (check_function) check_function: 'GET :RETURN '
 (check_function) check_function: ret1 Found fn=>'GET'
(scan_line) scan_line:check_command: 

 (scan_function) scan_function:
   Frst:1 T:'GET' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) GET is function
 (function_return_type) 
function_return_type: 'GET' =>i
 (function_return_type) 
function_return_type: 'GET' =>0
process_token: 'GET' t=>i
 Push:'GET'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: GET type:0
 (op_stack_print) 
------------------

Dummy argument expression added
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: GET type:0
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------

   Frst:0 T:')' exptype:U
Pop 4
Pop '('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: GET type:0
 (op_stack_print) 
------------------

(  output_sub_end)
 (token_is_function) 
token_is_function:
 (token_is_function) GET is function
Pop 5
Pop 'GET'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (0)

 (op_stack_print) 
------------------

( output_function) [U,(U )] i i GET
(  output_sub_end)
Finalise stack
 (process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     i rq:i 'GET' nidx:1030644992  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1768711007  0:
=================
 BE:

Type Check Stack (0)

 BE:

Type Check Stack (0)

 BE:GET
FN: 0 args
 (function_return_type) 
function_return_type: 'GET' =>i
 (function_return_type) 
function_return_type: 'GET' =>0
ret_type;0 i
typecheck_expression:Ret type of GET : i
type_check_stack_push: '000'
 (type_check_stack_print) 
------------------
 (type_check_stack_print) 
Type Check Stack     (1)

 (type_check_stack_print) 
000: '000' type:0
 (type_check_stack_print) 
------------------


Type Check Stack (1)

000: '000' type:i (0)
 BE:

Type Check Stack (1)

000: '000' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     i rq:i 'GET' nidx:1030644992  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:1768711007  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_SUB_START    U rq:i ''  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_FUNCTION     i rq:i 'GET'  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_END      U rq:i ''  0:
=================
 (process_expression_types) 
==INFIX==

infix_stack_push: 'GET()'
infix_stack_pop: 'GET()'
 (process_expression_types) ==GET()==
 (process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N3 EXP_BUFF_ID_FUNCTION     i rq:i GET  0:
(    output_qcode) N4 EXP_BUFF_ID_SUB_END      U rq:i   0:

  (check_literal) check_literal:lit=':' idx=8 ':RETURN '
  (check_literal) check_literal:After drop space:':' idx=8 ':RETURN '
  (check_literal) check_literal:After while():RETURN 
  (check_literal) check_literal:ret1 

  (scan_literal) scan_literal:lit=':' 'RETURN '
  (scan_literal) scan_literal:After drop space:'RETURN '
  (scan_literal) scan_literal:while loop:RETURN 
  (scan_literal) scan_literal:ret1

  (check_line) check_line:

   (check_assignment) check_assignment:

    (check_variable) check_variable:

     (check_vname) check_vname 'RETURN ':
     (check_vname) check_vname ret1 ' ':
    (check_variable) check_variable: ' '
    (check_variable) check_variable: Ary test ' '

     (check_literal) check_literal:lit='(' idx=15 ' '
     (check_literal) check_literal:After drop space:'(' idx=15 ' '
     (check_literal)   '(' != ' '
     (check_literal) check_literal: ret0
    (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
   (check_variable) check_variable:ret1 

   (check_literal) check_literal:lit=' =' idx=15 ' '
   (check_literal) dropping space
   (check_literal) check_literal:After drop space:'=' idx=16 ''
   (check_literal) check_literal  ret0 Empty test string
  (check_assignment) check_assignment:ret0

  (check_proc_call) check_proc_call:

   (check_textlabel) check_textlabel: 'RETURN '
   (check_textlabel) check_textlabel:ret0
  (check_proc_call) check_proc_call:ret0

  (check_command) check_command:
  (check_command) check_command: ret1 found=> 'RETURN'
 (check_line) check_line:ret1
(scan_cline) scan_cline: Checked len=1, ' '
========================================================
    GET :RETURN 
========================================================
(output_expression_start)

 (scan_line) scan_line:

  (check_assignment) check_assignment:

   (check_variable) check_variable:

    (check_vname) check_vname 'RETURN ':
    (check_vname) check_vname ret1 ' ':
   (check_variable) check_variable: ' '
   (check_variable) check_variable: Ary test ' '

    (check_literal) check_literal:lit='(' idx=15 ' '
    (check_literal) check_literal:After drop space:'(' idx=15 ' '
    (check_literal)   '(' != ' '
    (check_literal) check_literal: ret0
   (check_variable) check_variable:ret1 vname='' is str:0 int:0 flt:1 ary:0
  (check_variable) check_variable:ret1 

  (check_literal) check_literal:lit=' =' idx=15 ' '
  (check_literal) dropping space
  (check_literal) check_literal:After drop space:'=' idx=16 ''
  (check_literal) check_literal  ret0 Empty test string
 (check_assignment) check_assignment:ret0

 (check_proc_call) check_proc_call:

  (check_textlabel) check_textlabel: 'RETURN '
  (check_textlabel) check_textlabel:ret0
 (check_proc_call) check_proc_call:ret0

 (check_command) check_command:
 (check_command) check_command: ret1 found=> 'RETURN'
(scan_line) scan_line:check_command: 

 (scan_command) scan_command:
   Frst:1 T:'RETURN' exptype:U
 (token_is_function) 
token_is_function:
 (token_is_function) RETURN is function
 (function_return_type) 
function_return_type: 'RETURN' =>v
 (function_return_type) 
function_return_type: 'RETURN' =>17
process_token: 'RETURN' t=>v
 Push:'RETURN'
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (1)

 (op_stack_print) 
000: RETURN type:17
 (op_stack_print) 
------------------

 (scan_command) 
STARTEXP
   Frst:0 T:'(' exptype:U
(output_sub_start)
 Push:'('
 (op_stack_print) 
------------------
 (op_stack_print) 
Operator Stack     (2)

 (op_stack_print) 
000: RETURN type:17
 (op_stack_print) 
001: ( type:16
 (op_stack_print) 
------------------


  (scan_expression) scan_expression: ' '

   (check_eitem) check_eitem: ''

    (check_operator) check_operator: 

     (check_literal) check_literal:lit=' ,' idx=16 ''
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:',' idx=16 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_operator) ret0:is comma: 0

    (check_function) check_function: ''
    (check_function) check_function: ret0

    (check_atom) check_atom:

     (check_literal) check_literal:lit=' %' idx=16 ''
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'%' idx=16 ''
     (check_literal) check_literal  ret0 Empty test string

     (check_literal) check_literal:lit=' "' idx=16 ''
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'"' idx=16 ''
     (check_literal) check_literal  ret0 Empty test string

     (check_number) check_number:

      (check_float) check_float:
      (isfloatdigit) isfloatdigit:
      (check_float) check_float: ret0

      (check_integer) check_integer: ''
      (check_integer) check_integer:ret0
     (check_number) check_number: ret0

     (check_variable) check_variable:

      (check_vname) check_vname '':
      (check_vname) check_vname ret0 '':
     (check_variable) check_variable:ret0 
    (check_atom) check_atom:ret1

    (check_sub_expr) check_sub_expr:

     (check_literal) check_literal:lit=' (' idx=16 ''
     (check_literal) dropping space
     (check_literal) check_literal:After drop space:'(' idx=16 ''
     (check_literal) check_literal  ret0 Empty test string
    (check_sub_expr) check_sub_expr: ret0
   (check_eitem) check_eitem:ret0
  (scan_expression) scan_expression: ret1 '' commas:0
 (scan_command) scan_command: ret1 =>'RETURN'
(scan_command) 
ENDEXP
   Frst:0 T:')' exptype:U
Pop 4
Pop '('
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (1)

(op_stack_print) 
000: RETURN type:17
(op_stack_print) 
------------------

(  output_sub_end)
(token_is_function) 
token_is_function:
(token_is_function) RETURN is function
Pop 5
Pop 'RETURN'
(op_stack_print) 
------------------
(op_stack_print) 
Operator Stack     (0)

(op_stack_print) 
------------------

( output_function) [U,(U )] v v RETURN
(  output_sub_end)
Finalise stack
(process_expression_types) 
process_expression_types:
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i '' nidx:32766  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:0  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     v rq:v 'RETURN' nidx:1768711007  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i '' nidx:32766  0:
=================
 BE:

Type Check Stack (0)

 BE:

Type Check Stack (0)

 BE:RETURN
FN: 1 args
(function_return_type) 
function_return_type: 'RETURN' =>v
(function_return_type) 
function_return_type: 'RETURN' =>17
ret_type;17 v
typecheck_expression:Ret type of RETURN : v
type_check_stack_pop: Operator stack empty