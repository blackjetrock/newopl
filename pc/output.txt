
========================================================
LOCAL A, B
========================================================
(output_expression_start)
========================================================
LOCAL X%, Y%
========================================================
(output_expression_start)
========================================================
LOCAL F$(10)
========================================================
(output_expression_start)
Finalise stack
========================================================
UDG(1, 2, 3,   4,   5, 6, 7, 8, 9)
========================================================
(output_expression_start)
(  output_integer) [i,(U )] i i 1
(  output_integer) [i,(U )] i i 2
(  output_integer) [i,(U )] i i 3
(  output_integer) [i,(U )] i i 4
(  output_integer) [i,(U )] i i 5
(  output_integer) [i,(U )] i i 6
(  output_integer) [i,(U )] i i 7
(  output_integer) [i,(U )] i i 8
(  output_integer) [i,(U )] i i 9
( output_function) [i,(U )] U U UDG
Finalise stack
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 4  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 5  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 6  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 7  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 8  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 9  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     U rq:U UDG  0:
=================
 BE:1

Type Check Stack (1)

000: '1' type:0
 BE:2

Type Check Stack (2)

000: '1' type:0
001: '2' type:0
 BE:3

Type Check Stack (3)

000: '1' type:0
001: '2' type:0
002: '3' type:0
 BE:4

Type Check Stack (4)

000: '1' type:0
001: '2' type:0
002: '3' type:0
003: '4' type:0
 BE:5

Type Check Stack (5)

000: '1' type:0
001: '2' type:0
002: '3' type:0
003: '4' type:0
004: '5' type:0
 BE:6

Type Check Stack (6)

000: '1' type:0
001: '2' type:0
002: '3' type:0
003: '4' type:0
004: '5' type:0
005: '6' type:0
 BE:7

Type Check Stack (7)

000: '1' type:0
001: '2' type:0
002: '3' type:0
003: '4' type:0
004: '5' type:0
005: '6' type:0
006: '7' type:0
 BE:8

Type Check Stack (8)

000: '1' type:0
001: '2' type:0
002: '3' type:0
003: '4' type:0
004: '5' type:0
005: '6' type:0
006: '7' type:0
007: '8' type:0
 BE:9

Type Check Stack (9)

000: '1' type:0
001: '2' type:0
002: '3' type:0
003: '4' type:0
004: '5' type:0
005: '6' type:0
006: '7' type:0
007: '8' type:0
008: '9' type:0
 BE:UDG
FN: 9 args
FN ARG 8 r? 9 0(i)  Arg not OK
FN ARG 7 r? 8 0(i)  Arg not OK
FN ARG 6 r? 7 0(i)  Arg not OK
FN ARG 5 r? 6 0(i)  Arg not OK
FN ARG 4 r? 5 0(i)  Arg not OK
FN ARG 3 r? 4 0(i)  Arg not OK
FN ARG 2 r? 3 0(i)  Arg not OK
FN ARG 1 r? 2 0(i)  Arg not OK
FN ARG 0 r? 1 0(i)  Arg not OK

Type Check Stack (1)

000: '000' type:63
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 4  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 5  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 6  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 7  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 8  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 9  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     U rq:U UDG  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i 1  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_INTEGER      i rq:i 4  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:i 5  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i 6  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_INTEGER      i rq:i 7  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_INTEGER      i rq:i 8  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_INTEGER      i rq:i 9  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_FUNCTION     U rq:U UDG  0:
=================
========================================================
UDG(1, 2. 1.3, 4,   5, 6, 7, 8, 9)
========================================================
(output_expression_start)
(  output_integer) [i,(U )] i i 1
(    output_float) [f,(U )] f f 2.
(    output_float) [f,(U )] f f 1.3
(  output_integer) [i,(U )] i i 4
(  output_integer) [i,(U )] i i 5
(  output_integer) [i,(U )] i i 6
(  output_integer) [i,(U )] i i 7
(  output_integer) [i,(U )] i i 8
(  output_integer) [i,(U )] i i 9
( output_function) [i,(U )] U U UDG
Finalise stack
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FLT          f rq:f 2.  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FLT          f rq:f 1.3  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 4  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 5  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 6  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 7  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 8  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 9  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     U rq:U UDG  0:
=================
 BE:1

Type Check Stack (1)

000: '1' type:0
 BE:2.

Type Check Stack (2)

000: '1' type:0
001: '2.' type:1
 BE:1.3

Type Check Stack (3)

000: '1' type:0
001: '2.' type:1
002: '1.3' type:1
 BE:4

Type Check Stack (4)

000: '1' type:0
001: '2.' type:1
002: '1.3' type:1
003: '4' type:0
 BE:5

Type Check Stack (5)

000: '1' type:0
001: '2.' type:1
002: '1.3' type:1
003: '4' type:0
004: '5' type:0
 BE:6

Type Check Stack (6)

000: '1' type:0
001: '2.' type:1
002: '1.3' type:1
003: '4' type:0
004: '5' type:0
005: '6' type:0
 BE:7

Type Check Stack (7)

000: '1' type:0
001: '2.' type:1
002: '1.3' type:1
003: '4' type:0
004: '5' type:0
005: '6' type:0
006: '7' type:0
 BE:8

Type Check Stack (8)

000: '1' type:0
001: '2.' type:1
002: '1.3' type:1
003: '4' type:0
004: '5' type:0
005: '6' type:0
006: '7' type:0
007: '8' type:0
 BE:9

Type Check Stack (9)

000: '1' type:0
001: '2.' type:1
002: '1.3' type:1
003: '4' type:0
004: '5' type:0
005: '6' type:0
006: '7' type:0
007: '8' type:0
008: '9' type:0
 BE:UDG
FN: 9 args
FN ARG 8 r? 9 0(i)  Arg not OK
FN ARG 7 r? 8 0(i)  Arg not OK
FN ARG 6 r? 7 0(i)  Arg not OK
FN ARG 5 r? 6 0(i)  Arg not OK
FN ARG 4 r? 5 0(i)  Arg not OK
FN ARG 3 r? 4 0(i)  Arg not OK
FN ARG 2 r? 1.3 1(f)  Arg not OK
FN ARG 1 r? 2. 1(f)  Arg not OK
FN ARG 0 r? 1 0(i)  Arg not OK

Type Check Stack (1)

000: '000' type:63
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FLT          f rq:f 2.  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FLT          f rq:f 1.3  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 4  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 5  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 6  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 7  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 8  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 9  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     U rq:U UDG  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i 1  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_FLT          f rq:f 2.  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_FLT          f rq:f 1.3  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_INTEGER      i rq:i 4  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:i 5  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i 6  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_INTEGER      i rq:i 7  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_INTEGER      i rq:i 8  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_INTEGER      i rq:i 9  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_FUNCTION     U rq:U UDG  0:
=================
========================================================
UDG(1, 2, 3.4, 4.4, 5, 6, 7, 8 ,9)
========================================================
(output_expression_start)
(  output_integer) [i,(U )] i i 1
(  output_integer) [i,(U )] i i 2
(    output_float) [f,(U )] f f 3.4
(    output_float) [f,(U )] f f 4.4
(  output_integer) [i,(U )] i i 5
(  output_integer) [i,(U )] i i 6
(  output_integer) [i,(U )] i i 7
(  output_integer) [i,(U )] i i 8
(  output_integer) [i,(U )] i i 9
( output_function) [i,(U )] U U UDG
Finalise stack
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FLT          f rq:f 3.4  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FLT          f rq:f 4.4  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 5  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 6  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 7  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 8  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 9  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     U rq:U UDG  0:
=================
 BE:1

Type Check Stack (1)

000: '1' type:0
 BE:2

Type Check Stack (2)

000: '1' type:0
001: '2' type:0
 BE:3.4

Type Check Stack (3)

000: '1' type:0
001: '2' type:0
002: '3.4' type:1
 BE:4.4

Type Check Stack (4)

000: '1' type:0
001: '2' type:0
002: '3.4' type:1
003: '4.4' type:1
 BE:5

Type Check Stack (5)

000: '1' type:0
001: '2' type:0
002: '3.4' type:1
003: '4.4' type:1
004: '5' type:0
 BE:6

Type Check Stack (6)

000: '1' type:0
001: '2' type:0
002: '3.4' type:1
003: '4.4' type:1
004: '5' type:0
005: '6' type:0
 BE:7

Type Check Stack (7)

000: '1' type:0
001: '2' type:0
002: '3.4' type:1
003: '4.4' type:1
004: '5' type:0
005: '6' type:0
006: '7' type:0
 BE:8

Type Check Stack (8)

000: '1' type:0
001: '2' type:0
002: '3.4' type:1
003: '4.4' type:1
004: '5' type:0
005: '6' type:0
006: '7' type:0
007: '8' type:0
 BE:9

Type Check Stack (9)

000: '1' type:0
001: '2' type:0
002: '3.4' type:1
003: '4.4' type:1
004: '5' type:0
005: '6' type:0
006: '7' type:0
007: '8' type:0
008: '9' type:0
 BE:UDG
FN: 9 args
FN ARG 8 r? 9 0(i)  Arg not OK
FN ARG 7 r? 8 0(i)  Arg not OK
FN ARG 6 r? 7 0(i)  Arg not OK
FN ARG 5 r? 6 0(i)  Arg not OK
FN ARG 4 r? 5 0(i)  Arg not OK
FN ARG 3 r? 4.4 1(f)  Arg not OK
FN ARG 2 r? 3.4 1(f)  Arg not OK
FN ARG 1 r? 2 0(i)  Arg not OK
FN ARG 0 r? 1 0(i)  Arg not OK

Type Check Stack (1)

000: '000' type:63
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i 1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FLT          f rq:f 3.4  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FLT          f rq:f 4.4  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 5  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 6  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 7  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 8  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 9  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     U rq:U UDG  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i 1  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_FLT          f rq:f 3.4  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_FLT          f rq:f 4.4  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:i 5  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i 6  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_INTEGER      i rq:i 7  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_INTEGER      i rq:i 8  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_INTEGER      i rq:i 9  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_FUNCTION     U rq:U UDG  0:
=================
Finalise stack
========================================================
A = 1.5
========================================================
(output_expression_start)
( output_variable) [i,()] f f A
'=' is operator
Push 1
(    output_float) [f,()] f f 1.5
Finalise stack
( output_operator) [f,()] f f =
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FLT          f rq:f 1.5  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f =  0:
=================
 BE:A

Type Check Stack (1)

000: 'A' type:1
 BE:1.5

Type Check Stack (2)

000: 'A' type:1
001: '1.5' type:1
 BE::=
Found operator :=
 Mutable type 1 1
 Same type

Type Check Stack (1)

000: '000' type:1
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FLT          f rq:f 1.5  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f :=  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_FLT          f rq:f 1.5  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_OPERATOR     f rq:f :=  2: 2 1
=================
========================================================
B = 2.5
========================================================
(output_expression_start)
( output_variable) [i,()] f f B
'=' is operator
Push 1
(    output_float) [f,()] f f 2.5
Finalise stack
( output_operator) [f,()] f f =
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f B  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FLT          f rq:f 2.5  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f =  0:
=================
 BE:B

Type Check Stack (1)

000: 'B' type:1
 BE:2.5

Type Check Stack (2)

000: 'B' type:1
001: '2.5' type:1
 BE::=
Found operator :=
 Mutable type 1 1
 Same type

Type Check Stack (1)

000: '000' type:1
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f B  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FLT          f rq:f 2.5  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f :=  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f B  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_FLT          f rq:f 2.5  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_OPERATOR     f rq:f :=  2: 2 1
=================
========================================================
B  = (1+2)/(3+4)
========================================================
(output_expression_start)
( output_variable) [i,()] f f B
'=' is operator
Push 1
(  output_integer) [i,(i )] i i 1
'+' is operator
Push 1
(  output_integer) [i,(i )] i i 2
( output_operator) [i,(i )] i i +
'/' is operator
Push 1
(  output_integer) [i,(i )] i i 3
'+' is operator
Push 1
(  output_integer) [i,(i )] i i 4
( output_operator) [i,(i )] i i +
Finalise stack
( output_operator) [i,()] i i /
( output_operator) [i,()] i i =
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f B  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i +  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 4  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i +  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i /  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i =  0:
=================
 BE:B

Type Check Stack (1)

000: 'B' type:1
 BE:1

Type Check Stack (2)

000: 'B' type:1
001: '1' type:0
 BE:2

Type Check Stack (3)

000: 'B' type:1
001: '1' type:0
002: '2' type:0
 BE:+
Found operator +
 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type

Type Check Stack (2)

000: 'B' type:1
001: '000' type:0
 BE:3

Type Check Stack (3)

000: 'B' type:1
001: '000' type:0
002: '3' type:0
 BE:4

Type Check Stack (4)

000: 'B' type:1
001: '000' type:0
002: '3' type:0
003: '4' type:0
 BE:+
Found operator +
 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type

Type Check Stack (3)

000: 'B' type:1
001: '000' type:0
002: '000' type:0
 BE:/
Found operator /
 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type

Type Check Stack (2)

000: 'B' type:1
001: '000' type:0
 BE::=
Found operator :=
 Mutable type 0 1
type_with_least_conversion_from: i f => f
type_with_least_conversion_from: i f => f
 Autoconversion
 --------------
 Op1: type:0 req type:0
 Op2: type:1 req type:1
 BE:  type:1 req type:1
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f B  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i 1  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_OPERATOR     i rq:i +  2: 3 2
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i 4  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     i rq:i +  2: 6 5
(dump_exp_buffer2) N8 EXP_BUFF_ID_OPERATOR     i rq:i /  2: 7 4
=================
 Insert after 8 exp_buffer2_i:8
   Found at i:7
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f B  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i 1  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_OPERATOR     i rq:i +  2: 3 2
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i 4  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     i rq:i +  2: 6 5
(dump_exp_buffer2) N8 EXP_BUFF_ID_OPERATOR     i rq:i /  2: 7 4
(dump_exp_buffer2) N10 EXP_BUFF_ID_???          f rq:f autocon i->f  2: 8 1
=================

Type Check Stack (1)

000: '000' type:0
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f B  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i +  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 4  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i +  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i /  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i :=  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f B  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i 1  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_OPERATOR     i rq:i +  2: 3 2
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i 4  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     i rq:i +  2: 6 5
(dump_exp_buffer2) N8 EXP_BUFF_ID_OPERATOR     i rq:i /  2: 7 4
(dump_exp_buffer2) N10 EXP_BUFF_ID_???          f rq:f autocon i->f  2: 8 1
(dump_exp_buffer2) N9 EXP_BUFF_ID_OPERATOR     f rq:f :=  2: 8 1
=================
========================================================
B% = (1+2)/(3+4)
========================================================
(output_expression_start)
( output_variable) [i,()] i i B%
'=' is operator
Push 1
(  output_integer) [i,(i )] i i 1
'+' is operator
Push 1
(  output_integer) [i,(i )] i i 2
( output_operator) [i,(i )] i i +
'/' is operator
Push 1
(  output_integer) [i,(i )] i i 3
'+' is operator
Push 1
(  output_integer) [i,(i )] i i 4
( output_operator) [i,(i )] i i +
Finalise stack
( output_operator) [i,()] i i /
( output_operator) [i,()] i i =
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i B%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i +  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 4  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i +  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i /  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i =  0:
=================
 BE:B%

Type Check Stack (1)

000: 'B%' type:0
 BE:1

Type Check Stack (2)

000: 'B%' type:0
001: '1' type:0
 BE:2

Type Check Stack (3)

000: 'B%' type:0
001: '1' type:0
002: '2' type:0
 BE:+
Found operator +
 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type

Type Check Stack (2)

000: 'B%' type:0
001: '000' type:0
 BE:3

Type Check Stack (3)

000: 'B%' type:0
001: '000' type:0
002: '3' type:0
 BE:4

Type Check Stack (4)

000: 'B%' type:0
001: '000' type:0
002: '3' type:0
003: '4' type:0
 BE:+
Found operator +
 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type

Type Check Stack (3)

000: 'B%' type:0
001: '000' type:0
002: '000' type:0
 BE:/
Found operator /
 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type

Type Check Stack (2)

000: 'B%' type:0
001: '000' type:0
 BE::=
Found operator :=
 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type

Type Check Stack (1)

000: '000' type:0
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i B%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i +  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 4  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i +  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i /  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i :=  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i B%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i 1  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_OPERATOR     i rq:i +  2: 3 2
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:i 3  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i 4  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     i rq:i +  2: 6 5
(dump_exp_buffer2) N8 EXP_BUFF_ID_OPERATOR     i rq:i /  2: 7 4
(dump_exp_buffer2) N9 EXP_BUFF_ID_OPERATOR     i rq:i :=  2: 8 1
=================
========================================================
A = ((1.2 + 3.4) / (5.6 + 7.8))
========================================================
(output_expression_start)
( output_variable) [i,()] f f A
'=' is operator
Push 1
(    output_float) [f,(i U )] f f 1.2
'+' is operator
Push 1
(    output_float) [f,(i U )] f f 3.4
( output_operator) [f,(i U )] f f +
'/' is operator
Push 1
(    output_float) [f,(i U )] f f 5.6
'+' is operator
Push 1
(    output_float) [f,(i U )] f f 7.8
( output_operator) [f,(i U )] f f +
( output_operator) [U,(i )] U U /
Finalise stack
( output_operator) [i,()] i i =
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FLT          f rq:f 1.2  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FLT          f rq:f 3.4  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f +  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FLT          f rq:f 5.6  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FLT          f rq:f 7.8  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f +  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     U rq:U /  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i =  0:
=================
 BE:A

Type Check Stack (1)

000: 'A' type:1
 BE:1.2

Type Check Stack (2)

000: 'A' type:1
001: '1.2' type:1
 BE:3.4

Type Check Stack (3)

000: 'A' type:1
001: '1.2' type:1
002: '3.4' type:1
 BE:+
Found operator +
 Mutable type 1 1
 Same type

Type Check Stack (2)

000: 'A' type:1
001: '000' type:1
 BE:5.6

Type Check Stack (3)

000: 'A' type:1
001: '000' type:1
002: '5.6' type:1
 BE:7.8

Type Check Stack (4)

000: 'A' type:1
001: '000' type:1
002: '5.6' type:1
003: '7.8' type:1
 BE:+
Found operator +
 Mutable type 1 1
 Same type

Type Check Stack (3)

000: 'A' type:1
001: '000' type:1
002: '000' type:1
 BE:/
Found operator /
 Mutable type 1 1
type_with_least_conversion_from: f f => f
type_with_least_conversion_from: f f => f
 Same type

Type Check Stack (2)

000: 'A' type:1
001: '000' type:1
 BE::=
Found operator :=
 Mutable type 1 1
type_with_least_conversion_from: f f => f
type_with_least_conversion_from: f f => f
 Same type

Type Check Stack (1)

000: '000' type:1
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FLT          f rq:f 1.2  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FLT          f rq:f 3.4  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f +  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FLT          f rq:f 5.6  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FLT          f rq:f 7.8  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f +  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     U rq:U /  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i :=  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_FLT          f rq:f 1.2  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_FLT          f rq:f 3.4  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_OPERATOR     f rq:f +  2: 3 2
(dump_exp_buffer2) N5 EXP_BUFF_ID_FLT          f rq:f 5.6  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_FLT          f rq:f 7.8  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     f rq:f +  2: 6 5
(dump_exp_buffer2) N8 EXP_BUFF_ID_OPERATOR     f rq:f /  2: 7 4
(dump_exp_buffer2) N9 EXP_BUFF_ID_OPERATOR     f rq:f :=  2: 8 1
=================
========================================================
Y% = 10 * 1.5
========================================================
(output_expression_start)
( output_variable) [i,()] i i Y%
'=' is operator
Push 1
(  output_integer) [i,()] i i 10
'*' is operator
Push 1
(    output_float) [f,()] f f 1.5
Finalise stack
( output_operator) [f,()] f f *
( output_operator) [f,()] f f =
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i Y%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 10  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FLT          f rq:f 1.5  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f *  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f =  0:
=================
 BE:Y%

Type Check Stack (1)

000: 'Y%' type:0
 BE:10

Type Check Stack (2)

000: 'Y%' type:0
001: '10' type:0
 BE:1.5

Type Check Stack (3)

000: 'Y%' type:0
001: '10' type:0
002: '1.5' type:1
 BE:*
Found operator *
 Mutable type 1 0
 Autoconversion
 --------------
 Op1: type:1 req type:1
 Op2: type:0 req type:0
 BE:  type:1 req type:1
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i Y%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i 10  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_FLT          f rq:f 1.5  0:
=================
 Insert after 2 exp_buffer2_i:3
   Found at i:1
   Copied 2 to 3:
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i Y%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i 10  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_???          f rq:f autocon i->f  2: 3 2
(dump_exp_buffer2) N3 EXP_BUFF_ID_FLT          f rq:f 1.5  0:
=================

Type Check Stack (2)

000: 'Y%' type:0
001: '000' type:1
 BE::=
Found operator :=
 Mutable type 1 0
 Autoconversion
 --------------
 Op1: type:1 req type:1
 Op2: type:0 req type:0
 BE:  type:1 req type:1
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i Y%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i 10  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_???          f rq:f autocon i->f  2: 3 2
(dump_exp_buffer2) N3 EXP_BUFF_ID_FLT          f rq:f 1.5  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_OPERATOR     f rq:f *  2: 3 2
=================
 Insert after 4 exp_buffer2_i:5
   Found at i:4
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i Y%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i 10  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_???          f rq:f autocon i->f  2: 3 2
(dump_exp_buffer2) N3 EXP_BUFF_ID_FLT          f rq:f 1.5  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_OPERATOR     f rq:f *  2: 3 2
(dump_exp_buffer2) N7 EXP_BUFF_ID_???          i rq:i autocon f->i  2: 4 1
=================

Type Check Stack (1)

000: '000' type:1
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i Y%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 10  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FLT          f rq:f 1.5  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f *  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f :=  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i Y%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i 10  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_???          f rq:f autocon i->f  2: 3 2
(dump_exp_buffer2) N3 EXP_BUFF_ID_FLT          f rq:f 1.5  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_OPERATOR     f rq:f *  2: 3 2
(dump_exp_buffer2) N7 EXP_BUFF_ID_???          i rq:i autocon f->i  2: 4 1
(dump_exp_buffer2) N6 EXP_BUFF_ID_OPERATOR     i rq:i :=  2: 4 1
=================
Finalise stack
========================================================
PRINT Y%
========================================================
(output_expression_start)
( output_variable) [i,()] i i Y%
Finalise stack
( output_operator) [i,()] i i PRINT
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i Y%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i PRINT  0:
=================
 BE:Y%

Type Check Stack (1)

000: 'Y%' type:0
 BE:PRINT

Type Check Stack (1)

000: 'Y%' type:0
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i Y%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i PRINT  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i Y%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_OPERATOR     i rq:i PRINT  0:
=================
Finalise stack
========================================================
X% = 10 * Y%
========================================================
(output_expression_start)
( output_variable) [i,()] i i X%
'=' is operator
Push 1
(  output_integer) [i,()] i i 10
'*' is operator
Push 1
( output_variable) [i,()] i i Y%
Finalise stack
( output_operator) [i,()] i i *
( output_operator) [i,()] i i =
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i X%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 10  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i Y%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i *  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i =  0:
=================
 BE:X%

Type Check Stack (1)

000: 'X%' type:0
 BE:10

Type Check Stack (2)

000: 'X%' type:0
001: '10' type:0
 BE:Y%

Type Check Stack (3)

000: 'X%' type:0
001: '10' type:0
002: 'Y%' type:0
 BE:*
Found operator *
 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type

Type Check Stack (2)

000: 'X%' type:0
001: '000' type:0
 BE::=
Found operator :=
 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type

Type Check Stack (1)

000: '000' type:0
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i X%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 10  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i Y%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i *  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i :=  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i X%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i 10  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     i rq:i Y%  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 3 2
(dump_exp_buffer2) N5 EXP_BUFF_ID_OPERATOR     i rq:i :=  2: 4 1
=================
========================================================
PRINT X%
========================================================
(output_expression_start)
( output_variable) [i,()] i i X%
Finalise stack
( output_operator) [i,()] i i PRINT
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i X%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i PRINT  0:
=================
 BE:X%

Type Check Stack (1)

000: 'X%' type:0
 BE:PRINT

Type Check Stack (1)

000: 'X%' type:0
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i X%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i PRINT  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i X%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_OPERATOR     i rq:i PRINT  0:
=================
Finalise stack
========================================================
X% = 1 + A + B
========================================================
(output_expression_start)
( output_variable) [i,()] i i X%
'=' is operator
Push 1
(  output_integer) [i,()] i i 1
'+' is operator
Push 1
( output_variable) [f,()] f f A
'+' is operator
Push 1
( output_variable) [f,()] f f B
Finalise stack
( output_operator) [f,()] f f +
( output_operator) [f,()] f f +
( output_operator) [f,()] f f =
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i X%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f B  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f +  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f +  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f =  0:
=================
 BE:X%

Type Check Stack (1)

000: 'X%' type:0
 BE:1

Type Check Stack (2)

000: 'X%' type:0
001: '1' type:0
 BE:A

Type Check Stack (3)

000: 'X%' type:0
001: '1' type:0
002: 'A' type:1
 BE:B

Type Check Stack (4)

000: 'X%' type:0
001: '1' type:0
002: 'A' type:1
003: 'B' type:1
 BE:+
Found operator +
 Mutable type 1 1
 Same type

Type Check Stack (3)

000: 'X%' type:0
001: '1' type:0
002: '000' type:1
 BE:+
Found operator +
 Mutable type 1 0
 Autoconversion
 --------------
 Op1: type:1 req type:1
 Op2: type:0 req type:0
 BE:  type:1 req type:1
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i X%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i 1  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     f rq:f B  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_OPERATOR     f rq:f +  2: 4 3
=================
 Insert after 2 exp_buffer2_i:5
   Found at i:1
   Copied 4 to 5:
   Copied 3 to 4:
   Copied 2 to 3:
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i X%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i 1  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_???          f rq:f autocon i->f  2: 5 2
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     f rq:f B  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_OPERATOR     f rq:f +  2: 4 3
=================

Type Check Stack (2)

000: 'X%' type:0
001: '000' type:1
 BE::=
Found operator :=
 Mutable type 1 0
 Autoconversion
 --------------
 Op1: type:1 req type:1
 Op2: type:0 req type:0
 BE:  type:1 req type:1
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i X%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i 1  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_???          f rq:f autocon i->f  2: 5 2
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     f rq:f B  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_OPERATOR     f rq:f +  2: 4 3
(dump_exp_buffer2) N6 EXP_BUFF_ID_OPERATOR     f rq:f +  2: 5 2
=================
 Insert after 6 exp_buffer2_i:7
   Found at i:6
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i X%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i 1  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_???          f rq:f autocon i->f  2: 5 2
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     f rq:f B  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_OPERATOR     f rq:f +  2: 4 3
(dump_exp_buffer2) N6 EXP_BUFF_ID_OPERATOR     f rq:f +  2: 5 2
(dump_exp_buffer2) N9 EXP_BUFF_ID_???          i rq:i autocon f->i  2: 6 1
=================

Type Check Stack (1)

000: '000' type:1
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i X%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f B  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f +  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f +  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f :=  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i X%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i 1  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_???          f rq:f autocon i->f  2: 5 2
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     f rq:f B  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_OPERATOR     f rq:f +  2: 4 3
(dump_exp_buffer2) N6 EXP_BUFF_ID_OPERATOR     f rq:f +  2: 5 2
(dump_exp_buffer2) N9 EXP_BUFF_ID_???          i rq:i autocon f->i  2: 6 1
(dump_exp_buffer2) N8 EXP_BUFF_ID_OPERATOR     i rq:i :=  2: 6 1
=================
========================================================
PRINT X%
========================================================
(output_expression_start)
( output_variable) [i,()] i i X%
Finalise stack
( output_operator) [i,()] i i PRINT
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i X%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i PRINT  0:
=================
 BE:X%

Type Check Stack (1)

000: 'X%' type:0
 BE:PRINT

Type Check Stack (1)

000: 'X%' type:0
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i X%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i PRINT  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i X%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_OPERATOR     i rq:i PRINT  0:
=================
Finalise stack
========================================================
X% = INT(FLT(1) + A * FLT(4))
========================================================
(output_expression_start)
( output_variable) [i,()] i i X%
'=' is operator
Push 1
(  output_integer) [i,(i U )] i i 1
( output_function) [i,(i U )] U U FLT
'+' is operator
Push 1
( output_variable) [f,(i )] f f A
'*' is operator
Push 1
(  output_integer) [i,(i f )] i i 4
( output_function) [i,(i f )] f f FLT
( output_operator) [f,(i )] f f *
( output_operator) [f,(i )] U U +
( output_function) [f,(i )] i i INT
Finalise stack
( output_operator) [i,()] i i =
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i X%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 1  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     U rq:U FLT  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 4  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     f rq:f FLT  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f *  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     U rq:U +  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     i rq:i INT  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i =  0:
=================
 BE:X%

Type Check Stack (1)

000: 'X%' type:0
 BE:1

Type Check Stack (2)

000: 'X%' type:0
001: '1' type:0
 BE:FLT
FN: 2 args
FN ARG 1 r? 1 0(i)  Arg not OK
FN ARG 0 r? X% 0(i)  Arg not OK

Type Check Stack (1)

000: '000' type:0
 BE:A

Type Check Stack (2)

000: '000' type:0
001: 'A' type:1
 BE:4

Type Check Stack (3)

000: '000' type:0
001: 'A' type:1
002: '4' type:0
 BE:FLT
FN: 2 args
FN ARG 1 r? 4 0(i)  Arg not OK
FN ARG 0 r? A 1(f)  Arg not OK

Type Check Stack (2)

000: '000' type:0
001: '000' type:0
 BE:*
Found operator *
 Mutable type 0 0
 Same type
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i X%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i 1  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_FUNCTION     U rq:U FLT  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i 4  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_FUNCTION     f rq:f FLT  0:
=================
 Insert after 7 exp_buffer2_i:6
   Found at i:5
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i X%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i 1  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_FUNCTION     U rq:U FLT  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i 4  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_FUNCTION     f rq:f FLT  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_???          f rq:f autocon i->f  2: 7 3
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i X%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i 1  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_FUNCTION     U rq:U FLT  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i 4  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_FUNCTION     f rq:f FLT  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_???          f rq:f autocon i->f  2: 7 3
=================
 Insert after 3 exp_buffer2_i:7
   Found at i:2
   Copied 6 to 7:
   Copied 5 to 6:
   Copied 4 to 5:
   Copied 3 to 4:
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i X%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i 1  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_FUNCTION     U rq:U FLT  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_???          f rq:f autocon i->f  2: 7 3
(dump_exp_buffer2) N5 EXP_BUFF_ID_VARIABLE     f rq:f A  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i 4  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_FUNCTION     f rq:f FLT  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_???          f rq:f autocon i->f  2: 7 3
=================

Type Check Stack (1)

000: '000' type:0
 BE:+
Found operator +