
==========================
LOCAL A, B
==========================
(output_expression_start)
Expression buffer
=================
=================
Expression buffer
=================
=================
Expression buffer 2
===================
=================
==========================
LOCAL X%, Y%
==========================
(output_expression_start)
Expression buffer
=================
=================
Expression buffer
=================
=================
Expression buffer 2
===================
=================
==========================
LOCAL F$(10)
==========================
(output_expression_start)
Expression buffer
=================
=================
Expression buffer
=================
=================
Expression buffer 2
===================
=================
==========================

==========================
(output_expression_start)
Expression buffer
=================
=================
Expression buffer
=================
=================
Expression buffer 2
===================
=================
==========================
A = 1.5
==========================
(output_expression_start)
Expression buffer
=================
=================
Expression buffer
=================
=================
Expression buffer 2
===================
=================
( output_variable) f f A
(    output_float) f f 1.5
( output_operator) f f =
==========================
B = 2.5
==========================
(output_expression_start)
Expression buffer
=================
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     f f A
( dump_exp_buffer) EXP_BUFF_ID_FLT          f f 1.5
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     f f =
=================
 BE:A

Type Check Stack (1)

000: 'A' type:1
 BE:1.5

Type Check Stack (2)

000: 'A' type:1
001: '1.5' type:1
 BE::=

Type Check Stack (2)

000: 'A' type:1
001: '1.5' type:1
Expression buffer
=================
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     f f A
( dump_exp_buffer) EXP_BUFF_ID_FLT          f f 1.5
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     f f :=
=================
Expression buffer 2
===================
(dump_exp_buffer2) EXP_BUFF_ID_VARIABLE     f f A
(dump_exp_buffer2) EXP_BUFF_ID_FLT          f f 1.5
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     f f :=
=================
( output_variable) f f B
(    output_float) f f 2.5
( output_operator) f f =
==========================

==========================
(output_expression_start)
Expression buffer
=================
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     f f B
( dump_exp_buffer) EXP_BUFF_ID_FLT          f f 2.5
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     f f =
=================
 BE:B

Type Check Stack (1)

000: 'B' type:1
 BE:2.5

Type Check Stack (2)

000: 'B' type:1
001: '2.5' type:1
 BE::=

Type Check Stack (2)

000: 'B' type:1
001: '2.5' type:1
Expression buffer
=================
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     f f B
( dump_exp_buffer) EXP_BUFF_ID_FLT          f f 2.5
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     f f :=
=================
Expression buffer 2
===================
(dump_exp_buffer2) EXP_BUFF_ID_VARIABLE     f f B
(dump_exp_buffer2) EXP_BUFF_ID_FLT          f f 2.5
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     f f :=
=================
==========================
Y% = 10 * 1.5
==========================
(output_expression_start)
Expression buffer
=================
=================
Expression buffer
=================
=================
Expression buffer 2
===================
=================
( output_variable) i i Y%
(  output_integer) i i 10
(    output_float) f f 1.5
( output_operator) U i *
( output_operator) i i =
==========================
PRINT Y%
==========================
(output_expression_start)
Expression buffer
=================
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     i i Y%
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i i 10
( dump_exp_buffer) EXP_BUFF_ID_FLT          f f 1.5
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U i *
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     i i =
=================
 BE:Y%

Type Check Stack (1)

000: 'Y%' type:0
 BE:10

Type Check Stack (2)

000: 'Y%' type:0
001: '10' type:0
 BE:1.5

Type Check Stack (3)

000: 'Y%' type:0
001: '10' type:0
002: '1.5' type:1
 BE:*
Found operator *
 Mutable type 1 0

Type Check Stack (2)

000: 'Y%' type:0
001: '000' type:1
 BE::=

Type Check Stack (2)

000: 'Y%' type:0
001: '000' type:1
Expression buffer
=================
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     i i Y%
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i i 10
( dump_exp_buffer) EXP_BUFF_ID_FLT          f f 1.5
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U i *
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     i i :=
=================
Expression buffer 2
===================
(dump_exp_buffer2) EXP_BUFF_ID_VARIABLE     i i Y%
(dump_exp_buffer2) EXP_BUFF_ID_INTEGER      i i 10
(dump_exp_buffer2) EXP_BUFF_ID_FLT          f f 1.5
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     f f *
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     i i :=
=================
( output_variable) i i Y%
( output_operator) U U PRINT
==========================

==========================
(output_expression_start)
Expression buffer
=================
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     i i Y%
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U U PRINT
=================
 BE:Y%

Type Check Stack (1)

000: 'Y%' type:0
 BE:PRINT

Type Check Stack (1)

000: 'Y%' type:0
Expression buffer
=================
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     i i Y%
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U U PRINT
=================
Expression buffer 2
===================
(dump_exp_buffer2) EXP_BUFF_ID_VARIABLE     i i Y%
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     U U PRINT
=================
==========================
X% = 10 * Y%
==========================
(output_expression_start)
Expression buffer
=================
=================
Expression buffer
=================
=================
Expression buffer 2
===================
=================
( output_variable) i i X%
(  output_integer) i i 10
( output_variable) i i Y%
( output_operator) U i *
( output_operator) i i =
==========================
PRINT X%
==========================
(output_expression_start)
Expression buffer
=================
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     i i X%
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i i 10
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     i i Y%
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U i *
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     i i =
=================
 BE:X%

Type Check Stack (1)

000: 'X%' type:0
 BE:10

Type Check Stack (2)

000: 'X%' type:0
001: '10' type:0
 BE:Y%

Type Check Stack (3)

000: 'X%' type:0
001: '10' type:0
002: 'Y%' type:0
 BE:*
Found operator *
 Mutable type 0 0
 same type

Type Check Stack (2)

000: 'X%' type:0
001: '000' type:0
 BE::=

Type Check Stack (2)

000: 'X%' type:0
001: '000' type:0
Expression buffer
=================
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     i i X%
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i i 10
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     i i Y%
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U i *
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     i i :=
=================
Expression buffer 2
===================
(dump_exp_buffer2) EXP_BUFF_ID_VARIABLE     i i X%
(dump_exp_buffer2) EXP_BUFF_ID_INTEGER      i i 10
(dump_exp_buffer2) EXP_BUFF_ID_VARIABLE     i i Y%
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     i i *
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     i i :=
=================
( output_variable) i i X%
( output_operator) U U PRINT
==========================

==========================
(output_expression_start)
Expression buffer
=================
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     i i X%
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U U PRINT
=================
 BE:X%

Type Check Stack (1)

000: 'X%' type:0
 BE:PRINT

Type Check Stack (1)

000: 'X%' type:0
Expression buffer
=================
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     i i X%
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U U PRINT
=================
Expression buffer 2
===================
(dump_exp_buffer2) EXP_BUFF_ID_VARIABLE     i i X%
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     U U PRINT
=================
==========================
X% = 1 + A + B
==========================
(output_expression_start)
Expression buffer
=================
=================
Expression buffer
=================
=================
Expression buffer 2
===================
=================
( output_variable) i i X%
(  output_integer) i i 1
( output_variable) f f A
( output_variable) f f B
( output_operator) U f +
( output_operator) U i +
( output_operator) i i =
==========================
PRINT X%
==========================
(output_expression_start)
Expression buffer
=================
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     i i X%
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i i 1
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     f f A
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     f f B
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U f +
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U i +
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     i i =
=================
 BE:X%

Type Check Stack (1)

000: 'X%' type:0
 BE:1

Type Check Stack (2)

000: 'X%' type:0
001: '1' type:0
 BE:A

Type Check Stack (3)

000: 'X%' type:0
001: '1' type:0
002: 'A' type:1
 BE:B

Type Check Stack (4)

000: 'X%' type:0
001: '1' type:0
002: 'A' type:1
003: 'B' type:1
 BE:+
Found operator +
 Mutable type 1 1
 same type

Type Check Stack (3)

000: 'X%' type:0
001: '1' type:0
002: '000' type:1
 BE:+
Found operator +
 Mutable type 1 0

Type Check Stack (2)

000: 'X%' type:0
001: '000' type:1
 BE::=

Type Check Stack (2)

000: 'X%' type:0
001: '000' type:1
Expression buffer
=================
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     i i X%
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i i 1
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     f f A
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     f f B
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U f +
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U i +
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     i i :=
=================
Expression buffer 2
===================
(dump_exp_buffer2) EXP_BUFF_ID_VARIABLE     i i X%
(dump_exp_buffer2) EXP_BUFF_ID_INTEGER      i i 1
(dump_exp_buffer2) EXP_BUFF_ID_VARIABLE     f f A
(dump_exp_buffer2) EXP_BUFF_ID_VARIABLE     f f B
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     f f +
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     f f +
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     i i :=
=================
( output_variable) i i X%
( output_operator) U U PRINT
==========================

==========================
(output_expression_start)
Expression buffer
=================
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     i i X%
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U U PRINT
=================
 BE:X%

Type Check Stack (1)

000: 'X%' type:0
 BE:PRINT

Type Check Stack (1)

000: 'X%' type:0
Expression buffer
=================
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     i i X%
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U U PRINT
=================
Expression buffer 2
===================
(dump_exp_buffer2) EXP_BUFF_ID_VARIABLE     i i X%
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     U U PRINT
=================
==========================
X% = INT(FLT(1) + A * FLT(4))
==========================
(output_expression_start)
Expression buffer
=================
=================
Expression buffer
=================
=================
Expression buffer 2
===================
=================
( output_variable) i i X%
(output_sub_start)
(output_sub_start)
(  output_integer) i i 1
(  output_sub_end)
( output_operator) U U FLT
(  output_sub_end)
( output_variable) f f A
(output_sub_start)
(  output_integer) i i 4
(  output_sub_end)
( output_operator) f f FLT
(  output_sub_end)
( output_operator) U f *
( output_operator) U U +
(  output_sub_end)
( output_operator) i i INT
(  output_sub_end)
( output_operator) i i =
==========================

==========================
(output_expression_start)
Expression buffer
=================
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     i i X%
( dump_exp_buffer) EXP_BUFF_ID_SUB_START    U i 
( dump_exp_buffer) EXP_BUFF_ID_SUB_START    U i 
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i i 1
( dump_exp_buffer) EXP_BUFF_ID_SUB_END      U i 
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U U FLT
( dump_exp_buffer) EXP_BUFF_ID_SUB_END      U i 
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     f f A
( dump_exp_buffer) EXP_BUFF_ID_SUB_START    U i 
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i i 4
( dump_exp_buffer) EXP_BUFF_ID_SUB_END      U i 
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     f f FLT
( dump_exp_buffer) EXP_BUFF_ID_SUB_END      U i 
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U f *
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U U +
( dump_exp_buffer) EXP_BUFF_ID_SUB_END      U i 
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     i i INT
( dump_exp_buffer) EXP_BUFF_ID_SUB_END      U i 
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     i i =
=================
 BE:X%

Type Check Stack (1)

000: 'X%' type:0
 BE:

Type Check Stack (1)

000: 'X%' type:0
 BE:

Type Check Stack (1)

000: 'X%' type:0
 BE:1

Type Check Stack (2)

000: 'X%' type:0
001: '1' type:0
 BE:

Type Check Stack (2)

000: 'X%' type:0
001: '1' type:0
 BE:FLT

Type Check Stack (2)

000: 'X%' type:0
001: '1' type:0
 BE:

Type Check Stack (2)

000: 'X%' type:0
001: '1' type:0
 BE:A

Type Check Stack (3)

000: 'X%' type:0
001: '1' type:0
002: 'A' type:1
 BE:

Type Check Stack (3)

000: 'X%' type:0
001: '1' type:0
002: 'A' type:1
 BE:4

Type Check Stack (4)

000: 'X%' type:0
001: '1' type:0
002: 'A' type:1
003: '4' type:0
 BE:

Type Check Stack (4)

000: 'X%' type:0
001: '1' type:0
002: 'A' type:1
003: '4' type:0
 BE:FLT

Type Check Stack (4)

000: 'X%' type:0
001: '1' type:0
002: 'A' type:1
003: '4' type:0
 BE:

Type Check Stack (4)

000: 'X%' type:0
001: '1' type:0
002: 'A' type:1
003: '4' type:0
 BE:*
Found operator *
 Mutable type 0 1

Type Check Stack (3)

000: 'X%' type:0
001: '1' type:0
002: '000' type:0
 BE:+
Found operator +
 Mutable type 0 0
 same type

Type Check Stack (2)

000: 'X%' type:0
001: '000' type:0
 BE:

Type Check Stack (2)

000: 'X%' type:0
001: '000' type:0
 BE:INT

Type Check Stack (2)

000: 'X%' type:0
001: '000' type:0
 BE:

Type Check Stack (2)

000: 'X%' type:0
001: '000' type:0
 BE::=

Type Check Stack (2)

000: 'X%' type:0
001: '000' type:0
Expression buffer
=================
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     i i X%
( dump_exp_buffer) EXP_BUFF_ID_SUB_START    U i 
( dump_exp_buffer) EXP_BUFF_ID_SUB_START    U i 
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i i 1
( dump_exp_buffer) EXP_BUFF_ID_SUB_END      U i 
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U U FLT
( dump_exp_buffer) EXP_BUFF_ID_SUB_END      U i 
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     f f A
( dump_exp_buffer) EXP_BUFF_ID_SUB_START    U i 
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i i 4
( dump_exp_buffer) EXP_BUFF_ID_SUB_END      U i 
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     f f FLT
( dump_exp_buffer) EXP_BUFF_ID_SUB_END      U i 
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U f *
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U U +
( dump_exp_buffer) EXP_BUFF_ID_SUB_END      U i 
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     i i INT
( dump_exp_buffer) EXP_BUFF_ID_SUB_END      U i 
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     i i :=
=================
Expression buffer 2
===================
(dump_exp_buffer2) EXP_BUFF_ID_VARIABLE     i i X%
(dump_exp_buffer2) EXP_BUFF_ID_SUB_START    U i 
(dump_exp_buffer2) EXP_BUFF_ID_SUB_START    U i 
(dump_exp_buffer2) EXP_BUFF_ID_INTEGER      i i 1
(dump_exp_buffer2) EXP_BUFF_ID_SUB_END      U i 
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     U U FLT
(dump_exp_buffer2) EXP_BUFF_ID_SUB_END      U i 
(dump_exp_buffer2) EXP_BUFF_ID_VARIABLE     f f A
(dump_exp_buffer2) EXP_BUFF_ID_SUB_START    U i 
(dump_exp_buffer2) EXP_BUFF_ID_INTEGER      i i 4
(dump_exp_buffer2) EXP_BUFF_ID_SUB_END      U i 
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     f f FLT
(dump_exp_buffer2) EXP_BUFF_ID_SUB_END      U i 
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     f f *
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     i i +
(dump_exp_buffer2) EXP_BUFF_ID_SUB_END      U i 
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     i i INT
(dump_exp_buffer2) EXP_BUFF_ID_SUB_END      U i 
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     i i :=
=================
==========================
PRINT X%
==========================
(output_expression_start)
Expression buffer
=================
=================
Expression buffer
=================
=================
Expression buffer 2
===================
=================
( output_variable) i i X%
( output_operator) U U PRINT
==========================

==========================
(output_expression_start)
Expression buffer
=================
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     i i X%
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U U PRINT
=================
 BE:X%

Type Check Stack (1)

000: 'X%' type:0
 BE:PRINT

Type Check Stack (1)

000: 'X%' type:0
Expression buffer
=================
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     i i X%
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U U PRINT
=================
Expression buffer 2
===================
(dump_exp_buffer2) EXP_BUFF_ID_VARIABLE     i i X%
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     U U PRINT
=================
==========================
A = X% + Y%
==========================
(output_expression_start)
Expression buffer
=================
=================
Expression buffer
=================
=================
Expression buffer 2
===================
=================
( output_variable) f f A
( output_variable) f f X%
( output_variable) f f Y%
( output_operator) U f +
( output_operator) f f =
==========================
PRINT A
==========================
(output_expression_start)
Expression buffer
=================
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     f f A
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     f f X%
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     f f Y%
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U f +
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     f f =
=================
 BE:A

Type Check Stack (1)

000: 'A' type:1
 BE:X%

Type Check Stack (2)

000: 'A' type:1
001: 'X%' type:1
 BE:Y%

Type Check Stack (3)

000: 'A' type:1
001: 'X%' type:1
002: 'Y%' type:1
 BE:+
Found operator +
 Mutable type 1 1
 same type

Type Check Stack (2)

000: 'A' type:1
001: '000' type:1
 BE::=

Type Check Stack (2)

000: 'A' type:1
001: '000' type:1
Expression buffer
=================
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     f f A
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     f f X%
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     f f Y%
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U f +
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     f f :=
=================
Expression buffer 2
===================
(dump_exp_buffer2) EXP_BUFF_ID_VARIABLE     f f A
(dump_exp_buffer2) EXP_BUFF_ID_VARIABLE     f f X%
(dump_exp_buffer2) EXP_BUFF_ID_VARIABLE     f f Y%
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     f f +
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     f f :=
=================
( output_variable) f f A
( output_operator) U U PRINT
==========================

==========================
(output_expression_start)
Expression buffer
=================
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     f f A
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U U PRINT
=================
 BE:A

Type Check Stack (1)

000: 'A' type:1
 BE:PRINT

Type Check Stack (1)

000: 'A' type:1
Expression buffer
=================
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     f f A
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U U PRINT
=================
Expression buffer 2
===================
(dump_exp_buffer2) EXP_BUFF_ID_VARIABLE     f f A
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     U U PRINT
=================
==========================
B = 1 * 2 + A
==========================
(output_expression_start)
Expression buffer
=================
=================
Expression buffer
=================
=================
Expression buffer 2
===================
=================
( output_variable) f f B
(  output_integer) i f 1
(  output_integer) i f 2
( output_operator) U f *
( output_variable) f f A
( output_operator) U f +
( output_operator) f f =
==========================
B = 1 * ( 2 + A )
==========================
(output_expression_start)
Expression buffer
=================
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     f f B
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i f 1
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i f 2
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U f *
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     f f A
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U f +
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     f f =
=================
 BE:B

Type Check Stack (1)

000: 'B' type:1
 BE:1

Type Check Stack (2)

000: 'B' type:1
001: '1' type:0
 BE:2

Type Check Stack (3)

000: 'B' type:1
001: '1' type:0
002: '2' type:0
 BE:*
Found operator *
 Mutable type 0 0
 same type

Type Check Stack (2)

000: 'B' type:1
001: '000' type:0
 BE:A

Type Check Stack (3)

000: 'B' type:1
001: '000' type:0
002: 'A' type:1
 BE:+
Found operator +
 Mutable type 1 0

Type Check Stack (2)

000: 'B' type:1
001: '000' type:1
 BE::=

Type Check Stack (2)

000: 'B' type:1
001: '000' type:1
Expression buffer
=================
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     f f B
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i f 1
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i f 2
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U f *
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     f f A
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U f +
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     f f :=
=================
Expression buffer 2
===================
(dump_exp_buffer2) EXP_BUFF_ID_VARIABLE     f f B
(dump_exp_buffer2) EXP_BUFF_ID_INTEGER      i f 1
(dump_exp_buffer2) EXP_BUFF_ID_INTEGER      i f 2
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     i f *
(dump_exp_buffer2) EXP_BUFF_ID_VARIABLE     f f A
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     f f +
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     f f :=
=================
( output_variable) f f B
(  output_integer) i f 1
(output_sub_start)
(  output_integer) i i 2
( output_variable) f f A
( output_operator) U i +
(  output_sub_end)
(  output_sub_end)
( output_operator) U f *
( output_operator) f f =
==========================
B = 2 * (3 * ( 4 + (1 + 1)))
==========================
(output_expression_start)
Expression buffer
=================
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     f f B
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i f 1
( dump_exp_buffer) EXP_BUFF_ID_SUB_START    U i 
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i i 2
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     f f A
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U i +
( dump_exp_buffer) EXP_BUFF_ID_SUB_END      U i 
( dump_exp_buffer) EXP_BUFF_ID_SUB_END      U i 
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U f *
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     f f =
=================
 BE:B

Type Check Stack (1)

000: 'B' type:1
 BE:1

Type Check Stack (2)

000: 'B' type:1
001: '1' type:0
 BE:

Type Check Stack (2)

000: 'B' type:1
001: '1' type:0
 BE:2

Type Check Stack (3)

000: 'B' type:1
001: '1' type:0
002: '2' type:0
 BE:A

Type Check Stack (4)

000: 'B' type:1
001: '1' type:0
002: '2' type:0
003: 'A' type:1
 BE:+
Found operator +
 Mutable type 1 0

Type Check Stack (3)

000: 'B' type:1
001: '1' type:0
002: '000' type:1
 BE:

Type Check Stack (3)

000: 'B' type:1
001: '1' type:0
002: '000' type:1
 BE:

Type Check Stack (3)

000: 'B' type:1
001: '1' type:0
002: '000' type:1
 BE:*
Found operator *
 Mutable type 1 0

Type Check Stack (2)

000: 'B' type:1
001: '000' type:1
 BE::=

Type Check Stack (2)

000: 'B' type:1
001: '000' type:1
Expression buffer
=================
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     f f B
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i f 1
( dump_exp_buffer) EXP_BUFF_ID_SUB_START    U i 
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i i 2
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     f f A
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U i +
( dump_exp_buffer) EXP_BUFF_ID_SUB_END      U i 
( dump_exp_buffer) EXP_BUFF_ID_SUB_END      U i 
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U f *
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     f f :=
=================
Expression buffer 2
===================
(dump_exp_buffer2) EXP_BUFF_ID_VARIABLE     f f B
(dump_exp_buffer2) EXP_BUFF_ID_INTEGER      i f 1
(dump_exp_buffer2) EXP_BUFF_ID_SUB_START    U i 
(dump_exp_buffer2) EXP_BUFF_ID_INTEGER      i i 2
(dump_exp_buffer2) EXP_BUFF_ID_VARIABLE     f f A
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     f f +
(dump_exp_buffer2) EXP_BUFF_ID_SUB_END      U i 
(dump_exp_buffer2) EXP_BUFF_ID_SUB_END      U i 
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     f f *
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     f f :=
=================
( output_variable) f f B
(  output_integer) i f 2
(output_sub_start)
(  output_integer) i i 3
(output_sub_start)
(  output_integer) i i 4
(output_sub_start)
(  output_integer) i i 1
(  output_integer) i i 1
( output_operator) U i +
(  output_sub_end)
(  output_sub_end)
( output_operator) U i +
(  output_sub_end)
(  output_sub_end)
( output_operator) U i *
(  output_sub_end)
(  output_sub_end)
( output_operator) U f *
( output_operator) f f =
==========================

==========================
(output_expression_start)
Expression buffer
=================
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     f f B
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i f 2
( dump_exp_buffer) EXP_BUFF_ID_SUB_START    U i 
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i i 3
( dump_exp_buffer) EXP_BUFF_ID_SUB_START    U i 
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i i 4
( dump_exp_buffer) EXP_BUFF_ID_SUB_START    U i 
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i i 1
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i i 1
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U i +
( dump_exp_buffer) EXP_BUFF_ID_SUB_END      U i 
( dump_exp_buffer) EXP_BUFF_ID_SUB_END      U i 
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U i +
( dump_exp_buffer) EXP_BUFF_ID_SUB_END      U i 
( dump_exp_buffer) EXP_BUFF_ID_SUB_END      U i 
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U i *
( dump_exp_buffer) EXP_BUFF_ID_SUB_END      U i 
( dump_exp_buffer) EXP_BUFF_ID_SUB_END      U i 
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U f *
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     f f =
=================
 BE:B

Type Check Stack (1)

000: 'B' type:1
 BE:2

Type Check Stack (2)

000: 'B' type:1
001: '2' type:0
 BE:

Type Check Stack (2)

000: 'B' type:1
001: '2' type:0
 BE:3

Type Check Stack (3)

000: 'B' type:1
001: '2' type:0
002: '3' type:0
 BE:

Type Check Stack (3)

000: 'B' type:1
001: '2' type:0
002: '3' type:0
 BE:4

Type Check Stack (4)

000: 'B' type:1
001: '2' type:0
002: '3' type:0
003: '4' type:0
 BE:

Type Check Stack (4)

000: 'B' type:1
001: '2' type:0
002: '3' type:0
003: '4' type:0
 BE:1

Type Check Stack (5)

000: 'B' type:1
001: '2' type:0
002: '3' type:0
003: '4' type:0
004: '1' type:0
 BE:1

Type Check Stack (6)

000: 'B' type:1
001: '2' type:0
002: '3' type:0
003: '4' type:0
004: '1' type:0
005: '1' type:0
 BE:+
Found operator +
 Mutable type 0 0
 same type

Type Check Stack (5)

000: 'B' type:1
001: '2' type:0
002: '3' type:0
003: '4' type:0
004: '000' type:0
 BE:

Type Check Stack (5)

000: 'B' type:1
001: '2' type:0
002: '3' type:0
003: '4' type:0
004: '000' type:0
 BE:

Type Check Stack (5)

000: 'B' type:1
001: '2' type:0
002: '3' type:0
003: '4' type:0
004: '000' type:0
 BE:+
Found operator +
 Mutable type 0 0
 same type

Type Check Stack (4)

000: 'B' type:1
001: '2' type:0
002: '3' type:0
003: '000' type:0
 BE:

Type Check Stack (4)

000: 'B' type:1
001: '2' type:0
002: '3' type:0
003: '000' type:0
 BE:

Type Check Stack (4)

000: 'B' type:1
001: '2' type:0
002: '3' type:0
003: '000' type:0
 BE:*
Found operator *
 Mutable type 0 0
 same type

Type Check Stack (3)

000: 'B' type:1
001: '2' type:0
002: '000' type:0
 BE:

Type Check Stack (3)

000: 'B' type:1
001: '2' type:0
002: '000' type:0
 BE:

Type Check Stack (3)

000: 'B' type:1
001: '2' type:0
002: '000' type:0
 BE:*
Found operator *
 Mutable type 0 0
 same type

Type Check Stack (2)

000: 'B' type:1
001: '000' type:0
 BE::=

Type Check Stack (2)

000: 'B' type:1
001: '000' type:0
Expression buffer
=================
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     f f B
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i f 2
( dump_exp_buffer) EXP_BUFF_ID_SUB_START    U i 
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i i 3
( dump_exp_buffer) EXP_BUFF_ID_SUB_START    U i 
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i i 4
( dump_exp_buffer) EXP_BUFF_ID_SUB_START    U i 
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i i 1
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i i 1
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U i +
( dump_exp_buffer) EXP_BUFF_ID_SUB_END      U i 
( dump_exp_buffer) EXP_BUFF_ID_SUB_END      U i 
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U i +
( dump_exp_buffer) EXP_BUFF_ID_SUB_END      U i 
( dump_exp_buffer) EXP_BUFF_ID_SUB_END      U i 
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U i *
( dump_exp_buffer) EXP_BUFF_ID_SUB_END      U i 
( dump_exp_buffer) EXP_BUFF_ID_SUB_END      U i 
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U f *
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     f f :=
=================
Expression buffer 2
===================
(dump_exp_buffer2) EXP_BUFF_ID_VARIABLE     f f B
(dump_exp_buffer2) EXP_BUFF_ID_INTEGER      i f 2
(dump_exp_buffer2) EXP_BUFF_ID_SUB_START    U i 
(dump_exp_buffer2) EXP_BUFF_ID_INTEGER      i i 3
(dump_exp_buffer2) EXP_BUFF_ID_SUB_START    U i 
(dump_exp_buffer2) EXP_BUFF_ID_INTEGER      i i 4
(dump_exp_buffer2) EXP_BUFF_ID_SUB_START    U i 
(dump_exp_buffer2) EXP_BUFF_ID_INTEGER      i i 1
(dump_exp_buffer2) EXP_BUFF_ID_INTEGER      i i 1
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     i i +
(dump_exp_buffer2) EXP_BUFF_ID_SUB_END      U i 
(dump_exp_buffer2) EXP_BUFF_ID_SUB_END      U i 
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     i i +
(dump_exp_buffer2) EXP_BUFF_ID_SUB_END      U i 
(dump_exp_buffer2) EXP_BUFF_ID_SUB_END      U i 
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     i i *
(dump_exp_buffer2) EXP_BUFF_ID_SUB_END      U i 
(dump_exp_buffer2) EXP_BUFF_ID_SUB_END      U i 
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     i i *
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     f f :=
=================
==========================
PRINT B
==========================
(output_expression_start)
Expression buffer
=================
=================
Expression buffer
=================
=================
Expression buffer 2
===================
=================
( output_variable) f f B
( output_operator) U U PRINT
==========================

==========================
(output_expression_start)
Expression buffer
=================
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     f f B
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U U PRINT
=================
 BE:B

Type Check Stack (1)

000: 'B' type:1
 BE:PRINT

Type Check Stack (1)

000: 'B' type:1
Expression buffer
=================
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     f f B
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U U PRINT
=================
Expression buffer 2
===================
(dump_exp_buffer2) EXP_BUFF_ID_VARIABLE     f f B
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     U U PRINT
=================
==========================
PRINT 1 * 2 + A
==========================
(output_expression_start)
Expression buffer
=================
=================
Expression buffer
=================
=================
Expression buffer 2
===================
=================
(  output_integer) i i 1
(  output_integer) i i 2
( output_operator) U i *
( output_variable) f f A
( output_operator) U i +
( output_operator) U U PRINT
==========================

==========================
(output_expression_start)
Expression buffer
=================
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i i 1
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i i 2
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U i *
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     f f A
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U i +
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U U PRINT
=================
 BE:1

Type Check Stack (1)

000: '1' type:0
 BE:2

Type Check Stack (2)

000: '1' type:0
001: '2' type:0
 BE:*
Found operator *
 Mutable type 0 0
 same type

Type Check Stack (1)

000: '000' type:0
 BE:A

Type Check Stack (2)

000: '000' type:0
001: 'A' type:1
 BE:+
Found operator +
 Mutable type 1 0

Type Check Stack (1)

000: '000' type:1
 BE:PRINT

Type Check Stack (1)

000: '000' type:1
Expression buffer
=================
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     i i 1
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i i 2
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U i *
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     f f A
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U i +
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U U PRINT
=================
Expression buffer 2
===================
(dump_exp_buffer2) EXP_BUFF_ID_VARIABLE     i i 1
(dump_exp_buffer2) EXP_BUFF_ID_INTEGER      i i 2
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     i i *
(dump_exp_buffer2) EXP_BUFF_ID_VARIABLE     f f A
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     f f +
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     U U PRINT
=================
==========================
PRINT "Point 2"
==========================
(output_expression_start)
Expression buffer
=================
=================
Expression buffer
=================
=================
Expression buffer 2
===================
=================
(   output_string) U U "Point 2"
( output_operator) U U PRINT
==========================

==========================
(output_expression_start)
Expression buffer
=================
( dump_exp_buffer) EXP_BUFF_ID_STR          U U "Point 2"
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U U PRINT
=================
 BE:"Point 2"

Type Check Stack (1)

000: '"Point 2"' type:16
 BE:PRINT

Type Check Stack (1)

000: '"Point 2"' type:16
Expression buffer
=================
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     U U "Point 2"
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U U PRINT
=================
Expression buffer 2
===================
(dump_exp_buffer2) EXP_BUFF_ID_VARIABLE     U U "Point 2"
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     U U PRINT
=================
==========================
A = 1000*1000*1000
==========================
(output_expression_start)
Expression buffer
=================
=================
Expression buffer
=================
=================
Expression buffer 2
===================
=================
( output_variable) f f A
(  output_integer) i f 1000
(  output_integer) i f 1000
( output_operator) U f *
(  output_integer) i f 1000
( output_operator) U f *
( output_operator) f f =
==========================
A = 1000.*1000*1000
==========================
(output_expression_start)
Expression buffer
=================
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     f f A
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i f 1000
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i f 1000
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U f *
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i f 1000
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U f *
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     f f =
=================
 BE:A

Type Check Stack (1)

000: 'A' type:1
 BE:1000

Type Check Stack (2)

000: 'A' type:1
001: '1000' type:0
 BE:1000

Type Check Stack (3)

000: 'A' type:1
001: '1000' type:0
002: '1000' type:0
 BE:*
Found operator *
 Mutable type 0 0
 same type

Type Check Stack (2)

000: 'A' type:1
001: '000' type:0
 BE:1000

Type Check Stack (3)

000: 'A' type:1
001: '000' type:0
002: '1000' type:0
 BE:*
Found operator *
 Mutable type 0 0
 same type

Type Check Stack (2)

000: 'A' type:1
001: '000' type:0
 BE::=

Type Check Stack (2)

000: 'A' type:1
001: '000' type:0
Expression buffer
=================
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     f f A
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i f 1000
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i f 1000
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U f *
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i f 1000
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U f *
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     f f :=
=================
Expression buffer 2
===================
(dump_exp_buffer2) EXP_BUFF_ID_VARIABLE     f f A
(dump_exp_buffer2) EXP_BUFF_ID_INTEGER      i f 1000
(dump_exp_buffer2) EXP_BUFF_ID_INTEGER      i f 1000
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     i f *
(dump_exp_buffer2) EXP_BUFF_ID_INTEGER      i f 1000
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     i f *
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     f f :=
=================
( output_variable) f f A
(    output_float) f f 1000.
(  output_integer) i f 1000
( output_operator) U f *
(  output_integer) i f 1000
( output_operator) U f *
( output_operator) f f =
==========================
A = 1000.*(1000*1000)
==========================
(output_expression_start)
Expression buffer
=================
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     f f A
( dump_exp_buffer) EXP_BUFF_ID_FLT          f f 1000.
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i f 1000
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U f *
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i f 1000
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U f *
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     f f =
=================
 BE:A

Type Check Stack (1)

000: 'A' type:1
 BE:1000.

Type Check Stack (2)

000: 'A' type:1
001: '1000.' type:1
 BE:1000

Type Check Stack (3)

000: 'A' type:1
001: '1000.' type:1
002: '1000' type:0
 BE:*
Found operator *
 Mutable type 0 1

Type Check Stack (2)

000: 'A' type:1
001: '000' type:0
 BE:1000

Type Check Stack (3)

000: 'A' type:1
001: '000' type:0
002: '1000' type:0
 BE:*
Found operator *
 Mutable type 0 0
 same type

Type Check Stack (2)

000: 'A' type:1
001: '000' type:0
 BE::=

Type Check Stack (2)

000: 'A' type:1
001: '000' type:0
Expression buffer
=================
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     f f A
( dump_exp_buffer) EXP_BUFF_ID_FLT          f f 1000.
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i f 1000
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U f *
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i f 1000
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U f *
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     f f :=
=================
Expression buffer 2
===================
(dump_exp_buffer2) EXP_BUFF_ID_VARIABLE     f f A
(dump_exp_buffer2) EXP_BUFF_ID_FLT          f f 1000.
(dump_exp_buffer2) EXP_BUFF_ID_INTEGER      i f 1000
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     f f *
(dump_exp_buffer2) EXP_BUFF_ID_INTEGER      i f 1000
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     i f *
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     f f :=
=================
( output_variable) f f A
(    output_float) f f 1000.
(output_sub_start)
(  output_integer) i i 1000
(  output_integer) i i 1000
( output_operator) U i *
(  output_sub_end)
(  output_sub_end)
( output_operator) U f *
( output_operator) f f =
==========================

==========================
(output_expression_start)
Expression buffer
=================
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     f f A
( dump_exp_buffer) EXP_BUFF_ID_FLT          f f 1000.
( dump_exp_buffer) EXP_BUFF_ID_SUB_START    U i 
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i i 1000
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i i 1000
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U i *
( dump_exp_buffer) EXP_BUFF_ID_SUB_END      U i 
( dump_exp_buffer) EXP_BUFF_ID_SUB_END      U i 
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U f *
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     f f =
=================
 BE:A

Type Check Stack (1)

000: 'A' type:1
 BE:1000.

Type Check Stack (2)

000: 'A' type:1
001: '1000.' type:1
 BE:

Type Check Stack (2)

000: 'A' type:1
001: '1000.' type:1
 BE:1000

Type Check Stack (3)

000: 'A' type:1
001: '1000.' type:1
002: '1000' type:0
 BE:1000

Type Check Stack (4)

000: 'A' type:1
001: '1000.' type:1
002: '1000' type:0
003: '1000' type:0
 BE:*
Found operator *
 Mutable type 0 0
 same type

Type Check Stack (3)

000: 'A' type:1
001: '1000.' type:1
002: '000' type:0
 BE:

Type Check Stack (3)

000: 'A' type:1
001: '1000.' type:1
002: '000' type:0
 BE:

Type Check Stack (3)

000: 'A' type:1
001: '1000.' type:1
002: '000' type:0
 BE:*
Found operator *
 Mutable type 0 1

Type Check Stack (2)

000: 'A' type:1
001: '000' type:0
 BE::=

Type Check Stack (2)

000: 'A' type:1
001: '000' type:0
Expression buffer
=================
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     f f A
( dump_exp_buffer) EXP_BUFF_ID_FLT          f f 1000.
( dump_exp_buffer) EXP_BUFF_ID_SUB_START    U i 
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i i 1000
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i i 1000
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U i *
( dump_exp_buffer) EXP_BUFF_ID_SUB_END      U i 
( dump_exp_buffer) EXP_BUFF_ID_SUB_END      U i 
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U f *
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     f f :=
=================
Expression buffer 2
===================
(dump_exp_buffer2) EXP_BUFF_ID_VARIABLE     f f A
(dump_exp_buffer2) EXP_BUFF_ID_FLT          f f 1000.
(dump_exp_buffer2) EXP_BUFF_ID_SUB_START    U i 
(dump_exp_buffer2) EXP_BUFF_ID_INTEGER      i i 1000
(dump_exp_buffer2) EXP_BUFF_ID_INTEGER      i i 1000
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     i i *
(dump_exp_buffer2) EXP_BUFF_ID_SUB_END      U i 
(dump_exp_buffer2) EXP_BUFF_ID_SUB_END      U i 
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     f f *
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     f f :=
=================
==========================
F$="ABC"
==========================
(output_expression_start)
Expression buffer
=================
=================
Expression buffer
=================
=================
Expression buffer 2
===================
=================
( output_variable) s s F$
(   output_string) s s "ABC"
( output_operator) s s =
==========================

==========================
(output_expression_start)
Expression buffer
=================
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     s s F$
( dump_exp_buffer) EXP_BUFF_ID_STR          s s "ABC"
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     s s =
=================
 BE:F$

Type Check Stack (1)

000: 'F$' type:2
 BE:"ABC"

Type Check Stack (2)

000: 'F$' type:2
001: '"ABC"' type:2
 BE::=

Type Check Stack (2)

000: 'F$' type:2
001: '"ABC"' type:2
Expression buffer
=================
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     s s F$
( dump_exp_buffer) EXP_BUFF_ID_STR          s s "ABC"
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     s s :=
=================
Expression buffer 2
===================
(dump_exp_buffer2) EXP_BUFF_ID_VARIABLE     s s F$
(dump_exp_buffer2) EXP_BUFF_ID_STR          s s "ABC"
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     s s :=
=================
==========================
A = SIN(45*2)
==========================
(output_expression_start)
Expression buffer
=================
=================
Expression buffer
=================
=================
Expression buffer 2
===================
=================
( output_variable) f f A
(output_sub_start)
(  output_integer) i i 45
(  output_integer) i i 2
( output_operator) U i *
(  output_sub_end)
( output_operator) f f SIN
(  output_sub_end)
( output_operator) f f =
==========================
B = SIN(45*2.0)
==========================
(output_expression_start)
Expression buffer
=================
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     f f A
( dump_exp_buffer) EXP_BUFF_ID_SUB_START    U i 
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i i 45
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i i 2
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U i *
( dump_exp_buffer) EXP_BUFF_ID_SUB_END      U i 
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     f f SIN
( dump_exp_buffer) EXP_BUFF_ID_SUB_END      U i 
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     f f =
=================
 BE:A

Type Check Stack (1)

000: 'A' type:1
 BE:

Type Check Stack (1)

000: 'A' type:1
 BE:45

Type Check Stack (2)

000: 'A' type:1
001: '45' type:0
 BE:2

Type Check Stack (3)

000: 'A' type:1
001: '45' type:0
002: '2' type:0
 BE:*
Found operator *
 Mutable type 0 0
 same type

Type Check Stack (2)

000: 'A' type:1
001: '000' type:0
 BE:

Type Check Stack (2)

000: 'A' type:1
001: '000' type:0
 BE:SIN

Type Check Stack (2)

000: 'A' type:1
001: '000' type:0
 BE:

Type Check Stack (2)

000: 'A' type:1
001: '000' type:0
 BE::=

Type Check Stack (2)

000: 'A' type:1
001: '000' type:0
Expression buffer
=================
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     f f A
( dump_exp_buffer) EXP_BUFF_ID_SUB_START    U i 
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i i 45
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i i 2
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U i *
( dump_exp_buffer) EXP_BUFF_ID_SUB_END      U i 
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     f f SIN
( dump_exp_buffer) EXP_BUFF_ID_SUB_END      U i 
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     f f :=
=================
Expression buffer 2
===================
(dump_exp_buffer2) EXP_BUFF_ID_VARIABLE     f f A
(dump_exp_buffer2) EXP_BUFF_ID_SUB_START    U i 
(dump_exp_buffer2) EXP_BUFF_ID_INTEGER      i i 45
(dump_exp_buffer2) EXP_BUFF_ID_INTEGER      i i 2
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     i i *
(dump_exp_buffer2) EXP_BUFF_ID_SUB_END      U i 
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     f f SIN
(dump_exp_buffer2) EXP_BUFF_ID_SUB_END      U i 
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     f f :=
=================
( output_variable) f f B
(output_sub_start)
(  output_integer) i i 45
(    output_float) f f 2.0
( output_operator) U i *
(  output_sub_end)
( output_operator) f f SIN
(  output_sub_end)
( output_operator) f f =
==========================

==========================
(output_expression_start)
Expression buffer
=================
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     f f B
( dump_exp_buffer) EXP_BUFF_ID_SUB_START    U i 
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i i 45
( dump_exp_buffer) EXP_BUFF_ID_FLT          f f 2.0
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U i *
( dump_exp_buffer) EXP_BUFF_ID_SUB_END      U i 
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     f f SIN
( dump_exp_buffer) EXP_BUFF_ID_SUB_END      U i 
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     f f =
=================
 BE:B

Type Check Stack (1)

000: 'B' type:1
 BE:

Type Check Stack (1)

000: 'B' type:1
 BE:45

Type Check Stack (2)

000: 'B' type:1
001: '45' type:0
 BE:2.0

Type Check Stack (3)

000: 'B' type:1
001: '45' type:0
002: '2.0' type:1
 BE:*
Found operator *
 Mutable type 1 0

Type Check Stack (2)

000: 'B' type:1
001: '000' type:1
 BE:

Type Check Stack (2)

000: 'B' type:1
001: '000' type:1
 BE:SIN

Type Check Stack (2)

000: 'B' type:1
001: '000' type:1
 BE:

Type Check Stack (2)

000: 'B' type:1
001: '000' type:1
 BE::=

Type Check Stack (2)

000: 'B' type:1
001: '000' type:1
Expression buffer
=================
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     f f B
( dump_exp_buffer) EXP_BUFF_ID_SUB_START    U i 
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i i 45
( dump_exp_buffer) EXP_BUFF_ID_FLT          f f 2.0
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U i *
( dump_exp_buffer) EXP_BUFF_ID_SUB_END      U i 
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     f f SIN
( dump_exp_buffer) EXP_BUFF_ID_SUB_END      U i 
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     f f :=
=================
Expression buffer 2
===================
(dump_exp_buffer2) EXP_BUFF_ID_VARIABLE     f f B
(dump_exp_buffer2) EXP_BUFF_ID_SUB_START    U i 
(dump_exp_buffer2) EXP_BUFF_ID_INTEGER      i i 45
(dump_exp_buffer2) EXP_BUFF_ID_FLT          f f 2.0
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     f f *
(dump_exp_buffer2) EXP_BUFF_ID_SUB_END      U i 
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     f f SIN
(dump_exp_buffer2) EXP_BUFF_ID_SUB_END      U i 
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     f f :=
=================
==========================
X% = USR(X%, Y%)
==========================
(output_expression_start)
Expression buffer
=================
=================
Expression buffer
=================
=================
Expression buffer 2
===================
=================
( output_variable) i i X%
(output_sub_start)
( output_variable) i i X%
(output_sub_start)
( output_variable) i i Y%
(  output_sub_end)
( output_operator) i i USR
(  output_sub_end)
( output_operator) i i =
==========================

==========================
(output_expression_start)
Expression buffer
=================
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     i i X%
( dump_exp_buffer) EXP_BUFF_ID_SUB_START    U i 
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     i i X%
( dump_exp_buffer) EXP_BUFF_ID_SUB_START    U i 
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     i i Y%
( dump_exp_buffer) EXP_BUFF_ID_SUB_END      U i 
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     i i USR
( dump_exp_buffer) EXP_BUFF_ID_SUB_END      U i 
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     i i =
=================
 BE:X%

Type Check Stack (1)

000: 'X%' type:0
 BE:

Type Check Stack (1)

000: 'X%' type:0
 BE:X%

Type Check Stack (2)

000: 'X%' type:0
001: 'X%' type:0
 BE:

Type Check Stack (2)

000: 'X%' type:0
001: 'X%' type:0
 BE:Y%

Type Check Stack (3)

000: 'X%' type:0
001: 'X%' type:0
002: 'Y%' type:0
 BE:

Type Check Stack (3)

000: 'X%' type:0
001: 'X%' type:0
002: 'Y%' type:0
 BE:USR

Type Check Stack (3)

000: 'X%' type:0
001: 'X%' type:0
002: 'Y%' type:0
 BE:

Type Check Stack (3)

000: 'X%' type:0
001: 'X%' type:0
002: 'Y%' type:0
 BE::=

Type Check Stack (3)

000: 'X%' type:0
001: 'X%' type:0
002: 'Y%' type:0
Expression buffer
=================
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     i i X%
( dump_exp_buffer) EXP_BUFF_ID_SUB_START    U i 
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     i i X%
( dump_exp_buffer) EXP_BUFF_ID_SUB_START    U i 
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     i i Y%
( dump_exp_buffer) EXP_BUFF_ID_SUB_END      U i 
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     i i USR
( dump_exp_buffer) EXP_BUFF_ID_SUB_END      U i 
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     i i :=
=================
Expression buffer 2
===================
(dump_exp_buffer2) EXP_BUFF_ID_VARIABLE     i i X%
(dump_exp_buffer2) EXP_BUFF_ID_SUB_START    U i 
(dump_exp_buffer2) EXP_BUFF_ID_VARIABLE     i i X%
(dump_exp_buffer2) EXP_BUFF_ID_SUB_START    U i 
(dump_exp_buffer2) EXP_BUFF_ID_VARIABLE     i i Y%
(dump_exp_buffer2) EXP_BUFF_ID_SUB_END      U i 
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     i i USR
(dump_exp_buffer2) EXP_BUFF_ID_SUB_END      U i 
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     i i :=
=================
==========================
X% = USR(12*4+1, 20*3+4)
==========================
(output_expression_start)
Expression buffer
=================
=================
Expression buffer
=================
=================
Expression buffer 2
===================
=================
( output_variable) i i X%
(output_sub_start)
(  output_integer) i i 12
(  output_integer) i i 4
( output_operator) U i *
(  output_integer) i i 1
( output_operator) U i +
(output_sub_start)
(  output_integer) i i 20
(  output_integer) i i 3
( output_operator) U i *
(  output_integer) i i 4
( output_operator) U i +
(  output_sub_end)
( output_operator) i i USR
(  output_sub_end)
( output_operator) i i =
==========================

==========================
(output_expression_start)
Expression buffer
=================
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     i i X%
( dump_exp_buffer) EXP_BUFF_ID_SUB_START    U i 
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i i 12
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i i 4
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U i *
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i i 1
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U i +
( dump_exp_buffer) EXP_BUFF_ID_SUB_START    U i 
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i i 20
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i i 3
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U i *
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i i 4
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U i +
( dump_exp_buffer) EXP_BUFF_ID_SUB_END      U i 
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     i i USR
( dump_exp_buffer) EXP_BUFF_ID_SUB_END      U i 
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     i i =
=================
 BE:X%

Type Check Stack (1)

000: 'X%' type:0
 BE:

Type Check Stack (1)

000: 'X%' type:0
 BE:12

Type Check Stack (2)

000: 'X%' type:0
001: '12' type:0
 BE:4

Type Check Stack (3)

000: 'X%' type:0
001: '12' type:0
002: '4' type:0
 BE:*
Found operator *
 Mutable type 0 0
 same type

Type Check Stack (2)

000: 'X%' type:0
001: '000' type:0
 BE:1

Type Check Stack (3)

000: 'X%' type:0
001: '000' type:0
002: '1' type:0
 BE:+
Found operator +
 Mutable type 0 0
 same type

Type Check Stack (2)

000: 'X%' type:0
001: '000' type:0
 BE:

Type Check Stack (2)

000: 'X%' type:0
001: '000' type:0
 BE:20

Type Check Stack (3)

000: 'X%' type:0
001: '000' type:0
002: '20' type:0
 BE:3

Type Check Stack (4)

000: 'X%' type:0
001: '000' type:0
002: '20' type:0
003: '3' type:0
 BE:*
Found operator *
 Mutable type 0 0
 same type

Type Check Stack (3)

000: 'X%' type:0
001: '000' type:0
002: '000' type:0
 BE:4

Type Check Stack (4)

000: 'X%' type:0
001: '000' type:0
002: '000' type:0
003: '4' type:0
 BE:+
Found operator +
 Mutable type 0 0
 same type

Type Check Stack (3)

000: 'X%' type:0
001: '000' type:0
002: '000' type:0
 BE:

Type Check Stack (3)

000: 'X%' type:0
001: '000' type:0
002: '000' type:0
 BE:USR

Type Check Stack (3)

000: 'X%' type:0
001: '000' type:0
002: '000' type:0
 BE:

Type Check Stack (3)

000: 'X%' type:0
001: '000' type:0
002: '000' type:0
 BE::=

Type Check Stack (3)

000: 'X%' type:0
001: '000' type:0
002: '000' type:0
Expression buffer
=================
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     i i X%
( dump_exp_buffer) EXP_BUFF_ID_SUB_START    U i 
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i i 12
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i i 4
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U i *
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i i 1
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U i +
( dump_exp_buffer) EXP_BUFF_ID_SUB_START    U i 
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i i 20
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i i 3
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U i *
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i i 4
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U i +
( dump_exp_buffer) EXP_BUFF_ID_SUB_END      U i 
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     i i USR
( dump_exp_buffer) EXP_BUFF_ID_SUB_END      U i 
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     i i :=
=================
Expression buffer 2
===================
(dump_exp_buffer2) EXP_BUFF_ID_VARIABLE     i i X%
(dump_exp_buffer2) EXP_BUFF_ID_SUB_START    U i 
(dump_exp_buffer2) EXP_BUFF_ID_INTEGER      i i 12
(dump_exp_buffer2) EXP_BUFF_ID_INTEGER      i i 4
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     i i *
(dump_exp_buffer2) EXP_BUFF_ID_INTEGER      i i 1
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     i i +
(dump_exp_buffer2) EXP_BUFF_ID_SUB_START    U i 
(dump_exp_buffer2) EXP_BUFF_ID_INTEGER      i i 20
(dump_exp_buffer2) EXP_BUFF_ID_INTEGER      i i 3
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     i i *
(dump_exp_buffer2) EXP_BUFF_ID_INTEGER      i i 4
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     i i +
(dump_exp_buffer2) EXP_BUFF_ID_SUB_END      U i 
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     i i USR
(dump_exp_buffer2) EXP_BUFF_ID_SUB_END      U i 
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     i i :=
=================
==========================
X% = USR(1+2, 1.2*3.6)
==========================
(output_expression_start)
Expression buffer
=================
=================
Expression buffer
=================
=================
Expression buffer 2
===================
=================
( output_variable) i i X%
(output_sub_start)
(  output_integer) i i 1
(  output_integer) i i 2
( output_operator) U i +
(output_sub_start)
(    output_float) f f 1.2
(    output_float) f f 3.6
( output_operator) U f *
(  output_sub_end)
( output_operator) i i USR
(  output_sub_end)
( output_operator) i i =
==========================

==========================
(output_expression_start)
Expression buffer
=================
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     i i X%
( dump_exp_buffer) EXP_BUFF_ID_SUB_START    U i 
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i i 1
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i i 2
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U i +
( dump_exp_buffer) EXP_BUFF_ID_SUB_START    U i 
( dump_exp_buffer) EXP_BUFF_ID_FLT          f f 1.2
( dump_exp_buffer) EXP_BUFF_ID_FLT          f f 3.6
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U f *
( dump_exp_buffer) EXP_BUFF_ID_SUB_END      U i 
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     i i USR
( dump_exp_buffer) EXP_BUFF_ID_SUB_END      U i 
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     i i =
=================
 BE:X%

Type Check Stack (1)

000: 'X%' type:0
 BE:

Type Check Stack (1)

000: 'X%' type:0
 BE:1

Type Check Stack (2)

000: 'X%' type:0
001: '1' type:0
 BE:2

Type Check Stack (3)

000: 'X%' type:0
001: '1' type:0
002: '2' type:0
 BE:+
Found operator +
 Mutable type 0 0
 same type

Type Check Stack (2)

000: 'X%' type:0
001: '000' type:0
 BE:

Type Check Stack (2)

000: 'X%' type:0
001: '000' type:0
 BE:1.2

Type Check Stack (3)

000: 'X%' type:0
001: '000' type:0
002: '1.2' type:1
 BE:3.6

Type Check Stack (4)

000: 'X%' type:0
001: '000' type:0
002: '1.2' type:1
003: '3.6' type:1
 BE:*
Found operator *
 Mutable type 1 1
 same type

Type Check Stack (3)

000: 'X%' type:0
001: '000' type:0
002: '000' type:1
 BE:

Type Check Stack (3)

000: 'X%' type:0
001: '000' type:0
002: '000' type:1
 BE:USR

Type Check Stack (3)

000: 'X%' type:0
001: '000' type:0
002: '000' type:1
 BE:

Type Check Stack (3)

000: 'X%' type:0
001: '000' type:0
002: '000' type:1
 BE::=

Type Check Stack (3)

000: 'X%' type:0
001: '000' type:0
002: '000' type:1
Expression buffer
=================
( dump_exp_buffer) EXP_BUFF_ID_VARIABLE     i i X%
( dump_exp_buffer) EXP_BUFF_ID_SUB_START    U i 
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i i 1
( dump_exp_buffer) EXP_BUFF_ID_INTEGER      i i 2
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U i +
( dump_exp_buffer) EXP_BUFF_ID_SUB_START    U i 
( dump_exp_buffer) EXP_BUFF_ID_FLT          f f 1.2
( dump_exp_buffer) EXP_BUFF_ID_FLT          f f 3.6
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     U f *
( dump_exp_buffer) EXP_BUFF_ID_SUB_END      U i 
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     i i USR
( dump_exp_buffer) EXP_BUFF_ID_SUB_END      U i 
( dump_exp_buffer) EXP_BUFF_ID_OPERATOR     i i :=
=================
Expression buffer 2
===================
(dump_exp_buffer2) EXP_BUFF_ID_VARIABLE     i i X%
(dump_exp_buffer2) EXP_BUFF_ID_SUB_START    U i 
(dump_exp_buffer2) EXP_BUFF_ID_INTEGER      i i 1
(dump_exp_buffer2) EXP_BUFF_ID_INTEGER      i i 2
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     i i +
(dump_exp_buffer2) EXP_BUFF_ID_SUB_START    U i 
(dump_exp_buffer2) EXP_BUFF_ID_FLT          f f 1.2
(dump_exp_buffer2) EXP_BUFF_ID_FLT          f f 3.6
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     f f *
(dump_exp_buffer2) EXP_BUFF_ID_SUB_END      U i 
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     i i USR
(dump_exp_buffer2) EXP_BUFF_ID_SUB_END      U i 
(dump_exp_buffer2) EXP_BUFF_ID_OPERATOR     i i :=
=================
==========================
A = SIN ( MAX ( 2, 3 ) / 3 * 3.14 )
==========================
(output_expression_start)
Expression buffer
=================
=================
Expression buffer
=================
=================
Expression buffer 2
===================
=================
( output_variable) f f A
(output_sub_start)
(output_sub_start)
(  output_integer) i i 2
(output_sub_start)
(  output_integer) i i 3
(  output_sub_end)
( output_operator) U U MAX
(  output_sub_end)
(  output_integer) i i 3
( output_operator) U U /
(    output_float) f f 3.14
( output_operator) U i *
(  output_sub_end)
( output_operator) f f SIN
(  output_sub_end)
( output_operator) f f =

Operator Stack
