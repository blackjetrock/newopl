
========================================================
game:

========================================================
(output_expression_start)
   Frst:1 T:''
(  output_integer) [i,()] i i 
Finalise stack
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
=================
 BE:
type_check_stack_push: ''

Type Check Stack (1)

000: '' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_INTEGER      i rq:i   0:
=================
(process_expression_types) 
==INFIX==

infix_stack_push: ''
infix_stack_pop: ''
(process_expression_types) ====
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_INTEGER      i rq:i   0:
========================================================
LOCAL e$(2)

========================================================
(output_expression_start)
   Frst:1 T:''
(  output_integer) [i,()] i i 
   Frst:0 T:''
(  output_integer) [i,()] i i 
   Frst:0 T:'2'
(  output_integer) [i,()] i i 2
   Frst:0 T:''
(  output_integer) [i,()] i i 
   Frst:0 T:'e$'
token_is_variable: tok:'e$'
( output_variable) [i,()] i i e$
Finalise stack
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i e$  0:
=================
 BE:
type_check_stack_push: ''

Type Check Stack (1)

000: '' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (2)

000: '' type:i (0)
001: '' type:i (0)
 BE:2
type_check_stack_push: '2'

Type Check Stack (3)

000: '' type:i (0)
001: '' type:i (0)
002: '2' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (4)

000: '' type:i (0)
001: '' type:i (0)
002: '2' type:i (0)
003: '' type:i (0)
 BE:e$
type_check_stack_push: 'e$'

Type Check Stack (5)

000: '' type:i (0)
001: '' type:i (0)
002: '2' type:i (0)
003: '' type:i (0)
004: 'e$' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i e$  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_VARIABLE     i rq:i e$  0:
=================
(process_expression_types) 
==INFIX==

infix_stack_push: ''
infix_stack_push: ''
infix_stack_push: '2'
infix_stack_push: ''
infix_stack_push: 'e$'
infix_stack_pop: 'e$'
(process_expression_types) ==e$==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N3 EXP_BUFF_ID_INTEGER      i rq:i 2  0:
(    output_qcode) N4 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N5 EXP_BUFF_ID_VARIABLE     i rq:i e$  0:
========================================================
LOCAL a%,b%,b1%,c%,c1%,x%,y%,i%,sc%

========================================================
(output_expression_start)
   Frst:1 T:''
(  output_integer) [i,()] i i 
   Frst:0 T:'a%'
token_is_variable: tok:'a%'
( output_variable) [i,()] i i a%
   Frst:0 T:''
(  output_integer) [i,()] i i 
   Frst:0 T:'b%'
token_is_variable: tok:'b%'
( output_variable) [i,()] i i b%
   Frst:0 T:''
(  output_integer) [i,()] i i 
   Frst:0 T:'b1%'
token_is_variable: tok:'b1%'
( output_variable) [i,()] i i b1%
   Frst:0 T:''
(  output_integer) [i,()] i i 
   Frst:0 T:'c%'
token_is_variable: tok:'c%'
( output_variable) [i,()] i i c%
   Frst:0 T:''
(  output_integer) [i,()] i i 
   Frst:0 T:'c1%'
token_is_variable: tok:'c1%'
( output_variable) [i,()] i i c1%
   Frst:0 T:''
(  output_integer) [i,()] i i 
   Frst:0 T:'x%'
token_is_variable: tok:'x%'
( output_variable) [i,()] i i x%
   Frst:0 T:''
(  output_integer) [i,()] i i 
   Frst:0 T:'y%'
token_is_variable: tok:'y%'
( output_variable) [i,()] i i y%
   Frst:0 T:''
(  output_integer) [i,()] i i 
   Frst:0 T:'i%'
token_is_variable: tok:'i%'
( output_variable) [i,()] i i i%
   Frst:0 T:''
(  output_integer) [i,()] i i 
   Frst:0 T:'sc%'
token_is_variable: tok:'sc%'
( output_variable) [i,()] i i sc%
Finalise stack
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i b1%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i c1%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i x%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i y%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i i%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i sc%  0:
=================
 BE:
type_check_stack_push: ''

Type Check Stack (1)

000: '' type:i (0)
 BE:a%
type_check_stack_push: 'a%'

Type Check Stack (2)

000: '' type:i (0)
001: 'a%' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (3)

000: '' type:i (0)
001: 'a%' type:i (0)
002: '' type:i (0)
 BE:b%
type_check_stack_push: 'b%'

Type Check Stack (4)

000: '' type:i (0)
001: 'a%' type:i (0)
002: '' type:i (0)
003: 'b%' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (5)

000: '' type:i (0)
001: 'a%' type:i (0)
002: '' type:i (0)
003: 'b%' type:i (0)
004: '' type:i (0)
 BE:b1%
type_check_stack_push: 'b1%'

Type Check Stack (6)

000: '' type:i (0)
001: 'a%' type:i (0)
002: '' type:i (0)
003: 'b%' type:i (0)
004: '' type:i (0)
005: 'b1%' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (7)

000: '' type:i (0)
001: 'a%' type:i (0)
002: '' type:i (0)
003: 'b%' type:i (0)
004: '' type:i (0)
005: 'b1%' type:i (0)
006: '' type:i (0)
 BE:c%
type_check_stack_push: 'c%'

Type Check Stack (8)

000: '' type:i (0)
001: 'a%' type:i (0)
002: '' type:i (0)
003: 'b%' type:i (0)
004: '' type:i (0)
005: 'b1%' type:i (0)
006: '' type:i (0)
007: 'c%' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (9)

000: '' type:i (0)
001: 'a%' type:i (0)
002: '' type:i (0)
003: 'b%' type:i (0)
004: '' type:i (0)
005: 'b1%' type:i (0)
006: '' type:i (0)
007: 'c%' type:i (0)
008: '' type:i (0)
 BE:c1%
type_check_stack_push: 'c1%'

Type Check Stack (10)

000: '' type:i (0)
001: 'a%' type:i (0)
002: '' type:i (0)
003: 'b%' type:i (0)
004: '' type:i (0)
005: 'b1%' type:i (0)
006: '' type:i (0)
007: 'c%' type:i (0)
008: '' type:i (0)
009: 'c1%' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (11)

000: '' type:i (0)
001: 'a%' type:i (0)
002: '' type:i (0)
003: 'b%' type:i (0)
004: '' type:i (0)
005: 'b1%' type:i (0)
006: '' type:i (0)
007: 'c%' type:i (0)
008: '' type:i (0)
009: 'c1%' type:i (0)
010: '' type:i (0)
 BE:x%
type_check_stack_push: 'x%'

Type Check Stack (12)

000: '' type:i (0)
001: 'a%' type:i (0)
002: '' type:i (0)
003: 'b%' type:i (0)
004: '' type:i (0)
005: 'b1%' type:i (0)
006: '' type:i (0)
007: 'c%' type:i (0)
008: '' type:i (0)
009: 'c1%' type:i (0)
010: '' type:i (0)
011: 'x%' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (13)

000: '' type:i (0)
001: 'a%' type:i (0)
002: '' type:i (0)
003: 'b%' type:i (0)
004: '' type:i (0)
005: 'b1%' type:i (0)
006: '' type:i (0)
007: 'c%' type:i (0)
008: '' type:i (0)
009: 'c1%' type:i (0)
010: '' type:i (0)
011: 'x%' type:i (0)
012: '' type:i (0)
 BE:y%
type_check_stack_push: 'y%'

Type Check Stack (14)

000: '' type:i (0)
001: 'a%' type:i (0)
002: '' type:i (0)
003: 'b%' type:i (0)
004: '' type:i (0)
005: 'b1%' type:i (0)
006: '' type:i (0)
007: 'c%' type:i (0)
008: '' type:i (0)
009: 'c1%' type:i (0)
010: '' type:i (0)
011: 'x%' type:i (0)
012: '' type:i (0)
013: 'y%' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (15)

000: '' type:i (0)
001: 'a%' type:i (0)
002: '' type:i (0)
003: 'b%' type:i (0)
004: '' type:i (0)
005: 'b1%' type:i (0)
006: '' type:i (0)
007: 'c%' type:i (0)
008: '' type:i (0)
009: 'c1%' type:i (0)
010: '' type:i (0)
011: 'x%' type:i (0)
012: '' type:i (0)
013: 'y%' type:i (0)
014: '' type:i (0)
 BE:i%
type_check_stack_push: 'i%'

Type Check Stack (16)

000: '' type:i (0)
001: 'a%' type:i (0)
002: '' type:i (0)
003: 'b%' type:i (0)
004: '' type:i (0)
005: 'b1%' type:i (0)
006: '' type:i (0)
007: 'c%' type:i (0)
008: '' type:i (0)
009: 'c1%' type:i (0)
010: '' type:i (0)
011: 'x%' type:i (0)
012: '' type:i (0)
013: 'y%' type:i (0)
014: '' type:i (0)
015: 'i%' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (17)

000: '' type:i (0)
001: 'a%' type:i (0)
002: '' type:i (0)
003: 'b%' type:i (0)
004: '' type:i (0)
005: 'b1%' type:i (0)
006: '' type:i (0)
007: 'c%' type:i (0)
008: '' type:i (0)
009: 'c1%' type:i (0)
010: '' type:i (0)
011: 'x%' type:i (0)
012: '' type:i (0)
013: 'y%' type:i (0)
014: '' type:i (0)
015: 'i%' type:i (0)
016: '' type:i (0)
 BE:sc%
type_check_stack_push: 'sc%'

Type Check Stack (18)

000: '' type:i (0)
001: 'a%' type:i (0)
002: '' type:i (0)
003: 'b%' type:i (0)
004: '' type:i (0)
005: 'b1%' type:i (0)
006: '' type:i (0)
007: 'c%' type:i (0)
008: '' type:i (0)
009: 'c1%' type:i (0)
010: '' type:i (0)
011: 'x%' type:i (0)
012: '' type:i (0)
013: 'y%' type:i (0)
014: '' type:i (0)
015: 'i%' type:i (0)
016: '' type:i (0)
017: 'sc%' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i b1%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i c1%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i x%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i y%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i i%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i sc%  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_VARIABLE     i rq:i b1%  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_VARIABLE     i rq:i c1%  0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N12 EXP_BUFF_ID_VARIABLE     i rq:i x%  0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_VARIABLE     i rq:i y%  0:
(dump_exp_buffer2) N15 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N16 EXP_BUFF_ID_VARIABLE     i rq:i i%  0:
(dump_exp_buffer2) N17 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N18 EXP_BUFF_ID_VARIABLE     i rq:i sc%  0:
=================
(process_expression_types) 
==INFIX==

infix_stack_push: ''
infix_stack_push: 'a%'
infix_stack_push: ''
infix_stack_push: 'b%'
infix_stack_push: ''
infix_stack_push: 'b1%'
infix_stack_push: ''
infix_stack_push: 'c%'
infix_stack_push: ''
infix_stack_push: 'c1%'
infix_stack_push: ''
infix_stack_push: 'x%'
infix_stack_push: ''
infix_stack_push: 'y%'
infix_stack_push: ''
infix_stack_push: 'i%'
infix_stack_push: ''
infix_stack_push: 'sc%'
infix_stack_pop: 'sc%'
(process_expression_types) ==sc%==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
(    output_qcode) N3 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N4 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
(    output_qcode) N5 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_VARIABLE     i rq:i b1%  0:
(    output_qcode) N7 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N8 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
(    output_qcode) N9 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N10 EXP_BUFF_ID_VARIABLE     i rq:i c1%  0:
(    output_qcode) N11 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N12 EXP_BUFF_ID_VARIABLE     i rq:i x%  0:
(    output_qcode) N13 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N14 EXP_BUFF_ID_VARIABLE     i rq:i y%  0:
(    output_qcode) N15 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N16 EXP_BUFF_ID_VARIABLE     i rq:i i%  0:
(    output_qcode) N17 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N18 EXP_BUFF_ID_VARIABLE     i rq:i sc%  0:
========================================================
graphic: :CURSOR OFF

========================================================
(output_expression_start)
   Frst:1 T:''
(  output_integer) [i,()] i i 
   Frst:0 T:''
(  output_integer) [i,()] i i 
Finalise stack
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
=================
 BE:
type_check_stack_push: ''

Type Check Stack (1)

000: '' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (2)

000: '' type:i (0)
001: '' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i   0:
=================
(process_expression_types) 
==INFIX==

infix_stack_push: ''
infix_stack_push: ''
infix_stack_pop: ''
(process_expression_types) ====
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_INTEGER      i rq:i   0:
========================================================
e$=CHR$(4)+CHR$(6)

========================================================
(output_expression_start)
   Frst:1 T:'e$'
token_is_variable: tok:'e$'
( output_variable) [i,()] s s e$
   Frst:0 T:''
(  output_integer) [i,()] i i 
   Frst:0 T:'CHR$'
token_is_variable: tok:'CHR$'
CHR$ is function
CHR$ is function
function_return_type: 'CHR$' =>i
process_token: 'CHR$' t=>i
 Push:'CHR$'
   Frst:0 T:''
(  output_integer) [i,()] i i 
   Frst:0 T:'('
(output_sub_start)
 Push:'('
   Frst:0 T:''
(  output_integer) [i,(i )] i i 
   Frst:0 T:')'
Pop 4
Pop '('
(  output_sub_end)
CHR$ is function
Pop 5
Pop 'CHR$'
( output_function) [i,(i )] i i CHR$
(  output_sub_end)
   Frst:0 T:'+'
'+' is operator
Push 1
 Push:'+'
   Frst:0 T:'CHR$'
token_is_variable: tok:'CHR$'
CHR$ is function
CHR$ is function
function_return_type: 'CHR$' =>i
process_token: 'CHR$' t=>i
 Push:'CHR$'
   Frst:0 T:''
(  output_integer) [i,()] i i 
   Frst:0 T:'('
(output_sub_start)
 Push:'('
   Frst:0 T:''
(  output_integer) [i,(i )] i i 
   Frst:0 T:')'
Pop 4
Pop '('
(  output_sub_end)
CHR$ is function
Pop 5
Pop 'CHR$'
( output_function) [i,(i )] i i CHR$
(  output_sub_end)
Finalise stack
Pop '+'
( output_operator) [i,()] i i +
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     s rq:s e$  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:?   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:?   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:?   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i +  0:
=================
 BE:e$
type_check_stack_push: 'e$'

Type Check Stack (1)

000: 'e$' type:s (2)
 BE:
type_check_stack_push: ''

Type Check Stack (2)

000: 'e$' type:s (2)
001: '' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (3)

000: 'e$' type:s (2)
001: '' type:i (0)
002: '' type:i (0)
 BE:

Type Check Stack (3)

000: 'e$' type:s (2)
001: '' type:i (0)
002: '' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (4)

000: 'e$' type:s (2)
001: '' type:i (0)
002: '' type:i (0)
003: '' type:i (0)
 BE:

Type Check Stack (4)

000: 'e$' type:s (2)
001: '' type:i (0)
002: '' type:i (0)
003: '' type:i (0)
 BE:CHR$
FN: 1 args
function_return_type: 'CHR$' =>i
typecheck_expression:Ret type of CHR$ : i
type_check_stack_pop: ''
FN ARG 0 ri  0(i)  Arg ok
type_check_stack_push: '000'

Type Check Stack (4)

000: 'e$' type:s (2)
001: '' type:i (0)
002: '' type:i (0)
003: '000' type:i (0)
 BE:

Type Check Stack (4)

000: 'e$' type:s (2)
001: '' type:i (0)
002: '' type:i (0)
003: '000' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (5)

000: 'e$' type:s (2)
001: '' type:i (0)
002: '' type:i (0)
003: '000' type:i (0)
004: '' type:i (0)
 BE:

Type Check Stack (5)

000: 'e$' type:s (2)
001: '' type:i (0)
002: '' type:i (0)
003: '000' type:i (0)
004: '' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (6)

000: 'e$' type:s (2)
001: '' type:i (0)
002: '' type:i (0)
003: '000' type:i (0)
004: '' type:i (0)
005: '' type:i (0)
 BE:

Type Check Stack (6)

000: 'e$' type:s (2)
001: '' type:i (0)
002: '' type:i (0)
003: '000' type:i (0)
004: '' type:i (0)
005: '' type:i (0)
 BE:CHR$
FN: 1 args
function_return_type: 'CHR$' =>i
typecheck_expression:Ret type of CHR$ : i
type_check_stack_pop: ''
FN ARG 0 ri  0(i)  Arg ok
type_check_stack_push: '000'

Type Check Stack (6)

000: 'e$' type:s (2)
001: '' type:i (0)
002: '' type:i (0)
003: '000' type:i (0)
004: '' type:i (0)
005: '000' type:i (0)
 BE:

Type Check Stack (6)

000: 'e$' type:s (2)
001: '' type:i (0)
002: '' type:i (0)
003: '000' type:i (0)
004: '' type:i (0)
005: '000' type:i (0)
 BE:+
Found operator +
type_check_stack_pop: '000'
type_check_stack_pop: ''
 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'

Type Check Stack (5)

000: 'e$' type:s (2)
001: '' type:i (0)
002: '' type:i (0)
003: '000' type:i (0)
004: '000' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     s rq:s e$  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:?   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:?   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:?   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i +  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     s rq:s e$  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_SUB_END      U rq:?   0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_SUB_END      U rq:i   0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N12 EXP_BUFF_ID_SUB_END      U rq:?   0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_SUB_END      U rq:?   0:
(dump_exp_buffer2) N15 EXP_BUFF_ID_OPERATOR     i rq:i +  2: 13 9
=================
(process_expression_types) 
==INFIX==

infix_stack_push: 'e$'
infix_stack_push: ''
infix_stack_push: ''
infix_stack_push: ''
infix_stack_pop: ''
infix_stack_push: 'CHR$( )'
infix_stack_push: ''
infix_stack_push: ''
infix_stack_pop: ''
infix_stack_push: 'CHR$( )'
infix_stack_pop: 'CHR$( )'
infix_stack_pop: ''
infix_stack_push: '( + CHR$( ))'
infix_stack_pop: '( + CHR$( ))'
(process_expression_types) ==( + CHR$( ))==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     s rq:s e$  0:
(    output_qcode) N2 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N3 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N4 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N5 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_SUB_END      U rq:?   0:
(    output_qcode) N7 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
(    output_qcode) N8 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N9 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N10 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N11 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N12 EXP_BUFF_ID_SUB_END      U rq:?   0:
(    output_qcode) N13 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
(    output_qcode) N14 EXP_BUFF_ID_SUB_END      U rq:?   0:
(    output_qcode) N15 EXP_BUFF_ID_OPERATOR     i rq:i +  2: 13 9
========================================================
b%=20 :c%=12 :x%=3 :y%=1

========================================================
(output_expression_start)
   Frst:1 T:'b%'
token_is_variable: tok:'b%'
( output_variable) [i,()] i i b%
   Frst:0 T:''
(  output_integer) [i,()] i i 
   Frst:0 T:'c%'
token_is_variable: tok:'c%'
( output_variable) [i,()] i i c%
   Frst:0 T:''
(  output_integer) [i,()] i i 
   Frst:0 T:'x%'
token_is_variable: tok:'x%'
( output_variable) [i,()] i i x%
   Frst:0 T:''
(  output_integer) [i,()] i i 
   Frst:0 T:'y%'
token_is_variable: tok:'y%'
( output_variable) [i,()] i i y%
   Frst:0 T:''
(  output_integer) [i,()] i i 
Finalise stack
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i x%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i y%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
=================
 BE:b%
type_check_stack_push: 'b%'

Type Check Stack (1)

000: 'b%' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (2)

000: 'b%' type:i (0)
001: '' type:i (0)
 BE:c%
type_check_stack_push: 'c%'

Type Check Stack (3)

000: 'b%' type:i (0)
001: '' type:i (0)
002: 'c%' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (4)

000: 'b%' type:i (0)
001: '' type:i (0)
002: 'c%' type:i (0)
003: '' type:i (0)
 BE:x%
type_check_stack_push: 'x%'

Type Check Stack (5)

000: 'b%' type:i (0)
001: '' type:i (0)
002: 'c%' type:i (0)
003: '' type:i (0)
004: 'x%' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (6)

000: 'b%' type:i (0)
001: '' type:i (0)
002: 'c%' type:i (0)
003: '' type:i (0)
004: 'x%' type:i (0)
005: '' type:i (0)
 BE:y%
type_check_stack_push: 'y%'

Type Check Stack (7)

000: 'b%' type:i (0)
001: '' type:i (0)
002: 'c%' type:i (0)
003: '' type:i (0)
004: 'x%' type:i (0)
005: '' type:i (0)
006: 'y%' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (8)

000: 'b%' type:i (0)
001: '' type:i (0)
002: 'c%' type:i (0)
003: '' type:i (0)
004: 'x%' type:i (0)
005: '' type:i (0)
006: 'y%' type:i (0)
007: '' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i x%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i y%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_VARIABLE     i rq:i x%  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_VARIABLE     i rq:i y%  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_INTEGER      i rq:i   0:
=================
(process_expression_types) 
==INFIX==

infix_stack_push: 'b%'
infix_stack_push: ''
infix_stack_push: 'c%'
infix_stack_push: ''
infix_stack_push: 'x%'
infix_stack_push: ''
infix_stack_push: 'y%'
infix_stack_push: ''
infix_stack_pop: ''
(process_expression_types) ====
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
(    output_qcode) N2 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N3 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
(    output_qcode) N4 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N5 EXP_BUFF_ID_VARIABLE     i rq:i x%  0:
(    output_qcode) N6 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N7 EXP_BUFF_ID_VARIABLE     i rq:i y%  0:
(    output_qcode) N8 EXP_BUFF_ID_INTEGER      i rq:i   0:
========================================================
DO

========================================================
(output_expression_start)
   Frst:1 T:''
(  output_integer) [i,()] i i 
Finalise stack
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
=================
 BE:
type_check_stack_push: ''

Type Check Stack (1)

000: '' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_INTEGER      i rq:i   0:
=================
(process_expression_types) 
==INFIX==

infix_stack_push: ''
infix_stack_pop: ''
(process_expression_types) ====
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_INTEGER      i rq:i   0:
========================================================
 CLS :PRINT REPT$(CHR$(158),80)

========================================================
(output_expression_start)
   Frst:1 T:'REPT$'
token_is_variable: tok:'REPT$'
REPT$ is function
REPT$ is function
function_return_type: 'REPT$' =>f
process_token: 'REPT$' t=>f
 Push:'REPT$'
   Frst:0 T:''
(  output_integer) [i,()] i i 
   Frst:0 T:'('
(output_sub_start)
 Push:'('
   Frst:0 T:'CHR$'
token_is_variable: tok:'CHR$'
CHR$ is function
CHR$ is function
function_return_type: 'CHR$' =>i
process_token: 'CHR$' t=>i
 Push:'CHR$'
   Frst:0 T:''
(  output_integer) [i,(i )] i i 
   Frst:0 T:'('
(output_sub_start)
 Push:'('
   Frst:0 T:''
(  output_integer) [i,(i i )] i i 
   Frst:0 T:')'
Pop 4
Pop '('
(  output_sub_end)
CHR$ is function
Pop 5
Pop 'CHR$'
( output_function) [i,(i i )] i i CHR$
(  output_sub_end)
   Frst:0 T:''
(  output_integer) [i,(i )] i i 
   Frst:0 T:''
(  output_integer) [i,(i )] i i 
   Frst:0 T:')'
Pop 4
Pop '('
(  output_sub_end)
REPT$ is function
Pop 5
Pop 'REPT$'
( output_function) [i,(i )] f f REPT$
(  output_sub_end)
Finalise stack
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:f   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:?   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:?   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:?   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     f rq:f REPT$  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
=================
 BE:
type_check_stack_push: ''

Type Check Stack (1)

000: '' type:i (0)
 BE:

Type Check Stack (1)

000: '' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (2)

000: '' type:i (0)
001: '' type:i (0)
 BE:

Type Check Stack (2)

000: '' type:i (0)
001: '' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (3)

000: '' type:i (0)
001: '' type:i (0)
002: '' type:i (0)
 BE:

Type Check Stack (3)

000: '' type:i (0)
001: '' type:i (0)
002: '' type:i (0)
 BE:CHR$
FN: 1 args
function_return_type: 'CHR$' =>i
typecheck_expression:Ret type of CHR$ : i
type_check_stack_pop: ''
FN ARG 0 ri  0(i)  Arg ok
type_check_stack_push: '000'

Type Check Stack (3)

000: '' type:i (0)
001: '' type:i (0)
002: '000' type:i (0)
 BE:

Type Check Stack (3)

000: '' type:i (0)
001: '' type:i (0)
002: '000' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (4)

000: '' type:i (0)
001: '' type:i (0)
002: '000' type:i (0)
003: '' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (5)

000: '' type:i (0)
001: '' type:i (0)
002: '000' type:i (0)
003: '' type:i (0)
004: '' type:i (0)
 BE:

Type Check Stack (5)

000: '' type:i (0)
001: '' type:i (0)
002: '000' type:i (0)
003: '' type:i (0)
004: '' type:i (0)
 BE:REPT$
FN: 2 args
function_return_type: 'REPT$' =>f
typecheck_expression:Ret type of REPT$ : f
type_check_stack_pop: ''
FN ARG 1 ri  0(i)  Arg ok
type_check_stack_pop: ''
FN ARG 0 ri  0(i)  Arg ok
type_check_stack_push: '000'

Type Check Stack (4)

000: '' type:i (0)
001: '' type:i (0)
002: '000' type:i (0)
003: '000' type:f (1)
 BE:

Type Check Stack (4)

000: '' type:i (0)
001: '' type:i (0)
002: '000' type:i (0)
003: '000' type:f (1)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:f   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:?   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:?   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:?   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     f rq:f REPT$  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_SUB_START    U rq:f   0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_SUB_END      U rq:?   0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_SUB_END      U rq:?   0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_SUB_END      U rq:?   0:
(dump_exp_buffer2) N12 EXP_BUFF_ID_FUNCTION     f rq:f REPT$  0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_SUB_END      U rq:i   0:
=================
(process_expression_types) 
==INFIX==

infix_stack_push: ''
infix_stack_push: ''
infix_stack_push: ''
infix_stack_pop: ''
infix_stack_push: 'CHR$( )'
infix_stack_push: ''
infix_stack_push: ''
infix_stack_pop: ''
infix_stack_pop: ''
infix_stack_push: 'REPT$(  )'
infix_stack_pop: 'REPT$(  )'
(process_expression_types) ==REPT$(  )==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_SUB_START    U rq:f   0:
(    output_qcode) N3 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N4 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N5 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_SUB_END      U rq:?   0:
(    output_qcode) N7 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
(    output_qcode) N8 EXP_BUFF_ID_SUB_END      U rq:?   0:
(    output_qcode) N9 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N10 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N11 EXP_BUFF_ID_SUB_END      U rq:?   0:
(    output_qcode) N12 EXP_BUFF_ID_FUNCTION     f rq:f REPT$  0:
(    output_qcode) N13 EXP_BUFF_ID_SUB_END      U rq:i   0:
========================================================
 AT x%,y% :PRINT CHR$(7)

========================================================
(output_expression_start)
   Frst:1 T:'x%'
token_is_variable: tok:'x%'
( output_variable) [i,()] i i x%
   Frst:0 T:''
(  output_integer) [i,()] i i 
   Frst:0 T:'y%'
token_is_variable: tok:'y%'
( output_variable) [i,()] i i y%
   Frst:0 T:'CHR$'
token_is_variable: tok:'CHR$'
CHR$ is function
CHR$ is function
function_return_type: 'CHR$' =>i
process_token: 'CHR$' t=>i
 Push:'CHR$'
   Frst:0 T:''
(  output_integer) [i,()] i i 
   Frst:0 T:'('
(output_sub_start)
 Push:'('
   Frst:0 T:''
(  output_integer) [i,(i )] i i 
   Frst:0 T:')'
Pop 4
Pop '('
(  output_sub_end)
CHR$ is function
Pop 5
Pop 'CHR$'
( output_function) [i,(i )] i i CHR$
(  output_sub_end)
Finalise stack
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i x%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i y%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:?   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
=================
 BE:x%
type_check_stack_push: 'x%'

Type Check Stack (1)

000: 'x%' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (2)

000: 'x%' type:i (0)
001: '' type:i (0)
 BE:y%
type_check_stack_push: 'y%'

Type Check Stack (3)

000: 'x%' type:i (0)
001: '' type:i (0)
002: 'y%' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (4)

000: 'x%' type:i (0)
001: '' type:i (0)
002: 'y%' type:i (0)
003: '' type:i (0)
 BE:

Type Check Stack (4)

000: 'x%' type:i (0)
001: '' type:i (0)
002: 'y%' type:i (0)
003: '' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (5)

000: 'x%' type:i (0)
001: '' type:i (0)
002: 'y%' type:i (0)
003: '' type:i (0)
004: '' type:i (0)
 BE:

Type Check Stack (5)

000: 'x%' type:i (0)
001: '' type:i (0)
002: 'y%' type:i (0)
003: '' type:i (0)
004: '' type:i (0)
 BE:CHR$
FN: 1 args
function_return_type: 'CHR$' =>i
typecheck_expression:Ret type of CHR$ : i
type_check_stack_pop: ''
FN ARG 0 ri  0(i)  Arg ok
type_check_stack_push: '000'

Type Check Stack (5)

000: 'x%' type:i (0)
001: '' type:i (0)
002: 'y%' type:i (0)
003: '' type:i (0)
004: '000' type:i (0)
 BE:

Type Check Stack (5)

000: 'x%' type:i (0)
001: '' type:i (0)
002: 'y%' type:i (0)
003: '' type:i (0)
004: '000' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i x%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i y%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:?   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i x%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     i rq:i y%  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:?   0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_END      U rq:i   0:
=================
(process_expression_types) 
==INFIX==

infix_stack_push: 'x%'
infix_stack_push: ''
infix_stack_push: 'y%'
infix_stack_push: ''
infix_stack_push: ''
infix_stack_pop: ''
infix_stack_push: 'CHR$( )'
infix_stack_pop: 'CHR$( )'
(process_expression_types) ==CHR$( )==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i x%  0:
(    output_qcode) N2 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N3 EXP_BUFF_ID_VARIABLE     i rq:i y%  0:
(    output_qcode) N4 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:?   0:
(    output_qcode) N8 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
(    output_qcode) N9 EXP_BUFF_ID_SUB_END      U rq:i   0:
========================================================
 a%=1 :c%=1+RND*4

========================================================
(output_expression_start)
   Frst:1 T:'a%'
token_is_variable: tok:'a%'
( output_variable) [i,()] i i a%
   Frst:0 T:''
(  output_integer) [i,()] i i 
   Frst:0 T:'c%'
token_is_variable: tok:'c%'
( output_variable) [i,()] i i c%
   Frst:0 T:''
(  output_integer) [i,()] i i 
   Frst:0 T:'+'
'+' is operator
Push 1
 Push:'+'
   Frst:0 T:'RND'
token_is_variable: tok:'RND'
RND is function
RND is function
function_return_type: 'RND' =>f
process_token: 'RND' t=>f
 Push:'RND'
   Frst:0 T:'*'
'*' is operator
Push 1
 Push:'*'
Finalise stack
Pop '*'
( output_operator) [i,()] i i *
Pop 'RND'
( output_operator) [i,()] i i RND
RND is function
Pop '+'
( output_operator) [i,()] i i +
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i *  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     i rq:i RND  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i +  0:
=================
 BE:a%
type_check_stack_push: 'a%'

Type Check Stack (1)

000: 'a%' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (2)

000: 'a%' type:i (0)
001: '' type:i (0)
 BE:c%
type_check_stack_push: 'c%'

Type Check Stack (3)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c%' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (4)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c%' type:i (0)
003: '' type:i (0)
 BE:*
Found operator *
type_check_stack_pop: ''
type_check_stack_pop: 'c%'
 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'

Type Check Stack (3)

000: 'a%' type:i (0)
001: '' type:i (0)
002: '000' type:i (0)
 BE:RND
FN: 2 args
function_return_type: 'RND' =>f
typecheck_expression:Ret type of RND : f
type_check_stack_pop: '000'
FN ARG 1 ri 000 0(i)  Arg ok
type_check_stack_pop: ''
FN ARG 0 ri  0(i)  Arg ok
type_check_stack_push: '000'

Type Check Stack (2)

000: 'a%' type:i (0)
001: '000' type:f (1)
 BE:+
Found operator +
type_check_stack_pop: '000'
type_check_stack_pop: 'a%'
 Mutable type 1 0
type_with_least_conversion_from: f i => f
type_with_least_conversion_from: f i => f
 Autoconversion
 --------------
 Op1: type:1 req type:1
 Op2: type:0 req type:0
 BE:  type:1 req type:1
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 4 3
(dump_exp_buffer2) N6 EXP_BUFF_ID_FUNCTION     f rq:f RND  0:
=================
 Insert after 1 exp_buffer2_i:6
   Found at i:0
   Copied 5 to 6:
   Copied 4 to 5:
   Copied 3 to 4:
   Copied 2 to 3:
   Copied 1 to 2:
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 6 1
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 4 3
(dump_exp_buffer2) N6 EXP_BUFF_ID_FUNCTION     f rq:f RND  0:
=================
type_check_stack_push: '000'

Type Check Stack (1)

000: '000' type:f (1)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i *  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     i rq:i RND  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i +  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 6 1
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 4 3
(dump_exp_buffer2) N6 EXP_BUFF_ID_FUNCTION     f rq:f RND  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     f rq:f +  2: 6 1
=================
(process_expression_types) 
==INFIX==

infix_stack_push: 'a%'
infix_stack_push: ''
infix_stack_push: 'c%'
infix_stack_push: ''
infix_stack_pop: ''
infix_stack_pop: 'c%'
infix_stack_push: '(c% * )'
infix_stack_pop: '(c% * )'
infix_stack_pop: ''
infix_stack_push: 'RND( (c% * ) )'
infix_stack_pop: 'RND( (c% * ) )'
infix_stack_pop: 'a%'
infix_stack_push: '(a% + RND( (c% * ) ))'
infix_stack_pop: '(a% + RND( (c% * ) ))'
(process_expression_types) ==(a% + RND( (c% * ) ))==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
(    output_qcode) N8 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 6 1
(    output_qcode) N2 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N3 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
(    output_qcode) N4 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N5 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 4 3
(    output_qcode) N6 EXP_BUFF_ID_FUNCTION     f rq:f RND  0:
(    output_qcode) N7 EXP_BUFF_ID_OPERATOR     f rq:f +  2: 6 1
========================================================
 DO :c1%=1+RND*4 :UNTIL c%<>c1%

========================================================
(output_expression_start)
   Frst:1 T:''
(  output_integer) [i,()] i i 
   Frst:0 T:'c1%'
token_is_variable: tok:'c1%'
( output_variable) [i,()] i i c1%
   Frst:0 T:''
(  output_integer) [i,()] i i 
   Frst:0 T:'+'
'+' is operator
Push 1
 Push:'+'
   Frst:0 T:'RND'
token_is_variable: tok:'RND'
RND is function
RND is function
function_return_type: 'RND' =>f
process_token: 'RND' t=>f
 Push:'RND'
   Frst:0 T:'*'
'*' is operator
Push 1
 Push:'*'
   Frst:0 T:''
(  output_integer) [i,()] i i 
   Frst:0 T:'c%'
token_is_variable: tok:'c%'
( output_variable) [i,()] i i c%
   Frst:0 T:'<>'
'<>' is operator
Pop 1
Pop '*'
( output_operator) [i,()] i i *
Push 1
 Push:'<>'
   Frst:0 T:'c1%'
token_is_variable: tok:'c1%'
( output_variable) [i,()] i i c1%
Finalise stack
Pop '<>'
( output_operator) [i,()] i i <>
Pop 'RND'
( output_operator) [i,()] i i RND
RND is function
Pop '+'
( output_operator) [i,()] i i +
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i c1%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i *  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i c1%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i <>  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     i rq:i RND  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i +  0:
=================
 BE:
type_check_stack_push: ''

Type Check Stack (1)

000: '' type:i (0)
 BE:c1%
type_check_stack_push: 'c1%'

Type Check Stack (2)

000: '' type:i (0)
001: 'c1%' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (3)

000: '' type:i (0)
001: 'c1%' type:i (0)
002: '' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (4)

000: '' type:i (0)
001: 'c1%' type:i (0)
002: '' type:i (0)
003: '' type:i (0)
 BE:c%
type_check_stack_push: 'c%'

Type Check Stack (5)

000: '' type:i (0)
001: 'c1%' type:i (0)
002: '' type:i (0)
003: '' type:i (0)
004: 'c%' type:i (0)
 BE:*
Found operator *
type_check_stack_pop: 'c%'
type_check_stack_pop: ''
 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'

Type Check Stack (4)

000: '' type:i (0)
001: 'c1%' type:i (0)
002: '' type:i (0)
003: '000' type:i (0)
 BE:c1%
type_check_stack_push: 'c1%'

Type Check Stack (5)

000: '' type:i (0)
001: 'c1%' type:i (0)
002: '' type:i (0)
003: '000' type:i (0)
004: 'c1%' type:i (0)
 BE:<>
Found operator <>
type_check_stack_pop: 'c1%'
type_check_stack_pop: '000'
 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'

Type Check Stack (4)

000: '' type:i (0)
001: 'c1%' type:i (0)
002: '' type:i (0)
003: '000' type:i (0)
 BE:RND
FN: 2 args
function_return_type: 'RND' =>f
typecheck_expression:Ret type of RND : f
type_check_stack_pop: '000'
FN ARG 1 ri 000 0(i)  Arg ok
type_check_stack_pop: ''
FN ARG 0 ri  0(i)  Arg ok
type_check_stack_push: '000'

Type Check Stack (3)

000: '' type:i (0)
001: 'c1%' type:i (0)
002: '000' type:f (1)
 BE:+
Found operator +
type_check_stack_pop: '000'
type_check_stack_pop: 'c1%'
 Mutable type 1 0
type_with_least_conversion_from: f i => f
type_with_least_conversion_from: f i => f
 Autoconversion
 --------------
 Op1: type:1 req type:1
 Op2: type:0 req type:0
 BE:  type:1 req type:1
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i c1%  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 5 4
(dump_exp_buffer2) N7 EXP_BUFF_ID_VARIABLE     i rq:i c1%  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_OPERATOR     i rq:i <>  2: 7 6
(dump_exp_buffer2) N9 EXP_BUFF_ID_FUNCTION     f rq:f RND  0:
=================
 Insert after 2 exp_buffer2_i:9
   Found at i:1
   Copied 8 to 9:
   Copied 7 to 8:
   Copied 6 to 7:
   Copied 5 to 6:
   Copied 4 to 5:
   Copied 3 to 4:
   Copied 2 to 3:
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i c1%  0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 9 2
(dump_exp_buffer2) N3 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 5 4
(dump_exp_buffer2) N7 EXP_BUFF_ID_VARIABLE     i rq:i c1%  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_OPERATOR     i rq:i <>  2: 7 6
(dump_exp_buffer2) N9 EXP_BUFF_ID_FUNCTION     f rq:f RND  0:
=================
type_check_stack_push: '000'

Type Check Stack (2)

000: '' type:i (0)
001: '000' type:f (1)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i c1%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i *  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i c1%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i <>  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     i rq:i RND  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i +  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i c1%  0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 9 2
(dump_exp_buffer2) N3 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 5 4
(dump_exp_buffer2) N7 EXP_BUFF_ID_VARIABLE     i rq:i c1%  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_OPERATOR     i rq:i <>  2: 7 6
(dump_exp_buffer2) N9 EXP_BUFF_ID_FUNCTION     f rq:f RND  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_OPERATOR     f rq:f +  2: 9 2
=================
(process_expression_types) 
==INFIX==

infix_stack_push: ''
infix_stack_push: 'c1%'
infix_stack_push: ''
infix_stack_push: ''
infix_stack_push: 'c%'
infix_stack_pop: 'c%'
infix_stack_pop: ''
infix_stack_push: '( * c%)'
infix_stack_push: 'c1%'
infix_stack_pop: 'c1%'
infix_stack_pop: '( * c%)'
infix_stack_push: '(( * c%) <> c1%)'
infix_stack_pop: '(( * c%) <> c1%)'
infix_stack_pop: ''
infix_stack_push: 'RND( (( * c%) <> c1%) )'
infix_stack_pop: 'RND( (( * c%) <> c1%) )'
infix_stack_pop: 'c1%'
infix_stack_push: '(c1% + RND( (( * c%) <> c1%) ))'
infix_stack_pop: '(c1% + RND( (( * c%) <> c1%) ))'
(process_expression_types) ==(c1% + RND( (( * c%) <> c1%) ))==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     i rq:i c1%  0:
(    output_qcode) N11 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 9 2
(    output_qcode) N3 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N4 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N5 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
(    output_qcode) N6 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 5 4
(    output_qcode) N7 EXP_BUFF_ID_VARIABLE     i rq:i c1%  0:
(    output_qcode) N8 EXP_BUFF_ID_OPERATOR     i rq:i <>  2: 7 6
(    output_qcode) N9 EXP_BUFF_ID_FUNCTION     f rq:f RND  0:
(    output_qcode) N10 EXP_BUFF_ID_OPERATOR     f rq:f +  2: 9 2
========================================================
 DO

========================================================
(output_expression_start)
   Frst:1 T:''
(  output_integer) [i,()] i i 
Finalise stack
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
=================
 BE:
type_check_stack_push: ''

Type Check Stack (1)

000: '' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_INTEGER      i rq:i   0:
=================
(process_expression_types) 
==INFIX==

infix_stack_push: ''
infix_stack_pop: ''
(process_expression_types) ====
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_INTEGER      i rq:i   0:
========================================================
  AT a%,c% :PRINT CHR$(0)

========================================================
(output_expression_start)
   Frst:1 T:'a%'
token_is_variable: tok:'a%'
( output_variable) [i,()] i i a%
   Frst:0 T:''
(  output_integer) [i,()] i i 
   Frst:0 T:'c%'
token_is_variable: tok:'c%'
( output_variable) [i,()] i i c%
   Frst:0 T:'CHR$'
token_is_variable: tok:'CHR$'
CHR$ is function
CHR$ is function
function_return_type: 'CHR$' =>i
process_token: 'CHR$' t=>i
 Push:'CHR$'
   Frst:0 T:''
(  output_integer) [i,()] i i 
   Frst:0 T:'('
(output_sub_start)
 Push:'('
   Frst:0 T:''
(  output_integer) [i,(i )] i i 
   Frst:0 T:')'
Pop 4
Pop '('
(  output_sub_end)
CHR$ is function
Pop 5
Pop 'CHR$'
( output_function) [i,(i )] i i CHR$
(  output_sub_end)
Finalise stack
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:?   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
=================
 BE:a%
type_check_stack_push: 'a%'

Type Check Stack (1)

000: 'a%' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (2)

000: 'a%' type:i (0)
001: '' type:i (0)
 BE:c%
type_check_stack_push: 'c%'

Type Check Stack (3)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c%' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (4)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c%' type:i (0)
003: '' type:i (0)
 BE:

Type Check Stack (4)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c%' type:i (0)
003: '' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (5)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c%' type:i (0)
003: '' type:i (0)
004: '' type:i (0)
 BE:

Type Check Stack (5)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c%' type:i (0)
003: '' type:i (0)
004: '' type:i (0)
 BE:CHR$
FN: 1 args
function_return_type: 'CHR$' =>i
typecheck_expression:Ret type of CHR$ : i
type_check_stack_pop: ''
FN ARG 0 ri  0(i)  Arg ok
type_check_stack_push: '000'

Type Check Stack (5)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c%' type:i (0)
003: '' type:i (0)
004: '000' type:i (0)
 BE:

Type Check Stack (5)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c%' type:i (0)
003: '' type:i (0)
004: '000' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:?   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:?   0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_END      U rq:i   0:
=================
(process_expression_types) 
==INFIX==

infix_stack_push: 'a%'
infix_stack_push: ''
infix_stack_push: 'c%'
infix_stack_push: ''
infix_stack_push: ''
infix_stack_pop: ''
infix_stack_push: 'CHR$( )'
infix_stack_pop: 'CHR$( )'
(process_expression_types) ==CHR$( )==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
(    output_qcode) N2 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N3 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
(    output_qcode) N4 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:?   0:
(    output_qcode) N8 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
(    output_qcode) N9 EXP_BUFF_ID_SUB_END      U rq:i   0:
========================================================
  AT a%,c1% :PRINT CHR$(0) :BEEP b%,10*b%

========================================================
(output_expression_start)
   Frst:1 T:'a%'
token_is_variable: tok:'a%'
( output_variable) [i,()] i i a%
   Frst:0 T:''
(  output_integer) [i,()] i i 
   Frst:0 T:'c1%'
token_is_variable: tok:'c1%'
( output_variable) [i,()] i i c1%
   Frst:0 T:'CHR$'
token_is_variable: tok:'CHR$'
CHR$ is function
CHR$ is function
function_return_type: 'CHR$' =>i
process_token: 'CHR$' t=>i
 Push:'CHR$'
   Frst:0 T:''
(  output_integer) [i,()] i i 
   Frst:0 T:'('
(output_sub_start)
 Push:'('
   Frst:0 T:''
(  output_integer) [i,(i )] i i 
   Frst:0 T:')'
Pop 4
Pop '('
(  output_sub_end)
CHR$ is function
Pop 5
Pop 'CHR$'
( output_function) [i,(i )] i i CHR$
(  output_sub_end)
   Frst:0 T:'b%'
token_is_variable: tok:'b%'
( output_variable) [i,()] i i b%
   Frst:0 T:''
(  output_integer) [i,()] i i 
   Frst:0 T:'*'
'*' is operator
Push 1
 Push:'*'
   Frst:0 T:'b%'
token_is_variable: tok:'b%'
( output_variable) [i,()] i i b%
Finalise stack
Pop '*'
( output_operator) [i,()] i i *
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i c1%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:?   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i *  0:
=================
 BE:a%
type_check_stack_push: 'a%'

Type Check Stack (1)

000: 'a%' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (2)

000: 'a%' type:i (0)
001: '' type:i (0)
 BE:c1%
type_check_stack_push: 'c1%'

Type Check Stack (3)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c1%' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (4)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c1%' type:i (0)
003: '' type:i (0)
 BE:

Type Check Stack (4)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c1%' type:i (0)
003: '' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (5)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c1%' type:i (0)
003: '' type:i (0)
004: '' type:i (0)
 BE:

Type Check Stack (5)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c1%' type:i (0)
003: '' type:i (0)
004: '' type:i (0)
 BE:CHR$
FN: 1 args
function_return_type: 'CHR$' =>i
typecheck_expression:Ret type of CHR$ : i
type_check_stack_pop: ''
FN ARG 0 ri  0(i)  Arg ok
type_check_stack_push: '000'

Type Check Stack (5)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c1%' type:i (0)
003: '' type:i (0)
004: '000' type:i (0)
 BE:

Type Check Stack (5)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c1%' type:i (0)
003: '' type:i (0)
004: '000' type:i (0)
 BE:b%
type_check_stack_push: 'b%'

Type Check Stack (6)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c1%' type:i (0)
003: '' type:i (0)
004: '000' type:i (0)
005: 'b%' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (7)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c1%' type:i (0)
003: '' type:i (0)
004: '000' type:i (0)
005: 'b%' type:i (0)
006: '' type:i (0)
 BE:b%
type_check_stack_push: 'b%'

Type Check Stack (8)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c1%' type:i (0)
003: '' type:i (0)
004: '000' type:i (0)
005: 'b%' type:i (0)
006: '' type:i (0)
007: 'b%' type:i (0)
 BE:*
Found operator *
type_check_stack_pop: 'b%'
type_check_stack_pop: ''
 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'

Type Check Stack (7)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c1%' type:i (0)
003: '' type:i (0)
004: '000' type:i (0)
005: 'b%' type:i (0)
006: '000' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i c1%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:?   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i *  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     i rq:i c1%  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:?   0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_END      U rq:i   0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N12 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 12 11
=================
(process_expression_types) 
==INFIX==

infix_stack_push: 'a%'
infix_stack_push: ''
infix_stack_push: 'c1%'
infix_stack_push: ''
infix_stack_push: ''
infix_stack_pop: ''
infix_stack_push: 'CHR$( )'
infix_stack_push: 'b%'
infix_stack_push: ''
infix_stack_push: 'b%'
infix_stack_pop: 'b%'
infix_stack_pop: ''
infix_stack_push: '( * b%)'
infix_stack_pop: '( * b%)'
(process_expression_types) ==( * b%)==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
(    output_qcode) N2 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N3 EXP_BUFF_ID_VARIABLE     i rq:i c1%  0:
(    output_qcode) N4 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:?   0:
(    output_qcode) N8 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
(    output_qcode) N9 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N10 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
(    output_qcode) N11 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N12 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
(    output_qcode) N13 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 12 11
========================================================
  AT a%,c% :PRINT CHR$(1)

========================================================
(output_expression_start)
   Frst:1 T:'a%'
token_is_variable: tok:'a%'
( output_variable) [i,()] i i a%
   Frst:0 T:''
(  output_integer) [i,()] i i 
   Frst:0 T:'c%'
token_is_variable: tok:'c%'
( output_variable) [i,()] i i c%
   Frst:0 T:'CHR$'
token_is_variable: tok:'CHR$'
CHR$ is function
CHR$ is function
function_return_type: 'CHR$' =>i
process_token: 'CHR$' t=>i
 Push:'CHR$'
   Frst:0 T:''
(  output_integer) [i,()] i i 
   Frst:0 T:'('
(output_sub_start)
 Push:'('
   Frst:0 T:''
(  output_integer) [i,(i )] i i 
   Frst:0 T:')'
Pop 4
Pop '('
(  output_sub_end)
CHR$ is function
Pop 5
Pop 'CHR$'
( output_function) [i,(i )] i i CHR$
(  output_sub_end)
Finalise stack
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:?   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
=================
 BE:a%
type_check_stack_push: 'a%'

Type Check Stack (1)

000: 'a%' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (2)

000: 'a%' type:i (0)
001: '' type:i (0)
 BE:c%
type_check_stack_push: 'c%'

Type Check Stack (3)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c%' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (4)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c%' type:i (0)
003: '' type:i (0)
 BE:

Type Check Stack (4)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c%' type:i (0)
003: '' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (5)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c%' type:i (0)
003: '' type:i (0)
004: '' type:i (0)
 BE:

Type Check Stack (5)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c%' type:i (0)
003: '' type:i (0)
004: '' type:i (0)
 BE:CHR$
FN: 1 args
function_return_type: 'CHR$' =>i
typecheck_expression:Ret type of CHR$ : i
type_check_stack_pop: ''
FN ARG 0 ri  0(i)  Arg ok
type_check_stack_push: '000'

Type Check Stack (5)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c%' type:i (0)
003: '' type:i (0)
004: '000' type:i (0)
 BE:

Type Check Stack (5)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c%' type:i (0)
003: '' type:i (0)
004: '000' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:?   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:?   0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_END      U rq:i   0:
=================
(process_expression_types) 
==INFIX==

infix_stack_push: 'a%'
infix_stack_push: ''
infix_stack_push: 'c%'
infix_stack_push: ''
infix_stack_push: ''
infix_stack_pop: ''
infix_stack_push: 'CHR$( )'
infix_stack_pop: 'CHR$( )'
(process_expression_types) ==CHR$( )==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
(    output_qcode) N2 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N3 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
(    output_qcode) N4 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:?   0:
(    output_qcode) N8 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
(    output_qcode) N9 EXP_BUFF_ID_SUB_END      U rq:i   0:
========================================================
  AT a%,c1% :PRINT CHR$(1) :BEEP b%,10*b%

========================================================
(output_expression_start)
   Frst:1 T:'a%'
token_is_variable: tok:'a%'
( output_variable) [i,()] i i a%
   Frst:0 T:''
(  output_integer) [i,()] i i 
   Frst:0 T:'c1%'
token_is_variable: tok:'c1%'
( output_variable) [i,()] i i c1%
   Frst:0 T:'CHR$'
token_is_variable: tok:'CHR$'
CHR$ is function
CHR$ is function
function_return_type: 'CHR$' =>i
process_token: 'CHR$' t=>i
 Push:'CHR$'
   Frst:0 T:''
(  output_integer) [i,()] i i 
   Frst:0 T:'('
(output_sub_start)
 Push:'('
   Frst:0 T:''
(  output_integer) [i,(i )] i i 
   Frst:0 T:')'
Pop 4
Pop '('
(  output_sub_end)
CHR$ is function
Pop 5
Pop 'CHR$'
( output_function) [i,(i )] i i CHR$
(  output_sub_end)
   Frst:0 T:'b%'
token_is_variable: tok:'b%'
( output_variable) [i,()] i i b%
   Frst:0 T:''
(  output_integer) [i,()] i i 
   Frst:0 T:'*'
'*' is operator
Push 1
 Push:'*'
   Frst:0 T:'b%'
token_is_variable: tok:'b%'
( output_variable) [i,()] i i b%
Finalise stack
Pop '*'
( output_operator) [i,()] i i *
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i c1%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:?   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i *  0:
=================
 BE:a%
type_check_stack_push: 'a%'

Type Check Stack (1)

000: 'a%' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (2)

000: 'a%' type:i (0)
001: '' type:i (0)
 BE:c1%
type_check_stack_push: 'c1%'

Type Check Stack (3)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c1%' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (4)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c1%' type:i (0)
003: '' type:i (0)
 BE:

Type Check Stack (4)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c1%' type:i (0)
003: '' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (5)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c1%' type:i (0)
003: '' type:i (0)
004: '' type:i (0)
 BE:

Type Check Stack (5)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c1%' type:i (0)
003: '' type:i (0)
004: '' type:i (0)
 BE:CHR$
FN: 1 args
function_return_type: 'CHR$' =>i
typecheck_expression:Ret type of CHR$ : i
type_check_stack_pop: ''
FN ARG 0 ri  0(i)  Arg ok
type_check_stack_push: '000'

Type Check Stack (5)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c1%' type:i (0)
003: '' type:i (0)
004: '000' type:i (0)
 BE:

Type Check Stack (5)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c1%' type:i (0)
003: '' type:i (0)
004: '000' type:i (0)
 BE:b%
type_check_stack_push: 'b%'

Type Check Stack (6)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c1%' type:i (0)
003: '' type:i (0)
004: '000' type:i (0)
005: 'b%' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (7)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c1%' type:i (0)
003: '' type:i (0)
004: '000' type:i (0)
005: 'b%' type:i (0)
006: '' type:i (0)
 BE:b%
type_check_stack_push: 'b%'

Type Check Stack (8)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c1%' type:i (0)
003: '' type:i (0)
004: '000' type:i (0)
005: 'b%' type:i (0)
006: '' type:i (0)
007: 'b%' type:i (0)
 BE:*
Found operator *
type_check_stack_pop: 'b%'
type_check_stack_pop: ''
 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'

Type Check Stack (7)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c1%' type:i (0)
003: '' type:i (0)
004: '000' type:i (0)
005: 'b%' type:i (0)
006: '000' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i c1%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:?   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i *  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     i rq:i c1%  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:?   0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_END      U rq:i   0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N12 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 12 11
=================
(process_expression_types) 
==INFIX==

infix_stack_push: 'a%'
infix_stack_push: ''
infix_stack_push: 'c1%'
infix_stack_push: ''
infix_stack_push: ''
infix_stack_pop: ''
infix_stack_push: 'CHR$( )'
infix_stack_push: 'b%'
infix_stack_push: ''
infix_stack_push: 'b%'
infix_stack_pop: 'b%'
infix_stack_pop: ''
infix_stack_push: '( * b%)'
infix_stack_pop: '( * b%)'
(process_expression_types) ==( * b%)==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
(    output_qcode) N2 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N3 EXP_BUFF_ID_VARIABLE     i rq:i c1%  0:
(    output_qcode) N4 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:?   0:
(    output_qcode) N8 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
(    output_qcode) N9 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N10 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
(    output_qcode) N11 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N12 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
(    output_qcode) N13 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 12 11
========================================================
  AT a%,c% :PRINT CHR$(2)

========================================================
(output_expression_start)
   Frst:1 T:'a%'
token_is_variable: tok:'a%'
( output_variable) [i,()] i i a%
   Frst:0 T:''
(  output_integer) [i,()] i i 
   Frst:0 T:'c%'
token_is_variable: tok:'c%'
( output_variable) [i,()] i i c%
   Frst:0 T:'CHR$'
token_is_variable: tok:'CHR$'
CHR$ is function
CHR$ is function
function_return_type: 'CHR$' =>i
process_token: 'CHR$' t=>i
 Push:'CHR$'
   Frst:0 T:''
(  output_integer) [i,()] i i 
   Frst:0 T:'('
(output_sub_start)
 Push:'('
   Frst:0 T:''
(  output_integer) [i,(i )] i i 
   Frst:0 T:')'
Pop 4
Pop '('
(  output_sub_end)
CHR$ is function
Pop 5
Pop 'CHR$'
( output_function) [i,(i )] i i CHR$
(  output_sub_end)
Finalise stack
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:?   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
=================
 BE:a%
type_check_stack_push: 'a%'

Type Check Stack (1)

000: 'a%' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (2)

000: 'a%' type:i (0)
001: '' type:i (0)
 BE:c%
type_check_stack_push: 'c%'

Type Check Stack (3)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c%' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (4)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c%' type:i (0)
003: '' type:i (0)
 BE:

Type Check Stack (4)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c%' type:i (0)
003: '' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (5)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c%' type:i (0)
003: '' type:i (0)
004: '' type:i (0)
 BE:

Type Check Stack (5)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c%' type:i (0)
003: '' type:i (0)
004: '' type:i (0)
 BE:CHR$
FN: 1 args
function_return_type: 'CHR$' =>i
typecheck_expression:Ret type of CHR$ : i
type_check_stack_pop: ''
FN ARG 0 ri  0(i)  Arg ok
type_check_stack_push: '000'

Type Check Stack (5)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c%' type:i (0)
003: '' type:i (0)
004: '000' type:i (0)
 BE:

Type Check Stack (5)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c%' type:i (0)
003: '' type:i (0)
004: '000' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:?   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:?   0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_END      U rq:i   0:
=================
(process_expression_types) 
==INFIX==

infix_stack_push: 'a%'
infix_stack_push: ''
infix_stack_push: 'c%'
infix_stack_push: ''
infix_stack_push: ''
infix_stack_pop: ''
infix_stack_push: 'CHR$( )'
infix_stack_pop: 'CHR$( )'
(process_expression_types) ==CHR$( )==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
(    output_qcode) N2 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N3 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
(    output_qcode) N4 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:?   0:
(    output_qcode) N8 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
(    output_qcode) N9 EXP_BUFF_ID_SUB_END      U rq:i   0:
========================================================
  AT a%,c1% :PRINT CHR$(2) :BEEP b%,10*b%

========================================================
(output_expression_start)
   Frst:1 T:'a%'
token_is_variable: tok:'a%'
( output_variable) [i,()] i i a%
   Frst:0 T:''
(  output_integer) [i,()] i i 
   Frst:0 T:'c1%'
token_is_variable: tok:'c1%'
( output_variable) [i,()] i i c1%
   Frst:0 T:'CHR$'
token_is_variable: tok:'CHR$'
CHR$ is function
CHR$ is function
function_return_type: 'CHR$' =>i
process_token: 'CHR$' t=>i
 Push:'CHR$'
   Frst:0 T:''
(  output_integer) [i,()] i i 
   Frst:0 T:'('
(output_sub_start)
 Push:'('
   Frst:0 T:''
(  output_integer) [i,(i )] i i 
   Frst:0 T:')'
Pop 4
Pop '('
(  output_sub_end)
CHR$ is function
Pop 5
Pop 'CHR$'
( output_function) [i,(i )] i i CHR$
(  output_sub_end)
   Frst:0 T:'b%'
token_is_variable: tok:'b%'
( output_variable) [i,()] i i b%
   Frst:0 T:''
(  output_integer) [i,()] i i 
   Frst:0 T:'*'
'*' is operator
Push 1
 Push:'*'
   Frst:0 T:'b%'
token_is_variable: tok:'b%'
( output_variable) [i,()] i i b%
Finalise stack
Pop '*'
( output_operator) [i,()] i i *
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i c1%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:?   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i *  0:
=================
 BE:a%
type_check_stack_push: 'a%'

Type Check Stack (1)

000: 'a%' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (2)

000: 'a%' type:i (0)
001: '' type:i (0)
 BE:c1%
type_check_stack_push: 'c1%'

Type Check Stack (3)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c1%' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (4)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c1%' type:i (0)
003: '' type:i (0)
 BE:

Type Check Stack (4)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c1%' type:i (0)
003: '' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (5)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c1%' type:i (0)
003: '' type:i (0)
004: '' type:i (0)
 BE:

Type Check Stack (5)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c1%' type:i (0)
003: '' type:i (0)
004: '' type:i (0)
 BE:CHR$
FN: 1 args
function_return_type: 'CHR$' =>i
typecheck_expression:Ret type of CHR$ : i
type_check_stack_pop: ''
FN ARG 0 ri  0(i)  Arg ok
type_check_stack_push: '000'

Type Check Stack (5)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c1%' type:i (0)
003: '' type:i (0)
004: '000' type:i (0)
 BE:

Type Check Stack (5)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c1%' type:i (0)
003: '' type:i (0)
004: '000' type:i (0)
 BE:b%
type_check_stack_push: 'b%'

Type Check Stack (6)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c1%' type:i (0)
003: '' type:i (0)
004: '000' type:i (0)
005: 'b%' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (7)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c1%' type:i (0)
003: '' type:i (0)
004: '000' type:i (0)
005: 'b%' type:i (0)
006: '' type:i (0)
 BE:b%
type_check_stack_push: 'b%'

Type Check Stack (8)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c1%' type:i (0)
003: '' type:i (0)
004: '000' type:i (0)
005: 'b%' type:i (0)
006: '' type:i (0)
007: 'b%' type:i (0)
 BE:*
Found operator *
type_check_stack_pop: 'b%'
type_check_stack_pop: ''
 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'

Type Check Stack (7)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c1%' type:i (0)
003: '' type:i (0)
004: '000' type:i (0)
005: 'b%' type:i (0)
006: '000' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i c1%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:?   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i *  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     i rq:i c1%  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:?   0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_END      U rq:i   0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N12 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 12 11
=================
(process_expression_types) 
==INFIX==

infix_stack_push: 'a%'
infix_stack_push: ''
infix_stack_push: 'c1%'
infix_stack_push: ''
infix_stack_push: ''
infix_stack_pop: ''
infix_stack_push: 'CHR$( )'
infix_stack_push: 'b%'
infix_stack_push: ''
infix_stack_push: 'b%'
infix_stack_pop: 'b%'
infix_stack_pop: ''
infix_stack_push: '( * b%)'
infix_stack_pop: '( * b%)'
(process_expression_types) ==( * b%)==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
(    output_qcode) N2 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N3 EXP_BUFF_ID_VARIABLE     i rq:i c1%  0:
(    output_qcode) N4 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:?   0:
(    output_qcode) N8 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
(    output_qcode) N9 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N10 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
(    output_qcode) N11 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N12 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
(    output_qcode) N13 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 12 11
========================================================
  AT a%,c% :PRINT CHR$(3)

========================================================
(output_expression_start)
   Frst:1 T:'a%'
token_is_variable: tok:'a%'
( output_variable) [i,()] i i a%
   Frst:0 T:''
(  output_integer) [i,()] i i 
   Frst:0 T:'c%'
token_is_variable: tok:'c%'
( output_variable) [i,()] i i c%
   Frst:0 T:'CHR$'
token_is_variable: tok:'CHR$'
CHR$ is function
CHR$ is function
function_return_type: 'CHR$' =>i
process_token: 'CHR$' t=>i
 Push:'CHR$'
   Frst:0 T:''
(  output_integer) [i,()] i i 
   Frst:0 T:'('
(output_sub_start)
 Push:'('
   Frst:0 T:''
(  output_integer) [i,(i )] i i 
   Frst:0 T:')'
Pop 4
Pop '('
(  output_sub_end)
CHR$ is function
Pop 5
Pop 'CHR$'
( output_function) [i,(i )] i i CHR$
(  output_sub_end)
Finalise stack
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:?   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
=================
 BE:a%
type_check_stack_push: 'a%'

Type Check Stack (1)

000: 'a%' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (2)

000: 'a%' type:i (0)
001: '' type:i (0)
 BE:c%
type_check_stack_push: 'c%'

Type Check Stack (3)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c%' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (4)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c%' type:i (0)
003: '' type:i (0)
 BE:

Type Check Stack (4)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c%' type:i (0)
003: '' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (5)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c%' type:i (0)
003: '' type:i (0)
004: '' type:i (0)
 BE:

Type Check Stack (5)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c%' type:i (0)
003: '' type:i (0)
004: '' type:i (0)
 BE:CHR$
FN: 1 args
function_return_type: 'CHR$' =>i
typecheck_expression:Ret type of CHR$ : i
type_check_stack_pop: ''
FN ARG 0 ri  0(i)  Arg ok
type_check_stack_push: '000'

Type Check Stack (5)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c%' type:i (0)
003: '' type:i (0)
004: '000' type:i (0)
 BE:

Type Check Stack (5)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c%' type:i (0)
003: '' type:i (0)
004: '000' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:?   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:?   0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_END      U rq:i   0:
=================
(process_expression_types) 
==INFIX==

infix_stack_push: 'a%'
infix_stack_push: ''
infix_stack_push: 'c%'
infix_stack_push: ''
infix_stack_push: ''
infix_stack_pop: ''
infix_stack_push: 'CHR$( )'
infix_stack_pop: 'CHR$( )'
(process_expression_types) ==CHR$( )==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
(    output_qcode) N2 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N3 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
(    output_qcode) N4 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:?   0:
(    output_qcode) N8 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
(    output_qcode) N9 EXP_BUFF_ID_SUB_END      U rq:i   0:
========================================================
  AT a%,c1% :PRINT CHR$(3) :BEEP b%,10*b%

========================================================
(output_expression_start)
   Frst:1 T:'a%'
token_is_variable: tok:'a%'
( output_variable) [i,()] i i a%
   Frst:0 T:''
(  output_integer) [i,()] i i 
   Frst:0 T:'c1%'
token_is_variable: tok:'c1%'
( output_variable) [i,()] i i c1%
   Frst:0 T:'CHR$'
token_is_variable: tok:'CHR$'
CHR$ is function
CHR$ is function
function_return_type: 'CHR$' =>i
process_token: 'CHR$' t=>i
 Push:'CHR$'
   Frst:0 T:''
(  output_integer) [i,()] i i 
   Frst:0 T:'('
(output_sub_start)
 Push:'('
   Frst:0 T:''
(  output_integer) [i,(i )] i i 
   Frst:0 T:')'
Pop 4
Pop '('
(  output_sub_end)
CHR$ is function
Pop 5
Pop 'CHR$'
( output_function) [i,(i )] i i CHR$
(  output_sub_end)
   Frst:0 T:'b%'
token_is_variable: tok:'b%'
( output_variable) [i,()] i i b%
   Frst:0 T:''
(  output_integer) [i,()] i i 
   Frst:0 T:'*'
'*' is operator
Push 1
 Push:'*'
   Frst:0 T:'b%'
token_is_variable: tok:'b%'
( output_variable) [i,()] i i b%
Finalise stack
Pop '*'
( output_operator) [i,()] i i *
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i c1%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:?   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i *  0:
=================
 BE:a%
type_check_stack_push: 'a%'

Type Check Stack (1)

000: 'a%' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (2)

000: 'a%' type:i (0)
001: '' type:i (0)
 BE:c1%
type_check_stack_push: 'c1%'

Type Check Stack (3)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c1%' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (4)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c1%' type:i (0)
003: '' type:i (0)
 BE:

Type Check Stack (4)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c1%' type:i (0)
003: '' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (5)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c1%' type:i (0)
003: '' type:i (0)
004: '' type:i (0)
 BE:

Type Check Stack (5)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c1%' type:i (0)
003: '' type:i (0)
004: '' type:i (0)
 BE:CHR$
FN: 1 args
function_return_type: 'CHR$' =>i
typecheck_expression:Ret type of CHR$ : i
type_check_stack_pop: ''
FN ARG 0 ri  0(i)  Arg ok
type_check_stack_push: '000'

Type Check Stack (5)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c1%' type:i (0)
003: '' type:i (0)
004: '000' type:i (0)
 BE:

Type Check Stack (5)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c1%' type:i (0)
003: '' type:i (0)
004: '000' type:i (0)
 BE:b%
type_check_stack_push: 'b%'

Type Check Stack (6)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c1%' type:i (0)
003: '' type:i (0)
004: '000' type:i (0)
005: 'b%' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (7)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c1%' type:i (0)
003: '' type:i (0)
004: '000' type:i (0)
005: 'b%' type:i (0)
006: '' type:i (0)
 BE:b%
type_check_stack_push: 'b%'

Type Check Stack (8)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c1%' type:i (0)
003: '' type:i (0)
004: '000' type:i (0)
005: 'b%' type:i (0)
006: '' type:i (0)
007: 'b%' type:i (0)
 BE:*
Found operator *
type_check_stack_pop: 'b%'
type_check_stack_pop: ''
 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'

Type Check Stack (7)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c1%' type:i (0)
003: '' type:i (0)
004: '000' type:i (0)
005: 'b%' type:i (0)
006: '000' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i c1%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:?   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i *  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     i rq:i c1%  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:?   0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_END      U rq:i   0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N12 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 12 11
=================
(process_expression_types) 
==INFIX==

infix_stack_push: 'a%'
infix_stack_push: ''
infix_stack_push: 'c1%'
infix_stack_push: ''
infix_stack_push: ''
infix_stack_pop: ''
infix_stack_push: 'CHR$( )'
infix_stack_push: 'b%'
infix_stack_push: ''
infix_stack_push: 'b%'
infix_stack_pop: 'b%'
infix_stack_pop: ''
infix_stack_push: '( * b%)'
infix_stack_pop: '( * b%)'
(process_expression_types) ==( * b%)==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
(    output_qcode) N2 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N3 EXP_BUFF_ID_VARIABLE     i rq:i c1%  0:
(    output_qcode) N4 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:?   0:
(    output_qcode) N8 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
(    output_qcode) N9 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N10 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
(    output_qcode) N11 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N12 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
(    output_qcode) N13 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 12 11
========================================================
  AT a%,c% :PRINT e$

========================================================
(output_expression_start)
   Frst:1 T:'a%'
token_is_variable: tok:'a%'
( output_variable) [i,()] i i a%
   Frst:0 T:''
(  output_integer) [i,()] i i 
   Frst:0 T:'c%'
token_is_variable: tok:'c%'
( output_variable) [i,()] i i c%
   Frst:0 T:'e$'
token_is_variable: tok:'e$'
( output_variable) [i,()] i i e$
Finalise stack
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i e$  0:
=================
 BE:a%
type_check_stack_push: 'a%'

Type Check Stack (1)

000: 'a%' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (2)

000: 'a%' type:i (0)
001: '' type:i (0)
 BE:c%
type_check_stack_push: 'c%'

Type Check Stack (3)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c%' type:i (0)
 BE:e$
type_check_stack_push: 'e$'

Type Check Stack (4)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c%' type:i (0)
003: 'e$' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i e$  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     i rq:i e$  0:
=================
(process_expression_types) 
==INFIX==

infix_stack_push: 'a%'
infix_stack_push: ''
infix_stack_push: 'c%'
infix_stack_push: 'e$'
infix_stack_pop: 'e$'
(process_expression_types) ==e$==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
(    output_qcode) N2 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N3 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
(    output_qcode) N4 EXP_BUFF_ID_VARIABLE     i rq:i e$  0:
========================================================
  AT a%,c1% :PRINT e$ :BEEP b%,10*b%

========================================================
(output_expression_start)
   Frst:1 T:'a%'
token_is_variable: tok:'a%'
( output_variable) [i,()] i i a%
   Frst:0 T:''
(  output_integer) [i,()] i i 
   Frst:0 T:'c1%'
token_is_variable: tok:'c1%'
( output_variable) [i,()] i i c1%
   Frst:0 T:'e$'
token_is_variable: tok:'e$'
( output_variable) [i,()] i i e$
   Frst:0 T:'b%'
token_is_variable: tok:'b%'
( output_variable) [i,()] i i b%
   Frst:0 T:''
(  output_integer) [i,()] i i 
   Frst:0 T:'*'
'*' is operator
Push 1
 Push:'*'
   Frst:0 T:'b%'
token_is_variable: tok:'b%'
( output_variable) [i,()] i i b%
Finalise stack
Pop '*'
( output_operator) [i,()] i i *
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i c1%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i e$  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i *  0:
=================
 BE:a%
type_check_stack_push: 'a%'

Type Check Stack (1)

000: 'a%' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (2)

000: 'a%' type:i (0)
001: '' type:i (0)
 BE:c1%
type_check_stack_push: 'c1%'

Type Check Stack (3)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c1%' type:i (0)
 BE:e$
type_check_stack_push: 'e$'

Type Check Stack (4)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c1%' type:i (0)
003: 'e$' type:i (0)
 BE:b%
type_check_stack_push: 'b%'

Type Check Stack (5)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c1%' type:i (0)
003: 'e$' type:i (0)
004: 'b%' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (6)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c1%' type:i (0)
003: 'e$' type:i (0)
004: 'b%' type:i (0)
005: '' type:i (0)
 BE:b%
type_check_stack_push: 'b%'

Type Check Stack (7)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c1%' type:i (0)
003: 'e$' type:i (0)
004: 'b%' type:i (0)
005: '' type:i (0)
006: 'b%' type:i (0)
 BE:*
Found operator *
type_check_stack_pop: 'b%'
type_check_stack_pop: ''
 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'

Type Check Stack (6)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c1%' type:i (0)
003: 'e$' type:i (0)
004: 'b%' type:i (0)
005: '000' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i c1%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i e$  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i *  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     i rq:i c1%  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     i rq:i e$  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 7 6
=================
(process_expression_types) 
==INFIX==

infix_stack_push: 'a%'
infix_stack_push: ''
infix_stack_push: 'c1%'
infix_stack_push: 'e$'
infix_stack_push: 'b%'
infix_stack_push: ''
infix_stack_push: 'b%'
infix_stack_pop: 'b%'
infix_stack_pop: ''
infix_stack_push: '( * b%)'
infix_stack_pop: '( * b%)'
(process_expression_types) ==( * b%)==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
(    output_qcode) N2 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N3 EXP_BUFF_ID_VARIABLE     i rq:i c1%  0:
(    output_qcode) N4 EXP_BUFF_ID_VARIABLE     i rq:i e$  0:
(    output_qcode) N5 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
(    output_qcode) N6 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N7 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
(    output_qcode) N8 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 7 6
========================================================
  AT a%,c% :PRINT CHR$(5)

========================================================
(output_expression_start)
   Frst:1 T:'a%'
token_is_variable: tok:'a%'
( output_variable) [i,()] i i a%
   Frst:0 T:''
(  output_integer) [i,()] i i 
   Frst:0 T:'c%'
token_is_variable: tok:'c%'
( output_variable) [i,()] i i c%
   Frst:0 T:'CHR$'
token_is_variable: tok:'CHR$'
CHR$ is function
CHR$ is function
function_return_type: 'CHR$' =>i
process_token: 'CHR$' t=>i
 Push:'CHR$'
   Frst:0 T:''
(  output_integer) [i,()] i i 
   Frst:0 T:'('
(output_sub_start)
 Push:'('
   Frst:0 T:''
(  output_integer) [i,(i )] i i 
   Frst:0 T:')'
Pop 4
Pop '('
(  output_sub_end)
CHR$ is function
Pop 5
Pop 'CHR$'
( output_function) [i,(i )] i i CHR$
(  output_sub_end)
Finalise stack
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:?   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
=================
 BE:a%
type_check_stack_push: 'a%'

Type Check Stack (1)

000: 'a%' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (2)

000: 'a%' type:i (0)
001: '' type:i (0)
 BE:c%
type_check_stack_push: 'c%'

Type Check Stack (3)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c%' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (4)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c%' type:i (0)
003: '' type:i (0)
 BE:

Type Check Stack (4)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c%' type:i (0)
003: '' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (5)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c%' type:i (0)
003: '' type:i (0)
004: '' type:i (0)
 BE:

Type Check Stack (5)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c%' type:i (0)
003: '' type:i (0)
004: '' type:i (0)
 BE:CHR$
FN: 1 args
function_return_type: 'CHR$' =>i
typecheck_expression:Ret type of CHR$ : i
type_check_stack_pop: ''
FN ARG 0 ri  0(i)  Arg ok
type_check_stack_push: '000'

Type Check Stack (5)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c%' type:i (0)
003: '' type:i (0)
004: '000' type:i (0)
 BE:

Type Check Stack (5)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c%' type:i (0)
003: '' type:i (0)
004: '000' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:?   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:?   0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_END      U rq:i   0:
=================
(process_expression_types) 
==INFIX==

infix_stack_push: 'a%'
infix_stack_push: ''
infix_stack_push: 'c%'
infix_stack_push: ''
infix_stack_push: ''
infix_stack_pop: ''
infix_stack_push: 'CHR$( )'
infix_stack_pop: 'CHR$( )'
(process_expression_types) ==CHR$( )==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
(    output_qcode) N2 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N3 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
(    output_qcode) N4 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:?   0:
(    output_qcode) N8 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
(    output_qcode) N9 EXP_BUFF_ID_SUB_END      U rq:i   0:
========================================================
  AT a%,c1% :PRINT CHR$(5) :BEEP b%,10*b%

========================================================
(output_expression_start)
   Frst:1 T:'a%'
token_is_variable: tok:'a%'
( output_variable) [i,()] i i a%
   Frst:0 T:''
(  output_integer) [i,()] i i 
   Frst:0 T:'c1%'
token_is_variable: tok:'c1%'
( output_variable) [i,()] i i c1%
   Frst:0 T:'CHR$'
token_is_variable: tok:'CHR$'
CHR$ is function
CHR$ is function
function_return_type: 'CHR$' =>i
process_token: 'CHR$' t=>i
 Push:'CHR$'
   Frst:0 T:''
(  output_integer) [i,()] i i 
   Frst:0 T:'('
(output_sub_start)
 Push:'('
   Frst:0 T:''
(  output_integer) [i,(i )] i i 
   Frst:0 T:')'
Pop 4
Pop '('
(  output_sub_end)
CHR$ is function
Pop 5
Pop 'CHR$'
( output_function) [i,(i )] i i CHR$
(  output_sub_end)
   Frst:0 T:'b%'
token_is_variable: tok:'b%'
( output_variable) [i,()] i i b%
   Frst:0 T:''
(  output_integer) [i,()] i i 
   Frst:0 T:'*'
'*' is operator
Push 1
 Push:'*'
   Frst:0 T:'b%'
token_is_variable: tok:'b%'
( output_variable) [i,()] i i b%
Finalise stack
Pop '*'
( output_operator) [i,()] i i *
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i c1%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:?   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i *  0:
=================
 BE:a%
type_check_stack_push: 'a%'

Type Check Stack (1)

000: 'a%' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (2)

000: 'a%' type:i (0)
001: '' type:i (0)
 BE:c1%
type_check_stack_push: 'c1%'

Type Check Stack (3)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c1%' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (4)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c1%' type:i (0)
003: '' type:i (0)
 BE:

Type Check Stack (4)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c1%' type:i (0)
003: '' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (5)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c1%' type:i (0)
003: '' type:i (0)
004: '' type:i (0)
 BE:

Type Check Stack (5)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c1%' type:i (0)
003: '' type:i (0)
004: '' type:i (0)
 BE:CHR$
FN: 1 args
function_return_type: 'CHR$' =>i
typecheck_expression:Ret type of CHR$ : i
type_check_stack_pop: ''
FN ARG 0 ri  0(i)  Arg ok
type_check_stack_push: '000'

Type Check Stack (5)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c1%' type:i (0)
003: '' type:i (0)
004: '000' type:i (0)
 BE:

Type Check Stack (5)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c1%' type:i (0)
003: '' type:i (0)
004: '000' type:i (0)
 BE:b%
type_check_stack_push: 'b%'

Type Check Stack (6)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c1%' type:i (0)
003: '' type:i (0)
004: '000' type:i (0)
005: 'b%' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (7)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c1%' type:i (0)
003: '' type:i (0)
004: '000' type:i (0)
005: 'b%' type:i (0)
006: '' type:i (0)
 BE:b%
type_check_stack_push: 'b%'

Type Check Stack (8)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c1%' type:i (0)
003: '' type:i (0)
004: '000' type:i (0)
005: 'b%' type:i (0)
006: '' type:i (0)
007: 'b%' type:i (0)
 BE:*
Found operator *
type_check_stack_pop: 'b%'
type_check_stack_pop: ''
 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'

Type Check Stack (7)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c1%' type:i (0)
003: '' type:i (0)
004: '000' type:i (0)
005: 'b%' type:i (0)
006: '000' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i c1%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:?   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i *  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     i rq:i c1%  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:?   0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_END      U rq:i   0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N12 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 12 11
=================
(process_expression_types) 
==INFIX==

infix_stack_push: 'a%'
infix_stack_push: ''
infix_stack_push: 'c1%'
infix_stack_push: ''
infix_stack_push: ''
infix_stack_pop: ''
infix_stack_push: 'CHR$( )'
infix_stack_push: 'b%'
infix_stack_push: ''
infix_stack_push: 'b%'
infix_stack_pop: 'b%'
infix_stack_pop: ''
infix_stack_push: '( * b%)'
infix_stack_pop: '( * b%)'
(process_expression_types) ==( * b%)==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
(    output_qcode) N2 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N3 EXP_BUFF_ID_VARIABLE     i rq:i c1%  0:
(    output_qcode) N4 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:?   0:
(    output_qcode) N8 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
(    output_qcode) N9 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N10 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
(    output_qcode) N11 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N12 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
(    output_qcode) N13 EXP_BUFF_ID_OPERATOR     i rq:i *  2: 12 11
========================================================
  AT a%,c% :PRINT " " :AT a%,c1% :PRINT " "

========================================================
(output_expression_start)
   Frst:1 T:'a%'
token_is_variable: tok:'a%'
( output_variable) [i,()] i i a%
   Frst:0 T:''
(  output_integer) [i,()] i i 
   Frst:0 T:'c%'
token_is_variable: tok:'c%'
( output_variable) [i,()] i i c%
   Frst:0 T:''
(  output_integer) [i,()] i i 
   Frst:0 T:'a%'
token_is_variable: tok:'a%'
( output_variable) [i,()] i i a%
   Frst:0 T:''
(  output_integer) [i,()] i i 
   Frst:0 T:'c1%'
token_is_variable: tok:'c1%'
( output_variable) [i,()] i i c1%
   Frst:0 T:''
(  output_integer) [i,()] i i 
Finalise stack
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i c1%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
=================
 BE:a%
type_check_stack_push: 'a%'

Type Check Stack (1)

000: 'a%' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (2)

000: 'a%' type:i (0)
001: '' type:i (0)
 BE:c%
type_check_stack_push: 'c%'

Type Check Stack (3)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c%' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (4)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c%' type:i (0)
003: '' type:i (0)
 BE:a%
type_check_stack_push: 'a%'

Type Check Stack (5)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c%' type:i (0)
003: '' type:i (0)
004: 'a%' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (6)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c%' type:i (0)
003: '' type:i (0)
004: 'a%' type:i (0)
005: '' type:i (0)
 BE:c1%
type_check_stack_push: 'c1%'

Type Check Stack (7)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c%' type:i (0)
003: '' type:i (0)
004: 'a%' type:i (0)
005: '' type:i (0)
006: 'c1%' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (8)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'c%' type:i (0)
003: '' type:i (0)
004: 'a%' type:i (0)
005: '' type:i (0)
006: 'c1%' type:i (0)
007: '' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i c1%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_VARIABLE     i rq:i c1%  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_INTEGER      i rq:i   0:
=================
(process_expression_types) 
==INFIX==

infix_stack_push: 'a%'
infix_stack_push: ''
infix_stack_push: 'c%'
infix_stack_push: ''
infix_stack_push: 'a%'
infix_stack_push: ''
infix_stack_push: 'c1%'
infix_stack_push: ''
infix_stack_pop: ''
(process_expression_types) ====
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
(    output_qcode) N2 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N3 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
(    output_qcode) N4 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N5 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
(    output_qcode) N6 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N7 EXP_BUFF_ID_VARIABLE     i rq:i c1%  0:
(    output_qcode) N8 EXP_BUFF_ID_INTEGER      i rq:i   0:
========================================================
  i%=KEY

========================================================
(output_expression_start)
   Frst:1 T:'i%'
token_is_variable: tok:'i%'
( output_variable) [i,()] i i i%
   Frst:0 T:''
(  output_integer) [i,()] i i 
   Frst:0 T:'KEY'
token_is_variable: tok:'KEY'
KEY is function
KEY is function
function_return_type: 'KEY' =>f
process_token: 'KEY' t=>f
 Push:'KEY'
Finalise stack
Pop 'KEY'
( output_operator) [i,()] i i KEY
KEY is function
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i i%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     i rq:i KEY  0:
=================
 BE:i%
type_check_stack_push: 'i%'

Type Check Stack (1)

000: 'i%' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (2)

000: 'i%' type:i (0)
001: '' type:i (0)
 BE:KEY
FN: 2 args
function_return_type: 'KEY' =>f
typecheck_expression:Ret type of KEY : f
type_check_stack_pop: ''
FN ARG 1 ri  0(i)  Arg ok
type_check_stack_pop: 'i%'
FN ARG 0 ri i% 0(i)  Arg ok
type_check_stack_push: '000'

Type Check Stack (1)

000: '000' type:f (1)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i i%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     i rq:i KEY  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i i%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_FUNCTION     f rq:f KEY  0:
=================
(process_expression_types) 
==INFIX==

infix_stack_push: 'i%'
infix_stack_push: ''
infix_stack_pop: ''
infix_stack_pop: 'i%'
infix_stack_push: 'KEY(i%  )'
infix_stack_pop: 'KEY(i%  )'
(process_expression_types) ==KEY(i%  )==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i i%  0:
(    output_qcode) N2 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N3 EXP_BUFF_ID_FUNCTION     f rq:f KEY  0:
========================================================
  IF i%

========================================================
(output_expression_start)
   Frst:1 T:''
(  output_integer) [i,()] i i 
   Frst:0 T:'i%'
token_is_variable: tok:'i%'
( output_variable) [i,()] i i i%
Finalise stack
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i i%  0:
=================
 BE:
type_check_stack_push: ''

Type Check Stack (1)

000: '' type:i (0)
 BE:i%
type_check_stack_push: 'i%'

Type Check Stack (2)

000: '' type:i (0)
001: 'i%' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i i%  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i i%  0:
=================
(process_expression_types) 
==INFIX==

infix_stack_push: ''
infix_stack_push: 'i%'
infix_stack_pop: 'i%'
(process_expression_types) ==i%==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     i rq:i i%  0:
========================================================
   IF i%=%S AND y%>1

========================================================
(output_expression_start)
   Frst:1 T:''
(  output_integer) [i,()] i i 
   Frst:0 T:'i%'
token_is_variable: tok:'i%'
( output_variable) [i,()] i i i%
   Frst:0 T:'='
'=' is operator
Push 1
 Push:'='
   Frst:0 T:''
(  output_integer) [i,()] i i 
   Frst:0 T:'S'
token_is_variable: tok:'S'
( output_variable) [f,()] f f S
   Frst:0 T:'AND'
'AND' is operator
Push 1
 Push:'AND'
   Frst:0 T:'y%'
token_is_variable: tok:'y%'
( output_variable) [f,()] f f y%
   Frst:0 T:'>'
'>' is operator
Pop 1
Pop 'AND'
( output_operator) [f,()] f f AND
Push 1
 Push:'>'
Finalise stack
Pop '>'
( output_operator) [f,()] f f >
Pop '='
( output_operator) [f,()] f f =
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i i%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f S  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f AND  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f >  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f =  0:
=================
 BE:
type_check_stack_push: ''

Type Check Stack (1)

000: '' type:i (0)
 BE:i%
type_check_stack_push: 'i%'

Type Check Stack (2)

000: '' type:i (0)
001: 'i%' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (3)

000: '' type:i (0)
001: 'i%' type:i (0)
002: '' type:i (0)
 BE:S
type_check_stack_push: 'S'

Type Check Stack (4)

000: '' type:i (0)
001: 'i%' type:i (0)
002: '' type:i (0)
003: 'S' type:f (1)
 BE:y%
type_check_stack_push: 'y%'

Type Check Stack (5)

000: '' type:i (0)
001: 'i%' type:i (0)
002: '' type:i (0)
003: 'S' type:f (1)
004: 'y%' type:f (1)
 BE:AND
Found operator AND
type_check_stack_pop: 'y%'
type_check_stack_pop: 'S'
 Mutable type 1 1
 Same type
type_check_stack_push: '000'

Type Check Stack (4)

000: '' type:i (0)
001: 'i%' type:i (0)
002: '' type:i (0)
003: '000' type:f (1)
 BE:>
Found operator >
type_check_stack_pop: '000'
type_check_stack_pop: ''
 Mutable type 1 0
 Autoconversion
 --------------
 Op1: type:1 req type:1
 Op2: type:0 req type:0
 BE:  type:1 req type:1
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i i%  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     f rq:f S  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_OPERATOR     f rq:f AND  2: 5 4
=================
 Insert after 3 exp_buffer2_i:6
   Found at i:2
   Copied 5 to 6:
   Copied 4 to 5:
   Copied 3 to 4:
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i i%  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 6 3
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     f rq:f S  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_OPERATOR     f rq:f AND  2: 5 4
=================
type_check_stack_push: '000'

Type Check Stack (3)

000: '' type:i (0)
001: 'i%' type:i (0)
002: '000' type:f (1)
 BE:=
Found operator =
type_check_stack_pop: '000'
type_check_stack_pop: 'i%'
 Mutable type 1 0
 Autoconversion
 --------------
 Op1: type:1 req type:1
 Op2: type:0 req type:0
 BE:  type:1 req type:1
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i i%  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 6 3
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     f rq:f S  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_OPERATOR     f rq:f AND  2: 5 4
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     f rq:f >  2: 6 3
=================
 Insert after 7 exp_buffer2_i:8
   Found at i:7
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i i%  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 6 3
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     f rq:f S  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_OPERATOR     f rq:f AND  2: 5 4
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     f rq:f >  2: 6 3
(dump_exp_buffer2) N10 EXP_BUFF_ID_AUTOCON      i rq:i autocon f->i  2: 7 2
=================
type_check_stack_push: '000'

Type Check Stack (2)

000: '' type:i (0)
001: '000' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i i%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f S  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f AND  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f >  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f =  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     i rq:i i%  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 6 3
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     f rq:f S  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_OPERATOR     f rq:f AND  2: 5 4
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     f rq:f >  2: 6 3
(dump_exp_buffer2) N10 EXP_BUFF_ID_AUTOCON      i rq:i autocon f->i  2: 7 2
(dump_exp_buffer2) N9 EXP_BUFF_ID_OPERATOR     i rq:i =  2: 7 2
=================
(process_expression_types) 
==INFIX==

infix_stack_push: ''
infix_stack_push: 'i%'
infix_stack_push: ''
infix_stack_push: 'S'
infix_stack_push: 'y%'
infix_stack_pop: 'y%'
infix_stack_pop: 'S'
infix_stack_push: '(S AND y%)'
infix_stack_pop: '(S AND y%)'
infix_stack_pop: ''
infix_stack_push: '( > (S AND y%))'
infix_stack_pop: '( > (S AND y%))'
infix_stack_pop: 'i%'
infix_stack_push: '(i% = ( > (S AND y%)))'
infix_stack_pop: '(i% = ( > (S AND y%)))'
(process_expression_types) ==(i% = ( > (S AND y%)))==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     i rq:i i%  0:
(    output_qcode) N3 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N8 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 6 3
(    output_qcode) N4 EXP_BUFF_ID_VARIABLE     f rq:f S  0:
(    output_qcode) N5 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
(    output_qcode) N6 EXP_BUFF_ID_OPERATOR     f rq:f AND  2: 5 4
(    output_qcode) N7 EXP_BUFF_ID_OPERATOR     f rq:f >  2: 6 3
(    output_qcode) N10 EXP_BUFF_ID_AUTOCON      i rq:i autocon f->i  2: 7 2
(    output_qcode) N9 EXP_BUFF_ID_OPERATOR     i rq:i =  2: 7 2
========================================================
    AT x%,y% :PRINT CHR$(158)

========================================================
(output_expression_start)
   Frst:1 T:'x%'
token_is_variable: tok:'x%'
( output_variable) [f,()] i i x%
   Frst:0 T:''
(  output_integer) [f,()] i f 
   Frst:0 T:'y%'
token_is_variable: tok:'y%'
( output_variable) [f,()] f f y%
   Frst:0 T:'CHR$'
token_is_variable: tok:'CHR$'
CHR$ is function
CHR$ is function
function_return_type: 'CHR$' =>i
process_token: 'CHR$' t=>i
 Push:'CHR$'
   Frst:0 T:''
(  output_integer) [f,()] i f 
   Frst:0 T:'('
(output_sub_start)
 Push:'('
   Frst:0 T:''
(  output_integer) [i,(f )] i i 
   Frst:0 T:')'
Pop 4
Pop '('
(  output_sub_end)
CHR$ is function
Pop 5
Pop 'CHR$'
( output_function) [i,(f )] i i CHR$
(  output_sub_end)
Finalise stack
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i x%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:?   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
=================
 BE:x%
type_check_stack_push: 'x%'

Type Check Stack (1)

000: 'x%' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (2)

000: 'x%' type:i (0)
001: '' type:i (0)
 BE:y%
type_check_stack_push: 'y%'

Type Check Stack (3)

000: 'x%' type:i (0)
001: '' type:i (0)
002: 'y%' type:f (1)
 BE:
type_check_stack_push: ''

Type Check Stack (4)

000: 'x%' type:i (0)
001: '' type:i (0)
002: 'y%' type:f (1)
003: '' type:i (0)
 BE:

Type Check Stack (4)

000: 'x%' type:i (0)
001: '' type:i (0)
002: 'y%' type:f (1)
003: '' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (5)

000: 'x%' type:i (0)
001: '' type:i (0)
002: 'y%' type:f (1)
003: '' type:i (0)
004: '' type:i (0)
 BE:

Type Check Stack (5)

000: 'x%' type:i (0)
001: '' type:i (0)
002: 'y%' type:f (1)
003: '' type:i (0)
004: '' type:i (0)
 BE:CHR$
FN: 1 args
function_return_type: 'CHR$' =>i
typecheck_expression:Ret type of CHR$ : i
type_check_stack_pop: ''
FN ARG 0 ri  0(i)  Arg ok
type_check_stack_push: '000'

Type Check Stack (5)

000: 'x%' type:i (0)
001: '' type:i (0)
002: 'y%' type:f (1)
003: '' type:i (0)
004: '000' type:i (0)
 BE:

Type Check Stack (5)

000: 'x%' type:i (0)
001: '' type:i (0)
002: 'y%' type:f (1)
003: '' type:i (0)
004: '000' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i x%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:?   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i x%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:?   0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_END      U rq:i   0:
=================
(process_expression_types) 
==INFIX==

infix_stack_push: 'x%'
infix_stack_push: ''
infix_stack_push: 'y%'
infix_stack_push: ''
infix_stack_push: ''
infix_stack_pop: ''
infix_stack_push: 'CHR$( )'
infix_stack_pop: 'CHR$( )'
(process_expression_types) ==CHR$( )==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i x%  0:
(    output_qcode) N2 EXP_BUFF_ID_INTEGER      i rq:f   0:
(    output_qcode) N3 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
(    output_qcode) N4 EXP_BUFF_ID_INTEGER      i rq:f   0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:?   0:
(    output_qcode) N8 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
(    output_qcode) N9 EXP_BUFF_ID_SUB_END      U rq:i   0:
========================================================
    y%=y%-1 :AT x%,y% :PRINT CHR$(7)

========================================================
(output_expression_start)
   Frst:1 T:'y%'
token_is_variable: tok:'y%'
( output_variable) [f,()] i i y%
   Frst:0 T:''
(  output_integer) [f,()] i f 
   Frst:0 T:'y%'
token_is_variable: tok:'y%'
( output_variable) [f,()] f f y%
   Frst:0 T:'-'
'-' is operator
Push 1
 Push:'-'
   Frst:0 T:'x%'
token_is_variable: tok:'x%'
( output_variable) [f,()] f f x%
   Frst:0 T:''
(  output_integer) [f,()] i f 
   Frst:0 T:'y%'
token_is_variable: tok:'y%'
( output_variable) [f,()] f f y%
   Frst:0 T:'CHR$'
token_is_variable: tok:'CHR$'
CHR$ is function
CHR$ is function
function_return_type: 'CHR$' =>i
process_token: 'CHR$' t=>i
 Push:'CHR$'
   Frst:0 T:''
(  output_integer) [f,()] i f 
   Frst:0 T:'('
(output_sub_start)
 Push:'('
   Frst:0 T:''
(  output_integer) [i,(f )] i i 
   Frst:0 T:')'
Pop 4
Pop '('
(  output_sub_end)
CHR$ is function
Pop 5
Pop 'CHR$'
( output_function) [i,(f )] i i CHR$
(  output_sub_end)
Finalise stack
Pop '-'
( output_operator) [f,()] f f -
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i y%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f x%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:?   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f -  0:
=================
 BE:y%
type_check_stack_push: 'y%'

Type Check Stack (1)

000: 'y%' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (2)

000: 'y%' type:i (0)
001: '' type:i (0)
 BE:y%
type_check_stack_push: 'y%'

Type Check Stack (3)

000: 'y%' type:i (0)
001: '' type:i (0)
002: 'y%' type:f (1)
 BE:x%
type_check_stack_push: 'x%'

Type Check Stack (4)

000: 'y%' type:i (0)
001: '' type:i (0)
002: 'y%' type:f (1)
003: 'x%' type:f (1)
 BE:
type_check_stack_push: ''

Type Check Stack (5)

000: 'y%' type:i (0)
001: '' type:i (0)
002: 'y%' type:f (1)
003: 'x%' type:f (1)
004: '' type:i (0)
 BE:y%
type_check_stack_push: 'y%'

Type Check Stack (6)

000: 'y%' type:i (0)
001: '' type:i (0)
002: 'y%' type:f (1)
003: 'x%' type:f (1)
004: '' type:i (0)
005: 'y%' type:f (1)
 BE:
type_check_stack_push: ''

Type Check Stack (7)

000: 'y%' type:i (0)
001: '' type:i (0)
002: 'y%' type:f (1)
003: 'x%' type:f (1)
004: '' type:i (0)
005: 'y%' type:f (1)
006: '' type:i (0)
 BE:

Type Check Stack (7)

000: 'y%' type:i (0)
001: '' type:i (0)
002: 'y%' type:f (1)
003: 'x%' type:f (1)
004: '' type:i (0)
005: 'y%' type:f (1)
006: '' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (8)

000: 'y%' type:i (0)
001: '' type:i (0)
002: 'y%' type:f (1)
003: 'x%' type:f (1)
004: '' type:i (0)
005: 'y%' type:f (1)
006: '' type:i (0)
007: '' type:i (0)
 BE:

Type Check Stack (8)

000: 'y%' type:i (0)
001: '' type:i (0)
002: 'y%' type:f (1)
003: 'x%' type:f (1)
004: '' type:i (0)
005: 'y%' type:f (1)
006: '' type:i (0)
007: '' type:i (0)
 BE:CHR$
FN: 1 args
function_return_type: 'CHR$' =>i
typecheck_expression:Ret type of CHR$ : i
type_check_stack_pop: ''
FN ARG 0 ri  0(i)  Arg ok
type_check_stack_push: '000'

Type Check Stack (8)

000: 'y%' type:i (0)
001: '' type:i (0)
002: 'y%' type:f (1)
003: 'x%' type:f (1)
004: '' type:i (0)
005: 'y%' type:f (1)
006: '' type:i (0)
007: '000' type:i (0)
 BE:

Type Check Stack (8)

000: 'y%' type:i (0)
001: '' type:i (0)
002: 'y%' type:f (1)
003: 'x%' type:f (1)
004: '' type:i (0)
005: 'y%' type:f (1)
006: '' type:i (0)
007: '000' type:i (0)
 BE:-
Found operator -
type_check_stack_pop: '000'
type_check_stack_pop: ''
 Mutable type 0 0
 Same type
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i y%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     f rq:f x%  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_SUB_END      U rq:?   0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
(dump_exp_buffer2) N12 EXP_BUFF_ID_SUB_END      U rq:i   0:
=================
 Insert after 11 exp_buffer2_i:12
   Found at i:10
   Copied 11 to 12:
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i y%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     f rq:f x%  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_SUB_END      U rq:?   0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 11 7
(dump_exp_buffer2) N12 EXP_BUFF_ID_SUB_END      U rq:i   0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i y%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     f rq:f x%  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_SUB_END      U rq:?   0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 11 7
(dump_exp_buffer2) N12 EXP_BUFF_ID_SUB_END      U rq:i   0:
=================
 Insert after 7 exp_buffer2_i:13
   Found at i:6
   Copied 12 to 13:
   Copied 11 to 12:
   Copied 10 to 11:
   Copied 9 to 10:
   Copied 8 to 9:
   Copied 7 to 8:
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i y%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     f rq:f x%  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 11 7
(dump_exp_buffer2) N8 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_SUB_END      U rq:?   0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 11 7
(dump_exp_buffer2) N12 EXP_BUFF_ID_SUB_END      U rq:i   0:
=================
type_check_stack_push: '000'

Type Check Stack (7)

000: 'y%' type:i (0)
001: '' type:i (0)
002: 'y%' type:f (1)
003: 'x%' type:f (1)
004: '' type:i (0)
005: 'y%' type:f (1)
006: '000' type:f (1)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i y%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f x%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:?   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f -  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i y%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     f rq:f x%  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 11 7
(dump_exp_buffer2) N8 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_SUB_END      U rq:?   0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 11 7
(dump_exp_buffer2) N12 EXP_BUFF_ID_SUB_END      U rq:i   0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_OPERATOR     f rq:f -  2: 11 7
=================
(process_expression_types) 
==INFIX==

infix_stack_push: 'y%'
infix_stack_push: ''
infix_stack_push: 'y%'
infix_stack_push: 'x%'
infix_stack_push: ''
infix_stack_push: 'y%'
infix_stack_push: ''
infix_stack_push: ''
infix_stack_pop: ''
infix_stack_push: 'CHR$( )'
infix_stack_pop: 'CHR$( )'
infix_stack_pop: ''
infix_stack_push: '( - CHR$( ))'
infix_stack_pop: '( - CHR$( ))'
(process_expression_types) ==( - CHR$( ))==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i y%  0:
(    output_qcode) N2 EXP_BUFF_ID_INTEGER      i rq:f   0:
(    output_qcode) N3 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
(    output_qcode) N4 EXP_BUFF_ID_VARIABLE     f rq:f x%  0:
(    output_qcode) N5 EXP_BUFF_ID_INTEGER      i rq:f   0:
(    output_qcode) N6 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
(    output_qcode) N7 EXP_BUFF_ID_INTEGER      i rq:f   0:
(    output_qcode) N14 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 11 7
(    output_qcode) N8 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N9 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N10 EXP_BUFF_ID_SUB_END      U rq:?   0:
(    output_qcode) N11 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
(    output_qcode) N14 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 11 7
(    output_qcode) N12 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N13 EXP_BUFF_ID_OPERATOR     f rq:f -  2: 11 7
========================================================
   ENDIF

========================================================
(output_expression_start)
   Frst:1 T:''
(  output_integer) [f,()] i f 
Finalise stack
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
=================
 BE:
type_check_stack_push: ''

Type Check Stack (1)

000: '' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_INTEGER      i rq:f   0:
=================
(process_expression_types) 
==INFIX==

infix_stack_push: ''
infix_stack_pop: ''
(process_expression_types) ====
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_INTEGER      i rq:f   0:
========================================================
   IF i%=%X AND y%<4

========================================================
(output_expression_start)
   Frst:1 T:''
(  output_integer) [f,()] i f 
   Frst:0 T:'i%'
token_is_variable: tok:'i%'
( output_variable) [f,()] f f i%
   Frst:0 T:'='
'=' is operator
Push 1
 Push:'='
   Frst:0 T:''
(  output_integer) [f,()] i f 
   Frst:0 T:'X'
token_is_variable: tok:'X'
( output_variable) [f,()] f f X
   Frst:0 T:'AND'
'AND' is operator
Push 1
 Push:'AND'
   Frst:0 T:'y%'
token_is_variable: tok:'y%'
( output_variable) [f,()] f f y%
   Frst:0 T:'<'
'<' is operator
Pop 1
Pop 'AND'
( output_operator) [f,()] f f AND
Push 1
 Push:'<'
Finalise stack
Pop '<'
( output_operator) [f,()] f f <
Pop '='
( output_operator) [f,()] f f =
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f i%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f X  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f AND  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f <  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f =  0:
=================
 BE:
type_check_stack_push: ''

Type Check Stack (1)

000: '' type:i (0)
 BE:i%
type_check_stack_push: 'i%'

Type Check Stack (2)

000: '' type:i (0)
001: 'i%' type:f (1)
 BE:
type_check_stack_push: ''

Type Check Stack (3)

000: '' type:i (0)
001: 'i%' type:f (1)
002: '' type:i (0)
 BE:X
type_check_stack_push: 'X'

Type Check Stack (4)

000: '' type:i (0)
001: 'i%' type:f (1)
002: '' type:i (0)
003: 'X' type:f (1)
 BE:y%
type_check_stack_push: 'y%'

Type Check Stack (5)

000: '' type:i (0)
001: 'i%' type:f (1)
002: '' type:i (0)
003: 'X' type:f (1)
004: 'y%' type:f (1)
 BE:AND
Found operator AND
type_check_stack_pop: 'y%'
type_check_stack_pop: 'X'
 Mutable type 1 1
 Same type
type_check_stack_push: '000'

Type Check Stack (4)

000: '' type:i (0)
001: 'i%' type:f (1)
002: '' type:i (0)
003: '000' type:f (1)
 BE:<
Found operator <
type_check_stack_pop: '000'
type_check_stack_pop: ''
 Mutable type 1 0
 Autoconversion
 --------------
 Op1: type:1 req type:1
 Op2: type:0 req type:1
 BE:  type:1 req type:1
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     f rq:f i%  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     f rq:f X  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_OPERATOR     f rq:f AND  2: 5 4
=================
 Insert after 3 exp_buffer2_i:6
   Found at i:2
   Copied 5 to 6:
   Copied 4 to 5:
   Copied 3 to 4:
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     f rq:f i%  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 6 3
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     f rq:f X  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_OPERATOR     f rq:f AND  2: 5 4
=================
type_check_stack_push: '000'

Type Check Stack (3)

000: '' type:i (0)
001: 'i%' type:f (1)
002: '000' type:f (1)
 BE:=
Found operator =
type_check_stack_pop: '000'
type_check_stack_pop: 'i%'
 Mutable type 1 1
 Same type
type_check_stack_push: '000'

Type Check Stack (2)

000: '' type:i (0)
001: '000' type:f (1)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f i%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f X  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f AND  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f <  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f =  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     f rq:f i%  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 6 3
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     f rq:f X  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_OPERATOR     f rq:f AND  2: 5 4
(dump_exp_buffer2) N7 EXP_BUFF_ID_OPERATOR     f rq:f <  2: 6 3
(dump_exp_buffer2) N9 EXP_BUFF_ID_OPERATOR     f rq:f =  2: 7 2
=================
(process_expression_types) 
==INFIX==

infix_stack_push: ''
infix_stack_push: 'i%'
infix_stack_push: ''
infix_stack_push: 'X'
infix_stack_push: 'y%'
infix_stack_pop: 'y%'
infix_stack_pop: 'X'
infix_stack_push: '(X AND y%)'
infix_stack_pop: '(X AND y%)'
infix_stack_pop: ''
infix_stack_push: '( < (X AND y%))'
infix_stack_pop: '( < (X AND y%))'
infix_stack_pop: 'i%'
infix_stack_push: '(i% = ( < (X AND y%)))'
infix_stack_pop: '(i% = ( < (X AND y%)))'
(process_expression_types) ==(i% = ( < (X AND y%)))==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_INTEGER      i rq:f   0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     f rq:f i%  0:
(    output_qcode) N3 EXP_BUFF_ID_INTEGER      i rq:f   0:
(    output_qcode) N8 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 6 3
(    output_qcode) N4 EXP_BUFF_ID_VARIABLE     f rq:f X  0:
(    output_qcode) N5 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
(    output_qcode) N6 EXP_BUFF_ID_OPERATOR     f rq:f AND  2: 5 4
(    output_qcode) N7 EXP_BUFF_ID_OPERATOR     f rq:f <  2: 6 3
(    output_qcode) N9 EXP_BUFF_ID_OPERATOR     f rq:f =  2: 7 2
========================================================
    AT x%,y% :PRINT CHR$(158)

========================================================
(output_expression_start)
   Frst:1 T:'x%'
token_is_variable: tok:'x%'
( output_variable) [f,()] i i x%
   Frst:0 T:''
(  output_integer) [f,()] i f 
   Frst:0 T:'y%'
token_is_variable: tok:'y%'
( output_variable) [f,()] f f y%
   Frst:0 T:'CHR$'
token_is_variable: tok:'CHR$'
CHR$ is function
CHR$ is function
function_return_type: 'CHR$' =>i
process_token: 'CHR$' t=>i
 Push:'CHR$'
   Frst:0 T:''
(  output_integer) [f,()] i f 
   Frst:0 T:'('
(output_sub_start)
 Push:'('
   Frst:0 T:''
(  output_integer) [i,(f )] i i 
   Frst:0 T:')'
Pop 4
Pop '('
(  output_sub_end)
CHR$ is function
Pop 5
Pop 'CHR$'
( output_function) [i,(f )] i i CHR$
(  output_sub_end)
Finalise stack
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i x%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:?   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
=================
 BE:x%
type_check_stack_push: 'x%'

Type Check Stack (1)

000: 'x%' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (2)

000: 'x%' type:i (0)
001: '' type:i (0)
 BE:y%
type_check_stack_push: 'y%'

Type Check Stack (3)

000: 'x%' type:i (0)
001: '' type:i (0)
002: 'y%' type:f (1)
 BE:
type_check_stack_push: ''

Type Check Stack (4)

000: 'x%' type:i (0)
001: '' type:i (0)
002: 'y%' type:f (1)
003: '' type:i (0)
 BE:

Type Check Stack (4)

000: 'x%' type:i (0)
001: '' type:i (0)
002: 'y%' type:f (1)
003: '' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (5)

000: 'x%' type:i (0)
001: '' type:i (0)
002: 'y%' type:f (1)
003: '' type:i (0)
004: '' type:i (0)
 BE:

Type Check Stack (5)

000: 'x%' type:i (0)
001: '' type:i (0)
002: 'y%' type:f (1)
003: '' type:i (0)
004: '' type:i (0)
 BE:CHR$
FN: 1 args
function_return_type: 'CHR$' =>i
typecheck_expression:Ret type of CHR$ : i
type_check_stack_pop: ''
FN ARG 0 ri  0(i)  Arg ok
type_check_stack_push: '000'

Type Check Stack (5)

000: 'x%' type:i (0)
001: '' type:i (0)
002: 'y%' type:f (1)
003: '' type:i (0)
004: '000' type:i (0)
 BE:

Type Check Stack (5)

000: 'x%' type:i (0)
001: '' type:i (0)
002: 'y%' type:f (1)
003: '' type:i (0)
004: '000' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i x%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:?   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i x%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_SUB_END      U rq:?   0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_END      U rq:i   0:
=================
(process_expression_types) 
==INFIX==

infix_stack_push: 'x%'
infix_stack_push: ''
infix_stack_push: 'y%'
infix_stack_push: ''
infix_stack_push: ''
infix_stack_pop: ''
infix_stack_push: 'CHR$( )'
infix_stack_pop: 'CHR$( )'
(process_expression_types) ==CHR$( )==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i x%  0:
(    output_qcode) N2 EXP_BUFF_ID_INTEGER      i rq:f   0:
(    output_qcode) N3 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
(    output_qcode) N4 EXP_BUFF_ID_INTEGER      i rq:f   0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N7 EXP_BUFF_ID_SUB_END      U rq:?   0:
(    output_qcode) N8 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
(    output_qcode) N9 EXP_BUFF_ID_SUB_END      U rq:i   0:
========================================================
    y%=y%+1 :AT x%,y% :PRINT CHR$(7)

========================================================
(output_expression_start)
   Frst:1 T:'y%'
token_is_variable: tok:'y%'
( output_variable) [f,()] i i y%
   Frst:0 T:''
(  output_integer) [f,()] i f 
   Frst:0 T:'y%'
token_is_variable: tok:'y%'
( output_variable) [f,()] f f y%
   Frst:0 T:'+'
'+' is operator
Push 1
 Push:'+'
   Frst:0 T:'x%'
token_is_variable: tok:'x%'
( output_variable) [f,()] f f x%
   Frst:0 T:''
(  output_integer) [f,()] i f 
   Frst:0 T:'y%'
token_is_variable: tok:'y%'
( output_variable) [f,()] f f y%
   Frst:0 T:'CHR$'
token_is_variable: tok:'CHR$'
CHR$ is function
CHR$ is function
function_return_type: 'CHR$' =>i
process_token: 'CHR$' t=>i
 Push:'CHR$'
   Frst:0 T:''
(  output_integer) [f,()] i f 
   Frst:0 T:'('
(output_sub_start)
 Push:'('
   Frst:0 T:''
(  output_integer) [i,(f )] i i 
   Frst:0 T:')'
Pop 4
Pop '('
(  output_sub_end)
CHR$ is function
Pop 5
Pop 'CHR$'
( output_function) [i,(f )] i i CHR$
(  output_sub_end)
Finalise stack
Pop '+'
( output_operator) [f,()] f f +
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i y%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f x%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:?   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f +  0:
=================
 BE:y%
type_check_stack_push: 'y%'

Type Check Stack (1)

000: 'y%' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (2)

000: 'y%' type:i (0)
001: '' type:i (0)
 BE:y%
type_check_stack_push: 'y%'

Type Check Stack (3)

000: 'y%' type:i (0)
001: '' type:i (0)
002: 'y%' type:f (1)
 BE:x%
type_check_stack_push: 'x%'

Type Check Stack (4)

000: 'y%' type:i (0)
001: '' type:i (0)
002: 'y%' type:f (1)
003: 'x%' type:f (1)
 BE:
type_check_stack_push: ''

Type Check Stack (5)

000: 'y%' type:i (0)
001: '' type:i (0)
002: 'y%' type:f (1)
003: 'x%' type:f (1)
004: '' type:i (0)
 BE:y%
type_check_stack_push: 'y%'

Type Check Stack (6)

000: 'y%' type:i (0)
001: '' type:i (0)
002: 'y%' type:f (1)
003: 'x%' type:f (1)
004: '' type:i (0)
005: 'y%' type:f (1)
 BE:
type_check_stack_push: ''

Type Check Stack (7)

000: 'y%' type:i (0)
001: '' type:i (0)
002: 'y%' type:f (1)
003: 'x%' type:f (1)
004: '' type:i (0)
005: 'y%' type:f (1)
006: '' type:i (0)
 BE:

Type Check Stack (7)

000: 'y%' type:i (0)
001: '' type:i (0)
002: 'y%' type:f (1)
003: 'x%' type:f (1)
004: '' type:i (0)
005: 'y%' type:f (1)
006: '' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (8)

000: 'y%' type:i (0)
001: '' type:i (0)
002: 'y%' type:f (1)
003: 'x%' type:f (1)
004: '' type:i (0)
005: 'y%' type:f (1)
006: '' type:i (0)
007: '' type:i (0)
 BE:

Type Check Stack (8)

000: 'y%' type:i (0)
001: '' type:i (0)
002: 'y%' type:f (1)
003: 'x%' type:f (1)
004: '' type:i (0)
005: 'y%' type:f (1)
006: '' type:i (0)
007: '' type:i (0)
 BE:CHR$
FN: 1 args
function_return_type: 'CHR$' =>i
typecheck_expression:Ret type of CHR$ : i
type_check_stack_pop: ''
FN ARG 0 ri  0(i)  Arg ok
type_check_stack_push: '000'

Type Check Stack (8)

000: 'y%' type:i (0)
001: '' type:i (0)
002: 'y%' type:f (1)
003: 'x%' type:f (1)
004: '' type:i (0)
005: 'y%' type:f (1)
006: '' type:i (0)
007: '000' type:i (0)
 BE:

Type Check Stack (8)

000: 'y%' type:i (0)
001: '' type:i (0)
002: 'y%' type:f (1)
003: 'x%' type:f (1)
004: '' type:i (0)
005: 'y%' type:f (1)
006: '' type:i (0)
007: '000' type:i (0)
 BE:+
Found operator +
type_check_stack_pop: '000'
type_check_stack_pop: ''
 Mutable type 0 0
 Same type
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i y%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     f rq:f x%  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_SUB_END      U rq:?   0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
(dump_exp_buffer2) N12 EXP_BUFF_ID_SUB_END      U rq:i   0:
=================
 Insert after 11 exp_buffer2_i:12
   Found at i:10
   Copied 11 to 12:
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i y%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     f rq:f x%  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_SUB_END      U rq:?   0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 11 7
(dump_exp_buffer2) N12 EXP_BUFF_ID_SUB_END      U rq:i   0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i y%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     f rq:f x%  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_SUB_END      U rq:?   0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 11 7
(dump_exp_buffer2) N12 EXP_BUFF_ID_SUB_END      U rq:i   0:
=================
 Insert after 7 exp_buffer2_i:13
   Found at i:6
   Copied 12 to 13:
   Copied 11 to 12:
   Copied 10 to 11:
   Copied 9 to 10:
   Copied 8 to 9:
   Copied 7 to 8:
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i y%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     f rq:f x%  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 11 7
(dump_exp_buffer2) N8 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_SUB_END      U rq:?   0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 11 7
(dump_exp_buffer2) N12 EXP_BUFF_ID_SUB_END      U rq:i   0:
=================
type_check_stack_push: '000'

Type Check Stack (7)

000: 'y%' type:i (0)
001: '' type:i (0)
002: 'y%' type:f (1)
003: 'x%' type:f (1)
004: '' type:i (0)
005: 'y%' type:f (1)
006: '000' type:f (1)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i y%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f x%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:?   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f +  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i y%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     f rq:f x%  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 11 7
(dump_exp_buffer2) N8 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_SUB_END      U rq:?   0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
(dump_exp_buffer2) N14 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 11 7
(dump_exp_buffer2) N12 EXP_BUFF_ID_SUB_END      U rq:i   0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_OPERATOR     f rq:f +  2: 11 7
=================
(process_expression_types) 
==INFIX==

infix_stack_push: 'y%'
infix_stack_push: ''
infix_stack_push: 'y%'
infix_stack_push: 'x%'
infix_stack_push: ''
infix_stack_push: 'y%'
infix_stack_push: ''
infix_stack_push: ''
infix_stack_pop: ''
infix_stack_push: 'CHR$( )'
infix_stack_pop: 'CHR$( )'
infix_stack_pop: ''
infix_stack_push: '( + CHR$( ))'
infix_stack_pop: '( + CHR$( ))'
(process_expression_types) ==( + CHR$( ))==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i y%  0:
(    output_qcode) N2 EXP_BUFF_ID_INTEGER      i rq:f   0:
(    output_qcode) N3 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
(    output_qcode) N4 EXP_BUFF_ID_VARIABLE     f rq:f x%  0:
(    output_qcode) N5 EXP_BUFF_ID_INTEGER      i rq:f   0:
(    output_qcode) N6 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
(    output_qcode) N7 EXP_BUFF_ID_INTEGER      i rq:f   0:
(    output_qcode) N14 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 11 7
(    output_qcode) N8 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N9 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N10 EXP_BUFF_ID_SUB_END      U rq:?   0:
(    output_qcode) N11 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
(    output_qcode) N14 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 11 7
(    output_qcode) N12 EXP_BUFF_ID_SUB_END      U rq:i   0:
(    output_qcode) N13 EXP_BUFF_ID_OPERATOR     f rq:f +  2: 11 7
========================================================
   ENDIF

========================================================
(output_expression_start)
   Frst:1 T:''
(  output_integer) [f,()] i f 
Finalise stack
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
=================
 BE:
type_check_stack_push: ''

Type Check Stack (1)

000: '' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_INTEGER      i rq:f   0:
=================
(process_expression_types) 
==INFIX==

infix_stack_push: ''
infix_stack_pop: ''
(process_expression_types) ====
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_INTEGER      i rq:f   0:
========================================================
  ENDIF

========================================================
(output_expression_start)
   Frst:1 T:''
(  output_integer) [f,()] i f 
Finalise stack
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
=================
 BE:
type_check_stack_push: ''

Type Check Stack (1)

000: '' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_INTEGER      i rq:f   0:
=================
(process_expression_types) 
==INFIX==

infix_stack_push: ''
infix_stack_pop: ''
(process_expression_types) ====
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_INTEGER      i rq:f   0:
========================================================
  a%=a%+1

========================================================
(output_expression_start)
   Frst:1 T:'a%'
token_is_variable: tok:'a%'
( output_variable) [f,()] i i a%
   Frst:0 T:''
(  output_integer) [f,()] i f 
   Frst:0 T:'a%'
token_is_variable: tok:'a%'
( output_variable) [f,()] f f a%
   Frst:0 T:'+'
'+' is operator
Push 1
 Push:'+'
Finalise stack
Pop '+'
( output_operator) [f,()] f f +
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f a%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f +  0:
=================
 BE:a%
type_check_stack_push: 'a%'

Type Check Stack (1)

000: 'a%' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (2)

000: 'a%' type:i (0)
001: '' type:i (0)
 BE:a%
type_check_stack_push: 'a%'

Type Check Stack (3)

000: 'a%' type:i (0)
001: '' type:i (0)
002: 'a%' type:f (1)
 BE:+
Found operator +
type_check_stack_pop: 'a%'
type_check_stack_pop: ''
 Mutable type 1 0
 Autoconversion
 --------------
 Op1: type:1 req type:1
 Op2: type:0 req type:1
 BE:  type:1 req type:1
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     f rq:f a%  0:
=================
 Insert after 2 exp_buffer2_i:3
   Found at i:1
   Copied 2 to 3:
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 3 2
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     f rq:f a%  0:
=================
type_check_stack_push: '000'

Type Check Stack (2)

000: 'a%' type:i (0)
001: '000' type:f (1)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f a%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f +  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 3 2
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     f rq:f a%  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_OPERATOR     f rq:f +  2: 3 2
=================
(process_expression_types) 
==INFIX==

infix_stack_push: 'a%'
infix_stack_push: ''
infix_stack_push: 'a%'
infix_stack_pop: 'a%'
infix_stack_pop: ''
infix_stack_push: '( + a%)'
infix_stack_pop: '( + a%)'
(process_expression_types) ==( + a%)==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i a%  0:
(    output_qcode) N2 EXP_BUFF_ID_INTEGER      i rq:f   0:
(    output_qcode) N5 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 3 2
(    output_qcode) N3 EXP_BUFF_ID_VARIABLE     f rq:f a%  0:
(    output_qcode) N4 EXP_BUFF_ID_OPERATOR     f rq:f +  2: 3 2
========================================================
  IF a%=x% AND (c%=y% OR c1%=y%) :REM Hit

========================================================
(output_expression_start)
   Frst:1 T:''
(  output_integer) [f,()] i f 
   Frst:0 T:'a%'
token_is_variable: tok:'a%'
( output_variable) [f,()] f f a%
   Frst:0 T:'='
'=' is operator
Push 1
 Push:'='
   Frst:0 T:'x%'
token_is_variable: tok:'x%'
( output_variable) [f,()] f f x%
   Frst:0 T:'AND'
'AND' is operator
Push 1
 Push:'AND'
   Frst:0 T:''
(  output_integer) [f,()] i f 
   Frst:0 T:'('
(output_sub_start)
 Push:'('
   Frst:0 T:'c%'
token_is_variable: tok:'c%'
( output_variable) [i,(f )] i i c%
   Frst:0 T:'='
'=' is operator
Push 1
 Push:'='
   Frst:0 T:'y%'
token_is_variable: tok:'y%'
( output_variable) [i,(f )] i i y%
   Frst:0 T:'OR'
token_is_variable: tok:'OR'
( output_variable) [f,(f )] f f OR
   Frst:0 T:'c1%'
token_is_variable: tok:'c1%'
( output_variable) [f,(f )] f f c1%
   Frst:0 T:'='
'=' is operator
Push 1
 Push:'='
   Frst:0 T:'y%'
token_is_variable: tok:'y%'
( output_variable) [f,(f )] f f y%
   Frst:0 T:''
(  output_integer) [f,(f )] i f 
   Frst:0 T:')'
Pop '='
( output_operator) [f,(f )] f f =
Pop '='
( output_operator) [f,(f )] i i =
Pop 4
Pop '('
(  output_sub_end)
(  output_sub_end)
   Frst:0 T:'Hit'
token_is_variable: tok:'Hit'
( output_variable) [f,()] f f Hit
Finalise stack
Pop 'AND'
( output_operator) [f,()] f f AND
Pop '='
( output_operator) [f,()] f f =
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f a%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f x%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i y%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f OR  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f c1%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f =  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i =  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:?   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:?   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f Hit  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f AND  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f =  0:
=================
 BE:
type_check_stack_push: ''

Type Check Stack (1)

000: '' type:i (0)
 BE:a%
type_check_stack_push: 'a%'

Type Check Stack (2)

000: '' type:i (0)
001: 'a%' type:f (1)
 BE:x%
type_check_stack_push: 'x%'

Type Check Stack (3)

000: '' type:i (0)
001: 'a%' type:f (1)
002: 'x%' type:f (1)
 BE:
type_check_stack_push: ''

Type Check Stack (4)

000: '' type:i (0)
001: 'a%' type:f (1)
002: 'x%' type:f (1)
003: '' type:i (0)
 BE:

Type Check Stack (4)

000: '' type:i (0)
001: 'a%' type:f (1)
002: 'x%' type:f (1)
003: '' type:i (0)
 BE:c%
type_check_stack_push: 'c%'

Type Check Stack (5)

000: '' type:i (0)
001: 'a%' type:f (1)
002: 'x%' type:f (1)
003: '' type:i (0)
004: 'c%' type:i (0)
 BE:y%
type_check_stack_push: 'y%'

Type Check Stack (6)

000: '' type:i (0)
001: 'a%' type:f (1)
002: 'x%' type:f (1)
003: '' type:i (0)
004: 'c%' type:i (0)
005: 'y%' type:i (0)
 BE:OR
type_check_stack_push: 'OR'

Type Check Stack (7)

000: '' type:i (0)
001: 'a%' type:f (1)
002: 'x%' type:f (1)
003: '' type:i (0)
004: 'c%' type:i (0)
005: 'y%' type:i (0)
006: 'OR' type:f (1)
 BE:c1%
type_check_stack_push: 'c1%'

Type Check Stack (8)

000: '' type:i (0)
001: 'a%' type:f (1)
002: 'x%' type:f (1)
003: '' type:i (0)
004: 'c%' type:i (0)
005: 'y%' type:i (0)
006: 'OR' type:f (1)
007: 'c1%' type:f (1)
 BE:y%
type_check_stack_push: 'y%'

Type Check Stack (9)

000: '' type:i (0)
001: 'a%' type:f (1)
002: 'x%' type:f (1)
003: '' type:i (0)
004: 'c%' type:i (0)
005: 'y%' type:i (0)
006: 'OR' type:f (1)
007: 'c1%' type:f (1)
008: 'y%' type:f (1)
 BE:
type_check_stack_push: ''

Type Check Stack (10)

000: '' type:i (0)
001: 'a%' type:f (1)
002: 'x%' type:f (1)
003: '' type:i (0)
004: 'c%' type:i (0)
005: 'y%' type:i (0)
006: 'OR' type:f (1)
007: 'c1%' type:f (1)
008: 'y%' type:f (1)
009: '' type:i (0)
 BE:=
Found operator =
type_check_stack_pop: ''
type_check_stack_pop: 'y%'
 Mutable type 0 1
 Autoconversion
 --------------
 Op1: type:0 req type:1
 Op2: type:1 req type:1
 BE:  type:1 req type:1
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     f rq:f a%  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     f rq:f x%  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_VARIABLE     i rq:i y%  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_VARIABLE     f rq:f OR  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_VARIABLE     f rq:f c1%  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_INTEGER      i rq:f   0:
=================
 Insert after 11 exp_buffer2_i:11
   Found at i:10
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     f rq:f a%  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     f rq:f x%  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_VARIABLE     i rq:i y%  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_VARIABLE     f rq:f OR  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_VARIABLE     f rq:f c1%  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 11 10
=================
type_check_stack_push: '000'

Type Check Stack (9)

000: '' type:i (0)
001: 'a%' type:f (1)
002: 'x%' type:f (1)
003: '' type:i (0)
004: 'c%' type:i (0)
005: 'y%' type:i (0)
006: 'OR' type:f (1)
007: 'c1%' type:f (1)
008: '000' type:f (1)
 BE:=
Found operator =
type_check_stack_pop: '000'
type_check_stack_pop: 'c1%'
 Mutable type 1 1
type_with_least_conversion_from: f f => f
type_with_least_conversion_from: f f => f
 Same type
type_check_stack_push: '000'

Type Check Stack (8)

000: '' type:i (0)
001: 'a%' type:f (1)
002: 'x%' type:f (1)
003: '' type:i (0)
004: 'c%' type:i (0)
005: 'y%' type:i (0)
006: 'OR' type:f (1)
007: '000' type:f (1)
 BE:

Type Check Stack (8)

000: '' type:i (0)
001: 'a%' type:f (1)
002: 'x%' type:f (1)
003: '' type:i (0)
004: 'c%' type:i (0)
005: 'y%' type:i (0)
006: 'OR' type:f (1)
007: '000' type:f (1)
 BE:

Type Check Stack (8)

000: '' type:i (0)
001: 'a%' type:f (1)
002: 'x%' type:f (1)
003: '' type:i (0)
004: 'c%' type:i (0)
005: 'y%' type:i (0)
006: 'OR' type:f (1)
007: '000' type:f (1)
 BE:Hit
type_check_stack_push: 'Hit'

Type Check Stack (9)

000: '' type:i (0)
001: 'a%' type:f (1)
002: 'x%' type:f (1)
003: '' type:i (0)
004: 'c%' type:i (0)
005: 'y%' type:i (0)
006: 'OR' type:f (1)
007: '000' type:f (1)
008: 'Hit' type:f (1)
 BE:AND
Found operator AND
type_check_stack_pop: 'Hit'
type_check_stack_pop: '000'
 Mutable type 1 1
 Same type
type_check_stack_push: '000'

Type Check Stack (8)

000: '' type:i (0)
001: 'a%' type:f (1)
002: 'x%' type:f (1)
003: '' type:i (0)
004: 'c%' type:i (0)
005: 'y%' type:i (0)
006: 'OR' type:f (1)
007: '000' type:f (1)
 BE:=
Found operator =
type_check_stack_pop: '000'
type_check_stack_pop: 'OR'
 Mutable type 1 1
 Same type
type_check_stack_push: '000'

Type Check Stack (7)

000: '' type:i (0)
001: 'a%' type:f (1)
002: 'x%' type:f (1)
003: '' type:i (0)
004: 'c%' type:i (0)
005: 'y%' type:i (0)
006: '000' type:f (1)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f a%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f x%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i y%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f OR  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f c1%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f =  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     i rq:i =  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:?   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:?   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f Hit  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f AND  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f =  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     f rq:f a%  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     f rq:f x%  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_VARIABLE     i rq:i y%  0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_VARIABLE     f rq:f OR  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_VARIABLE     f rq:f c1%  0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N13 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 11 10
(dump_exp_buffer2) N12 EXP_BUFF_ID_OPERATOR     f rq:f =  2: 11 10
(dump_exp_buffer2) N14 EXP_BUFF_ID_OPERATOR     f rq:f =  2: 12 9
(dump_exp_buffer2) N15 EXP_BUFF_ID_SUB_END      U rq:?   0:
(dump_exp_buffer2) N16 EXP_BUFF_ID_SUB_END      U rq:?   0:
(dump_exp_buffer2) N17 EXP_BUFF_ID_VARIABLE     f rq:f Hit  0:
(dump_exp_buffer2) N18 EXP_BUFF_ID_OPERATOR     f rq:f AND  2: 17 14
(dump_exp_buffer2) N19 EXP_BUFF_ID_OPERATOR     f rq:f =  2: 18 8
=================
(process_expression_types) 
==INFIX==

infix_stack_push: ''
infix_stack_push: 'a%'
infix_stack_push: 'x%'
infix_stack_push: ''
infix_stack_push: 'c%'
infix_stack_push: 'y%'
infix_stack_push: 'OR'
infix_stack_push: 'c1%'
infix_stack_push: 'y%'
infix_stack_push: ''
infix_stack_pop: ''
infix_stack_pop: 'y%'
infix_stack_push: '(y% = )'
infix_stack_pop: '(y% = )'
infix_stack_pop: 'c1%'
infix_stack_push: '(c1% = (y% = ))'
infix_stack_push: 'Hit'
infix_stack_pop: 'Hit'
infix_stack_pop: '(c1% = (y% = ))'
infix_stack_push: '((c1% = (y% = )) AND Hit)'
infix_stack_pop: '((c1% = (y% = )) AND Hit)'
infix_stack_pop: 'OR'
infix_stack_push: '(OR = ((c1% = (y% = )) AND Hit))'
infix_stack_pop: '(OR = ((c1% = (y% = )) AND Hit))'
(process_expression_types) ==(OR = ((c1% = (y% = )) AND Hit))==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_INTEGER      i rq:f   0:
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     f rq:f a%  0:
(    output_qcode) N3 EXP_BUFF_ID_VARIABLE     f rq:f x%  0:
(    output_qcode) N4 EXP_BUFF_ID_INTEGER      i rq:f   0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_VARIABLE     i rq:i c%  0:
(    output_qcode) N7 EXP_BUFF_ID_VARIABLE     i rq:i y%  0:
(    output_qcode) N8 EXP_BUFF_ID_VARIABLE     f rq:f OR  0:
(    output_qcode) N9 EXP_BUFF_ID_VARIABLE     f rq:f c1%  0:
(    output_qcode) N10 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
(    output_qcode) N11 EXP_BUFF_ID_INTEGER      i rq:f   0:
(    output_qcode) N13 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 11 10
(    output_qcode) N12 EXP_BUFF_ID_OPERATOR     f rq:f =  2: 11 10
(    output_qcode) N14 EXP_BUFF_ID_OPERATOR     f rq:f =  2: 12 9
(    output_qcode) N15 EXP_BUFF_ID_SUB_END      U rq:?   0:
(    output_qcode) N16 EXP_BUFF_ID_SUB_END      U rq:?   0:
(    output_qcode) N17 EXP_BUFF_ID_VARIABLE     f rq:f Hit  0:
(    output_qcode) N18 EXP_BUFF_ID_OPERATOR     f rq:f AND  2: 17 14
(    output_qcode) N19 EXP_BUFF_ID_OPERATOR     f rq:f =  2: 18 8
========================================================
   i%=0

========================================================
(output_expression_start)
   Frst:1 T:'i%'
token_is_variable: tok:'i%'
( output_variable) [f,()] i i i%
   Frst:0 T:''
(  output_integer) [f,()] i f 
Finalise stack
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i i%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
=================
 BE:i%
type_check_stack_push: 'i%'

Type Check Stack (1)

000: 'i%' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (2)

000: 'i%' type:i (0)
001: '' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i i%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i i%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:f   0:
=================
(process_expression_types) 
==INFIX==

infix_stack_push: 'i%'
infix_stack_push: ''
infix_stack_pop: ''
(process_expression_types) ====
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i i%  0:
(    output_qcode) N2 EXP_BUFF_ID_INTEGER      i rq:f   0:
========================================================
   DO

========================================================
(output_expression_start)
   Frst:1 T:''
(  output_integer) [f,()] i f 
Finalise stack
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
=================
 BE:
type_check_stack_push: ''

Type Check Stack (1)

000: '' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_INTEGER      i rq:f   0:
=================
(process_expression_types) 
==INFIX==

infix_stack_push: ''
infix_stack_pop: ''
(process_expression_types) ====
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_INTEGER      i rq:f   0:
========================================================
    AT x%,y% :PRINT CHR$(170+i%)

========================================================
(output_expression_start)
   Frst:1 T:'x%'
token_is_variable: tok:'x%'
( output_variable) [f,()] i i x%
   Frst:0 T:''
(  output_integer) [f,()] i f 
   Frst:0 T:'y%'
token_is_variable: tok:'y%'
( output_variable) [f,()] f f y%
   Frst:0 T:'CHR$'
token_is_variable: tok:'CHR$'
CHR$ is function
CHR$ is function
function_return_type: 'CHR$' =>i
process_token: 'CHR$' t=>i
 Push:'CHR$'
   Frst:0 T:''
(  output_integer) [f,()] i f 
   Frst:0 T:'('
(output_sub_start)
 Push:'('
   Frst:0 T:'+'
'+' is operator
Push 1
 Push:'+'
   Frst:0 T:'i%'
token_is_variable: tok:'i%'
( output_variable) [i,(f )] i i i%
   Frst:0 T:''
(  output_integer) [i,(f )] i i 
   Frst:0 T:')'
Pop '+'
( output_operator) [i,(f )] U U +
Pop 4
Pop '('
(  output_sub_end)
CHR$ is function
Pop 5
Pop 'CHR$'
( output_function) [i,(f )] i i CHR$
(  output_sub_end)
Finalise stack
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i x%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i i%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     U rq:U +  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:?   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
=================
 BE:x%
type_check_stack_push: 'x%'

Type Check Stack (1)

000: 'x%' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (2)

000: 'x%' type:i (0)
001: '' type:i (0)
 BE:y%
type_check_stack_push: 'y%'

Type Check Stack (3)

000: 'x%' type:i (0)
001: '' type:i (0)
002: 'y%' type:f (1)
 BE:
type_check_stack_push: ''

Type Check Stack (4)

000: 'x%' type:i (0)
001: '' type:i (0)
002: 'y%' type:f (1)
003: '' type:i (0)
 BE:

Type Check Stack (4)

000: 'x%' type:i (0)
001: '' type:i (0)
002: 'y%' type:f (1)
003: '' type:i (0)
 BE:i%
type_check_stack_push: 'i%'

Type Check Stack (5)

000: 'x%' type:i (0)
001: '' type:i (0)
002: 'y%' type:f (1)
003: '' type:i (0)
004: 'i%' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (6)

000: 'x%' type:i (0)
001: '' type:i (0)
002: 'y%' type:f (1)
003: '' type:i (0)
004: 'i%' type:i (0)
005: '' type:i (0)
 BE:+
Found operator +
type_check_stack_pop: ''
type_check_stack_pop: 'i%'
 Mutable type 0 0
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
type_with_least_conversion_from: i i => i
 Same type
type_check_stack_push: '000'

Type Check Stack (5)

000: 'x%' type:i (0)
001: '' type:i (0)
002: 'y%' type:f (1)
003: '' type:i (0)
004: '000' type:i (0)
 BE:

Type Check Stack (5)

000: 'x%' type:i (0)
001: '' type:i (0)
002: 'y%' type:f (1)
003: '' type:i (0)
004: '000' type:i (0)
 BE:CHR$
FN: 1 args
function_return_type: 'CHR$' =>i
typecheck_expression:Ret type of CHR$ : i
type_check_stack_pop: '000'
FN ARG 0 ri 000 0(i)  Arg ok
type_check_stack_push: '000'

Type Check Stack (5)

000: 'x%' type:i (0)
001: '' type:i (0)
002: 'y%' type:f (1)
003: '' type:i (0)
004: '000' type:i (0)
 BE:

Type Check Stack (5)

000: 'x%' type:i (0)
001: '' type:i (0)
002: 'y%' type:f (1)
003: '' type:i (0)
004: '000' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i x%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_START    U rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i i%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:i   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     U rq:U +  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:?   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_SUB_END      U rq:i   0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i x%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_SUB_START    U rq:i   0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_VARIABLE     i rq:i i%  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_INTEGER      i rq:i   0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_OPERATOR     i rq:i +  2: 7 6
(dump_exp_buffer2) N9 EXP_BUFF_ID_SUB_END      U rq:?   0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
(dump_exp_buffer2) N11 EXP_BUFF_ID_SUB_END      U rq:i   0:
=================
(process_expression_types) 
==INFIX==

infix_stack_push: 'x%'
infix_stack_push: ''
infix_stack_push: 'y%'
infix_stack_push: ''
infix_stack_push: 'i%'
infix_stack_push: ''
infix_stack_pop: ''
infix_stack_pop: 'i%'
infix_stack_push: '(i% + )'
infix_stack_pop: '(i% + )'
infix_stack_push: 'CHR$((i% + ) )'
infix_stack_pop: 'CHR$((i% + ) )'
(process_expression_types) ==CHR$((i% + ) )==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i x%  0:
(    output_qcode) N2 EXP_BUFF_ID_INTEGER      i rq:f   0:
(    output_qcode) N3 EXP_BUFF_ID_VARIABLE     f rq:f y%  0:
(    output_qcode) N4 EXP_BUFF_ID_INTEGER      i rq:f   0:
(    output_qcode) N5 EXP_BUFF_ID_SUB_START    U rq:i   0:
(    output_qcode) N6 EXP_BUFF_ID_VARIABLE     i rq:i i%  0:
(    output_qcode) N7 EXP_BUFF_ID_INTEGER      i rq:i   0:
(    output_qcode) N8 EXP_BUFF_ID_OPERATOR     i rq:i +  2: 7 6
(    output_qcode) N9 EXP_BUFF_ID_SUB_END      U rq:?   0:
(    output_qcode) N10 EXP_BUFF_ID_FUNCTION     i rq:i CHR$  0:
(    output_qcode) N11 EXP_BUFF_ID_SUB_END      U rq:i   0:
========================================================
    BEEP 10,100+i%

========================================================
(output_expression_start)
   Frst:1 T:''
(  output_integer) [f,()] i f 
   Frst:0 T:'+'
'+' is operator
Push 1
 Push:'+'
   Frst:0 T:'i%'
token_is_variable: tok:'i%'
( output_variable) [f,()] f f i%
Finalise stack
Pop '+'
( output_operator) [f,()] f f +
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f i%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f +  0:
=================
 BE:
type_check_stack_push: ''

Type Check Stack (1)

000: '' type:i (0)
 BE:i%
type_check_stack_push: 'i%'

Type Check Stack (2)

000: '' type:i (0)
001: 'i%' type:f (1)
 BE:+
Found operator +
type_check_stack_pop: 'i%'
type_check_stack_pop: ''
 Mutable type 1 0
 Autoconversion
 --------------
 Op1: type:1 req type:1
 Op2: type:0 req type:1
 BE:  type:1 req type:1
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     f rq:f i%  0:
=================
 Insert after 1 exp_buffer2_i:2
   Found at i:0
   Copied 1 to 2:
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 2 1
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     f rq:f i%  0:
=================
type_check_stack_push: '000'

Type Check Stack (1)

000: '000' type:f (1)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f i%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f +  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 2 1
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     f rq:f i%  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_OPERATOR     f rq:f +  2: 2 1
=================
(process_expression_types) 
==INFIX==

infix_stack_push: ''
infix_stack_push: 'i%'
infix_stack_pop: 'i%'
infix_stack_pop: ''
infix_stack_push: '( + i%)'
infix_stack_pop: '( + i%)'
(process_expression_types) ==( + i%)==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_INTEGER      i rq:f   0:
(    output_qcode) N4 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 2 1
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     f rq:f i%  0:
(    output_qcode) N3 EXP_BUFF_ID_OPERATOR     f rq:f +  2: 2 1
========================================================
    i%=i%+1

========================================================
(output_expression_start)
   Frst:1 T:'i%'
token_is_variable: tok:'i%'
( output_variable) [f,()] i i i%
   Frst:0 T:''
(  output_integer) [f,()] i f 
   Frst:0 T:'i%'
token_is_variable: tok:'i%'
( output_variable) [f,()] f f i%
   Frst:0 T:'+'
'+' is operator
Push 1
 Push:'+'
Finalise stack
Pop '+'
( output_operator) [f,()] f f +
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i i%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f i%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f +  0:
=================
 BE:i%
type_check_stack_push: 'i%'

Type Check Stack (1)

000: 'i%' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (2)

000: 'i%' type:i (0)
001: '' type:i (0)
 BE:i%
type_check_stack_push: 'i%'

Type Check Stack (3)

000: 'i%' type:i (0)
001: '' type:i (0)
002: 'i%' type:f (1)
 BE:+
Found operator +
type_check_stack_pop: 'i%'
type_check_stack_pop: ''
 Mutable type 1 0
 Autoconversion
 --------------
 Op1: type:1 req type:1
 Op2: type:0 req type:1
 BE:  type:1 req type:1
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i i%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     f rq:f i%  0:
=================
 Insert after 2 exp_buffer2_i:3
   Found at i:1
   Copied 2 to 3:
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i i%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 3 2
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     f rq:f i%  0:
=================
type_check_stack_push: '000'

Type Check Stack (2)

000: 'i%' type:i (0)
001: '000' type:f (1)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i i%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f i%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f +  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i i%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 3 2
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     f rq:f i%  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_OPERATOR     f rq:f +  2: 3 2
=================
(process_expression_types) 
==INFIX==

infix_stack_push: 'i%'
infix_stack_push: ''
infix_stack_push: 'i%'
infix_stack_pop: 'i%'
infix_stack_pop: ''
infix_stack_push: '( + i%)'
infix_stack_pop: '( + i%)'
(process_expression_types) ==( + i%)==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i i%  0:
(    output_qcode) N2 EXP_BUFF_ID_INTEGER      i rq:f   0:
(    output_qcode) N5 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 3 2
(    output_qcode) N3 EXP_BUFF_ID_VARIABLE     f rq:f i%  0:
(    output_qcode) N4 EXP_BUFF_ID_OPERATOR     f rq:f +  2: 3 2
========================================================
    BEEP 10,100-i%

========================================================
(output_expression_start)
   Frst:1 T:''
(  output_integer) [f,()] i f 
   Frst:0 T:'-'
'-' is operator
Push 1
 Push:'-'
   Frst:0 T:'i%'
token_is_variable: tok:'i%'
( output_variable) [f,()] f f i%
Finalise stack
Pop '-'
( output_operator) [f,()] f f -
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f i%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f -  0:
=================
 BE:
type_check_stack_push: ''

Type Check Stack (1)

000: '' type:i (0)
 BE:i%
type_check_stack_push: 'i%'

Type Check Stack (2)

000: '' type:i (0)
001: 'i%' type:f (1)
 BE:-
Found operator -
type_check_stack_pop: 'i%'
type_check_stack_pop: ''
 Mutable type 1 0
 Autoconversion
 --------------
 Op1: type:1 req type:1
 Op2: type:0 req type:1
 BE:  type:1 req type:1
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     f rq:f i%  0:
=================
 Insert after 1 exp_buffer2_i:2
   Found at i:0
   Copied 1 to 2:
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 2 1
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     f rq:f i%  0:
=================
type_check_stack_push: '000'

Type Check Stack (1)

000: '000' type:f (1)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f i%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f -  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 2 1
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     f rq:f i%  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_OPERATOR     f rq:f -  2: 2 1
=================
(process_expression_types) 
==INFIX==

infix_stack_push: ''
infix_stack_push: 'i%'
infix_stack_pop: 'i%'
infix_stack_pop: ''
infix_stack_push: '( - i%)'
infix_stack_pop: '( - i%)'
(process_expression_types) ==( - i%)==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_INTEGER      i rq:f   0:
(    output_qcode) N4 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 2 1
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     f rq:f i%  0:
(    output_qcode) N3 EXP_BUFF_ID_OPERATOR     f rq:f -  2: 2 1
========================================================
   UNTIL i%=30

========================================================
(output_expression_start)
   Frst:1 T:''
(  output_integer) [f,()] i f 
   Frst:0 T:'i%'
token_is_variable: tok:'i%'
( output_variable) [f,()] f f i%
   Frst:0 T:'='
'=' is operator
Push 1
 Push:'='
Finalise stack
Pop '='
( output_operator) [f,()] f f =
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f i%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f =  0:
=================
 BE:
type_check_stack_push: ''

Type Check Stack (1)

000: '' type:i (0)
 BE:i%
type_check_stack_push: 'i%'

Type Check Stack (2)

000: '' type:i (0)
001: 'i%' type:f (1)
 BE:=
Found operator =
type_check_stack_pop: 'i%'
type_check_stack_pop: ''
 Mutable type 1 0
 Autoconversion
 --------------
 Op1: type:1 req type:1
 Op2: type:0 req type:1
 BE:  type:1 req type:1
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     f rq:f i%  0:
=================
 Insert after 1 exp_buffer2_i:2
   Found at i:0
   Copied 1 to 2:
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_AUTOCON      i rq:i autocon i->f  2: 2 1
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     f rq:f i%  0:
=================
type_check_stack_push: '000'

Type Check Stack (1)

000: '000' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f i%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f =  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_AUTOCON      i rq:i autocon i->f  2: 2 1
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     f rq:f i%  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_OPERATOR     i rq:f =  2: 2 1
=================
(process_expression_types) 
==INFIX==

infix_stack_push: ''
infix_stack_push: 'i%'
infix_stack_pop: 'i%'
infix_stack_pop: ''
infix_stack_push: '( = i%)'
infix_stack_pop: '( = i%)'
(process_expression_types) ==( = i%)==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_INTEGER      i rq:f   0:
(    output_qcode) N4 EXP_BUFF_ID_AUTOCON      i rq:i autocon i->f  2: 2 1
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     f rq:f i%  0:
(    output_qcode) N3 EXP_BUFF_ID_OPERATOR     i rq:f =  2: 2 1
========================================================
   b%=b%+5 :a%=20 :x%=x%+2

========================================================
(output_expression_start)
   Frst:1 T:'b%'
token_is_variable: tok:'b%'
( output_variable) [f,()] i i b%
   Frst:0 T:''
(  output_integer) [f,()] i f 
   Frst:0 T:'b%'
token_is_variable: tok:'b%'
( output_variable) [f,()] f f b%
   Frst:0 T:'+'
'+' is operator
Push 1
 Push:'+'
   Frst:0 T:'a%'
token_is_variable: tok:'a%'
( output_variable) [f,()] f f a%
   Frst:0 T:''
(  output_integer) [f,()] i f 
   Frst:0 T:'x%'
token_is_variable: tok:'x%'
( output_variable) [f,()] f f x%
   Frst:0 T:''
(  output_integer) [f,()] i f 
   Frst:0 T:'x%'
token_is_variable: tok:'x%'
( output_variable) [f,()] f f x%
   Frst:0 T:'+'
'+' is operator
Push 1
 Push:'+'
Finalise stack
Pop '+'
( output_operator) [f,()] f f +
Pop '+'
( output_operator) [f,()] f f +
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f b%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f a%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f x%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f x%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f +  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f +  0:
=================
 BE:b%
type_check_stack_push: 'b%'

Type Check Stack (1)

000: 'b%' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (2)

000: 'b%' type:i (0)
001: '' type:i (0)
 BE:b%
type_check_stack_push: 'b%'

Type Check Stack (3)

000: 'b%' type:i (0)
001: '' type:i (0)
002: 'b%' type:f (1)
 BE:a%
type_check_stack_push: 'a%'

Type Check Stack (4)

000: 'b%' type:i (0)
001: '' type:i (0)
002: 'b%' type:f (1)
003: 'a%' type:f (1)
 BE:
type_check_stack_push: ''

Type Check Stack (5)

000: 'b%' type:i (0)
001: '' type:i (0)
002: 'b%' type:f (1)
003: 'a%' type:f (1)
004: '' type:i (0)
 BE:x%
type_check_stack_push: 'x%'

Type Check Stack (6)

000: 'b%' type:i (0)
001: '' type:i (0)
002: 'b%' type:f (1)
003: 'a%' type:f (1)
004: '' type:i (0)
005: 'x%' type:f (1)
 BE:
type_check_stack_push: ''

Type Check Stack (7)

000: 'b%' type:i (0)
001: '' type:i (0)
002: 'b%' type:f (1)
003: 'a%' type:f (1)
004: '' type:i (0)
005: 'x%' type:f (1)
006: '' type:i (0)
 BE:x%
type_check_stack_push: 'x%'

Type Check Stack (8)

000: 'b%' type:i (0)
001: '' type:i (0)
002: 'b%' type:f (1)
003: 'a%' type:f (1)
004: '' type:i (0)
005: 'x%' type:f (1)
006: '' type:i (0)
007: 'x%' type:f (1)
 BE:+
Found operator +
type_check_stack_pop: 'x%'
type_check_stack_pop: ''
 Mutable type 1 0
 Autoconversion
 --------------
 Op1: type:1 req type:1
 Op2: type:0 req type:1
 BE:  type:1 req type:1
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     f rq:f b%  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     f rq:f a%  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_VARIABLE     f rq:f x%  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N8 EXP_BUFF_ID_VARIABLE     f rq:f x%  0:
=================
 Insert after 7 exp_buffer2_i:8
   Found at i:6
   Copied 7 to 8:
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     f rq:f b%  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     f rq:f a%  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_VARIABLE     f rq:f x%  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 8 7
(dump_exp_buffer2) N8 EXP_BUFF_ID_VARIABLE     f rq:f x%  0:
=================
type_check_stack_push: '000'

Type Check Stack (7)

000: 'b%' type:i (0)
001: '' type:i (0)
002: 'b%' type:f (1)
003: 'a%' type:f (1)
004: '' type:i (0)
005: 'x%' type:f (1)
006: '000' type:f (1)
 BE:+
Found operator +
type_check_stack_pop: '000'
type_check_stack_pop: 'x%'
 Mutable type 1 1
 Same type
type_check_stack_push: '000'

Type Check Stack (6)

000: 'b%' type:i (0)
001: '' type:i (0)
002: 'b%' type:f (1)
003: 'a%' type:f (1)
004: '' type:i (0)
005: '000' type:f (1)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f b%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f a%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f x%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f x%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f +  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f +  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     f rq:f b%  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     f rq:f a%  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_VARIABLE     f rq:f x%  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N10 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 8 7
(dump_exp_buffer2) N8 EXP_BUFF_ID_VARIABLE     f rq:f x%  0:
(dump_exp_buffer2) N9 EXP_BUFF_ID_OPERATOR     f rq:f +  2: 8 7
(dump_exp_buffer2) N11 EXP_BUFF_ID_OPERATOR     f rq:f +  2: 9 6
=================
(process_expression_types) 
==INFIX==

infix_stack_push: 'b%'
infix_stack_push: ''
infix_stack_push: 'b%'
infix_stack_push: 'a%'
infix_stack_push: ''
infix_stack_push: 'x%'
infix_stack_push: ''
infix_stack_push: 'x%'
infix_stack_pop: 'x%'
infix_stack_pop: ''
infix_stack_push: '( + x%)'
infix_stack_pop: '( + x%)'
infix_stack_pop: 'x%'
infix_stack_push: '(x% + ( + x%))'
infix_stack_pop: '(x% + ( + x%))'
(process_expression_types) ==(x% + ( + x%))==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_VARIABLE     i rq:i b%  0:
(    output_qcode) N2 EXP_BUFF_ID_INTEGER      i rq:f   0:
(    output_qcode) N3 EXP_BUFF_ID_VARIABLE     f rq:f b%  0:
(    output_qcode) N4 EXP_BUFF_ID_VARIABLE     f rq:f a%  0:
(    output_qcode) N5 EXP_BUFF_ID_INTEGER      i rq:f   0:
(    output_qcode) N6 EXP_BUFF_ID_VARIABLE     f rq:f x%  0:
(    output_qcode) N7 EXP_BUFF_ID_INTEGER      i rq:f   0:
(    output_qcode) N10 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 8 7
(    output_qcode) N8 EXP_BUFF_ID_VARIABLE     f rq:f x%  0:
(    output_qcode) N9 EXP_BUFF_ID_OPERATOR     f rq:f +  2: 8 7
(    output_qcode) N11 EXP_BUFF_ID_OPERATOR     f rq:f +  2: 9 6
========================================================
   IF x%>20

========================================================
(output_expression_start)
   Frst:1 T:''
(  output_integer) [f,()] i f 
   Frst:0 T:'x%'
token_is_variable: tok:'x%'
( output_variable) [f,()] f f x%
   Frst:0 T:'>'
'>' is operator
Push 1
 Push:'>'
Finalise stack
Pop '>'
( output_operator) [f,()] f f >
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f x%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f >  0:
=================
 BE:
type_check_stack_push: ''

Type Check Stack (1)

000: '' type:i (0)
 BE:x%
type_check_stack_push: 'x%'

Type Check Stack (2)

000: '' type:i (0)
001: 'x%' type:f (1)
 BE:>
Found operator >
type_check_stack_pop: 'x%'
type_check_stack_pop: ''
 Mutable type 1 0
 Autoconversion
 --------------
 Op1: type:1 req type:1
 Op2: type:0 req type:1
 BE:  type:1 req type:1
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     f rq:f x%  0:
=================
 Insert after 1 exp_buffer2_i:2
   Found at i:0
   Copied 1 to 2:
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 2 1
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     f rq:f x%  0:
=================
type_check_stack_push: '000'

Type Check Stack (1)

000: '000' type:f (1)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f x%  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_OPERATOR     f rq:f >  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 2 1
(dump_exp_buffer2) N2 EXP_BUFF_ID_VARIABLE     f rq:f x%  0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_OPERATOR     f rq:f >  2: 2 1
=================
(process_expression_types) 
==INFIX==

infix_stack_push: ''
infix_stack_push: 'x%'
infix_stack_pop: 'x%'
infix_stack_pop: ''
infix_stack_push: '( > x%)'
infix_stack_pop: '( > x%)'
(process_expression_types) ==( > x%)==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_INTEGER      i rq:f   0:
(    output_qcode) N4 EXP_BUFF_ID_AUTOCON      f rq:f autocon i->f  2: 2 1
(    output_qcode) N2 EXP_BUFF_ID_VARIABLE     f rq:f x%  0:
(    output_qcode) N3 EXP_BUFF_ID_OPERATOR     f rq:f >  2: 2 1
========================================================
    CLS : PRINT "GAME OVER"

========================================================
(output_expression_start)
   Frst:1 T:''
(  output_integer) [f,()] i f 
Finalise stack
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
=================
 BE:
type_check_stack_push: ''

Type Check Stack (1)

000: '' type:i (0)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_INTEGER      i rq:f   0:
=================
(process_expression_types) 
==INFIX==

infix_stack_push: ''
infix_stack_pop: ''
(process_expression_types) ====
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_INTEGER      i rq:f   0:
========================================================
    PRINT "SCORE:",sc% :PAUSE 40

========================================================
(output_expression_start)
   Frst:1 T:''
(  output_integer) [f,()] i f 
   Frst:0 T:''
(  output_integer) [f,()] i f 
   Frst:0 T:'sc%'
token_is_variable: tok:'sc%'
( output_variable) [f,()] f f sc%
Finalise stack
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f sc%  0:
=================
 BE:
type_check_stack_push: ''

Type Check Stack (1)

000: '' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (2)

000: '' type:i (0)
001: '' type:i (0)
 BE:sc%
type_check_stack_push: 'sc%'

Type Check Stack (3)

000: '' type:i (0)
001: '' type:i (0)
002: 'sc%' type:f (1)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f sc%  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     f rq:f sc%  0:
=================
(process_expression_types) 
==INFIX==

infix_stack_push: ''
infix_stack_push: ''
infix_stack_push: 'sc%'
infix_stack_pop: 'sc%'
(process_expression_types) ==sc%==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_INTEGER      i rq:f   0:
(    output_qcode) N2 EXP_BUFF_ID_INTEGER      i rq:f   0:
(    output_qcode) N3 EXP_BUFF_ID_VARIABLE     f rq:f sc%  0:
========================================================
    WHILE KEY :ENDWH :REM Drain buffer

========================================================
(output_expression_start)
   Frst:1 T:''
(  output_integer) [f,()] i f 
   Frst:0 T:'KEY'
token_is_variable: tok:'KEY'
KEY is function
KEY is function
function_return_type: 'KEY' =>f
process_token: 'KEY' t=>f
 Push:'KEY'
   Frst:0 T:''
(  output_integer) [f,()] i f 
   Frst:0 T:'Drain'
token_is_variable: tok:'Drain'
( output_variable) [f,()] f f Drain
   Frst:0 T:'buffer'
token_is_variable: tok:'buffer'
( output_variable) [f,()] f f buffer
Finalise stack
Pop 'KEY'
( output_operator) [f,()] f f KEY
KEY is function
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f Drain  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f buffer  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     f rq:f KEY  0:
=================
 BE:
type_check_stack_push: ''

Type Check Stack (1)

000: '' type:i (0)
 BE:
type_check_stack_push: ''

Type Check Stack (2)

000: '' type:i (0)
001: '' type:i (0)
 BE:Drain
type_check_stack_push: 'Drain'

Type Check Stack (3)

000: '' type:i (0)
001: '' type:i (0)
002: 'Drain' type:f (1)
 BE:buffer
type_check_stack_push: 'buffer'

Type Check Stack (4)

000: '' type:i (0)
001: '' type:i (0)
002: 'Drain' type:f (1)
003: 'buffer' type:f (1)
 BE:KEY
FN: 2 args
function_return_type: 'KEY' =>f
typecheck_expression:Ret type of KEY : f
type_check_stack_pop: 'buffer'
FN ARG 1 ri buffer 1(f)  Arg not OK
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     f rq:f Drain  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     f rq:f buffer  0:
=================
 Insert after 4 exp_buffer2_i:4
   Found at i:3
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     f rq:f Drain  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     f rq:f buffer  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_AUTOCON      f rq:f autocon f->i  0:
=================
type_check_stack_pop: 'Drain'
FN ARG 0 ri Drain 1(f)  Arg not OK
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     f rq:f Drain  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     f rq:f buffer  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_AUTOCON      f rq:f autocon f->i  0:
=================
 Insert after 3 exp_buffer2_i:5
   Found at i:2
   Copied 4 to 5:
   Copied 3 to 4:
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     f rq:f Drain  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_AUTOCON      f rq:f autocon f->i  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     f rq:f buffer  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_AUTOCON      f rq:f autocon f->i  0:
=================
type_check_stack_push: '000'

Type Check Stack (3)

000: '' type:i (0)
001: '' type:i (0)
002: '000' type:f (1)
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_INTEGER      i rq:f   0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f Drain  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_VARIABLE     f rq:f buffer  0:
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     f rq:f KEY  0:
=================
Expression buffer 2
===================
(dump_exp_buffer2) N1 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N2 EXP_BUFF_ID_INTEGER      i rq:f   0:
(dump_exp_buffer2) N3 EXP_BUFF_ID_VARIABLE     f rq:f Drain  0:
(dump_exp_buffer2) N7 EXP_BUFF_ID_AUTOCON      f rq:f autocon f->i  0:
(dump_exp_buffer2) N4 EXP_BUFF_ID_VARIABLE     f rq:f buffer  0:
(dump_exp_buffer2) N6 EXP_BUFF_ID_AUTOCON      f rq:f autocon f->i  0:
(dump_exp_buffer2) N5 EXP_BUFF_ID_FUNCTION     f rq:f KEY  0:
=================
(process_expression_types) 
==INFIX==

infix_stack_push: ''
infix_stack_push: ''
infix_stack_push: 'Drain'
infix_stack_push: 'buffer'
infix_stack_pop: 'buffer'
infix_stack_pop: 'Drain'
infix_stack_push: 'KEY(Drain buffer )'
infix_stack_pop: 'KEY(Drain buffer )'
(process_expression_types) ==KEY(Drain buffer )==
(process_expression_types) 


(    output_qcode) N1 EXP_BUFF_ID_INTEGER      i rq:f   0:
(    output_qcode) N2 EXP_BUFF_ID_INTEGER      i rq:f   0:
(    output_qcode) N3 EXP_BUFF_ID_VARIABLE     f rq:f Drain  0:
(    output_qcode) N7 EXP_BUFF_ID_AUTOCON      f rq:f autocon f->i  0:
(    output_qcode) N4 EXP_BUFF_ID_VARIABLE     f rq:f buffer  0:
(    output_qcode) N6 EXP_BUFF_ID_AUTOCON      f rq:f autocon f->i  0:
(    output_qcode) N5 EXP_BUFF_ID_FUNCTION     f rq:f KEY  0:
========================================================
    GET :RETURN

========================================================
(output_expression_start)
   Frst:1 T:'GET'
token_is_variable: tok:'GET'
GET is function
GET is function
function_return_type: 'GET' =>f
process_token: 'GET' t=>f
 Push:'GET'
Finalise stack
Pop 'GET'
( output_operator) [f,()] f f GET
GET is function
Expression buffer
=================
( dump_exp_buffer) N0 EXP_BUFF_ID_FUNCTION     f rq:f GET  0:
=================
 BE:GET
FN: 2 args
function_return_type: 'GET' =>f
typecheck_expression:Ret type of GET : f
type_check_stack_pop: Operator stack empty